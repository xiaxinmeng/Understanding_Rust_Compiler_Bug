{"sha": "128f565daeced02b9d90e1d1a6c0988d25fc1701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGY1NjVkYWVjZWQwMmI5ZDkwZTFkMWE2YzA5ODhkMjVmYzE3MDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-23T17:50:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-27T19:59:35Z"}, "message": "Give span to angle bracketed generic arguments", "tree": {"sha": "5a48feb11052715b0cc105e836cc95de7a7dfa5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a48feb11052715b0cc105e836cc95de7a7dfa5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128f565daeced02b9d90e1d1a6c0988d25fc1701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128f565daeced02b9d90e1d1a6c0988d25fc1701", "html_url": "https://github.com/rust-lang/rust/commit/128f565daeced02b9d90e1d1a6c0988d25fc1701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128f565daeced02b9d90e1d1a6c0988d25fc1701/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "html_url": "https://github.com/rust-lang/rust/commit/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97"}], "stats": {"total": 224, "additions": 166, "deletions": 58}, "files": [{"sha": "3ae3671b59347a783b2e7529b910ef01ecf1274f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -865,7 +865,7 @@ impl<'a> LoweringContext<'a> {\n                                             data: &AngleBracketedParameterData,\n                                             param_mode: ParamMode)\n                                             -> hir::AngleBracketedParameterData {\n-        let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings } = data;\n+        let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings, .. } = data;\n         hir::AngleBracketedParameterData {\n             lifetimes: self.lower_lifetimes(lifetimes),\n             types: types.iter().map(|ty| self.lower_ty(ty)).collect(),"}, {"sha": "38d8555334c355192d8563f25fbe9c1ea154f94e", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -195,10 +195,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match item.node {\n             ItemKind::Use(ref view_path) => {\n                 let path = view_path.node.path();\n-                if path.segments.iter().any(|segment| segment.parameters.is_some()) {\n-                    self.err_handler()\n-                        .span_err(path.span, \"generic arguments in import path\");\n-                }\n+                path.segments.iter().find(|segment| segment.parameters.is_some()).map(|segment| {\n+                    self.err_handler().span_err(segment.parameters.as_ref().unwrap().span(),\n+                                                \"generic arguments in import path\");\n+                });\n             }\n             ItemKind::Impl(.., Some(..), _, ref impl_items) => {\n                 self.invalid_visibility(&item.vis, item.span, None);\n@@ -297,10 +297,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_vis(&mut self, vis: &'a Visibility) {\n         match *vis {\n             Visibility::Restricted { ref path, .. } => {\n-                if path.segments.iter().any(|segment| segment.parameters.is_some()) {\n-                    self.err_handler()\n-                        .span_err(path.span, \"generic arguments in visibility path\");\n-                }\n+                path.segments.iter().find(|segment| segment.parameters.is_some()).map(|segment| {\n+                    self.err_handler().span_err(segment.parameters.as_ref().unwrap().span(),\n+                                                \"generic arguments in visibility path\");\n+                });\n             }\n             _ => {}\n         }"}, {"sha": "f8f9b27f148253cd63116ca3b017769861459d6e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -386,9 +386,10 @@ impl<'a> Resolver<'a> {\n     fn resolve_macro_to_def(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                             -> Result<Def, Determinacy> {\n         let ast::Path { ref segments, span } = *path;\n-        if segments.iter().any(|segment| segment.parameters.is_some()) {\n-            self.session.span_err(span, \"generic arguments in macro path\");\n-        }\n+        segments.iter().find(|segment| segment.parameters.is_some()).map(|segment| {\n+            self.session.span_err(segment.parameters.as_ref().unwrap().span(),\n+                                  \"generic arguments in macro path\");\n+        });\n \n         let path: Vec<_> = segments.iter().map(|seg| respan(seg.span, seg.identifier)).collect();\n         let invocation = self.invocations[&scope];"}, {"sha": "4fc737873530e407bd45472f55b101e1602be889", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -153,21 +153,19 @@ pub enum PathParameters {\n }\n \n impl PathParameters {\n-    pub fn span(&self, fallback: Span) -> Span {\n+    pub fn span(&self) -> Span {\n         match *self {\n-            AngleBracketed(ref data) => {\n-                data.lifetimes.get(0).map(|x| x.span).or_else(||\n-                data.types.get(0).map(|x| x.span)).or_else(||\n-                data.bindings.get(0).map(|x| x.span)).unwrap_or(fallback)\n-            }\n-            Parenthesized(ref data) => data.span\n+            AngleBracketed(ref data) => data.span,\n+            Parenthesized(ref data) => data.span,\n         }\n     }\n }\n \n /// A path like `Foo<'a, T>`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Default)]\n pub struct AngleBracketedParameterData {\n+    /// Overall span\n+    pub span: Span,\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present."}, {"sha": "e004f7354ebde2309298d158775bbcaab8b80741", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -312,7 +312,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.path_all(span, true, strs, Vec::new(), Vec::new(), Vec::new())\n     }\n     fn path_all(&self,\n-                sp: Span,\n+                span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n                 lifetimes: Vec<ast::Lifetime>,\n@@ -322,24 +322,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let last_identifier = idents.pop().unwrap();\n         let mut segments: Vec<ast::PathSegment> = Vec::new();\n         if global {\n-            segments.push(ast::PathSegment::crate_root(sp));\n+            segments.push(ast::PathSegment::crate_root(span));\n         }\n \n-        segments.extend(idents.into_iter().map(|i| ast::PathSegment::from_ident(i, sp)));\n+        segments.extend(idents.into_iter().map(|i| ast::PathSegment::from_ident(i, span)));\n         let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n-            ast::AngleBracketedParameterData { lifetimes, types, bindings }.into()\n+            ast::AngleBracketedParameterData { lifetimes, types, bindings, span }.into()\n         } else {\n             None\n         };\n-        segments.push(ast::PathSegment {\n-            identifier: last_identifier,\n-            span: sp,\n-            parameters: parameters\n-        });\n-        ast::Path {\n-            span: sp,\n-            segments: segments,\n-        }\n+        segments.push(ast::PathSegment { identifier: last_identifier, span, parameters });\n+        ast::Path { span, segments }\n     }\n \n     /// Constructs a qualified path.\n@@ -366,7 +359,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n         let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n-            ast::AngleBracketedParameterData { lifetimes, types, bindings }.into()\n+            ast::AngleBracketedParameterData { lifetimes, types, bindings, span: ident.span }.into()\n         } else {\n             None\n         };"}, {"sha": "8c616df858a49ab4a85bfa6888f20c6e6d28d5ce", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -471,10 +471,11 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedP\n                                                            fld: &mut T)\n                                                            -> AngleBracketedParameterData\n {\n-    let AngleBracketedParameterData { lifetimes, types, bindings } = data;\n+    let AngleBracketedParameterData { lifetimes, types, bindings, span } = data;\n     AngleBracketedParameterData { lifetimes: fld.fold_lifetimes(lifetimes),\n                                   types: types.move_map(|ty| fld.fold_ty(ty)),\n-                                  bindings: bindings.move_map(|b| fld.fold_ty_binding(b)) }\n+                                  bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n+                                  span: fld.new_span(span) }\n }\n \n pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedParameterData,"}, {"sha": "d1591a219b325e72fed95a700ab08b4557b63247", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -1808,8 +1808,8 @@ impl<'a> Parser<'a> {\n                 // `<'a, T, A = U>`\n                 let (lifetimes, types, bindings) = self.parse_generic_args()?;\n                 self.expect_gt()?;\n-                let _span = lo.to(self.prev_span);\n-                AngleBracketedParameterData { lifetimes, types, bindings }.into()\n+                let span = lo.to(self.prev_span);\n+                AngleBracketedParameterData { lifetimes, types, bindings, span }.into()\n             } else {\n                 // `(T, U) -> R`\n                 self.bump(); // `(`\n@@ -2357,7 +2357,7 @@ impl<'a> Parser<'a> {\n             _ => {\n                 // Field access `expr.f`\n                 if let Some(parameters) = segment.parameters {\n-                    self.span_err(parameters.span(segment.span),\n+                    self.span_err(parameters.span(),\n                                   \"field expressions may not have generic arguments\");\n                 }\n "}, {"sha": "3a701f91314b6b2a3084054b1fddec81580940fc", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -239,6 +239,12 @@ pub struct SpanLabel {\n     pub label: Option<String>,\n }\n \n+impl Default for Span {\n+    fn default() -> Self {\n+        DUMMY_SP\n+    }\n+}\n+\n impl serialize::UseSpecializedEncodable for Span {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_struct(\"Span\", 2, |s| {"}, {"sha": "0f123997ca1d975560de09c9bcb3cd72f7c19686", "filename": "src/test/compile-fail/macro-with-seps-err-msg.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -10,28 +10,8 @@\n \n // gate-test-use_extern_macros\n \n-macro_rules! m {\n-    ($p1: path) => {\n-        #[derive($p1)] struct U;\n-    }\n-}\n-\n fn main() {\n     globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n     #[derive(foo::Bar)] struct T; //~ ERROR non-ident macro paths are experimental\n     ::foo!(); //~ ERROR non-ident macro paths are experimental\n-\n-    foo::<T>!();\n-    //~^ ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    foo::<>!();\n-    //~^ ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    m!(MyTrait<>);\n-    //~^ ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n-    //~| ERROR generic arguments in macro path\n }"}, {"sha": "d1e3d20f4ba1e99a7b20488f3cf351c9fe27342e", "filename": "src/test/ui/span/import-ty-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "previous_filename": "src/test/compile-fail/import-ty-params.rs"}, {"sha": "de959a14cc5bbea72575b61b5ce2f4bcd4ed4ae9", "filename": "src/test/ui/span/import-ty-params.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimport-ty-params.stderr?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -0,0 +1,14 @@\n+error: generic arguments in import path\n+  --> $DIR/import-ty-params.rs:24:25\n+   |\n+24 |     import! { a::b::c::S<u8> } //~ ERROR generic arguments in import path\n+   |                         ^^^^\n+\n+error: generic arguments in import path\n+  --> $DIR/import-ty-params.rs:27:25\n+   |\n+27 |     import! { a::b::c::S<> } //~ ERROR generic arguments in import path\n+   |                         ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "08a7518dff9d740e6fff644b209af5062ed83b0a", "filename": "src/test/ui/span/macro-ty-params.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ($p1: path) => {\n+        #[derive($p1)] struct U;\n+    }\n+}\n+\n+fn main() {\n+    foo::<T>!();\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    foo::<>!();\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    m!(MyTrait<>);\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+}"}, {"sha": "ff3847ce1fa80d745d55593a73c69a0d38d3d591", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -0,0 +1,62 @@\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:18:8\n+   |\n+18 |     foo::<T>!();\n+   |        ^^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:22:8\n+   |\n+22 |     foo::<>!();\n+   |        ^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:26:15\n+   |\n+26 |     m!(MyTrait<>);\n+   |               ^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:26:15\n+   |\n+26 |     m!(MyTrait<>);\n+   |               ^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:26:15\n+   |\n+26 |     m!(MyTrait<>);\n+   |               ^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:22:8\n+   |\n+22 |     foo::<>!();\n+   |        ^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:18:8\n+   |\n+18 |     foo::<T>!();\n+   |        ^^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:18:8\n+   |\n+18 |     foo::<T>!();\n+   |        ^^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:22:8\n+   |\n+22 |     foo::<>!();\n+   |        ^^^^\n+\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:26:15\n+   |\n+26 |     m!(MyTrait<>);\n+   |               ^^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "8d4817e80b95c1d3a35ef01628f6cd032cdd886d", "filename": "src/test/ui/span/visibility-ty-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "previous_filename": "src/test/compile-fail/privacy/restricted/ty-params.rs"}, {"sha": "0460b7ca025a67fecfb5e6588082d46f8787dbc9", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128f565daeced02b9d90e1d1a6c0988d25fc1701/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=128f565daeced02b9d90e1d1a6c0988d25fc1701", "patch": "@@ -0,0 +1,22 @@\n+error[E0577]: expected module, found struct `S`\n+  --> $DIR/visibility-ty-params.rs:16:5\n+   |\n+16 | m!{ S<u8> } //~ ERROR generic arguments in visibility path\n+   |     -^^^^\n+   |     |\n+   |     did you mean `m`?\n+\n+error: generic arguments in visibility path\n+  --> $DIR/visibility-ty-params.rs:16:6\n+   |\n+16 | m!{ S<u8> } //~ ERROR generic arguments in visibility path\n+   |      ^^^^\n+\n+error: generic arguments in visibility path\n+  --> $DIR/visibility-ty-params.rs:20:10\n+   |\n+20 |     m!{ m<> } //~ ERROR generic arguments in visibility path\n+   |          ^^\n+\n+error: aborting due to 3 previous errors\n+"}]}