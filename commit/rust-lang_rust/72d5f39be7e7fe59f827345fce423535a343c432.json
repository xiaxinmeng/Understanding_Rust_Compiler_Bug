{"sha": "72d5f39be7e7fe59f827345fce423535a343c432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDVmMzliZTdlN2ZlNTlmODI3MzQ1ZmNlNDIzNTM1YTM0M2M0MzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T06:28:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:16:02Z"}, "message": "Fix fallout from rebasing.", "tree": {"sha": "d38e6b2772464fff2f1d52cfb1f8adf7ce736332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38e6b2772464fff2f1d52cfb1f8adf7ce736332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d5f39be7e7fe59f827345fce423535a343c432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d5f39be7e7fe59f827345fce423535a343c432", "html_url": "https://github.com/rust-lang/rust/commit/72d5f39be7e7fe59f827345fce423535a343c432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d5f39be7e7fe59f827345fce423535a343c432/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8501c9dee53b78f5027ca215cd8b6711184fe9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8501c9dee53b78f5027ca215cd8b6711184fe9c3", "html_url": "https://github.com/rust-lang/rust/commit/8501c9dee53b78f5027ca215cd8b6711184fe9c3"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "ee2745ca66bc59980a675bd7dd7da2f24129d447", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -1193,15 +1193,15 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n-      ast::ItemDefaultImpl(unsafety, ref ast_trait_ref) => {\n+      ast::ItemDefaultImpl(unsafety, _) => {\n           add_to_index(item, rbml_w, index);\n           rbml_w.start_tag(tag_items_data_item);\n           encode_def_id(rbml_w, def_id);\n           encode_family(rbml_w, 'd');\n           encode_name(rbml_w, item.ident.name);\n           encode_unsafety(rbml_w, unsafety);\n \n-          let trait_ref = ty::node_id_to_trait_ref(tcx, ast_trait_ref.ref_id);\n+          let trait_ref = ty::impl_id_to_trait_ref(tcx, item.id);\n           encode_trait_ref(rbml_w, ecx, &*trait_ref, tag_item_trait_ref);\n           rbml_w.end_tag();\n       }"}, {"sha": "9131363339710f35bf22e44868e8af02db23497b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -5116,15 +5116,12 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n         if id.krate == ast::LOCAL_CRATE {\n             debug!(\"(impl_trait_ref) searching for trait impl {:?}\", id);\n             if let Some(ast_map::NodeItem(item)) = cx.map.find(id.node) {\n-                if let ast::ItemImpl(_, _, _, ref opt_trait, _, _) = item.node {\n-                    opt_trait.as_ref().map(|_| {\n-                        ty::impl_id_to_trait_ref(cx, id.node)\n-                    })\n-                } else {\n-                    None\n-                        ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n-                            Some(ty::node_id_to_trait_ref(cx, ast_trait_ref.ref_id))\n-                        }\n+                match item.node {\n+                    ast::ItemImpl(_, _, _, Some(_), _, _) |\n+                    ast::ItemDefaultImpl(..) => {\n+                        Some(ty::impl_id_to_trait_ref(cx, id.node))\n+                    }\n+                    _ => None\n                 }\n             } else {\n                 None"}, {"sha": "67e2b409c8e2213d8dfd8613d68d803972992dd5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -504,8 +504,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 parent.clone()\n             }\n \n-            ItemImpl(..) => parent.clone(),\n             ItemDefaultImpl(_, _) |\n+            ItemImpl(..) => parent.clone(),\n \n             ItemTrait(_, _, _, ref items) => {\n                 let name_bindings ="}, {"sha": "95523be68c3bf9ffa3ec594ca0c3202db98e267f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -2772,7 +2772,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ItemDefaultImpl(_, ref trait_ref) => {\n-                self.resolve_trait_reference(item.id, trait_ref, TraitImplementation);\n+                self.with_optional_trait_ref(Some(trait_ref), |_| {});\n             }\n             ItemImpl(_, _,\n                      ref generics,\n@@ -3022,12 +3022,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     fn with_optional_trait_ref<T, F>(&mut self,\n-                                     opt_trait_ref: &Option<TraitRef>,\n+                                     opt_trait_ref: Option<&TraitRef>,\n                                      f: F) -> T where\n         F: FnOnce(&mut Resolver) -> T,\n     {\n         let mut new_val = None;\n-        if let Some(ref trait_ref) = *opt_trait_ref {\n+        if let Some(trait_ref) = opt_trait_ref {\n             match self.resolve_trait_reference(trait_ref.ref_id, &trait_ref.path, 0) {\n                 Ok(path_res) => {\n                     self.record_def(trait_ref.ref_id, path_res);\n@@ -3057,7 +3057,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             this.visit_generics(generics);\n \n             // Resolve the trait reference, if necessary.\n-            this.with_optional_trait_ref(opt_trait_reference, |this| {\n+            this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this| {\n                 // Resolve the self type.\n                 this.visit_ty(self_type);\n "}, {"sha": "371b9268fba0de800de32544ce97f95de7f9b707", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -1004,7 +1004,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 self.collected_paths.push((p.id, path.clone(), false, recorder::StructRef));\n                 visit::walk_path(self, path);\n \n-                let def = self.analysis.ty_cx.def_map.borrow()[p.id];\n+                let def = self.analysis.ty_cx.def_map.borrow()[p.id].full_def();\n                 let struct_def = match def {\n                     def::DefConst(..) => None,\n                     def::DefVariant(_, variant_id, _) => Some(variant_id),"}, {"sha": "95dafccd866bf3369136c8f936b31edf362e7397", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -93,10 +93,10 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n+            ast::ItemDefaultImpl(..) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: default trait impl {}\", item.repr(self.tcx));\n-                let trait_ref = ty::node_id_to_trait_ref(self.tcx, ast_trait_ref.ref_id);\n+                let trait_ref = ty::impl_trait_ref(self.tcx, def_id).unwrap();\n                 if trait_ref.def_id.krate != ast::LOCAL_CRATE {\n                     span_err!(self.tcx.sess, item.span, E0318,\n                               \"cannot create default implementations for traits outside the \\"}, {"sha": "bc0c61ad7ad52aed65855a181b271f76097445fe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5f39be7e7fe59f827345fce423535a343c432/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=72d5f39be7e7fe59f827345fce423535a343c432", "patch": "@@ -649,8 +649,12 @@ fn convert_item(ccx: &CollectCtxt, it: &ast::Item) {\n                                    &enum_definition.variants);\n         },\n         ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n-            let trait_ref = astconv::instantiate_trait_ref(ccx, &ExplicitRscope,\n-                                                           ast_trait_ref, None, None);\n+            let trait_ref = astconv::instantiate_trait_ref(ccx,\n+                                                           &ExplicitRscope,\n+                                                           ast_trait_ref,\n+                                                           Some(it.id),\n+                                                           None,\n+                                                           None);\n \n             ty::record_default_trait_implementation(tcx, trait_ref.def_id, local_def(it.id))\n         }"}]}