{"sha": "852fc6d2b61e7b1f45f2679d025b824af70f89b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MmZjNmQyYjYxZTdiMWY0NWYyNjc5ZDAyNWI4MjRhZjcwZjg5YjE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-04T17:35:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: don't support `tcx.lift` returning `None` in ppaux.", "tree": {"sha": "083b93ce6ac0a6ef68adbb731b68830de3422479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083b93ce6ac0a6ef68adbb731b68830de3422479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/852fc6d2b61e7b1f45f2679d025b824af70f89b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/852fc6d2b61e7b1f45f2679d025b824af70f89b1", "html_url": "https://github.com/rust-lang/rust/commit/852fc6d2b61e7b1f45f2679d025b824af70f89b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/852fc6d2b61e7b1f45f2679d025b824af70f89b1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372b1a5930f3dc2b878ae0ed3c0d939451c8ac24", "url": "https://api.github.com/repos/rust-lang/rust/commits/372b1a5930f3dc2b878ae0ed3c0d939451c8ac24", "html_url": "https://github.com/rust-lang/rust/commit/372b1a5930f3dc2b878ae0ed3c0d939451c8ac24"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "0dc1aea0a96826b5c17525cc268666fc696c0466", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/852fc6d2b61e7b1f45f2679d025b824af70f89b1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852fc6d2b61e7b1f45f2679d025b824af70f89b1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=852fc6d2b61e7b1f45f2679d025b824af70f89b1", "patch": "@@ -404,17 +404,16 @@ impl PrintContext {\n                     *has_default.unwrap_or(&false)\n                 };\n                 if has_default {\n-                    if let Some(substs) = tcx.lift(&substs) {\n-                        let types = substs.types().rev().skip(child_types);\n-                        for ((def_id, has_default), actual) in type_params.zip(types) {\n-                            if !has_default {\n-                                break;\n-                            }\n-                            if tcx.type_of(def_id).subst(tcx, substs) != actual {\n-                                break;\n-                            }\n-                            num_supplied_defaults += 1;\n+                    let substs = tcx.lift(&substs).expect(\"could not lift for printing\");\n+                    let types = substs.types().rev().skip(child_types);\n+                    for ((def_id, has_default), actual) in type_params.zip(types) {\n+                        if !has_default {\n+                            break;\n                         }\n+                        if tcx.type_of(def_id).subst(tcx, substs) != actual {\n+                            break;\n+                        }\n+                        num_supplied_defaults += 1;\n                     }\n                 }\n             }\n@@ -527,15 +526,13 @@ impl PrintContext {\n         Ok(())\n     }\n \n-    // FIXME(eddyb) replace `'almost_tcx` with `'tcx` when possible/needed.\n-    fn in_binder<'a, 'gcx, 'tcx, 'almost_tcx, T, U, F>(\n+    fn in_binder<'a, 'gcx, 'tcx, T, F>(\n         &mut self,\n         f: &mut F,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        original: &ty::Binder<T>,\n-        lifted: Option<ty::Binder<U>>,\n+        value: ty::Binder<T>,\n     ) -> fmt::Result\n-        where T: Print<'almost_tcx>, U: Print<'tcx> + TypeFoldable<'tcx>, F: fmt::Write\n+        where T: Print<'tcx> + TypeFoldable<'tcx>, F: fmt::Write\n     {\n         fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n@@ -550,12 +547,6 @@ impl PrintContext {\n         // clearly differentiate between named and unnamed regions in\n         // the output. We'll probably want to tweak this over time to\n         // decide just how much information to give.\n-        let value = if let Some(v) = lifted {\n-            v\n-        } else {\n-            return original.skip_binder().print_display(f, self);\n-        };\n-\n         if self.binder_depth == 0 {\n             self.prepare_late_bound_region_info(&value);\n         }\n@@ -1101,7 +1092,8 @@ impl fmt::Debug for ty::FloatVarValue {\n           for<'a> <T as ty::Lift<'a>>::Lifted: fmt::Display + TypeFoldable<'a>\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))\n+        ty::tls::with(|tcx| in_binder(f, tcx, tcx.lift(self)\n+            .expect(\"could not lift for printing\")))\n     }\n }*/\n \n@@ -1118,7 +1110,8 @@ define_print_multi! {\n     ]\n     (self, f, cx) {\n         display {\n-            ty::tls::with(|tcx| cx.in_binder(f, tcx, self, tcx.lift(self)))\n+            ty::tls::with(|tcx| cx.in_binder(f, tcx, tcx.lift(self)\n+                .expect(\"could not lift for printing\")))\n         }\n     }\n }\n@@ -1186,10 +1179,9 @@ define_print! {\n                 }\n                 FnDef(def_id, substs) => {\n                     ty::tls::with(|tcx| {\n-                        let mut sig = tcx.fn_sig(def_id);\n-                        if let Some(substs) = tcx.lift(&substs) {\n-                            sig = sig.subst(tcx, substs);\n-                        }\n+                        let substs = tcx.lift(&substs)\n+                            .expect(\"could not lift for printing\");\n+                        let sig = tcx.fn_sig(def_id).subst(tcx, substs);\n                         print!(f, cx, print(sig), write(\" {{\"))\n                     })?;\n                     cx.parameterized(f, substs, def_id, &[])?;\n@@ -1260,11 +1252,9 @@ define_print! {\n                         }\n                         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n                         // by looking up the projections associated with the def_id.\n-                        let predicates_of = tcx.predicates_of(def_id);\n-                        let substs = tcx.lift(&substs).unwrap_or_else(|| {\n-                            tcx.intern_substs(&[])\n-                        });\n-                        let bounds = predicates_of.instantiate(tcx, substs);\n+                        let substs = tcx.lift(&substs)\n+                            .expect(\"could not lift for printing\");\n+                        let bounds = tcx.predicates_of(def_id).instantiate(tcx, substs);\n \n                         let mut first = true;\n                         let mut is_sized = false;\n@@ -1331,7 +1321,8 @@ define_print! {\n                     print!(f, cx, write(\" \"), print(witness), write(\"]\"))\n                 }),\n                 GeneratorWitness(types) => {\n-                    ty::tls::with(|tcx| cx.in_binder(f, tcx, &types, tcx.lift(&types)))\n+                    ty::tls::with(|tcx| cx.in_binder(f, tcx, tcx.lift(&types)\n+                        .expect(\"could not lift for printing\")))\n                 }\n                 Closure(did, substs) => ty::tls::with(|tcx| {\n                     let upvar_tys = substs.upvar_tys(did, tcx);"}]}