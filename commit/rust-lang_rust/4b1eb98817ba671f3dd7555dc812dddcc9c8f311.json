{"sha": "4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "node_id": "C_kwDOAAsO6NoAKDRiMWViOTg4MTdiYTY3MWYzZGQ3NTU1ZGM4MTJkZGRjYzljOGYzMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T10:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T10:20:30Z"}, "message": "Auto merge of #12161 - Veykril:completion-rev, r=Veykril\n\ninternal: Lift out item list path completions from (un)qualified_path\n\ncc https://github.com/rust-lang/rust-analyzer/issues/12144", "tree": {"sha": "8ff5460f9b2ee8b3cda505c21bd2cc817b06a5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff5460f9b2ee8b3cda505c21bd2cc817b06a5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "html_url": "https://github.com/rust-lang/rust/commit/4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a58f672e2478edd8bf8a90097ad38590619cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a58f672e2478edd8bf8a90097ad38590619cc4", "html_url": "https://github.com/rust-lang/rust/commit/52a58f672e2478edd8bf8a90097ad38590619cc4"}, {"sha": "25d133e3b8bc1241063db18ea2e47ba893a7260f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d133e3b8bc1241063db18ea2e47ba893a7260f", "html_url": "https://github.com/rust-lang/rust/commit/25d133e3b8bc1241063db18ea2e47ba893a7260f"}], "stats": {"total": 165, "additions": 97, "deletions": 68}, "files": [{"sha": "f8b1ff7310953894965f5d37c5ba0640e5984b77", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -6,6 +6,7 @@ pub(crate) mod extern_abi;\n pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod format_string;\n+pub(crate) mod item_list;\n pub(crate) mod keyword;\n pub(crate) mod lifetime;\n pub(crate) mod mod_;"}, {"sha": "5ae119c534a4284c329ab39dfe77f515949f9e93", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -0,0 +1,48 @@\n+//! Completion of paths and keywords at item list position.\n+\n+use crate::{\n+    completions::module_or_fn_macro,\n+    context::{PathCompletionCtx, PathKind, PathQualifierCtx},\n+    CompletionContext, Completions,\n+};\n+\n+pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext) {\n+    let _p = profile::span(\"complete_unqualified_path\");\n+    if ctx.is_path_disallowed() || ctx.has_unfinished_impl_or_trait_prev_sibling() {\n+        return;\n+    }\n+\n+    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n+        Some(PathCompletionCtx {\n+            kind: Some(PathKind::Item), is_absolute_path, qualifier, ..\n+        }) => (is_absolute_path, qualifier),\n+        _ => return,\n+    };\n+\n+    match qualifier {\n+        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+            if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n+                for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n+                    if let Some(def) = module_or_fn_macro(ctx.db, def) {\n+                        acc.add_resolution(ctx, name, def);\n+                    }\n+                }\n+            }\n+\n+            if *is_super_chain {\n+                acc.add_keyword(ctx, \"super::\");\n+            }\n+        }\n+        None if is_absolute_path => {\n+            acc.add_crate_roots(ctx);\n+        }\n+        None => {\n+            ctx.process_all_names(&mut |name, def| {\n+                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n+                    acc.add_resolution(ctx, name, def);\n+                }\n+            });\n+            acc.add_nameref_keywords_with_colon(ctx);\n+        }\n+    }\n+}"}, {"sha": "93bd3468469bc1e045a9314cfbee5fa998042614", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     if let Some(PathKind::Vis { .. }) = ctx.path_kind() {\n         return;\n     }\n-    if ctx.has_impl_or_trait_prev_sibling() {\n+    if ctx.has_unfinished_impl_or_trait_prev_sibling() {\n         add_keyword(\"where\", \"where\");\n         if ctx.has_impl_prev_sibling() {\n             add_keyword(\"for\", \"for\");"}, {"sha": "a761eeebb2ff3b0134f97601f458d36fc0b44a58", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -196,12 +196,13 @@ fn pattern_path_completion(\n         // qualifier can only be none here if we are in a TuplePat or RecordPat in which case special characters have to follow the path\n         None if *is_absolute_path => acc.add_crate_roots(ctx),\n         None => {\n-            cov_mark::hit!(unqualified_path_only_modules_in_import);\n             ctx.process_all_names(&mut |name, res| {\n-                if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                // FIXME: properly filter here\n+                if let ScopeDef::ModuleDef(_) = res {\n                     acc.add_resolution(ctx, name, res);\n                 }\n             });\n+\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n     }"}, {"sha": "d12f8490bd1e06d4528329f9a27b0ade3e934280", "filename": "crates/ide-completion/src/completions/qualified_path.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -5,14 +5,12 @@ use ide_db::FxHashSet;\n use syntax::ast;\n \n use crate::{\n-    completions::module_or_fn_macro,\n     context::{PathCompletionCtx, PathKind},\n-    patterns::ImmediateLocation,\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() || ctx.has_impl_or_trait_prev_sibling() {\n+    if ctx.is_path_disallowed() || ctx.has_unfinished_impl_or_trait_prev_sibling() {\n         return;\n     }\n     if ctx.pattern_ctx.is_some() {\n@@ -54,26 +52,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n \n-    match ctx.completion_location {\n-        Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n-            if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n-                for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n-                    if let Some(def) = module_or_fn_macro(ctx.db, def) {\n-                        acc.add_resolution(ctx, name, def);\n-                    }\n-                }\n-            }\n-            return;\n-        }\n-        _ => (),\n-    }\n-\n     match kind {\n         Some(\n             PathKind::Pat\n             | PathKind::Attr { .. }\n             | PathKind::Vis { .. }\n             | PathKind::Use\n+            | PathKind::Item\n             | PathKind::Derive,\n         ) => {\n             return;"}, {"sha": "a1675b896ddf505c8bb22c795024d04fabc75ba9", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n     if !(ctx.expects_item() || ctx.has_block_expr_parent())\n         || ctx.previous_token_is(T![unsafe])\n         || ctx.path_qual().is_some()\n-        || ctx.has_impl_or_trait_prev_sibling()\n+        || ctx.has_unfinished_impl_or_trait_prev_sibling()\n     {\n         return;\n     }"}, {"sha": "d5272be882ae2e1510bdbc21b8a2f193dda60748", "filename": "crates/ide-completion/src/completions/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -547,12 +547,7 @@ impl Test for T {\n     type Test = fn $0;\n }\n \",\n-            expect![[r#\"\n-                sp Self\n-                st T\n-                tt Test\n-                bt u32\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n     }\n "}, {"sha": "5de602e6138237510d9b2c3cd761d6defc8d9467", "filename": "crates/ide-completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -4,22 +4,22 @@ use hir::ScopeDef;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    completions::module_or_fn_macro,\n     context::{PathCompletionCtx, PathKind},\n     patterns::ImmediateLocation,\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_unqualified_path\");\n-    if ctx.is_path_disallowed() || ctx.has_impl_or_trait_prev_sibling() {\n+    if ctx.is_path_disallowed() || ctx.has_unfinished_impl_or_trait_prev_sibling() {\n         return;\n     }\n-    match ctx.path_context {\n+\n+    match &ctx.path_context {\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,\n-            kind: None | Some(PathKind::Expr | PathKind::Type | PathKind::Item),\n+            kind: None | Some(PathKind::Expr | PathKind::Type),\n             ..\n         }) => (),\n         _ => return,\n@@ -28,15 +28,6 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     acc.add_nameref_keywords(ctx);\n \n     match &ctx.completion_location {\n-        Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n-            // only show macros in {Assoc}ItemList\n-            ctx.process_all_names(&mut |name, def| {\n-                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n-                    acc.add_resolution(ctx, name, def);\n-                }\n-            });\n-            return;\n-        }\n         Some(ImmediateLocation::TypeBound) => {\n             ctx.process_all_names(&mut |name, res| {\n                 let add_resolution = match res {"}, {"sha": "6682bc56d1890cbf88cbd305b1523cb3e8145d24", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -270,13 +270,17 @@ impl<'a> CompletionContext<'a> {\n             || matches!(self.name_ctx, Some(NameContext::RecordField))\n     }\n \n-    pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n+    /// Whether the cursor is right after a trait or impl header.\n+    /// trait Foo ident$0\n+    // FIXME: This probably shouldn't exist\n+    pub(crate) fn has_unfinished_impl_or_trait_prev_sibling(&self) -> bool {\n         matches!(\n             self.prev_sibling,\n             Some(ImmediatePrevSibling::ImplDefType | ImmediatePrevSibling::TraitDefName)\n         )\n     }\n \n+    // FIXME: This probably shouldn't exist\n     pub(crate) fn has_impl_prev_sibling(&self) -> bool {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::ImplDefType))\n     }\n@@ -289,6 +293,7 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::IfExpr))\n     }\n \n+    // FIXME: This shouldn't exist\n     pub(crate) fn is_path_disallowed(&self) -> bool {\n         self.previous_token_is(T![unsafe])\n             || matches!("}, {"sha": "473900397aea6eb8a4bcf05142cd0659aaaa7d7c", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -155,6 +155,7 @@ pub fn completions(\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n     completions::format_string::format_string(&mut acc, &ctx);\n+    completions::item_list::complete_item_list(&mut acc, &ctx);\n     completions::inferred_type(&mut acc, &ctx);\n     completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n     completions::lifetime::complete_label(&mut acc, &ctx);"}, {"sha": "5d324f0965f712a3cb7db21f3491ea050b44d885", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -95,7 +95,7 @@ fn after_struct_name() {\n             ma makro!(\u2026)           macro_rules! makro\n             md module\n             kw const\n-            kw crate\n+            kw crate::\n             kw enum\n             kw extern\n             kw fn\n@@ -104,10 +104,10 @@ fn after_struct_name() {\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n+            kw self::\n             kw static\n             kw struct\n-            kw super\n+            kw super::\n             kw trait\n             kw type\n             kw union\n@@ -129,7 +129,7 @@ fn after_fn_name() {\n             ma makro!(\u2026)           macro_rules! makro\n             md module\n             kw const\n-            kw crate\n+            kw crate::\n             kw enum\n             kw extern\n             kw fn\n@@ -138,10 +138,10 @@ fn after_fn_name() {\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n+            kw self::\n             kw static\n             kw struct\n-            kw super\n+            kw super::\n             kw trait\n             kw type\n             kw union"}, {"sha": "f3208129364c01a3d4aa9359d0ac8d585662a5c0", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -15,7 +15,7 @@ fn in_mod_item_list() {\n         expect![[r#\"\n             ma makro!(\u2026)           macro_rules! makro\n             kw const\n-            kw crate\n+            kw crate::\n             kw enum\n             kw extern\n             kw fn\n@@ -24,10 +24,10 @@ fn in_mod_item_list() {\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n+            kw self::\n             kw static\n             kw struct\n-            kw super\n+            kw super::\n             kw trait\n             kw type\n             kw union\n@@ -48,7 +48,7 @@ fn in_source_file_item_list() {\n             ma makro!(\u2026)           macro_rules! makro\n             md module\n             kw const\n-            kw crate\n+            kw crate::\n             kw enum\n             kw extern\n             kw fn\n@@ -57,10 +57,10 @@ fn in_source_file_item_list() {\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n+            kw self::\n             kw static\n             kw struct\n-            kw super\n+            kw super::\n             kw trait\n             kw type\n             kw union\n@@ -166,13 +166,13 @@ fn in_impl_assoc_item_list() {\n             ma makro!(\u2026)  macro_rules! makro\n             md module\n             kw const\n-            kw crate\n+            kw crate::\n             kw fn\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n-            kw super\n+            kw self::\n+            kw super::\n             kw type\n             kw unsafe\n         \"#]],\n@@ -203,10 +203,10 @@ fn in_trait_assoc_item_list() {\n             ma makro!(\u2026) macro_rules! makro\n             md module\n             kw const\n-            kw crate\n+            kw crate::\n             kw fn\n-            kw self\n-            kw super\n+            kw self::\n+            kw super::\n             kw type\n             kw unsafe\n         \"#]],\n@@ -240,13 +240,13 @@ impl Test for () {\n             md module\n             ta type Type1 =\n             kw const\n-            kw crate\n+            kw crate::\n             kw fn\n             kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw self\n-            kw super\n+            kw self::\n+            kw super::\n             kw type\n             kw unsafe\n         \"#]],"}, {"sha": "3ecb2f16374063eda6b3e45f8ca5c46f4e21a0d8", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1eb98817ba671f3dd7555dc812dddcc9c8f311/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=4b1eb98817ba671f3dd7555dc812dddcc9c8f311", "patch": "@@ -394,6 +394,9 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n+            fn foo()   fn()\n+            st Bar\n+            bt u32\n             kw crate::\n             kw self::\n             kw super::\n@@ -403,19 +406,18 @@ fn foo() {\n         r#\"\n struct Foo { bar: u32 }\n fn foo() {\n-    match Foo { bar: 0 } {\n+    match (Foo { bar: 0 }) {\n         F$0 { bar } => {}\n     }\n }\n \"#,\n         expect![[r#\"\n-            fn foo()  fn()\n+            fn foo()   fn()\n             st Foo\n             bt u32\n-            kw crate\n-            kw return\n-            kw self\n-            kw super\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n     check_empty("}]}