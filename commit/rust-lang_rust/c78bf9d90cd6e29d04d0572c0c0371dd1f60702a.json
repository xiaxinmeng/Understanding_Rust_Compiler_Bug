{"sha": "c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OGJmOWQ5MGNkNmUyOWQwNGQwNTcyYzBjMDM3MWRkMWY2MDcwMmE=", "commit": {"author": {"name": "ggomez", "email": "ggomez@ggo.ifr.lan", "date": "2016-01-29T15:25:56Z"}, "committer": {"name": "ggomez", "email": "ggomez@ggo.ifr.lan", "date": "2016-01-29T15:37:02Z"}, "message": "Add check for unused error codes", "tree": {"sha": "d1b4f7fc721e029b6649836a01ea129ceeb6b466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b4f7fc721e029b6649836a01ea129ceeb6b466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "html_url": "https://github.com/rust-lang/rust/commit/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be", "html_url": "https://github.com/rust-lang/rust/commit/7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "1b15d2c8598e57f3d70db0d3f616ed6bfe3c619f", "filename": "src/etc/errorck.py", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "patch": "@@ -21,8 +21,31 @@\n \n src_dir = sys.argv[1]\n errcode_map = {}\n+errcode_checked = []\n+errcode_not_found = []\n error_re = re.compile(\"(E\\d\\d\\d\\d)\")\n \n+def check_unused_error_codes(error_codes, check_error_codes, filenames, dirnames, dirpath):\n+    for filename in filenames:\n+        if filename == \"diagnostics.rs\" or not filename.endswith(\".rs\"):\n+            continue\n+        path = os.path.join(dirpath, filename)\n+\n+        with open(path, 'r') as f:\n+            for line in f:\n+                match = error_re.search(line)\n+                if match:\n+                    errcode = match.group(1)\n+                    if errcode in error_codes:\n+                        error_codes.remove(errcode)\n+                    if errcode not in check_error_codes:\n+                        check_error_codes.append(errcode)\n+    for dirname in dirnames:\n+        path = os.path.join(dirpath, dirname)\n+        for (dirpath, dnames, fnames) in os.walk(path):\n+            check_unused_error_codes(error_codes, check_error_codes, fnames, dnames, dirpath)\n+\n+\n # In the register_long_diagnostics! macro, entries look like this:\n #\n # EXXXX: r##\"\n@@ -35,19 +58,23 @@\n long_diag_begin = \"r##\\\"\"\n long_diag_end = \"\\\"##\"\n \n+errors = False\n+all_errors = []\n+\n for (dirpath, dirnames, filenames) in os.walk(src_dir):\n     if \"src/test\" in dirpath or \"src/llvm\" in dirpath:\n         # Short circuit for fast\n         continue\n \n+    errcode_to_check = []\n     for filename in filenames:\n         if filename != \"diagnostics.rs\":\n             continue\n-\n         path = os.path.join(dirpath, filename)\n \n         with open(path, 'r') as f:\n             inside_long_diag = False\n+            errcode_to_check = []\n             for line_num, line in enumerate(f, start=1):\n                 if inside_long_diag:\n                     # Skip duplicate error code checking for this line\n@@ -65,16 +92,36 @@\n                         errcode_map[errcode] = existing + new_record\n                     else:\n                         errcode_map[errcode] = new_record\n+                        # we don't check if this is a long error explanation\n+                        if (long_diag_begin not in line and not line.strip().startswith(\"//\")\n+                            and errcode not in errcode_to_check and errcode not in errcode_checked\n+                            and errcode not in errcode_not_found):\n+                            errcode_to_check.append(errcode)\n \n                 if long_diag_begin in line:\n                     inside_long_diag = True\n+        break\n+    check_unused_error_codes(errcode_to_check, errcode_checked, filenames, dirnames, dirpath)\n+    if len(errcode_to_check) > 0:\n+        for errcode in errcode_to_check:\n+            if errcode in errcode_checked:\n+                continue\n+            errcode_not_found.append(errcode)\n+\n+if len(errcode_not_found) > 0:\n+    errcode_not_found.sort()\n+    for errcode in errcode_not_found:\n+        if errcode in errcode_checked:\n+            continue\n+        all_errors.append(errcode)\n+        print(\"error: unused error code: \" + errcode)\n+        errors = True\n \n-errors = False\n-all_errors = []\n \n for errcode, entries in errcode_map.items():\n     all_errors.append(entries[0][0])\n     if len(entries) > 1:\n+        entries.sort()\n         print(\"error: duplicate error code \" + errcode)\n         for entry in entries:\n             print(\"{1}: {2}\\n{3}\".format(*entry))"}, {"sha": "9dbc75b960ef9dd28ef7b1f251d7efbb95011836", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "patch": "@@ -226,7 +226,7 @@ const X: i32 = 42 / 0;\n ```\n \"##,\n \n-E0038: r####\"\n+E0038: r##\"\n Trait objects like `Box<Trait>` can only be constructed when certain\n requirements are satisfied by the trait in question.\n \n@@ -478,7 +478,7 @@ so they are forbidden when specifying supertraits.\n \n There's no easy fix for this, generally code will need to be refactored so that\n you no longer need to derive from `Super<Self>`.\n-\"####,\n+\"##,\n \n E0072: r##\"\n When defining a recursive struct or enum, any use of the type being defined\n@@ -1801,14 +1801,14 @@ attribute.\n \n \n register_diagnostics! {\n-    // E0006 // merged with E0005\n+//  E0006 // merged with E0005\n //  E0134,\n //  E0135,\n     E0278, // requirement is not satisfied\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n     E0284, // cannot resolve type\n-    E0285, // overflow evaluation builtin bounds\n+//  E0285, // overflow evaluation builtin bounds\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     // E0300, // unexpanded macro"}, {"sha": "16bcf84b7950e52ad12e6ed893f4416f00c94e41", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78bf9d90cd6e29d04d0572c0c0371dd1f60702a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=c78bf9d90cd6e29d04d0572c0c0371dd1f60702a", "patch": "@@ -1046,8 +1046,8 @@ register_diagnostics! {\n //  E0153, unused error code\n //  E0157, unused error code\n     E0254, // import conflicts with imported crate in this module\n-    E0257,\n-    E0258,\n+//  E0257,\n+//  E0258,\n     E0402, // cannot use an outer type parameter in this context\n     E0406, // undeclared associated type\n     E0408, // variable from pattern #1 is not bound in pattern #"}]}