{"sha": "8e69c05b7c31b213c98f1682e65018ba112d5579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjljMDViN2MzMWIyMTNjOThmMTY4MmU2NTAxOGJhMTEyZDU1Nzk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T00:34:23Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T03:13:04Z"}, "message": "rustc: Convert lang_items hashmap to use &'static str keys", "tree": {"sha": "13b922f699b2dc7e8611b67650373d22fb81b330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13b922f699b2dc7e8611b67650373d22fb81b330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e69c05b7c31b213c98f1682e65018ba112d5579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e69c05b7c31b213c98f1682e65018ba112d5579", "html_url": "https://github.com/rust-lang/rust/commit/8e69c05b7c31b213c98f1682e65018ba112d5579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e69c05b7c31b213c98f1682e65018ba112d5579/comments", "author": null, "committer": null, "parents": [{"sha": "92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "html_url": "https://github.com/rust-lang/rust/commit/92e7bb67a8038ff73ad9dc88d8be3d3df4777282"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "54eb71363ce71871a6506beb03733c8f66efc724", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8e69c05b7c31b213c98f1682e65018ba112d5579/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e69c05b7c31b213c98f1682e65018ba112d5579/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8e69c05b7c31b213c98f1682e65018ba112d5579", "patch": "@@ -298,7 +298,7 @@ struct LanguageItemCollector<'self> {\n     crate: &'self Crate,\n     session: Session,\n \n-    item_refs: HashMap<@str, uint>,\n+    item_refs: HashMap<&'static str, uint>,\n }\n \n struct LanguageItemVisitor<'self> {\n@@ -327,51 +327,51 @@ impl<'self> LanguageItemCollector<'self> {\n                    -> LanguageItemCollector<'a> {\n         let mut item_refs = HashMap::new();\n \n-        item_refs.insert(@\"freeze\", FreezeTraitLangItem as uint);\n-        item_refs.insert(@\"send\", SendTraitLangItem as uint);\n-        item_refs.insert(@\"sized\", SizedTraitLangItem as uint);\n-\n-        item_refs.insert(@\"drop\", DropTraitLangItem as uint);\n-\n-        item_refs.insert(@\"add\", AddTraitLangItem as uint);\n-        item_refs.insert(@\"sub\", SubTraitLangItem as uint);\n-        item_refs.insert(@\"mul\", MulTraitLangItem as uint);\n-        item_refs.insert(@\"div\", DivTraitLangItem as uint);\n-        item_refs.insert(@\"rem\", RemTraitLangItem as uint);\n-        item_refs.insert(@\"neg\", NegTraitLangItem as uint);\n-        item_refs.insert(@\"not\", NotTraitLangItem as uint);\n-        item_refs.insert(@\"bitxor\", BitXorTraitLangItem as uint);\n-        item_refs.insert(@\"bitand\", BitAndTraitLangItem as uint);\n-        item_refs.insert(@\"bitor\", BitOrTraitLangItem as uint);\n-        item_refs.insert(@\"shl\", ShlTraitLangItem as uint);\n-        item_refs.insert(@\"shr\", ShrTraitLangItem as uint);\n-        item_refs.insert(@\"index\", IndexTraitLangItem as uint);\n-\n-        item_refs.insert(@\"eq\", EqTraitLangItem as uint);\n-        item_refs.insert(@\"ord\", OrdTraitLangItem as uint);\n-\n-        item_refs.insert(@\"str_eq\", StrEqFnLangItem as uint);\n-        item_refs.insert(@\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-        item_refs.insert(@\"fail_\", FailFnLangItem as uint);\n-        item_refs.insert(@\"fail_bounds_check\",\n+        item_refs.insert(\"freeze\", FreezeTraitLangItem as uint);\n+        item_refs.insert(\"send\", SendTraitLangItem as uint);\n+        item_refs.insert(\"sized\", SizedTraitLangItem as uint);\n+\n+        item_refs.insert(\"drop\", DropTraitLangItem as uint);\n+\n+        item_refs.insert(\"add\", AddTraitLangItem as uint);\n+        item_refs.insert(\"sub\", SubTraitLangItem as uint);\n+        item_refs.insert(\"mul\", MulTraitLangItem as uint);\n+        item_refs.insert(\"div\", DivTraitLangItem as uint);\n+        item_refs.insert(\"rem\", RemTraitLangItem as uint);\n+        item_refs.insert(\"neg\", NegTraitLangItem as uint);\n+        item_refs.insert(\"not\", NotTraitLangItem as uint);\n+        item_refs.insert(\"bitxor\", BitXorTraitLangItem as uint);\n+        item_refs.insert(\"bitand\", BitAndTraitLangItem as uint);\n+        item_refs.insert(\"bitor\", BitOrTraitLangItem as uint);\n+        item_refs.insert(\"shl\", ShlTraitLangItem as uint);\n+        item_refs.insert(\"shr\", ShrTraitLangItem as uint);\n+        item_refs.insert(\"index\", IndexTraitLangItem as uint);\n+\n+        item_refs.insert(\"eq\", EqTraitLangItem as uint);\n+        item_refs.insert(\"ord\", OrdTraitLangItem as uint);\n+\n+        item_refs.insert(\"str_eq\", StrEqFnLangItem as uint);\n+        item_refs.insert(\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n+        item_refs.insert(\"fail_\", FailFnLangItem as uint);\n+        item_refs.insert(\"fail_bounds_check\",\n                          FailBoundsCheckFnLangItem as uint);\n-        item_refs.insert(@\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n-        item_refs.insert(@\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n-        item_refs.insert(@\"exchange_free\", ExchangeFreeFnLangItem as uint);\n-        item_refs.insert(@\"malloc\", MallocFnLangItem as uint);\n-        item_refs.insert(@\"free\", FreeFnLangItem as uint);\n-        item_refs.insert(@\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n-        item_refs.insert(@\"borrow_as_mut\", BorrowAsMutFnLangItem as uint);\n-        item_refs.insert(@\"return_to_mut\", ReturnToMutFnLangItem as uint);\n-        item_refs.insert(@\"check_not_borrowed\",\n+        item_refs.insert(\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+        item_refs.insert(\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n+        item_refs.insert(\"exchange_free\", ExchangeFreeFnLangItem as uint);\n+        item_refs.insert(\"malloc\", MallocFnLangItem as uint);\n+        item_refs.insert(\"free\", FreeFnLangItem as uint);\n+        item_refs.insert(\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n+        item_refs.insert(\"borrow_as_mut\", BorrowAsMutFnLangItem as uint);\n+        item_refs.insert(\"return_to_mut\", ReturnToMutFnLangItem as uint);\n+        item_refs.insert(\"check_not_borrowed\",\n                          CheckNotBorrowedFnLangItem as uint);\n-        item_refs.insert(@\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n-        item_refs.insert(@\"record_borrow\", RecordBorrowFnLangItem as uint);\n-        item_refs.insert(@\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n-        item_refs.insert(@\"start\", StartFnLangItem as uint);\n-        item_refs.insert(@\"ty_desc\", TyDescStructLangItem as uint);\n-        item_refs.insert(@\"ty_visitor\", TyVisitorTraitLangItem as uint);\n-        item_refs.insert(@\"opaque\", OpaqueStructLangItem as uint);\n+        item_refs.insert(\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n+        item_refs.insert(\"record_borrow\", RecordBorrowFnLangItem as uint);\n+        item_refs.insert(\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n+        item_refs.insert(\"start\", StartFnLangItem as uint);\n+        item_refs.insert(\"ty_desc\", TyDescStructLangItem as uint);\n+        item_refs.insert(\"ty_visitor\", TyVisitorTraitLangItem as uint);\n+        item_refs.insert(\"opaque\", OpaqueStructLangItem as uint);\n \n         LanguageItemCollector {\n             crate: crate,\n@@ -416,8 +416,8 @@ impl<'self> LanguageItemCollector<'self> {\n             return;    // Didn't match.\n         }\n \n-        let item_index = self.item_refs.find(&value).map_move(|x| *x);\n-        // prevent borrow checker from considering   ^~~~~~~~~~~\n+        let item_index = self.item_refs.find_equiv(&value).map_move(|x| *x);\n+        // prevent borrow checker from considering         ^~~~~~~~~~~\n         // self to be borrowed (annoying)\n \n         match item_index {"}]}