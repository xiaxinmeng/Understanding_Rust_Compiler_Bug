{"sha": "3cf9e1086ef49cacd020f30947d834ba9c5ec375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjllMTA4NmVmNDljYWNkMDIwZjMwOTQ3ZDgzNGJhOWM1ZWMzNzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-14T17:29:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-18T16:10:50Z"}, "message": "std: Rename `cstr_memory` feature to use \"raw\"\n\nThis commit renames the `CString::{into_ptr, from_ptr}` methods to `into_raw`\nand `from_raw` to mirror the corresponding methods on `Box` and the naming of\n\"raw\" for `from_raw_parts` on slices and vectors.\n\ncc #27769", "tree": {"sha": "c7df58baa26eef4dc1f82ec927abebfc6b98fdc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7df58baa26eef4dc1f82ec927abebfc6b98fdc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf9e1086ef49cacd020f30947d834ba9c5ec375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf9e1086ef49cacd020f30947d834ba9c5ec375", "html_url": "https://github.com/rust-lang/rust/commit/3cf9e1086ef49cacd020f30947d834ba9c5ec375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf9e1086ef49cacd020f30947d834ba9c5ec375/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "html_url": "https://github.com/rust-lang/rust/commit/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "23daa87401a45641b712ee916dde9d945d881b2e", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3cf9e1086ef49cacd020f30947d834ba9c5ec375/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf9e1086ef49cacd020f30947d834ba9c5ec375/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=3cf9e1086ef49cacd020f30947d834ba9c5ec375", "patch": "@@ -207,15 +207,39 @@ impl CString {\n     /// using the pointer.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    // NB: may want to be called from_raw, needs to consider CStr::from_ptr,\n-    //     Box::from_raw (or whatever it's currently called), and\n-    //     slice::from_raw_parts\n+    #[deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n     pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n+        CString::from_raw(ptr)\n+    }\n+\n+    /// Retakes ownership of a CString that was transferred to C.\n+    ///\n+    /// The only appropriate argument is a pointer obtained by calling\n+    /// `into_raw`. The length of the string will be recalculated\n+    /// using the pointer.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n+    pub unsafe fn from_raw(ptr: *const libc::c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts(ptr, len as usize);\n         CString { inner: mem::transmute(slice) }\n     }\n \n+    /// Transfers ownership of the string to a C caller.\n+    ///\n+    /// The pointer must be returned to Rust and reconstituted using\n+    /// `from_raw` to be properly deallocated. Specifically, one\n+    /// should *not* use the standard C `free` function to deallocate\n+    /// this string.\n+    ///\n+    /// Failure to call `from_raw` will lead to a memory leak.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n+    pub fn into_ptr(self) -> *const libc::c_char {\n+        self.into_raw()\n+    }\n+\n     /// Transfers ownership of the string to a C caller.\n     ///\n     /// The pointer must be returned to Rust and reconstituted using\n@@ -226,8 +250,7 @@ impl CString {\n     /// Failure to call `from_ptr` will lead to a memory leak.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    // NB: may want to be called into_raw, see comments on from_ptr\n-    pub fn into_ptr(self) -> *const libc::c_char {\n+    pub fn into_raw(self) -> *const libc::c_char {\n         // It is important that the bytes be sized to fit - we need\n         // the capacity to be determinable from the string length, and\n         // shrinking to fit is the only way to be sure."}]}