{"sha": "4232939319448244bacd8376049a17325225eadb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzI5MzkzMTk0NDgyNDRiYWNkODM3NjA0OWExNzMyNTIyNWVhZGI=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-13T01:44:45Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T12:42:59Z"}, "message": "Move last error functions to helpers", "tree": {"sha": "4054985010cd09b199c3388928c11bb5e543e49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4054985010cd09b199c3388928c11bb5e543e49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4232939319448244bacd8376049a17325225eadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4232939319448244bacd8376049a17325225eadb", "html_url": "https://github.com/rust-lang/rust/commit/4232939319448244bacd8376049a17325225eadb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4232939319448244bacd8376049a17325225eadb/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "html_url": "https://github.com/rust-lang/rust/commit/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "36091d9235550ed207d23017f4dd9073277b1815", "filename": "src/helpers.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4232939319448244bacd8376049a17325225eadb/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4232939319448244bacd8376049a17325225eadb/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4232939319448244bacd8376049a17325225eadb", "patch": "@@ -345,4 +345,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+\n+    /// Sets the last error variable\n+    fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let errno_ptr = this.machine.last_error.unwrap();\n+        this.memory.get_mut(errno_ptr.alloc_id)?.write_scalar(\n+            tcx,\n+            errno_ptr,\n+            scalar.into(),\n+            Size::from_bits(32),\n+        )\n+    }\n+\n+    /// Gets the last error variable\n+    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let errno_ptr = this.machine.last_error.unwrap();\n+        this.memory\n+            .get(errno_ptr.alloc_id)?\n+            .read_scalar(tcx, errno_ptr, Size::from_bits(32))?\n+            .not_undef()\n+    }\n+\n+    /// Sets the last error variable using a `std::io::Error`. It fails if the error cannot be\n+    /// transformed to a raw os error succesfully\n+    fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n+        self.eval_context_mut().set_last_error(Scalar::from_int(\n+            e.raw_os_error().ok_or_else(|| {\n+                err_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n+            })?,\n+            Size::from_bits(32),\n+        ))\n+    }\n }"}, {"sha": "661e8bf209b1ed9e32d868b5f143d84d7f214875", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=4232939319448244bacd8376049a17325225eadb", "patch": "@@ -146,7 +146,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let erange = this.eval_libc(\"ERANGE\")?;\n                 this.set_last_error(erange)?;\n             }\n-            Err(e) => this.consume_io_error(e)?,\n+            Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n         Ok(Scalar::ptr_null(&*this.tcx))\n     }\n@@ -168,7 +168,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n-                this.consume_io_error(e)?;\n+                this.set_last_error_from_io_error(e)?;\n                 Ok(-1)\n             }\n         }"}, {"sha": "5d2c3648b43a5e61c8d1634471f9858860e9ab04", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4232939319448244bacd8376049a17325225eadb", "patch": "@@ -977,34 +977,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         return Ok(None);\n     }\n-\n-    fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n-        let this = self.eval_context_mut();\n-        let errno_ptr = this.machine.last_error.unwrap();\n-        // We allocated this during machine initialziation so the bounds are fine.\n-        this.memory.get_mut(errno_ptr.alloc_id)?.write_scalar(\n-            &*this.tcx,\n-            errno_ptr,\n-            scalar.into(),\n-            Size::from_bits(32),\n-        )\n-    }\n-\n-    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let this = self.eval_context_mut();\n-        let errno_ptr = this.machine.last_error.unwrap();\n-        this.memory\n-            .get(errno_ptr.alloc_id)?\n-            .read_scalar(&*this.tcx, errno_ptr, Size::from_bits(32))?\n-            .not_undef()\n-    }\n-\n-    fn consume_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n-        self.eval_context_mut().set_last_error(Scalar::from_int(\n-            e.raw_os_error().unwrap(),\n-            Size::from_bits(32),\n-        ))\n-    }\n }\n \n // Shims the linux 'getrandom()' syscall."}, {"sha": "8fcd5c8b1e3e5f4369972b494914c602ec1e1fd2", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4232939319448244bacd8376049a17325225eadb/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4232939319448244bacd8376049a17325225eadb", "patch": "@@ -285,7 +285,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match result {\n             Ok(ok) => Ok(ok),\n             Err(e) => {\n-                self.eval_context_mut().consume_io_error(e)?;\n+                self.eval_context_mut().set_last_error_from_io_error(e)?;\n                 Ok((-1).into())\n             }\n         }"}]}