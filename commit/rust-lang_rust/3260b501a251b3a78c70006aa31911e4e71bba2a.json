{"sha": "3260b501a251b3a78c70006aa31911e4e71bba2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjBiNTAxYTI1MWIzYTc4YzcwMDA2YWEzMTkxMWU0ZTcxYmJhMmE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-07T20:47:10Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-07T20:47:10Z"}, "message": "Merge pull request #483 from Manishearth/bored\n\nAdd lint for unused lifetimes (fixes #459)", "tree": {"sha": "a282dc6dcc3ff251f7595516582f827f0efcc73d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a282dc6dcc3ff251f7595516582f827f0efcc73d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3260b501a251b3a78c70006aa31911e4e71bba2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3260b501a251b3a78c70006aa31911e4e71bba2a", "html_url": "https://github.com/rust-lang/rust/commit/3260b501a251b3a78c70006aa31911e4e71bba2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3260b501a251b3a78c70006aa31911e4e71bba2a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8686a3ecdaf215a5e9de6b64d2ffc45a7fa4373", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8686a3ecdaf215a5e9de6b64d2ffc45a7fa4373", "html_url": "https://github.com/rust-lang/rust/commit/e8686a3ecdaf215a5e9de6b64d2ffc45a7fa4373"}, {"sha": "c7b87a06d20a13e9fdf86d34f200ad4e444cb5b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b87a06d20a13e9fdf86d34f200ad4e444cb5b8", "html_url": "https://github.com/rust-lang/rust/commit/c7b87a06d20a13e9fdf86d34f200ad4e444cb5b8"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "4cae2ec1a4a6837224b509a6681146294739a63b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3260b501a251b3a78c70006aa31911e4e71bba2a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3260b501a251b3a78c70006aa31911e4e71bba2a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3260b501a251b3a78c70006aa31911e4e71bba2a", "patch": "@@ -85,6 +85,7 @@ name\n [unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)           | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                   | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                         | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                     | warn    | unused lifetimes in function definitions\n [useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                   | warn    | transmutes that have the same to and from types\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                         | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)           | warn    | using a while-let loop instead of a for loop on an iterator"}, {"sha": "be0db936e6b7bcdeb5d95ac4969a7630df430e38", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3260b501a251b3a78c70006aa31911e4e71bba2a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3260b501a251b3a78c70006aa31911e4e71bba2a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3260b501a251b3a78c70006aa31911e4e71bba2a", "patch": "@@ -156,6 +156,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         lifetimes::NEEDLESS_LIFETIMES,\n+        lifetimes::UNUSED_LIFETIMES,\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_ITER_LOOP,"}, {"sha": "e9591ab6ddc1e9890d50ad1c25ad1df18e6785ba", "filename": "src/lifetimes.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3260b501a251b3a78c70006aa31911e4e71bba2a/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3260b501a251b3a78c70006aa31911e4e71bba2a/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=3260b501a251b3a78c70006aa31911e4e71bba2a", "patch": "@@ -2,22 +2,25 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound};\n+use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound, walk_fn_decl};\n use rustc::middle::def::Def::{DefTy, DefTrait, DefStruct};\n-use std::collections::HashSet;\n+use std::collections::{HashSet, HashMap};\n \n use utils::{in_external_macro, span_lint};\n \n declare_lint!(pub NEEDLESS_LIFETIMES, Warn,\n               \"using explicit lifetimes for references in function arguments when elision rules \\\n                would allow omitting them\");\n \n+declare_lint!(pub UNUSED_LIFETIMES, Warn,\n+              \"unused lifetimes in function definitions\");\n+\n #[derive(Copy,Clone)]\n pub struct LifetimePass;\n \n impl LintPass for LifetimePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_LIFETIMES)\n+        lint_array!(NEEDLESS_LIFETIMES, UNUSED_LIFETIMES)\n     }\n }\n \n@@ -61,6 +64,7 @@ fn check_fn_inner(cx: &LateContext, decl: &FnDecl, slf: Option<&ExplicitSelf>,\n         span_lint(cx, NEEDLESS_LIFETIMES, span,\n                   \"explicit lifetimes given in parameter types where they could be elided\");\n     }\n+    report_extra_lifetimes(cx, decl, &generics.lifetimes);\n }\n \n fn could_use_elision(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>,\n@@ -263,3 +267,24 @@ fn has_where_lifetimes(cx: &LateContext, where_clause: &WhereClause) -> bool {\n     }\n     false\n }\n+\n+struct LifetimeChecker(HashMap<Name, Span>);\n+\n+impl<'v> Visitor<'v> for LifetimeChecker {\n+\n+    // for lifetimes as parameters of generics\n+    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n+        self.0.remove(&lifetime.name);\n+    }\n+}\n+\n+fn report_extra_lifetimes(cx: &LateContext, func: &FnDecl,\n+                          named_lts: &[LifetimeDef]) {\n+    let hs = named_lts.iter().map(|lt| (lt.lifetime.name, lt.lifetime.span)).collect();\n+    let mut checker = LifetimeChecker(hs);\n+    walk_fn_decl(&mut checker, func);\n+    for (_, v) in checker.0 {\n+        span_lint(cx, UNUSED_LIFETIMES, v,\n+                  \"this lifetime isn't used in the function definition\");\n+    }\n+}"}, {"sha": "4d454a738d99908792b97232552531f1595af96f", "filename": "tests/compile-fail/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3260b501a251b3a78c70006aa31911e4e71bba2a/tests%2Fcompile-fail%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3260b501a251b3a78c70006aa31911e4e71bba2a/tests%2Fcompile-fail%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flifetimes.rs?ref=3260b501a251b3a78c70006aa31911e4e71bba2a", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(needless_lifetimes)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_lifetimes)]\n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n //~^ERROR explicit lifetimes given\n "}, {"sha": "d4babdfc4fd879bf7f298cadaa4c76010afb87c8", "filename": "tests/compile-fail/unused_lt.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3260b501a251b3a78c70006aa31911e4e71bba2a/tests%2Fcompile-fail%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3260b501a251b3a78c70006aa31911e4e71bba2a/tests%2Fcompile-fail%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funused_lt.rs?ref=3260b501a251b3a78c70006aa31911e4e71bba2a", "patch": "@@ -0,0 +1,48 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused, dead_code, needless_lifetimes)]\n+#![deny(unused_lifetimes)]\n+\n+fn empty() {\n+\n+}\n+\n+\n+fn used_lt<'a>(x: &'a u8) {\n+\n+}\n+\n+\n+fn unused_lt<'a>(x: u8) { //~ ERROR this lifetime\n+\n+}\n+\n+fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) { //~ ERROR this lifetime\n+    // 'a is useless here since it's not directly bound\n+}\n+\n+fn lt_return<'a, 'b: 'a>(x: &'b u8) -> &'a u8 {\n+    panic!()\n+}\n+\n+fn lt_return_only<'a>() -> &'a u8 {\n+    panic!()\n+}\n+\n+fn unused_lt_blergh<'a>(x: Option<Box<Send+'a>>) {\n+\n+}\n+\n+\n+trait Foo<'a> {\n+    fn x(&self, a: &'a u8);\n+}\n+\n+impl<'a> Foo<'a> for u8 {\n+    fn x(&self, a: &'a u8) {\n+\n+    }\n+}\n+fn main() {\n+\n+}"}]}