{"sha": "9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODNhZTcyMGJkMjk0YjNhODlhZTU0Y2IxZWNhZDc0OWYzMGIwZmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T20:02:18Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T20:02:18Z"}, "message": "Merge #1289\n\n1289: simplify r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "aebcb8bee9ba5884b4a07a3b21d78892de3ca24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aebcb8bee9ba5884b4a07a3b21d78892de3ca24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "html_url": "https://github.com/rust-lang/rust/commit/9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9383ae720bd294b3a89ae54cb1ecad749f30b0fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "11742e33716cd9fdce08bf5501afcb793fcc59ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/11742e33716cd9fdce08bf5501afcb793fcc59ac", "html_url": "https://github.com/rust-lang/rust/commit/11742e33716cd9fdce08bf5501afcb793fcc59ac"}, {"sha": "9680ae865e9b8202edf483f03ed5169409980dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/9680ae865e9b8202edf483f03ed5169409980dda", "html_url": "https://github.com/rust-lang/rust/commit/9680ae865e9b8202edf483f03ed5169409980dda"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "3f758f283865267d2fe0b24c5744fc2ce43cde27", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9383ae720bd294b3a89ae54cb1ecad749f30b0fa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9383ae720bd294b3a89ae54cb1ecad749f30b0fa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "patch": "@@ -5,13 +5,11 @@ use ra_syntax::ast::{AstNode, StructLit};\n \n use crate::{\n     expr::AstPtr,\n-    HirDatabase,\n-    Function,\n-    Name,\n+    HirDatabase, Function, Name,\n     diagnostics::{DiagnosticSink, MissingFields},\n     adt::AdtDef,\n     Path,\n-    ty::InferenceResult\n+    ty::InferenceResult,\n };\n use super::{Expr, StructLitField, ExprId};\n \n@@ -50,43 +48,46 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         spread: &Option<ExprId>,\n         db: &impl HirDatabase,\n     ) {\n-        if let Some(_) = spread {\n+        if spread.is_some() {\n             return;\n         }\n+\n+        let struct_def = match self.infer[id].as_adt() {\n+            Some((AdtDef::Struct(s), _)) => s,\n+            _ => return,\n+        };\n+\n         let lit_fields: FxHashSet<_> = fields.into_iter().map(|f| &f.name).collect();\n-        let struct_ty = &self.infer[id];\n-        if let Some((AdtDef::Struct(s), _)) = struct_ty.as_adt() {\n-            let missed_fields: Vec<Name> = s\n-                .fields(db)\n-                .iter()\n-                .filter_map(|f| {\n-                    let name = f.name(db);\n-                    if lit_fields.contains(&name) {\n-                        None\n-                    } else {\n-                        Some(name)\n-                    }\n-                })\n-                .collect();\n-            if missed_fields.is_empty() {\n-                return;\n-            }\n-            let source_map = self.func.body_source_map(db);\n-            let file_id = self.func.source(db).0;\n-            let source_file = db.parse(file_id.original_file(db));\n-            if let Some(field_list_node) = source_map\n-                .expr_syntax(id)\n-                .map(|ptr| ptr.to_node(source_file.syntax()))\n-                .and_then(StructLit::cast)\n-                .and_then(|lit| lit.named_field_list())\n-            {\n-                let field_list_ptr = AstPtr::new(field_list_node);\n-                self.sink.push(MissingFields {\n-                    file: file_id,\n-                    field_list: field_list_ptr,\n-                    missed_fields,\n-                })\n-            }\n+        let missed_fields: Vec<Name> = struct_def\n+            .fields(db)\n+            .iter()\n+            .filter_map(|f| {\n+                let name = f.name(db);\n+                if lit_fields.contains(&name) {\n+                    None\n+                } else {\n+                    Some(name)\n+                }\n+            })\n+            .collect();\n+        if missed_fields.is_empty() {\n+            return;\n+        }\n+        let source_map = self.func.body_source_map(db);\n+        let file_id = self.func.source(db).0;\n+        let source_file = db.parse(file_id.original_file(db));\n+        if let Some(field_list_node) = source_map\n+            .expr_syntax(id)\n+            .map(|ptr| ptr.to_node(source_file.syntax()))\n+            .and_then(StructLit::cast)\n+            .and_then(|lit| lit.named_field_list())\n+        {\n+            let field_list_ptr = AstPtr::new(field_list_node);\n+            self.sink.push(MissingFields {\n+                file: file_id,\n+                field_list: field_list_ptr,\n+                missed_fields,\n+            })\n         }\n     }\n }"}]}