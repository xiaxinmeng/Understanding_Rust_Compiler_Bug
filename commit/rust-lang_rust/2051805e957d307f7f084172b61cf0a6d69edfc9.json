{"sha": "2051805e957d307f7f084172b61cf0a6d69edfc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNTE4MDVlOTU3ZDMwN2Y3ZjA4NDE3MmI2MWNmMGE2ZDY5ZWRmYzk=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-25T04:52:53Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T12:43:50Z"}, "message": "follow-up to reviews", "tree": {"sha": "73bac9d988f9f7524baaf3acc5c4834d39df2327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bac9d988f9f7524baaf3acc5c4834d39df2327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2051805e957d307f7f084172b61cf0a6d69edfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2051805e957d307f7f084172b61cf0a6d69edfc9", "html_url": "https://github.com/rust-lang/rust/commit/2051805e957d307f7f084172b61cf0a6d69edfc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2051805e957d307f7f084172b61cf0a6d69edfc9/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5822af460f342721662a4dc959713a1cd7778c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5822af460f342721662a4dc959713a1cd7778c", "html_url": "https://github.com/rust-lang/rust/commit/cf5822af460f342721662a4dc959713a1cd7778c"}], "stats": {"total": 119, "additions": 69, "deletions": 50}, "files": [{"sha": "2e647589f411172e4fb81d6468c8c2ae999189cc", "filename": "src/shims/env.rs", "status": "modified", "additions": 65, "deletions": 45, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/2051805e957d307f7f084172b61cf0a6d69edfc9/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2051805e957d307f7f084172b61cf0a6d69edfc9/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=2051805e957d307f7f084172b61cf0a6d69edfc9", "patch": "@@ -1,3 +1,5 @@\n+#![allow(non_snake_case)]\n+\n use std::ffi::{OsString, OsStr};\n use std::env;\n use std::convert::TryFrom;\n@@ -26,7 +28,7 @@ impl<'tcx> EnvVars<'tcx> {\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.tcx.sess.target.target.target_os.to_lowercase() == \"windows\" {\n+        if ecx.tcx.sess.target.target.target_os == \"windows\" {\n             // Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n             excluded_env_vars.push(\"TERM\".to_owned());\n         }\n@@ -46,7 +48,7 @@ impl<'tcx> EnvVars<'tcx> {\n         ecx.update_environ()\n     }\n \n-    pub(super) fn values(&self) -> InterpResult<'tcx, Values<'_, OsString, Pointer<Tag>>> {\n+    fn values(&self) -> InterpResult<'tcx, Values<'_, OsString, Pointer<Tag>>> {\n         Ok(self.map.values())\n     }\n }\n@@ -73,6 +75,28 @@ fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n }\n \n+fn alloc_env_var_as_c_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> InterpResult<'tcx, Pointer<Tag>> {\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+}\n+\n+fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> InterpResult<'tcx, Pointer<Tag>> {\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n@@ -91,7 +115,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n-    fn getenvironmentvariablew(\n+    fn GetEnvironmentVariableW(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName\n         buf_op: OpTy<'tcx, Tag>, // LPWSTR  lpBuffer\n@@ -110,21 +134,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n \n                 let var_size = u64::try_from(this.read_os_str_from_wide_str(var_ptr)?.len()).unwrap();\n-                let buf_size = u64::try_from(this.read_scalar(size_op)?.to_i32()?).unwrap();\n+                // `buf_size` represent size in characters.\n+                let buf_size = u64::try_from(this.read_scalar(size_op)?.to_u32()?).unwrap();\n                 let return_val = if var_size.checked_add(1).unwrap() > buf_size {\n                     // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n                     // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n                     var_size + 1\n                 } else {\n                     let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n-                    for i in 0..var_size {\n-                        this.memory.copy(\n-                            this.force_ptr(var_ptr.ptr_offset(Size::from_bytes(i) * 2, this)?)?,\n-                            this.force_ptr(buf_ptr.ptr_offset(Size::from_bytes(i) * 2, this)?)?,\n-                            Size::from_bytes(2),\n-                            true,\n-                        )?;\n-                    }\n+                    let bytes_to_be_copied = var_size.checked_add(1).unwrap().checked_mul(2).unwrap();\n+                    this.memory.copy(this.force_ptr(var_ptr)?, this.force_ptr(buf_ptr)?, Size::from_bytes(bytes_to_be_copied), true)?;\n                     // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n                     // not including the terminating null character.\n                     var_size\n@@ -138,30 +157,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n-    fn getenvironmentstringsw(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+    fn GetEnvironmentStringsW(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentStringsW\");\n \n         // Info on layout of environment blocks in Windows: \n         // https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\n         let mut env_vars = std::ffi::OsString::new();\n         for &item in this.machine.env_vars.values()? {\n-            let env_var = this.read_os_str_from_target_str(Scalar::from(item))?;\n+            let env_var = this.read_os_str_from_wide_str(Scalar::from(item))?;\n             env_vars.push(env_var);\n             env_vars.push(\"\\0\");\n         }\n+        // Allocate environment block & Store environment variables to environment block.\n+        // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n+        let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::WinHeap.into());\n \n-        // Allocate environment block\n-        let tcx = this.tcx;\n-        let env_block_size = env_vars.len().checked_add(1).unwrap();\n-        let env_block_type = tcx.mk_array(tcx.types.u16, u64::try_from(env_block_size).unwrap());\n-        let env_block_place = this.allocate(this.layout_of(env_block_type)?, MiriMemoryKind::WinHeap.into());\n-        \n-        // Store environment variables to environment block\n-        // Final null terminator(block terminator) is pushed by `write_os_str_to_wide_str`\n-        this.write_os_str_to_wide_str(&env_vars, env_block_place, u64::try_from(env_block_size).unwrap())?;\n+        Ok(envblock_ptr.into())\n+    }\n+\n+    fn FreeEnvironmentStringsW(&mut self, env_block_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n-        Ok(env_block_place.ptr)\n+        let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n+        Ok(this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into()).is_ok())\n     }\n \n     fn setenv(\n@@ -200,7 +220,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    fn setenvironmentvariablew(\n+    fn SetEnvironmentVariableW(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName,\n         value_op: OpTy<'tcx, Tag>, // LPCWSTR lpValue,\n@@ -211,32 +231,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n \n-        let mut new = None;\n-        if !this.is_null(name_ptr)? {\n-            let name = this.read_os_str_from_target_str(name_ptr)?;\n-            if this.is_null(value_ptr)? {\n-                // Delete environment variable `{name}`\n-                if let Some(var) = this.machine.env_vars.map.remove(&name) {\n-                    this.memory.deallocate(var, None, MiriMemoryKind::Machine.into())?;\n-                    this.update_environ()?;\n-                }\n-                return Ok(1);  // return non-zero on success\n-            }\n-            if !name.is_empty() && !name.to_string_lossy().contains('=') {\n-                let value = this.read_os_str_from_target_str(value_ptr)?;\n-                new = Some((name.to_owned(), value.to_owned()));\n-            }\n+        if this.is_null(name_ptr)? {\n+            // ERROR CODE is not clearly explained in docs.. For now, throw UB instead.\n+            throw_ub_format!(\"Pointer to environment variable name is NULL\");\n         }\n-        if let Some((name, value)) = new {\n-            let var_ptr = alloc_env_var_as_target_str(&name, &value, &mut this)?;\n+        \n+        let name = this.read_os_str_from_wide_str(name_ptr)?;\n+        if name.is_empty() {\n+            throw_unsup_format!(\"Environment variable name is an empty string\");\n+        } else if name.to_string_lossy().contains('=') {\n+            throw_unsup_format!(\"Environment variable name contains '='\");\n+        } else if this.is_null(value_ptr)? {\n+            // Delete environment variable `{name}`\n+            if let Some(var) = this.machine.env_vars.map.remove(&name) {\n+                this.memory.deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                this.update_environ()?;\n+            }\n+            Ok(1) // return non-zero on success\n+        } else {\n+            let value = this.read_os_str_from_wide_str(value_ptr)?;\n+            let var_ptr = alloc_env_var_as_wide_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             this.update_environ()?;\n             Ok(1) // return non-zero on success\n-        } else {\n-            Ok(0)\n         }\n     }\n \n@@ -248,7 +268,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let mut success = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.read_os_str_from_target_str(name_ptr)?.to_owned();\n+            let name = this.read_os_str_from_c_str(name_ptr)?.to_owned();\n             if !name.is_empty() && !name.to_string_lossy().contains('=') {\n                 success = Some(this.machine.env_vars.map.remove(&name));\n             }"}, {"sha": "cc64057135c1197d3d1a01cbdac75dadeb1297c0", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2051805e957d307f7f084172b61cf0a6d69edfc9/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2051805e957d307f7f084172b61cf0a6d69edfc9/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=2051805e957d307f7f084172b61cf0a6d69edfc9", "patch": "@@ -23,24 +23,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n-                let result = this.getenvironmentvariablew(args[0], args[1], args[2])?;\n+                let result = this.GetEnvironmentVariableW(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n             }\n \n             \"SetEnvironmentVariableW\" => {\n-                let result = this.setenvironmentvariablew(args[0], args[1])?;\n+                let result = this.SetEnvironmentVariableW(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n             \"GetEnvironmentStringsW\" => {\n-                let result = this.getenvironmentstringsw()?;\n+                let result = this.GetEnvironmentStringsW()?;\n                 // If the function succeeds, the return value is a pointer to the environment block of the current process.\n                 this.write_scalar(result, dest)?;\n             }\n \n             \"FreeEnvironmentStringsW\" => {\n-                let old_vars_ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let result = this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::WinHeap.into()).is_ok();\n+                let result = this.FreeEnvironmentStringsW(args[0])?;\n                 // If the function succeeds, the return value is nonzero.\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }"}]}