{"sha": "a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2UwOTFmZDdlMTQ5ZjgwOWJkZjBlZTBkOTYwZDllMTg1ZWU1ZmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T21:17:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T21:17:20Z"}, "message": "Merge #8953\n\n8953: feat: generate getter avoids generating types like `&Vec<T>` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "acc9b1a1e0417961d5180a7921cddb425cbf0c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc9b1a1e0417961d5180a7921cddb425cbf0c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqsZgCRBK7hj4Ov3rIwAAFU0IALIu3aWHu/z54rEIehYIU3va\nsH1ogtuo89UqDfHPmJ7M0y1L0B3zl4P5yzB3N/yJW2CvrotyoBl9ogBsAmbPcHcT\n/XRbL5WyAs+tljTCqRV8ZLSPaMZujUkV2q5ZgW2u9lmlRkFzviDZ3okapSCQRHcb\nQQWJplLR4+7dsFO4RQOyE3Ojwsiic9L1QwV1fqQgJmL8j3GIpFKPin9DaaL3Q3LZ\nWjCLNlSsomJyUGr+mMm8H2NsO3fpQeHFhtV7y2sBAp78VXP4nxBr3Y3w6QsZ7YE4\nDQ7VyH8Iff51VIiBblXjgGRXYn6GaNTpGbr2lop9CSFUGtcMik0j/SfdsAaHszk=\n=60sZ\n-----END PGP SIGNATURE-----\n", "payload": "tree acc9b1a1e0417961d5180a7921cddb425cbf0c68\nparent 4e376ba3cee6e8aaa655f541d04b5861d4651e1e\nparent 479a7387c26de025d00dd926afc3cf311484574d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621804640 +0000\ncommitter GitHub <noreply@github.com> 1621804640 +0000\n\nMerge #8953\n\n8953: feat: generate getter avoids generating types like `&Vec<T>` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "html_url": "https://github.com/rust-lang/rust/commit/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "html_url": "https://github.com/rust-lang/rust/commit/4e376ba3cee6e8aaa655f541d04b5861d4651e1e"}, {"sha": "479a7387c26de025d00dd926afc3cf311484574d", "url": "https://api.github.com/repos/rust-lang/rust/commits/479a7387c26de025d00dd926afc3cf311484574d", "html_url": "https://github.com/rust-lang/rust/commit/479a7387c26de025d00dd926afc3cf311484574d"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "09971226e1e2cb6ae58c9eaebaa6c1bf37de716d", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 106, "deletions": 7, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "patch": "@@ -23,8 +23,8 @@ use crate::{\n //\n // impl Person {\n //     /// Get a reference to the person's name.\n-//     fn $0name(&self) -> &String {\n-//         &self.name\n+//     fn $0name(&self) -> &str {\n+//         self.name.as_str()\n //     }\n // }\n // ```\n@@ -96,20 +96,27 @@ pub(crate) fn generate_getter_impl(\n             }\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let (ty, body) = if mutable {\n+                (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n+            } else {\n+                useless_type_special_case(&field_name.to_string(), &field_ty)\n+                    .unwrap_or_else(|| (format!(\"&{}\", field_ty), format!(\"&self.{}\", field_name)))\n+            };\n+\n             format_to!(\n                 buf,\n                 \"    /// Get a {}reference to the {}'s {}.\n-    {}fn {}(&{mut_}self) -> &{mut_}{} {{\n-        &{mut_}self.{}\n+    {}fn {}(&{}self) -> {} {{\n+        {}\n     }}\",\n                 mutable.then(|| \"mutable \").unwrap_or_default(),\n                 to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \"),\n                 fn_name.trim_end_matches(\"_mut\").replace('_', \" \"),\n                 vis,\n                 fn_name,\n-                field_ty,\n-                field_name,\n-                mut_ = mutable.then(|| \"mut \").unwrap_or_default(),\n+                mutable.then(|| \"mut \").unwrap_or_default(),\n+                ty,\n+                body,\n             );\n \n             let start_offset = impl_def\n@@ -129,6 +136,29 @@ pub(crate) fn generate_getter_impl(\n     )\n }\n \n+fn useless_type_special_case(field_name: &str, field_ty: &ast::Type) -> Option<(String, String)> {\n+    if field_ty.to_string() == \"String\" {\n+        cov_mark::hit!(useless_type_special_case);\n+        return Some((\"&str\".to_string(), format!(\"self.{}.as_str()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Vec\") {\n+        return Some((format!(\"&[{}]\", arg), format!(\"self.{}.as_slice()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Box\") {\n+        return Some((format!(\"&{}\", arg), format!(\"self.{}.as_ref()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Option\") {\n+        return Some((format!(\"Option<&{}>\", arg), format!(\"self.{}.as_ref()\", field_name)));\n+    }\n+    None\n+}\n+\n+// FIXME: This should rely on semantic info.\n+fn ty_ctor(ty: &ast::Type, ctor: &str) -> Option<String> {\n+    let res = ty.to_string().strip_prefix(ctor)?.strip_prefix('<')?.strip_suffix('>')?.to_string();\n+    Some(res)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -271,6 +301,75 @@ impl Context {\n         &self.count\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_special_cases() {\n+        cov_mark::check!(useless_type_special_case);\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct S { foo: $0String }\n+\"#,\n+            r#\"\n+struct S { foo: String }\n+\n+impl S {\n+    /// Get a reference to the s's foo.\n+    fn $0foo(&self) -> &str {\n+        self.foo.as_str()\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct S { foo: $0Box<Sweets> }\n+\"#,\n+            r#\"\n+struct S { foo: Box<Sweets> }\n+\n+impl S {\n+    /// Get a reference to the s's foo.\n+    fn $0foo(&self) -> &Sweets {\n+        self.foo.as_ref()\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct S { foo: $0Vec<()> }\n+\"#,\n+            r#\"\n+struct S { foo: Vec<()> }\n+\n+impl S {\n+    /// Get a reference to the s's foo.\n+    fn $0foo(&self) -> &[()] {\n+        self.foo.as_slice()\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct S { foo: $0Option<Failure> }\n+\"#,\n+            r#\"\n+struct S { foo: Option<Failure> }\n+\n+impl S {\n+    /// Get a reference to the s's foo.\n+    fn $0foo(&self) -> Option<&Failure> {\n+        self.foo.as_ref()\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "8a9b0777c0caf25f00bd42cfc3e1da54fa4b5335", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "patch": "@@ -786,8 +786,8 @@ struct Person {\n \n impl Person {\n     /// Get a reference to the person's name.\n-    fn $0name(&self) -> &String {\n-        &self.name\n+    fn $0name(&self) -> &str {\n+        self.name.as_str()\n     }\n }\n \"#####,"}]}