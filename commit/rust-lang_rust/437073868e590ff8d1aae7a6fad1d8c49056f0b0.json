{"sha": "437073868e590ff8d1aae7a6fad1d8c49056f0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzA3Mzg2OGU1OTBmZjhkMWFhZTdhNmZhZDFkOGM0OTA1NmYwYjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:12:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:12:17Z"}, "message": "libcore: \"import\" -> \"use\"", "tree": {"sha": "994c67e8b50078cd0722342917dfbd0e3144ae35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994c67e8b50078cd0722342917dfbd0e3144ae35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/437073868e590ff8d1aae7a6fad1d8c49056f0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/437073868e590ff8d1aae7a6fad1d8c49056f0b0", "html_url": "https://github.com/rust-lang/rust/commit/437073868e590ff8d1aae7a6fad1d8c49056f0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/437073868e590ff8d1aae7a6fad1d8c49056f0b0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147e9380e270ae8c27d241837251f14b33596450", "url": "https://api.github.com/repos/rust-lang/rust/commits/147e9380e270ae8c27d241837251f14b33596450", "html_url": "https://github.com/rust-lang/rust/commit/147e9380e270ae8c27d241837251f14b33596450"}], "stats": {"total": 320, "additions": 160, "deletions": 160}, "files": [{"sha": "4cf0b8f332dbfa3f4495547ce1994afb6e328764", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,6 +1,6 @@\n //! Shared Vectors\n \n-import ptr::addr_of;\n+use ptr::addr_of;\n \n export init_op;\n export capacity;"}, {"sha": "56d4e399cac8c6662944ee901c2cb346267b1523", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -6,7 +6,7 @@\n \n //! Boolean logic\n \n-import cmp::Eq;\n+use cmp::Eq;\n \n export not, and, or, xor, implies;\n export eq, ne, is_true, is_false;"}, {"sha": "49fd9b8706f7eae740e5c367d5b19b9484b41adf", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -4,7 +4,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import cmp::{Eq, Ord};\n+use cmp::{Eq, Ord};\n \n export ptr_eq;\n "}, {"sha": "665adf7e35c5ce618d155a15d91351bfcf831586", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -4,7 +4,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import cmp::Eq;\n+use cmp::Eq;\n \n /*\n     Lu  Uppercase_Letter    an uppercase letter\n@@ -47,9 +47,9 @@ export is_alphabetic,\n        to_digit, cmp,\n        escape_default, escape_unicode;\n \n-import is_alphabetic = unicode::derived_property::Alphabetic;\n-import is_XID_start = unicode::derived_property::XID_Start;\n-import is_XID_continue = unicode::derived_property::XID_Continue;\n+use is_alphabetic = unicode::derived_property::Alphabetic;\n+use is_XID_start = unicode::derived_property::XID_Start;\n+use is_XID_continue = unicode::derived_property::XID_Continue;\n \n \n /**"}, {"sha": "4dbc4e047f3ad7689119998b2dec264b7ff20705", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -12,9 +12,9 @@ export c_double;\n export c_float_targ_consts;\n export c_double_targ_consts;\n \n-import libc::c_int;\n-import libc::c_float;\n-import libc::c_double;\n+use libc::c_int;\n+use libc::c_float;\n+use libc::c_double;\n \n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\""}, {"sha": "4775e2977957cfe61b6120e7ff2f722bfa0c09c5", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -27,8 +27,8 @@\n  * ~~~\n  */\n \n-import either::Either;\n-import libc::size_t;\n+use either::Either;\n+use libc::size_t;\n \n export Port;\n export Chan;"}, {"sha": "d763b84c162ff540cc7713975f2dc99d71f4391f", "filename": "src/libcore/core.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -2,28 +2,28 @@\n \n // Export various ubiquitous types, constructors, methods.\n \n-import option::{Some, None};\n-import Option = option::Option;\n+use option::{Some, None};\n+use Option = option::Option;\n // XXX: snapshot rustc is generating code that wants lower-case option\n #[cfg(stage0)]\n-import option = option::Option;\n+use option = option::Option;\n \n-import result::{Result, Ok, Err};\n+use result::{Result, Ok, Err};\n \n-import Path = path::Path;\n-import GenericPath = path::GenericPath;\n-import WindowsPath = path::WindowsPath;\n-import PosixPath = path::PosixPath;\n+use Path = path::Path;\n+use GenericPath = path::GenericPath;\n+use WindowsPath = path::WindowsPath;\n+use PosixPath = path::PosixPath;\n \n-import tuple::{TupleOps, ExtendedTupleOps};\n-import str::{StrSlice, UniqueStr};\n-import vec::{ConstVector, CopyableVector, ImmutableVector};\n-import vec::{ImmutableEqVector, ImmutableCopyableVector};\n-import iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n-import iter::{CopyableOrderedIter, Times, TimesIx};\n-import num::Num;\n-import ptr::Ptr;\n-import to_str::ToStr;\n+use tuple::{TupleOps, ExtendedTupleOps};\n+use str::{StrSlice, UniqueStr};\n+use vec::{ConstVector, CopyableVector, ImmutableVector};\n+use vec::{ImmutableEqVector, ImmutableCopyableVector};\n+use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n+use iter::{CopyableOrderedIter, Times, TimesIx};\n+use num::Num;\n+use ptr::Ptr;\n+use to_str::ToStr;\n \n export Path, WindowsPath, PosixPath, GenericPath;\n export Option, Some, None, unreachable;\n@@ -44,11 +44,11 @@ export ToStr;\n // The compiler has special knowlege of these so we must not duplicate them\n // when compiling for testing\n #[cfg(notest)]\n-import ops::{Const, Copy, Send, Owned};\n+use ops::{Const, Copy, Send, Owned};\n #[cfg(notest)]\n-import ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n+use ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(notest)]\n-import ops::{Shl, Shr, Index};\n+use ops::{Shl, Shr, Index};\n \n #[cfg(notest)]\n export Const, Copy, Send, Owned;\n@@ -61,11 +61,11 @@ export Shl, Shr, Index;\n use coreops(name = \"core\", vers = \"0.4\");\n \n #[cfg(test)]\n-import coreops::ops::{Const, Copy, Send, Owned};\n+use coreops::ops::{Const, Copy, Send, Owned};\n #[cfg(test)]\n-import coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n+use coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(test)]\n-import coreops::ops::{Shl, Shr, Index};\n+use coreops::ops::{Shl, Shr, Index};\n \n \n // Export the log levels as global constants. Higher levels mean"}, {"sha": "eba1cb73cf3867de95a19322297495d49a64bf78", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -9,8 +9,8 @@\n //\n // Note that recursive use is not permitted.\n \n-import unsafe::reinterpret_cast;\n-import ptr::null;\n+use unsafe::reinterpret_cast;\n+use ptr::null;\n \n export DVec;\n export from_elem;"}, {"sha": "36fc13c12af1e44e885ec4085d55b9b4da90d19f", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -4,8 +4,8 @@\n \n //! A type that represents one of two alternatives\n \n-import cmp::Eq;\n-import result::Result;\n+use cmp::Eq;\n+use result::Result;\n \n /// The either type\n enum Either<T, U> {"}, {"sha": "4db222ea3320e137f6520737449badd07661d9c2", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -26,8 +26,8 @@ debug!(\"hello, %s!\", \"world\");\n \n */\n \n-import cmp::Eq;\n-import option::{Some, None};\n+use cmp::Eq;\n+use option::{Some, None};\n \n \n /*"}, {"sha": "6337047954624ca875c17ce4cab9db36191232fb", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -6,8 +6,8 @@\n \n // PORT\n \n-import cmath::c_float::*;\n-import cmath::c_float_targ_consts::*;\n+use cmath::c_float::*;\n+use cmath::c_float_targ_consts::*;\n \n export add, sub, mul, div, rem, lt, le, eq, ne, ge, gt;\n export is_positive, is_negative, is_nonpositive, is_nonnegative;"}, {"sha": "fdd5db359c25de379d3f76cba73b08753aeb51a7", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -6,8 +6,8 @@\n \n // PORT\n \n-import cmath::c_double::*;\n-import cmath::c_double_targ_consts::*;\n+use cmath::c_double::*;\n+use cmath::c_double_targ_consts::*;\n \n // Even though this module exports everything defined in it,\n // because it contains re-exports, we also have to explicitly"}, {"sha": "a1072a79718eeda42de2d286ad347d987bef6cca", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,4 +1,4 @@\n-import libc::{c_void, size_t, c_int};\n+use libc::{c_void, size_t, c_int};\n \n extern mod rustrt {\n "}, {"sha": "5ec8dbaf3cc1fb004afefcfd1e9f48f2b5286eff", "filename": "src/libcore/float.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -30,19 +30,19 @@ export j0, j1, jn, y0, y1, yn;\n \n // PORT this must match in width according to architecture\n \n-import m_float = f64;\n-\n-import f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n-import f64::logarithm;\n-import f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n-import f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n-import f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n-import f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n-import f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n-import f64::signbit;\n-import f64::{j0, j1, jn, y0, y1, yn};\n-import cmp::{Eq, Ord};\n-import num::from_int;\n+use m_float = f64;\n+\n+use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n+use f64::logarithm;\n+use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n+use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n+use f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n+use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n+use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n+use f64::signbit;\n+use f64::{j0, j1, jn, y0, y1, yn};\n+use cmp::{Eq, Ord};\n+use num::from_int;\n \n const NaN: float = 0.0/0.0;\n "}, {"sha": "bd94b7c726d70103d2455312fd9c88521c924c2e", "filename": "src/libcore/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -15,9 +15,9 @@\n  * ~~~\n  */\n \n-import either::Either;\n-import pipes::recv;\n-import unsafe::copy_lifetime;\n+use either::Either;\n+use pipes::recv;\n+use unsafe::copy_lifetime;\n \n export Future;\n export extensions;"}, {"sha": "7ca42f320d9301229fddd27d8d9005009f19b055", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -13,9 +13,9 @@\n  * CPRNG like rand::rng.\n  */\n \n-import io::Writer;\n-import io::WriterUtil;\n-import to_bytes::IterBytes;\n+use io::Writer;\n+use io::WriterUtil;\n+use to_bytes::IterBytes;\n \n export Streaming, State, Hash, HashUtil;\n export default_state;"}, {"sha": "0fd8ea1d5f19ab6cc506917e6345ff652d5317df", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -2,10 +2,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import T = inst::T;\n-import cmp::{Eq, Ord};\n-import from_str::FromStr;\n-import num::from_int;\n+use T = inst::T;\n+use cmp::{Eq, Ord};\n+use from_str::FromStr;\n+use num::from_int;\n \n export min_value, max_value;\n export min, max;"}, {"sha": "21047660e7dcf55065d08c1e21bc970b07da94a6", "filename": "src/libcore/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -4,13 +4,13 @@ Module: io\n Basic input/output\n */\n \n-import result::Result;\n+use result::Result;\n \n-import cmp::Eq;\n-import dvec::DVec;\n-import libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n-import libc::consts::os::posix88::*;\n-import libc::consts::os::extra::*;\n+use cmp::Eq;\n+use dvec::DVec;\n+use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n+use libc::consts::os::posix88::*;\n+use libc::consts::os::extra::*;\n \n #[allow(non_camel_case_types)] // not sure what to do about this\n type fd_t = c_int;"}, {"sha": "b3f312113408ff2b3c590e229609a8546888acc5", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -2,8 +2,8 @@\n // workaround our lack of traits and lack of macros.  See core.{rc,rs} for\n // how this file is used.\n \n-import cmp::{Eq, Ord};\n-import inst::{IMPL_T, EACH, SIZE_HINT};\n+use cmp::{Eq, Ord};\n+use inst::{IMPL_T, EACH, SIZE_HINT};\n export extensions;\n \n impl<A> IMPL_T<A>: iter::BaseIter<A> {"}, {"sha": "0ba77d40663759e84f816b42261301c27effddad", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -44,44 +44,44 @@\n \n // FIXME (#2006): change these to glob-exports when sufficiently supported.\n \n-import types::common::c95::*;\n-import types::common::c99::*;\n-import types::common::posix88::*;\n-import types::common::posix01::*;\n-import types::common::posix08::*;\n-import types::common::bsd44::*;\n-import types::os::arch::c95::*;\n-import types::os::arch::c99::*;\n-import types::os::arch::posix88::*;\n-import types::os::arch::posix01::*;\n-import types::os::arch::posix08::*;\n-import types::os::arch::bsd44::*;\n-import types::os::arch::extra::*;\n-\n-import consts::os::c95::*;\n-import consts::os::c99::*;\n-import consts::os::posix88::*;\n-import consts::os::posix01::*;\n-import consts::os::posix08::*;\n-import consts::os::bsd44::*;\n-import consts::os::extra::*;\n-\n-import funcs::c95::ctype::*;\n-import funcs::c95::stdio::*;\n-import funcs::c95::stdlib::*;\n-import funcs::c95::string::*;\n-\n-import funcs::posix88::stat::*;\n-import funcs::posix88::stdio::*;\n-import funcs::posix88::fcntl::*;\n-import funcs::posix88::dirent::*;\n-import funcs::posix88::unistd::*;\n-\n-import funcs::posix01::unistd::*;\n-import funcs::posix08::unistd::*;\n-\n-import funcs::bsd44::*;\n-import funcs::extra::*;\n+use types::common::c95::*;\n+use types::common::c99::*;\n+use types::common::posix88::*;\n+use types::common::posix01::*;\n+use types::common::posix08::*;\n+use types::common::bsd44::*;\n+use types::os::arch::c95::*;\n+use types::os::arch::c99::*;\n+use types::os::arch::posix88::*;\n+use types::os::arch::posix01::*;\n+use types::os::arch::posix08::*;\n+use types::os::arch::bsd44::*;\n+use types::os::arch::extra::*;\n+\n+use consts::os::c95::*;\n+use consts::os::c99::*;\n+use consts::os::posix88::*;\n+use consts::os::posix01::*;\n+use consts::os::posix08::*;\n+use consts::os::bsd44::*;\n+use consts::os::extra::*;\n+\n+use funcs::c95::ctype::*;\n+use funcs::c95::stdio::*;\n+use funcs::c95::stdlib::*;\n+use funcs::c95::string::*;\n+\n+use funcs::posix88::stat::*;\n+use funcs::posix88::stdio::*;\n+use funcs::posix88::fcntl::*;\n+use funcs::posix88::dirent::*;\n+use funcs::posix88::unistd::*;\n+\n+use funcs::posix01::unistd::*;\n+use funcs::posix08::unistd::*;\n+\n+use funcs::bsd44::*;\n+use funcs::extra::*;\n \n // FIXME (#2006): remove these 3 exports (and their uses next door in os::)\n // when export globs work. They provide access (for now) for os:: to dig"}, {"sha": "e2f0fd6220464963dd07d15e17876dc561fb9497", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -12,8 +12,8 @@ mutation when the data structure should be immutable.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import util::with;\n-import unsafe::transmute_immut;\n+use util::with;\n+use unsafe::transmute_immut;\n \n export Managed;\n "}, {"sha": "24e5d33cf451805873ad7d5c749ef574494c8d13", "filename": "src/libcore/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -20,14 +20,14 @@\n  * to write OS-ignorant code by default.\n  */\n \n-import libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n+use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n               mode_t, pid_t, FILE};\n-import libc::{close, fclose};\n+use libc::{close, fclose};\n \n-import option::{Some, None};\n+use option::{Some, None};\n \n-import consts::*;\n-import task::TaskBuilder;\n+use consts::*;\n+use task::TaskBuilder;\n \n export close, fclose, fsync_fd, waitpid;\n export env, getenv, setenv, fdopen, pipe;"}, {"sha": "ae78c8108eb96e7f22b2961b7d00234b912c5e36", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -76,10 +76,10 @@ bounded and unbounded protocols allows for less code duplication.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import cmp::Eq;\n-import unsafe::{forget, reinterpret_cast, transmute};\n-import either::{Either, Left, Right};\n-import option::unwrap;\n+use cmp::Eq;\n+use unsafe::{forget, reinterpret_cast, transmute};\n+use either::{Either, Left, Right};\n+use option::unwrap;\n \n // Things used by code generated by the pipe compiler.\n export entangle, get_buffer, drop_buffer;"}, {"sha": "5db54650a6c80793043e85b9774c080231b77fec", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -6,8 +6,8 @@\n \n export chan_from_global_ptr, weaken_task;\n \n-import compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n-import task::TaskBuilder;\n+use compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n+use task::TaskBuilder;\n \n #[allow(non_camel_case_types)] // runtime type\n type rust_port_id = uint;"}, {"sha": "c7558ffba1cb4b537ff528b65b4147c0f6200e8e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -19,8 +19,8 @@ export buf_len;\n export position;\n export Ptr;\n \n-import cmp::{Eq, Ord};\n-import libc::{c_void, size_t};\n+use cmp::{Eq, Ord};\n+use libc::{c_void, size_t};\n \n #[nolink]\n #[abi = \"cdecl\"]"}, {"sha": "5fb53b1fed4e74ba39109744ea9be799fd710b3d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,7 +1,7 @@\n //! A type representing either success or failure\n \n-import cmp::Eq;\n-import either::Either;\n+use cmp::Eq;\n+use either::Either;\n \n /// The result type\n enum Result<T, U> {"}, {"sha": "60253f0c0ddea0f543d87ae2d7edb1c775c88de2", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -3,10 +3,10 @@\n #[forbid(deprecated_pattern)];\n //! Runtime calls emitted by the compiler.\n \n-import libc::c_char;\n-import libc::c_void;\n-import libc::size_t;\n-import libc::uintptr_t;\n+use libc::c_char;\n+use libc::c_void;\n+use libc::size_t;\n+use libc::uintptr_t;\n \n #[allow(non_camel_case_types)]\n type rust_task = c_void;"}, {"sha": "2e8d07175c9145bd49fe3cfc78142ab7c6b31072", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -3,9 +3,9 @@\n #[forbid(deprecated_pattern)];\n \n //! Process spawning\n-import option::{Some, None};\n-import libc::{pid_t, c_void, c_int};\n-import io::ReaderUtil;\n+use option::{Some, None};\n+use libc::{pid_t, c_void, c_int};\n+use io::ReaderUtil;\n \n export Program;\n export run_program;"}, {"sha": "8c805798327e953892b85e905d7ca8a2d95cbc40", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -4,9 +4,9 @@ Sendable hash maps.  Very much a work in progress.\n \n */\n \n-import cmp::Eq;\n-import hash::Hash;\n-import to_bytes::IterBytes;\n+use cmp::Eq;\n+use hash::Hash;\n+use to_bytes::IterBytes;\n \n trait SendMap<K:Eq Hash, V: copy> {\n     // FIXME(#3148)  ^^^^ once find_ref() works, we can drop V:copy"}, {"sha": "2d5518525fadd0f63733a00135d6db155dccc0d5", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,8 +1,8 @@\n // NB: Don't rely on other core mods here as this has to move into the rt\n \n-import unsafe::reinterpret_cast;\n-import ptr::offset;\n-import sys::size_of;\n+use unsafe::reinterpret_cast;\n+use ptr::offset;\n+use sys::size_of;\n \n type Word = uint;\n "}, {"sha": "4cd57bf422c4181e2a71d93c144a6fdbd2f6fafe", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -7,9 +7,9 @@\n  * some heavy-duty uses, try std::rope.\n  */\n \n-import cmp::{Eq, Ord};\n-import libc::size_t;\n-import io::WriterUtil;\n+use cmp::{Eq, Ord};\n+use libc::size_t;\n+use io::WriterUtil;\n \n export\n    // Creating a string"}, {"sha": "5303c9d7bf2f20e5e7e22c3c0296b9f056006faa", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -27,8 +27,8 @@\n  * ~~~\n  */\n \n-import cmp::Eq;\n-import result::Result;\n+use cmp::Eq;\n+use result::Result;\n \n export Task;\n export TaskResult;"}, {"sha": "077f56cab45c5112209ea59dc54663c4a941773f", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -2,7 +2,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import io::Writer;\n+use io::Writer;\n \n type Cb = fn(buf: &[const u8]) -> bool;\n "}, {"sha": "c54c8a8c5ebcbb8697687b22b8ef21729c70a468", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -2,9 +2,9 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import T = inst::T;\n-import cmp::{Eq, Ord};\n-import from_str::FromStr;\n+use T = inst::T;\n+use cmp::{Eq, Ord};\n+use from_str::FromStr;\n \n export min_value, max_value;\n export min, max;"}, {"sha": "8cdacba0286930bf7ba41afa1e0f080e642ac508", "filename": "src/libcore/uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funiq.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,6 +1,6 @@\n //! Operations on unique pointer types\n \n-import cmp::{Eq, Ord};\n+use cmp::{Eq, Ord};\n \n impl<T:Eq> ~const T : Eq {\n     pure fn eq(&&other: ~const T) -> bool { *self == *other }"}, {"sha": "86d78528e4d783ae3bd773d2352dc930f1e80677", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -9,7 +9,7 @@ export unwrap_shared_mutable_state;\n export Exclusive, exclusive, unwrap_exclusive;\n export copy_lifetime;\n \n-import task::atomically;\n+use task::atomically;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {"}, {"sha": "85aebc9ee90eaf64a66af8072e6808603975dfaf", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437073868e590ff8d1aae7a6fad1d8c49056f0b0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=437073868e590ff8d1aae7a6fad1d8c49056f0b0", "patch": "@@ -1,9 +1,9 @@\n //! Vectors\n \n-import cmp::{Eq, Ord};\n-import option::{Some, None};\n-import ptr::addr_of;\n-import libc::size_t;\n+use cmp::{Eq, Ord};\n+use option::{Some, None};\n+use ptr::addr_of;\n+use libc::size_t;\n \n export append;\n export append_one;"}]}