{"sha": "296794dec5698abda5cacf644049cafc627a1bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5Njc5NGRlYzU2OThhYmRhNWNhY2Y2NDQwNDljYWZjNjI3YTFiYjY=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2019-06-08T21:19:16Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby42@gmail.com", "date": "2019-06-12T19:29:37Z"}, "message": "prelim arg parse", "tree": {"sha": "c797be08a6bfe0b0c44b7754f2a3b8cb2d723790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c797be08a6bfe0b0c44b7754f2a3b8cb2d723790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296794dec5698abda5cacf644049cafc627a1bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296794dec5698abda5cacf644049cafc627a1bb6", "html_url": "https://github.com/rust-lang/rust/commit/296794dec5698abda5cacf644049cafc627a1bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296794dec5698abda5cacf644049cafc627a1bb6/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5abcff2be5a7c698376c1495fc267f07d7f25e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5abcff2be5a7c698376c1495fc267f07d7f25e1c", "html_url": "https://github.com/rust-lang/rust/commit/5abcff2be5a7c698376c1495fc267f07d7f25e1c"}], "stats": {"total": 164, "additions": 139, "deletions": 25}, "files": [{"sha": "e3a4378d524ffc51ccc904a5e68fbc8a10c82149", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296794dec5698abda5cacf644049cafc627a1bb6/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296794dec5698abda5cacf644049cafc627a1bb6/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=296794dec5698abda5cacf644049cafc627a1bb6", "patch": "@@ -100,8 +100,8 @@ fn update_lints(update_mode: &UpdateMode) {\n             \"\\\n //! This file is managed by util/dev update_lints. Do not edit.\n \n-mod lint;\n-use lint::Lint;\n+pub mod lint;\n+pub use lint::Lint;\n \n pub const ALL_LINTS: [Lint; {}] = {:#?};\\n\",\n             sorted_usable_lints.len(),"}, {"sha": "395d96a28e8cd320bf903b20fad85275b3b7e7cf", "filename": "src/driver.rs", "status": "modified", "additions": 135, "deletions": 21, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/296794dec5698abda5cacf644049cafc627a1bb6/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296794dec5698abda5cacf644049cafc627a1bb6/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=296794dec5698abda5cacf644049cafc627a1bb6", "patch": "@@ -110,21 +110,108 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     }\n }\n \n-pub fn main() {\n-    rustc_driver::init_rustc_env_logger();\n-    exit(\n-        rustc_driver::report_ices_to_stderr_if_any(move || {\n-            use std::env;\n+fn describe_lints() {\n+    use lintlist::*;\n \n-            if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n-                let version_info = rustc_tools_util::get_version_info!();\n-                println!(\"{}\", version_info);\n-                exit(0);\n-            }\n+    println!(\n+        \"\n+Available lint options:\n+    -W <foo>           Warn about <foo>\n+    -A <foo>           Allow <foo>\n+    -D <foo>           Deny <foo>\n+    -F <foo>           Forbid <foo> (deny <foo> and all attempts to override)\n \n-            if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n-                println!(\n-                    \"\\\n+\"\n+    );\n+\n+    let mut lints: Vec<_> = ALL_LINTS.iter().collect();\n+    // The sort doesn't case-fold but it's doubtful we care.\n+    lints.sort_by_cached_key(|x: &&Lint| (\"unknown\", x.name));\n+\n+    let max_name_len = lints\n+        .iter()\n+        .map(|lint| lint.name.len())\n+        .map(|len| len + \"clippy::\".len())\n+        .max()\n+        .unwrap_or(0);\n+\n+    let padded = |x: &str| {\n+        let mut s = \" \".repeat(max_name_len - x.chars().count());\n+        s.push_str(x);\n+        s\n+    };\n+\n+    let scoped = |x: &str| format!(\"clippy::{}\", x);\n+\n+    println!(\"Lint checks provided by clippy:\\n\");\n+    println!(\"    {}  {:7.7}  meaning\", padded(\"name\"), \"default\");\n+    println!(\"    {}  {:7.7}  -------\", padded(\"----\"), \"-------\");\n+\n+    let print_lints = |lints: Vec<&Lint>| {\n+        for lint in lints {\n+            let name = lint.name.replace(\"_\", \"-\");\n+            println!(\"    {}  {:7.7}  {}\", padded(&scoped(&name)), \"unknown\", lint.desc);\n+        }\n+        println!(\"\\n\");\n+    };\n+\n+    print_lints(lints);\n+\n+    // let max_name_len = max(\"warnings\".len(),\n+    //                        plugin_groups.iter()\n+    //                                     .chain(&builtin_groups)\n+    //                                     .map(|&(s, _)| s.chars().count())\n+    //                                     .max()\n+    //                                     .unwrap_or(0));\n+\n+    // let padded = |x: &str| {\n+    //     let mut s = \" \".repeat(max_name_len - x.chars().count());\n+    //     s.push_str(x);\n+    //     s\n+    // };\n+\n+    // println!(\"Lint groups provided by rustc:\\n\");\n+    // println!(\"    {}  {}\", padded(\"name\"), \"sub-lints\");\n+    // println!(\"    {}  {}\", padded(\"----\"), \"---------\");\n+    // println!(\"    {}  {}\", padded(\"warnings\"), \"all lints that are set to issue warnings\");\n+\n+    // let print_lint_groups = |lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n+    //     for (name, to) in lints {\n+    //         let name = name.to_lowercase().replace(\"_\", \"-\");\n+    //         let desc = to.into_iter()\n+    //                      .map(|x| x.to_string().replace(\"_\", \"-\"))\n+    //                      .collect::<Vec<String>>()\n+    //                      .join(\", \");\n+    //         println!(\"    {}  {}\", padded(&name), desc);\n+    //     }\n+    //     println!(\"\\n\");\n+    // };\n+\n+    // print_lint_groups(builtin_groups);\n+\n+    // match (loaded_plugins, plugin.len(), plugin_groups.len()) {\n+    //     (false, 0, _) | (false, _, 0) => {\n+    //         println!(\"Compiler plugins can provide additional lints and lint groups. To see a \\\n+    //                   listing of these, re-run `rustc -W help` with a crate filename.\");\n+    //     }\n+    //     (false, ..) => panic!(\"didn't load lint plugins but got them anyway!\"),\n+    //     (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n+    //     (true, l, g) => {\n+    //         if l > 0 {\n+    //             println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+    //             print_lints(plugin);\n+    //         }\n+    //         if g > 0 {\n+    //             println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n+    //             print_lint_groups(plugin_groups);\n+    //         }\n+    //     }\n+    // }\n+}\n+\n+fn display_help() {\n+    println!(\n+        \"\\\n Checks a package to catch common mistakes and improve your Rust code.\n \n Usage:\n@@ -148,11 +235,18 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n     #[allow(clippy::needless_lifetimes)]\n \"\n-                );\n+    );\n+}\n \n-                for lint in &lintlist::ALL_LINTS[..] {\n-                    println!(\"clippy::{},\", lint.name);\n-                }\n+pub fn main() {\n+    rustc_driver::init_rustc_env_logger();\n+    exit(\n+        rustc_driver::report_ices_to_stderr_if_any(move || {\n+            use std::env;\n+\n+            if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+                let version_info = rustc_tools_util::get_version_info!();\n+                println!(\"{}\", version_info);\n                 exit(0);\n             }\n \n@@ -189,13 +283,33 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n             // We're invoking the compiler programmatically, so we ignore this/\n-            if orig_args.len() <= 1 {\n-                std::process::exit(1);\n-            }\n-            if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n+            let wrapper_mode = Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref());\n+\n+            if wrapper_mode {\n                 // we still want to be able to invoke it normally though\n                 orig_args.remove(1);\n             }\n+\n+            if !wrapper_mode && std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+                display_help();\n+                exit(0);\n+            }\n+\n+            let args: Vec<_> = std::env::args().collect();\n+\n+            if !wrapper_mode\n+                && args.windows(2).any(|args| {\n+                    args[1] == \"help\"\n+                        && match args[0].as_str() {\n+                            \"-W\" | \"-A\" | \"-D\" | \"-F\" => true,\n+                            _ => false,\n+                        }\n+                })\n+            {\n+                describe_lints();\n+                exit(0);\n+            }\n+\n             // this conditional check for the --sysroot flag is there so users can call\n             // `clippy_driver` directly\n             // without having to pass --sysroot or anything"}, {"sha": "ea26224b3e4fb6289a52054435579be80728575b", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296794dec5698abda5cacf644049cafc627a1bb6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296794dec5698abda5cacf644049cafc627a1bb6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=296794dec5698abda5cacf644049cafc627a1bb6", "patch": "@@ -1,7 +1,7 @@\n //! This file is managed by util/dev update_lints. Do not edit.\n \n-mod lint;\n-use lint::Lint;\n+pub mod lint;\n+pub use lint::Lint;\n \n pub const ALL_LINTS: [Lint; 304] = [\n     Lint {"}]}