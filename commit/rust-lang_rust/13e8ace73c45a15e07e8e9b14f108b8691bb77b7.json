{"sha": "13e8ace73c45a15e07e8e9b14f108b8691bb77b7", "node_id": "C_kwDOAAsO6NoAKDEzZThhY2U3M2M0NWExNWUwN2U4ZTliMTRmMTA4Yjg2OTFiYjc3Yjc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:37Z"}, "message": "Rollup merge of #96557 - nbdd0121:const, r=oli-obk\n\nAllow inline consts to reference generic params\n\nTracking issue: #76001\n\nThe RFC says that inline consts cannot reference to generic parameters (for now), same as array length expressions. And expresses that it's desirable for it to reference in-scope generics, when array length expressions gain that feature as well.\n\nHowever it is possible to implement this for inline consts before doing this for all anon consts, because inline consts are only used as values and they won't be used in the type system. So we can have:\n```rust\nfn foo<T>() {\n    let x = [4i32; std::mem::size_of::<T>()];   // NOT ALLOWED (for now)\n    let x = const { std::mem::size_of::<T>() }; // ALLOWED with this PR!\n    let x = [4i32; const { std::mem::size_of::<T>() }];   // NOT ALLOWED (for now)\n}\n```\n\nThis would make inline consts super useful for compile-time checks and assertions:\n```rust\nfn assert_zst<T>() {\n    const { assert!(std::mem::size_of::<T>() == 0) };\n}\n```\n\nThis would create an error during monomorphization when `assert_zst` is instantiated with non-ZST `T`s. A error during mono might sound scary, but this is exactly what a \"desugared\" inline const would do:\n```rust\nfn assert_zst<T>() {\n    struct F<T>(T);\n    impl<T> F<T> {\n        const V: () = assert!(std::mem::size_of::<T>() == 0);\n    }\n    let _ = F::<T>::V;\n}\n```\n\nIt should also be noted that the current inline const implementation can already reference the type params via type inference, so this resolver-level restriction is not any useful either:\n```rust\nfn foo<T>() -> usize {\n    let (_, size): (PhantomData<T>, usize) = const {\n        const fn my_size_of<T>() -> (PhantomData<T>, usize) {\n            (PhantomData, std::mem::size_of::<T>())\n        }\n        my_size_of()\n    };\n    size\n}\n```\n\n```@rustbot``` label: F-inline_const", "tree": {"sha": "a90cbcb6ac1afd940376543603d873bf197f74ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90cbcb6ac1afd940376543603d873bf197f74ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e8ace73c45a15e07e8e9b14f108b8691bb77b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e8ace73c45a15e07e8e9b14f108b8691bb77b7", "html_url": "https://github.com/rust-lang/rust/commit/13e8ace73c45a15e07e8e9b14f108b8691bb77b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e8ace73c45a15e07e8e9b14f108b8691bb77b7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cd86aa1be18d608d828239c11e887a762efc92a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd86aa1be18d608d828239c11e887a762efc92a", "html_url": "https://github.com/rust-lang/rust/commit/7cd86aa1be18d608d828239c11e887a762efc92a"}, {"sha": "f0c2ac8a298f7bf828334972cf7c00a20389bbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c2ac8a298f7bf828334972cf7c00a20389bbdb", "html_url": "https://github.com/rust-lang/rust/commit/f0c2ac8a298f7bf828334972cf7c00a20389bbdb"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "6ae700753f06d672724d197018dd7fbecceb6ecf", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e8ace73c45a15e07e8e9b14f108b8691bb77b7/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13e8ace73c45a15e07e8e9b14f108b8691bb77b7/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=13e8ace73c45a15e07e8e9b14f108b8691bb77b7", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of `main::{constant#3}::<&i32>` failed\n+error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts."}]}