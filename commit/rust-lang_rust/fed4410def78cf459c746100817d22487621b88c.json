{"sha": "fed4410def78cf459c746100817d22487621b88c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDQ0MTBkZWY3OGNmNDU5Yzc0NjEwMDgxN2QyMjQ4NzYyMWI4OGM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-01T17:42:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-03T21:36:22Z"}, "message": "Replace Vec by Option.", "tree": {"sha": "4fe94cb037ca562094ebf36e4af37058199cfa7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe94cb037ca562094ebf36e4af37058199cfa7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed4410def78cf459c746100817d22487621b88c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed4410def78cf459c746100817d22487621b88c", "html_url": "https://github.com/rust-lang/rust/commit/fed4410def78cf459c746100817d22487621b88c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed4410def78cf459c746100817d22487621b88c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1baac86670227658962d895157d27cfd4e4ea70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1baac86670227658962d895157d27cfd4e4ea70c", "html_url": "https://github.com/rust-lang/rust/commit/1baac86670227658962d895157d27cfd4e4ea70c"}], "stats": {"total": 49, "additions": 14, "deletions": 35}, "files": [{"sha": "16cd7a0bcdd394af214d0a0235fab976fb3c3636", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fed4410def78cf459c746100817d22487621b88c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed4410def78cf459c746100817d22487621b88c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=fed4410def78cf459c746100817d22487621b88c", "patch": "@@ -1186,9 +1186,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n             }\n             None => self\n-                .loop_scopes\n-                .last()\n-                .cloned()\n+                .loop_scope\n                 .map(|id| Ok(self.lower_node_id(id)))\n                 .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope)),\n         };\n@@ -1208,18 +1206,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn with_catch_scope<T>(&mut self, catch_id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let len = self.catch_scopes.len();\n-        self.catch_scopes.push(catch_id);\n-\n+        let old_scope = self.catch_scope.replace(catch_id);\n         let result = f(self);\n-        assert_eq!(\n-            len + 1,\n-            self.catch_scopes.len(),\n-            \"catch scopes should be added and removed in stack order\"\n-        );\n-\n-        self.catch_scopes.pop().unwrap();\n-\n+        self.catch_scope = old_scope;\n         result\n     }\n \n@@ -1228,17 +1217,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n \n-        let len = self.loop_scopes.len();\n-        self.loop_scopes.push(loop_id);\n-\n+        let old_scope = self.loop_scope.replace(loop_id);\n         let result = f(self);\n-        assert_eq!(\n-            len + 1,\n-            self.loop_scopes.len(),\n-            \"loop scopes should be added and removed in stack order\"\n-        );\n-\n-        self.loop_scopes.pop().unwrap();\n+        self.loop_scope = old_scope;\n \n         self.is_in_loop_condition = was_in_loop_condition;\n \n@@ -1565,8 +1546,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 unstable_span,\n             );\n             let thin_attrs = ThinVec::from(attrs);\n-            let catch_scope = self.catch_scopes.last().copied();\n-            let ret_expr = if let Some(catch_node) = catch_scope {\n+            let ret_expr = if let Some(catch_node) = self.catch_scope {\n                 let target_id = Ok(self.lower_node_id(catch_node));\n                 self.arena.alloc(self.expr(\n                     try_span,"}, {"sha": "5391d4b0c93638295cfe30fccc84afef52507dc2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fed4410def78cf459c746100817d22487621b88c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed4410def78cf459c746100817d22487621b88c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fed4410def78cf459c746100817d22487621b88c", "patch": "@@ -64,7 +64,6 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n use std::collections::BTreeMap;\n-use std::mem;\n use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n@@ -117,8 +116,8 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// outside of an `async fn`.\n     current_item: Option<Span>,\n \n-    catch_scopes: Vec<NodeId>,\n-    loop_scopes: Vec<NodeId>,\n+    catch_scope: Option<NodeId>,\n+    loop_scope: Option<NodeId>,\n     is_in_loop_condition: bool,\n     is_in_trait_impl: bool,\n     is_in_dyn_type: bool,\n@@ -323,8 +322,8 @@ pub fn lower_crate<'a, 'hir>(\n         bodies: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n-        catch_scopes: Vec::new(),\n-        loop_scopes: Vec::new(),\n+        catch_scope: None,\n+        loop_scope: None,\n         is_in_loop_condition: false,\n         is_in_trait_impl: false,\n         is_in_dyn_type: false,\n@@ -911,11 +910,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n \n-        let catch_scopes = mem::take(&mut self.catch_scopes);\n-        let loop_scopes = mem::take(&mut self.loop_scopes);\n+        let catch_scope = self.catch_scope.take();\n+        let loop_scope = self.loop_scope.take();\n         let ret = f(self);\n-        self.catch_scopes = catch_scopes;\n-        self.loop_scopes = loop_scopes;\n+        self.catch_scope = catch_scope;\n+        self.loop_scope = loop_scope;\n \n         self.is_in_loop_condition = was_in_loop_condition;\n "}]}