{"sha": "019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTIxMjQyMDIxNmE4YTRlYzZlYzljMTFjZDE0Y2FiN2U0ZjliODk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T21:06:41Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:44:34Z"}, "message": "Make should_treat_range_exhaustively a method", "tree": {"sha": "8f80ef487be199a9c1a186bbe0d9767b4bdaa91f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f80ef487be199a9c1a186bbe0d9767b4bdaa91f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "html_url": "https://github.com/rust-lang/rust/commit/019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019212420216a8a4ec6ec9c11cd14cab7e4f9b89/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1642f1eb51c349c3caa940da43f0b5a51111011", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1642f1eb51c349c3caa940da43f0b5a51111011", "html_url": "https://github.com/rust-lang/rust/commit/d1642f1eb51c349c3caa940da43f0b5a51111011"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "e1cb847c68decc8faff6c2de7446f3c68349f6b4", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/019212420216a8a4ec6ec9c11cd14cab7e4f9b89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019212420216a8a4ec6ec9c11cd14cab7e4f9b89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=019212420216a8a4ec6ec9c11cd14cab7e4f9b89", "patch": "@@ -1282,11 +1282,10 @@ impl<'tcx> IntRange<'tcx> {\n         (*self.range.start(), *self.range.end())\n     }\n \n-    fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    fn treat_exhaustively(&self, tcx: TyCtxt<'tcx>) -> bool {\n         // Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching`\n         // feature is enabled.\n-        IntRange::is_integral(ty)\n-            && (!ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching)\n+        !self.ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching\n     }\n \n     #[inline]\n@@ -1414,7 +1413,7 @@ impl<'tcx> IntRange<'tcx> {\n         let ty = self.ty;\n         let (lo, hi) = self.boundaries();\n         let (other_lo, other_hi) = other.boundaries();\n-        if Self::should_treat_range_exhaustively(tcx, ty) {\n+        if self.treat_exhaustively(tcx) {\n             if lo <= other_hi && other_lo <= hi {\n                 let span = other.span;\n                 Some(IntRange { range: max(lo, other_lo)..=min(hi, other_hi), ty, span })\n@@ -1881,7 +1880,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n \n     for ctor in ctors.into_iter() {\n         match ctor {\n-            IntRange(ctor_range) if IntRange::should_treat_range_exhaustively(tcx, ty) => {\n+            IntRange(ctor_range) if ctor_range.treat_exhaustively(tcx) => {\n                 // Fast-track if the range is trivial. In particular, don't do the overlapping\n                 // ranges check.\n                 if ctor_range.is_singleton() {"}]}