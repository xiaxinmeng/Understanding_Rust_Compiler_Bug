{"sha": "6858fbc1012c2313dc538ba9fca6fa42c1deb198", "node_id": "C_kwDOAAsO6NoAKDY4NThmYmMxMDEyYzIzMTNkYzUzOGJhOWZjYTZmYTQyYzFkZWIxOTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-01T22:16:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-09T20:50:23Z"}, "message": "Do not call `check_expr` in `check_compatible`, since it has side-effects and we've already checked all args", "tree": {"sha": "dbd87b9ecb1a2541929e28723f07f8f95ba509fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd87b9ecb1a2541929e28723f07f8f95ba509fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6858fbc1012c2313dc538ba9fca6fa42c1deb198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6858fbc1012c2313dc538ba9fca6fa42c1deb198", "html_url": "https://github.com/rust-lang/rust/commit/6858fbc1012c2313dc538ba9fca6fa42c1deb198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6858fbc1012c2313dc538ba9fca6fa42c1deb198/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b8dd5389cd9d545418a60902222a4ba859365f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b8dd5389cd9d545418a60902222a4ba859365f", "html_url": "https://github.com/rust-lang/rust/commit/86b8dd5389cd9d545418a60902222a4ba859365f"}], "stats": {"total": 69, "additions": 24, "deletions": 45}, "files": [{"sha": "58c01a34cad51de2350de72d53dbb49ce054ff39", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6858fbc1012c2313dc538ba9fca6fa42c1deb198/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6858fbc1012c2313dc538ba9fca6fa42c1deb198/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6858fbc1012c2313dc538ba9fca6fa42c1deb198", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self, expr), level = \"debug\")]\n-    pub(super) fn check_expr_kind(\n+    fn check_expr_kind(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,"}, {"sha": "a7c7089234aa959701c9cd6b7f43aa0aafae00d2", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6858fbc1012c2313dc538ba9fca6fa42c1deb198/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6858fbc1012c2313dc538ba9fca6fa42c1deb198/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6858fbc1012c2313dc538ba9fca6fa42c1deb198", "patch": "@@ -483,6 +483,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.set_tainted_by_errors();\n         let tcx = self.tcx;\n \n+        // Precompute the provided types and spans, since that's all we typically need for below\n+        let provided_arg_tys: IndexVec<ProvidedIdx, (Ty<'tcx>, Span)> = provided_args\n+            .iter()\n+            .map(|expr| {\n+                let ty = self\n+                    .typeck_results\n+                    .borrow()\n+                    .expr_ty_adjusted_opt(*expr)\n+                    .unwrap_or_else(|| tcx.ty_error());\n+                (self.resolve_vars_if_possible(ty), expr.span)\n+            })\n+            .collect();\n+\n         // A \"softer\" version of the `demand_compatible`, which checks types without persisting them,\n         // and treats error types differently\n         // This will allow us to \"probe\" for other argument orders that would likely have been correct\n@@ -499,31 +512,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return Compatibility::Incompatible(None);\n             }\n \n-            let provided_arg: &hir::Expr<'tcx> = &provided_args[provided_idx];\n-            let expectation = Expectation::rvalue_hint(self, expected_input_ty);\n-            // FIXME: check that this is safe; I don't believe this commits any of the obligations, but I can't be sure.\n-            //\n-            //   I had another method of \"soft\" type checking before,\n-            //   but it was failing to find the type of some expressions (like \"\")\n-            //   so I prodded this method and made it pub(super) so I could call it, and it seems to work well.\n-            let checked_ty = self.check_expr_kind(provided_arg, expectation);\n+            let (arg_ty, arg_span) = provided_arg_tys[provided_idx];\n \n+            let expectation = Expectation::rvalue_hint(self, expected_input_ty);\n             let coerced_ty = expectation.only_has_type(self).unwrap_or(formal_input_ty);\n-            let can_coerce = self.can_coerce(checked_ty, coerced_ty);\n+            let can_coerce = self.can_coerce(arg_ty, coerced_ty);\n             if !can_coerce {\n                 return Compatibility::Incompatible(None);\n             }\n \n             // Using probe here, since we don't want this subtyping to affect inference.\n             let subtyping_error = self.probe(|_| {\n-                self.at(&self.misc(provided_arg.span), self.param_env)\n-                    .sup(formal_input_ty, coerced_ty)\n-                    .err()\n+                self.at(&self.misc(arg_span), self.param_env).sup(formal_input_ty, coerced_ty).err()\n             });\n \n             // Same as above: if either the coerce type or the checked type is an error type,\n             // consider them *not* compatible.\n-            let references_error = (coerced_ty, checked_ty).references_error();\n+            let references_error = (coerced_ty, arg_ty).references_error();\n             match (references_error, subtyping_error) {\n                 (false, None) => Compatibility::Compatible,\n                 (_, subtyping_error) => Compatibility::Incompatible(subtyping_error),\n@@ -542,19 +547,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ArgMatrix::new(provided_args.len(), formal_and_expected_inputs.len(), check_compatible)\n                 .find_errors();\n \n-        // Precompute the provided types and spans, since that's all we typically need for below\n-        let provided_arg_tys: IndexVec<ProvidedIdx, (Ty<'tcx>, Span)> = provided_args\n-            .iter()\n-            .map(|expr| {\n-                let ty = self\n-                    .typeck_results\n-                    .borrow()\n-                    .expr_ty_adjusted_opt(*expr)\n-                    .unwrap_or_else(|| tcx.ty_error());\n-                (self.resolve_vars_if_possible(ty), expr.span)\n-            })\n-            .collect();\n-\n         // First, check if we just need to wrap some arguments in a tuple.\n         if let Some((mismatch_idx, terr)) =\n             compatibility_diagonal.iter().enumerate().find_map(|(i, c)| {"}, {"sha": "7c626a01b1298dfdb64655d763eb2d31ba2721a4", "filename": "src/test/ui/issues/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6858fbc1012c2313dc538ba9fca6fa42c1deb198/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6858fbc1012c2313dc538ba9fca6fa42c1deb198/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs?ref=6858fbc1012c2313dc538ba9fca6fa42c1deb198", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n+        //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n     });\n-    //~^^ ERROR mismatched types\n-    //~| ERROR this function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "a4c455ca1927e3fc225c5b09bf56dd344b46511c", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6858fbc1012c2313dc538ba9fca6fa42c1deb198/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6858fbc1012c2313dc538ba9fca6fa42c1deb198/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=6858fbc1012c2313dc538ba9fca6fa42c1deb198", "patch": "@@ -1,21 +1,9 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-3044.rs:3:35\n-   |\n-LL |       needlesArr.iter().fold(|x, y| {\n-   |  ____________________________------_^\n-   | |                            |\n-   | |                            the expected closure\n-LL | |     });\n-   | |_____^ expected closure, found `()`\n-   |\n-   = note: expected closure `[closure@$DIR/issue-3044.rs:3:28: 3:34]`\n-            found unit type `()`\n-\n error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n LL |       needlesArr.iter().fold(|x, y| {\n    |  _______________________^^^^-\n+LL | |\n LL | |     });\n    | |______- an argument is missing\n    |\n@@ -27,10 +15,10 @@ LL |     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n help: provide the argument\n    |\n LL ~     needlesArr.iter().fold(|x, y| {\n+LL +\n LL ~     }, /* value */);\n    |\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0061, E0308.\n-For more information about an error, try `rustc --explain E0061`.\n+For more information about this error, try `rustc --explain E0061`."}]}