{"sha": "00db13fcc99ad722487ac1f565ee2717f9eb89e3", "node_id": "C_kwDOAAsO6NoAKDAwZGIxM2ZjYzk5YWQ3MjI0ODdhYzFmNTY1ZWUyNzE3ZjllYjg5ZTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-06T11:04:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-06T11:04:44Z"}, "message": "Rollup merge of #101412 - WaffleLapkin:improve_std_ptr_code_leftovers, r=scottmcm\n\nSome more cleanup in `core`\n\n- remove some integer casts from slice iter (proposed in https://github.com/rust-lang/rust/pull/100819#discussion_r951113196)\n- replace `as usize` casts with `usize::from` in slice sort (proposed in https://github.com/rust-lang/rust/pull/100822#discussion_r950768698)\n\nr? `@scottmcm`", "tree": {"sha": "49407230a8e32f792a174e4753e9e1612e43ce28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49407230a8e32f792a174e4753e9e1612e43ce28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00db13fcc99ad722487ac1f565ee2717f9eb89e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFylMCRBK7hj4Ov3rIwAAS4YIAGQ8WvH1+vOMg5lF0f/AqUYR\ntj4mCsX3VqMc/h7hURgo/Cnb8xgBHsVIcMmAeX+9oAXBorO4wcqiBP2YJxwiLlzZ\nb4oVifNjwQQxQKiMvo5pAPZ7dhcSsBkE0wvOyQeioBy3e4eJsLwGER32HF+2FyIP\njqEmkqp7GWjNllYSQXAg/mjm84Y8eFPtlX+ICsmdrDgMcZxaVlUQGAc79a8xYA/i\nyv+qu99G7gO8Y/H18oKSu2+dkr7TC9Uca2RWNaAvwDdiLV+hgvgc9222oRdwv1Wc\nW3FIBy1HnE6zX23u3WyKE7IDDHf9SE3wCsKS7ObhbvgdTHGFwYXQdF5p7J4Uvgw=\n=c91X\n-----END PGP SIGNATURE-----\n", "payload": "tree 49407230a8e32f792a174e4753e9e1612e43ce28\nparent 24f998932e1179c16354ad92f2da6204ebcac86e\nparent 5a672921a3cd6d474751b86690161f6477a501a6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662462284 +0530\ncommitter GitHub <noreply@github.com> 1662462284 +0530\n\nRollup merge of #101412 - WaffleLapkin:improve_std_ptr_code_leftovers, r=scottmcm\n\nSome more cleanup in `core`\n\n- remove some integer casts from slice iter (proposed in https://github.com/rust-lang/rust/pull/100819#discussion_r951113196)\n- replace `as usize` casts with `usize::from` in slice sort (proposed in https://github.com/rust-lang/rust/pull/100822#discussion_r950768698)\n\nr? `@scottmcm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00db13fcc99ad722487ac1f565ee2717f9eb89e3", "html_url": "https://github.com/rust-lang/rust/commit/00db13fcc99ad722487ac1f565ee2717f9eb89e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00db13fcc99ad722487ac1f565ee2717f9eb89e3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f998932e1179c16354ad92f2da6204ebcac86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f998932e1179c16354ad92f2da6204ebcac86e", "html_url": "https://github.com/rust-lang/rust/commit/24f998932e1179c16354ad92f2da6204ebcac86e"}, {"sha": "5a672921a3cd6d474751b86690161f6477a501a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a672921a3cd6d474751b86690161f6477a501a6", "html_url": "https://github.com/rust-lang/rust/commit/5a672921a3cd6d474751b86690161f6477a501a6"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "6c9e7574e1746bd781cca59aa921fe68bc82d983", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00db13fcc99ad722487ac1f565ee2717f9eb89e3/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00db13fcc99ad722487ac1f565ee2717f9eb89e3/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=00db13fcc99ad722487ac1f565ee2717f9eb89e3", "patch": "@@ -64,7 +64,7 @@ macro_rules! iterator {\n         // backwards by `n`. `n` must not exceed `self.len()`.\n         macro_rules! zst_shrink {\n             ($self: ident, $n: ident) => {\n-                $self.end = $self.end.wrapping_byte_offset(-$n);\n+                $self.end = $self.end.wrapping_byte_sub($n);\n             }\n         }\n \n@@ -82,15 +82,15 @@ macro_rules! iterator {\n             // returning the old start.\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n-            unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {\n+            unsafe fn post_inc_start(&mut self, offset: usize) -> * $raw_mut T {\n                 if mem::size_of::<T>() == 0 {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {\n                     let old = self.ptr.as_ptr();\n                     // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,\n                     // so this new pointer is inside `self` and thus guaranteed to be non-null.\n-                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };\n+                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().add(offset)) };\n                     old\n                 }\n             }\n@@ -99,15 +99,15 @@ macro_rules! iterator {\n             // returning the new end.\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n-            unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {\n+            unsafe fn pre_dec_end(&mut self, offset: usize) -> * $raw_mut T {\n                 if mem::size_of::<T>() == 0 {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {\n                     // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,\n                     // which is guaranteed to not overflow an `isize`. Also, the resulting pointer\n                     // is in bounds of `slice`, which fulfills the other requirements for `offset`.\n-                    self.end = unsafe { self.end.offset(-offset) };\n+                    self.end = unsafe { self.end.sub(offset) };\n                     self.end\n                 }\n             }\n@@ -180,7 +180,7 @@ macro_rules! iterator {\n                 }\n                 // SAFETY: We are in bounds. `post_inc_start` does the right thing even for ZSTs.\n                 unsafe {\n-                    self.post_inc_start(n as isize);\n+                    self.post_inc_start(n);\n                     Some(next_unchecked!(self))\n                 }\n             }\n@@ -189,7 +189,7 @@ macro_rules! iterator {\n             fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n-                unsafe { self.post_inc_start(advance as isize) };\n+                unsafe { self.post_inc_start(advance) };\n                 if advance == n { Ok(()) } else { Err(advance) }\n             }\n \n@@ -375,7 +375,7 @@ macro_rules! iterator {\n                 }\n                 // SAFETY: We are in bounds. `pre_dec_end` does the right thing even for ZSTs.\n                 unsafe {\n-                    self.pre_dec_end(n as isize);\n+                    self.pre_dec_end(n);\n                     Some(next_back_unchecked!(self))\n                 }\n             }\n@@ -384,7 +384,7 @@ macro_rules! iterator {\n             fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n-                unsafe { self.pre_dec_end(advance as isize) };\n+                unsafe { self.pre_dec_end(advance) };\n                 if advance == n { Ok(()) } else { Err(advance) }\n             }\n         }"}, {"sha": "c6c03c0b0db96378dfbf2da93ca45689882af5a8", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00db13fcc99ad722487ac1f565ee2717f9eb89e3/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00db13fcc99ad722487ac1f565ee2717f9eb89e3/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=00db13fcc99ad722487ac1f565ee2717f9eb89e3", "patch": "@@ -365,12 +365,12 @@ where\n         if count > 0 {\n             macro_rules! left {\n                 () => {\n-                    l.add(*start_l as usize)\n+                    l.add(usize::from(*start_l))\n                 };\n             }\n             macro_rules! right {\n                 () => {\n-                    r.sub((*start_r as usize) + 1)\n+                    r.sub(usize::from(*start_r) + 1)\n                 };\n             }\n \n@@ -458,7 +458,7 @@ where\n             //    the last block, so the `l.offset` calls are valid.\n             unsafe {\n                 end_l = end_l.sub(1);\n-                ptr::swap(l.add(*end_l as usize), r.sub(1));\n+                ptr::swap(l.add(usize::from(*end_l)), r.sub(1));\n                 r = r.sub(1);\n             }\n         }\n@@ -471,7 +471,7 @@ where\n             // SAFETY: See the reasoning in [remaining-elements-safety].\n             unsafe {\n                 end_r = end_r.sub(1);\n-                ptr::swap(l, r.sub((*end_r as usize) + 1));\n+                ptr::swap(l, r.sub(usize::from(*end_r) + 1));\n                 l = l.add(1);\n             }\n         }"}]}