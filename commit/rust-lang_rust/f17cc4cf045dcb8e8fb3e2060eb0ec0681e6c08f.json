{"sha": "f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2NjNGNmMDQ1ZGNiOGU4ZmIzZTIwNjBlYjBlYzA2ODFlNmMwOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T09:19:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T09:19:47Z"}, "message": "Auto merge of #28578 - gandro:nodefaultlibs, r=alexcrichton\n\nThis patch basically adds a target option for omitting the `-nodefaultlibs` flag when invoking the linker. I am not sure if this is the correct or only way to approach this problem, so any feedback is welcome.\r\n\r\nMotivation: I'm currently working on a Rust target specification for the [rumprun](/rumpkernel/rumprun) unikernel. rumprun is based on rump kernels and uses NetBSDs libc and drivers to provide a POSIXy environment. It provides its own linker wrapper that generates binaries which can be \"baked\" into a unikernel after configuration. Using `-nodefaultlibs` on the rumprun linker will prevent it from selecting the search paths for the rumprun libraries. My current target implementation for rumprun is here: gandro/rust@295744b2ee2378f41a20d4b498b8f1991a75e93c\r\n\r\nCurrently, only a target that `is_like_windows` will omit the `-nodefaultlibs` flag, but since rumprun is not like Windows otherwise, I think a separate flag makes more sense. This might be a breaking change for target specifications that have the `is_like_windows` option set to true. Such targets need to set `no_default_libraries` to false in order to restore the old behavior.", "tree": {"sha": "54f9c97aa72cfe99c3f55cd5eec9141ea4e33073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f9c97aa72cfe99c3f55cd5eec9141ea4e33073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "html_url": "https://github.com/rust-lang/rust/commit/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b089cd2d537e2fbf0ccbd7590af138086558eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b089cd2d537e2fbf0ccbd7590af138086558eb5", "html_url": "https://github.com/rust-lang/rust/commit/0b089cd2d537e2fbf0ccbd7590af138086558eb5"}, {"sha": "920f32becd5d54864a966900963a376d74d09922", "url": "https://api.github.com/repos/rust-lang/rust/commits/920f32becd5d54864a966900963a376d74d09922", "html_url": "https://github.com/rust-lang/rust/commit/920f32becd5d54864a966900963a376d74d09922"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "e7c1c3fb258adad6a490e587295d0fbbc699beca", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "patch": "@@ -157,6 +157,9 @@ pub struct TargetOptions {\n     /// Whether to disable linking to compiler-rt. Defaults to false, as LLVM\n     /// will emit references to the functions that compiler-rt provides.\n     pub no_compiler_rt: bool,\n+    /// Whether to disable linking to the default libraries, typically corresponds\n+    /// to `-nodefaultlibs`. Defaults to true.\n+    pub no_default_libraries: bool,\n     /// Dynamically linked executables can be compiled as position independent\n     /// if the default relocation model of position independent code is not\n     /// changed. This is a requirement to take advantage of ASLR, as otherwise\n@@ -212,6 +215,7 @@ impl Default for TargetOptions {\n             linker_is_gnu: false,\n             has_rpath: false,\n             no_compiler_rt: false,\n+            no_default_libraries: true,\n             position_independent_executables: false,\n             pre_link_objects: Vec::new(),\n             post_link_objects: Vec::new(),\n@@ -319,6 +323,7 @@ impl Target {\n         key!(linker_is_gnu, bool);\n         key!(has_rpath, bool);\n         key!(no_compiler_rt, bool);\n+        key!(no_default_libraries, bool);\n         key!(pre_link_args, list);\n         key!(post_link_args, list);\n         key!(allow_asm, bool);"}, {"sha": "8d089bb43ad5019a5001e9d9f9563d6dc760895d", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "patch": "@@ -23,6 +23,10 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: \"\".to_string(),\n         staticlib_suffix: \".lib\".to_string(),\n+        // Unfortunately right now passing -nodefaultlibs to gcc on windows\n+        // doesn't work so hot (in terms of native dependencies). This flag\n+        // should hopefully be removed one day though!\n+        no_default_libraries: false,\n         is_like_windows: true,\n         archive_format: \"gnu\".to_string(),\n         pre_link_args: vec!("}, {"sha": "f25132e1856e832f1d6451cbe4494ef60f6140aa", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "patch": "@@ -970,7 +970,9 @@ fn link_args(cmd: &mut Linker,\n     // default. Note that this does not happen for windows because windows pulls\n     // in some large number of libraries and I couldn't quite figure out which\n     // subset we wanted.\n-    cmd.no_default_libraries();\n+    if t.options.no_default_libraries {\n+        cmd.no_default_libraries();\n+    }\n \n     // Take careful note of the ordering of the arguments we pass to the linker\n     // here. Linkers will assume that things on the left depend on things to the"}, {"sha": "d6c12f864c4f8f61b07522cc2e760e2e481808e6", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "patch": "@@ -159,12 +159,7 @@ impl<'a> Linker for GnuLinker<'a> {\n     }\n \n     fn no_default_libraries(&mut self) {\n-        // Unfortunately right now passing -nodefaultlibs to gcc on windows\n-        // doesn't work so hot (in terms of native dependencies). This if\n-        // statement should hopefully be removed one day though!\n-        if !self.sess.target.target.options.is_like_windows {\n-            self.cmd.arg(\"-nodefaultlibs\");\n-        }\n+        self.cmd.arg(\"-nodefaultlibs\");\n     }\n \n     fn build_dylib(&mut self, out_filename: &Path) {"}]}