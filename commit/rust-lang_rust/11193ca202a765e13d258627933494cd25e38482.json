{"sha": "11193ca202a765e13d258627933494cd25e38482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTkzY2EyMDJhNzY1ZTEzZDI1ODYyNzkzMzQ5NGNkMjVlMzg0ODI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-29T23:43:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-29T23:43:59Z"}, "message": "Rollup merge of #76029 - denisvasilik:intra-doc-links-core-atomic, r=kennytm\n\nMove to intra-doc links for library/core/src/sync/atomic.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nKnown issues:\n\n* Link from core to std:\n\n    [`Arc`]\n\t[`std::thread::yield_now`]\n\t[`std::thread::sleep`]\n\t[`std::sync::Mutex`]", "tree": {"sha": "922d0475c78f17d8fcd555140c4205c764e693f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/922d0475c78f17d8fcd555140c4205c764e693f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11193ca202a765e13d258627933494cd25e38482", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSug/CRBK7hj4Ov3rIwAAdHIIAJW3IPhY3n2pH8hmvhTuB8PA\nVM61shvPQpC4Z/lKpdzTswjbFGh5iP+f9iIq+QUw2Ia1KZrLVlr434w7/P39KKft\n6cHOH6qdIm17LnYethntRyeURnsLKZZeMbfCQstHzKRaoOEk1urUrqVVpU675MIU\nyfbtNV30O3NZS2a1wZ6pQTxeLdeNY4MhwomxVHTP6rLUb6g1vXG/7LYt/RooKzW7\n1qjW2hZOd9WpopjrnYPbI4iqO9HXtQhsPCb4LsA7LiHIe2/NYTJz7Hbmv3AYu3tX\nKuq0sV4iCGMWz+Xd1rSQkyIzvvXm8M/BbNuwGfDTa7wTVe1bnjpekEJ8AOMxID8=\n=/eqM\n-----END PGP SIGNATURE-----\n", "payload": "tree 922d0475c78f17d8fcd555140c4205c764e693f2\nparent b1f983a5823c296abfba119266a50da27c794e47\nparent c7571e60402adac4bf1b1ffa67f963a4a3f7d8b9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598744639 +0200\ncommitter GitHub <noreply@github.com> 1598744639 +0200\n\nRollup merge of #76029 - denisvasilik:intra-doc-links-core-atomic, r=kennytm\n\nMove to intra-doc links for library/core/src/sync/atomic.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nKnown issues:\n\n* Link from core to std:\n\n    [`Arc`]\n\t[`std::thread::yield_now`]\n\t[`std::thread::sleep`]\n\t[`std::sync::Mutex`]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11193ca202a765e13d258627933494cd25e38482", "html_url": "https://github.com/rust-lang/rust/commit/11193ca202a765e13d258627933494cd25e38482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11193ca202a765e13d258627933494cd25e38482/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f983a5823c296abfba119266a50da27c794e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f983a5823c296abfba119266a50da27c794e47", "html_url": "https://github.com/rust-lang/rust/commit/b1f983a5823c296abfba119266a50da27c794e47"}, {"sha": "c7571e60402adac4bf1b1ffa67f963a4a3f7d8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7571e60402adac4bf1b1ffa67f963a4a3f7d8b9", "html_url": "https://github.com/rust-lang/rust/commit/c7571e60402adac4bf1b1ffa67f963a4a3f7d8b9"}], "stats": {"total": 246, "additions": 7, "deletions": 239}, "files": [{"sha": "1aec7e1b5f871d935c1494de6924ae1ed458e148", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 239, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/11193ca202a765e13d258627933494cd25e38482/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11193ca202a765e13d258627933494cd25e38482/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=11193ca202a765e13d258627933494cd25e38482", "patch": "@@ -10,18 +10,10 @@\n //! Atomic types present operations that, when used correctly, synchronize\n //! updates between threads.\n //!\n-//! [`AtomicBool`]: struct.AtomicBool.html\n-//! [`AtomicIsize`]: struct.AtomicIsize.html\n-//! [`AtomicUsize`]: struct.AtomicUsize.html\n-//! [`AtomicI8`]: struct.AtomicI8.html\n-//! [`AtomicU16`]: struct.AtomicU16.html\n-//!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n //! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n-//! [`Ordering`]: enum.Ordering.html\n-//!\n //! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!\n@@ -31,15 +23,12 @@\n //! The most common way to share an atomic variable is to put it into an [`Arc`][arc] (an\n //! atomically-reference-counted shared pointer).\n //!\n-//! [`Sync`]: ../../marker/trait.Sync.html\n //! [arc]: ../../../std/sync/struct.Arc.html\n //!\n //! Atomic types may be stored in static variables, initialized using\n //! the constant initializers like [`AtomicBool::new`]. Atomic statics\n //! are often used for lazy global initialization.\n //!\n-//! [`AtomicBool::new`]: struct.AtomicBool.html#method.new\n-//!\n //! # Portability\n //!\n //! All atomic types in this module are guaranteed to be [lock-free] if they're\n@@ -155,8 +144,6 @@ pub fn spin_loop_hint() {\n ///\n /// **Note**: This type is only available on platforms that support atomic\n /// loads and stores of `u8`.\n-///\n-/// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(C, align(1))]\n@@ -212,8 +199,8 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Atomic memory orderings\n ///\n /// Memory orderings specify the way atomic operations synchronize memory.\n-/// In its weakest [`Relaxed`][Ordering::Relaxed], only the memory directly touched by the\n-/// operation is synchronized. On the other hand, a store-load pair of [`SeqCst`][Ordering::SeqCst]\n+/// In its weakest [`Ordering::Relaxed`], only the memory directly touched by the\n+/// operation is synchronized. On the other hand, a store-load pair of [`Ordering::SeqCst`]\n /// operations synchronize other memory while additionally preserving a total order of such\n /// operations across all threads.\n ///\n@@ -223,8 +210,6 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// For more information see the [nomicon].\n ///\n /// [nomicon]: ../../../nomicon/atomics.html\n-/// [Ordering::Relaxed]: #variant.Relaxed\n-/// [Ordering::SeqCst]: #variant.SeqCst\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n #[non_exhaustive]\n@@ -248,9 +233,6 @@ pub enum Ordering {\n     ///\n     /// Corresponds to [`memory_order_release`] in C++20.\n     ///\n-    /// [`Release`]: #variant.Release\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Relaxed`]: #variant.Relaxed\n     /// [`memory_order_release`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n@@ -266,9 +248,6 @@ pub enum Ordering {\n     ///\n     /// Corresponds to [`memory_order_acquire`] in C++20.\n     ///\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`Relaxed`]: #variant.Relaxed\n     /// [`memory_order_acquire`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n@@ -284,9 +263,6 @@ pub enum Ordering {\n     /// Corresponds to [`memory_order_acq_rel`] in C++20.\n     ///\n     /// [`memory_order_acq_rel`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`Relaxed`]: #variant.Relaxed\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n     /// Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store\n@@ -296,16 +272,11 @@ pub enum Ordering {\n     /// Corresponds to [`memory_order_seq_cst`] in C++20.\n     ///\n     /// [`memory_order_seq_cst`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`AcqRel`]: #variant.AcqRel\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n }\n \n /// An [`AtomicBool`] initialized to `false`.\n-///\n-/// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(\n@@ -339,8 +310,6 @@ impl AtomicBool {\n     /// This is safe because the mutable reference guarantees that no other threads are\n     /// concurrently accessing the atomic data.\n     ///\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -386,13 +355,6 @@ impl AtomicBool {\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -419,13 +381,6 @@ impl AtomicBool {\n     ///\n     /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -456,11 +411,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -493,13 +443,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -539,13 +482,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -587,7 +523,7 @@ impl AtomicBool {\n \n     /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n-    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n+    /// Unlike [`AtomicBool::compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n@@ -603,14 +539,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    /// [`compare_exchange`]: #method.compare_exchange\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -658,11 +586,6 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n@@ -706,11 +629,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -763,11 +681,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -808,11 +721,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -850,8 +758,6 @@ impl AtomicBool {\n     /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n     /// restriction: operations on it must be atomic.\n     ///\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    ///\n     /// # Examples\n     ///\n     /// ```ignore (extern-declaration)\n@@ -942,13 +848,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -975,13 +874,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1013,11 +905,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1052,12 +939,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1096,12 +977,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1143,7 +1018,7 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n     ///\n-    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n+    /// Unlike [`AtomicPtr::compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n@@ -1159,13 +1034,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`compare_exchange`]: #method.compare_exchange\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1271,7 +1139,7 @@ macro_rules! atomic_int {\n         #[doc = $int_ref]\n         /// ).\n         ///\n-        /// [module-level documentation]: index.html\n+        /// [module-level documentation]: crate::sync::atomic\n         #[$stable]\n         #[repr(C, align($align))]\n         pub struct $atomic_type {\n@@ -1389,13 +1257,6 @@ Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n \n Panics if `order` is [`Release`] or [`AcqRel`].\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1423,13 +1284,6 @@ assert_eq!(some_var.load(Ordering::Relaxed), 5);\n \n Panics if `order` is [`Acquire`] or [`AcqRel`].\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1459,11 +1313,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1498,12 +1347,6 @@ happens, and using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-\n # Examples\n \n ```\n@@ -1553,12 +1396,6 @@ and must be equivalent to or weaker than the success ordering.\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1595,7 +1432,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n                 concat!(\"Stores a value into the atomic integer if the current value is the same as\n the `current` value.\n \n-Unlike [`compare_exchange`], this function is allowed to spuriously fail even\n+Unlike [`\", stringify!($atomic_type), \"::compare_exchange`], this function is allowed to spuriously fail even\n when the comparison succeeds, which can result in more efficient code on some\n platforms. The return value is a result indicating whether the new value was\n written and containing the previous value.\n@@ -1608,13 +1445,6 @@ of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n-[`compare_exchange`]: #method.compare_exchange\n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n@@ -1662,11 +1492,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1698,11 +1523,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1737,11 +1557,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1776,11 +1591,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1816,11 +1626,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1855,11 +1660,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1890,7 +1690,7 @@ only once to the stored value.\n `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n The first describes the required ordering for when the operation finally succeeds while the second\n describes the required ordering for loads. These correspond to the success and failure orderings of\n-[`compare_exchange`] respectively.\n+[`\", stringify!($atomic_type), \"::compare_exchange`] respectively.\n \n Using [`Acquire`] as success ordering makes the store part\n of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n@@ -1900,14 +1700,6 @@ and must be equivalent to or weaker than the success ordering.\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`bool`]: ../../../std/primitive.bool.html\n-[`compare_exchange`]: #method.compare_exchange\n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```rust\n@@ -1954,11 +1746,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -2004,11 +1791,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -2660,13 +2442,6 @@ unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n ///     }\n /// }\n /// ```\n-///\n-/// [`Ordering`]: enum.Ordering.html\n-/// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-/// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-/// [`Release`]: enum.Ordering.html#variant.Release\n-/// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-/// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn fence(order: Ordering) {\n@@ -2747,13 +2522,6 @@ pub fn fence(order: Ordering) {\n /// }\n /// ```\n ///\n-/// [`fence`]: fn.fence.html\n-/// [`Ordering`]: enum.Ordering.html\n-/// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-/// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-/// [`Release`]: enum.Ordering.html#variant.Release\n-/// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-/// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n /// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n #[stable(feature = \"compiler_fences\", since = \"1.21.0\")]"}]}