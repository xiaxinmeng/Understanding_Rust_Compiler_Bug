{"sha": "f19e16881e474e7f854ad04872e84755a8ad182b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOWUxNjg4MWU0NzRlN2Y4NTRhZDA0ODcyZTg0NzU1YThhZDE4MmI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T00:45:20Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T00:45:20Z"}, "message": "syntax/rustc: Less copy", "tree": {"sha": "7a389f693cf74eb3dd2ac4dd76d38a6c78dfd2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a389f693cf74eb3dd2ac4dd76d38a6c78dfd2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19e16881e474e7f854ad04872e84755a8ad182b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19e16881e474e7f854ad04872e84755a8ad182b", "html_url": "https://github.com/rust-lang/rust/commit/f19e16881e474e7f854ad04872e84755a8ad182b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19e16881e474e7f854ad04872e84755a8ad182b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff6beed60fe3a1b783968deda9b5ca99afbeba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff6beed60fe3a1b783968deda9b5ca99afbeba6", "html_url": "https://github.com/rust-lang/rust/commit/5ff6beed60fe3a1b783968deda9b5ca99afbeba6"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "f39bd552c3bb66b530532bef86f239467e184e05", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f19e16881e474e7f854ad04872e84755a8ad182b", "patch": "@@ -133,14 +133,13 @@ fn decode_inlined_item(cdata: cstore::crate_metadata,\n                                           to_id_range: to_id_range});\n         let raw_ii = decode_ast(ast_doc);\n         let ii = renumber_ast(xcx, raw_ii);\n-        // XXX: Bad copy of `path`.\n-        ast_map::map_decoded_item(tcx.sess.diagnostic(),\n-                                  dcx.tcx.items, copy path, ii);\n         debug!(\"Fn named: %s\", tcx.sess.str_of(ii.ident()));\n-        decode_side_tables(xcx, ast_doc);\n         debug!(\"< Decoded inlined fn: %s::%s\",\n                ast_map::path_to_str(path, tcx.sess.parse_sess.interner),\n                tcx.sess.str_of(ii.ident()));\n+        ast_map::map_decoded_item(tcx.sess.diagnostic(),\n+                                  dcx.tcx.items, path, ii);\n+        decode_side_tables(xcx, ast_doc);\n         match ii {\n           ast::ii_item(i) => {\n             debug!(\">>> DECODED ITEM >>>\\n%s\\n<<< DECODED ITEM <<<\",\n@@ -309,10 +308,13 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n               ast::stmt_mac(*) => fail ~\"unexpanded macro in astencode\"\n             }\n         };\n-        // XXX: Bad copy.\n         let blk_sans_items = ast::blk_ {\n+            view_items: ~[], // I don't know if we need the view_items here,\n+                             // but it doesn't break tests!\n             stmts: stmts_sans_items,\n-            .. copy blk\n+            expr: blk.expr,\n+            id: blk.id,\n+            rules: blk.rules\n         };\n         fold::noop_fold_block(blk_sans_items, fld)\n     }\n@@ -592,7 +594,7 @@ fn encode_vtable_res(ecx: @e::encode_ctxt,\n     // ty::t doesn't work, and there is no way (atm) to have\n     // hand-written encoding routines combine with auto-generated\n     // ones.  perhaps we should fix this.\n-    do ebml_w.emit_from_vec(/*bad*/copy *dr) |vtable_origin| {\n+    do ebml_w.emit_from_vec(*dr) |vtable_origin| {\n         encode_vtable_origin(ecx, ebml_w, *vtable_origin)\n     }\n }\n@@ -742,8 +744,7 @@ impl writer::Encoder: ebml_writer_helpers {\n     }\n \n     fn emit_tys(ecx: @e::encode_ctxt, tys: ~[ty::t]) {\n-        // XXX: Bad copy.\n-        do self.emit_from_vec(copy tys) |ty| {\n+        do self.emit_from_vec(tys) |ty| {\n             self.emit_ty(ecx, *ty)\n         }\n     }\n@@ -756,8 +757,8 @@ impl writer::Encoder: ebml_writer_helpers {\n \n     fn emit_tpbt(ecx: @e::encode_ctxt, tpbt: ty::ty_param_bounds_and_ty) {\n         do self.emit_rec {\n-            do self.emit_field(~\"bounds\", 0u) {\n-                do self.emit_from_vec(/*bad*/copy *tpbt.bounds) |bs| {\n+            do self.emit_field(~\"bounds\", 0) {\n+                do self.emit_from_vec(*tpbt.bounds) |bs| {\n                     self.emit_bounds(ecx, *bs);\n                 }\n             }\n@@ -840,7 +841,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_freevars) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                do ebml_w.emit_from_vec(/*bad*/copy **fv) |fv_entry| {\n+                do ebml_w.emit_from_vec(**fv) |fv_entry| {\n                     encode_freevar_entry(ebml_w, *fv_entry)\n                 }\n             }"}, {"sha": "00fa235a74289dc42905f4ee8d0cf9dae23eab4e", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=f19e16881e474e7f854ad04872e84755a8ad182b", "patch": "@@ -566,11 +566,11 @@ pub impl<\n // In some cases, these should eventually be coded as traits.\n \n pub trait EncoderHelpers {\n-    fn emit_from_vec<T>(&self, v: ~[T], f: fn(v: &T));\n+    fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T));\n }\n \n pub impl<S: Encoder> S: EncoderHelpers {\n-    fn emit_from_vec<T>(&self, v: ~[T], f: fn(v: &T)) {\n+    fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T)) {\n         do self.emit_owned_vec(v.len()) {\n             for v.eachi |i, e| {\n                 do self.emit_vec_elt(i) {"}, {"sha": "ddd0f846f9d6c3a2625bd1aea20b139970a93eb1", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19e16881e474e7f854ad04872e84755a8ad182b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=f19e16881e474e7f854ad04872e84755a8ad182b", "patch": "@@ -149,7 +149,7 @@ fn map_crate(diag: span_handler, c: crate) -> map {\n // crate.  The `path` should be the path to the item but should not include\n // the item itself.\n fn map_decoded_item(diag: span_handler,\n-                    map: map, +path: path, ii: inlined_item) {\n+                    map: map, path: path, ii: inlined_item) {\n     // I believe it is ok for the local IDs of inlined items from other crates\n     // to overlap with the local ids from this crate, so just generate the ids\n     // starting from 0.  (In particular, I think these ids are only used in\n@@ -158,8 +158,8 @@ fn map_decoded_item(diag: span_handler,\n     // variables that are simultaneously in scope).\n     let cx = ctx {\n         map: map,\n-        mut path: /* FIXME (#2543) */ copy path,\n-        mut local_id: 0u,\n+        mut path: path,\n+        mut local_id: 0,\n         diag: diag,\n     };\n     let v = mk_ast_map_visitor();"}]}