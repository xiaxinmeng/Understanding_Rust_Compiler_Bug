{"sha": "684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NGZlOWE2YjJiMzllNmI4YTEwODllZWNkMDMzNGVmNDg0ZmNjNTY=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-18T18:25:02Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-22T04:42:50Z"}, "message": "Rename Box/Arc/Rc::pinned to ::pin", "tree": {"sha": "2bc0946e85c1264b3c63b198c705ce143905e594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc0946e85c1264b3c63b198c705ce143905e594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "html_url": "https://github.com/rust-lang/rust/commit/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3005bf360d11dbda5d32b9b75647df07bfa1372d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3005bf360d11dbda5d32b9b75647df07bfa1372d", "html_url": "https://github.com/rust-lang/rust/commit/3005bf360d11dbda5d32b9b75647df07bfa1372d"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "7438f3e6c9df539ed6fe4aa2349e984a3794bdb1", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "patch": "@@ -111,9 +111,11 @@ impl<T> Box<T> {\n         box x\n     }\n \n+    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n+    /// `x` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn pinned(x: T) -> Pin<Box<T>> {\n+    pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n     }\n }"}, {"sha": "14cbb204f5fa9b709943850f5f4655c101941f6e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "patch": "@@ -325,8 +325,10 @@ impl<T> Rc<T> {\n         }\n     }\n \n+    /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n+    /// `value` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub fn pinned(value: T) -> Pin<Rc<T>> {\n+    pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n "}, {"sha": "c1a1e6f1591d2375fc05985783bd49a18555af59", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "patch": "@@ -303,8 +303,10 @@ impl<T> Arc<T> {\n         Arc { ptr: Box::into_raw_non_null(x), phantom: PhantomData }\n     }\n \n+    /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n+    /// `data` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub fn pinned(data: T) -> Pin<Arc<T>> {\n+    pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n "}, {"sha": "4f4ca4047e4600fa57b72c6e1f36fa12c5f576df", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "patch": "@@ -70,7 +70,7 @@\n //!             slice: NonNull::dangling(),\n //!             _pin: PhantomPinned,\n //!         };\n-//!         let mut boxed = Box::pinned(res);\n+//!         let mut boxed = Box::pin(res);\n //!\n //!         let slice = NonNull::from(&boxed.data);\n //!         // we know this is safe because modifying a field doesn't move the whole struct"}, {"sha": "d9eb801a2066841bdf1d6d01fab22be015394c6b", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684fe9a6b2b39e6b8a1089eecd0334ef484fcc56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=684fe9a6b2b39e6b8a1089eecd0334ef484fcc56", "patch": "@@ -138,7 +138,7 @@ where\n     F: FnOnce(u8) -> Fut,\n     Fut: Future<Output = u8>,\n {\n-    let mut fut = Box::pinned(f(9));\n+    let mut fut = Box::pin(f(9));\n     let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n     let waker = local_waker_from_nonlocal(counter.clone());\n     assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));"}]}