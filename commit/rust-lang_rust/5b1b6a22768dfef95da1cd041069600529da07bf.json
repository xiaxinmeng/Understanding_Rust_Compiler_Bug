{"sha": "5b1b6a22768dfef95da1cd041069600529da07bf", "node_id": "C_kwDOAAsO6NoAKDViMWI2YTIyNzY4ZGZlZjk1ZGExY2QwNDEwNjk2MDA1MjlkYTA3YmY", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-05T13:30:22Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-05T14:27:22Z"}, "message": "Edit docs about macros", "tree": {"sha": "401ad4640d40662868d84ec7a57e48670a97dd58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401ad4640d40662868d84ec7a57e48670a97dd58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1b6a22768dfef95da1cd041069600529da07bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1b6a22768dfef95da1cd041069600529da07bf", "html_url": "https://github.com/rust-lang/rust/commit/5b1b6a22768dfef95da1cd041069600529da07bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1b6a22768dfef95da1cd041069600529da07bf/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "html_url": "https://github.com/rust-lang/rust/commit/14d54f0f6eb3b03cb5d719949a25404a8fe563d9"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "c7e51d53f511d9e91c044e0c985c9d42ab41b672", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 57, "deletions": 44, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5b1b6a22768dfef95da1cd041069600529da07bf/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b1b6a22768dfef95da1cd041069600529da07bf/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=5b1b6a22768dfef95da1cd041069600529da07bf", "patch": "@@ -8,7 +8,7 @@ You may need following tooltips to catch up with common operations.\n   - [Checking for a specific type](#checking-for-a-specific-type)\n   - [Checking if a type implements a specific trait](#checking-if-a-type-implements-a-specific-trait)\n   - [Checking if a type defines a specific method](#checking-if-a-type-defines-a-specific-method)\n-  - [Dealing with macros](#dealing-with-macros)\n+  - [Dealing with macros](#dealing-with-macros-and-expansions)\n \n Useful Rustc dev guide links:\n - [Stages of compilation](https://rustc-dev-guide.rust-lang.org/compiler-src.html#the-main-stages-of-compilation)\n@@ -182,64 +182,78 @@ impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n }\n ```\n \n-## Dealing with macros\n+## Dealing with macros and expansions\n \n-There are several helpers in [`clippy_utils`][utils] to deal with macros:\n+Keep in mind that macros are already expanded and desugaring is already applied\n+to the code representation that you are working with in Clippy. This unfortunately causes a lot of\n+false positives because macro expansions are \"invisible\" unless you actively check for them.\n+Generally speaking, code with macro expansions should just be ignored by Clippy because that code can be\n+dynamic in ways that are difficult or impossible to see.\n+Use the following functions to deal with macros:\n \n-- `in_macro()`: detect if the given span is expanded by a macro\n+- `span.from_expansion()`: detects if a span is from macro expansion or desugaring.\n+  Checking this is a common first step in a lint.\n \n-You may want to use this for example to not start linting in any macro.\n+   ```rust\n+   if expr.span.from_expansion() {\n+       // just forget it\n+       return;\n+   }\n+   ```\n \n-```rust\n-macro_rules! foo {\n-    ($param:expr) => {\n-        match $param {\n-            \"bar\" => println!(\"whatever\"),\n-            _ => ()\n-        }\n-    };\n-}\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, which macro call expanded it.\n+   It is sometimes useful to check if the context of two spans are equal.\n \n-foo!(\"bar\");\n+   ```rust\n+   // expands to `1 + 0`, but don't lint\n+   1 + mac!()\n+   ```\n+   ```rust\n+   if left.span.ctxt() != right.span.ctxt() {\n+       // the coder most likely cannot modify this expression\n+       return;\n+   }\n+   ```\n+  Note: Code that is not from expansion is in the \"root\" context. So any spans where `from_expansion` returns `true` can\n+  be assumed to have the same context. And so just using `span.from_expansion()` is often good enough.\n \n-// if we lint the `match` of `foo` call and test its span\n-assert_eq!(in_macro(match_span), true);\n-```\n \n-- `in_external_macro()`: detect if the given span is from an external macro, defined in a foreign crate\n+- `in_external_macro(span)`: detect if the given span is from a macro defined in a foreign crate.\n+   If you want the lint to work with macro-generated code, this is the next line of defense to avoid macros\n+   not defined in the current crate. It doesn't make sense to lint code that the coder can't change.\n \n-You may want to use it for example to not start linting in macros from other crates\n+   You may want to use it for example to not start linting in macros from other crates\n \n-```rust\n-#[macro_use]\n-extern crate a_crate_with_macros;\n+   ```rust\n+   #[macro_use]\n+   extern crate a_crate_with_macros;\n \n-// `foo` is defined in `a_crate_with_macros`\n-foo!(\"bar\");\n+   // `foo` is defined in `a_crate_with_macros`\n+   foo!(\"bar\");\n \n-// if we lint the `match` of `foo` call and test its span\n-assert_eq!(in_external_macro(cx.sess(), match_span), true);\n-```\n+   // if we lint the `match` of `foo` call and test its span\n+   assert_eq!(in_external_macro(cx.sess(), match_span), true);\n+   ```\n \n - `differing_macro_contexts()`: returns true if the two given spans are not from the same context\n \n-```rust\n-macro_rules! m {\n-    ($a:expr, $b:expr) => {\n-        if $a.is_some() {\n-            $b;\n-        }\n-    }\n-}\n+   ```rust\n+   macro_rules! m {\n+       ($a:expr, $b:expr) => {\n+           if $a.is_some() {\n+               $b;\n+           }\n+       }\n+   }\n \n-let x: Option<u32> = Some(42);\n-m!(x, x.unwrap());\n+   let x: Option<u32> = Some(42);\n+   m!(x, x.unwrap());\n \n-// These spans are not from the same context\n-// x.is_some() is from inside the macro\n-// x.unwrap() is from outside the macro\n-assert_eq!(differing_macro_contexts(x_is_some_span, x_unwrap_span), true);\n-```\n+   // These spans are not from the same context\n+   // x.is_some() is from inside the macro\n+   // x.unwrap() is from outside the macro\n+   assert_eq!(differing_macro_contexts(x_is_some_span, x_unwrap_span), true);\n+   ```\n \n [TyS]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyS.html\n [TyKind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\n@@ -249,4 +263,3 @@ assert_eq!(differing_macro_contexts(x_is_some_span, x_unwrap_span), true);\n [TyCtxt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html\n [pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.pat_ty\n [paths]: ../clippy_utils/src/paths.rs\n-[utils]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_utils/src/lib.rs"}]}