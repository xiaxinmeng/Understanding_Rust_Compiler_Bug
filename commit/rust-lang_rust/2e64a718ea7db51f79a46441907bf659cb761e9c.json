{"sha": "2e64a718ea7db51f79a46441907bf659cb761e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjRhNzE4ZWE3ZGI1MWY3OWE0NjQ0MTkwN2JmNjU5Y2I3NjFlOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-09T14:31:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-09T14:31:36Z"}, "message": "auto merge of #9664 : alexcrichton/rust/logging, r=huonw\n\nThis makes some headway on #3309, see commits for details.", "tree": {"sha": "21763a628e345263523b01905de4b57ca2063259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21763a628e345263523b01905de4b57ca2063259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e64a718ea7db51f79a46441907bf659cb761e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e64a718ea7db51f79a46441907bf659cb761e9c", "html_url": "https://github.com/rust-lang/rust/commit/2e64a718ea7db51f79a46441907bf659cb761e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e64a718ea7db51f79a46441907bf659cb761e9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b04c1535ab0e733e59b8e1f7801e523cd72fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b04c1535ab0e733e59b8e1f7801e523cd72fa3", "html_url": "https://github.com/rust-lang/rust/commit/a3b04c1535ab0e733e59b8e1f7801e523cd72fa3"}, {"sha": "88593fc3fc808e78dd89be95c997c94ba4c816da", "url": "https://api.github.com/repos/rust-lang/rust/commits/88593fc3fc808e78dd89be95c997c94ba4c816da", "html_url": "https://github.com/rust-lang/rust/commit/88593fc3fc808e78dd89be95c997c94ba4c816da"}], "stats": {"total": 219, "additions": 143, "deletions": 76}, "files": [{"sha": "7d772a997c14e96de333e79dc6c5389198406c4f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -119,6 +119,7 @@ use back::link;\n use lib::llvm::{ValueRef, llvm, SetLinkage, False};\n use lib;\n use metadata::csearch;\n+use metadata::cstore;\n use middle::trans::_match;\n use middle::trans::adt;\n use middle::trans::asm;\n@@ -1799,9 +1800,14 @@ pub fn trans_log_level(bcx: @mut Block) -> DatumBlock {\n     let ccx = bcx.ccx();\n \n     let (modpath, modname) = {\n-        let path = &mut bcx.fcx.path;\n-        let mut modpath = ~[path_mod(ccx.sess.ident_of(ccx.link_meta.name))];\n-        for e in path.iter() {\n+        let srccrate = match ccx.external_srcs.find(&bcx.fcx.id) {\n+            Some(&src) => {\n+                cstore::get_crate_data(ccx.sess.cstore, src.crate).name\n+            }\n+            None => ccx.link_meta.name,\n+        };\n+        let mut modpath = ~[path_mod(ccx.sess.ident_of(srccrate))];\n+        for e in bcx.fcx.path.iter() {\n             match *e {\n                 path_mod(_) => { modpath.push(*e) }\n                 _ => {}"}, {"sha": "aa1ec26d426482c17dda26493b82fe166ef224a5", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -197,9 +197,6 @@ pub fn describe_debug_flags() {\n }\n \n pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n-    // Don't display log spew by default. Can override with RUST_LOG.\n-    ::std::logging::console_off();\n-\n     let mut args = args.to_owned();\n     let binary = args.shift().to_managed();\n "}, {"sha": "5e1ef3658b3f5b18419eaee829e7101356bc8a84", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 88, "deletions": 27, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -8,40 +8,101 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Logging\n+/*!\n \n-use fmt;\n-use option::*;\n-use os;\n-use rt;\n-use rt::logging::{Logger, StdErrLogger};\n+Logging\n \n-/// Turns on logging to stdout globally\n-pub fn console_on() {\n-    rt::logging::console_on();\n-}\n+This module is used by the compiler when emitting output for the logging family\n+of macros. The methods of this module shouldn't necessarily be used directly,\n+but rather through the logging macros defined.\n \n-/**\n- * Turns off logging to stdout globally\n- *\n- * Turns off the console unless the user has overridden the\n- * runtime environment's logging spec, e.g. by setting\n- * the RUST_LOG environment variable\n- */\n-pub fn console_off() {\n-    // If RUST_LOG is set then the console can't be turned off\n-    if os::getenv(\"RUST_LOG\").is_some() {\n-        return;\n-    }\n+There are five macros that the logging subsystem uses:\n+\n+* `log!(level, ...)` - the generic logging macro, takes a level as a u32 and any\n+                       related `format!` arguments\n+* `debug!(...)` - a macro hard-wired to the log level of 4\n+* `info!(...)` - a macro hard-wired to the log level of 3\n+* `warn!(...)` - a macro hard-wired to the log level of 2\n+* `error!(...)` - a macro hard-wired to the log level of 1\n+\n+All of these macros use the same style of syntax as the `format!` syntax\n+extension. Details about the syntax can be found in the documentation of\n+`std::fmt` along with the Rust tutorial/manual\n+\n+## Enabling logging\n+\n+Log levels are controlled on a per-module basis, and by default all logging is\n+disabled except for `error!` (a log level of 1). Logging is controlled via the\n+`RUST_LOG` environment variable. The value of this environment variable is a\n+comma-separated list of logging directives. A logging directive is of the form:\n+\n+```\n+path::to::module=log_level\n+```\n+\n+The path to the module is rooted in the name of the crate it was compiled for,\n+so if your program is contained in a file `hello.rs`, for example, to turn on\n+logging for this file you would use a value of `RUST_LOG=hello`. Furthermore,\n+this path is a prefix-search, so all modules nested in the specified module will\n+also have logging enabled.\n+\n+The actual `log_level` is optional to specify. If omitted, all logging will be\n+enabled. If specified, the it must be either a numeric in the range of 1-255, or\n+it must be one of the strings `debug`, `error`, `info`, or `warn`. If a numeric\n+is specified, then all logging less than or equal to that numeral is enabled.\n+For example, if logging level 3 is active, error, warn, and info logs will be\n+printed, but debug will be omitted.\n+\n+As the log level for a module is optional, the module to enable logging for is\n+also optional. If only a `log_level` is provided, then the global log level for\n+all modules is set to this value.\n \n-    rt::logging::console_off();\n+Some examples of valid values of `RUST_LOG` are:\n+\n+```\n+hello                // turns on all logging for the 'hello' module\n+info                 // turns on all info logging\n+hello=debug          // turns on debug logging for 'hello'\n+hello=3              // turns on info logging for 'hello'\n+hello,std::hashmap   // turns on hello, and std's hashmap logging\n+error,hello=warn     // turn on global error logging and also warn for hello\n+```\n+\n+## Performance and Side Effects\n+\n+Each of these macros will expand to code similar to:\n+\n+```rust\n+if log_level <= my_module_log_level() {\n+    ::std::logging::log(log_level, format!(...));\n }\n+```\n \n-#[allow(missing_doc)]\n-pub fn log(_level: u32, args: &fmt::Arguments) {\n-    use rt::task::Task;\n-    use rt::local::Local;\n+What this means is that each of these macros are very cheap at runtime if\n+they're turned off (just a load and an integer comparison). This also means that\n+if logging is disabled, none of the components of the log will be executed.\n+\n+## Useful Values\n+\n+For convenience, if a value of `::help` is set for `RUST_LOG`, a program will\n+start, print out all modules registered for logging, and then exit.\n \n+*/\n+\n+use fmt;\n+use option::*;\n+use rt::local::Local;\n+use rt::logging::{Logger, StdErrLogger};\n+use rt::task::Task;\n+\n+/// This function is called directly by the compiler when using the logging\n+/// macros. This function does not take into account whether the log level\n+/// specified is active or not, it will always log something if this method is\n+/// called.\n+///\n+/// It is not recommended to call this function directly, rather it should be\n+/// invoked through the logging family of macros.\n+pub fn log(_level: u32, args: &fmt::Arguments) {\n     unsafe {\n         let optional_task: Option<*mut Task> = Local::try_unsafe_borrow();\n         match optional_task {"}, {"sha": "b08e76921d83eb5db65c450f3d6bb2c1be4fcaf2", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -10,7 +10,7 @@\n \n use fmt;\n use from_str::from_str;\n-use libc::{uintptr_t, exit};\n+use libc::exit;\n use option::{Some, None, Option};\n use rt;\n use rt::util::dumb_println;\n@@ -174,9 +174,7 @@ pub struct StdErrLogger;\n \n impl Logger for StdErrLogger {\n     fn log(&mut self, args: &fmt::Arguments) {\n-        if should_log_console() {\n-            fmt::writeln(self as &mut rt::io::Writer, args);\n-        }\n+        fmt::writeln(self as &mut rt::io::Writer, args);\n     }\n }\n \n@@ -222,21 +220,6 @@ pub fn init() {\n     }\n }\n \n-#[fixed_stack_segment] #[inline(never)]\n-pub fn console_on() { unsafe { rust_log_console_on() } }\n-\n-#[fixed_stack_segment] #[inline(never)]\n-pub fn console_off() { unsafe { rust_log_console_off() } }\n-\n-#[fixed_stack_segment] #[inline(never)]\n-fn should_log_console() -> bool { unsafe { rust_should_log_console() != 0 } }\n-\n-extern {\n-    fn rust_log_console_on();\n-    fn rust_log_console_off();\n-    fn rust_should_log_console() -> uintptr_t;\n-}\n-\n // Tests for parse_logging_spec()\n #[test]\n fn parse_logging_spec_valid() {"}, {"sha": "13fc3f1aa81cfbc7ea78a04b2280d43b7b2d2a12", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -320,27 +320,6 @@ rust_mktime(rust_tm* timeptr) {\n     return mktime(&t);\n }\n \n-static lock_and_signal log_lock;\n-static bool log_to_console = true;\n-\n-extern \"C\" CDECL void\n-rust_log_console_on() {\n-    scoped_lock with(log_lock);\n-    log_to_console = true;\n-}\n-\n-extern \"C\" CDECL void\n-rust_log_console_off() {\n-    scoped_lock with(log_lock);\n-    log_to_console = false;\n-}\n-\n-extern \"C\" CDECL uintptr_t\n-rust_should_log_console() {\n-    scoped_lock with(log_lock);\n-    return log_to_console;\n-}\n-\n extern \"C\" lock_and_signal*\n rust_create_little_lock() {\n     return new lock_and_signal();"}, {"sha": "959d1fa85f3d5ce4d5a57e13eba55415b28acac5", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -17,9 +17,6 @@ rust_get_stderr\n rust_list_dir_val\n rust_list_dir_wfd_size\n rust_list_dir_wfd_fp_buf\n-rust_log_console_on\n-rust_log_console_off\n-rust_should_log_console\n rust_unset_sigprocmask\n rust_env_pairs\n rust_win32_rand_acquire"}, {"sha": "84bf6f0240fbca8c0bc59bcc3880f84c80e7902b", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo<T>() {\n+    fn death() -> int { fail2!() }\n+    debug2!(\"{:?}\", (||{ death() })());\n+}"}, {"sha": "21b45cec2359d25437f0a1383c83a7bcd97d0859", "filename": "src/test/run-pass/logging-right-crate.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Ftest%2Frun-pass%2Flogging-right-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e64a718ea7db51f79a46441907bf659cb761e9c/src%2Ftest%2Frun-pass%2Flogging-right-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-right-crate.rs?ref=2e64a718ea7db51f79a46441907bf659cb761e9c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:logging_right_crate.rs\n+// xfail-fast\n+// exec-env:RUST_LOG=logging-right-crate=debug\n+\n+// This is a test for issue #3046 to make sure that when we monomorphize a\n+// function from one crate to another the right top-level logging name is\n+// preserved.\n+//\n+// It used to be the case that if logging were turned on for this crate, all\n+// monomorphized functions from other crates had logging turned on (their\n+// logging module names were all incorrect). This test ensures that this no\n+// longer happens by enabling logging for *this* crate and then invoking a\n+// function in an external crate which will fail when logging is enabled.\n+\n+extern mod logging_right_crate;\n+\n+fn main() {\n+    // this function fails if logging is turned on\n+    logging_right_crate::foo::<int>();\n+}"}]}