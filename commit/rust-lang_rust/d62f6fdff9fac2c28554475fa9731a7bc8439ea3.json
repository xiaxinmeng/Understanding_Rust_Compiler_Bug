{"sha": "d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "node_id": "C_kwDOAAsO6NoAKGQ2MmY2ZmRmZjlmYWMyYzI4NTU0NDc1ZmE5NzMxYTdiYzg0MzllYTM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-01-27T15:23:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-27T15:23:14Z"}, "message": "Rollup merge of #107321 - lcnr:comment, r=compiler-errors\n\nsolver comments + remove `TyCtxt::evaluate_goal`\n\nfrom the `RustcContributor::explore` session yesterday.\n\nThis also removes `TyCtxt::evaluate_goal` because to canonicalize you have to use an `InferCtxt` anyways at which point we should just always get people to use `evaluate_root_goal`.\n\nr? ``@spastorino``", "tree": {"sha": "c1e0dc631f76da3734a28ceb7c33969d359282a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e0dc631f76da3734a28ceb7c33969d359282a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0+xiCRBK7hj4Ov3rIwAAYjEIADrQg6iKcFNkGYhYxugedO1U\nTkEGXom3f3unSvsvPzbs7jF3uwkxz2zYuL1RSNtQQ7V2yx3dQapnFFogRrU0+Rdc\nR+0VyDk6OodRUeekvyxYcAe3u9qELNEKfvgo0zv+4EjGGCOm/GHRHXn+dYpbubMI\nwSDvSt3jdbTrY4i9+Z9YkdnymdyJzjTIPA/eJiqXTp3vaAjY4UiTgLdoBP38bpO7\nmlP0xiP9igiCZcoSLoMcPzoU2o7bU2ZseHL0r01EzOLXtwp0siDPz13gh+8q7Yer\n8zuDLrS2FwvS/KFXhA9+Jm8UbXELxZ4I8vEsw1Vuj1WX5WkrmfdhFKy4mEb1kWY=\n=ZaVQ\n-----END PGP SIGNATURE-----\n", "payload": "tree c1e0dc631f76da3734a28ceb7c33969d359282a2\nparent 9ec7492862e5bb101746bc14ead8152ac9da1930\nparent 727b987e0668fb87a328b7312cafdd40b75e8ed9\nauthor Yuki Okushi <jtitor@2k36.org> 1674832994 +0900\ncommitter GitHub <noreply@github.com> 1674832994 +0900\n\nRollup merge of #107321 - lcnr:comment, r=compiler-errors\n\nsolver comments + remove `TyCtxt::evaluate_goal`\n\nfrom the `RustcContributor::explore` session yesterday.\n\nThis also removes `TyCtxt::evaluate_goal` because to canonicalize you have to use an `InferCtxt` anyways at which point we should just always get people to use `evaluate_root_goal`.\n\nr? ``@spastorino``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "html_url": "https://github.com/rust-lang/rust/commit/d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d62f6fdff9fac2c28554475fa9731a7bc8439ea3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec7492862e5bb101746bc14ead8152ac9da1930", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec7492862e5bb101746bc14ead8152ac9da1930", "html_url": "https://github.com/rust-lang/rust/commit/9ec7492862e5bb101746bc14ead8152ac9da1930"}, {"sha": "727b987e0668fb87a328b7312cafdd40b75e8ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/727b987e0668fb87a328b7312cafdd40b75e8ed9", "html_url": "https://github.com/rust-lang/rust/commit/727b987e0668fb87a328b7312cafdd40b75e8ed9"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "7880cbad5fe0382ee1dfe44a27e91f42a9453a54", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d62f6fdff9fac2c28554475fa9731a7bc8439ea3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62f6fdff9fac2c28554475fa9731a7bc8439ea3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "patch": "@@ -141,17 +141,6 @@ type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n /// solver, merge the two responses again.\n pub type QueryResult<'tcx> = Result<CanonicalResponse<'tcx>, NoSolution>;\n \n-pub trait TyCtxtExt<'tcx> {\n-    fn evaluate_goal(self, goal: CanonicalGoal<'tcx>) -> QueryResult<'tcx>;\n-}\n-\n-impl<'tcx> TyCtxtExt<'tcx> for TyCtxt<'tcx> {\n-    fn evaluate_goal(self, goal: CanonicalGoal<'tcx>) -> QueryResult<'tcx> {\n-        let mut search_graph = search_graph::SearchGraph::new(self);\n-        EvalCtxt::evaluate_canonical_goal(self, &mut search_graph, goal)\n-    }\n-}\n-\n pub trait InferCtxtEvalExt<'tcx> {\n     /// Evaluates a goal from **outside** of the trait solver.\n     ///\n@@ -194,6 +183,15 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    /// The entry point of the solver.\n+    ///\n+    /// This function deals with (coinductive) cycles, overflow, and caching\n+    /// and then calls [`EvalCtxt::compute_goal`] which contains the actual\n+    /// logic of the solver.\n+    ///\n+    /// Instead of calling this function directly, use either [EvalCtxt::evaluate_goal]\n+    /// if you're inside of the solver or [InferCtxtEvalExt::evaluate_root_goal] if you're\n+    /// outside of it.\n     #[instrument(level = \"debug\", skip(tcx, search_graph), ret)]\n     fn evaluate_canonical_goal(\n         tcx: TyCtxt<'tcx>,"}, {"sha": "30902c2bc4506cdf95b0209625d9fc645bf3ebb1", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62f6fdff9fac2c28554475fa9731a7bc8439ea3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62f6fdff9fac2c28554475fa9731a7bc8439ea3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=d62f6fdff9fac2c28554475fa9731a7bc8439ea3", "patch": "@@ -28,8 +28,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // To only compute normalization once for each projection we only\n         // normalize if the expected term is an unconstrained inference variable.\n         //\n-        // E.g. for `<T as Trait>::Assoc = u32` we recursively compute the goal\n-        // `exists<U> <T as Trait>::Assoc = U` and then take the resulting type for\n+        // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n+        // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n         // `U` and equate it with `u32`. This means that we don't need a separate\n         // projection cache in the solver.\n         if self.term_is_fully_unconstrained(goal) {"}]}