{"sha": "ea4187a84254c2b27a68699659b3683464b4c1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDE4N2E4NDI1NGMyYjI3YTY4Njk5NjU5YjM2ODM0NjRiNGMxZTk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T19:17:42Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Fix binding levels in implied bounds rules", "tree": {"sha": "347bc2130dd1c36e7d3890c6455205cafddec9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347bc2130dd1c36e7d3890c6455205cafddec9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4187a84254c2b27a68699659b3683464b4c1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4187a84254c2b27a68699659b3683464b4c1e9", "html_url": "https://github.com/rust-lang/rust/commit/ea4187a84254c2b27a68699659b3683464b4c1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4187a84254c2b27a68699659b3683464b4c1e9/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d780395092fdb3a54403b9aaefdb38e25c9ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d780395092fdb3a54403b9aaefdb38e25c9ddd", "html_url": "https://github.com/rust-lang/rust/commit/c0d780395092fdb3a54403b9aaefdb38e25c9ddd"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "5502a1d186eeef2c3bd1776921cc86d7f1b5df08", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea4187a84254c2b27a68699659b3683464b4c1e9/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4187a84254c2b27a68699659b3683464b4c1e9/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=ea4187a84254c2b27a68699659b3683464b4c1e9", "patch": "@@ -211,7 +211,6 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let where_clauses = &predicates\n         .iter()\n         .map(|(wc, _)| wc.lower())\n-        .map(|wc| wc.subst(tcx, bound_vars))\n         .collect::<Vec<_>>();\n \n     // Rule Implied-Bound-From-Trait\n@@ -232,14 +231,13 @@ fn program_clauses_for_trait<'a, 'tcx>(\n         .map(|wc| {\n             // we move binders to the left\n             wc.map_bound(|goal| ProgramClause {\n-                goal: goal.into_from_env_goal(),\n-\n-                // FIXME: As where clauses can only bind lifetimes for now,\n-                // and that named bound regions have a def-id, it is safe\n-                // to just inject `hypotheses` (which contains named vars bound at index `0`)\n-                // into this binding level. This may change if we ever allow where clauses\n-                // to bind types (e.g., for GATs things), because bound types only use a `BoundVar`\n+                // FIXME: As where clauses can only bind lifetimes for now, and that named\n+                // bound regions have a def-id, it is safe to just inject `bound_vars` and\n+                // `hypotheses` (which contain named vars bound at index `0`) into this\n+                // binding level. This may change if we ever allow where clauses to bind\n+                // types (e.g. for GATs things), because bound types only use a `BoundVar`\n                 // index (no def-id).\n+                goal: goal.subst(tcx, bound_vars).into_from_env_goal(),\n                 hypotheses,\n \n                 category: ProgramClauseCategory::ImpliedBound,\n@@ -346,7 +344,6 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     let where_clauses = tcx.predicates_of(def_id).predicates\n         .iter()\n         .map(|(wc, _)| wc.lower())\n-        .map(|wc| wc.subst(tcx, bound_vars))\n         .collect::<Vec<_>>();\n \n     // `WellFormed(Ty<...>) :- WC1, ..., WCm`\n@@ -355,7 +352,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n         hypotheses: tcx.mk_goals(\n             where_clauses\n                 .iter()\n-                .cloned()\n+                .map(|wc| wc.subst(tcx, bound_vars))\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n         category: ProgramClauseCategory::WellFormed,\n@@ -383,11 +380,10 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n         .map(|wc| {\n             // move the binders to the left\n             wc.map_bound(|goal| ProgramClause {\n-                goal: goal.into_from_env_goal(),\n-\n-                // FIXME: we inject `hypotheses` into this binding level,\n-                // which may be incorrect in the future: see the FIXME in\n-                // `program_clauses_for_trait`\n+                // FIXME: we inject `bound_vars` and `hypotheses` into this binding\n+                // level, which may be incorrect in the future: see the FIXME in\n+                // `program_clauses_for_trait`.\n+                goal: goal.subst(tcx, bound_vars).into_from_env_goal(),\n                 hypotheses,\n \n                 category: ProgramClauseCategory::ImpliedBound,"}]}