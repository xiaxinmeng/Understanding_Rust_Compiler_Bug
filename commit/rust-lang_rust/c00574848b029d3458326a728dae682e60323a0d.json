{"sha": "c00574848b029d3458326a728dae682e60323a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDU3NDg0OGIwMjlkMzQ1ODMyNmE3MjhkYWU2ODJlNjAzMjNhMGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-08T22:38:36Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-15T14:18:40Z"}, "message": "Ensure borrows of fn/closure params do not outlive invocations.\n\nresolve_lifetime.rs: Switch from BlockScope to FnScope in ScopeChain\nconstruction. Lifetimes introduced by a fn signature are scoped to the\ncall-site for that fn. (Note `add_scope_and_walk_fn` must only add\nFnScope for the walk of body, *not* of the fn signature.)\n\nregion.rs: Introduce new CodeExtentData::CallSiteScope variant. Use\nCodeExtentData as the cx.parent, rather than just a NodeId.  Change\nDestructionScopeData to CallSiteScopeData.\n\nregionck.rs: Thread call_site_scope via Rcx; constrain fn return\nvalues.\n\n(update; incorporated review feedback from niko.)", "tree": {"sha": "e9db4bab594fd8bc8fb398888f210f0a11da6010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9db4bab594fd8bc8fb398888f210f0a11da6010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00574848b029d3458326a728dae682e60323a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00574848b029d3458326a728dae682e60323a0d", "html_url": "https://github.com/rust-lang/rust/commit/c00574848b029d3458326a728dae682e60323a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00574848b029d3458326a728dae682e60323a0d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbdfb493357427a0f94ce09badef581f5d62bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbdfb493357427a0f94ce09badef581f5d62bbd", "html_url": "https://github.com/rust-lang/rust/commit/4dbdfb493357427a0f94ce09badef581f5d62bbd"}], "stats": {"total": 266, "additions": 170, "deletions": 96}, "files": [{"sha": "56e1e2480b97cda50059fbc63348c85b1aebcfd2", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -148,6 +148,9 @@ impl<'tcx> ty::ctxt<'tcx> {\n                 };\n                 let scope_decorated_tag = match self.region_maps.code_extent_data(scope) {\n                     region::CodeExtentData::Misc(_) => tag,\n+                    region::CodeExtentData::CallSiteScope { .. } => {\n+                        \"scope of call-site for function\"\n+                    }\n                     region::CodeExtentData::ParameterScope { .. } => {\n                         \"scope of parameters for function\"\n                     }"}, {"sha": "2df946513f36700630e7dfbfc79547567ccc4fb3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -1466,10 +1466,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                  entry_ln: LiveNode,\n                  body: &hir::Block)\n     {\n-        // within the fn body, late-bound regions are liberated:\n+        // within the fn body, late-bound regions are liberated\n+        // and must outlive the *call-site* of the function.\n         let fn_ret =\n             self.ir.tcx.liberate_late_bound_regions(\n-                self.ir.tcx.region_maps.item_extent(body.id),\n+                self.ir.tcx.region_maps.call_site_extent(id, body.id),\n                 &self.fn_ret(id));\n \n         match fn_ret {"}, {"sha": "ef12bca45bdbd35b600776d59069cc30b484d3a3", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -125,6 +125,10 @@ pub const DUMMY_CODE_EXTENT : CodeExtent = CodeExtent(1);\n pub enum CodeExtentData {\n     Misc(ast::NodeId),\n \n+    // extent of the call-site for a function or closure (outlives\n+    // the parameters as well as the body).\n+    CallSiteScope { fn_id: ast::NodeId, body_id: ast::NodeId },\n+\n     // extent of parameters passed to a function or closure (they\n     // outlive its body)\n     ParameterScope { fn_id: ast::NodeId, body_id: ast::NodeId },\n@@ -136,20 +140,20 @@ pub enum CodeExtentData {\n     Remainder(BlockRemainder)\n }\n \n-/// extent of destructors for temporaries of node-id\n+/// extent of call-site for a function/method.\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n            RustcDecodable, Debug, Copy)]\n-pub struct DestructionScopeData {\n-    pub node_id: ast::NodeId\n+pub struct CallSiteScopeData {\n+    pub fn_id: ast::NodeId, pub body_id: ast::NodeId,\n }\n \n-impl DestructionScopeData {\n-    pub fn new(node_id: ast::NodeId) -> DestructionScopeData {\n-        DestructionScopeData { node_id: node_id }\n-    }\n+impl CallSiteScopeData {\n     pub fn to_code_extent(&self, region_maps: &RegionMaps) -> CodeExtent {\n         region_maps.lookup_code_extent(\n-            CodeExtentData::DestructionScope(self.node_id))\n+            match *self {\n+                CallSiteScopeData { fn_id, body_id } =>\n+                    CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body_id },\n+            })\n     }\n }\n \n@@ -190,6 +194,7 @@ impl CodeExtentData {\n             // precise extent denoted by `self`.\n             CodeExtentData::Remainder(br) => br.block,\n             CodeExtentData::DestructionScope(node_id) => node_id,\n+            CodeExtentData::CallSiteScope { fn_id: _, body_id } |\n             CodeExtentData::ParameterScope { fn_id: _, body_id } => body_id,\n         }\n     }\n@@ -215,6 +220,7 @@ impl CodeExtent {\n         match ast_map.find(self.node_id(region_maps)) {\n             Some(ast_map::NodeBlock(ref blk)) => {\n                 match region_maps.code_extent_data(*self) {\n+                    CodeExtentData::CallSiteScope { .. } |\n                     CodeExtentData::ParameterScope { .. } |\n                     CodeExtentData::Misc(_) |\n                     CodeExtentData::DestructionScope(_) => Some(blk.span),\n@@ -346,6 +352,10 @@ impl RegionMaps {\n     pub fn item_extent(&self, n: ast::NodeId) -> CodeExtent {\n         self.lookup_code_extent(CodeExtentData::DestructionScope(n))\n     }\n+    pub fn call_site_extent(&self, fn_id: ast::NodeId, body_id: ast::NodeId) -> CodeExtent {\n+        assert!(fn_id != body_id);\n+        self.lookup_code_extent(CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body_id })\n+    }\n     pub fn opt_destruction_extent(&self, n: ast::NodeId) -> Option<CodeExtent> {\n         self.code_extent_interner.borrow().get(&CodeExtentData::DestructionScope(n)).cloned()\n     }\n@@ -1101,6 +1111,9 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n            body.id,\n            visitor.cx.parent);\n \n+    visitor.cx.parent = visitor.new_code_extent(\n+        CodeExtentData::CallSiteScope { fn_id: id, body_id: body.id });\n+\n     let fn_decl_scope = visitor.new_code_extent(\n         CodeExtentData::ParameterScope { fn_id: id, body_id: body.id });\n "}, {"sha": "b45d9482809bf0e10c8ca309c5d15fd8217763d3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -42,7 +42,7 @@ pub enum DefRegion {\n                         /* lifetime decl */ ast::NodeId),\n     DefLateBoundRegion(ty::DebruijnIndex,\n                        /* lifetime decl */ ast::NodeId),\n-    DefFreeRegion(/* block scope */ region::DestructionScopeData,\n+    DefFreeRegion(region::CallSiteScopeData,\n                   /* lifetime decl */ ast::NodeId),\n }\n \n@@ -83,9 +83,9 @@ enum ScopeChain<'a> {\n     /// LateScope(['a, 'b, ...], s) extends s with late-bound\n     /// lifetimes introduced by the declaration binder_id.\n     LateScope(&'a Vec<hir::LifetimeDef>, Scope<'a>),\n-    /// lifetimes introduced by items within a code block are scoped\n-    /// to that block.\n-    BlockScope(region::DestructionScopeData, Scope<'a>),\n+\n+    /// lifetimes introduced by a fn are scoped to the call-site for that fn.\n+    FnScope { fn_id: ast::NodeId, body_id: ast::NodeId, s: Scope<'a> },\n     RootScope\n }\n \n@@ -172,20 +172,20 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, _: ast::NodeId) {\n+                b: &'v hir::Block, s: Span, fn_id: ast::NodeId) {\n         match fk {\n             FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_early_late(subst::FnSpace, generics, |this| {\n-                    this.walk_fn(fk, fd, b, s)\n+                    this.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n                 })\n             }\n             FnKind::Method(_, sig, _) => {\n                 self.visit_early_late(subst::FnSpace, &sig.generics, |this| {\n-                    this.walk_fn(fk, fd, b, s)\n+                    this.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n                 })\n             }\n             FnKind::Closure => {\n-                self.walk_fn(fk, fd, b, s)\n+                self.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n             }\n         }\n     }\n@@ -236,12 +236,6 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         replace(&mut self.labels_in_fn, saved);\n     }\n \n-    fn visit_block(&mut self, b: &hir::Block) {\n-        self.with(BlockScope(region::DestructionScopeData::new(b.id),\n-                             self.scope),\n-                  |_, this| intravisit::walk_block(this, b));\n-    }\n-\n     fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n         if lifetime_ref.name == special_idents::static_lifetime.name {\n             self.insert_lifetime(lifetime_ref, DefStaticRegion);\n@@ -437,7 +431,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n                                            label_span: Span) {\n         loop {\n             match *scope {\n-                BlockScope(_, s) => { scope = s; }\n+                FnScope { s, .. } => { scope = s; }\n                 RootScope => { return; }\n \n                 EarlyScope(_, lifetimes, s) |\n@@ -461,14 +455,13 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n }\n \n impl<'a> LifetimeContext<'a> {\n-    // This is just like intravisit::walk_fn, except that it extracts the\n-    // labels of the function body and swaps them in before visiting\n-    // the function body itself.\n-    fn walk_fn<'b>(&mut self,\n-                   fk: FnKind,\n-                   fd: &hir::FnDecl,\n-                   fb: &'b hir::Block,\n-                   _span: Span) {\n+    fn add_scope_and_walk_fn<'b>(&mut self,\n+                                 fk: FnKind,\n+                                 fd: &hir::FnDecl,\n+                                 fb: &'b hir::Block,\n+                                 _span: Span,\n+                                 fn_id: ast::NodeId) {\n+\n         match fk {\n             FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 intravisit::walk_fn_decl(self, fd);\n@@ -488,7 +481,8 @@ impl<'a> LifetimeContext<'a> {\n         // `self.labels_in_fn`.\n         extract_labels(self, fb);\n \n-        self.visit_block(fb);\n+        self.with(FnScope { fn_id: fn_id, body_id: fb.id, s: self.scope },\n+                  |_old_scope, this| this.visit_block(fb))\n     }\n \n     fn with<F>(&mut self, wrap_scope: ScopeChain, f: F) where\n@@ -559,8 +553,11 @@ impl<'a> LifetimeContext<'a> {\n         let mut scope = self.scope;\n         loop {\n             match *scope {\n-                BlockScope(blk_scope, s) => {\n-                    return self.resolve_free_lifetime_ref(blk_scope, lifetime_ref, s);\n+                FnScope {fn_id, body_id, s } => {\n+                    return self.resolve_free_lifetime_ref(\n+                        region::CallSiteScopeData { fn_id: fn_id, body_id: body_id },\n+                        lifetime_ref,\n+                        s);\n                 }\n \n                 RootScope => {\n@@ -604,7 +601,7 @@ impl<'a> LifetimeContext<'a> {\n     }\n \n     fn resolve_free_lifetime_ref(&mut self,\n-                                 scope_data: region::DestructionScopeData,\n+                                 scope_data: region::CallSiteScopeData,\n                                  lifetime_ref: &hir::Lifetime,\n                                  scope: Scope) {\n         debug!(\"resolve_free_lifetime_ref \\\n@@ -622,8 +619,10 @@ impl<'a> LifetimeContext<'a> {\n                     scope_data: {:?} scope: {:?} search_result: {:?}\",\n                    scope_data, scope, search_result);\n             match *scope {\n-                BlockScope(blk_scope_data, s) => {\n-                    scope_data = blk_scope_data;\n+                FnScope { fn_id, body_id, s } => {\n+                    scope_data = region::CallSiteScopeData {\n+                        fn_id: fn_id, body_id: body_id\n+                    };\n                     scope = s;\n                 }\n \n@@ -711,7 +710,7 @@ impl<'a> LifetimeContext<'a> {\n \n         loop {\n             match *old_scope {\n-                BlockScope(_, s) => {\n+                FnScope { s, .. } => {\n                     old_scope = s;\n                 }\n \n@@ -864,7 +863,7 @@ impl<'a> fmt::Debug for ScopeChain<'a> {\n         match *self {\n             EarlyScope(space, defs, _) => write!(fmt, \"EarlyScope({:?}, {:?})\", space, defs),\n             LateScope(defs, _) => write!(fmt, \"LateScope({:?})\", defs),\n-            BlockScope(id, _) => write!(fmt, \"BlockScope({:?})\", id),\n+            FnScope { fn_id, body_id, s: _ } => write!(fmt, \"FnScope({:?}, {:?})\", fn_id, body_id),\n             RootScope => write!(fmt, \"RootScope\"),\n         }\n     }"}, {"sha": "bd60d0a212252f549ba9c54d5437bf1a74a30ee3", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -192,7 +192,8 @@ fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n     };\n \n     // Search for a predicate like `Self : Sized` amongst the trait bounds.\n-    let free_substs = tcx.construct_free_substs(generics, ast::DUMMY_NODE_ID);\n+    let free_substs = tcx.construct_free_substs(generics,\n+                                                tcx.region_maps.node_extent(ast::DUMMY_NODE_ID));\n     let predicates = predicates.instantiate(tcx, &free_substs).predicates.into_vec();\n     elaborate_predicates(tcx, predicates)\n         .any(|predicate| {"}, {"sha": "cf9f59abf154616081ebe3de8e4eba54e8bd0e7e", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -26,6 +26,7 @@ use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def::{self, ExportMap};\n use middle::def_id::DefId;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n+use middle::region::{CodeExtent};\n use middle::subst::{self, ParamSpace, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n@@ -1098,7 +1099,7 @@ pub struct ParameterEnvironment<'a, 'tcx:'a> {\n     /// FIXME(#3696). It would be nice to refactor so that free\n     /// regions don't have this implicit scope and instead introduce\n     /// relationships in the environment.\n-    pub free_id: ast::NodeId,\n+    pub free_id_outlive: CodeExtent,\n }\n \n impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n@@ -1113,7 +1114,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n             caller_bounds: caller_bounds,\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n-            free_id: self.free_id,\n+            free_id_outlive: self.free_id_outlive,\n         }\n     }\n \n@@ -1131,7 +1132,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(impl_item.span,\n                                                            &scheme.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     hir::ImplItemKind::Const(_, _) => {\n                         let def_id = cx.map.local_def_id(id);\n@@ -1140,7 +1141,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(impl_item.span,\n                                                            &scheme.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     hir::ImplItemKind::Method(_, ref body) => {\n                         let method_def_id = cx.map.local_def_id(id);\n@@ -1152,7 +1153,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                     impl_item.span,\n                                     method_generics,\n                                     method_bounds,\n-                                    body.id)\n+                                    cx.region_maps.call_site_extent(id, body.id))\n                             }\n                             _ => {\n                                 cx.sess\n@@ -1175,7 +1176,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(trait_item.span,\n                                                            &trait_def.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     hir::ConstTraitItem(..) => {\n                         let def_id = cx.map.local_def_id(id);\n@@ -1184,23 +1185,29 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(trait_item.span,\n                                                            &scheme.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     hir::MethodTraitItem(_, ref body) => {\n-                        // for the body-id, use the id of the body\n-                        // block, unless this is a trait method with\n-                        // no default, then fallback to the method id.\n-                        let body_id = body.as_ref().map(|b| b.id).unwrap_or(id);\n+                        // Use call-site for extent (unless this is a\n+                        // trait method with no default; then fallback\n+                        // to the method id).\n                         let method_def_id = cx.map.local_def_id(id);\n                         match cx.impl_or_trait_item(method_def_id) {\n                             MethodTraitItem(ref method_ty) => {\n                                 let method_generics = &method_ty.generics;\n                                 let method_bounds = &method_ty.predicates;\n+                                let extent = if let Some(ref body) = *body {\n+                                    // default impl: use call_site extent as free_id_outlive bound.\n+                                    cx.region_maps.call_site_extent(id, body.id)\n+                                } else {\n+                                    // no default impl: use item extent as free_id_outlive bound.\n+                                    cx.region_maps.item_extent(id)\n+                                };\n                                 cx.construct_parameter_environment(\n                                     trait_item.span,\n                                     method_generics,\n                                     method_bounds,\n-                                    body_id)\n+                                    extent)\n                             }\n                             _ => {\n                                 cx.sess\n@@ -1223,7 +1230,8 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(item.span,\n                                                            &fn_scheme.generics,\n                                                            &fn_predicates,\n-                                                           body.id)\n+                                                           cx.region_maps.call_site_extent(id,\n+                                                                                           body.id))\n                     }\n                     hir::ItemEnum(..) |\n                     hir::ItemStruct(..) |\n@@ -1236,7 +1244,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(item.span,\n                                                            &scheme.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     hir::ItemTrait(..) => {\n                         let def_id = cx.map.local_def_id(id);\n@@ -1245,7 +1253,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                         cx.construct_parameter_environment(item.span,\n                                                            &trait_def.generics,\n                                                            &predicates,\n-                                                           id)\n+                                                           cx.region_maps.item_extent(id))\n                     }\n                     _ => {\n                         cx.sess.span_bug(item.span,\n@@ -2576,18 +2584,17 @@ impl<'tcx> ctxt<'tcx> {\n     /// are no free type/lifetime parameters in scope.\n     pub fn empty_parameter_environment<'a>(&'a self)\n                                            -> ParameterEnvironment<'a,'tcx> {\n+\n+        // for an empty parameter environment, there ARE no free\n+        // regions, so it shouldn't matter what we use for the free id\n+        let free_id_outlive = self.region_maps.node_extent(ast::DUMMY_NODE_ID);\n         ty::ParameterEnvironment { tcx: self,\n                                    free_substs: Substs::empty(),\n                                    caller_bounds: Vec::new(),\n                                    implicit_region_bound: ty::ReEmpty,\n                                    selection_cache: traits::SelectionCache::new(),\n                                    evaluation_cache: traits::EvaluationCache::new(),\n-\n-                                   // for an empty parameter\n-                                   // environment, there ARE no free\n-                                   // regions, so it shouldn't matter\n-                                   // what we use for the free id\n-                                   free_id: ast::DUMMY_NODE_ID }\n+                                   free_id_outlive: free_id_outlive }\n     }\n \n     /// Constructs and returns a substitution that can be applied to move from\n@@ -2596,7 +2603,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// free parameters. Since we currently represent bound/free type\n     /// parameters in the same way, this only has an effect on regions.\n     pub fn construct_free_substs(&self, generics: &Generics<'tcx>,\n-                                 free_id: NodeId) -> Substs<'tcx> {\n+                                 free_id_outlive: CodeExtent) -> Substs<'tcx> {\n         // map T => T\n         let mut types = VecPerParamSpace::empty();\n         for def in generics.types.as_slice() {\n@@ -2605,8 +2612,6 @@ impl<'tcx> ctxt<'tcx> {\n             types.push(def.space, self.mk_param_from_def(def));\n         }\n \n-        let free_id_outlive = self.region_maps.item_extent(free_id);\n-\n         // map bound 'a => free 'a\n         let mut regions = VecPerParamSpace::empty();\n         for def in generics.regions.as_slice() {\n@@ -2623,20 +2628,21 @@ impl<'tcx> ctxt<'tcx> {\n         }\n     }\n \n-    /// See `ParameterEnvironment` struct def'n for details\n+    /// See `ParameterEnvironment` struct def'n for details.\n+    /// If you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\n+    /// for the `free_id_outlive` parameter. (But note that that is not always quite right.)\n     pub fn construct_parameter_environment<'a>(&'a self,\n                                                span: Span,\n                                                generics: &ty::Generics<'tcx>,\n                                                generic_predicates: &ty::GenericPredicates<'tcx>,\n-                                               free_id: NodeId)\n+                                               free_id_outlive: CodeExtent)\n                                                -> ParameterEnvironment<'a, 'tcx>\n     {\n         //\n         // Construct the free substs.\n         //\n \n-        let free_substs = self.construct_free_substs(generics, free_id);\n-        let free_id_outlive = self.region_maps.item_extent(free_id);\n+        let free_substs = self.construct_free_substs(generics, free_id_outlive);\n \n         //\n         // Compute the bounds on Self and the type parameters.\n@@ -2646,12 +2652,6 @@ impl<'tcx> ctxt<'tcx> {\n         let bounds = self.liberate_late_bound_regions(free_id_outlive, &ty::Binder(bounds));\n         let predicates = bounds.predicates.into_vec();\n \n-        debug!(\"construct_parameter_environment: free_id={:?} free_subst={:?} predicates={:?}\",\n-               free_id,\n-               free_substs,\n-               predicates);\n-\n-        //\n         // Finally, we have to normalize the bounds in the environment, in\n         // case they contain any associated type projections. This process\n         // can yield errors if the put in illegal associated types, like\n@@ -2672,10 +2672,10 @@ impl<'tcx> ctxt<'tcx> {\n             caller_bounds: predicates,\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n-            free_id: free_id,\n+            free_id_outlive: free_id_outlive,\n         };\n \n-        let cause = traits::ObligationCause::misc(span, free_id);\n+        let cause = traits::ObligationCause::misc(span, free_id_outlive.node_id(&self.region_maps));\n         traits::normalize_param_env_or_error(unnormalized_env, cause)\n     }\n "}, {"sha": "e6007809af5e90e9a218cfd60f385c5619c9b82a", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -823,7 +823,7 @@ impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where '\n             caller_bounds: self.caller_bounds.fold_with(folder),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n-            free_id: self.free_id,\n+            free_id_outlive: self.free_id_outlive,\n         }\n     }\n }"}, {"sha": "768203c3e9e594895ee5f8a5a9ad49aa00aaf797", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -233,6 +233,17 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             // doesn't care about regions.\n             //\n             // May still be worth fixing though.\n+            'C' => {\n+                assert_eq!(self.next(), '[');\n+                let fn_id = self.parse_uint() as ast::NodeId;\n+                assert_eq!(self.next(), '|');\n+                let body_id = self.parse_uint() as ast::NodeId;\n+                assert_eq!(self.next(), ']');\n+                region::CodeExtentData::CallSiteScope {\n+                    fn_id: fn_id, body_id: body_id\n+                }\n+            }\n+            // This creates scopes with the wrong NodeId. (See note above.)\n             'P' => {\n                 assert_eq!(self.next(), '[');\n                 let fn_id = self.parse_uint() as ast::NodeId;"}, {"sha": "c1910e3f249db3a74d5674d14257bb3aedf19da3", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -286,6 +286,8 @@ pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) {\n \n fn enc_scope(w: &mut Encoder, cx: &ctxt, scope: region::CodeExtent) {\n     match cx.tcx.region_maps.code_extent_data(scope) {\n+        region::CodeExtentData::CallSiteScope {\n+            fn_id, body_id } => mywrite!(w, \"C[{}|{}]\", fn_id, body_id),\n         region::CodeExtentData::ParameterScope {\n             fn_id, body_id } => mywrite!(w, \"P[{}|{}]\", fn_id, body_id),\n         region::CodeExtentData::Misc(node_id) => mywrite!(w, \"M{}\", node_id),"}, {"sha": "79c93980a2f3d7a12f5a38ac2ad42009801ceede", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -181,7 +181,7 @@ pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &hir::Lifetime)\n \n         Some(&rl::DefFreeRegion(scope, id)) => {\n             ty::ReFree(ty::FreeRegion {\n-                    scope: tcx.region_maps.item_extent(scope.node_id),\n+                    scope: scope.to_code_extent(&tcx.region_maps),\n                     bound_region: ty::BrNamed(tcx.map.local_def_id(id),\n                                               lifetime.name)\n                 })"}, {"sha": "7792169d3eb46788f9d1b3f1af5da4622d663387", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -75,7 +75,7 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     fcx.write_ty(expr.id, closure_type);\n \n     let fn_sig = fcx.tcx().liberate_late_bound_regions(\n-        fcx.tcx().region_maps.item_extent(body.id), &fn_ty.sig);\n+        fcx.tcx().region_maps.call_site_extent(expr.id, body.id), &fn_ty.sig);\n \n     check_fn(fcx.ccx,\n              hir::Unsafety::Normal,"}, {"sha": "9ff7cc4607bfa1b27fbaeda1015df3e792855b9b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -456,7 +456,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             let inh = Inherited::new(ccx.tcx, &tables, param_env);\n \n             // Compute the fty from point of view of inside fn.\n-            let fn_scope = ccx.tcx.region_maps.item_extent(body.id);\n+            let fn_scope = ccx.tcx.region_maps.call_site_extent(fn_id, body.id);\n             let fn_sig =\n                 fn_ty.sig.subst(ccx.tcx, &inh.infcx.parameter_environment.free_substs);\n             let fn_sig ="}, {"sha": "3ecb9468ef47a7a3d766df2db2de6d331871e9f5", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -89,7 +89,7 @@ use middle::free_region::FreeRegionMap;\n use middle::implicator::{self, Implication};\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use middle::region::CodeExtent;\n+use middle::region::{self, CodeExtent};\n use middle::subst::Substs;\n use middle::traits;\n use middle::ty::{self, RegionEscape, ReScope, Ty, MethodCall, HasTypeFlags};\n@@ -180,6 +180,9 @@ pub struct Rcx<'a, 'tcx: 'a> {\n     // id of innermost fn body id\n     body_id: ast::NodeId,\n \n+    // call_site scope of innermost fn\n+    call_site_scope: Option<CodeExtent>,\n+\n     // id of innermost fn or loop\n     repeating_scope: ast::NodeId,\n \n@@ -200,6 +203,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         Rcx { fcx: fcx,\n               repeating_scope: initial_repeating_scope,\n               body_id: initial_body_id,\n+              call_site_scope: None,\n               subject: subject,\n               region_bound_pairs: Vec::new(),\n               free_region_map: FreeRegionMap::new(),\n@@ -214,6 +218,10 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         self.fcx.infcx()\n     }\n \n+    fn set_call_site_scope(&mut self, call_site_scope: Option<CodeExtent>) -> Option<CodeExtent> {\n+        mem::replace(&mut self.call_site_scope, call_site_scope)\n+    }\n+\n     fn set_body_id(&mut self, body_id: ast::NodeId) -> ast::NodeId {\n         mem::replace(&mut self.body_id, body_id)\n     }\n@@ -275,14 +283,18 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n     }\n \n     fn visit_fn_body(&mut self,\n-                     id: ast::NodeId,\n+                     id: ast::NodeId, // the id of the fn itself\n                      fn_decl: &hir::FnDecl,\n                      body: &hir::Block,\n                      span: Span)\n     {\n         // When we enter a function, we can derive\n         debug!(\"visit_fn_body(id={})\", id);\n \n+        let call_site = self.fcx.tcx().region_maps.lookup_code_extent(\n+            region::CodeExtentData::CallSiteScope { fn_id: id, body_id: body.id });\n+        let old_call_site_scope = self.set_call_site_scope(Some(call_site));\n+\n         let fn_sig = {\n             let fn_sig_map = &self.infcx().tables.borrow().liberated_fn_sigs;\n             match fn_sig_map.get(&id) {\n@@ -300,7 +312,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         // For the return type, if diverging, substitute `bool` just\n         // because it will have no effect.\n         //\n-        // FIXME(#25759) return types should not be implied bounds\n+        // FIXME(#27579) return types should not be implied bounds\n         let fn_sig_tys: Vec<_> =\n             fn_sig.inputs.iter()\n                          .cloned()\n@@ -315,9 +327,18 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         self.visit_block(body);\n         self.visit_region_obligations(body.id);\n \n+        let call_site_scope = self.call_site_scope.unwrap();\n+        debug!(\"visit_fn_body body.id {} call_site_scope: {:?}\",\n+               body.id, call_site_scope);\n+        type_of_node_must_outlive(self,\n+                                  infer::CallReturn(span),\n+                                  body.id,\n+                                  ty::ReScope(call_site_scope));\n+\n         self.region_bound_pairs.truncate(old_region_bounds_pairs_len);\n \n         self.set_body_id(old_body_id);\n+        self.set_call_site_scope(old_call_site_scope);\n     }\n \n     fn visit_region_obligations(&mut self, node_id: ast::NodeId)\n@@ -834,6 +855,17 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n+        hir::ExprRet(Some(ref ret_expr)) => {\n+            let call_site_scope = rcx.call_site_scope;\n+            debug!(\"visit_expr ExprRet ret_expr.id {} call_site_scope: {:?}\",\n+                   ret_expr.id, call_site_scope);\n+            type_of_node_must_outlive(rcx,\n+                                      infer::CallReturn(ret_expr.span),\n+                                      ret_expr.id,\n+                                      ty::ReScope(call_site_scope.unwrap()));\n+            intravisit::walk_expr(rcx, expr);\n+        }\n+\n         _ => {\n             intravisit::walk_expr(rcx, expr);\n         }"}, {"sha": "ee2845c824e3b59493a19a8946ef6ba98a90e38c", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -137,10 +137,11 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         let type_scheme = ccx.tcx.lookup_item_type(item_def_id);\n         let type_predicates = ccx.tcx.lookup_predicates(item_def_id);\n         reject_non_type_param_bounds(ccx.tcx, item.span, &type_predicates);\n+        let free_id_outlive = ccx.tcx.region_maps.item_extent(item.id);\n         let param_env = ccx.tcx.construct_parameter_environment(item.span,\n                                                                 &type_scheme.generics,\n                                                                 &type_predicates,\n-                                                                item.id);\n+                                                                free_id_outlive);\n         let tables = RefCell::new(ty::Tables::empty());\n         let inh = Inherited::new(ccx.tcx, &tables, param_env);\n         let fcx = blank_fn_ctxt(ccx, &inh, ty::FnConverging(type_scheme.ty), item.id);"}, {"sha": "809cbb88bd6b346a1187e8fcab8b298cd4ac83f8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -13,6 +13,7 @@ use check::{FnCtxt, Inherited, blank_fn_ctxt, regionck};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n use CrateCtxt;\n use middle::def_id::DefId;\n+use middle::region::{CodeExtent};\n use middle::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n@@ -134,7 +135,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         let code = self.code.clone();\n         self.with_fcx(item_id, span, |fcx, this| {\n             let free_substs = &fcx.inh.infcx.parameter_environment.free_substs;\n-            let free_id = fcx.inh.infcx.parameter_environment.free_id;\n+            let free_id_outlive = fcx.inh.infcx.parameter_environment.free_id_outlive;\n \n             let item = fcx.tcx().impl_or_trait_item(fcx.tcx().map.local_def_id(item_id));\n \n@@ -153,7 +154,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                     let method_ty = fcx.instantiate_type_scheme(span, free_substs, &method.fty);\n                     let predicates = fcx.instantiate_bounds(span, free_substs, &method.predicates);\n                     this.check_fn_or_method(fcx, span, &method_ty, &predicates,\n-                                            free_id, &mut implied_bounds);\n+                                            free_id_outlive, &mut implied_bounds);\n                 }\n                 ty::TypeTraitItem(assoc_type) => {\n                     if let Some(ref ty) = assoc_type.ty {\n@@ -263,8 +264,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let predicates = fcx.instantiate_bounds(item.span, free_substs, &predicates);\n \n             let mut implied_bounds = vec![];\n+            let free_id_outlive = fcx.tcx().region_maps.call_site_extent(item.id, body.id);\n             this.check_fn_or_method(fcx, item.span, bare_fn_ty, &predicates,\n-                                    body.id, &mut implied_bounds);\n+                                    free_id_outlive, &mut implied_bounds);\n             implied_bounds\n         })\n     }\n@@ -355,12 +357,11 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                 span: Span,\n                                 fty: &ty::BareFnTy<'tcx>,\n                                 predicates: &ty::InstantiatedPredicates<'tcx>,\n-                                free_id: ast::NodeId,\n+                                free_id_outlive: CodeExtent,\n                                 implied_bounds: &mut Vec<Ty<'tcx>>)\n     {\n         let free_substs = &fcx.inh.infcx.parameter_environment.free_substs;\n         let fty = fcx.instantiate_type_scheme(span, free_substs, fty);\n-        let free_id_outlive = fcx.tcx().region_maps.item_extent(free_id);\n         let sig = fcx.tcx().liberate_late_bound_regions(free_id_outlive, &fty.sig);\n \n         for &input_ty in &sig.inputs {"}, {"sha": "33a99bb0769c67f1320061884b48adc22fcaeb97", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00574848b029d3458326a728dae682e60323a0d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c00574848b029d3458326a728dae682e60323a0d", "patch": "@@ -889,11 +889,13 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             for impl_item in impl_items {\n                 if let hir::ImplItemKind::Method(ref sig, ref body) = impl_item.node {\n                     let body_id = body.id;\n+                    let body_scope = ccx.tcx.region_maps.call_site_extent(impl_item.id, body_id);\n                     check_method_self_type(ccx,\n                                            &BindingRscope::new(),\n                                            ccx.method_ty(impl_item.id),\n                                            selfty,\n                                            &sig.explicit_self,\n+                                           body_scope,\n                                            body_id);\n                 }\n             }\n@@ -988,16 +990,25 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             // This must be done after `collect_trait_methods` so that\n             // we have a method type stored for every method.\n             for trait_item in trait_items {\n-                let sig = match trait_item.node {\n-                    hir::MethodTraitItem(ref sig, _) => sig,\n+                let (sig, the_scope, the_id) = match trait_item.node {\n+                    hir::MethodTraitItem(ref sig, Some(ref body)) => {\n+                        let body_scope =\n+                            ccx.tcx.region_maps.call_site_extent(trait_item.id, body.id);\n+                        (sig, body_scope, body.id)\n+                    }\n+                    hir::MethodTraitItem(ref sig, None) => {\n+                        let item_scope = ccx.tcx.region_maps.item_extent(trait_item.id);\n+                        (sig, item_scope, it.id)\n+                    }\n                     _ => continue\n                 };\n                 check_method_self_type(ccx,\n                                        &BindingRscope::new(),\n                                        ccx.method_ty(trait_item.id),\n                                        tcx.mk_self_type(),\n                                        &sig.explicit_self,\n-                                       it.id)\n+                                       the_scope,\n+                                       the_id)\n             }\n         },\n         hir::ItemStruct(ref struct_def, _) => {\n@@ -2282,6 +2293,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n     method_type: Rc<ty::Method<'tcx>>,\n     required_type: Ty<'tcx>,\n     explicit_self: &hir::ExplicitSelf,\n+    body_scope: region::CodeExtent,\n     body_id: ast::NodeId)\n {\n     let tcx = ccx.tcx;\n@@ -2293,8 +2305,6 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n             _ => typ,\n         };\n \n-        let body_scope = tcx.region_maps.item_extent(body_id);\n-\n         // \"Required type\" comes from the trait definition. It may\n         // contain late-bound regions from the method, but not the\n         // trait (since traits only have early-bound region"}]}