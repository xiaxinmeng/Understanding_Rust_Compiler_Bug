{"sha": "cd684e39e0d27513d21f15e7cc65273ec5883e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjg0ZTM5ZTBkMjc1MTNkMjFmMTVlN2NjNjUyNzNlYzU4ODNlMWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-17T12:14:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-17T12:14:24Z"}, "message": "Fix saturated_* intrinsics for 128bit ints\n\nFixes #968", "tree": {"sha": "a1c75c79d98b2255fe80007f56709f2dde481128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c75c79d98b2255fe80007f56709f2dde481128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd684e39e0d27513d21f15e7cc65273ec5883e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd684e39e0d27513d21f15e7cc65273ec5883e1b", "html_url": "https://github.com/rust-lang/rust/commit/cd684e39e0d27513d21f15e7cc65273ec5883e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd684e39e0d27513d21f15e7cc65273ec5883e1b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a378c3f3f8582d6478677069e4f2810198dda46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a378c3f3f8582d6478677069e4f2810198dda46", "html_url": "https://github.com/rust-lang/rust/commit/9a378c3f3f8582d6478677069e4f2810198dda46"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "395a270efd9dce90c53dba9c1746bbd84ea812b0", "filename": "src/cast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=cd684e39e0d27513d21f15e7cc65273ec5883e1b", "patch": "@@ -159,7 +159,13 @@ pub(crate) fn clif_int_or_float_cast(\n             } else {\n                 fx.bcx.ins().fcvt_to_uint_sat(types::I32, from)\n             };\n-            let (min, max) = type_min_max_value(to_ty, to_signed);\n+            let (min, max) = match (to_ty, to_signed) {\n+                (types::I8, false) => (0, u8::MAX as i64),\n+                (types::I16, false) => (0, u16::MAX as i64),\n+                (types::I8, true) => (i8::MIN as i64, i8::MAX as i64),\n+                (types::I16, true) => (i16::MIN as i64, i16::MAX as i64),\n+                _ => unreachable!(),\n+            };\n             let min_val = fx.bcx.ins().iconst(types::I32, min);\n             let max_val = fx.bcx.ins().iconst(types::I32, max);\n "}, {"sha": "e24eb9f0553eb75b40031f0ee9836472f7864288", "filename": "src/common.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=cd684e39e0d27513d21f15e7cc65273ec5883e1b", "patch": "@@ -215,8 +215,33 @@ pub(crate) fn resolve_value_imm(func: &Function, val: Value) -> Option<u128> {\n     }\n }\n \n-pub(crate) fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n+pub(crate) fn type_min_max_value(bcx: &mut FunctionBuilder<'_>, ty: Type, signed: bool) -> (Value, Value) {\n     assert!(ty.is_int());\n+\n+    if ty == types::I128 {\n+        if signed {\n+            let min = i128::MIN as u128;\n+            let min_lsb = bcx.ins().iconst(types::I64, min as u64 as i64);\n+            let min_msb = bcx.ins().iconst(types::I64, (min >> 64) as u64 as i64);\n+            let min = bcx.ins().iconcat(min_lsb, min_msb);\n+\n+            let max = i128::MIN as u128;\n+            let max_lsb = bcx.ins().iconst(types::I64, max as u64 as i64);\n+            let max_msb = bcx.ins().iconst(types::I64, (max >> 64) as u64 as i64);\n+            let max = bcx.ins().iconcat(max_lsb, max_msb);\n+\n+            return (min, max);\n+        } else {\n+            let min_half = bcx.ins().iconst(types::I64, 0);\n+            let min = bcx.ins().iconcat(min_half, min_half);\n+\n+            let max_half = bcx.ins().iconst(types::I64, u64::MAX as i64);\n+            let max = bcx.ins().iconcat(max_half, max_half);\n+\n+            return (min, max);\n+        }\n+    }\n+\n     let min = match (ty, signed) {\n         (types::I8, false) | (types::I16, false) | (types::I32, false) | (types::I64, false) => {\n             0i64\n@@ -225,7 +250,6 @@ pub(crate) fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n         (types::I16, true) => i16::MIN as i64,\n         (types::I32, true) => i32::MIN as i64,\n         (types::I64, true) => i64::MIN,\n-        (types::I128, _) => unimplemented!(),\n         _ => unreachable!(),\n     };\n \n@@ -238,10 +262,11 @@ pub(crate) fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n         (types::I16, true) => i16::MAX as i64,\n         (types::I32, true) => i32::MAX as i64,\n         (types::I64, true) => i64::MAX,\n-        (types::I128, _) => unimplemented!(),\n         _ => unreachable!(),\n     };\n \n+    let (min, max) = (bcx.ins().iconst(ty, min), bcx.ins().iconst(ty, max));\n+\n     (min, max)\n }\n "}, {"sha": "8ae4848a7dff46219e78749b95d25936170f79b1", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd684e39e0d27513d21f15e7cc65273ec5883e1b/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=cd684e39e0d27513d21f15e7cc65273ec5883e1b", "patch": "@@ -583,9 +583,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             // `select.i8` is not implemented by Cranelift.\n             let has_overflow = fx.bcx.ins().uextend(types::I32, has_overflow);\n \n-            let (min, max) = type_min_max_value(clif_ty, signed);\n-            let min = fx.bcx.ins().iconst(clif_ty, min);\n-            let max = fx.bcx.ins().iconst(clif_ty, max);\n+            let (min, max) = type_min_max_value(&mut fx.bcx, clif_ty, signed);\n \n             let val = match (intrinsic, signed) {\n                 (\"saturating_add\", false) => fx.bcx.ins().select(has_overflow, max, val),"}]}