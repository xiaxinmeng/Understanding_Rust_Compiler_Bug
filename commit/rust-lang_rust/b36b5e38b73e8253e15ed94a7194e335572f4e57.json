{"sha": "b36b5e38b73e8253e15ed94a7194e335572f4e57", "node_id": "C_kwDOAAsO6NoAKGIzNmI1ZTM4YjczZTgyNTNlMTVlZDk0YTcxOTRlMzM1NTcyZjRlNTc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T13:46:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T14:17:02Z"}, "message": "fix rustc lints in Miri", "tree": {"sha": "1e80f5297b072fa93cc501c5f3c646bbd228e60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e80f5297b072fa93cc501c5f3c646bbd228e60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36b5e38b73e8253e15ed94a7194e335572f4e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36b5e38b73e8253e15ed94a7194e335572f4e57", "html_url": "https://github.com/rust-lang/rust/commit/b36b5e38b73e8253e15ed94a7194e335572f4e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36b5e38b73e8253e15ed94a7194e335572f4e57/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366d11b2d8d1d5c51bc4a5f056debac77a01c071", "url": "https://api.github.com/repos/rust-lang/rust/commits/366d11b2d8d1d5c51bc4a5f056debac77a01c071", "html_url": "https://github.com/rust-lang/rust/commit/366d11b2d8d1d5c51bc4a5f056debac77a01c071"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "5088a9ceffdbb32df45434c97a5473402f0a4b86", "filename": "miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/miri", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -124,7 +124,7 @@ fi\n if [ -z \"$CARGO_PROFILE_DEV_OPT_LEVEL\" ]; then\n     export CARGO_PROFILE_DEV_OPT_LEVEL=2\n fi\n-# Enable rustc-specific lints\n+# Enable rustc-specific lints (ignored without `-Zunstable-options`).\n export RUSTFLAGS=\"-Zunstable-options -Wrustc::internal $RUSTFLAGS\"\n # We set the rpath so that Miri finds the private rustc libraries it needs.\n export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR $RUSTFLAGS\""}, {"sha": "b5a45d162f21bd8af279033a9ae9fccafc0a2aef", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -101,13 +101,14 @@ struct MiriBeRustCompilerCalls {\n }\n \n impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n+    #[allow(rustc::potential_query_instability)] // rustc_codegen_ssa (where this code is copied from) also allows this lint\n     fn config(&mut self, config: &mut Config) {\n         if config.opts.prints.is_empty() && self.target_crate {\n             // Queries overriden here affect the data stored in `rmeta` files of dependencies,\n             // which will be used later in non-`MIRI_BE_RUSTC` mode.\n             config.override_queries = Some(|_, local_providers, _| {\n-                // `exported_symbols()` provided by rustc always returns empty result if\n-                // `tcx.sess.opts.output_types.should_codegen()` is false.\n+                // `exported_symbols` and `reachable_non_generics` provided by rustc always returns\n+                // an empty result if `tcx.sess.opts.output_types.should_codegen()` is false.\n                 local_providers.exported_symbols = |tcx, cnum| {\n                     assert_eq!(cnum, LOCAL_CRATE);\n                     tcx.arena.alloc_from_iter("}, {"sha": "12e895852d22ee345a40c80f1a6173022ce6b994", "filename": "src/eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -1,13 +1,13 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n-use std::collections::HashSet;\n use std::ffi::{OsStr, OsString};\n use std::iter;\n use std::panic::{self, AssertUnwindSafe};\n use std::thread;\n \n use log::info;\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{\n     self,\n@@ -96,11 +96,11 @@ pub struct MiriConfig {\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n     /// The stacked borrows pointer ids to report about\n-    pub tracked_pointer_tags: HashSet<SbTag>,\n+    pub tracked_pointer_tags: FxHashSet<SbTag>,\n     /// The stacked borrows call IDs to report about\n-    pub tracked_call_ids: HashSet<CallId>,\n+    pub tracked_call_ids: FxHashSet<CallId>,\n     /// The allocation ids to report about.\n-    pub tracked_alloc_ids: HashSet<AllocId>,\n+    pub tracked_alloc_ids: FxHashSet<AllocId>,\n     /// Determine if data race detection should be enabled\n     pub data_race_detector: bool,\n     /// Determine if weak memory emulation should be enabled. Requires data race detection to be enabled\n@@ -144,9 +144,9 @@ impl Default for MiriConfig {\n             forwarded_env_vars: vec![],\n             args: vec![],\n             seed: None,\n-            tracked_pointer_tags: HashSet::default(),\n-            tracked_call_ids: HashSet::default(),\n-            tracked_alloc_ids: HashSet::default(),\n+            tracked_pointer_tags: FxHashSet::default(),\n+            tracked_call_ids: FxHashSet::default(),\n+            tracked_alloc_ids: FxHashSet::default(),\n             data_race_detector: true,\n             weak_memory_emulation: true,\n             track_outdated_loads: false,"}, {"sha": "94958b2ff5fb2bfc6f208bdb29da2c77a3cba9ba", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -23,7 +23,9 @@\n     clippy::derive_partial_eq_without_eq,\n     clippy::derive_hash_xor_eq,\n     clippy::too_many_arguments,\n-    clippy::type_complexity\n+    clippy::type_complexity,\n+    // We are not implementing queries here so it's fine\n+    rustc::potential_query_instability\n )]\n #![warn(\n     rust_2018_idioms,"}, {"sha": "14df64d8aa308b4c47c6b6d075c0dd9b30989788", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -3,23 +3,22 @@\n \n use std::borrow::Cow;\n use std::cell::RefCell;\n-use std::collections::HashSet;\n use std::fmt;\n use std::time::Instant;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n use rustc_ast::ast::Mutability;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[allow(unused)]\n use rustc_data_structures::static_assert_size;\n use rustc_middle::{\n     mir,\n     ty::{\n         self,\n         layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout},\n-        Instance, TyCtxt, TypeAndMut,\n+        Instance, Ty, TyCtxt, TypeAndMut,\n     },\n };\n use rustc_span::def_id::{CrateNum, DefId};\n@@ -335,7 +334,7 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// The allocation IDs to report when they are being allocated\n     /// (helps for debugging memory leaks and use after free bugs).\n-    tracked_alloc_ids: HashSet<AllocId>,\n+    tracked_alloc_ids: FxHashSet<AllocId>,\n \n     /// Controls whether alignment of memory accesses is being checked.\n     pub(crate) check_alignment: AlignmentCheck,\n@@ -613,7 +612,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         bin_op: mir::BinOp,\n         left: &ImmTy<'tcx, Provenance>,\n         right: &ImmTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, (Scalar<Provenance>, bool, ty::Ty<'tcx>)> {\n+    ) -> InterpResult<'tcx, (Scalar<Provenance>, bool, Ty<'tcx>)> {\n         ecx.binary_ptr_op(bin_op, left, right)\n     }\n "}, {"sha": "6b311707c35d81e561cfd2c512ac57fe94f2e4ff", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -7,7 +7,10 @@ use log::trace;\n \n use rustc_apfloat::{Float, Round};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf};\n-use rustc_middle::{mir, ty, ty::FloatTy};\n+use rustc_middle::{\n+    mir,\n+    ty::{self, FloatTy, Ty},\n+};\n use rustc_target::abi::Integer;\n \n use crate::*;\n@@ -377,7 +380,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn float_to_int_unchecked<F>(\n         &self,\n         f: F,\n-        dest_ty: ty::Ty<'tcx>,\n+        dest_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Scalar<Provenance>>\n     where\n         F: Float + Into<Scalar<Provenance>>,"}, {"sha": "e0cc3e81cf0b4a2d0e0a37b021cabff67fa60fa5", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -13,11 +13,11 @@ use rustc_middle::mir::RetagKind;\n use rustc_middle::ty::{\n     self,\n     layout::{HasParamEnv, LayoutOf},\n+    Ty,\n };\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::Size;\n use smallvec::SmallVec;\n-use std::collections::HashSet;\n \n use crate::*;\n \n@@ -100,9 +100,9 @@ pub struct GlobalStateInner {\n     /// `GlobalStateInner::end_call`. See `Stack::item_popped` for more details.\n     protected_tags: FxHashSet<SbTag>,\n     /// The pointer ids to trace\n-    tracked_pointer_tags: HashSet<SbTag>,\n+    tracked_pointer_tags: FxHashSet<SbTag>,\n     /// The call ids to trace\n-    tracked_call_ids: HashSet<CallId>,\n+    tracked_call_ids: FxHashSet<CallId>,\n     /// Whether to recurse into datatypes when searching for pointers to retag.\n     retag_fields: bool,\n }\n@@ -154,8 +154,8 @@ impl fmt::Display for RefKind {\n /// Utilities for initialization and ID generation\n impl GlobalStateInner {\n     pub fn new(\n-        tracked_pointer_tags: HashSet<SbTag>,\n-        tracked_call_ids: HashSet<CallId>,\n+        tracked_pointer_tags: FxHashSet<SbTag>,\n+        tracked_call_ids: FxHashSet<CallId>,\n         retag_fields: bool,\n     ) -> Self {\n         GlobalStateInner {\n@@ -1013,7 +1013,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Determine mutability and whether to add a protector.\n         // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n         // making it useless.\n-        fn qualify(ty: ty::Ty<'_>, kind: RetagKind) -> Option<(RefKind, bool)> {\n+        fn qualify(ty: Ty<'_>, kind: RetagKind) -> Option<(RefKind, bool)> {\n             match ty.kind() {\n                 // References are simple.\n                 ty::Ref(_, _, Mutability::Mut) =>"}, {"sha": "de7d528d3346ac785a666383e12abeda3785afc9", "filename": "src/sync.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36b5e38b73e8253e15ed94a7194e335572f4e57/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=b36b5e38b73e8253e15ed94a7194e335572f4e57", "patch": "@@ -1,9 +1,10 @@\n-use std::collections::{hash_map::Entry, HashMap, VecDeque};\n+use std::collections::{hash_map::Entry, VecDeque};\n use std::num::NonZeroU32;\n use std::ops::Not;\n \n use log::trace;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n \n use crate::*;\n@@ -77,7 +78,7 @@ struct RwLock {\n     writer: Option<ThreadId>,\n     /// The readers that currently own the lock and how many times they acquired\n     /// the lock.\n-    readers: HashMap<ThreadId, usize>,\n+    readers: FxHashMap<ThreadId, usize>,\n     /// The queue of writer threads waiting for this lock.\n     writer_queue: VecDeque<ThreadId>,\n     /// The queue of reader threads waiting for this lock.\n@@ -153,7 +154,7 @@ pub(super) struct SynchronizationState {\n     mutexes: IndexVec<MutexId, Mutex>,\n     rwlocks: IndexVec<RwLockId, RwLock>,\n     condvars: IndexVec<CondvarId, Condvar>,\n-    futexes: HashMap<u64, Futex>,\n+    futexes: FxHashMap<u64, Futex>,\n }\n \n // Private extension trait for local helper methods"}]}