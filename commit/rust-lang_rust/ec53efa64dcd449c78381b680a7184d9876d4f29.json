{"sha": "ec53efa64dcd449c78381b680a7184d9876d4f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTNlZmE2NGRjZDQ0OWM3ODM4MWI2ODBhNzE4NGQ5ODc2ZDRmMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T12:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T12:43:38Z"}, "message": "auto merge of #7884 : pcwalton/rust/check-loans-and-inside-at, r=graydon\n\nr? @graydon", "tree": {"sha": "67853687aae0740de38c67a4bb9d67d92464d701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67853687aae0740de38c67a4bb9d67d92464d701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec53efa64dcd449c78381b680a7184d9876d4f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec53efa64dcd449c78381b680a7184d9876d4f29", "html_url": "https://github.com/rust-lang/rust/commit/ec53efa64dcd449c78381b680a7184d9876d4f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec53efa64dcd449c78381b680a7184d9876d4f29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "html_url": "https://github.com/rust-lang/rust/commit/e3142c5d3e0a69bff0e3d5506f617c5433a9a750"}, {"sha": "93fa7a4b09d755e1dba3a71f56b3dc34d900776f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93fa7a4b09d755e1dba3a71f56b3dc34d900776f", "html_url": "https://github.com/rust-lang/rust/commit/93fa7a4b09d755e1dba3a71f56b3dc34d900776f"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "2338e49a890521ba3dc8ea8af37b182798aea2f5", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ec53efa64dcd449c78381b680a7184d9876d4f29/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec53efa64dcd449c78381b680a7184d9876d4f29/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=ec53efa64dcd449c78381b680a7184d9876d4f29", "patch": "@@ -31,10 +31,11 @@ use syntax::codemap::span;\n use syntax::visit;\n use util::ppaux::Repr;\n \n+#[deriving(Clone)]\n struct CheckLoanCtxt<'self> {\n     bccx: @BorrowckCtxt,\n     dfcx_loans: &'self LoanDataFlow,\n-    move_data: move_data::FlowedMoveData,\n+    move_data: @move_data::FlowedMoveData,\n     all_loans: &'self [Loan],\n     reported: @mut HashSet<ast::node_id>,\n }\n@@ -46,10 +47,10 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    body: &ast::blk) {\n     debug!(\"check_loans(body id=%?)\", body.id);\n \n-    let clcx = @mut CheckLoanCtxt {\n+    let clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n-        move_data: move_data,\n+        move_data: @move_data,\n         all_loans: all_loans,\n         reported: @mut HashSet::new(),\n     };\n@@ -139,7 +140,7 @@ impl<'self> CheckLoanCtxt<'self> {\n         return result;\n     }\n \n-    pub fn check_for_conflicting_loans(&mut self, scope_id: ast::node_id) {\n+    pub fn check_for_conflicting_loans(&self, scope_id: ast::node_id) {\n         //! Checks to see whether any of the loans that are issued\n         //! by `scope_id` conflict with loans that have already been\n         //! issued when we enter `scope_id` (for example, we do not\n@@ -596,7 +597,7 @@ impl<'self> CheckLoanCtxt<'self> {\n         MoveOk\n     }\n \n-    pub fn check_call(&mut self,\n+    pub fn check_call(&self,\n                       _expr: @ast::expr,\n                       _callee: Option<@ast::expr>,\n                       _callee_id: ast::node_id,\n@@ -617,8 +618,8 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n                          body: &ast::blk,\n                          sp: span,\n                          id: ast::node_id,\n-                         (this, visitor): (@mut CheckLoanCtxt<'a>,\n-                                           visit::vt<@mut CheckLoanCtxt<'a>>)) {\n+                         (this, visitor): (CheckLoanCtxt<'a>,\n+                                           visit::vt<CheckLoanCtxt<'a>>)) {\n     match *fk {\n         visit::fk_item_fn(*) |\n         visit::fk_method(*) => {\n@@ -634,7 +635,7 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n \n     visit::visit_fn(fk, decl, body, sp, id, (this, visitor));\n \n-    fn check_captured_variables(this: @mut CheckLoanCtxt,\n+    fn check_captured_variables(this: CheckLoanCtxt,\n                                 closure_id: ast::node_id,\n                                 span: span) {\n         let cap_vars = this.bccx.capture_map.get(&closure_id);\n@@ -652,7 +653,7 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n         }\n         return;\n \n-        fn check_by_move_capture(this: @mut CheckLoanCtxt,\n+        fn check_by_move_capture(this: CheckLoanCtxt,\n                                  closure_id: ast::node_id,\n                                  cap_var: &moves::CaptureVar,\n                                  move_path: @LoanPath) {\n@@ -676,14 +677,14 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n }\n \n fn check_loans_in_local<'a>(local: @ast::local,\n-                            (this, vt): (@mut CheckLoanCtxt<'a>,\n-                                         visit::vt<@mut CheckLoanCtxt<'a>>)) {\n+                            (this, vt): (CheckLoanCtxt<'a>,\n+                                         visit::vt<CheckLoanCtxt<'a>>)) {\n     visit::visit_local(local, (this, vt));\n }\n \n fn check_loans_in_expr<'a>(expr: @ast::expr,\n-                           (this, vt): (@mut CheckLoanCtxt<'a>,\n-                                        visit::vt<@mut CheckLoanCtxt<'a>>)) {\n+                           (this, vt): (CheckLoanCtxt<'a>,\n+                                        visit::vt<CheckLoanCtxt<'a>>)) {\n     visit::visit_expr(expr, (this, vt));\n \n     debug!(\"check_loans_in_expr(expr=%s)\",\n@@ -736,17 +737,17 @@ fn check_loans_in_expr<'a>(expr: @ast::expr,\n }\n \n fn check_loans_in_pat<'a>(pat: @ast::pat,\n-                          (this, vt): (@mut CheckLoanCtxt<'a>,\n-                                       visit::vt<@mut CheckLoanCtxt<'a>>))\n+                          (this, vt): (CheckLoanCtxt<'a>,\n+                                       visit::vt<CheckLoanCtxt<'a>>))\n {\n     this.check_for_conflicting_loans(pat.id);\n     this.check_move_out_from_id(pat.id, pat.span);\n     visit::visit_pat(pat, (this, vt));\n }\n \n fn check_loans_in_block<'a>(blk: &ast::blk,\n-                            (this, vt): (@mut CheckLoanCtxt<'a>,\n-                                         visit::vt<@mut CheckLoanCtxt<'a>>))\n+                            (this, vt): (CheckLoanCtxt<'a>,\n+                                         visit::vt<CheckLoanCtxt<'a>>))\n {\n     visit::visit_block(blk, (this, vt));\n     this.check_for_conflicting_loans(blk.id);"}]}