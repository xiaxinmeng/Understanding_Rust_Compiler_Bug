{"sha": "8a4085466021c534427c544b860eabcdf4ed85df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNDA4NTQ2NjAyMWM1MzQ0MjdjNTQ0Yjg2MGVhYmNkZjRlZDg1ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-23T05:27:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-23T05:27:11Z"}, "message": "auto merge of #17868 : nick29581/rust/valgrind, r=alexcrichton\n\nr? @alexcrichton", "tree": {"sha": "4296aab534b7af958b141182695c08dfe97a1ef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4296aab534b7af958b141182695c08dfe97a1ef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4085466021c534427c544b860eabcdf4ed85df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4085466021c534427c544b860eabcdf4ed85df", "html_url": "https://github.com/rust-lang/rust/commit/8a4085466021c534427c544b860eabcdf4ed85df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4085466021c534427c544b860eabcdf4ed85df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96991e9335e260d2684785ee97dc1af9cbed5aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/96991e9335e260d2684785ee97dc1af9cbed5aad", "html_url": "https://github.com/rust-lang/rust/commit/96991e9335e260d2684785ee97dc1af9cbed5aad"}, {"sha": "80ff1d1a107bc0b89e26c4179794573738bbb3fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ff1d1a107bc0b89e26c4179794573738bbb3fc", "html_url": "https://github.com/rust-lang/rust/commit/80ff1d1a107bc0b89e26c4179794573738bbb3fc"}], "stats": {"total": 146, "additions": 110, "deletions": 36}, "files": [{"sha": "05bfdb3e9fd8a528efc4ab7a019003d0279e5fe4", "filename": "configure", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -411,6 +411,7 @@ VAL_OPTIONS=\"\"\n \n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n+opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build documentation\"\n opt optimize 1 \"build optimized rust code\"\n opt optimize-cxx 1 \"build optimized C++ code\"\n@@ -906,6 +907,7 @@ do\n     done\n \n     make_dir $h/test/run-pass\n+    make_dir $h/test/run-pass-valgrind\n     make_dir $h/test/run-pass-fulldeps\n     make_dir $h/test/run-fail\n     make_dir $h/test/compile-fail\n@@ -1235,15 +1237,6 @@ then\n     putvar CFG_PANDOC\n fi\n \n-# Valgrind is only reliable on Linux. On Windows it doesn't work at all, and\n-# on the Mac the dynamic linker causes Valgrind to emit a huge stream of\n-# errors.\n-if [ $CFG_OSTYPE != unknown-linux-gnu ] && [ $CFG_OSTYPE != apple-darwin ]\n-then\n-    CFG_BAD_VALGRIND=1\n-    putvar CFG_BAD_VALGRIND\n-fi\n-\n putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n "}, {"sha": "e927f6ad468fa0cc8e3f9f31ad57071d59cab72d", "filename": "mk/main.mk", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -174,16 +174,20 @@ else\n   CFG_VALGRIND_COMPILE :=\n endif\n \n+\n+ifndef CFG_DISABLE_VALGRIND_RPASS\n+  $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n+  CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n+else\n+  CFG_VALGRIND_RPASS :=\n+endif\n+\n+\n ifdef CFG_ENABLE_VALGRIND\n   $(info cfg: enabling valgrind (CFG_ENABLE_VALGRIND))\n else\n   CFG_VALGRIND :=\n endif\n-ifdef CFG_BAD_VALGRIND\n-  $(info cfg: disabling valgrind due to its unreliability on this platform)\n-  CFG_VALGRIND :=\n-endif\n-\n \n ######################################################################\n # Target-and-rule \"utility variables\""}, {"sha": "9db9138d5e9efebde691820fd644f88d91144b16", "filename": "mk/platform.mk", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -58,6 +58,20 @@ ifdef CFG_VALGRIND\n   endif\n endif\n \n+# If we actually want to run Valgrind on a given platform, set this variable\n+define DEF_GOOD_VALGRIND\n+  ifeq ($(OSTYPE_$(1)),unknown-linux-gnu)\n+    GOOD_VALGRIND_$(1) = 1\n+  endif\n+  ifneq (,$(filter $(OSTYPE_$(1)),darwin freebsd))\n+    ifeq (HOST_$(1),x86_64)\n+      GOOD_VALGRIND_$(1) = 1\n+    endif\n+  endif\n+endef\n+$(foreach t,$(CFG_TARGET),$(eval $(call DEF_GOOD_VALGRIND,$(t))))\n+$(foreach t,$(CFG_TARGET),$(info cfg: good valgrind for $(t) is $(GOOD_VALGRIND_$(t))))\n+\n ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n   ifdef CFG_PERF\n     ifneq ($(CFG_PERF_WITH_LOGFD),)"}, {"sha": "3bbd871e5be77a1757a250b1ff8b10c121a805bc", "filename": "mk/tests.mk", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -184,12 +184,12 @@ check-notidy: cleantmptestlogs cleantestlibs all check-stage2\n # A slightly smaller set of tests for smoke testing.\n check-lite: cleantestlibs cleantmptestlogs \\\n \t$(foreach crate,$(TEST_TARGET_CRATES),check-stage2-$(crate)) \\\n-\tcheck-stage2-rpass \\\n+\tcheck-stage2-rpass check-stage2-rpass-valgrind \\\n \tcheck-stage2-rfail check-stage2-cfail check-stage2-rmake\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n # Only check the 'reference' tests: rpass/cfail/rfail/rmake.\n-check-ref: cleantestlibs cleantmptestlogs check-stage2-rpass \\\n+check-ref: cleantestlibs cleantmptestlogs check-stage2-rpass check-stage2-rpass-valgrind \\\n \tcheck-stage2-rfail check-stage2-cfail check-stage2-rmake\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n@@ -326,7 +326,8 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n+    check-stage$(1)-T-$(2)-H-$(3)-rpass-valgrind-exec \\\n+    check-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n         check-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n@@ -364,6 +365,7 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec \\\n+    check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-valgrind-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-bench-exec \\\n@@ -489,15 +491,11 @@ $(foreach host,$(CFG_HOST), \\\n # Rules for the compiletest tests (rpass, rfail, etc.)\n ######################################################################\n \n-RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n-RPASS_FULL_RC := $(wildcard $(S)src/test/run-pass-fulldeps/*.rc)\n+RPASS_VALGRIND_RS := $(wildcard $(S)src/test/run-pass-valgrind/*.rs)\n RPASS_FULL_RS := $(wildcard $(S)src/test/run-pass-fulldeps/*.rs)\n-CFAIL_FULL_RC := $(wildcard $(S)src/test/compile-fail-fulldeps/*.rc)\n CFAIL_FULL_RS := $(wildcard $(S)src/test/compile-fail-fulldeps/*.rs)\n-RFAIL_RC := $(wildcard $(S)src/test/run-fail/*.rc)\n RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n-CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n@@ -510,11 +508,12 @@ CODEGEN_CC := $(wildcard $(S)src/test/codegen/*.cc)\n # a performance monitor.\n PERF_RS := $(wildcard $(S)src/test/bench/*.rs)\n \n-RPASS_TESTS := $(RPASS_RC) $(RPASS_RS)\n-RPASS_FULL_TESTS := $(RPASS_FULL_RC) $(RPASS_FULL_RS)\n-CFAIL_FULL_TESTS := $(CFAIL_FULL_RC) $(CFAIL_FULL_RS)\n-RFAIL_TESTS := $(RFAIL_RC) $(RFAIL_RS)\n-CFAIL_TESTS := $(CFAIL_RC) $(CFAIL_RS)\n+RPASS_TESTS := $(RPASS_RS)\n+RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RS)\n+RPASS_FULL_TESTS := $(RPASS_FULL_RS)\n+CFAIL_FULL_TESTS := $(CFAIL_FULL_RS)\n+RFAIL_TESTS := $(RFAIL_RS)\n+CFAIL_TESTS := $(CFAIL_RS)\n BENCH_TESTS := $(BENCH_RS)\n PERF_TESTS := $(PERF_RS)\n PRETTY_TESTS := $(PRETTY_RS)\n@@ -527,6 +526,11 @@ CTEST_BUILD_BASE_rpass = run-pass\n CTEST_MODE_rpass = run-pass\n CTEST_RUNTOOL_rpass = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_rpass-valgrind = run-pass-valgrind\n+CTEST_BUILD_BASE_rpass-valgrind = run-pass-valgrind\n+CTEST_MODE_rpass-valgrind = run-pass-valgrind\n+CTEST_RUNTOOL_rpass-valgrind = $(CTEST_RUNTOOL)\n+\n CTEST_SRC_BASE_rpass-full = run-pass-fulldeps\n CTEST_BUILD_BASE_rpass-full = run-pass-fulldeps\n CTEST_MODE_rpass-full = run-pass\n@@ -622,7 +626,7 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n \n-# The tests can not be optimized while the rest of the compiler is optimized, so\n+# The tests cannot be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need\n # to be optimized\n CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n@@ -634,6 +638,7 @@ endif\n # slow things down.\n CTEST_RUSTC_FLAGS += -C codegen-units=1\n \n+\n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n@@ -654,7 +659,21 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n         $$(CTEST_TESTARGS)\n \n+ifdef CFG_VALGRIND_RPASS\n+ifdef GOOD_VALGRIND_$(2)\n+$(info cfg: valgrind-path set to $(CFG_VALGRIND_RPASS))\n+CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --valgrind-path \"$(CFG_VALGRIND_RPASS)\"\n+endif\n+endif\n+\n+ifndef CFG_DISABLE_VALGRIND_RPASS\n+ifdef GOOD_VALGRIND_$(2)\n+CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --force-valgrind\n+endif\n+endif\n+\n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n+CTEST_DEPS_rpass-valgrind_$(1)-T-$(2)-H-$(3) = $$(RPASS_VALGRIND_TESTS)\n CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_cfail-full_$(1)-T-$(2)-H-$(3) = $$(CFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n@@ -726,16 +745,17 @@ endif\n \n endef\n \n-CTEST_NAMES = rpass rpass-full cfail-full rfail cfail bench perf debuginfo-gdb debuginfo-lldb codegen\n+CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail bench perf debuginfo-gdb debuginfo-lldb codegen\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(foreach name,$(CTEST_NAMES), \\\n    $(eval $(call DEF_RUN_COMPILETEST,$(stage),$(target),$(host),$(name))))))))))\n \n-PRETTY_NAMES = pretty-rpass pretty-rpass-full pretty-rfail pretty-bench pretty-pretty\n+PRETTY_NAMES = pretty-rpass pretty-rpass-valgrind pretty-rpass-full pretty-rfail pretty-bench pretty-pretty\n PRETTY_DEPS_pretty-rpass = $(RPASS_TESTS)\n+PRETTY_DEPS_pretty-rpass-valgrind = $(RPASS_VALGRIND_TESTS)\n PRETTY_DEPS_pretty-rpass-full = $(RPASS_FULL_TESTS)\n PRETTY_DEPS_pretty-rfail = $(RFAIL_TESTS)\n PRETTY_DEPS_pretty-bench = $(BENCH_TESTS)\n@@ -748,6 +768,7 @@ PRETTY_DEPS$(1)_H_$(3)_pretty-rfail =\n PRETTY_DEPS$(1)_H_$(3)_pretty-bench =\n PRETTY_DEPS$(1)_H_$(3)_pretty-pretty =\n PRETTY_DIRNAME_pretty-rpass = run-pass\n+PRETTY_DIRNAME_pretty-rpass-valgrind = run-pass-valgrind\n PRETTY_DIRNAME_pretty-rpass-full = run-pass-fulldeps\n PRETTY_DIRNAME_pretty-rfail = run-fail\n PRETTY_DIRNAME_pretty-bench = bench\n@@ -895,6 +916,7 @@ TEST_GROUPS = \\\n \t$(foreach crate,$(TEST_CRATES),$(crate)) \\\n \t$(foreach crate,$(TEST_DOC_CRATES),doc-crate-$(crate)) \\\n \trpass \\\n+    rpass-valgrind \\\n \trpass-full \\\n \tcfail-full \\\n \trfail \\\n@@ -909,6 +931,7 @@ TEST_GROUPS = \\\n \t$(foreach docname,$(DOCS),doc-$(docname)) \\\n \tpretty \\\n \tpretty-rpass \\\n+    pretty-rpass-valgrind \\\n \tpretty-rpass-full \\\n \tpretty-rfail \\\n \tpretty-bench \\"}, {"sha": "2c917f7aefeb91a1940077bc7d44ef023b61831c", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -17,6 +17,7 @@ pub enum Mode {\n     CompileFail,\n     RunFail,\n     RunPass,\n+    RunPassValgrind,\n     Pretty,\n     DebugInfoGdb,\n     DebugInfoLldb,\n@@ -29,6 +30,7 @@ impl FromStr for Mode {\n           \"compile-fail\" => Some(CompileFail),\n           \"run-fail\" => Some(RunFail),\n           \"run-pass\" => Some(RunPass),\n+          \"run-pass-valgrind\" => Some(RunPassValgrind),\n           \"pretty\" => Some(Pretty),\n           \"debuginfo-lldb\" => Some(DebugInfoLldb),\n           \"debuginfo-gdb\" => Some(DebugInfoGdb),\n@@ -44,6 +46,7 @@ impl fmt::Show for Mode {\n             CompileFail => \"compile-fail\",\n             RunFail => \"run-fail\",\n             RunPass => \"run-pass\",\n+            RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n@@ -70,6 +73,13 @@ pub struct Config {\n     // The llvm binaries path\n     pub llvm_bin_path: Option<Path>,\n \n+    // The valgrind path\n+    pub valgrind_path: Option<String>,\n+\n+    // Whether to fail if we can't run run-pass-valgrind tests under valgrind\n+    // (or, alternatively, to silently run them like regular run-pass tests).\n+    pub force_valgrind: bool,\n+\n     // The directory containing the tests to run\n     pub src_base: Path,\n "}, {"sha": "7af25de1f6f97cd36bf429d72f6538d01be8189c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -39,6 +39,11 @@ pub mod errors;\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);\n+\n+    if config.valgrind_path.is_none() && config.force_valgrind {\n+        fail!(\"Can't find Valgrind to run Valgrind tests\");\n+    }\n+\n     log_config(&config);\n     run_tests(&config);\n }\n@@ -50,13 +55,15 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n           optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n+          optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n+          optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n           optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n           reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n           reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n           reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n           reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n           reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n-                 \"(compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n+                 \"(compile-fail|run-fail|run-pass|run-pass-valgrind|pretty|debug-info)\"),\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n@@ -125,6 +132,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| Path::new(s)),\n+        valgrind_path: matches.opt_str(\"valgrind-path\"),\n+        force_valgrind: matches.opt_present(\"force-valgrind\"),\n         llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| Path::new(s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n@@ -162,7 +171,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n             !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         test_shard: test::opt_shard(matches.opt_str(\"test-shard\")),\n-        verbose: matches.opt_present(\"verbose\")\n+        verbose: matches.opt_present(\"verbose\"),\n     }\n }\n "}, {"sha": "34129dedbd8271c3a1c6d13294ef2bcd00f4dfe1", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use common::Config;\n-use common::{CompileFail, Pretty, RunFail, RunPass, DebugInfoGdb};\n+use common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind, DebugInfoGdb};\n use common::{Codegen, DebugInfoLldb};\n use errors;\n use header::TestProps;\n@@ -35,7 +35,6 @@ use std::time::Duration;\n use test::MetricMap;\n \n pub fn run(config: Config, testfile: String) {\n-\n     match config.target.as_slice() {\n \n         \"arm-linux-androideabi\" => {\n@@ -64,6 +63,7 @@ pub fn run_metrics(config: Config, testfile: String, mm: &mut MetricMap) {\n       CompileFail => run_cfail_test(&config, &props, &testfile),\n       RunFail => run_rfail_test(&config, &props, &testfile),\n       RunPass => run_rpass_test(&config, &props, &testfile),\n+      RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n       Pretty => run_pretty_test(&config, &props, &testfile),\n       DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n       DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n@@ -164,6 +164,27 @@ fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n     }\n }\n \n+fn run_valgrind_test(config: &Config, props: &TestProps, testfile: &Path) {\n+    if config.valgrind_path.is_none() {\n+        assert!(!config.force_valgrind);\n+        return run_rpass_test(config, props, testfile);\n+    }\n+\n+    let mut proc_res = compile_test(config, props, testfile);\n+\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n+    }\n+\n+    let mut new_config = config.clone();\n+    new_config.runtool = new_config.valgrind_path.clone();\n+    proc_res = exec_compiled_test(&new_config, props, testfile);\n+\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"test run failed!\", &proc_res);\n+    }\n+}\n+\n fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if props.pp_exact.is_some() {\n         logv(config, \"testing for exact pretty-printing\".to_string());"}, {"sha": "aa625de93981b4630e5df144c7ecd50da74fa3b1", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "patch": "@@ -804,7 +804,7 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n /// whitespace removed, and are only cut at whitespace boundaries.\n ///\n /// Note: Function was moved here from `std::str` because this module is the only place that\n-/// uses it, and because it was to specific for a general string function.\n+/// uses it, and because it was too specific for a general string function.\n ///\n /// #Failure:\n ///"}, {"sha": "5d7dbbe5a292ac9606b7a0cb581afe5c9bc467ae", "filename": "src/test/run-pass-valgrind/cleanup-auto-borrow-obj.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "previous_filename": "src/test/run-pass/cleanup-auto-borrow-obj.rs"}, {"sha": "6e2ae117ce7ae97d44728a4c6aa60a9cf0c49213", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "previous_filename": "src/test/run-pass/dst-dtor-1.rs"}, {"sha": "deaf49228bc842810c92f671134d5dcb7843f530", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085466021c534427c544b860eabcdf4ed85df/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=8a4085466021c534427c544b860eabcdf4ed85df", "previous_filename": "src/test/run-pass/dst-dtor-2.rs"}]}