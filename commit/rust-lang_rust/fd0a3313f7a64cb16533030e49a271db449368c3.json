{"sha": "fd0a3313f7a64cb16533030e49a271db449368c3", "node_id": "C_kwDOAAsO6NoAKGZkMGEzMzEzZjdhNjRjYjE2NTMzMDMwZTQ5YTI3MWRiNDQ5MzY4YzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-12T07:15:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-12T07:15:19Z"}, "message": "Auto merge of #112261 - jieyouxu:c-like-ptr-arithmetics-diagnostics, r=WaffleLapkin\n\nAdd help for trying to do C-like pointer arithmetics\n\nThis PR adds help messages for these cases:\n\n```rust\nfn main() {\n    let ptr1: *const u32 = std::ptr::null();\n    let ptr2: *const u32 = std::ptr::null();\n    let a = ptr1 + 5;\n    let b = ptr1 - 5;\n    let c = ptr2 - ptr1;\n    let d = ptr1[5];\n}\n```\n\n### Current Output\n\n```\nerror[E0369]: cannot add `{integer}` to `*const u32`\n --> tests/ui/typeck/issue-112252-ptr-arithmetics-help.rs:4:18\n  |\n4 |     let a = ptr1 + 5; //~ ERROR cannot add\n  |             ---- ^ - {integer}\n  |             |\n  |             *const u32\n\nerror[E0369]: cannot subtract `{integer}` from `*const u32`\n --> tests/ui/typeck/issue-112252-ptr-arithmetics-help.rs:5:18\n  |\n5 |     let b = ptr1 - 5; //~ ERROR cannot subtract\n  |             ---- ^ - {integer}\n  |             |\n  |             *const u32\n\nerror[E0369]: cannot subtract `*const u32` from `*const u32`\n --> tests/ui/typeck/issue-112252-ptr-arithmetics-help.rs:6:18\n  |\n6 |     let c = ptr2 - ptr1; //~ ERROR cannot subtract\n  |             ---- ^ ---- *const u32\n  |             |\n  |             *const u32\n\nerror[E0608]: cannot index into a value of type `*const u32`\n --> tests/ui/typeck/issue-112252-ptr-arithmetics-help.rs:7:13\n  |\n7 |     let d = ptr1[5]; //~ ERROR cannot index\n  |             ^^^^^^^\n\nerror: aborting due to 4 previous errors\n```\n\n### Output After This PR\n\n```\nerror[E0369]: cannot add `{integer}` to `*const u32`\n  --> $DIR/issue-112252-ptr-arithmetics-help.rs:6:20\n   |\nLL |     let _a = _ptr1 + 5;\n   |              ------^--\n   |              |       |\n   |              |       {integer}\n   |              *const u32\n   |              help: consider using `wrapping_add` or `add` for pointer + {integer}: `_ptr1.wrapping_add(5)`\n\nerror[E0369]: cannot subtract `{integer}` from `*const u32`\n  --> $DIR/issue-112252-ptr-arithmetics-help.rs:7:20\n   |\nLL |     let _b = _ptr1 - 5;\n   |              ------^--\n   |              |       |\n   |              |       {integer}\n   |              *const u32\n   |              help: consider using `offset` for pointer - {integer}: `unsafe { _ptr1.offset(-5) }`\n\nerror[E0369]: cannot subtract `*const u32` from `*const u32`\n  --> $DIR/issue-112252-ptr-arithmetics-help.rs:8:20\n   |\nLL |     let _c = _ptr2 - _ptr1;\n   |              ------^------\n   |              |       |\n   |              |       *const u32\n   |              *const u32\n   |              help: consider using `offset_from` for pointer - pointer if the pointers point to the same allocation: `_ptr2.offset_from(_ptr1)`\n\nerror[E0608]: cannot index into a value of type `*const u32`\n  --> $DIR/issue-112252-ptr-arithmetics-help.rs:9:14\n   |\nLL |     let _d = _ptr1[5];\n   |              ^^^^^^^^\n   |\nhelp: consider using `wrapping_add` or `add` for indexing into raw pointer\n   |\nLL |     let _d = _ptr1.wrapping_add(5);\n   |              ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n```\n\nCloses #112252.", "tree": {"sha": "0bef4734e29477f755f2e0e2c266d2736d561bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bef4734e29477f755f2e0e2c266d2736d561bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0a3313f7a64cb16533030e49a271db449368c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0a3313f7a64cb16533030e49a271db449368c3", "html_url": "https://github.com/rust-lang/rust/commit/fd0a3313f7a64cb16533030e49a271db449368c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0a3313f7a64cb16533030e49a271db449368c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77dba225c1048e5585b2cdefb7f8588bd2d2741b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77dba225c1048e5585b2cdefb7f8588bd2d2741b", "html_url": "https://github.com/rust-lang/rust/commit/77dba225c1048e5585b2cdefb7f8588bd2d2741b"}, {"sha": "63d643da841bedd6b855f617edecc0b13c0cd71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d643da841bedd6b855f617edecc0b13c0cd71e", "html_url": "https://github.com/rust-lang/rust/commit/63d643da841bedd6b855f617edecc0b13c0cd71e"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "3f6847be91b65ae5337c1e3f5503dd4d4e83754b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd0a3313f7a64cb16533030e49a271db449368c3/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0a3313f7a64cb16533030e49a271db449368c3/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fd0a3313f7a64cb16533030e49a271db449368c3", "patch": "@@ -2871,6 +2871,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             );\n                         }\n                     }\n+\n+                    if base_t.is_unsafe_ptr() && idx_t.is_integral() {\n+                        err.multipart_suggestion(\n+                            \"consider using `wrapping_add` or `add` for indexing into raw pointer\",\n+                            vec![\n+                                (base.span.between(idx.span), \".wrapping_add(\".to_owned()),\n+                                (\n+                                    idx.span.shrink_to_hi().until(expr.span.shrink_to_hi()),\n+                                    \")\".to_owned(),\n+                                ),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+\n                     let reported = err.emit();\n                     self.tcx.ty_error(reported)\n                 }"}, {"sha": "4f3d1d456798cc4ead1293ddfef23cd044f60152", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd0a3313f7a64cb16533030e49a271db449368c3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0a3313f7a64cb16533030e49a271db449368c3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=fd0a3313f7a64cb16533030e49a271db449368c3", "patch": "@@ -521,6 +521,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n+\n+                // Suggest using `add`, `offset` or `offset_from` for pointer - {integer},\n+                // pointer + {integer} or pointer - pointer.\n+                if op.span.can_be_used_for_suggestions() {\n+                    match op.node {\n+                        hir::BinOpKind::Add if lhs_ty.is_unsafe_ptr() && rhs_ty.is_integral() => {\n+                            err.multipart_suggestion(\n+                                \"consider using `wrapping_add` or `add` for pointer + {integer}\",\n+                                vec![\n+                                    (\n+                                        lhs_expr.span.between(rhs_expr.span),\n+                                        \".wrapping_add(\".to_owned(),\n+                                    ),\n+                                    (rhs_expr.span.shrink_to_hi(), \")\".to_owned()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        hir::BinOpKind::Sub => {\n+                            if lhs_ty.is_unsafe_ptr() && rhs_ty.is_integral() {\n+                                err.multipart_suggestion(\n+                                    \"consider using `wrapping_sub` or `sub` for pointer - {integer}\",\n+                                    vec![\n+                                        (lhs_expr.span.between(rhs_expr.span), \".wrapping_sub(\".to_owned()),\n+                                        (rhs_expr.span.shrink_to_hi(), \")\".to_owned()),\n+                                    ],\n+                                    Applicability::MaybeIncorrect\n+                                );\n+                            }\n+\n+                            if lhs_ty.is_unsafe_ptr() && rhs_ty.is_unsafe_ptr() {\n+                                err.multipart_suggestion(\n+                                    \"consider using `offset_from` for pointer - pointer if the pointers point to the same allocation\",\n+                                    vec![\n+                                        (lhs_expr.span.shrink_to_lo(), \"unsafe { \".to_owned()),\n+                                        (lhs_expr.span.between(rhs_expr.span), \".offset_from(\".to_owned()),\n+                                        (rhs_expr.span.shrink_to_hi(), \") }\".to_owned()),\n+                                    ],\n+                                    Applicability::MaybeIncorrect\n+                                );\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+\n                 let reported = err.emit();\n                 self.tcx.ty_error(reported)\n             }"}, {"sha": "bdb884f54312c319073fbec2e0c9e3375e39d059", "filename": "tests/ui/typeck/issue-112252-ptr-arithmetics-help.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.fixed?ref=fd0a3313f7a64cb16533030e49a271db449368c3", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _ptr1: *const u32 = std::ptr::null();\n+    let _ptr2: *const u32 = std::ptr::null();\n+    let _a = _ptr1.wrapping_add(5); //~ ERROR cannot add\n+    let _b = _ptr1.wrapping_sub(5); //~ ERROR cannot subtract\n+    let _c = unsafe { _ptr2.offset_from(_ptr1) }; //~ ERROR cannot subtract\n+    let _d = _ptr1.wrapping_add(5); //~ ERROR cannot index\n+}"}, {"sha": "cf68850cc4dee7d8aeb55815b1c08e95767486af", "filename": "tests/ui/typeck/issue-112252-ptr-arithmetics-help.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.rs?ref=fd0a3313f7a64cb16533030e49a271db449368c3", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _ptr1: *const u32 = std::ptr::null();\n+    let _ptr2: *const u32 = std::ptr::null();\n+    let _a = _ptr1 + 5; //~ ERROR cannot add\n+    let _b = _ptr1 - 5; //~ ERROR cannot subtract\n+    let _c = _ptr2 - _ptr1; //~ ERROR cannot subtract\n+    let _d = _ptr1[5]; //~ ERROR cannot index\n+}"}, {"sha": "c55930da225bafd0ac5c692cb5c1c47154547e55", "filename": "tests/ui/typeck/issue-112252-ptr-arithmetics-help.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd0a3313f7a64cb16533030e49a271db449368c3/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-112252-ptr-arithmetics-help.stderr?ref=fd0a3313f7a64cb16533030e49a271db449368c3", "patch": "@@ -0,0 +1,54 @@\n+error[E0369]: cannot add `{integer}` to `*const u32`\n+  --> $DIR/issue-112252-ptr-arithmetics-help.rs:6:20\n+   |\n+LL |     let _a = _ptr1 + 5;\n+   |              ----- ^ - {integer}\n+   |              |\n+   |              *const u32\n+   |\n+help: consider using `wrapping_add` or `add` for pointer + {integer}\n+   |\n+LL |     let _a = _ptr1.wrapping_add(5);\n+   |                   ~~~~~~~~~~~~~~ +\n+\n+error[E0369]: cannot subtract `{integer}` from `*const u32`\n+  --> $DIR/issue-112252-ptr-arithmetics-help.rs:7:20\n+   |\n+LL |     let _b = _ptr1 - 5;\n+   |              ----- ^ - {integer}\n+   |              |\n+   |              *const u32\n+   |\n+help: consider using `wrapping_sub` or `sub` for pointer - {integer}\n+   |\n+LL |     let _b = _ptr1.wrapping_sub(5);\n+   |                   ~~~~~~~~~~~~~~ +\n+\n+error[E0369]: cannot subtract `*const u32` from `*const u32`\n+  --> $DIR/issue-112252-ptr-arithmetics-help.rs:8:20\n+   |\n+LL |     let _c = _ptr2 - _ptr1;\n+   |              ----- ^ ----- *const u32\n+   |              |\n+   |              *const u32\n+   |\n+help: consider using `offset_from` for pointer - pointer if the pointers point to the same allocation\n+   |\n+LL |     let _c = unsafe { _ptr2.offset_from(_ptr1) };\n+   |              ++++++++      ~~~~~~~~~~~~~     +++\n+\n+error[E0608]: cannot index into a value of type `*const u32`\n+  --> $DIR/issue-112252-ptr-arithmetics-help.rs:9:14\n+   |\n+LL |     let _d = _ptr1[5];\n+   |              ^^^^^^^^\n+   |\n+help: consider using `wrapping_add` or `add` for indexing into raw pointer\n+   |\n+LL |     let _d = _ptr1.wrapping_add(5);\n+   |                   ~~~~~~~~~~~~~~ ~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0369, E0608.\n+For more information about an error, try `rustc --explain E0369`."}]}