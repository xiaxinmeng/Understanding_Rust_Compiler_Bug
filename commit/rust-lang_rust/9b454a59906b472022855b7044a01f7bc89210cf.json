{"sha": "9b454a59906b472022855b7044a01f7bc89210cf", "node_id": "C_kwDOAAsO6NoAKDliNDU0YTU5OTA2YjQ3MjAyMjg1NWI3MDQ0YTAxZjdiYzg5MjEwY2Y", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-01-23T17:07:20Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-01-23T17:07:20Z"}, "message": "Merge remote-tracking branch 'upstream/master' into subtree-sync-2022-01-23", "tree": {"sha": "b5a3e2148509cd74f9882d01937e2a3e14cc934b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a3e2148509cd74f9882d01937e2a3e14cc934b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b454a59906b472022855b7044a01f7bc89210cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b454a59906b472022855b7044a01f7bc89210cf", "html_url": "https://github.com/rust-lang/rust/commit/9b454a59906b472022855b7044a01f7bc89210cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b454a59906b472022855b7044a01f7bc89210cf/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7913f130d3ee0682916586c7b43664b651435594", "url": "https://api.github.com/repos/rust-lang/rust/commits/7913f130d3ee0682916586c7b43664b651435594", "html_url": "https://github.com/rust-lang/rust/commit/7913f130d3ee0682916586c7b43664b651435594"}, {"sha": "5056f4cfb311a084420f1828cd58af94d143f5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5056f4cfb311a084420f1828cd58af94d143f5e0", "html_url": "https://github.com/rust-lang/rust/commit/5056f4cfb311a084420f1828cd58af94d143f5e0"}], "stats": {"total": 460, "additions": 334, "deletions": 126}, "files": [{"sha": "6f5b09fc86adf54bb5d3b951d08c19266bc70dae", "filename": "src/bin/main.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -74,14 +74,10 @@ pub enum OperationError {\n     /// An io error during reading or writing.\n     #[error(\"{0}\")]\n     IoError(IoError),\n-    /// Attempt to use --check with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"The `--check` option is not supported with standard input.\")]\n-    CheckWithStdin,\n-    /// Attempt to use --emit=json with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"Using `--emit` other than stdout is not supported with standard input.\")]\n-    EmitWithStdin,\n+    /// Attempt to use --emit with a mode which is not currently\n+    /// supported with stdandard input.\n+    #[error(\"Emit mode {0} not supported with standard output.\")]\n+    StdinBadEmit(EmitMode),\n }\n \n impl From<IoError> for OperationError {\n@@ -255,15 +251,20 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32> {\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n     if options.check {\n-        return Err(OperationError::CheckWithStdin.into());\n-    }\n-    if let Some(emit_mode) = options.emit_mode {\n-        if emit_mode != EmitMode::Stdout {\n-            return Err(OperationError::EmitWithStdin.into());\n+        config.set().emit_mode(EmitMode::Diff);\n+    } else {\n+        match options.emit_mode {\n+            // Emit modes which work with standard input\n+            // None means default, which is Stdout.\n+            None | Some(EmitMode::Stdout) | Some(EmitMode::Checkstyle) | Some(EmitMode::Json) => {}\n+            Some(emit_mode) => {\n+                return Err(OperationError::StdinBadEmit(emit_mode).into());\n+            }\n         }\n+        config\n+            .set()\n+            .emit_mode(options.emit_mode.unwrap_or(EmitMode::Stdout));\n     }\n-    // emit mode is always Stdout for Stdin.\n-    config.set().emit_mode(EmitMode::Stdout);\n     config.set().verbose(Verbosity::Quiet);\n \n     // parse file_lines"}, {"sha": "8cb7b4585ecb27c2d54f7149034ba5c36037a358", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -387,8 +387,7 @@ fn get_targets_root_only(\n                         .unwrap_or_default()\n                         == current_dir_manifest\n             })\n-            .map(|p| p.targets)\n-            .flatten()\n+            .flat_map(|p| p.targets)\n             .collect(),\n     };\n "}, {"sha": "e4e51a3f3b40927e05b2021c4e259a9f66a30d6a", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -39,7 +39,7 @@ impl fmt::Display for FileName {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             FileName::Real(p) => write!(f, \"{}\", p.to_str().unwrap()),\n-            FileName::Stdin => write!(f, \"stdin\"),\n+            FileName::Stdin => write!(f, \"<stdin>\"),\n         }\n     }\n }"}, {"sha": "545b259979d911d04b8200a3459fbe2b5cfce07c", "filename": "src/emitter/checkstyle.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -2,7 +2,6 @@ use self::xml::XmlEscaped;\n use super::*;\n use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use std::io::{self, Write};\n-use std::path::Path;\n \n mod xml;\n \n@@ -30,7 +29,6 @@ impl Emitter for CheckstyleEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         output_checkstyle_file(output, filename, diff)?;\n         Ok(EmitterResult::default())\n@@ -39,13 +37,13 @@ impl Emitter for CheckstyleEmitter {\n \n pub(crate) fn output_checkstyle_file<T>(\n     mut writer: T,\n-    filename: &Path,\n+    filename: &FileName,\n     diff: Vec<Mismatch>,\n ) -> Result<(), io::Error>\n where\n     T: Write,\n {\n-    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n+    write!(writer, r#\"<file name=\"{}\">\"#, filename)?;\n     for mismatch in diff {\n         let begin_line = mismatch.line_number;\n         let mut current_line;\n@@ -77,7 +75,11 @@ mod tests {\n     fn emits_empty_record_on_file_with_no_mismatches() {\n         let file_name = \"src/well_formatted.rs\";\n         let mut writer = Vec::new();\n-        let _ = output_checkstyle_file(&mut writer, &PathBuf::from(file_name), vec![]);\n+        let _ = output_checkstyle_file(\n+            &mut writer,\n+            &FileName::Real(PathBuf::from(file_name)),\n+            vec![],\n+        );\n         assert_eq!(\n             &writer[..],\n             format!(r#\"<file name=\"{}\"></file>\"#, file_name).as_bytes()"}, {"sha": "5e1f1344656052dc2b5c26306bed3d8e414c77f1", "filename": "src/emitter/diff.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -28,7 +28,7 @@ impl Emitter for DiffEmitter {\n \n         if has_diff {\n             if self.config.print_misformatted_file_names() {\n-                writeln!(output, \"{}\", ensure_real_path(filename).display())?;\n+                writeln!(output, \"{}\", filename)?;\n             } else {\n                 print_diff(\n                     mismatch,\n@@ -40,8 +40,7 @@ impl Emitter for DiffEmitter {\n             // This occurs when the only difference between the original and formatted values\n             // is the newline style. This happens because The make_diff function compares the\n             // original and formatted values line by line, independent of line endings.\n-            let file_path = ensure_real_path(filename);\n-            writeln!(output, \"Incorrect newline style in {}\", file_path.display())?;\n+            writeln!(output, \"Incorrect newline style in {}\", filename)?;\n             return Ok(EmitterResult { has_diff: true });\n         }\n "}, {"sha": "c7f68d4675a67beb10d5af09bdd779dc7dbecb66", "filename": "src/emitter/json.rs", "status": "modified", "additions": 92, "deletions": 95, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fjson.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -3,14 +3,13 @@ use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use serde::Serialize;\n use serde_json::to_string as to_json_string;\n use std::io::{self, Write};\n-use std::path::Path;\n \n #[derive(Debug, Default)]\n pub(crate) struct JsonEmitter {\n-    num_files: u32,\n+    mismatched_files: Vec<MismatchedFile>,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedBlock {\n     original_begin_line: u32,\n     original_end_line: u32,\n@@ -20,98 +19,88 @@ struct MismatchedBlock {\n     expected: String,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedFile {\n     name: String,\n     mismatches: Vec<MismatchedBlock>,\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_header(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"[\")?;\n-        Ok(())\n-    }\n-\n     fn emit_footer(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"]\")?;\n-        Ok(())\n+        writeln!(output, \"{}\", &to_json_string(&self.mismatched_files)?)\n     }\n \n     fn emit_formatted_file(\n         &mut self,\n-        output: &mut dyn Write,\n+        _output: &mut dyn Write,\n         FormattedFile {\n             filename,\n             original_text,\n             formatted_text,\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !diff.is_empty();\n \n         if has_diff {\n-            output_json_file(output, filename, diff, self.num_files)?;\n-            self.num_files += 1;\n+            self.add_misformatted_file(filename, diff)?;\n         }\n \n         Ok(EmitterResult { has_diff })\n     }\n }\n \n-fn output_json_file<T>(\n-    mut writer: T,\n-    filename: &Path,\n-    diff: Vec<Mismatch>,\n-    num_emitted_files: u32,\n-) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n-    let mut mismatches = vec![];\n-    for mismatch in diff {\n-        let original_begin_line = mismatch.line_number_orig;\n-        let expected_begin_line = mismatch.line_number;\n-        let mut original_end_line = original_begin_line;\n-        let mut expected_end_line = expected_begin_line;\n-        let mut original_line_counter = 0;\n-        let mut expected_line_counter = 0;\n-        let mut original_lines = vec![];\n-        let mut expected_lines = vec![];\n+impl JsonEmitter {\n+    fn add_misformatted_file(\n+        &mut self,\n+        filename: &FileName,\n+        diff: Vec<Mismatch>,\n+    ) -> Result<(), io::Error> {\n+        let mut mismatches = vec![];\n+        for mismatch in diff {\n+            let original_begin_line = mismatch.line_number_orig;\n+            let expected_begin_line = mismatch.line_number;\n+            let mut original_end_line = original_begin_line;\n+            let mut expected_end_line = expected_begin_line;\n+            let mut original_line_counter = 0;\n+            let mut expected_line_counter = 0;\n+            let mut original = String::new();\n+            let mut expected = String::new();\n \n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Expected(msg) => {\n-                    expected_end_line = expected_begin_line + expected_line_counter;\n-                    expected_line_counter += 1;\n-                    expected_lines.push(msg)\n-                }\n-                DiffLine::Resulting(msg) => {\n-                    original_end_line = original_begin_line + original_line_counter;\n-                    original_line_counter += 1;\n-                    original_lines.push(msg)\n+            for line in mismatch.lines {\n+                match line {\n+                    DiffLine::Expected(msg) => {\n+                        expected_end_line = expected_begin_line + expected_line_counter;\n+                        expected_line_counter += 1;\n+                        expected.push_str(&msg);\n+                        expected.push('\\n');\n+                    }\n+                    DiffLine::Resulting(msg) => {\n+                        original_end_line = original_begin_line + original_line_counter;\n+                        original_line_counter += 1;\n+                        original.push_str(&msg);\n+                        original.push('\\n');\n+                    }\n+                    DiffLine::Context(_) => continue,\n                 }\n-                DiffLine::Context(_) => continue,\n             }\n-        }\n \n-        mismatches.push(MismatchedBlock {\n-            original_begin_line,\n-            original_end_line,\n-            expected_begin_line,\n-            expected_end_line,\n-            original: original_lines.join(\"\\n\"),\n-            expected: expected_lines.join(\"\\n\"),\n+            mismatches.push(MismatchedBlock {\n+                original_begin_line,\n+                original_end_line,\n+                expected_begin_line,\n+                expected_end_line,\n+                original,\n+                expected,\n+            });\n+        }\n+        self.mismatched_files.push(MismatchedFile {\n+            name: format!(\"{}\", filename),\n+            mismatches,\n         });\n+        Ok(())\n     }\n-    let json = to_json_string(&MismatchedFile {\n-        name: String::from(filename.to_str().unwrap()),\n-        mismatches,\n-    })?;\n-    let prefix = if num_emitted_files > 0 { \",\" } else { \"\" };\n-    write!(writer, \"{}{}\", prefix, &json)?;\n-    Ok(())\n }\n \n #[cfg(test)]\n@@ -122,6 +111,9 @@ mod tests {\n \n     #[test]\n     fn expected_line_range_correct_when_single_line_split() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"foo/bar.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -130,8 +122,8 @@ mod tests {\n                 original_end_line: 79,\n                 expected_begin_line: 79,\n                 expected_end_line: 82,\n-                original: String::from(\"fn Foo<T>() where T: Bar {\"),\n-                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"),\n+                original: String::from(\"fn Foo<T>() where T: Bar {\\n\"),\n+                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"),\n             }],\n         };\n         let mismatch = Mismatch {\n@@ -146,14 +138,19 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n     fn context_lines_ignored() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"src/lib.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -163,10 +160,10 @@ mod tests {\n                 expected_begin_line: 5,\n                 expected_end_line: 5,\n                 original: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\\n\",\n                 ),\n                 expected: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\\n\",\n                 ),\n             }],\n         };\n@@ -186,10 +183,12 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n@@ -209,7 +208,7 @@ mod tests {\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n         assert_eq!(result.has_diff, false);\n-        assert_eq!(&writer[..], \"[]\".as_bytes());\n+        assert_eq!(&writer[..], \"[]\\n\".as_bytes());\n     }\n \n     #[test]\n@@ -255,34 +254,34 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_json = to_json_string(&MismatchedFile {\n+        let exp_json = to_json_string(&vec![MismatchedFile {\n             name: String::from(file_name),\n             mismatches: vec![\n                 MismatchedBlock {\n                     original_begin_line: 2,\n                     original_end_line: 2,\n                     expected_begin_line: 2,\n                     expected_end_line: 2,\n-                    original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                    original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n                 },\n                 MismatchedBlock {\n                     original_begin_line: 7,\n                     original_end_line: 10,\n                     expected_begin_line: 7,\n                     expected_end_line: 10,\n                     original: String::from(\n-                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\",\n+                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\\n\",\n                     ),\n                     expected: String::from(\n-                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\",\n+                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\\n\",\n                     ),\n                 },\n             ],\n-        })\n+        }])\n         .unwrap();\n         assert_eq!(result.has_diff, true);\n-        assert_eq!(&writer[..], format!(\"[{}]\", exp_json).as_bytes());\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n \n     #[test]\n@@ -317,33 +316,31 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_bin_json = to_json_string(&MismatchedFile {\n+        let exp_bin = MismatchedFile {\n             name: String::from(bin_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n             }],\n-        })\n-        .unwrap();\n-        let exp_lib_json = to_json_string(&MismatchedFile {\n+        };\n+\n+        let exp_lib = MismatchedFile {\n             name: String::from(lib_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Greetings!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Greetings!\\\");\"),\n+                original: String::from(\"println!(\\\"Greetings!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Greetings!\\\");\\n\"),\n             }],\n-        })\n-        .unwrap();\n-        assert_eq!(\n-            &writer[..],\n-            format!(\"[{},{}]\", exp_bin_json, exp_lib_json).as_bytes()\n-        );\n+        };\n+\n+        let exp_json = to_json_string(&vec![exp_bin, exp_lib]).unwrap();\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n }"}, {"sha": "90406cdb95e2b1474440593fce77698df58b08c3", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -20,6 +20,7 @@ impl<'a> FormatReportFormatterBuilder<'a> {\n     }\n \n     /// Enables colors and formatting in the output.\n+    #[must_use]\n     pub fn enable_colors(self, enable_colors: bool) -> Self {\n         Self {\n             enable_colors,"}, {"sha": "fdbe3374615cd3fa96dfb373ee844a3837ee29f6", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -152,7 +152,7 @@ pub(crate) fn rewrite_macro(\n ) -> Option<String> {\n     let should_skip = context\n         .skip_context\n-        .skip_macro(&context.snippet(mac.path.span).to_owned());\n+        .skip_macro(context.snippet(mac.path.span));\n     if should_skip {\n         None\n     } else {"}, {"sha": "70b937b02836fdc6106e04460d853c8b6b8350a0", "filename": "src/modules.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -458,6 +458,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.directory.path.push(path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n+            let id = id.as_str();\n             // We have to push on the current module name in the case of relative\n             // paths in order to ensure that any additional module paths from inline\n             // `mod x { ... }` come after the relative extension.\n@@ -468,9 +469,15 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n                     self.directory.path.push(ident.as_str());\n+\n+                    // In the case where there is an x.rs and an ./x directory we want\n+                    // to prevent adding x twice. For example, ./x/x\n+                    if self.directory.path.exists() && !self.directory.path.join(id).exists() {\n+                        return;\n+                    }\n                 }\n             }\n-            self.directory.path.push(id.as_str());\n+            self.directory.path.push(id);\n         }\n     }\n "}, {"sha": "c399512ba7e39cd15820be57597babfcc4e58b70", "filename": "src/test/mod.rs", "status": "modified", "additions": 121, "deletions": 2, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -307,6 +307,52 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n     }\n }\n \n+// Helper function for comparing the results of rustfmt\n+// to a known output generated by one of the write modes.\n+fn assert_stdin_output(\n+    source: &Path,\n+    expected_filename: &Path,\n+    emit_mode: EmitMode,\n+    has_diff: bool,\n+) {\n+    let mut config = Config::default();\n+    config.set().newline_style(NewlineStyle::Unix);\n+    config.set().emit_mode(emit_mode);\n+\n+    let mut source_file = fs::File::open(&source).expect(\"couldn't open source\");\n+    let mut source_text = String::new();\n+    source_file\n+        .read_to_string(&mut source_text)\n+        .expect(\"Failed reading target\");\n+    let input = Input::Text(source_text);\n+\n+    // Populate output by writing to a vec.\n+    let mut buf: Vec<u8> = vec![];\n+    {\n+        let mut session = Session::new(config, Some(&mut buf));\n+        session.format(input).unwrap();\n+        let errors = ReportedErrors {\n+            has_diff: has_diff,\n+            ..Default::default()\n+        };\n+        assert_eq!(session.errors, errors);\n+    }\n+\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"couldn't open target\");\n+    let mut expected_text = String::new();\n+    expected_file\n+        .read_to_string(&mut expected_text)\n+        .expect(\"Failed reading target\");\n+\n+    let output = String::from_utf8(buf).unwrap();\n+    let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+    if !compare.is_empty() {\n+        let mut failures = HashMap::new();\n+        failures.insert(source.to_owned(), compare);\n+        print_mismatches_default_message(failures);\n+        panic!(\"Text does not match expected output\");\n+    }\n+}\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[nightly_only_test]\n@@ -420,9 +466,9 @@ fn stdin_formatting_smoke_test() {\n     }\n \n     #[cfg(not(windows))]\n-    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\n\".as_bytes());\n+    assert_eq!(buf, \"<stdin>:\\n\\nfn main() {}\\n\".as_bytes());\n     #[cfg(windows)]\n-    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\r\\n\".as_bytes());\n+    assert_eq!(buf, \"<stdin>:\\n\\nfn main() {}\\r\\n\".as_bytes());\n }\n \n #[test]\n@@ -463,6 +509,30 @@ fn stdin_works_with_modified_lines() {\n     assert_eq!(buf, output.as_bytes());\n }\n \n+/// Ensures that `EmitMode::Json` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_json() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.json\"),\n+        EmitMode::Json,\n+        true,\n+    );\n+}\n+\n+/// Ensures that `EmitMode::Checkstyle` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_checkstyle() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.xml\"),\n+        EmitMode::Checkstyle,\n+        false,\n+    );\n+}\n+\n #[test]\n fn stdin_disable_all_formatting_test() {\n     init_log();\n@@ -914,3 +984,52 @@ fn verify_check_works() {\n         .status()\n         .expect(\"run with check option failed\");\n }\n+\n+#[test]\n+fn verify_check_works_with_stdin() {\n+    init_log();\n+\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .arg(\"--check\")\n+        .stdin(Stdio::piped())\n+        .stderr(Stdio::piped())\n+        .spawn()\n+        .expect(\"run with check option failed\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+        stdin\n+            .write_all(\"fn main() {}\\n\".as_bytes())\n+            .expect(\"Failed to write to rustfmt --check\");\n+    }\n+    let output = child\n+        .wait_with_output()\n+        .expect(\"Failed to wait on rustfmt child\");\n+    assert!(output.status.success());\n+}\n+\n+#[test]\n+fn verify_check_l_works_with_stdin() {\n+    init_log();\n+\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .arg(\"--check\")\n+        .arg(\"-l\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::piped())\n+        .spawn()\n+        .expect(\"run with check option failed\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+        stdin\n+            .write_all(\"fn main()\\n{}\\n\".as_bytes())\n+            .expect(\"Failed to write to rustfmt --check\");\n+    }\n+    let output = child\n+        .wait_with_output()\n+        .expect(\"Failed to wait on rustfmt child\");\n+    assert!(output.status.success());\n+    assert_eq!(std::str::from_utf8(&output.stdout).unwrap(), \"<stdin>\\n\");\n+}"}, {"sha": "fcff6d14e6fa46c6baa7364769023dc94456b4df", "filename": "src/test/mod_resolver.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/src%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/src%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod_resolver.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -50,3 +50,17 @@ fn skip_out_of_line_nested_inline_within_out_of_line() {\n         &[\"tests/mod-resolver/skip-files-issue-5065/one.rs\"],\n     );\n }\n+\n+#[test]\n+fn fmt_out_of_line_test_modules() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5119\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+        &[\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs\",\n+        ],\n+    )\n+}"}, {"sha": "bf81f253f6913fc6b367faa0a3041840743d981d", "filename": "tests/cargo-fmt/main.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fmain.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -2,6 +2,7 @@\n \n use std::env;\n use std::process::Command;\n+use std::path::Path;\n \n /// Run the cargo-fmt executable and return its output.\n fn cargo_fmt(args: &[&str]) -> (String, String) {\n@@ -71,3 +72,26 @@ fn rustfmt_help() {\n     assert_that!(&[\"--\", \"-h\"], contains(\"Format Rust code\"));\n     assert_that!(&[\"--\", \"--help=config\"], contains(\"Configuration Options:\"));\n }\n+\n+#[test]\n+fn cargo_fmt_out_of_line_test_modules() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5119\n+    let expected_modified_files = [\n+        \"tests/mod-resolver/test-submodule-issue-5119/src/lib.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs\",\n+    ];\n+    let args = [\n+        \"-v\",\n+        \"--check\",\n+        \"--manifest-path\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/Cargo.toml\",\n+    ];\n+    let (stdout, _) = cargo_fmt(&args);\n+    for file in expected_modified_files {\n+        let path = Path::new(file).canonicalize().unwrap();\n+        assert!(stdout.contains(&format!(\"Diff in {}\", path.display())))\n+    }\n+}"}, {"sha": "0993f12795991d2ec4a75bb396aff7643cfa1d16", "filename": "tests/mod-resolver/test-submodule-issue-5119/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"rustfmt-test-submodule-issue\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "3f7ddba8a288c71986e6735c31f2576befc6cb23", "filename": "tests/mod-resolver/test-submodule-issue-5119/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,7 @@\n+pub fn foo() -> i32 {\n+3\n+}\n+\n+pub fn bar() -> i32 {\n+4\n+}"}, {"sha": "da4e86169ad926dcae7d34de1f480fdd79f32666", "filename": "tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,8 @@\n+mod test1 {\n+#[cfg(unix)]\n+mod sub1;\n+#[cfg(not(unix))]\n+mod sub2;\n+\n+mod sub3;\n+}"}, {"sha": "b760ba23cd2775c3aa55c763f2f86a7791ba50c6", "filename": "tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,6 @@\n+use rustfmt_test_submodule_issue::foo;\n+\n+#[test]\n+fn test_foo() {\n+assert_eq!(3, foo());\n+}"}, {"sha": "4fd8286eac400a4bc2cc9846aa2341127bf55668", "filename": "tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,6 @@\n+use rustfmt_test_submodule_issue::bar;\n+\n+#[test]\n+fn test_bar() {\n+assert_eq!(4, bar());\n+}"}, {"sha": "e029785bc24579303fbcf4f0b5c75b1f880fd0ac", "filename": "tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1 @@\n+mod sub4;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf"}, {"sha": "06f8a0c288d7fadee2d4abb621de66cee7cbb51c", "filename": "tests/writemode/source/stdin.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Fsource%2Fstdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Fsource%2Fstdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Fstdin.rs?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,6 @@\n+\n+fn\n+ some( )\n+{\n+}\n+fn main () {}"}, {"sha": "d8b5467ee91ca23f245741e6f1d958262378446e", "filename": "tests/writemode/target/output.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Foutput.json?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -1 +1 @@\n-[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]\n\\ No newline at end of file\n+[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\\n\",\"expected\":\"fn foo_expr() { 1 }\\n\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\\n\",\"expected\":\"fn foo_stmt() { foo(); }\\n\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\\n\",\"expected\":\"fn foo_decl_local() { let z = 5; }\\n\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\\n\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\\n\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\\n\",\"expected\":\"fn empty() {}\\n\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\\n\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\\n\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\\n\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\\n\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\\n\",\"expected\":\"fn lots_of_space() { 1 }\\n\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\\n\",\"expected\":\"    fn dummy(&self) {}\\n\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \\n\",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\\n\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\\n\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\\n\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"}]}]"}, {"sha": "dbf2c486322957fa44e3d63091efd2120af88bbd", "filename": "tests/writemode/target/stdin.json", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Fstdin.json", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Fstdin.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.json?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1 @@\n+[{\"name\":\"<stdin>\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\\n\",\"expected\":\"fn some() {}\\nfn main() {}\\n\"}]}]"}, {"sha": "a7301bbc553c39a606824d7759d25f7e7cb60635", "filename": "tests/writemode/target/stdin.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Fstdin.xml", "raw_url": "https://github.com/rust-lang/rust/raw/9b454a59906b472022855b7044a01f7bc89210cf/tests%2Fwritemode%2Ftarget%2Fstdin.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.xml?ref=9b454a59906b472022855b7044a01f7bc89210cf", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+<checkstyle version=\"4.3\"><file name=\"<stdin>\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn some() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn main() {}`\" /></file></checkstyle>\r"}]}