{"sha": "3164c2aa15a17ddbc4378b375ac822b6fef154b5", "node_id": "C_kwDOAAsO6NoAKDMxNjRjMmFhMTVhMTdkZGJjNDM3OGIzNzVhYzgyMmI2ZmVmMTU0YjU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-01T05:11:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-01T05:19:10Z"}, "message": "Make logging for drop-tracking easier to read.\n\nSome of these are a little questionable because the output is so much longer, but I would really love to keep the bit that adds the pretty-printed expression to the generated CFG .dot file.\n\nBefore:\n```\nDEBUG rustc_typeck::check::generator_interior::drop_ranges::record_consumed_borrow consume PlaceWithHirId { hir_id: HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 15 }, place: Place { base_ty: impl std::future::Future<Output = ()>, base: Rvalue, projections: [] } }; diag_expr_id=HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 15 }, using parent expr HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 49 }\n```\n\nAfter:\n```\nDEBUG rustc_typeck::check::generator_interior::drop_ranges::record_consumed_borrow consume PlaceWithHirId { hir_id: HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 15 }, place: Place { base_ty: impl std::future::Future<Output = ()>, base: Rvalue, projections: [] } }; diag_expr_id=expr from_config(Config {\n        nickname: None,\n        ..Default::default()\n    }) (hir_id=HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 15 }), using parent expr\n    .await (hir_id=HirId { owner: DefId(0:7 ~ default_struct_update[79f9]::foo), local_id: 49 })\n```", "tree": {"sha": "6edd13e6dffef81ee7268c0a943724df743a0968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6edd13e6dffef81ee7268c0a943724df743a0968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3164c2aa15a17ddbc4378b375ac822b6fef154b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3164c2aa15a17ddbc4378b375ac822b6fef154b5", "html_url": "https://github.com/rust-lang/rust/commit/3164c2aa15a17ddbc4378b375ac822b6fef154b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3164c2aa15a17ddbc4378b375ac822b6fef154b5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "483ee1f14770343122e9fadfffc054a119587dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/483ee1f14770343122e9fadfffc054a119587dbf", "html_url": "https://github.com/rust-lang/rust/commit/483ee1f14770343122e9fadfffc054a119587dbf"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "887c791af76c2c08dc51722ba05e20006db6d7f8", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=3164c2aa15a17ddbc4378b375ac822b6fef154b5", "patch": "@@ -109,7 +109,7 @@ rustc_index::newtype_index! {\n }\n \n /// Identifies a value whose drop state we need to track.\n-#[derive(PartialEq, Eq, Hash, Debug, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, Clone, Copy)]\n enum TrackedValue {\n     /// Represents a named variable, such as a let binding, parameter, or upvar.\n     ///\n@@ -121,6 +121,21 @@ enum TrackedValue {\n     Temporary(HirId),\n }\n \n+impl Debug for TrackedValue {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                write!(f, \"{}\", tcx.hir().node_to_string(self.hir_id()))\n+            } else {\n+                match self {\n+                    Self::Variable(hir_id) => write!(f, \"Variable({:?})\", hir_id),\n+                    Self::Temporary(hir_id) => write!(f, \"Temporary({:?})\", hir_id),\n+                }\n+            }\n+        })\n+    }\n+}\n+\n impl TrackedValue {\n     fn hir_id(&self) -> HirId {\n         match self {\n@@ -148,7 +163,7 @@ enum TrackedValueConversionError {\n     /// Place projects are not currently supported.\n     ///\n     /// The reasoning around these is kind of subtle, so we choose to be more\n-    /// conservative around these for now. There is not reason in theory we\n+    /// conservative around these for now. There is no reason in theory we\n     /// cannot support these, we just have not implemented it yet.\n     PlaceProjectionsNotSupported,\n }"}, {"sha": "5e363ef6f8444caf077b7dd0057c313063b78753", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=3164c2aa15a17ddbc4378b375ac822b6fef154b5", "patch": "@@ -129,13 +129,14 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     /// ExprUseVisitor's consume callback doesn't go deep enough for our purposes in all\n     /// expressions. This method consumes a little deeper into the expression when needed.\n     fn consume_expr(&mut self, expr: &hir::Expr<'_>) {\n-        debug!(\"consuming expr {:?}, count={:?}\", expr.hir_id, self.expr_index);\n+        debug!(\"consuming expr {:?}, count={:?}\", expr.kind, self.expr_index);\n         let places = self\n             .places\n             .consumed\n             .get(&expr.hir_id)\n             .map_or(vec![], |places| places.iter().cloned().collect());\n         for place in places {\n+            trace!(?place, \"consuming place\");\n             for_each_consumable(self.hir, place, |value| self.record_drop(value));\n         }\n     }"}, {"sha": "c0a0bfe8e1c00a98cb53dd41b5d1e6e9bb7ba82c", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=3164c2aa15a17ddbc4378b375ac822b6fef154b5", "patch": "@@ -74,12 +74,18 @@ impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n \n     fn node_label(&'a self, n: &Self::Node) -> dot::LabelText<'a> {\n         dot::LabelText::LabelStr(\n-            self.drop_ranges\n-                .post_order_map\n-                .iter()\n-                .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                .map_or(\"<unknown>\".into(), |(hir_id, _)| self.tcx.hir().node_to_string(*hir_id))\n-                .into(),\n+            format!(\n+                \"{n:?}: {}\",\n+                self.drop_ranges\n+                    .post_order_map\n+                    .iter()\n+                    .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| self\n+                        .tcx\n+                        .hir()\n+                        .node_to_string(*hir_id))\n+            )\n+            .into(),\n         )\n     }\n }"}, {"sha": "67cc46f21f00b0dce7bd725a2ef6405ff56c6484", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3164c2aa15a17ddbc4378b375ac822b6fef154b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=3164c2aa15a17ddbc4378b375ac822b6fef154b5", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n         if !self.places.consumed.contains_key(&consumer) {\n             self.places.consumed.insert(consumer, <_>::default());\n         }\n+        debug!(?consumer, ?target, \"mark_consumed\");\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }\n \n@@ -136,13 +137,16 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n+        let hir = self.tcx.hir();\n+        let parent = match hir.find_parent_node(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };\n         debug!(\n-            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n-            place_with_id, diag_expr_id, parent\n+            \"consume {:?}; diag_expr_id={}, using parent {}\",\n+            place_with_id,\n+            hir.node_to_string(diag_expr_id),\n+            hir.node_to_string(parent)\n         );\n         place_with_id\n             .try_into()"}]}