{"sha": "e95f21f7be609b6ba82729268bc08ac6b9ad3076", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NWYyMWY3YmU2MDliNmJhODI3MjkyNjhiYzA4YWM2YjlhZDMwNzY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-15T05:17:34Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "convert SyntaxExtensions's key to a @~str", "tree": {"sha": "51ff7c6a399cf26eaf49d46c91cb59e908c44dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ff7c6a399cf26eaf49d46c91cb59e908c44dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95f21f7be609b6ba82729268bc08ac6b9ad3076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95f21f7be609b6ba82729268bc08ac6b9ad3076", "html_url": "https://github.com/rust-lang/rust/commit/e95f21f7be609b6ba82729268bc08ac6b9ad3076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95f21f7be609b6ba82729268bc08ac6b9ad3076/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "html_url": "https://github.com/rust-lang/rust/commit/de5fdaf9349445a98eee0f55d8816b0b6873f5a4"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "fc55fd84a87308dc69eafeb2c5429f395d6c5bfa", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e95f21f7be609b6ba82729268bc08ac6b9ad3076/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95f21f7be609b6ba82729268bc08ac6b9ad3076/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e95f21f7be609b6ba82729268bc08ac6b9ad3076", "patch": "@@ -75,7 +75,7 @@ pub enum SyntaxExtension {\n     ItemTT(SyntaxExpanderTTItem),\n }\n \n-type SyntaxExtensions = HashMap<~str, SyntaxExtension>;\n+type SyntaxExtensions = HashMap<@~str, SyntaxExtension>;\n \n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n@@ -89,74 +89,74 @@ pub fn syntax_expander_table() -> SyntaxExtensions {\n         ItemTT(SyntaxExpanderTTItem{expander: f, span: None})\n     }\n     let syntax_expanders = HashMap();\n-    syntax_expanders.insert(~\"macro_rules\",\n+    syntax_expanders.insert(@~\"macro_rules\",\n                             builtin_item_tt(\n                                 ext::tt::macro_rules::add_new_extension));\n-    syntax_expanders.insert(~\"fmt\",\n+    syntax_expanders.insert(@~\"fmt\",\n                             builtin_normal_tt(ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(\n-        ~\"auto_encode\",\n+        @~\"auto_encode\",\n         ItemDecorator(ext::auto_encode::expand_auto_encode));\n     syntax_expanders.insert(\n-        ~\"auto_decode\",\n+        @~\"auto_decode\",\n         ItemDecorator(ext::auto_encode::expand_auto_decode));\n-    syntax_expanders.insert(~\"env\",\n+    syntax_expanders.insert(@~\"env\",\n                             builtin_normal_tt(ext::env::expand_syntax_ext));\n-    syntax_expanders.insert(~\"concat_idents\",\n+    syntax_expanders.insert(@~\"concat_idents\",\n                             builtin_normal_tt(\n                                 ext::concat_idents::expand_syntax_ext));\n-    syntax_expanders.insert(~\"log_syntax\",\n+    syntax_expanders.insert(@~\"log_syntax\",\n                             builtin_normal_tt(\n                                 ext::log_syntax::expand_syntax_ext));\n-    syntax_expanders.insert(~\"deriving_eq\",\n+    syntax_expanders.insert(@~\"deriving_eq\",\n                             ItemDecorator(\n                                 ext::deriving::expand_deriving_eq));\n-    syntax_expanders.insert(~\"deriving_iter_bytes\",\n+    syntax_expanders.insert(@~\"deriving_iter_bytes\",\n                             ItemDecorator(\n                                 ext::deriving::expand_deriving_iter_bytes));\n \n     // Quasi-quoting expanders\n-    syntax_expanders.insert(~\"quote_tokens\",\n+    syntax_expanders.insert(@~\"quote_tokens\",\n                        builtin_normal_tt(ext::quote::expand_quote_tokens));\n-    syntax_expanders.insert(~\"quote_expr\",\n+    syntax_expanders.insert(@~\"quote_expr\",\n                             builtin_normal_tt(ext::quote::expand_quote_expr));\n-    syntax_expanders.insert(~\"quote_ty\",\n+    syntax_expanders.insert(@~\"quote_ty\",\n                             builtin_normal_tt(ext::quote::expand_quote_ty));\n-    syntax_expanders.insert(~\"quote_item\",\n+    syntax_expanders.insert(@~\"quote_item\",\n                             builtin_normal_tt(ext::quote::expand_quote_item));\n-    syntax_expanders.insert(~\"quote_pat\",\n+    syntax_expanders.insert(@~\"quote_pat\",\n                             builtin_normal_tt(ext::quote::expand_quote_pat));\n-    syntax_expanders.insert(~\"quote_stmt\",\n+    syntax_expanders.insert(@~\"quote_stmt\",\n                             builtin_normal_tt(ext::quote::expand_quote_stmt));\n \n-    syntax_expanders.insert(~\"line\",\n+    syntax_expanders.insert(@~\"line\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_line));\n-    syntax_expanders.insert(~\"col\",\n+    syntax_expanders.insert(@~\"col\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_col));\n-    syntax_expanders.insert(~\"file\",\n+    syntax_expanders.insert(@~\"file\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_file));\n-    syntax_expanders.insert(~\"stringify\",\n+    syntax_expanders.insert(@~\"stringify\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_stringify));\n-    syntax_expanders.insert(~\"include\",\n+    syntax_expanders.insert(@~\"include\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_include));\n-    syntax_expanders.insert(~\"include_str\",\n+    syntax_expanders.insert(@~\"include_str\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_include_str));\n-    syntax_expanders.insert(~\"include_bin\",\n+    syntax_expanders.insert(@~\"include_bin\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_include_bin));\n-    syntax_expanders.insert(~\"module_path\",\n+    syntax_expanders.insert(@~\"module_path\",\n                             builtin_normal_tt(\n                                 ext::source_util::expand_mod));\n-    syntax_expanders.insert(~\"proto\",\n+    syntax_expanders.insert(@~\"proto\",\n                             builtin_item_tt(ext::pipes::expand_proto));\n     syntax_expanders.insert(\n-        ~\"trace_macros\",\n+        @~\"trace_macros\",\n         builtin_normal_tt(ext::trace_macros::expand_trace_macros));\n     return syntax_expanders;\n }"}, {"sha": "f9a0de6535b755f3fe326a871942aa1572b6d0d2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e95f21f7be609b6ba82729268bc08ac6b9ad3076/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95f21f7be609b6ba82729268bc08ac6b9ad3076/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e95f21f7be609b6ba82729268bc08ac6b9ad3076", "patch": "@@ -41,7 +41,7 @@ pub fn expand_expr(exts: SyntaxExtensions, cx: ext_ctxt,\n                 /* using idents and token::special_idents would make the\n                 the macro names be hygienic */\n                 let extname = cx.parse_sess().interner.get(pth.idents[0]);\n-                match exts.find(extname) {\n+                match exts.find(&extname) {\n                   None => {\n                     cx.span_fatal(pth.span,\n                                   fmt!(\"macro undefined: '%s'\", *extname))\n@@ -102,7 +102,7 @@ pub fn expand_mod_items(exts: SyntaxExtensions, cx: ext_ctxt,\n         do vec::foldr(item.attrs, ~[*item]) |attr, items| {\n             let mname = attr::get_attr_name(attr);\n \n-            match exts.find(&*mname) {\n+            match exts.find(&mname) {\n               None | Some(NormalTT(_)) | Some(ItemTT(*)) => items,\n               Some(ItemDecorator(dec_fn)) => {\n                   cx.bt_push(ExpandedFrom({call_site: attr.span,\n@@ -159,7 +159,7 @@ pub fn expand_item_mac(exts: SyntaxExtensions,\n     };\n \n     let extname = cx.parse_sess().interner.get(pth.idents[0]);\n-    let expanded = match exts.find(extname) {\n+    let expanded = match exts.find(&extname) {\n         None => cx.span_fatal(pth.span,\n                               fmt!(\"macro undefined: '%s!'\", *extname)),\n \n@@ -198,7 +198,7 @@ pub fn expand_item_mac(exts: SyntaxExtensions,\n         MRAny(_, item_maker, _) =>\n             option::chain(item_maker(), |i| {fld.fold_item(i)}),\n         MRDef(ref mdef) => {\n-            exts.insert((*mdef).name, (*mdef).ext);\n+            exts.insert(@/*bad*/ copy mdef.name, (*mdef).ext);\n             None\n         }\n     };\n@@ -222,7 +222,7 @@ pub fn expand_stmt(exts: SyntaxExtensions, cx: ext_ctxt,\n \n     assert(vec::len(pth.idents) == 1u);\n     let extname = cx.parse_sess().interner.get(pth.idents[0]);\n-    let (fully_expanded, sp) = match exts.find(extname) {\n+    let (fully_expanded, sp) = match exts.find(&extname) {\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", *extname)),\n "}]}