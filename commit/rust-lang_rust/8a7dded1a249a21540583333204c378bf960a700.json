{"sha": "8a7dded1a249a21540583333204c378bf960a700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhN2RkZWQxYTI0OWEyMTU0MDU4MzMzMzIwNGMzNzhiZjk2MGE3MDA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-04T14:05:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-04T15:26:57Z"}, "message": "Switch master to 1.38", "tree": {"sha": "a3f2218f1d0ec0a122a3b947ed837268aa688981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f2218f1d0ec0a122a3b947ed837268aa688981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7dded1a249a21540583333204c378bf960a700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dded1a249a21540583333204c378bf960a700", "html_url": "https://github.com/rust-lang/rust/commit/8a7dded1a249a21540583333204c378bf960a700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dded1a249a21540583333204c378bf960a700/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43eb4235ac43c822d903ad26ed806f34cc1a14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "html_url": "https://github.com/rust-lang/rust/commit/b43eb4235ac43c822d903ad26ed806f34cc1a14a"}], "stats": {"total": 115, "additions": 17, "deletions": 98}, "files": [{"sha": "8e8d8f5e787a7a0effa2488d705a1e7e1871d7ce", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.37.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.38.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "cef2b5eea344acb506f9e382ae01bb998e67bc5d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -15,8 +15,7 @@ extern \"Rust\" {\n     // them from the `#[global_allocator]` attribute if there is one, or uses the\n     // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n-    #[cfg_attr(bootstrap, allocator)]\n-    #[cfg_attr(not(bootstrap), rustc_allocator)]\n+    #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]"}, {"sha": "0750665c6b4246dd0d5c28419ef226a2d68c9f1d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -79,7 +79,6 @@\n #![feature(coerce_unsized)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(bootstrap, feature(custom_attribute))]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]"}, {"sha": "4f87cc506efae2efc10bfbc1a1964efcba764588", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -302,7 +302,6 @@ impl<T> sealed_trait::VaArgSafe for *const T {}\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-#[cfg(not(bootstrap))]\n impl<'f> VaListImpl<'f> {\n     /// Advance to the next arg.\n     #[inline]\n@@ -324,7 +323,6 @@ impl<'f> VaListImpl<'f> {\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-#[cfg(not(bootstrap))]\n impl<'f> Clone for VaListImpl<'f> {\n     #[inline]\n     fn clone(&self) -> Self {\n@@ -340,7 +338,6 @@ impl<'f> Clone for VaListImpl<'f> {\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-#[cfg(not(bootstrap))]\n impl<'f> Drop for VaListImpl<'f> {\n     fn drop(&mut self) {\n         // FIXME: this should call `va_end`, but there's no clean way to\n@@ -359,15 +356,12 @@ impl<'f> Drop for VaListImpl<'f> {\n extern \"rust-intrinsic\" {\n     /// Destroy the arglist `ap` after initialization with `va_start` or\n     /// `va_copy`.\n-    #[cfg(not(bootstrap))]\n     fn va_end(ap: &mut VaListImpl<'_>);\n \n     /// Copies the current location of arglist `src` to the arglist `dst`.\n-    #[cfg(not(bootstrap))]\n     fn va_copy<'f>(dest: *mut VaListImpl<'f>, src: &VaListImpl<'f>);\n \n     /// Loads an argument of type `T` from the `va_list` `ap` and increment the\n     /// argument `ap` points to.\n-    #[cfg(not(bootstrap))]\n     fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaListImpl<'_>) -> T;\n }"}, {"sha": "8bd1601a362133899176df264d1a7373df31f706", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -25,7 +25,7 @@ use crate::task::{Context, Poll};\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg_attr(not(bootstrap), lang = \"future_trait\")]\n+#[lang = \"future_trait\"]\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "8e53022c287f794b5b56ceeb3b6727c34466d081", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -1052,16 +1052,12 @@ extern \"rust-intrinsic\" {\n     pub fn fabsf64(x: f64) -> f64;\n \n     /// Returns the minimum of two `f32` values.\n-    #[cfg(not(bootstrap))]\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n-    #[cfg(not(bootstrap))]\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n-    #[cfg(not(bootstrap))]\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n-    #[cfg(not(bootstrap))]\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n@@ -1255,17 +1251,14 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the result of an unchecked addition, resulting in\n     /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n-    #[cfg(not(bootstrap))]\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked substraction, resulting in\n     /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n-    #[cfg(not(bootstrap))]\n     pub fn unchecked_sub<T>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked multiplication, resulting in\n     /// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\n-    #[cfg(not(bootstrap))]\n     pub fn unchecked_mul<T>(x: T, y: T) -> T;\n \n     /// Performs rotate left.\n@@ -1563,53 +1556,3 @@ pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     }\n     write_bytes(dst, val, count)\n }\n-\n-// Simple bootstrap implementations of minnum/maxnum for stage0 compilation.\n-\n-/// Returns the minimum of two `f32` values.\n-#[cfg(bootstrap)]\n-pub fn minnumf32(x: f32, y: f32) -> f32 {\n-    // IEEE754 says: minNum(x, y) is the canonicalized number x if x < y, y if y < x, the\n-    // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-    // is either x or y, canonicalized (this means results might differ among implementations).\n-    // When either x or y is a signaling NaN, then the result is according to 6.2.\n-    //\n-    // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-    // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-    // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-    (if x < y || y != y { x } else { y }) * 1.0\n-}\n-\n-/// Returns the minimum of two `f64` values.\n-#[cfg(bootstrap)]\n-pub fn minnumf64(x: f64, y: f64) -> f64 {\n-    // Identical to the `f32` case.\n-    (if x < y || y != y { x } else { y }) * 1.0\n-}\n-\n-/// Returns the maximum of two `f32` values.\n-#[cfg(bootstrap)]\n-pub fn maxnumf32(x: f32, y: f32) -> f32 {\n-    // IEEE754 says: maxNum(x, y) is the canonicalized number y if x < y, x if y < x, the\n-    // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-    // is either x or y, canonicalized (this means results might differ among implementations).\n-    // When either x or y is a signaling NaN, then the result is according to 6.2.\n-    //\n-    // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-    // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-    // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-    (if x < y || x != x { y } else { x }) * 1.0\n-}\n-\n-/// Returns the maximum of two `f64` values.\n-#[cfg(bootstrap)]\n-pub fn maxnumf64(x: f64, y: f64) -> f64 {\n-    // Identical to the `f32` case.\n-    (if x < y || x != x { y } else { x }) * 1.0\n-}\n-\n-/// For bootstrapping, implement unchecked_sub as just wrapping_sub.\n-#[cfg(bootstrap)]\n-pub unsafe fn unchecked_sub<T>(x: T, y: T) -> T {\n-    sub_with_overflow(x, y).0\n-}"}, {"sha": "398b929b206f0fb23e1bcab7f08b2c1657e3b2e4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -99,7 +99,7 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n-#![cfg_attr(not(bootstrap), feature(transparent_unions))]\n+#![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![feature(untagged_unions)]"}, {"sha": "407691662d14ee8d80ea02496fd83ee3f639c23e", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -207,7 +207,7 @@ use crate::mem::ManuallyDrop;\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n #[derive(Copy)]\n-#[cfg_attr(not(bootstrap), repr(transparent))]\n+#[repr(transparent)]\n pub union MaybeUninit<T> {\n     uninit: (),\n     value: ManuallyDrop<T>,"}, {"sha": "72552c5a0b0f06c8e709f6d55b1badd402f659ad", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -50,7 +50,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n-                #[cfg_attr(not(bootstrap), rustc_nonnull_optimization_guaranteed)]\n+                #[rustc_nonnull_optimization_guaranteed]\n                 pub struct $Ty($Int);\n             }\n "}, {"sha": "ad3d1ce396ab755c70dd1adc709eec93943f9565", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -38,7 +38,7 @@ use crate::cmp::Ordering;\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[repr(transparent)]\n #[rustc_layout_scalar_valid_range_start(1)]\n-#[cfg_attr(not(bootstrap), rustc_nonnull_optimization_guaranteed)]\n+#[rustc_nonnull_optimization_guaranteed]\n pub struct NonNull<T: ?Sized> {\n     pointer: *const T,\n }"}, {"sha": "3f75523a81584a7bc62330d01ab267200f68ec75", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -1,7 +1,6 @@\n /// A simple static assertion macro.\n #[macro_export]\n-#[cfg_attr(bootstrap, allow_internal_unstable(type_ascription, underscore_const_names))]\n-#[cfg_attr(not(bootstrap), allow_internal_unstable(type_ascription))]\n+#[allow_internal_unstable(type_ascription)]\n macro_rules! static_assert {\n     ($test:expr) => {\n         // Use the bool to access an array such that if the bool is false, the access\n@@ -13,7 +12,6 @@ macro_rules! static_assert {\n \n /// Type size assertion. The first argument is a type and the second argument is its expected size.\n #[macro_export]\n-#[cfg_attr(bootstrap, allow_internal_unstable(underscore_const_names))]\n macro_rules! static_assert_size {\n     ($ty:ty, $size:expr) => {\n         const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];"}, {"sha": "ce5a6b854ea6c4c9d3cb38685d449b381a080cf2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -7,7 +7,6 @@\n #![feature(mem_take)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![cfg_attr(bootstrap, feature(type_alias_enum_variants))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "b32049b1da8c365992d1b284701b4553b654b331", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -59,17 +59,6 @@ where\n     TokenStream: Send + Sync,\n {}\n \n-// These are safe since we ensure that they hold for all fields in the `_dummy` function.\n-//\n-// These impls are only here because the compiler takes forever to compute the Send and Sync\n-// bounds without them.\n-// FIXME: Remove these impls when the compiler can compute the bounds quickly again.\n-// See https://github.com/rust-lang/rust/issues/60846\n-#[cfg(all(bootstrap, parallel_compiler))]\n-unsafe impl Send for TokenTree {}\n-#[cfg(all(bootstrap, parallel_compiler))]\n-unsafe impl Sync for TokenTree {}\n-\n impl TokenTree {\n     /// Use this token tree as a matcher to parse given tts.\n     pub fn parse(cx: &base::ExtCtxt<'_>, mtch: &[quoted::TokenTree], tts: TokenStream)"}, {"sha": "20280aa3c41300b96d90efe626d21e41f5c18bc4", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -4,13 +4,11 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n-    // and could be removed once that change is in beta.\n-    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n+    if cfg!(feature = \"llvm-libunwind\") &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n+        #[cfg(feature = \"llvm-libunwind\")]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -44,7 +42,7 @@ fn main() {\n     }\n }\n \n-#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n+#[cfg(feature = \"llvm-libunwind\")]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "41adc0a415370a42c5cf8d075ea4dd8032f2023e", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -67,7 +67,7 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n-#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+#[cfg_attr(feature = \"llvm-libunwind\",\n            link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n     #[unwind(allowed)]\n@@ -93,7 +93,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+    #[cfg_attr(feature = \"llvm-libunwind\",\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n@@ -148,7 +148,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+    #[cfg_attr(feature = \"llvm-libunwind\",\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n@@ -212,7 +212,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+    #[cfg_attr(feature = \"llvm-libunwind\",\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n@@ -223,7 +223,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+    #[cfg_attr(feature = \"llvm-libunwind\",\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]"}, {"sha": "9b70a40458287c08127f2ce5433b1b7b666c4db4", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dded1a249a21540583333204c378bf960a700/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dded1a249a21540583333204c378bf960a700/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=8a7dded1a249a21540583333204c378bf960a700", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-05-23\n+date: 2019-07-04\n rustc: beta\n cargo: beta\n "}]}