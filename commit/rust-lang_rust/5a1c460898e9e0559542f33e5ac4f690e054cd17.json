{"sha": "5a1c460898e9e0559542f33e5ac4f690e054cd17", "node_id": "C_kwDOAAsO6NoAKDVhMWM0NjA4OThlOWUwNTU5NTQyZjMzZTVhYzRmNjkwZTA1NGNkMTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-24T09:41:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-24T09:41:18Z"}, "message": "Normalize struct tail type when checking Pointee trait", "tree": {"sha": "5189bd5581b69c3a183c5797ab0de96dbbfca36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5189bd5581b69c3a183c5797ab0de96dbbfca36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a1c460898e9e0559542f33e5ac4f690e054cd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1c460898e9e0559542f33e5ac4f690e054cd17", "html_url": "https://github.com/rust-lang/rust/commit/5a1c460898e9e0559542f33e5ac4f690e054cd17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a1c460898e9e0559542f33e5ac4f690e054cd17/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77497c74f9268ccf91d7b4c17f23bf07117d7433", "url": "https://api.github.com/repos/rust-lang/rust/commits/77497c74f9268ccf91d7b4c17f23bf07117d7433", "html_url": "https://github.com/rust-lang/rust/commit/77497c74f9268ccf91d7b4c17f23bf07117d7433"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "0a8f74da6c09e93901bf04ab1a5d211c8ac41b08", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5a1c460898e9e0559542f33e5ac4f690e054cd17", "patch": "@@ -2143,9 +2143,12 @@ impl<'tcx> TyS<'tcx> {\n     }\n \n     /// Returns the type of metadata for (potentially fat) pointers to this type.\n-    pub fn ptr_metadata_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        // FIXME:\u00a0should this normalize?\n-        let tail = tcx.struct_tail_without_normalization(self);\n+    pub fn ptr_metadata_ty(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let tail = tcx.struct_tail_with_normalize(self, normalize);\n         match tail.kind() {\n             // Sized types\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_))"}, {"sha": "8793264a47fbb3438c0f82e00bca58444de6e594", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=5a1c460898e9e0559542f33e5ac4f690e054cd17", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn struct_tail_with_normalize(\n         self,\n         mut ty: Ty<'tcx>,\n-        normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,\n+        mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {"}, {"sha": "bcb7e2100ab810131f58db24672a0a6421cc997b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1c460898e9e0559542f33e5ac4f690e054cd17/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=5a1c460898e9e0559542f33e5ac4f690e054cd17", "patch": "@@ -1400,8 +1400,17 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // Any type with multiple potential metadata types is therefore not eligible.\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n-                // FIXME:\u00a0should this normalize?\n-                let tail = selcx.tcx().struct_tail_without_normalization(self_ty);\n+                let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n+                    normalize_with_depth(\n+                        selcx,\n+                        obligation.param_env,\n+                        obligation.cause.clone(),\n+                        obligation.recursion_depth + 1,\n+                        ty,\n+                    )\n+                    .value\n+                });\n+\n                 match tail.kind() {\n                     ty::Bool\n                     | ty::Char\n@@ -1435,7 +1444,12 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n-                    | ty::Error(_) => false,\n+                    | ty::Error(_) => {\n+                        if tail.has_infer_types() {\n+                            candidate_set.mark_ambiguous();\n+                        }\n+                        false\n+                    },\n                 }\n             }\n             super::ImplSource::Param(..) => {\n@@ -1640,18 +1654,30 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     _: ImplSourcePointeeData,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n-\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n-    let substs = tcx.mk_substs([self_ty.into()].iter());\n \n+    let mut obligations = vec![];\n+    let metadata_ty = self_ty.ptr_metadata_ty(tcx, |ty| {\n+        normalize_with_depth_to(\n+            selcx,\n+            obligation.param_env,\n+            obligation.cause.clone(),\n+            obligation.recursion_depth + 1,\n+            ty,\n+            &mut obligations,\n+        )\n+    });\n+\n+    let substs = tcx.mk_substs([self_ty.into()].iter());\n     let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },\n-        ty: self_ty.ptr_metadata_ty(tcx),\n+        ty: metadata_ty,\n     };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n+        .with_addl_obligations(obligations)\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'tcx>("}, {"sha": "f888246967d3dcdb215c21e0a91a7d52aeeb8b27", "filename": "src/test/ui/traits/pointee-deduction.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a1c460898e9e0559542f33e5ac4f690e054cd17/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1c460898e9e0559542f33e5ac4f690e054cd17/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs?ref=5a1c460898e9e0559542f33e5ac4f690e054cd17", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+\n+#![feature(ptr_metadata)]\n+\n+use std::alloc::Layout;\n+use std::ptr::Pointee;\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for () {\n+    type Bar = ();\n+}\n+\n+struct Wrapper1<T: Foo>(<T as Foo>::Bar);\n+struct Wrapper2<T: Foo>(<Wrapper1<T> as Pointee>::Metadata);\n+\n+fn main() {\n+    let _: Wrapper2<()> = Wrapper2(());\n+    let _ = Layout::new::<Wrapper2<()>>();\n+}"}]}