{"sha": "fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGJjMGI4OGJiMzlhYzQyYWE0ODc0ZTRhOTBkZjUzYTc3OGVmNTk=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-26T16:04:41Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-26T22:47:33Z"}, "message": "Manually implement Hash for SmallIntMap", "tree": {"sha": "99e7e92d1e91d06620c0f4383c6a6d9a694955f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e7e92d1e91d06620c0f4383c6a6d9a694955f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "html_url": "https://github.com/rust-lang/rust/commit/fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fadbc0b88bb39ac42aa4874e4a90df53a778ef59/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1c37e96da571e6eb8137aad1b5d65ea3f89a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1c37e96da571e6eb8137aad1b5d65ea3f89a0b", "html_url": "https://github.com/rust-lang/rust/commit/3f1c37e96da571e6eb8137aad1b5d65ea3f89a0b"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "c6c55b55e332e27f917441d5796d61abe4e87b02", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fadbc0b88bb39ac42aa4874e4a90df53a778ef59/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadbc0b88bb39ac42aa4874e4a90df53a778ef59/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "patch": "@@ -24,6 +24,8 @@ use core::mem::replace;\n use {Collection, Mutable, Map, MutableMap, MutableSeq};\n use {vec, slice};\n use vec::Vec;\n+use hash;\n+use hash::Hash;\n \n /// A map optimized for small integer keys.\n ///\n@@ -58,7 +60,7 @@ use vec::Vec;\n /// months.clear();\n /// assert!(months.is_empty());\n /// ```\n-#[deriving(Hash, PartialEq, Eq)]\n+#[deriving(PartialEq, Eq)]\n pub struct SmallIntMap<T> {\n     v: Vec<Option<T>>,\n }\n@@ -167,6 +169,12 @@ impl<V:Clone> Clone for SmallIntMap<V> {\n     }\n }\n \n+impl <S: hash::Writer, T: Hash<S>> Hash<S> for SmallIntMap<T> {\n+    fn hash(&self, state: &mut S) {\n+        self.v.hash(state)\n+    }\n+}\n+\n impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap.\n     ///\n@@ -478,8 +486,8 @@ pub type Values<'a, T> =\n #[cfg(test)]\n mod test_map {\n     use std::prelude::*;\n-    use std::hash;\n     use vec::Vec;\n+    use hash;\n \n     use {Map, MutableMap, Mutable, MutableSeq};\n     use super::SmallIntMap;\n@@ -764,19 +772,19 @@ mod test_map {\n \n     #[test]\n     fn test_hash() {\n-      let mut x = SmallIntMap::new();\n-      let mut y = SmallIntMap::new();\n+        let mut x = SmallIntMap::new();\n+        let mut y = SmallIntMap::new();\n \n-      assert!(hash::hash(&x) == hash::hash(&y));\n-      x.insert(1, 'a');\n-      x.insert(2, 'b');\n-      x.insert(3, 'c');\n+        assert!(hash::hash(&x) == hash::hash(&y));\n+        x.insert(1, 'a');\n+        x.insert(2, 'b');\n+        x.insert(3, 'c');\n \n-      y.insert(3, 'c');\n-      y.insert(2, 'b');\n-      y.insert(1, 'a');\n+        y.insert(3, 'c');\n+        y.insert(2, 'b');\n+        y.insert(1, 'a');\n \n-      assert!(hash::hash(&x) == hash::hash(&y));\n+        assert!(hash::hash(&x) == hash::hash(&y));\n     }\n \n     #[test]"}]}