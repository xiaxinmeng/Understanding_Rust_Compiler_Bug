{"sha": "529a42a1a6b6523e8376610556d9890479b9524c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOWE0MmExYTZiNjUyM2U4Mzc2NjEwNTU2ZDk4OTA0NzliOTUyNGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2019-12-31T12:44:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T12:44:07Z"}, "message": "Rollup merge of #67735 - petrochenkov:uibool, r=Mark-Simulacrum\n\nSupport `-Z ui-testing=yes/no`\n\n`ui-testing` is now a boolean option (`-Z ui-testing=yes/no`) and can be specified multiple times with later values overriding earlier values (`-Z ui-testing=yes -Z ui-testing=no` == `-Z ui-testing=no`), so it can be set in a hierarchical way, e.g. UI testing infra may enable it by default with specific tests being able to opt-out.\n\nThis way we can remove the special opt-out support from `compiletest`.\n\nInspired by https://github.com/rust-lang/rust/pull/67709.", "tree": {"sha": "6c1e28385f05be6a7697552e86a2d94c66c743de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c1e28385f05be6a7697552e86a2d94c66c743de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529a42a1a6b6523e8376610556d9890479b9524c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC0KXCRBK7hj4Ov3rIwAAdHIIAE6QsVtPZ92sLLRvpuxF5xim\n2PtzjShahcsW/w2mRMmG+sL1Db92U0WnpDR9YOtU+irAtDFMABQbufHcbFGgiX0n\nCP3zdW9MBe9W0Bzew/ygLsZdmgGics/VGrf9JsNxyIPi+X2sTf4SJrgWSGpRUGHL\nsZJRgpRZ1k30sjr5P0jib5wAzlOafZs5muNHybVRT10JKWd/yEX6W1jw67NX84no\naJrtPFSeCcohbderW5a9OxbZ9PFA2++23ibw0ZsvY6JZ/LWVVQL10au8vfV0OtTL\n+S7ibWPpM5tIM1ODjs0up+Ec+nmYFO/hlidiVkD9LnEcZglEUEO8v0RINSLLnAg=\n=3XVZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c1e28385f05be6a7697552e86a2d94c66c743de\nparent cf24b6bcbf7c34f60699e18b4b0395426fc478f6\nparent 208c1bff0aae2389c1eb497623da895605d4e2b1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1577796247 +0530\ncommitter GitHub <noreply@github.com> 1577796247 +0530\n\nRollup merge of #67735 - petrochenkov:uibool, r=Mark-Simulacrum\n\nSupport `-Z ui-testing=yes/no`\n\n`ui-testing` is now a boolean option (`-Z ui-testing=yes/no`) and can be specified multiple times with later values overriding earlier values (`-Z ui-testing=yes -Z ui-testing=no` == `-Z ui-testing=no`), so it can be set in a hierarchical way, e.g. UI testing infra may enable it by default with specific tests being able to opt-out.\n\nThis way we can remove the special opt-out support from `compiletest`.\n\nInspired by https://github.com/rust-lang/rust/pull/67709.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529a42a1a6b6523e8376610556d9890479b9524c", "html_url": "https://github.com/rust-lang/rust/commit/529a42a1a6b6523e8376610556d9890479b9524c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529a42a1a6b6523e8376610556d9890479b9524c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf24b6bcbf7c34f60699e18b4b0395426fc478f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf24b6bcbf7c34f60699e18b4b0395426fc478f6", "html_url": "https://github.com/rust-lang/rust/commit/cf24b6bcbf7c34f60699e18b4b0395426fc478f6"}, {"sha": "208c1bff0aae2389c1eb497623da895605d4e2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/208c1bff0aae2389c1eb497623da895605d4e2b1", "html_url": "https://github.com/rust-lang/rust/commit/208c1bff0aae2389c1eb497623da895605d4e2b1"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "75bd6babe16ec5607eb074e05a0ce1bd5513814c", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -593,6 +593,12 @@ impl Options {\n     }\n }\n \n+impl DebuggingOptions {\n+    pub fn ui_testing(&self) -> bool {\n+        self.ui_testing.unwrap_or(false)\n+    }\n+}\n+\n // The type of entry function, so users can have their own entry functions\n #[derive(Copy, Clone, PartialEq, Hash, Debug)]\n pub enum EntryFnType {"}, {"sha": "3683daf7a87de801419d69dc9ad8616056654beb", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -904,7 +904,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"run `dsymutil` and delete intermediate object files\"),\n-    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+    ui_testing: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n         \"embed LLVM bitcode in object files\"),"}, {"sha": "8e9de69539a86afb954047721f584b34092b8c20", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -869,7 +869,7 @@ fn default_emitter(\n                     short,\n                     external_macro_backtrace,\n                 );\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n@@ -890,7 +890,7 @@ fn default_emitter(\n                         external_macro_backtrace,\n                     ),\n                 };\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n@@ -901,7 +901,7 @@ fn default_emitter(\n                 json_rendered,\n                 external_macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -912,7 +912,7 @@ fn default_emitter(\n                 json_rendered,\n                 external_macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n     }\n }"}, {"sha": "25a892062fcbb01bd273fb8484c60d43b8d2a3b9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -273,7 +273,7 @@ impl Options {\n             error_format,\n             None,\n             debugging_options.treat_err_as_bug,\n-            debugging_options.ui_testing,\n+            debugging_options.ui_testing(),\n         );\n \n         // check for deprecated options"}, {"sha": "b0496dabc72134830ce7ff6aa7cb71e6e29c7832", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -449,7 +449,7 @@ fn main_options(options: config::Options) -> i32 {\n         options.error_format,\n         None,\n         options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing,\n+        options.debugging_options.ui_testing(),\n     );\n \n     match (options.should_test, options.markdown_input()) {\n@@ -466,7 +466,7 @@ fn main_options(options: config::Options) -> i32 {\n     let diag_opts = (\n         options.error_format,\n         options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing,\n+        options.debugging_options.ui_testing(),\n         options.edition,\n     );\n     let show_coverage = options.show_coverage;"}, {"sha": "901263c5bf8d2e18fa9c9d8e841c57171bcbd7c8", "filename": "src/test/ui/ui-testing-optout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftest%2Fui%2Fui-testing-optout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftest%2Fui%2Fui-testing-optout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -1,4 +1,4 @@\n-// disable-ui-testing-normalization\n+// compile-flags: -Z ui-testing=no\n \n // Line number < 10\n type A = B; //~ ERROR"}, {"sha": "691b8d3ccfd39c28e4862de975386f77c6e6e76c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -376,8 +376,6 @@ pub struct TestProps {\n     pub fail_mode: Option<FailMode>,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n-    // Do not pass `-Z ui-testing` to UI tests\n-    pub disable_ui_testing_normalization: bool,\n     // customized normalization rules\n     pub normalize_stdout: Vec<(String, String)>,\n     pub normalize_stderr: Vec<(String, String)>,\n@@ -422,7 +420,6 @@ impl TestProps {\n             fail_mode: None,\n             ignore_pass: false,\n             check_test_line_numbers_match: false,\n-            disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n             failure_status: -1,\n@@ -569,11 +566,6 @@ impl TestProps {\n                 self.ignore_pass = config.parse_ignore_pass(ln);\n             }\n \n-            if !self.disable_ui_testing_normalization {\n-                self.disable_ui_testing_normalization =\n-                    config.parse_disable_ui_testing_normalization(ln);\n-            }\n-\n             if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n                 self.normalize_stdout.push(rule);\n             }\n@@ -826,10 +818,6 @@ impl Config {\n         }\n     }\n \n-    fn parse_disable_ui_testing_normalization(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"disable-ui-testing-normalization\")\n-    }\n-\n     fn parse_check_test_line_numbers_match(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }"}, {"sha": "226a12c6734b70b404118b0f7a55f238726bd3c2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529a42a1a6b6523e8376610556d9890479b9524c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=529a42a1a6b6523e8376610556d9890479b9524c", "patch": "@@ -1863,17 +1863,13 @@ impl<'test> TestCx<'test> {\n                 if self.props.error_patterns.is_empty() {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n-                if !self.props.disable_ui_testing_normalization {\n-                    rustc.arg(\"-Zui-testing\");\n-                }\n+                rustc.arg(\"-Zui-testing\");\n             }\n             Ui => {\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n-                if !self.props.disable_ui_testing_normalization {\n-                    rustc.arg(\"-Zui-testing\");\n-                }\n+                rustc.arg(\"-Zui-testing\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}