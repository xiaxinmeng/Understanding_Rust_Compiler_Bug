{"sha": "2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDhiYTJiMjFlMzI2MmYyNWU0MjQ1ZTM3NTQ5MjA2YzhhM2JjMmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-22T11:44:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T11:44:05Z"}, "message": "Merge #5487\n\n5487: Setup global allocator in the correct crate r=matklad a=matklad\n\nIt worked before, but was roundabout\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6dfcadbf3b6a333777f22f54db773118bf1916d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dfcadbf3b6a333777f22f54db773118bf1916d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGCaFCRBK7hj4Ov3rIwAAdHIIADpght2AwPQKLTD5k50v3FLq\nPuncELCaUncSwOCcn6PoWhfovzQAgnhs3Q2GYNQKE80AWLlUI/8TkGEl9WyngMZi\nUBllAWnocrG2RulTz8qOWBodfFSgqShov56XLiIAJ4iJDvLtQ8XaCDITHUp0QkaE\nyK4zvaVBoDxL6UfZjWBduUz93YGXLotxzr862VpOZeLEgKQAF4usAWUXfpNVuyze\nIgUTrtkcqu4VgxT/gL+VBuTKqnaJJGl1WCz/eiFW9WRjS2wYJPfJM/6+5jqIT2g1\nJOKkbYKo6vuJnKjh+/p/d5+dgLPUKgr4iVsHARrFhecGAJ8JoRufC7ybu6qoKPQ=\n=m9tW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dfcadbf3b6a333777f22f54db773118bf1916d4\nparent 26932e0060b74525f74df5e31ae0c88997e5d667\nparent 9ad41eb9085cd7ceaf479f659a7071df81059b7c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595418245 +0000\ncommitter GitHub <noreply@github.com> 1595418245 +0000\n\nMerge #5487\n\n5487: Setup global allocator in the correct crate r=matklad a=matklad\n\nIt worked before, but was roundabout\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "html_url": "https://github.com/rust-lang/rust/commit/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26932e0060b74525f74df5e31ae0c88997e5d667", "url": "https://api.github.com/repos/rust-lang/rust/commits/26932e0060b74525f74df5e31ae0c88997e5d667", "html_url": "https://github.com/rust-lang/rust/commit/26932e0060b74525f74df5e31ae0c88997e5d667"}, {"sha": "9ad41eb9085cd7ceaf479f659a7071df81059b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad41eb9085cd7ceaf479f659a7071df81059b7c", "html_url": "https://github.com/rust-lang/rust/commit/9ad41eb9085cd7ceaf479f659a7071df81059b7c"}], "stats": {"total": 132, "additions": 13, "deletions": 119}, "files": [{"sha": "280d974327c18a8d1b7fcab781452367c4c0f28f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -359,12 +359,6 @@ dependencies = [\n  \"serde_json\",\n ]\n \n-[[package]]\n-name = \"fs_extra\"\n-version = \"1.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n-\n [[package]]\n name = \"fsevent\"\n version = \"2.0.2\"\n@@ -541,38 +535,6 @@ version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6\"\n \n-[[package]]\n-name = \"jemalloc-ctl\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c502a5ff9dd2924f1ed32ba96e3b65735d837b4bfd978d3161b1702e66aca4b7\"\n-dependencies = [\n- \"jemalloc-sys\",\n- \"libc\",\n- \"paste\",\n-]\n-\n-[[package]]\n-name = \"jemalloc-sys\"\n-version = \"0.3.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0d3b9f3f5c9b31aa0f5ed3260385ac205db665baa41d49bb8338008ae94ede45\"\n-dependencies = [\n- \"cc\",\n- \"fs_extra\",\n- \"libc\",\n-]\n-\n-[[package]]\n-name = \"jemallocator\"\n-version = \"0.3.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"43ae63fcfc45e99ab3d1b29a46782ad679e98436c3169d15a167a1108a724b69\"\n-dependencies = [\n- \"jemalloc-sys\",\n- \"libc\",\n-]\n-\n [[package]]\n name = \"jod-thread\"\n version = \"0.1.2\"\n@@ -874,25 +836,6 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n-[[package]]\n-name = \"paste\"\n-version = \"0.1.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"45ca20c77d80be666aef2b45486da86238fabe33e38306bd3118fe4af33fa880\"\n-dependencies = [\n- \"paste-impl\",\n- \"proc-macro-hack\",\n-]\n-\n-[[package]]\n-name = \"paste-impl\"\n-version = \"0.1.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d95a7db200b97ef370c8e6de0088252f7e0dfff7d047a28528e47456c0fc98b6\"\n-dependencies = [\n- \"proc-macro-hack\",\n-]\n-\n [[package]]\n name = \"paths\"\n version = \"0.1.0\"\n@@ -931,12 +874,6 @@ version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"237a5ed80e274dbc66f86bd59c1e25edc039660be53194b5fe0a482e0f2612ea\"\n \n-[[package]]\n-name = \"proc-macro-hack\"\n-version = \"0.5.16\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7e0456befd48169b9f13ef0f0ad46d492cf9d2dbb918bcf38e01eed4ce3ec5e4\"\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.19\"\n@@ -1199,10 +1136,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"backtrace\",\n  \"cfg-if\",\n- \"jemalloc-ctl\",\n- \"jemallocator\",\n  \"libc\",\n- \"mimalloc\",\n  \"once_cell\",\n  \"ra_arena\",\n ]\n@@ -1427,6 +1361,7 @@ dependencies = [\n  \"log\",\n  \"lsp-server\",\n  \"lsp-types\",\n+ \"mimalloc\",\n  \"parking_lot\",\n  \"pico-args\",\n  \"ra_cfg\","}, {"sha": "6c214501e4aa693a0266db7f7e1632d415674144", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -13,20 +13,12 @@ doctest = false\n ra_arena = { path = \"../ra_arena\" }\n once_cell = \"1.3.1\"\n backtrace = { version = \"0.3.44\", optional = true }\n-mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n \n-[target.'cfg(not(target_env = \"msvc\"))'.dependencies]\n-jemallocator = { version = \"0.3.2\", optional = true }\n-jemalloc-ctl = { version = \"0.3.3\", optional = true }\n-\n [features]\n-jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]\n cpu_profiler = []\n \n # Uncomment to enable for the whole crate graph\n # default = [ \"backtrace\" ]\n-# default = [ \"jemalloc\" ]\n-# default = [ \"mimalloc\" ]\n # default = [ \"cpu_profiler\" ]"}, {"sha": "ba5609703a6e4f66a6d23537f41d78249890ef2f", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -13,16 +13,6 @@ pub use crate::{\n     memory_usage::{Bytes, MemoryUsage},\n };\n \n-// We use jemalloc mainly to get heap usage statistics, actual performance\n-// difference is not measures.\n-#[cfg(all(feature = \"jemalloc\", not(target_env = \"msvc\")))]\n-#[global_allocator]\n-static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n-\n-#[cfg(all(feature = \"mimalloc\"))]\n-#[global_allocator]\n-static ALLOC: mimalloc::MiMalloc = mimalloc::MiMalloc;\n-\n /// Prints backtrace to stderr, useful for debugging.\n #[cfg(feature = \"backtrace\")]\n pub fn print_backtrace() {"}, {"sha": "ee79ec3eee25af08f590edd95cb35ee412400db2", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n+use std::fmt;\n \n use cfg_if::cfg_if;\n-use std::fmt;\n \n pub struct MemoryUsage {\n     pub allocated: Bytes,\n@@ -11,13 +11,7 @@ pub struct MemoryUsage {\n impl MemoryUsage {\n     pub fn current() -> MemoryUsage {\n         cfg_if! {\n-            if #[cfg(all(feature = \"jemalloc\", not(target_env = \"msvc\")))] {\n-                jemalloc_ctl::epoch::advance().unwrap();\n-                MemoryUsage {\n-                    allocated: Bytes(jemalloc_ctl::stats::allocated::read().unwrap()),\n-                    resident: Bytes(jemalloc_ctl::stats::resident::read().unwrap()),\n-                }\n-            } else if #[cfg(target_os = \"linux\")] {\n+            if #[cfg(target_os = \"linux\")] {\n                 // Note: This is incredibly slow.\n                 let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as usize;\n                 MemoryUsage { allocated: Bytes(alloc), resident: Bytes(0) }"}, {"sha": "023c104d16da8941b13baf36d75fb3e09830af8b", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -29,6 +29,7 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n threadpool = \"1.7.1\"\n rayon = \"1.3.1\"\n+mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n \n stdx = { path = \"../stdx\" }\n \n@@ -62,7 +63,3 @@ expect = { path = \"../expect\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n-\n-[features]\n-jemalloc = [ \"ra_prof/jemalloc\" ]\n-mimalloc = [ \"ra_prof/mimalloc\" ]"}, {"sha": "741a2a951c7eb02f6af9fa6cb3c916ed75682435", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -166,7 +166,7 @@ USAGE:\n FLAGS:\n     -o, --only              Only analyze items matching this path\n     -h, --help              Prints help information\n-        --memory-usage      Collect memory usage statistics (requires `--features jemalloc`)\n+        --memory-usage      Collect memory usage statistics\n         --randomize         Randomize order in which crates, modules, and items are processed\n         --parallel          Run type inference in parallel\n         --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n@@ -221,7 +221,7 @@ USAGE:\n \n FLAGS:\n     -h, --help          Prints help information\n-    --memory-usage      Collect memory usage statistics (requires `--features jemalloc`)\n+    --memory-usage      Collect memory usage statistics\n     --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n     --with-proc-macro   Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose"}, {"sha": "a473c916515f2dde35bee29b7b321b2941e51c21", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -16,6 +16,10 @@ use vfs::AbsPathBuf;\n \n use crate::args::HelpPrinted;\n \n+#[cfg(all(feature = \"mimalloc\"))]\n+#[global_allocator]\n+static ALLOC: mimalloc::MiMalloc = mimalloc::MiMalloc;\n+\n fn main() -> Result<()> {\n     setup_logging()?;\n     let args = match args::Args::parse()? {"}, {"sha": "2bb2f75bdf2c8ee875902e0d8a95739c7cfec04e", "filename": "docs/dev/README.md", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -397,13 +397,7 @@ To log all communication between the server and the client, there are two choice\n \n There are also two VS Code commands which might be of interest:\n \n-* `Rust Analyzer: Status` shows some memory-usage statistics. To take full\n-  advantage of it, you need to compile rust-analyzer with jemalloc support:\n-  ```\n-  $ cargo install --path crates/rust-analyzer --force --features jemalloc\n-  ```\n-\n-  There's an alias for this: `cargo xtask install --server --jemalloc`.\n+* `Rust Analyzer: Status` shows some memory-usage statistics.\n \n * `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection.\n "}, {"sha": "c198c0907707dcc1c66fc6f95c5c75cf6a77180e", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -57,8 +57,6 @@ fn dist_server() -> Result<()> {\n         env::set_var(\"CC\", \"clang\");\n         run!(\n             \"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\"\n-            // We'd want to add, but that requires setting the right linker somehow\n-            // --features=jemalloc\n         )?;\n     } else {\n         run!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\")?;"}, {"sha": "b25a6e301fcb87f807af78dd621ecedaa4b8c1f9", "filename": "xtask/src/install.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -24,7 +24,6 @@ pub struct ServerOpt {\n \n pub enum Malloc {\n     System,\n-    Jemalloc,\n     Mimalloc,\n }\n \n@@ -138,7 +137,6 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n \n     let malloc_feature = match opts.malloc {\n         Malloc::System => \"\",\n-        Malloc::Jemalloc => \"--features jemalloc\",\n         Malloc::Mimalloc => \"--features mimalloc\",\n     };\n     let res = run!(\"cargo install --path crates/rust-analyzer --locked --force {}\", malloc_feature);"}, {"sha": "53d3ce3e72b086c2a88cdaf73ce78350da074261", "filename": "xtask/src/main.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8ba2b21e3262f25e4245e37549206c8a3bc2d/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=2dd8ba2b21e3262f25e4245e37549206c8a3bc2d", "patch": "@@ -45,7 +45,6 @@ USAGE:\n FLAGS:\n         --client-code    Install only VS Code plugin\n         --server         Install only the language server\n-        --jemalloc       Use jemalloc for server\n         --mimalloc       Use mimalloc for server\n     -h, --help           Prints help information\n         \"\n@@ -62,15 +61,8 @@ FLAGS:\n                 return Ok(());\n             }\n \n-            let malloc = match (args.contains(\"--jemalloc\"), args.contains(\"--mimalloc\")) {\n-                (false, false) => Malloc::System,\n-                (true, false) => Malloc::Jemalloc,\n-                (false, true) => Malloc::Mimalloc,\n-                (true, true) => {\n-                    eprintln!(\"error: Cannot use both `--jemalloc` and `--mimalloc`\");\n-                    return Ok(());\n-                }\n-            };\n+            let malloc =\n+                if args.contains(\"--mimalloc\") { Malloc::Mimalloc } else { Malloc::System };\n \n             args.finish()?;\n "}]}