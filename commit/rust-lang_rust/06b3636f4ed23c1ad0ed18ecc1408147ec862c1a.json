{"sha": "06b3636f4ed23c1ad0ed18ecc1408147ec862c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjM2MzZmNGVkMjNjMWFkMGVkMThlY2MxNDA4MTQ3ZWM4NjJjMWE=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-27T11:55:00Z"}, "committer": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-03-24T14:16:58Z"}, "message": "Remove unnecessary passing of scope_expr_id", "tree": {"sha": "18d6fa47c0163aae09de1f78d44ba51d83b4e6a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d6fa47c0163aae09de1f78d44ba51d83b4e6a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEEgbkHgdnD1idvtMJ0QJ1+7h56cWoFAmBbSdoUHHl1c3VrdGFu\nQG1hZ3Vyby5kZXYACgkQQJ1+7h56cWrcDQ/8CvD/kXPMkNYdNHtb3RxHh60N0r8Z\nBCY/+o0AfLfwNJCA641gjZcwkC/uVZfyirCLrY/4OZc4ycUx5vA0QKR8GEsHFh1B\nNowr+e4Dc1CHOp4A/g8KRwwR4CFsBvZ2HSlw0uQpCcJFkqxo+gLClu7gR47RePBD\n0JSNHCd/BCx6IiUHWpIO9yDa0brfolDrfUvx7OseJ1lq3+GagEWAwGzFP/kGbK1K\nMUSs7zpHIxoXqw0411QpOhLGX3SRpSuRuz6YFJW+f9WE/4Qt7utJhTK+IHSPTXDA\nXVQIt5scJzSng0sCzsG3Z9rY6xiMPzX2QEVfPeba5Y0Uj5oCA1Jh8MVMR8P9WbV9\ngKiXaLGdDNEFeQylkaPWYhNPR07O5LPkTAYZS0FT6Rt+GZ+6qWcj0WKpIFFeDMD3\nSlI9KaVup02izOvVgKgGS6IociVi0H6XfO5MFdeqA9Dz9mxMaM1ihwACCWWFWZxc\nEPUiH9vzZUBFL+81KLYVb2TmQOHhkYIamJZP9eRLepvB/Qkbx/kGOl4NL4mPcP+J\nWO9nSpHjqmV8xy4Ybx8Ad4D0dKl92FwYQ3jzpbxTjltyIBi4WDl81rrn6/2TpWM7\njVsXbi+nstTC5hp9r06dFFJZoLR9YYQQWGF8fja3tb9ZbarHuTcBGOOiu+/xeEoN\n+UkTen5XOIifeuo=\n=x/g+\n-----END PGP SIGNATURE-----", "payload": "tree 18d6fa47c0163aae09de1f78d44ba51d83b4e6a6\nparent 120e5bdac00f9066491e34401d381b107aea06d6\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1614426900 +0900\ncommitter Yusuke Tanaka <yusuktan@maguro.dev> 1616595418 +0900\n\nRemove unnecessary passing of scope_expr_id\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a", "html_url": "https://github.com/rust-lang/rust/commit/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120e5bdac00f9066491e34401d381b107aea06d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/120e5bdac00f9066491e34401d381b107aea06d6", "html_url": "https://github.com/rust-lang/rust/commit/120e5bdac00f9066491e34401d381b107aea06d6"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "8bf7a5f522360789d462855cf362f38c0a7c3b7e", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b3636f4ed23c1ad0ed18ecc1408147ec862c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=06b3636f4ed23c1ad0ed18ecc1408147ec862c1a", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self_ty,\n                     scope_expr_id,\n                     ProbeScope::AllTraits,\n-                    |probe_cx| probe_cx.pick(scope_expr_id),\n+                    |probe_cx| probe_cx.pick(),\n                 )\n                 .ok()\n                 .map(|pick| pick.item)\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self_ty,\n             scope_expr_id,\n             scope,\n-            |probe_cx| probe_cx.pick(scope_expr_id),\n+            |probe_cx| probe_cx.pick(),\n         )\n     }\n \n@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // THE ACTUAL SEARCH\n \n-    fn pick(mut self, scope_expr_id: hir::HirId) -> PickResult<'tcx> {\n+    fn pick(mut self) -> PickResult<'tcx> {\n         assert!(self.method_name.is_some());\n \n         if let Some(r) = self.pick_core() {\n@@ -1082,7 +1082,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if let Some((kind, def_id)) = private_candidate {\n             return Err(MethodError::PrivateMatch(kind, def_id, out_of_scope_traits));\n         }\n-        let lev_candidate = self.probe_for_lev_candidate(scope_expr_id)?;\n+        let lev_candidate = self.probe_for_lev_candidate()?;\n \n         Err(MethodError::NoMatch(NoMatchData::new(\n             static_candidates,\n@@ -1585,10 +1585,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// Similarly to `probe_for_return_type`, this method attempts to find the best matching\n     /// candidate method where the method name may have been misspelt. Similarly to other\n     /// Levenshtein based suggestions, we provide at most one such suggestion.\n-    fn probe_for_lev_candidate(\n-        &mut self,\n-        scope_expr_id: hir::HirId,\n-    ) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n+    fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n         debug!(\"probing for method names similar to {:?}\", self.method_name);\n \n         let steps = self.steps.clone();\n@@ -1602,7 +1599,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.orig_steps_var_values.clone(),\n                 steps,\n                 IsSuggestion(true),\n-                scope_expr_id,\n+                self.scope_expr_id,\n             );\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();"}]}