{"sha": "dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzMwN2IyZmEwNmViYzlkNWQ2YWFkOWNmNzhlYzM3ZGQ5MDFkM2U=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-04-01T14:14:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-01T14:14:52Z"}, "message": "Merge pull request #2584 from sinkuu/cleanup\n\nMisc cleanups", "tree": {"sha": "f8c25739315a38c2a29673d2abfebab62b827e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c25739315a38c2a29673d2abfebab62b827e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawOlcCRBK7hj4Ov3rIwAAdHIIAKAsWCDrHb2kmiyyzkKmuK0n\nIXxnlBFeQ3PAET9pI9V6Q1wojilaSd3inGb4hUiQCKxsgzMalYsQNkMlPOjNQ6V0\n4p1vAl0382x635hfouYH4mUdTv/zadYNzcsnW7YkLv+8eUkO1HLCIOXTHzA/1/m1\nAqnTpQZ6Us0fG5871R66ULLK0CXH8ZdyZgi+5bYR/YtZKy09BhBrjYeDaVLXKwgO\nnBfEI0m3nNEmw6XXyOPnrqPYesxlj955VS/b4+3Cn3JKIyK0N8E4I3vIEDY30v9Q\nZBqPpXbrUPrF+ePKZ8GiLMtbemju1bL/bBHhvlIJ0FG6yn4/8pLaJpE3NAjgCBc=\n=apTK\n-----END PGP SIGNATURE-----\n", "payload": "tree f8c25739315a38c2a29673d2abfebab62b827e5e\nparent e2d801f11e9e7a2de5481e46ee458d0746b9e906\nparent 56e10aa6e9aca94a61ff2eeaee6416ee374115cd\nauthor Seiichi Uchida <seuchida@gmail.com> 1522592092 +0900\ncommitter GitHub <noreply@github.com> 1522592092 +0900\n\nMerge pull request #2584 from sinkuu/cleanup\n\nMisc cleanups"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "html_url": "https://github.com/rust-lang/rust/commit/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d801f11e9e7a2de5481e46ee458d0746b9e906", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d801f11e9e7a2de5481e46ee458d0746b9e906", "html_url": "https://github.com/rust-lang/rust/commit/e2d801f11e9e7a2de5481e46ee458d0746b9e906"}, {"sha": "56e10aa6e9aca94a61ff2eeaee6416ee374115cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e10aa6e9aca94a61ff2eeaee6416ee374115cd", "html_url": "https://github.com/rust-lang/rust/commit/56e10aa6e9aca94a61ff2eeaee6416ee374115cd"}], "stats": {"total": 97, "additions": 31, "deletions": 66}, "files": [{"sha": "6c3b6d1033ddc4edff346354831399a131f7a3c4", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -104,7 +104,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     };\n     let parent_rewrite = parent\n         .rewrite(context, parent_shape)\n-        .map(|parent_rw| parent_rw + &repeat_try(prefix_try_num))?;\n+        .map(|parent_rw| parent_rw + &\"?\".repeat(prefix_try_num))?;\n     let parent_rewrite_contains_newline = parent_rewrite.contains('\\n');\n     let is_small_parent = parent_rewrite.len() <= context.config.tab_spaces();\n \n@@ -297,7 +297,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n             join_rewrites(&rewrites, &connector)\n         )\n     };\n-    let result = format!(\"{}{}\", result, repeat_try(suffix_try_num));\n+    let result = format!(\"{}{}\", result, \"?\".repeat(suffix_try_num));\n     if context.config.indent_style() == IndentStyle::Visual {\n         wrap_str(result, context.config.max_width(), shape)\n     } else {\n@@ -316,20 +316,14 @@ fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n     })\n }\n \n-// Try to rewrite and replace the last non-try child. Return `true` if\n-// replacing succeeds.\n-fn repeat_try(try_count: usize) -> String {\n-    iter::repeat(\"?\").take(try_count).collect::<String>()\n-}\n-\n fn rewrite_try(\n     expr: &ast::Expr,\n     try_count: usize,\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n     let sub_expr = expr.rewrite(context, shape.sub_width(try_count)?)?;\n-    Some(format!(\"{}{}\", sub_expr, repeat_try(try_count)))\n+    Some(format!(\"{}{}\", sub_expr, \"?\".repeat(try_count)))\n }\n \n fn join_rewrites(rewrites: &[String], connector: &str) -> String {\n@@ -340,7 +334,7 @@ fn join_rewrites(rewrites: &[String], connector: &str) -> String {\n         if rewrite != \"?\" {\n             result.push_str(connector);\n         }\n-        result.push_str(&rewrite[..]);\n+        result.push_str(&rewrite);\n     }\n \n     result"}, {"sha": "eca206a75fe6c9efe1d1fa613a43589f5f0ab3a2", "filename": "src/config/options.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -271,13 +271,7 @@ impl IgnoreList {\n     }\n \n     fn skip_file_inner(&self, file: &Path) -> bool {\n-        for path in &self.0 {\n-            if file.starts_with(path) {\n-                return true;\n-            }\n-        }\n-\n-        false\n+        self.0.iter().any(|path| file.starts_with(path))\n     }\n \n     pub fn skip_file(&self, file: &FileName) -> bool {"}, {"sha": "3ff9455d5f79e47553091350eaccdabe97f1a429", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -32,16 +32,7 @@ fn prune_files(files: Vec<&str>) -> Vec<&str> {\n \n     let mut pruned_prefixes = vec![];\n     for p1 in prefixes {\n-        let mut include = true;\n-        if !p1.starts_with(\"src/bin/\") {\n-            for p2 in &pruned_prefixes {\n-                if p1.starts_with(p2) {\n-                    include = false;\n-                    break;\n-                }\n-            }\n-        }\n-        if include {\n+        if p1.starts_with(\"src/bin/\") || pruned_prefixes.iter().all(|p2| !p1.starts_with(p2)) {\n             pruned_prefixes.push(p1);\n         }\n     }\n@@ -50,17 +41,10 @@ fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     files\n         .into_iter()\n         .filter(|f| {\n-            let mut include = true;\n             if f.ends_with(\"mod.rs\") || f.ends_with(\"lib.rs\") || f.starts_with(\"src/bin/\") {\n                 return true;\n             }\n-            for pp in &pruned_prefixes {\n-                if f.starts_with(pp) {\n-                    include = false;\n-                    break;\n-                }\n-            }\n-            include\n+            pruned_prefixes.iter().all(|pp| !f.starts_with(pp))\n         })\n         .collect()\n }"}, {"sha": "621b2a2074dbefaa01252df1da87c1a70d0931d3", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -204,21 +204,21 @@ impl<'a> FnSig<'a> {\n         fn_kind: &'a visit::FnKind,\n         generics: &'a ast::Generics,\n         decl: &'a ast::FnDecl,\n-        defualtness: ast::Defaultness,\n+        defaultness: ast::Defaultness,\n     ) -> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n                 decl,\n                 generics,\n                 abi,\n                 constness: constness.node,\n-                defaultness: defualtness,\n+                defaultness,\n                 unsafety,\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, method_sig, vis, _) => {\n                 let mut fn_sig = FnSig::from_method_sig(method_sig, generics);\n-                fn_sig.defaultness = defualtness;\n+                fn_sig.defaultness = defaultness;\n                 if let Some(vis) = vis {\n                     fn_sig.visibility = vis.clone();\n                 }\n@@ -1287,7 +1287,7 @@ fn format_tuple_struct(\n         result.push(')');\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n-        let fields = &fields.iter().collect::<Vec<_>>()[..];\n+        let fields = &fields.iter().collect::<Vec<_>>();\n         result = overflow::rewrite_with_parens(\n             context,\n             &result,\n@@ -2312,7 +2312,7 @@ fn rewrite_generics(\n         return Some(ident.to_owned());\n     }\n \n-    let params = &generics.params.iter().map(|e| &*e).collect::<Vec<_>>()[..];\n+    let params = &generics.params.iter().map(|e| &*e).collect::<Vec<_>>();\n     overflow::rewrite_with_angle_brackets(context, ident, params, shape, span)\n }\n "}, {"sha": "151b3acada27e312154b4edd6cc8043e066a5d2f", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -34,7 +34,6 @@ extern crate unicode_segmentation;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, BufRead, Write};\n-use std::iter::repeat;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -200,7 +199,7 @@ impl FormatReport {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n \n                 // First line: the overview of error\n                 t.fg(term::color::RED)?;\n@@ -259,8 +258,8 @@ impl FormatReport {\n }\n \n fn target_str(space_len: usize, target_len: usize) -> String {\n-    let empty_line: String = repeat(\" \").take(space_len).collect();\n-    let overflowed: String = repeat(\"^\").take(target_len).collect();\n+    let empty_line = \" \".repeat(space_len);\n+    let overflowed = \"^\".repeat(target_len);\n     empty_line + &overflowed\n }\n \n@@ -270,7 +269,7 @@ impl fmt::Display for FormatReport {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n \n                 let error_line_buffer = if error.line_buffer.is_empty() {\n                     String::from(\" \")"}, {"sha": "aded2508aaa33f327f184968464c85f574ef74dd", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -239,7 +239,7 @@ pub fn rewrite_macro_inner(\n             overflow::rewrite_with_parens(\n                 context,\n                 &macro_name,\n-                &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>()[..],\n+                &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>(),\n                 shape,\n                 mac.span,\n                 context.config.width_heuristics().fn_call_width,\n@@ -301,7 +301,7 @@ pub fn rewrite_macro_inner(\n                     };\n                 }\n                 // Convert `MacroArg` into `ast::Expr`, as `rewrite_array` only accepts the latter.\n-                let arg_vec = &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>()[..];\n+                let arg_vec = &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>();\n                 let rewrite = rewrite_array(\n                     macro_name,\n                     arg_vec,\n@@ -991,7 +991,7 @@ fn next_space(tok: &Token) -> SpaceState {\n /// when the macro is not an instance of try! (or parsing the inner expression\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::Expr> {\n-    if &format!(\"{}\", mac.node.path)[..] == \"try\" {\n+    if &format!(\"{}\", mac.node.path) == \"try\" {\n         let ts: TokenStream = mac.node.tts.clone().into();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n "}, {"sha": "b27ef9b876976160fb8245dacb8bfc9c7b07e714", "filename": "src/missed_spans.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n-use std::iter::repeat;\n \n use syntax::codemap::{BytePos, FileName, Pos, Span};\n \n@@ -128,7 +127,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n-        let blank_lines: String = repeat('\\n').take(newline_count).collect();\n+        let blank_lines = \"\\n\".repeat(newline_count);\n         self.push_str(&blank_lines);\n     }\n \n@@ -182,7 +181,7 @@ impl<'a> FmtVisitor<'a> {\n         let mut status = SnippetStatus::new(char_pos.line);\n \n         let snippet = &*match self.config.write_mode() {\n-            WriteMode::Coverage => replace_chars(old_snippet),\n+            WriteMode::Coverage => Cow::from(replace_chars(old_snippet)),\n             _ => Cow::from(old_snippet),\n         };\n \n@@ -327,11 +326,9 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n-fn replace_chars(string: &str) -> Cow<str> {\n-    Cow::from(\n-        string\n-            .chars()\n-            .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n-            .collect::<String>(),\n-    )\n+fn replace_chars(string: &str) -> String {\n+    string\n+        .chars()\n+        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n+        .collect()\n }"}, {"sha": "bbfe55ec6e9954ab572170f0835e32b1e2284aeb", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -361,15 +361,12 @@ fn rewrite_tuple_pat(\n     // add comma if `(x,)`\n     let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n     let path_str = path_str.unwrap_or_default();\n-    let mut pat_ref_vec = Vec::with_capacity(pat_vec.len());\n-    for pat in pat_vec {\n-        pat_ref_vec.push(pat);\n-    }\n+    let pat_ref_vec = pat_vec.iter().collect::<Vec<_>>();\n \n     overflow::rewrite_with_parens(\n         &context,\n         &path_str,\n-        &pat_ref_vec[..],\n+        &pat_ref_vec,\n         shape,\n         span,\n         context.config.max_width(),\n@@ -408,7 +405,7 @@ fn count_wildcard_suffix_len(\n     }) {\n         suffix_len += 1;\n \n-        if item.pre_comment.is_some() || item.post_comment.is_some() {\n+        if item.has_comment() {\n             break;\n         }\n     }"}, {"sha": "5be963481294ad730cf9f828ec860c01289dd2b8", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -247,7 +247,7 @@ fn rewrite_segment(\n                 let generics_str = overflow::rewrite_with_angle_brackets(\n                     context,\n                     \"\",\n-                    &param_list.iter().map(|e| &*e).collect::<Vec<_>>()[..],\n+                    &param_list.iter().map(|e| &*e).collect::<Vec<_>>(),\n                     shape,\n                     mk_sp(*span_lo, span_hi),\n                 )?;"}, {"sha": "d15d2ad7aefb88e72a38feded51773825ca7e793", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=dec307b2fa06ebc9d5d6aad9cf78ec37dd901d3e", "patch": "@@ -335,7 +335,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n-                    .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo());\n+                    .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n                 let rw = format_impl(&self.get_context(), item, self.block_indent, where_span_end);\n                 self.push_rewrite(item.span, rw);\n             }"}]}