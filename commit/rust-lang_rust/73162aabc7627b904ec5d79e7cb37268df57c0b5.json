{"sha": "73162aabc7627b904ec5d79e7cb37268df57c0b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTYyYWFiYzc2MjdiOTA0ZWM1ZDc5ZTdjYjM3MjY4ZGY1N2MwYjU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:21Z"}, "message": "Rollup merge of #88573 - camelid:rustdoc-assoc-panic, r=GuillaumeGomez\n\nrustdoc: Don't panic on ambiguous inherent associated types\n\nInstead, return `Type::Infer` since compilation should fail anyway.\nThat's how rustdoc handles `hir::TyKind::Err`s, so this just extends\nthat behavior to `ty::Err`s when analyzing associated types.\n\nFor some reason, the error is printed twice with rustdoc (though only\nonce with rustc). I'm not sure why that is, but it's better than\npanicking.\n\nThis commit also makes rustdoc fail early in the non-projection,\nnon-error case, instead of returning a `Res::Err` that would likely\ncause rustdoc to panic later on. This change is originally from #88379.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "e73d559c98514d0004fa7baba543af6dfb5f0c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e73d559c98514d0004fa7baba543af6dfb5f0c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73162aabc7627b904ec5d79e7cb37268df57c0b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV9CRBK7hj4Ov3rIwAAsAgIAGD5cGnC0yCczgpAfJuXU0pu\nCooWrFd/uMcZEqDBwa5+CcVjJcqg8EnTobdxF5B1hYvc9nBXAjSmYMhMx35NVP0X\n3k1/sHcMKZYSNtbtvuwMViCmQW5qkoW6OTWIWK2tDbxtw1lFA77THcy/2eZcfu2U\nGgpFO9RMtVtxOLc1wpag9gbwBQFTCgHYSuwp5Sy/G/W43QtBD6Vc15FTt6Oex+XR\nfWaI2yeS7b/yMCV/GCbbPj3KAVIQiLZQI6wESkmaHRUR/TLgkbhQvbgTJ+2vDttB\nN8ATfhd5ko+hhMo2+Lbctw2cxCUT4wBgZuc52KZPN8OePB5xadnwfQr/90gyAsk=\n=Ttdn\n-----END PGP SIGNATURE-----\n", "payload": "tree e73d559c98514d0004fa7baba543af6dfb5f0c8b\nparent f4193346fe4378dfae003a6fb22b324a7ed0c0e6\nparent 50983ba6df8effdeae993b2d4ed5eefe8c863bbf\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602621 +0200\ncommitter GitHub <noreply@github.com> 1630602621 +0200\n\nRollup merge of #88573 - camelid:rustdoc-assoc-panic, r=GuillaumeGomez\n\nrustdoc: Don't panic on ambiguous inherent associated types\n\nInstead, return `Type::Infer` since compilation should fail anyway.\nThat's how rustdoc handles `hir::TyKind::Err`s, so this just extends\nthat behavior to `ty::Err`s when analyzing associated types.\n\nFor some reason, the error is printed twice with rustdoc (though only\nonce with rustc). I'm not sure why that is, but it's better than\npanicking.\n\nThis commit also makes rustdoc fail early in the non-projection,\nnon-error case, instead of returning a `Res::Err` that would likely\ncause rustdoc to panic later on. This change is originally from #88379.\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73162aabc7627b904ec5d79e7cb37268df57c0b5", "html_url": "https://github.com/rust-lang/rust/commit/73162aabc7627b904ec5d79e7cb37268df57c0b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73162aabc7627b904ec5d79e7cb37268df57c0b5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4193346fe4378dfae003a6fb22b324a7ed0c0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4193346fe4378dfae003a6fb22b324a7ed0c0e6", "html_url": "https://github.com/rust-lang/rust/commit/f4193346fe4378dfae003a6fb22b324a7ed0c0e6"}, {"sha": "50983ba6df8effdeae993b2d4ed5eefe8c863bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/50983ba6df8effdeae993b2d4ed5eefe8c863bbf", "html_url": "https://github.com/rust-lang/rust/commit/50983ba6df8effdeae993b2d4ed5eefe8c863bbf"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "a9baa1c31aeb8785958feb2b360053fb09b48d6c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=73162aabc7627b904ec5d79e7cb37268df57c0b5", "patch": "@@ -1311,10 +1311,11 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n-            let res = if let ty::Projection(proj) = ty.kind() {\n-                Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id)\n-            } else {\n-                Res::Err\n+            let res = match ty.kind() {\n+                ty::Projection(proj) => Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id),\n+                // Rustdoc handles `ty::Error`s by turning them into `Type::Infer`s.\n+                ty::Error(_) => return Type::Infer,\n+                _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n             };\n             let trait_path = hir::Path { span, res, segments: &[] }.clean(cx);\n             Type::QPath {\n@@ -1379,6 +1380,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 DynTrait(bounds, lifetime)\n             }\n             TyKind::BareFn(ref barefn) => BareFunction(Box::new(barefn.clean(cx))),\n+            // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n         }"}, {"sha": "3ad56aebc21c580b28a4638d53dde913c289fa43", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs?ref=73162aabc7627b904ec5d79e7cb37268df57c0b5", "patch": "@@ -0,0 +1,17 @@\n+// This test ensures that rustdoc does not panic on inherented associated types\n+// that are referred to without fully-qualified syntax.\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub type AssocTy = usize;\n+    pub const AssocConst: Self::AssocTy = 42;\n+    //~^ ERROR ambiguous associated type\n+    //~| HELP use fully-qualified syntax\n+    // FIXME: for some reason, the error is shown twice with rustdoc but only once with rustc\n+    //~| ERROR ambiguous associated type\n+    //~| HELP use fully-qualified syntax\n+}"}, {"sha": "b963b722f66201708db4650dba2ad194c31b2597", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73162aabc7627b904ec5d79e7cb37268df57c0b5/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr?ref=73162aabc7627b904ec5d79e7cb37268df57c0b5", "patch": "@@ -0,0 +1,15 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n+   |\n+LL |     pub const AssocConst: Self::AssocTy = 42;\n+   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n+   |\n+LL |     pub const AssocConst: Self::AssocTy = 42;\n+   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0223`."}]}