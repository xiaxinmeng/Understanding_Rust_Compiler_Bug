{"sha": "d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "node_id": "C_kwDOAAsO6NoAKGQ4OWQyMTQxMmJjYjJmMDFiODNlZDhkMmZlNTE5OWI2YmYxMDExZjU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-04T10:41:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-04T10:41:01Z"}, "message": "Rollup merge of #102489 - compiler-errors:issue-102074, r=oli-obk\n\nNormalize substs before resolving instance in `NoopMethodCall` lint\n\nFixes #102074\n\nr? types", "tree": {"sha": "f99254ffe82959a67db624901b3ae5f02a46bf9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99254ffe82959a67db624901b3ae5f02a46bf9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPA29CRBK7hj4Ov3rIwAAQqIIAHvUZlXMzAPy5K6C/x9yMt8Z\nX85hreBea7D6/zkJ+2vXihhQ1DLjrX/wrnaaSfn2sYP9RbqgYwHYTc7//yu8wlgh\nxYDHaidmcMqSVXqTigjs41p/AKXNzoMZZnf4lFFW+F/nKfbSkPIlXLM6go2dXqh8\n0Xi8/bprHkwcTLOCrvBwjHdwjqBfbDRlBBSLsI0jUfgCs4El0VFK6RIfeAmqYffX\ncuReRJcjFb89oAkGgAG9/e4GGwuEYYfJIEZz3Jf892wRci1v5KdKxUfEg+pjIFfL\nqhpA7+t1RzkWKpMHsWcsz46KS72jikifv5J3ikx2JPMS59X5WKhDVQvsllqK7e8=\n=pVRA\n-----END PGP SIGNATURE-----\n", "payload": "tree f99254ffe82959a67db624901b3ae5f02a46bf9b\nparent f24d00d8b3f6a79fdf5b3352fa9fb84003c917d3\nparent e1b313af46b74a446d7772a261e006c199a5b2e0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1664880061 +0530\ncommitter GitHub <noreply@github.com> 1664880061 +0530\n\nRollup merge of #102489 - compiler-errors:issue-102074, r=oli-obk\n\nNormalize substs before resolving instance in `NoopMethodCall` lint\n\nFixes #102074\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "html_url": "https://github.com/rust-lang/rust/commit/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24d00d8b3f6a79fdf5b3352fa9fb84003c917d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24d00d8b3f6a79fdf5b3352fa9fb84003c917d3", "html_url": "https://github.com/rust-lang/rust/commit/f24d00d8b3f6a79fdf5b3352fa9fb84003c917d3"}, {"sha": "e1b313af46b74a446d7772a261e006c199a5b2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b313af46b74a446d7772a261e006c199a5b2e0", "html_url": "https://github.com/rust-lang/rust/commit/e1b313af46b74a446d7772a261e006c199a5b2e0"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "9a62afd3cafb78488d19001cbd56aa82ccf700af", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "patch": "@@ -1,5 +1,4 @@\n use crate::context::LintContext;\n-use crate::rustc_middle::ty::TypeVisitable;\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_errors::fluent;\n@@ -46,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n-        let (trait_id, did) = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n+        let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n             // Verify we are dealing with a method/associated function.\n             Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n                 // Check that we're dealing with a trait method for one of the traits we care about.\n@@ -56,21 +55,17 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                         Some(sym::Borrow | sym::Clone | sym::Deref)\n                     ) =>\n                 {\n-                    (trait_id, did)\n+                    did\n                 }\n                 _ => return,\n             },\n             _ => return,\n         };\n-        let substs = cx.typeck_results().node_substs(expr.hir_id);\n-        if substs.needs_subst() {\n-            // We can't resolve on types that require monomorphization, so we don't handle them if\n-            // we need to perform substitution.\n-            return;\n-        }\n-        let param_env = cx.tcx.param_env(trait_id);\n+        let substs = cx\n+            .tcx\n+            .normalize_erasing_regions(cx.param_env, cx.typeck_results().node_substs(expr.hir_id));\n         // Resolve the trait method instance.\n-        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) else {\n+        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, cx.param_env, did, substs) else {\n             return\n         };\n         // (Re)check that it implements the noop diagnostic."}, {"sha": "66d15cf1215dadf7898b08515e657f6df3d67e05", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-102074.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs?ref=d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// Checks that the NoopMethodCall lint doesn't call Instance::resolve on unresolved consts\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128CipherKey([u8; Aes128Cipher::KEY_LEN]);\n+\n+impl Aes128CipherKey {\n+    pub fn new(key: &[u8; Aes128Cipher::KEY_LEN]) -> Self {\n+        Self(key.clone())\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128Cipher;\n+\n+impl Aes128Cipher {\n+    const KEY_LEN: usize = 16;\n+}\n+\n+fn main() {}"}, {"sha": "89b296635954204a1cbcec15cf5c01093caaee5c", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "patch": "@@ -46,6 +46,7 @@ fn main() {\n \n fn generic<T>(non_clone_type: &PlainType<T>) {\n     non_clone_type.clone();\n+    //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n }\n \n fn non_generic(non_clone_type: &PlainType<u32>) {"}, {"sha": "6a904d01abc8e92fc8683abfff27662ad574a7c8", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "patch": "@@ -28,12 +28,20 @@ LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n    = note: the type `&PlainType<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n \n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:52:19\n+  --> $DIR/noop-method-call.rs:48:19\n+   |\n+LL |     non_clone_type.clone();\n+   |                   ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&PlainType<T>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+\n+warning: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/noop-method-call.rs:53:19\n    |\n LL |     non_clone_type.clone();\n    |                   ^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 4 warnings emitted\n+warning: 5 warnings emitted\n "}]}