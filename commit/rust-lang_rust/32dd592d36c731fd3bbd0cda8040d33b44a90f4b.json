{"sha": "32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZGQ1OTJkMzZjNzMxZmQzYmJkMGNkYTgwNDBkMzNiNDRhOTBmNGI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T15:40:10Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:30:49Z"}, "message": "collections: fix fallout", "tree": {"sha": "1b42124db43d375426eca6893e0f5165689ea5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b42124db43d375426eca6893e0f5165689ea5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "html_url": "https://github.com/rust-lang/rust/commit/32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/comments", "author": null, "committer": null, "parents": [{"sha": "234dc4d4ddc19466ec3393210c2949d8ca0eba41", "url": "https://api.github.com/repos/rust-lang/rust/commits/234dc4d4ddc19466ec3393210c2949d8ca0eba41", "html_url": "https://github.com/rust-lang/rust/commit/234dc4d4ddc19466ec3393210c2949d8ca0eba41"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "9674885c857c41c74d812f328fa197e152e2fc66", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "patch": "@@ -164,6 +164,8 @@ pub struct Bitv {\n     nbits: uint\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n // FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n impl Index<uint,bool> for Bitv {\n     #[inline]\n@@ -176,6 +178,21 @@ impl Index<uint,bool> for Bitv {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+// FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n+impl Index<uint> for Bitv {\n+    type Output = bool;\n+\n+    #[inline]\n+    fn index(&self, i: &uint) -> &bool {\n+        if self.get(*i).expect(\"index out of bounds\") {\n+            &TRUE\n+        } else {\n+            &FALSE\n+        }\n+    }\n+}\n+\n /// Computes how many blocks are needed to store that many bits\n fn blocks_for_bits(bits: uint) -> uint {\n     // If we want 17 bits, dividing by 32 will produce 0. So we add 1 to make sure we"}, {"sha": "e86e93266652a5fbcf0096617cf52e400f0d8347", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "patch": "@@ -898,6 +898,8 @@ impl<K: Show, V: Show> Show for BTreeMap<K, V> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<K: Ord, Sized? Q, V> Index<Q, V> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord\n@@ -907,6 +909,20 @@ impl<K: Ord, Sized? Q, V> Index<Q, V> for BTreeMap<K, V>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[stable]\n+impl<K: Ord, Sized? Q, V> Index<Q> for BTreeMap<K, V>\n+    where Q: BorrowFrom<K> + Ord\n+{\n+    type Output = V;\n+\n+    fn index(&self, key: &Q) -> &V {\n+        self.get(key).expect(\"no entry found for key\")\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<K: Ord, Sized? Q, V> IndexMut<Q, V> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord\n@@ -916,6 +932,18 @@ impl<K: Ord, Sized? Q, V> IndexMut<Q, V> for BTreeMap<K, V>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[stable]\n+impl<K: Ord, Sized? Q, V> IndexMut<Q> for BTreeMap<K, V>\n+    where Q: BorrowFrom<K> + Ord\n+{\n+    type Output = V;\n+\n+    fn index_mut(&mut self, key: &Q) -> &mut V {\n+        self.get_mut(key).expect(\"no entry found for key\")\n+    }\n+}\n+\n /// Genericises over how to get the correct type of iterator from the correct type\n /// of Node ownership.\n trait Traverse<N> {"}, {"sha": "dd78ae03c5af7c1fca66e1086098f3542accdd20", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "patch": "@@ -1372,6 +1372,8 @@ impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<A> Index<uint, A> for RingBuf<A> {\n     #[inline]\n@@ -1380,6 +1382,19 @@ impl<A> Index<uint, A> for RingBuf<A> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[stable]\n+impl<A> Index<uint> for RingBuf<A> {\n+    type Output = A;\n+\n+    #[inline]\n+    fn index<'a>(&'a self, i: &uint) -> &'a A {\n+        self.get(*i).expect(\"Out of bounds access\")\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<A> IndexMut<uint, A> for RingBuf<A> {\n     #[inline]\n@@ -1388,6 +1403,17 @@ impl<A> IndexMut<uint, A> for RingBuf<A> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[stable]\n+impl<A> IndexMut<uint> for RingBuf<A> {\n+    type Output = A;\n+\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut A {\n+        self.get_mut(*i).expect(\"Out of bounds access\")\n+    }\n+}\n+\n #[stable]\n impl<A> FromIterator<A> for RingBuf<A> {\n     fn from_iter<T: Iterator<Item=A>>(iterator: T) -> RingBuf<A> {"}, {"sha": "073388018725a79d936e293a4e5c39eac0c21e98", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "patch": "@@ -1245,6 +1245,8 @@ impl<S: hash::Writer, T: Hash<S>> Hash<S> for Vec<T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[experimental = \"waiting on Index stability\"]\n impl<T> Index<uint,T> for Vec<T> {\n     #[inline]\n@@ -1253,13 +1255,36 @@ impl<T> Index<uint,T> for Vec<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[experimental = \"waiting on Index stability\"]\n+impl<T> Index<uint> for Vec<T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn index<'a>(&'a self, index: &uint) -> &'a T {\n+        &self.as_slice()[*index]\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IndexMut<uint,T> for Vec<T> {\n     #[inline]\n     fn index_mut<'a>(&'a mut self, index: &uint) -> &'a mut T {\n         &mut self.as_mut_slice()[*index]\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IndexMut<uint> for Vec<T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, index: &uint) -> &'a mut T {\n+        &mut self.as_mut_slice()[*index]\n+    }\n+}\n+\n impl<T> ops::Slice<uint, [T]> for Vec<T> {\n     #[inline]\n     fn as_slice_<'a>(&'a self) -> &'a [T] {"}, {"sha": "91edbc7b54e411ae7de9939fc5ac847adcdd0942", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dd592d36c731fd3bbd0cda8040d33b44a90f4b/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=32dd592d36c731fd3bbd0cda8040d33b44a90f4b", "patch": "@@ -562,6 +562,8 @@ impl<V> Extend<(uint, V)> for VecMap<V> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<V> Index<uint, V> for VecMap<V> {\n     #[inline]\n@@ -570,6 +572,18 @@ impl<V> Index<uint, V> for VecMap<V> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<V> Index<uint> for VecMap<V> {\n+    type Output = V;\n+\n+    #[inline]\n+    fn index<'a>(&'a self, i: &uint) -> &'a V {\n+        self.get(i).expect(\"key not present\")\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n #[stable]\n impl<V> IndexMut<uint, V> for VecMap<V> {\n     #[inline]\n@@ -578,6 +592,17 @@ impl<V> IndexMut<uint, V> for VecMap<V> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[stable]\n+impl<V> IndexMut<uint> for VecMap<V> {\n+    type Output = V;\n+\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut V {\n+        self.get_mut(i).expect(\"key not present\")\n+    }\n+}\n+\n macro_rules! iterator {\n     (impl $name:ident -> $elem:ty, $($getter:ident),+) => {\n         #[stable]"}]}