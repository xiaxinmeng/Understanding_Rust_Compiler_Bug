{"sha": "e7a344fb745a0a663e21be947b2619df05df6d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YTM0NGZiNzQ1YTBhNjYzZTIxYmU5NDdiMjYxOWRmMDVkZjZkMzE=", "commit": {"author": {"name": "XAMPPRocky", "email": "4464295+XAMPPRocky@users.noreply.github.com", "date": "2020-02-23T17:04:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-23T17:04:48Z"}, "message": "Update RELEASES.md\n\nCo-Authored-By: Jonas Schievink <jonasschievink@gmail.com>\r\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "6471c97e23f8a1ecd07d0aa20985d9a5de319195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6471c97e23f8a1ecd07d0aa20985d9a5de319195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a344fb745a0a663e21be947b2619df05df6d31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeUrCwCRBK7hj4Ov3rIwAAdHIIACqRgoyyBV4Ft6jW0D8fqJ9X\ngYk9mJkLomrxFiTYcBp5qtdm2ZQh6wQGCtNoWIHK5z+gfHExxYeCXLjOHbJ/ONWD\ns/TNK1ClDgl435eUAZ/XAZ55M321B2Cf2VavBdBC3uBb6nRmxPBMtWJ9z3ndzF3K\nYF8eGuuKkgaMGoj0MS2Xq1ljg996tGYVRm0Z3n0HvD3mWGhhrXhSTEPEV6i3tLHD\nOg/SvOGvaD3Gh46o8tNgh0EgvJkCu1fP0GBQi+LRbvVsGiwtGPyEtTS3KkvhYW27\nrn0teaDdeMYLgLy4Ya51IjQrfyyg57izQWCQpNWnKDdbpBfePV5hijP1bvhtRCk=\n=0wil\n-----END PGP SIGNATURE-----\n", "payload": "tree 6471c97e23f8a1ecd07d0aa20985d9a5de319195\nparent 32daa2aa38fafd731ddc27374dece22f38069bc8\nauthor XAMPPRocky <4464295+XAMPPRocky@users.noreply.github.com> 1582477488 +0100\ncommitter GitHub <noreply@github.com> 1582477488 +0100\n\nUpdate RELEASES.md\n\nCo-Authored-By: Jonas Schievink <jonasschievink@gmail.com>\r\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a344fb745a0a663e21be947b2619df05df6d31", "html_url": "https://github.com/rust-lang/rust/commit/e7a344fb745a0a663e21be947b2619df05df6d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a344fb745a0a663e21be947b2619df05df6d31/comments", "author": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32daa2aa38fafd731ddc27374dece22f38069bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/32daa2aa38fafd731ddc27374dece22f38069bc8", "html_url": "https://github.com/rust-lang/rust/commit/32daa2aa38fafd731ddc27374dece22f38069bc8"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "2a2bcfb0ea247abb24ba0764e5ba7337844e0085", "filename": "RELEASES.md", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e7a344fb745a0a663e21be947b2619df05df6d31/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7a344fb745a0a663e21be947b2619df05df6d31/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e7a344fb745a0a663e21be947b2619df05df6d31", "patch": "@@ -3,9 +3,6 @@ Version 1.42.0 (2020-03-12)\n \n Language\n --------\n-- [You can now use `#[repr(transparent)]` on univariant `enum`s.][68122] Meaning\n-  that you can create an enum that has the exact layout and ABI of the type\n-  it contains.\n - [You can now use the slice pattern syntax with subslices.][67712] e.g.\n   ```rust\n   fn foo(words: &[&str]) {\n@@ -16,18 +13,34 @@ Language\n       }\n   }\n   ```\n-  <!-- TODO -->\n-- [Merge `TraitItem` & `ImplItem into `AssocItem`][67131]\n+- [You can now use `#[repr(transparent)]` on univariant `enum`s.][68122] Meaning\n+  that you can create an enum that has the exact layout and ABI of the type\n+  it contains.\n+- [There are some *syntax-only* changes:][67131]\n+   - `default` is syntactically allowed before items in `trait` definitions.\n+   - Items in `impl`s (i.e. `const`s, `type`s, and `fn`s) may syntactically\n+     leave out their bodies in favor of `;`.\n+   - Bounds on associated types in `impl`s are now syntactically allowed\n+     (e.g. `type Foo: Ord;`).\n+   - `...` (the C-variadic type) may occur syntactically directly as the type of\n+      any function parameter.\n+  \n+  These are still rejected *semantically*, so you will likely receive an error\n+  but these changes can be seen and parsed by procedural macros and\n+  conditional compilation.\n \n Compiler\n --------\n-- [Added tier 3\\* support for `armv7a-none-eabi`.][68253]\n-- [Added tier 3 support for `riscv64gc-unknown-linux-gnu`.][68037]\n+- [Added tier 2\\* support for `armv7a-none-eabi`.][68253]\n+- [Added tier 2 support for `riscv64gc-unknown-linux-gnu`.][68339]\n - [`Option::{expect,unwrap}` and\n    `Result::{expect, expect_err, unwrap, unwrap_err}` now produce panic messages\n    pointing to the location where they were called, rather than\n    `core`'s internals. ][67887]\n \n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n Libraries\n ---------\n - [`iter::Empty<T>` now implements `Send` and `Sync` for any `T`.][68348]\n@@ -40,14 +53,14 @@ Libraries\n \n Stabilized APIs\n ---------------\n+- [`CondVar::wait_while`]\n+- [`CondVar::wait_timeout_while`]\n - [`DebugMap::key`]\n - [`DebugMap::value`]\n - [`ManuallyDrop::take`]\n - [`matches!`]\n - [`ptr::slice_from_raw_parts_mut`]\n - [`ptr::slice_from_raw_parts`]\n-- [`wait_timeout_while`]\n-- [`wait_while`]\n \n Cargo\n -----\n@@ -62,7 +75,7 @@ Compatibility Notes\n [68253]: https://github.com/rust-lang/rust/pull/68253/\n [68348]: https://github.com/rust-lang/rust/pull/68348/\n [67935]: https://github.com/rust-lang/rust/pull/67935/\n-[68037]: https://github.com/rust-lang/rust/pull/68037/\n+[68339]: https://github.com/rust-lang/rust/pull/68339/\n [68122]: https://github.com/rust-lang/rust/pull/68122/\n [67712]: https://github.com/rust-lang/rust/pull/67712/\n [67887]: https://github.com/rust-lang/rust/pull/67887/\n@@ -78,7 +91,8 @@ Compatibility Notes\n [`matches!`]: https://doc.rust-lang.org/stable/std/macro.matches.html\n [`ptr::slice_from_raw_parts_mut`]: https://doc.rust-lang.org/stable/std/ptr/fn.slice_from_raw_parts_mut.html\n [`ptr::slice_from_raw_parts`]: https://doc.rust-lang.org/stable/std/ptr/fn.slice_from_raw_parts.html\n-[`wait_while`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.wait_while\n+[`CondVar::wait_while`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.wait_while\n+[`CondVar::wait_timeout_while`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.wait_timeout_while\n \n \n Version 1.41.0 (2020-01-30)"}]}