{"sha": "ed853b861993ee5f3798037a3560f573c62b17cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkODUzYjg2MTk5M2VlNWYzNzk4MDM3YTM1NjBmNTczYzYyYjE3Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T01:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T01:46:46Z"}, "message": "Auto merge of #68861 - Dylan-DPC:rollup-0m09hsg, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #68762 (Strip unnecessary subexpression)\n - #68790 (Improve `merge_from_succ`)\n - #68809 (Make more arithmetic functions unstably const)\n - #68832 (Clean up E0264, E0267 and E0268 explanations)\n - #68840 (On suggesting `#![recursion_limit = \"X\"]`, note current crate name)\n - #68846 (doc fix on doc attribute)\n - #68851 (Fix issue number of `capacity` method)\n - #68858 (Merge item id stable hashing functions)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "25faf97afd6634038ef9737e03947a07486b021f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25faf97afd6634038ef9737e03947a07486b021f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed853b861993ee5f3798037a3560f573c62b17cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed853b861993ee5f3798037a3560f573c62b17cd", "html_url": "https://github.com/rust-lang/rust/commit/ed853b861993ee5f3798037a3560f573c62b17cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed853b861993ee5f3798037a3560f573c62b17cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a25d58b41b273993c27a2533dc193b799abbf43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a25d58b41b273993c27a2533dc193b799abbf43f", "html_url": "https://github.com/rust-lang/rust/commit/a25d58b41b273993c27a2533dc193b799abbf43f"}, {"sha": "b37f968632fc2c66f144d132bb9bb6187709f1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b37f968632fc2c66f144d132bb9bb6187709f1de", "html_url": "https://github.com/rust-lang/rust/commit/b37f968632fc2c66f144d132bb9bb6187709f1de"}], "stats": {"total": 440, "additions": 320, "deletions": 120}, "files": [{"sha": "ef143c8727ee98e6e898ed4f8f7c6a2ba941871c", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -39,7 +39,7 @@ crate level, and ones that are useful at the item level.\n \n ## At the crate level\n \n-These options control how the docs look at a macro level.\n+These options control how the docs look at a crate level.\n \n ### `html_favicon_url`\n "}, {"sha": "2cee23a5c752c9d3ef93193870a01b7992b730aa", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -1305,9 +1305,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an unchecked division, resulting in undefined behavior\n     /// where y = 0 or x = `T::min_value()` and y = -1\n+    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n+    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_rem<T>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n@@ -1321,14 +1323,17 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the result of an unchecked addition, resulting in\n     /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n+    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked subtraction, resulting in\n     /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n+    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_sub<T>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked multiplication, resulting in\n     /// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\n+    #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_mul<T>(x: T, y: T) -> T;\n \n     /// Performs rotate left."}, {"sha": "1fd70e1a1b049aeadef92fe39f5922e2a0131f5f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -72,6 +72,11 @@\n #![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n+#![feature(const_checked_int_methods)]\n+#![feature(const_euclidean_int_methods)]\n+#![feature(const_overflowing_int_methods)]\n+#![feature(const_saturating_int_methods)]\n+#![feature(const_int_unchecked_arith)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]"}, {"sha": "ed37b48b3e8556fbb45733f3376d23531a2889f7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 98, "deletions": 49, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -701,10 +701,11 @@ assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -725,10 +726,11 @@ assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -749,10 +751,11 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -774,10 +777,11 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -802,10 +806,11 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -831,10 +836,11 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -860,10 +866,11 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -887,8 +894,9 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_neg(self) -> Option<Self> {\n+            pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n                 if b {None} else {Some(a)}\n             }\n@@ -908,10 +916,11 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -931,10 +940,11 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -956,8 +966,9 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_abs(self) -> Option<Self> {\n+            pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n                     self.checked_neg()\n                 } else {\n@@ -1080,8 +1091,9 @@ $EndFeature, \"\n ```\"),\n \n             #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n-            pub fn saturating_neg(self) -> Self {\n+            pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n             }\n         }\n@@ -1106,8 +1118,9 @@ $EndFeature, \"\n ```\"),\n \n             #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n-            pub fn saturating_abs(self) -> Self {\n+            pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n                     self.saturating_neg()\n                 } else {\n@@ -1133,17 +1146,19 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_mul(self, rhs: Self) -> Self {\n-                self.checked_mul(rhs).unwrap_or_else(|| {\n-                    if (self < 0) == (rhs < 0) {\n+            pub const fn saturating_mul(self, rhs: Self) -> Self {\n+                match self.checked_mul(rhs) {\n+                    Some(x) => x,\n+                    None => if (self < 0) == (rhs < 0) {\n                         Self::max_value()\n                     } else {\n                         Self::min_value()\n                     }\n-                })\n+                }\n             }\n         }\n \n@@ -1269,10 +1284,11 @@ assert_eq!((-128i8).wrapping_div(-1), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div(self, rhs: Self) -> Self {\n                 self.overflowing_div(rhs).0\n             }\n         }\n@@ -1298,10 +1314,11 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_div_euclid(rhs).0\n             }\n         }\n@@ -1328,10 +1345,11 @@ assert_eq!((-128i8).wrapping_rem(-1), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem(self, rhs: Self) -> Self {\n                 self.overflowing_rem(rhs).0\n             }\n         }\n@@ -1356,10 +1374,11 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_rem_euclid(rhs).0\n             }\n         }\n@@ -1635,9 +1654,10 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n                 } else {\n@@ -1669,9 +1689,10 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n                 } else {\n@@ -1703,9 +1724,10 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (0, true)\n                 } else {\n@@ -1736,10 +1758,11 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (0, true)\n                 } else {\n@@ -1981,11 +2004,12 @@ assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euclid(self, rhs: Self) -> Self {\n+            pub const fn div_euclid(self, rhs: Self) -> Self {\n                 let q = self / rhs;\n                 if self % rhs < 0 {\n                     return if rhs > 0 { q - 1 } else { q + 1 }\n@@ -2020,11 +2044,12 @@ assert_eq!(a.rem_euclid(-b), 3);\n assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn rem_euclid(self, rhs: Self) -> Self {\n                 let r = self % rhs;\n                 if r < 0 {\n                     if rhs < 0 {\n@@ -2847,10 +2872,11 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -2869,10 +2895,11 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -2891,10 +2918,11 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -2913,10 +2941,11 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n                 match rhs {\n                     0 => None,\n                     // SAFETY: div by zero has been checked above and unsigned types have no other\n@@ -2939,10 +2968,11 @@ assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n@@ -2965,10 +2995,11 @@ Basic usage:\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n@@ -2992,10 +3023,11 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n@@ -3019,8 +3051,9 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_neg(self) -> Option<Self> {\n+            pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n                 if b {None} else {Some(a)}\n             }\n@@ -3039,10 +3072,11 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -3061,10 +3095,11 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -3170,11 +3205,15 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_mul(self, rhs: Self) -> Self {\n-                self.checked_mul(rhs).unwrap_or(Self::max_value())\n+            pub const fn saturating_mul(self, rhs: Self) -> Self {\n+                match self.checked_mul(rhs) {\n+                    Some(x) => x,\n+                    None => Self::max_value(),\n+                }\n             }\n         }\n \n@@ -3289,10 +3328,11 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3315,10 +3355,11 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3339,10 +3380,11 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }\n@@ -3366,10 +3408,11 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }\n@@ -3614,9 +3657,10 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n         }\n@@ -3645,9 +3689,10 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n         }\n@@ -3673,9 +3718,10 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n         }\n@@ -3704,9 +3750,10 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n         }\n@@ -3897,11 +3944,12 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euclid(self, rhs: Self) -> Self {\n+            pub const fn div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3926,11 +3974,12 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }"}, {"sha": "01558615497731073ab20985800fc9bdae7ad986", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -40,40 +40,14 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n-    // The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n-    // `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n-    // the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n-    // are used when another item in the HIR is *referenced* and we certainly\n-    // want to pick up on a reference changing its target, so we hash the NodeIds\n-    // in \"DefPath Mode\".\n-\n-    fn hash_item_id(&mut self, id: hir::ItemId, hasher: &mut StableHasher) {\n+    fn hash_reference_to_item(&mut self, id: hir::HirId, hasher: &mut StableHasher) {\n         let hcx = self;\n-        let hir::ItemId { id } = id;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n             id.hash_stable(hcx, hasher);\n         })\n     }\n \n-    fn hash_impl_item_id(&mut self, id: hir::ImplItemId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        let hir::ImplItemId { hir_id } = id;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-\n-    fn hash_trait_item_id(&mut self, id: hir::TraitItemId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        let hir::TraitItemId { hir_id } = id;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-\n     fn hash_hir_mod(&mut self, module: &hir::Mod<'_>, hasher: &mut StableHasher) {\n         let hcx = self;\n         let hir::Mod { inner: ref inner_span, ref item_ids } = *module;"}, {"sha": "b2973c642a21eccfc251f0d4dcad74ef6f7bdeaf", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -1646,8 +1646,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let current_limit = self.tcx.sess.recursion_limit.get();\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n-            suggested_limit\n+            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            suggested_limit, self.tcx.crate_name,\n         ));\n     }\n }"}, {"sha": "708eac8837a7cf3f82e40bc13c2ab5d191a63cb3", "filename": "src/librustc_error_codes/error_codes/E0264.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0264.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0264.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0264.md?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -1,4 +1,6 @@\n-An unknown external lang item was used. Erroneous code example:\n+An unknown external lang item was used.\n+\n+Erroneous code example:\n \n ```compile_fail,E0264\n #![feature(lang_items)]"}, {"sha": "951490df874039ded952a199eff7acb5eaa8c10f", "filename": "src/librustc_error_codes/error_codes/E0267.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0267.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0267.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0267.md?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -1,5 +1,7 @@\n-This error indicates the use of a loop keyword (`break` or `continue`) inside a\n-closure but outside of any loop. Erroneous code example:\n+A loop keyword (`break` or `continue`) was used inside a closure but outside of\n+any loop.\n+\n+Erroneous code example:\n \n ```compile_fail,E0267\n let w = || { break; }; // error: `break` inside of a closure"}, {"sha": "436aef79fe0b3afbf3dca74cc67d0207c8636458", "filename": "src/librustc_error_codes/error_codes/E0268.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0268.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0268.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0268.md?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -1,13 +1,14 @@\n-This error indicates the use of a loop keyword (`break` or `continue`) outside\n-of a loop. Without a loop to break out of or continue in, no sensible action can\n-be taken. Erroneous code example:\n+A loop keyword (`break` or `continue`) was used outside of a loop.\n+\n+Erroneous code example:\n \n ```compile_fail,E0268\n fn some_func() {\n     break; // error: `break` outside of a loop\n }\n ```\n \n+Without a loop to break out of or continue in, no sensible action can be taken.\n Please verify that you are using `break` and `continue` only in loops. Example:\n \n ```"}, {"sha": "d10819183d8ea4e84bab3dbd6f508866930db69a", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -609,8 +609,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n             );\n             err.help(&format!(\n-                \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n-                suggested_limit\n+                \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+                suggested_limit, self.cx.ecfg.crate_name,\n             ));\n             err.emit();\n             self.cx.trace_macros_diag();"}, {"sha": "294074cd3e5a47a55dfe87f5a26bf31275fec7e9", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -11,9 +11,7 @@ pub trait HashStableContext: syntax::HashStableContext + rustc_target::HashStabl\n     fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn hash_hir_id(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n-    fn hash_item_id(&mut self, _: ItemId, hasher: &mut StableHasher);\n-    fn hash_impl_item_id(&mut self, _: ImplItemId, hasher: &mut StableHasher);\n-    fn hash_trait_item_id(&mut self, _: TraitItemId, hasher: &mut StableHasher);\n+    fn hash_reference_to_item(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_hir_mod(&mut self, _: &Mod<'_>, hasher: &mut StableHasher);\n     fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n@@ -38,21 +36,28 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for BodyId {\n     }\n }\n \n+// The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n+// `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n+// the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n+// are used when another item in the HIR is *referenced* and we certainly\n+// want to pick up on a reference changing its target, so we hash the NodeIds\n+// in \"DefPath Mode\".\n+\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.id, hasher)\n     }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_impl_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.hir_id, hasher)\n     }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_trait_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.hir_id, hasher)\n     }\n }\n "}, {"sha": "f85da760ada6d03c5af4262172a761ec422ea0ba", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -218,19 +218,34 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(val, dest)?;\n             }\n-            sym::unchecked_shl | sym::unchecked_shr => {\n+            sym::unchecked_shl\n+            | sym::unchecked_shr\n+            | sym::unchecked_add\n+            | sym::unchecked_sub\n+            | sym::unchecked_mul\n+            | sym::unchecked_div\n+            | sym::unchecked_rem => {\n                 let l = self.read_immediate(args[0])?;\n                 let r = self.read_immediate(args[1])?;\n                 let bin_op = match intrinsic_name {\n                     sym::unchecked_shl => BinOp::Shl,\n                     sym::unchecked_shr => BinOp::Shr,\n+                    sym::unchecked_add => BinOp::Add,\n+                    sym::unchecked_sub => BinOp::Sub,\n+                    sym::unchecked_mul => BinOp::Mul,\n+                    sym::unchecked_div => BinOp::Div,\n+                    sym::unchecked_rem => BinOp::Rem,\n                     _ => bug!(\"Already checked for int ops\"),\n                 };\n                 let (val, overflowed, _ty) = self.overflowing_binary_op(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n                     let r_val = self.force_bits(r.to_scalar()?, layout.size)?;\n-                    throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n+                    if let sym::unchecked_shl | sym::unchecked_shr = intrinsic_name {\n+                        throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n+                    } else {\n+                        throw_ub_format!(\"Overflow executing `{}`\", intrinsic_name);\n+                    }\n                 }\n                 self.write_scalar(val, dest)?;\n             }"}, {"sha": "b355a47c39470559e5431d220e3349299b9dd280", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -822,8 +822,15 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             return false;\n         }\n \n-        let mut changed = false;\n+        let mut any_changed = false;\n         self.indices2(ln, succ_ln, |this, idx, succ_idx| {\n+            // This is a special case, pulled out from the code below, where we\n+            // don't have to do anything. It occurs about 60-70% of the time.\n+            if this.rwu_table.packed_rwus[succ_idx] == INV_INV_FALSE {\n+                return;\n+            }\n+\n+            let mut changed = false;\n             let mut rwu = this.rwu_table.get(idx);\n             let succ_rwu = this.rwu_table.get(succ_idx);\n             if succ_rwu.reader.is_valid() && !rwu.reader.is_valid() {\n@@ -843,6 +850,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             if changed {\n                 this.rwu_table.assign_unpacked(idx, rwu);\n+                any_changed = true;\n             }\n         });\n \n@@ -851,9 +859,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             ln,\n             self.ln_str(succ_ln),\n             first_merge,\n-            changed\n+            any_changed\n         );\n-        return changed;\n+        return any_changed;\n     }\n \n     // Indicates that a local variable was *defined*; we know that no"}, {"sha": "c060e8948e3ed45fd770a518044c5d67d7ddc4c4", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -755,8 +755,13 @@ symbols! {\n         u64,\n         u8,\n         unboxed_closures,\n+        unchecked_add,\n+        unchecked_div,\n+        unchecked_mul,\n+        unchecked_rem,\n         unchecked_shl,\n         unchecked_shr,\n+        unchecked_sub,\n         underscore_const_names,\n         underscore_imports,\n         underscore_lifetimes,"}, {"sha": "d436733d19a36dcf841564aa5bfffda978782789", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -250,8 +250,8 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         )\n         .span_label(span, \"deref recursion limit reached\")\n         .help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n-            suggested_limit\n+            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            suggested_limit, tcx.crate_name,\n         ))\n         .emit();\n     }"}, {"sha": "8862226adbbd38d3efc3dbdf9351be396a611b29", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -198,7 +198,7 @@ impl<R> BufReader<R> {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68833\")]\n     pub fn capacity(&self) -> usize {\n         self.buf.len()\n     }\n@@ -616,7 +616,7 @@ impl<W: Write> BufWriter<W> {\n     /// // Calculate how many bytes can be written without flushing\n     /// let without_flush = capacity - buf_writer.buffer().len();\n     /// ```\n-    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68833\")]\n     pub fn capacity(&self) -> usize {\n         self.buf.capacity()\n     }"}, {"sha": "6707f790cab0aa6c2a058d441ac827bc6afc7f76", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -282,7 +282,6 @@ mod inner {\n             (cfg!(target_os = \"linux\") && cfg!(target_arch = \"x86_64\"))\n                 || (cfg!(target_os = \"linux\") && cfg!(target_arch = \"x86\"))\n                 || cfg!(target_os = \"fuchsia\")\n-                || false // last clause, used so `||` is always trailing above\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {"}, {"sha": "cfa2873c68bad1ac1dda2fb10fbf22e74711da70", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -0,0 +1,130 @@\n+// run-pass\n+\n+#![feature(saturating_neg)]\n+#![feature(const_checked_int_methods)]\n+#![feature(const_euclidean_int_methods)]\n+#![feature(const_overflowing_int_methods)]\n+#![feature(const_saturating_int_methods)]\n+#![feature(const_wrapping_int_methods)]\n+\n+use std::i8;\n+\n+macro_rules! suite {\n+    ($(\n+        $fn:ident -> $ty:ty { $( $label:ident : $expr:expr, $result:expr; )* }\n+    )*) => { $(\n+        fn $fn() {\n+            $(\n+                const $label: $ty = $expr;\n+                assert_eq!($label, $result);\n+            )*\n+        }\n+    )* }\n+}\n+\n+suite!(\n+    checked -> Option<i8> {\n+        // `const_checked_int_methods`\n+        C1: 5i8.checked_add(2), Some(7);\n+        C2: 127i8.checked_add(2), None;\n+\n+        C3: 5i8.checked_sub(2), Some(3);\n+        C4: (-127i8).checked_sub(2), None;\n+\n+        C5: 1i8.checked_mul(3), Some(3);\n+        C6: 5i8.checked_mul(122), None;\n+        C7: (-127i8).checked_mul(-99), None;\n+\n+        C8: (i8::min_value() + 1).checked_div(-1), Some(127);\n+        C9: i8::min_value().checked_div(-1), None;\n+        C10: 1i8.checked_div(0), None;\n+\n+        C11: 5i8.checked_rem(2), Some(1);\n+        C12: 5i8.checked_rem(0), None;\n+        C13: i8::MIN.checked_rem(-1), None;\n+\n+        C14: 5i8.checked_neg(), Some(-5);\n+        C15: i8::MIN.checked_neg(), None;\n+\n+        C16: 0x1i8.checked_shl(4), Some(0x10);\n+        C17: 0x1i8.checked_shl(129), None;\n+\n+        C18: 0x10i8.checked_shr(4), Some(0x1);\n+        C19: 0x10i8.checked_shr(128), None;\n+\n+\n+        C20: (-5i8).checked_abs(), Some(5);\n+        C21: i8::MIN.checked_abs(), None;\n+\n+        // `const_euclidean_int_methods`\n+        C22: (i8::min_value() + 1).checked_div_euclid(-1), Some(127);\n+        C23: i8::min_value().checked_div_euclid(-1), None;\n+        C24: (1i8).checked_div_euclid(0), None;\n+\n+        C25: 5i8.checked_rem_euclid(2), Some(1);\n+        C26: 5i8.checked_rem_euclid(0), None;\n+        C27: i8::MIN.checked_rem_euclid(-1), None;\n+    }\n+\n+    saturating_and_wrapping -> i8 {\n+        // `const_saturating_int_methods`\n+        C28: 100i8.saturating_add(1), 101;\n+        C29: i8::max_value().saturating_add(100), i8::max_value();\n+        C30: i8::min_value().saturating_add(-1), i8::min_value();\n+\n+        C31: 100i8.saturating_sub(127), -27;\n+        C32: i8::min_value().saturating_sub(100), i8::min_value();\n+        C33: i8::max_value().saturating_sub(-1), i8::max_value();\n+\n+        C34: 10i8.saturating_mul(12), 120;\n+        C35: i8::MAX.saturating_mul(10), i8::MAX;\n+        C36: i8::MIN.saturating_mul(10), i8::MIN;\n+\n+        C37: 100i8.saturating_neg(), -100;\n+        C38: (-100i8).saturating_neg(), 100;\n+        C39: i8::min_value().saturating_neg(), i8::max_value();\n+        C40: i8::max_value().saturating_neg(), i8::min_value() + 1;\n+\n+        C57: 100i8.saturating_abs(), 100;\n+        C58: (-100i8).saturating_abs(), 100;\n+        C59: i8::min_value().saturating_abs(), i8::max_value();\n+        C60: (i8::min_value() + 1).saturating_abs(), i8::max_value();\n+\n+        // `const_wrapping_int_methods`\n+        C41: 100i8.wrapping_div(10), 10;\n+        C42: (-128i8).wrapping_div(-1), -128;\n+\n+        C43: 100i8.wrapping_rem(10), 0;\n+        C44: (-128i8).wrapping_rem(-1), 0;\n+\n+        // `const_euclidean_int_methods`\n+        C45: 100i8.wrapping_div_euclid(10), 10;\n+        C46: (-128i8).wrapping_div_euclid(-1), -128;\n+\n+        C47: 100i8.wrapping_rem_euclid(10), 0;\n+        C48: (-128i8).wrapping_rem_euclid(-1), 0;\n+    }\n+\n+    overflowing -> (i8, bool) {\n+        // `const_overflowing_int_methods`\n+        C49: 5i8.overflowing_div(2), (2, false);\n+        C50: i8::MIN.overflowing_div(-1), (i8::MIN, true);\n+\n+        C51: 5i8.overflowing_rem(2), (1, false);\n+        C52: i8::MIN.overflowing_rem(-1), (0, true);\n+\n+        // `const_euclidean_int_methods`\n+        C53: 5i8.overflowing_div_euclid(2), (2, false);\n+        C54: i8::MIN.overflowing_div_euclid(-1), (i8::MIN, true);\n+\n+        C55: 5i8.overflowing_rem_euclid(2), (1, false);\n+        C56: i8::MIN.overflowing_rem_euclid(-1), (0, true);\n+\n+    }\n+);\n+\n+fn main() {\n+   checked();\n+   saturating_and_wrapping();\n+   overflowing();\n+}"}, {"sha": "fc14b7fa5b75cb96a354166cfc2c00c635e092ec", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -7,7 +7,7 @@ LL | fn is_send<T:Send>() { }\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit`)\n    = note: required because it appears within the type `I`\n    = note: required because it appears within the type `H`\n    = note: required because it appears within the type `G`"}, {"sha": "e8d11530b08aae8ff3d61ca7cd5a6319698c762a", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `I`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_deref`)\n \n error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:50:22"}, {"sha": "18d321c24d80c5e16be07f605fd2fbb972a75411", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -7,7 +7,7 @@ LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n \n error: aborting due to previous error\n "}, {"sha": "01411e585abddc645ce01abeaad9ad3d8ba74975", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     ref_foo.foo();\n    |             ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"10\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"10\"]` attribute to your crate (`E0055`)\n \n error: aborting due to previous error\n "}, {"sha": "c551a00096e23f65aab054eb800995def1198d0d", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo {}\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`E0275`)\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "e7d90f00d24de04d8c6e5ccecaf4e6e97eb4403f", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -13,15 +13,15 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.foo;\n    |     ^^^^^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n    |\n LL |     Foo.foo;\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0609]: no field `foo` on type `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n@@ -35,7 +35,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.bar();\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/infinite-autoderef.rs:26:9"}, {"sha": "ff67eea568866c576d0c427c9b02b9f1d289ef29", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -7,7 +7,7 @@ LL |     () => (recursive!())\n LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n \n error: aborting due to previous error\n "}, {"sha": "a34039a6eec7dcdd78bd616fc4f13eef7775fd41", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -7,7 +7,7 @@ LL |             $n + prob1!($n - 1);\n LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n \n error: aborting due to previous error\n "}, {"sha": "57067ad51759a986880701f7d8b16b65da6b2a34", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `_: std::marker::Sized`\n LL |     0.contains(bits);\n    |       ^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_18400`)\n    = note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n    = note: required because of the requirements on the impl of `Set<&[&[_]]>` for `{integer}`\n    = note: required because of the requirements on the impl of `Set<&[&[&[_]]]>` for `{integer}`"}, {"sha": "84e64ff74ae96c2e72d0e9d63f06b8a69e42a45d", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -15,7 +15,7 @@ LL | trait Foo {\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n@@ -153,7 +153,7 @@ LL | trait Foo {\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "7625e30498ac3ec6d8d1ed61257b2219cc0d3567", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n LL | impl<T: Next> Next for GetNext<T> {\n    |               ^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n    = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n \n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: std::marker::Sized`\n@@ -13,7 +13,7 @@ error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n    = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n \n error: aborting due to 2 previous errors"}, {"sha": "36117278fd8140233816471e659fcff6d3f56686", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `I`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`issue_38940`)\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:43:22"}, {"sha": "021c51fd726d31629fd7900a6044a93e807043e8", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed853b861993ee5f3798037a3560f573c62b17cd/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=ed853b861993ee5f3798037a3560f573c62b17cd", "patch": "@@ -29,7 +29,7 @@ LL |         my_recursive_macro!();\n LL |     my_recursive_macro!();\n    |     ---------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate\n+   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`trace_faulty_macros`)\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:34:5"}]}