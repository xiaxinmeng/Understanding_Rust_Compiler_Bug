{"sha": "42d0b363c172e81808f0138fcc2d46b9222b90ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZDBiMzYzYzE3MmU4MTgwOGYwMTM4ZmNjMmQ0NmI5MjIyYjkwZWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-22T23:01:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-23T09:51:03Z"}, "message": "handle fully qualified paths properly when linting\n\nfixes #50970", "tree": {"sha": "51d4bea09ec318e80c5e1872ceb75997ee6ece0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d4bea09ec318e80c5e1872ceb75997ee6ece0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d0b363c172e81808f0138fcc2d46b9222b90ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d0b363c172e81808f0138fcc2d46b9222b90ef", "html_url": "https://github.com/rust-lang/rust/commit/42d0b363c172e81808f0138fcc2d46b9222b90ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d0b363c172e81808f0138fcc2d46b9222b90ef/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be2bb8084c77eca43e89e9c844c0596e7db4d863", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2bb8084c77eca43e89e9c844c0596e7db4d863", "html_url": "https://github.com/rust-lang/rust/commit/be2bb8084c77eca43e89e9c844c0596e7db4d863"}], "stats": {"total": 269, "additions": 261, "deletions": 8}, "files": [{"sha": "e0f02e93e4ec217c5164ce8bd450238401ebdc9e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -2222,7 +2222,7 @@ impl<'a> Resolver<'a> {\n                     segments: use_tree.prefix.make_root().into_iter().collect(),\n                     span: use_tree.span,\n                 };\n-                self.resolve_use_tree(item.id, use_tree, &path);\n+                self.resolve_use_tree(item.id, use_tree.span, item.id, use_tree, &path);\n             }\n \n             ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_) => {\n@@ -2233,7 +2233,18 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn resolve_use_tree(&mut self, id: NodeId, use_tree: &ast::UseTree, prefix: &Path) {\n+    /// For the most part, use trees are desugared into `ImportDirective` instances\n+    /// when building the reduced graph (see `build_reduced_graph_for_use_tree`). But\n+    /// there is one special case we handle here: an empty nested import like\n+    /// `a::{b::{}}`, which desugares into...no import directives.\n+    fn resolve_use_tree(\n+        &mut self,\n+        root_id: NodeId,\n+        root_span: Span,\n+        id: NodeId,\n+        use_tree: &ast::UseTree,\n+        prefix: &Path,\n+    ) {\n         match use_tree.kind {\n             ast::UseTreeKind::Nested(ref items) => {\n                 let path = Path {\n@@ -2252,11 +2263,11 @@ impl<'a> Resolver<'a> {\n                         None,\n                         &path,\n                         PathSource::ImportPrefix,\n-                        CrateLint::SimplePath(id), // TODO seems wrong\n+                        CrateLint::UsePath { root_id, root_span },\n                     );\n                 } else {\n                     for &(ref tree, nested_id) in items {\n-                        self.resolve_use_tree(nested_id, tree, &path);\n+                        self.resolve_use_tree(root_id, root_span, nested_id, tree, &path);\n                     }\n                 }\n             }\n@@ -3188,21 +3199,44 @@ impl<'a> Resolver<'a> {\n \n         if let Some(qself) = qself {\n             if qself.position == 0 {\n-                // FIXME: Create some fake resolution that can't possibly be a type.\n+                // This is a case like `<T>::B`, where there is no\n+                // trait to resolve.  In that case, we leave the `B`\n+                // segment to be resolved by type-check.\n                 return Some(PathResolution::with_unresolved_segments(\n                     Def::Mod(DefId::local(CRATE_DEF_INDEX)), path.len()\n                 ));\n             }\n-            // Make sure `A::B` in `<T as A>::B::C` is a trait item.\n+\n+            // Make sure `A::B` in `<T as A::B>::C` is a trait item.\n+            //\n+            // Currently, `path` names the full item (`A::B::C`, in\n+            // our example).  so we extract the prefix of that that is\n+            // the trait (the slice upto and including\n+            // `qself.position`). And then we recursively resolve that,\n+            // but with `qself` set to `None`.\n+            //\n+            // However, setting `qself` to none (but not changing the\n+            // span) loses the information about where this path\n+            // *actually* appears, so for the purposes of the crate\n+            // lint we pass along information that this is the trait\n+            // name from a fully qualified path, and this also\n+            // contains the full span (the `CrateLint::QPathTrait`).\n             let ns = if qself.position + 1 == path.len() { ns } else { TypeNS };\n             let res = self.smart_resolve_path_fragment(\n                 id,\n                 None,\n                 &path[..qself.position + 1],\n                 span,\n                 PathSource::TraitItem(ns),\n-                crate_lint, // TODO wrong\n+                CrateLint::QPathTrait {\n+                    qpath_id: id,\n+                    qpath_span: qself.path_span,\n+                },\n             );\n+\n+            // The remaining segments (the `C` in our example) will\n+            // have to be resolved by type-check, since that requires doing\n+            // trait resolution.\n             return Some(PathResolution::with_unresolved_segments(\n                 res.base_def(), res.unresolved_segments() + path.len() - qself.position - 1\n             ));\n@@ -3213,7 +3247,7 @@ impl<'a> Resolver<'a> {\n             Some(ns),\n             true,\n             span,\n-            CrateLint::SimplePath(id),\n+            crate_lint,\n         ) {\n             PathResult::NonModule(path_res) => path_res,\n             PathResult::Module(module) if !module.is_normal() => {\n@@ -3468,6 +3502,7 @@ impl<'a> Resolver<'a> {\n             CrateLint::No => return,\n             CrateLint::SimplePath(id) => (id, path_span),\n             CrateLint::UsePath { root_id, root_span } => (root_id, root_span),\n+            CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),\n         };\n \n         let first_name = match path.get(0) {\n@@ -4536,6 +4571,11 @@ enum CrateLint {\n     /// have nested things like `use a::{b, c}`, we care about the\n     /// `use a` part.\n     UsePath { root_id: NodeId, root_span: Span },\n+\n+    /// This is the \"trait item\" from a fully qualified path. For example,\n+    /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.\n+    /// The `path_span` is the span of the to the trait itself (`X::Y`).\n+    QPathTrait { qpath_id: NodeId, qpath_span: Span },\n }\n \n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "717abba6390a08291212a363f12d8d535b7ad6c5", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+\n+mod foo {\n+    crate trait Foo {\n+        type Bar;\n+    }\n+\n+    crate struct Baz { }\n+\n+    impl Foo for Baz {\n+        type Bar = ();\n+    }\n+}\n+\n+\n+fn main() {\n+    let _: <foo::Baz as crate::foo::Foo>::Bar = ();\n+    //~^ ERROR absolute paths must start with\n+    //~| this was previously accepted\n+\n+    let _: <crate::foo::Baz as foo::Foo>::Bar = ();\n+    //~^ ERROR absolute paths must start with\n+    //~| this was previously accepted\n+}"}, {"sha": "eaa09b1f751c8bc34876151fac7531d968d48914", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+\n+mod foo {\n+    crate trait Foo {\n+        type Bar;\n+    }\n+\n+    crate struct Baz { }\n+\n+    impl Foo for Baz {\n+        type Bar = ();\n+    }\n+}\n+\n+\n+fn main() {\n+    let _: <foo::Baz as ::foo::Foo>::Bar = ();\n+    //~^ ERROR absolute paths must start with\n+    //~| this was previously accepted\n+\n+    let _: <::foo::Baz as foo::Foo>::Bar = ();\n+    //~^ ERROR absolute paths must start with\n+    //~| this was previously accepted\n+}"}, {"sha": "aea920342fc64016588c4c100926cefda7fbd7db", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,25 @@\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:30:25\n+   |\n+LL |     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n+   |                         ^^^^^^^^^^ help: use `crate`: `crate::foo::Foo`\n+   |\n+note: lint level defined here\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:14:9\n+   |\n+LL | #![deny(absolute_path_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:34:13\n+   |\n+LL |     let _: <::foo::Baz as foo::Foo>::Bar = ();\n+   |             ^^^^^^^^^^ help: use `crate`: `crate::foo::Baz`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1fc76fb657f27b8ab625d0c6e7ab66ae0302e239", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+#![allow(unused_imports)]\n+#![allow(dead_code)]\n+\n+crate mod foo {\n+    crate mod bar {\n+        crate mod baz { }\n+        crate mod baz1 { }\n+\n+        crate struct XX;\n+    }\n+}\n+\n+use crate::foo::{bar::{baz::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+use crate::foo::{bar::{XX, baz::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+use crate::foo::{bar::{baz::{}, baz1::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+fn main() {\n+}"}, {"sha": "8327c62d77971b169c132cd106f3d893ef624263", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+#![allow(unused_imports)]\n+#![allow(dead_code)]\n+\n+crate mod foo {\n+    crate mod bar {\n+        crate mod baz { }\n+        crate mod baz1 { }\n+\n+        crate struct XX;\n+    }\n+}\n+\n+use foo::{bar::{baz::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+use foo::{bar::{XX, baz::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+use foo::{bar::{baz::{}, baz1::{}}};\n+//~^ ERROR absolute paths must start with\n+//~| WARN this was previously accepted\n+\n+fn main() {\n+}"}, {"sha": "82c8ef30ac37068b39b9c67850e5c134a916aa21", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d0b363c172e81808f0138fcc2d46b9222b90ef/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=42d0b363c172e81808f0138fcc2d46b9222b90ef", "patch": "@@ -0,0 +1,34 @@\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-nested-empty-paths.rs:27:5\n+   |\n+LL | use foo::{bar::{baz::{}}};\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}}}`\n+   |\n+note: lint level defined here\n+  --> $DIR/edition-lint-nested-empty-paths.rs:14:9\n+   |\n+LL | #![deny(absolute_path_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-nested-empty-paths.rs:31:5\n+   |\n+LL | use foo::{bar::{XX, baz::{}}};\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-nested-empty-paths.rs:35:5\n+   |\n+LL | use foo::{bar::{baz::{}, baz1::{}}};\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: aborting due to 3 previous errors\n+"}]}