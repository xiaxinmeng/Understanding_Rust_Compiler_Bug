{"sha": "a1b8e02a881c3b5124dff3b51f20245d146425b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjhlMDJhODgxYzNiNTEyNGRmZjNiNTFmMjAyNDVkMTQ2NDI1Yjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-17T16:49:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-17T16:49:10Z"}, "message": "Rustup to rustc 1.30.0-nightly (cb6d2dfa8 2018-09-16)", "tree": {"sha": "e71e2a38a661e6b49b39a3beee61d2460710ecb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71e2a38a661e6b49b39a3beee61d2460710ecb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b8e02a881c3b5124dff3b51f20245d146425b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b8e02a881c3b5124dff3b51f20245d146425b9", "html_url": "https://github.com/rust-lang/rust/commit/a1b8e02a881c3b5124dff3b51f20245d146425b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b8e02a881c3b5124dff3b51f20245d146425b9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39fbea8c1b45c11503facdabb8f9dc0614f4137c", "url": "https://api.github.com/repos/rust-lang/rust/commits/39fbea8c1b45c11503facdabb8f9dc0614f4137c", "html_url": "https://github.com/rust-lang/rust/commit/39fbea8c1b45c11503facdabb8f9dc0614f4137c"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b95c9e72ced315363308caa6df4aefeb7685898e", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -1,7 +1,7 @@\n use std::iter;\n \n-use rustc::hir;\n-use rustc_target::spec::abi::Abi;\n+use crate::rustc::hir;\n+use crate::rustc_target::spec::abi::Abi;\n \n use crate::prelude::*;\n "}, {"sha": "2ef21dbb4592a2add63b46f48304e12e0861c196", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use rustc::mir::StatementKind::*;\n+use crate::rustc::mir::StatementKind::*;\n \n bitflags! {\n     pub struct Flags: u8 {"}, {"sha": "c5620b62d5b151f912ea3ce87f7a94c084132115", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -27,7 +27,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                         if inst.def_id().krate == LOCAL_CRATE =>\n                     {\n                         let mut mir = ::std::io::Cursor::new(Vec::new());\n-                        ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n+                        crate::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n                             .unwrap();\n                         String::from_utf8(mir.into_inner()).unwrap()\n                     }\n@@ -242,7 +242,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             } => {\n                 let ty = location.ty(fx.mir, fx.tcx).to_ty(fx.tcx);\n                 let ty = fx.monomorphize(&ty);\n-                let drop_fn = ::rustc_mir::monomorphize::resolve_drop_in_place(fx.tcx, ty);\n+                let drop_fn = crate::rustc_mir::monomorphize::resolve_drop_in_place(fx.tcx, ty);\n \n                 if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n                     // we don't actually need to drop anything\n@@ -254,7 +254,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                             &ty::RegionKind::ReErased,\n                             TypeAndMut {\n                                 ty,\n-                                mutbl: ::rustc::hir::Mutability::MutMutable,\n+                                mutbl: crate::rustc::hir::Mutability::MutMutable,\n                             },\n                         ),\n                     );\n@@ -580,7 +580,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n+                    use crate::rustc::middle::lang_items::ExchangeMallocFnLangItem;\n \n                     let usize_type = fx.cton_type(fx.tcx.types.usize).unwrap();\n                     let (size, align) = fx.layout_of(content_ty).size_and_align();"}, {"sha": "9384f8c9b591ce7ac5b76a8c6ee55a4eda593608", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -1,6 +1,6 @@\n use std::fmt;\n \n-use rustc_target::spec::{HasTargetSpec, Target};\n+use crate::rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift_module::Module;\n \n@@ -372,7 +372,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         match (&self.layout().ty.sty, &from.layout().ty.sty) {\n             (ty::Ref(_, t, dest_mut), ty::Ref(_, u, src_mut))\n-                if (if *dest_mut != ::rustc::hir::Mutability::MutImmutable && src_mut != dest_mut {\n+                if (if *dest_mut != crate::rustc::hir::Mutability::MutImmutable && src_mut != dest_mut {\n                     false\n                 } else if t != u {\n                     false"}, {"sha": "862ced4ce5c70d6f5ba33a481661168c9cbfe7ff", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -1,10 +1,10 @@\n use cranelift_module::*;\n use crate::prelude::*;\n-use rustc::mir::interpret::{\n+use crate::rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId,\n };\n-use rustc::ty::Const;\n-use rustc_mir::interpret::{CompileTimeEvaluator, EvalContext, Memory, MemoryKind};\n+use crate::rustc::ty::Const;\n+use crate::rustc_mir::interpret::{CompileTimeEvaluator, EvalContext, Memory, MemoryKind};\n \n #[derive(Default)]\n pub struct ConstantCx {\n@@ -154,7 +154,7 @@ fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n     def_id: DefId,\n ) -> DataId {\n     let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n-    let is_mutable = if let ::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n+    let is_mutable = if let crate::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n         true\n     } else {\n         !tcx.type_of(def_id)"}, {"sha": "9d136a9d28a8238c2a69ab55ba1ad3814ac3d6b2", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -27,14 +27,14 @@ use std::any::Any;\n use std::fs::File;\n use std::sync::{mpsc, Arc};\n \n-use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::{config::OutputFilenames, CompileIncomplete};\n-use rustc::ty::query::Providers;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_codegen_utils::link::out_filename;\n-use rustc_data_structures::svh::Svh;\n-use syntax::symbol::Symbol;\n+use crate::rustc::dep_graph::DepGraph;\n+use crate::rustc::middle::cstore::MetadataLoader;\n+use crate::rustc::session::{config::OutputFilenames, CompileIncomplete};\n+use crate::rustc::ty::query::Providers;\n+use crate::rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use crate::rustc_codegen_utils::link::out_filename;\n+use crate::rustc_data_structures::svh::Svh;\n+use crate::syntax::symbol::Symbol;\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n@@ -60,24 +60,24 @@ mod prelude {\n     pub use std::any::Any;\n     pub use std::collections::{HashMap, HashSet};\n \n-    pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-    pub use rustc::mir;\n-    pub use rustc::mir::interpret::AllocId;\n-    pub use rustc::mir::*;\n-    pub use rustc::session::{config::CrateType, Session};\n-    pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n-    pub use rustc::ty::{\n+    pub use crate::rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+    pub use crate::rustc::mir;\n+    pub use crate::rustc::mir::interpret::AllocId;\n+    pub use crate::rustc::mir::*;\n+    pub use crate::rustc::session::{config::CrateType, Session};\n+    pub use crate::rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n+    pub use crate::rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable,\n     };\n-    pub use rustc_data_structures::{\n+    pub use crate::rustc_data_structures::{\n         fx::{FxHashMap, FxHashSet},\n         indexed_vec::Idx,\n         sync::Lrc,\n     };\n-    pub use rustc_mir::monomorphize::{collector, MonoItem};\n-    pub use syntax::ast::{FloatTy, IntTy, UintTy};\n-    pub use syntax::source_map::DUMMY_SP;\n+    pub use crate::rustc_mir::monomorphize::{collector, MonoItem};\n+    pub use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n+    pub use crate::syntax::source_map::DUMMY_SP;\n \n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n@@ -373,8 +373,8 @@ fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n ) {\n-    use rustc::middle::lang_items::StartFnLangItem;\n-    use rustc::session::config::EntryFnType;\n+    use crate::rustc::middle::lang_items::StartFnLangItem;\n+    use crate::rustc::session::config::EntryFnType;\n \n     let (main_def_id, use_start_lang_item) = match *tcx.sess.entry_fn.borrow() {\n         Some((id, _, entry_ty)) => ("}, {"sha": "e4db7783963602632d8d05b0e7a243b1914bd1e9", "filename": "src/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -1,5 +1,5 @@\n-use rustc::middle::cstore::MetadataLoader;\n-use rustc_data_structures::owning_ref::{self, OwningRef};\n+use crate::rustc::middle::cstore::MetadataLoader;\n+use crate::rustc_data_structures::owning_ref::{self, OwningRef};\n use std::fs::File;\n use std::path::Path;\n \n@@ -8,7 +8,7 @@ pub struct CraneliftMetadataLoader;\n impl MetadataLoader for CraneliftMetadataLoader {\n     fn get_rlib_metadata(\n         &self,\n-        _target: &::rustc_target::spec::Target,\n+        _target: &crate::rustc_target::spec::Target,\n         path: &Path,\n     ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n         let mut archive = ar::Archive::new(File::open(path).map_err(|e| format!(\"{:?}\", e))?);\n@@ -33,7 +33,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n \n     fn get_dylib_metadata(\n         &self,\n-        _target: &::rustc_target::spec::Target,\n+        _target: &crate::rustc_target::spec::Target,\n         _path: &Path,\n     ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n         Err(\"dylib metadata loading is not yet supported\".to_string())"}, {"sha": "6b4ae6a0aee6fe5c48626ee7350150f0cd1b3a21", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8e02a881c3b5124dff3b51f20245d146425b9/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=a1b8e02a881c3b5124dff3b51f20245d146425b9", "patch": "@@ -82,7 +82,7 @@ fn build_vtable<'a, 'tcx: 'a>(\n         .unwrap()\n         .size_and_align();\n     let drop_in_place_fn =\n-        fx.get_function_id(::rustc_mir::monomorphize::resolve_drop_in_place(tcx, ty));\n+        fx.get_function_id(crate::rustc_mir::monomorphize::resolve_drop_in_place(tcx, ty));\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n "}]}