{"sha": "c6ae57cb8343d19d05e364ac9391b0a04327faa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YWU1N2NiODM0M2QxOWQwNWUzNjRhYzkzOTFiMGEwNDMyN2ZhYTc=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-08T18:42:43Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-09T05:39:38Z"}, "message": "Check the ABI of `body.source`", "tree": {"sha": "53641b41e8559153f779bda000681027ea75f1bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53641b41e8559153f779bda000681027ea75f1bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ae57cb8343d19d05e364ac9391b0a04327faa7", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYJd1mhUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjv4AEAo3miVC5NTYnZw8mC3mi+CboAAzzc\n/WezS+ZdEhaCDJMBAKOIOxADO4npe8o216RaroA5cFObyxWljanxllQi02IH\n=NmR4\n-----END PGP SIGNATURE-----", "payload": "tree 53641b41e8559153f779bda000681027ea75f1bf\nparent d6d028369be9eb02d219506c0dd662a2f863fc18\nauthor hyd-dev <yd-huang@outlook.com> 1620499363 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1620538778 +0800\n\nCheck the ABI of `body.source`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ae57cb8343d19d05e364ac9391b0a04327faa7", "html_url": "https://github.com/rust-lang/rust/commit/c6ae57cb8343d19d05e364ac9391b0a04327faa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ae57cb8343d19d05e364ac9391b0a04327faa7/comments", "author": null, "committer": null, "parents": [{"sha": "d6d028369be9eb02d219506c0dd662a2f863fc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d028369be9eb02d219506c0dd662a2f863fc18", "html_url": "https://github.com/rust-lang/rust/commit/d6d028369be9eb02d219506c0dd662a2f863fc18"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "d287bc858ed5baddcd8f25b25e8c776f1a178910", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6ae57cb8343d19d05e364ac9391b0a04327faa7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ae57cb8343d19d05e364ac9391b0a04327faa7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=c6ae57cb8343d19d05e364ac9391b0a04327faa7", "patch": "@@ -3,7 +3,10 @@ use std::convert::TryFrom;\n \n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Instance;\n-use rustc_middle::{mir, ty};\n+use rustc_middle::{\n+    mir,\n+    ty::{self, Ty},\n+};\n use rustc_target::abi::{self, LayoutOf as _};\n use rustc_target::spec::abi::Abi;\n \n@@ -228,15 +231,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n \n         // ABI check\n-        {\n-            let callee_abi = {\n-                let instance_ty = instance.ty(*self.tcx, self.param_env);\n-                match instance_ty.kind() {\n-                    ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n-                    ty::Closure(..) => Abi::RustCall,\n-                    ty::Generator(..) => Abi::Rust,\n-                    _ => span_bug!(self.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-                }\n+        let check_abi = |this: &Self, instance_ty: Ty<'tcx>| -> InterpResult<'tcx> {\n+            let callee_abi = match instance_ty.kind() {\n+                ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n+                ty::Closure(..) => Abi::RustCall,\n+                ty::Generator(..) => Abi::Rust,\n+                _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n             };\n             let normalize_abi = |abi| match abi {\n                 Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n@@ -253,10 +253,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     caller_abi.name()\n                 )\n             }\n-        }\n+            Ok(())\n+        };\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n+                check_abi(self, instance.ty(*self.tcx, self.param_env))?;\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n@@ -274,6 +276,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         None => return Ok(()),\n                     };\n \n+                check_abi(self, self.tcx.type_of(body.source.def_id()))?;\n+\n                 self.push_stack_frame(\n                     instance,\n                     body,"}]}