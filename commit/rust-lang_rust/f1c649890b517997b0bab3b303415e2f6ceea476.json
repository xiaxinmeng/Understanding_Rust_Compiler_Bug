{"sha": "f1c649890b517997b0bab3b303415e2f6ceea476", "node_id": "C_kwDOAAsO6NoAKGYxYzY0OTg5MGI1MTc5OTdiMGJhYjNiMzAzNDE1ZTJmNmNlZWE0NzY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-02-26T22:02:17Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-02-26T22:02:17Z"}, "message": "Only print the pruning note if the trace was definitely pruned", "tree": {"sha": "7d25897b5515a34cf419e8314d0217b02827c076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d25897b5515a34cf419e8314d0217b02827c076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c649890b517997b0bab3b303415e2f6ceea476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c649890b517997b0bab3b303415e2f6ceea476", "html_url": "https://github.com/rust-lang/rust/commit/f1c649890b517997b0bab3b303415e2f6ceea476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c649890b517997b0bab3b303415e2f6ceea476/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144d56532c75856930f510dedba94504eaf56d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/144d56532c75856930f510dedba94504eaf56d42", "html_url": "https://github.com/rust-lang/rust/commit/144d56532c75856930f510dedba94504eaf56d42"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "2b210a6de69104b4ba227ffa3fb6f324dafa12fc", "filename": "src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f1c649890b517997b0bab3b303415e2f6ceea476/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c649890b517997b0bab3b303415e2f6ceea476/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=f1c649890b517997b0bab3b303415e2f6ceea476", "patch": "@@ -75,24 +75,26 @@ enum DiagLevel {\n     Note,\n }\n \n-fn has_local_frame(stacktrace: &[FrameInfo<'_>]) -> bool {\n-    stacktrace.iter().any(|frame| frame.instance.def_id().is_local())\n-}\n-\n+/// Attempts to prune a stacktrace to omit the Rust runtime, and returns a bool indicating if any\n+/// frames were pruned. If the stacktrace does not have any local frames, we conclude that it must\n+/// be pointing to a problem in the Rust runtime itself, and do not prune it at all.\n fn prune_stacktrace<'mir, 'tcx>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     mut stacktrace: Vec<FrameInfo<'tcx>>,\n-) -> Vec<FrameInfo<'tcx>> {\n+) -> (Vec<FrameInfo<'tcx>>, bool) {\n     match ecx.machine.backtrace_style {\n         BacktraceStyle::Off => {\n             // Retain one frame so that we can print a span for the error itself\n             stacktrace.truncate(1);\n+            (stacktrace, false)\n         }\n         BacktraceStyle::Short => {\n+            let original_len = stacktrace.len();\n             // Only prune frames if there is at least one local frame. This check ensures that if\n             // we get a backtrace that never makes it to the user code because it has detected a\n             // bug in the Rust runtime, we don't prune away every frame.\n-            if has_local_frame(&stacktrace) {\n+            let has_local_frame = stacktrace.iter().any(|frame| frame.instance.def_id().is_local());\n+            if has_local_frame {\n                 // This is part of the logic that `std` uses to select the relevant part of a\n                 // backtrace. But here, we only look for __rust_begin_short_backtrace, not\n                 // __rust_end_short_backtrace because the end symbol comes from a call to the default\n@@ -117,10 +119,11 @@ fn prune_stacktrace<'mir, 'tcx>(\n                     stacktrace.pop();\n                 }\n             }\n+            let was_pruned = stacktrace.len() != original_len;\n+            (stacktrace, was_pruned)\n         }\n-        BacktraceStyle::Full => {}\n+        BacktraceStyle::Full => (stacktrace, false),\n     }\n-    stacktrace\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -206,7 +209,7 @@ pub fn report_error<'tcx, 'mir>(\n     };\n \n     let stacktrace = ecx.generate_stacktrace();\n-    let stacktrace = prune_stacktrace(ecx, stacktrace);\n+    let (stacktrace, was_pruned) = prune_stacktrace(ecx, stacktrace);\n     e.print_backtrace();\n     let msg = e.to_string();\n     report_msg(\n@@ -218,9 +221,8 @@ pub fn report_error<'tcx, 'mir>(\n         &stacktrace,\n     );\n \n-    // Include a note like `std` does for short backtraces, but since we are opt-out not opt-in, we\n-    // do not include a note when backtraces are off.\n-    if ecx.machine.backtrace_style == BacktraceStyle::Short && has_local_frame(&stacktrace) {\n+    // Include a note like `std` does when we omit frames from a backtrace\n+    if was_pruned {\n         ecx.tcx.sess.diagnostic().note_without_error(\n             \"some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\",\n         );\n@@ -377,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 );\n             }\n \n-            let stacktrace = prune_stacktrace(this, stacktrace);\n+            let (stacktrace, _was_pruned) = prune_stacktrace(this, stacktrace);\n \n             // Show diagnostics.\n             for e in diagnostics.drain(..) {"}]}