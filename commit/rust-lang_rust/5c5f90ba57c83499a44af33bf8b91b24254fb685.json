{"sha": "5c5f90ba57c83499a44af33bf8b91b24254fb685", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWY5MGJhNTdjODM0OTlhNDRhZjMzYmY4YjkxYjI0MjU0ZmI2ODU=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-03T20:28:40Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-04T23:30:42Z"}, "message": "Confluent `ModuleSource` usage", "tree": {"sha": "839b5d523978918cde9f6aeceba6f8819214e856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839b5d523978918cde9f6aeceba6f8819214e856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5f90ba57c83499a44af33bf8b91b24254fb685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5f90ba57c83499a44af33bf8b91b24254fb685", "html_url": "https://github.com/rust-lang/rust/commit/5c5f90ba57c83499a44af33bf8b91b24254fb685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5f90ba57c83499a44af33bf8b91b24254fb685/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38853459e3d964cc7f635829cdc66f5faee33d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/38853459e3d964cc7f635829cdc66f5faee33d85", "html_url": "https://github.com/rust-lang/rust/commit/38853459e3d964cc7f635829cdc66f5faee33d85"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "d9bccd902fcdeafb5c78ae971fbf7102a8ef1d46", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5f90ba57c83499a44af33bf8b91b24254fb685/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5f90ba57c83499a44af33bf8b91b24254fb685/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=5c5f90ba57c83499a44af33bf8b91b24254fb685", "patch": "@@ -26,11 +26,7 @@ impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let src = def_map[self.id.local_id].definition_source(db);\n-        src.map(|it| match it {\n-            Either::Left(it) => ModuleSource::SourceFile(it),\n-            Either::Right(it) => ModuleSource::Module(it),\n-        })\n+        def_map[self.id.local_id].definition_source(db)\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`."}, {"sha": "e356515cb0c622dfc73bca3d61005c26b0dc7d23", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c5f90ba57c83499a44af33bf8b91b24254fb685/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5f90ba57c83499a44af33bf8b91b24254fb685/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=5c5f90ba57c83499a44af33bf8b91b24254fb685", "patch": "@@ -57,7 +57,6 @@ mod tests;\n \n use std::sync::Arc;\n \n-use either::Either;\n use hir_expand::{\n     ast_id_map::FileAstId, diagnostics::DiagnosticSink, name::Name, InFile, MacroDefId,\n };\n@@ -154,20 +153,16 @@ impl ModuleOrigin {\n \n     /// Returns a node which defines this module.\n     /// That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(\n-        &self,\n-        db: &impl DefDatabase,\n-    ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n+    pub fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         match self {\n             ModuleOrigin::File(_, file_id) | ModuleOrigin::Root(Some(file_id)) => {\n                 let file_id = *file_id;\n                 let sf = db.parse(file_id).tree();\n-                return InFile::new(file_id.into(), Either::Left(sf));\n+                return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n             }\n             ModuleOrigin::Root(None) => unreachable!(),\n-            ModuleOrigin::Inline(m) => InFile::new(m.file_id, Either::Right(m.to_node(db))),\n-            // FIXME: right now it's never constructed, so it's fine to omit\n-            ModuleOrigin::Block(_b) => unimplemented!(),\n+            ModuleOrigin::Inline(m) => InFile::new(m.file_id, ModuleSource::Module(m.to_node(db))),\n+            ModuleOrigin::Block(b) => InFile::new(b.file_id, ModuleSource::Block(b.to_node(db))),\n         }\n     }\n }\n@@ -348,10 +343,7 @@ impl CrateDefMap {\n \n impl ModuleData {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(\n-        &self,\n-        db: &impl DefDatabase,\n-    ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n+    pub fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         self.origin.definition_source(db)\n     }\n "}]}