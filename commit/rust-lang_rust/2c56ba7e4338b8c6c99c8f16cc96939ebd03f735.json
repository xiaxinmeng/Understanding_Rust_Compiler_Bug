{"sha": "2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNTZiYTdlNDMzOGI4YzZjOTljOGYxNmNjOTY5MzllYmQwM2Y3MzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-06T13:58:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-06T13:59:00Z"}, "message": "improve error messages", "tree": {"sha": "6963a3207a0301ad8847a2051a56694c6c508690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6963a3207a0301ad8847a2051a56694c6c508690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "html_url": "https://github.com/rust-lang/rust/commit/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8023b9aca841e965228cf9dc4ba5cb27c9457c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8023b9aca841e965228cf9dc4ba5cb27c9457c", "html_url": "https://github.com/rust-lang/rust/commit/ce8023b9aca841e965228cf9dc4ba5cb27c9457c"}], "stats": {"total": 150, "additions": 105, "deletions": 45}, "files": [{"sha": "147ea64a9c25edca58fd7454a078422ef1518b3f", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -493,7 +493,7 @@ impl unify_methods for infer_ctxt {\n                     if b == r {\n                         self.uok()\n                     } else {\n-                        err(ty::terr_regions_differ(false, b, a))\n+                        err(ty::terr_regions_differ(b, a))\n                     }\n                 }\n               }\n@@ -521,21 +521,23 @@ impl unify_methods for infer_ctxt {\n         }\n     }\n \n-    /* mk_subty passes the \"smaller\" type as the first argument\n-     and the \"bigger\" type as the second -- so the first arg\n-    is the actual type, and the second is the expected type */\n-    fn flds(a: ty::field, e: ty::field) -> ures {\n-        if e.ident != a.ident {\n-            ret self.uerr(ty::terr_record_fields(e.ident, a.ident));\n+    fn flds(a: ty::field, b: ty::field) -> ures {\n+        if b.ident != a.ident {\n+            // Note: the error object expects the \"expected\" field to\n+            // come first, which is generally the supertype (b).\n+            ret self.uerr(ty::terr_record_fields(b.ident, a.ident));\n+        }\n+\n+        self.mts(a.mt, b.mt).chain_err {|err|\n+            self.uerr(ty::terr_in_field(@err, a.ident))\n         }\n-        self.mts(a.mt, e.mt)\n     }\n \n     fn tps(as: [ty::t], bs: [ty::t]) -> ures {\n         if check vec::same_length(as, bs) {\n             iter2(as, bs) {|a, b| self.tys(a, b) }\n         } else {\n-            self.uerr(ty::terr_ty_param_size(as.len(), bs.len()))\n+            self.uerr(ty::terr_ty_param_size(bs.len(), as.len()))\n         }\n     }\n \n@@ -544,7 +546,7 @@ impl unify_methods for infer_ctxt {\n           (_, ast::proto_any) { self.uok() }\n           (ast::proto_bare, _) { self.uok() }\n           (_, _) if a == b { self.uok() }\n-          _ { self.uerr(ty::terr_proto_mismatch(a, b)) }\n+          _ { self.uerr(ty::terr_proto_mismatch(b, a)) }\n         }\n     }\n \n@@ -558,7 +560,7 @@ impl unify_methods for infer_ctxt {\n                this check is necessary to ensure that the\n                annotation in an object method matches the\n                declared object type */\n-            self.uerr(ty::terr_ret_style_mismatch(a_ret_style, b_ret_style))\n+            self.uerr(ty::terr_ret_style_mismatch(b_ret_style, a_ret_style))\n         } else {\n             self.uok()\n         }\n@@ -672,7 +674,7 @@ impl unify_methods for infer_ctxt {\n                 self.constrs(a, b)\n             }\n         } else {\n-            self.uerr(ty::terr_constr_len(as.len(), bs.len()))\n+            self.uerr(ty::terr_constr_len(bs.len(), as.len()))\n         }\n     }\n \n@@ -713,7 +715,7 @@ impl unify_methods for infer_ctxt {\n             if ty::mach_sty(cfg, a) == ty::mach_sty(cfg, b) {\n                 self.uok()\n             } else {\n-                self.uerr(ty::terr_mismatch)\n+                self.uerr(ty::terr_sorts(b, a))\n             }\n           }\n \n@@ -757,16 +759,16 @@ impl unify_methods for infer_ctxt {\n                     self.flds(a, b)\n                 }\n             } else {\n-                ret self.uerr(ty::terr_record_size(a_fields.len(),\n-                                             b_fields.len()));\n+                ret self.uerr(ty::terr_record_size(b_fields.len(),\n+                                                   a_fields.len()));\n             }\n           }\n \n           (ty::ty_tup(a_tys), ty::ty_tup(b_tys)) {\n             if check vec::same_length(a_tys, b_tys) {\n                 iter2(a_tys, b_tys) {|a,b| self.tys(a,b) }\n             } else {\n-                self.uerr(ty::terr_tuple_size(a_tys.len(), b_tys.len()))\n+                self.uerr(ty::terr_tuple_size(b_tys.len(), a_tys.len()))\n             }\n           }\n \n@@ -780,7 +782,7 @@ impl unify_methods for infer_ctxt {\n             }\n           }\n \n-          _ { self.uerr(ty::terr_mismatch) }\n+          _ { self.uerr(ty::terr_sorts(b, a)) }\n         }\n     }\n }\n@@ -1066,7 +1068,7 @@ fn c_tuptys<C:combine>(self: C, as: [ty::t], bs: [ty::t])\n     if check vec::same_length(as, bs) {\n         map2(as, bs) {|a, b| self.c_tys(a, b) }\n     } else {\n-        err(ty::terr_tuple_size(as.len(), bs.len()))\n+        err(ty::terr_tuple_size(bs.len(), as.len()))\n     }\n }\n \n@@ -1077,7 +1079,7 @@ fn c_tps<C:combine>(self: C, _did: ast::def_id, as: [ty::t], bs: [ty::t])\n     if check vec::same_length(as, bs) {\n         map2(as, bs) {|a,b| self.c_tys(a, b) }\n     } else {\n-        err(ty::terr_ty_param_size(as.len(), bs.len()))\n+        err(ty::terr_ty_param_size(bs.len(), as.len()))\n     }\n }\n \n@@ -1087,17 +1089,17 @@ fn c_fieldvecs<C:combine>(self: C, as: [ty::field], bs: [ty::field])\n     if check vec::same_length(as, bs) {\n         map2(as, bs) {|a,b| c_flds(self, a, b) }\n     } else {\n-        err(ty::terr_record_size(as.len(), bs.len()))\n+        err(ty::terr_record_size(bs.len(), as.len()))\n     }\n }\n \n-fn c_flds<C:combine>(self: C, e: ty::field, a: ty::field) -> cres<ty::field> {\n-    if e.ident == a.ident {\n-        self.c_mts(e.mt, a.mt).chain {|mt|\n-            ok({ident: e.ident, mt: mt})\n+fn c_flds<C:combine>(self: C, a: ty::field, b: ty::field) -> cres<ty::field> {\n+    if a.ident == b.ident {\n+        self.c_mts(a.mt, b.mt).chain {|mt|\n+            ok({ident: a.ident, mt: mt})\n         }\n     } else {\n-        err(ty::terr_record_fields(e.ident, a.ident))\n+        err(ty::terr_record_fields(b.ident, a.ident))\n     }\n }\n \n@@ -1196,7 +1198,7 @@ fn c_tys<C:combine>(\n         if ty::mach_sty(cfg, a) == ty::mach_sty(cfg, b) {\n             ok(a)\n         } else {\n-            err(ty::terr_mismatch)\n+            err(ty::terr_sorts(b, a))\n         }\n       }\n \n@@ -1293,7 +1295,7 @@ fn c_tys<C:combine>(\n         }\n       }\n \n-      _ { err(ty::terr_mismatch) }\n+      _ { err(ty::terr_sorts(b, a)) }\n     }\n     }\n }\n@@ -1350,14 +1352,14 @@ fn c_regions<C:combine>(\n             #debug[\"... no, %s != %s.\",\n                    a.to_str(self.infcx()),\n                    b.to_str(self.infcx())];\n-            err(ty::terr_regions_differ(false, b, a))\n+            err(ty::terr_regions_differ(b, a))\n         }\n       }\n \n       (ty::re_default, _) |\n       (_, ty::re_default) {\n         // actually a compiler bug, I think.\n-        err(ty::terr_regions_differ(false, b, a))\n+        err(ty::terr_regions_differ(b, a))\n       }\n     }\n     }\n@@ -1480,7 +1482,7 @@ impl of combine for lub {\n         let rm = self.infcx().tcx.region_map;\n         alt region::nearest_common_ancestor(rm, a_id, b_id) {\n           some(r_id) { ok(ty::re_scope(r_id)) }\n-          _ { err(ty::terr_regions_differ(false, b, a)) }\n+          _ { err(ty::terr_regions_differ(b, a)) }\n         }\n     }\n }\n@@ -1623,7 +1625,7 @@ impl of combine for glb {\n         alt region::nearest_common_ancestor(rm, a_id, b_id) {\n           some(r_id) if a_id == r_id { ok(b) }\n           some(r_id) if b_id == r_id { ok(a) }\n-          _ { err(ty::terr_regions_differ(false, b, a)) }\n+          _ { err(ty::terr_regions_differ(b, a)) }\n         }\n     }\n }"}, {"sha": "de4dddc7390c366c8925157f9b5b27bf8fe12c5b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -341,7 +341,9 @@ enum type_err {\n     terr_mode_mismatch(mode, mode),\n     terr_constr_len(uint, uint),\n     terr_constr_mismatch(@type_constr, @type_constr),\n-    terr_regions_differ(bool /* variance */, region, region),\n+    terr_regions_differ(region, region),\n+    terr_in_field(@type_err, str),\n+    terr_sorts(t, t)\n }\n \n enum param_bound {\n@@ -1837,6 +1839,33 @@ fn set_default_mode(cx: ctxt, m: ast::mode, m_def: ast::rmode) {\n     }\n }\n \n+fn ty_sort_str(cx: ctxt, t: t) -> str {\n+    alt get(t).struct {\n+      ty_nil | ty_bot | ty_bool | ty_int(_) |\n+      ty_uint(_) | ty_float(_) | ty_str | ty_type | ty_opaque_box |\n+      ty_opaque_closure_ptr(_) {\n+        ty_to_str(cx, t)\n+      }\n+\n+      ty_enum(_, _) { \"enum\" }\n+      ty_box(_) { \"@-ptr\" }\n+      ty_uniq(_) { \"~-ptr\" }\n+      ty_vec(_) { \"vector\" }\n+      ty_ptr(_) { \"*-ptr\" }\n+      ty_rptr(_, _) { \"&-ptr\" }\n+      ty_rec(_) { \"record\" }\n+      ty_fn(_) { \"fn\" }\n+      ty_iface(_, _) { \"iface\" }\n+      ty_class(_, _) { \"class\" }\n+      ty_res(_, _, _) { \"resource\" }\n+      ty_tup(_) { \"tuple\" }\n+      ty_var(_) { \"variable\" }\n+      ty_param(_, _) { \"type parameter\" }\n+      ty_self(_) { \"self\" }\n+      ty_constr(t, _) { ty_sort_str(cx, t) }\n+    }\n+}\n+\n fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n     alt err {\n       terr_mismatch { ret \"types differ\"; }\n@@ -1876,8 +1905,8 @@ fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n       }\n       terr_record_mutability { ret \"record elements differ in mutability\"; }\n       terr_record_fields(e_fld, a_fld) {\n-        ret \"expected a record with field '\" + e_fld +\n-                \"' but found one with field '\" + a_fld + \"'\";\n+        ret \"expected a record with field `\" + e_fld +\n+                \"` but found one with field `\" + a_fld + \"`\";\n       }\n       terr_arg_count { ret \"incorrect number of function parameters\"; }\n       terr_mode_mismatch(e_mode, a_mode) {\n@@ -1894,16 +1923,18 @@ fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n                 \" but found one with constraint \" +\n                 ty_constr_to_str(a_constr);\n       }\n-      terr_regions_differ(true, region_a, region_b) {\n-        ret #fmt(\"reference lifetime %s does not match reference lifetime %s\",\n-                 region_to_str(cx, region_a), region_to_str(cx, region_b));\n-      }\n-      terr_regions_differ(false, subregion, superregion) {\n+      terr_regions_differ(subregion, superregion) {\n         ret #fmt(\"references with lifetime %s do not outlive references with \\\n                   lifetime %s\",\n                  region_to_str(cx, subregion),\n                  region_to_str(cx, superregion));\n       }\n+      terr_in_field(err, fname) {\n+        ret #fmt(\"in field `%s`, %s\", fname, type_err_to_str(cx, *err));\n+      }\n+      terr_sorts(exp, act) {\n+        ret #fmt(\"%s vs %s\", ty_sort_str(cx, exp), ty_sort_str(cx, act));\n+      }\n     }\n }\n "}, {"sha": "bab121bd6d348b1b5a5498e275c67e9432264b3e", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -3,7 +3,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     ret 7u;\n-    //!^ ERROR expected `_|_` but found `uint` (types differ)\n+    //!^ ERROR expected `_|_` but found `uint`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "b6e2dea4e5ae73d883894e1602dfcb4059222983", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -3,7 +3,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     if i < 0u { } else { fail; }\n-    //!^ ERROR expected `_|_` but found `()` (types differ)\n+    //!^ ERROR expected `_|_` but found `()`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "bdb543ed19bc8ffaceb2674e6f367f5cfbb6ecfb", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -1,4 +1,4 @@\n fn f() -> ! {\n-    3 //! ERROR expected `_|_` but found `int` (types differ)\n+    3 //! ERROR expected `_|_` but found `int`\n }\n fn main() { }"}, {"sha": "75d8c4a37df4f5c9b3909f169707fc95391f2b4b", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -1,6 +1,6 @@\n fn g() -> ! { fail; }\n fn f() -> ! {\n-    ret 42; //! ERROR expected `_|_` but found `int` (types differ)\n+    ret 42; //! ERROR expected `_|_` but found `int`\n     g(); //! WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "58e8ef4fe53fb054f3898ed7e9d35ef548123126", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -1,5 +1,5 @@\n fn f() -> ! {\n-    ret 42; //! ERROR expected `_|_` but found `int` (types differ)\n+    ret 42; //! ERROR expected `_|_` but found `int`\n     fail; //! WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "d2015e10698f677bed77fa8dda53df60b3ac1d44", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -4,7 +4,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  ret 42; //! ERROR expected `_|_` but found `int` (types differ)\n+  ret 42; //! ERROR expected `_|_` but found `int`\n }\n \n fn main() {"}, {"sha": "acbb7f0353117e0197fe308fe6732f509e4a99e1", "filename": "src/test/compile-fail/rec-expected.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-expected.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -0,0 +1,9 @@\n+type foo = {a: int};\n+type bar = {b: int};\n+\n+fn want_foo(f: foo) {}\n+fn have_bar(b: bar) {\n+    want_foo(b); //! ERROR expected a record with field `a`\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "0b676e35db7a7b549a64270fb5c8fa766f3767c8", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -0,0 +1,9 @@\n+type foo = {a: int, b: int};\n+type bar = {a: int, b: uint};\n+\n+fn want_foo(f: foo) {}\n+fn have_bar(b: bar) {\n+    want_foo(b); //! ERROR (in field `b`, int vs uint)\n+}\n+\n+fn main() {}"}, {"sha": "6ab384673c1cfd4d15eb5f8ce64d44aa13f8ac83", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c56ba7e4338b8c6c99c8f16cc96939ebd03f735/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=2c56ba7e4338b8c6c99c8f16cc96939ebd03f735", "patch": "@@ -0,0 +1,9 @@\n+type foo = {a: int, b: int};\n+type bar = @foo;\n+\n+fn want_foo(f: foo) {}\n+fn have_bar(b: bar) {\n+    want_foo(b); //! ERROR (record vs @-ptr)\n+}\n+\n+fn main() {}"}]}