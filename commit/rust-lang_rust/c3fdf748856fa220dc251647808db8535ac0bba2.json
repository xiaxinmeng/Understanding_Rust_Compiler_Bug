{"sha": "c3fdf748856fa220dc251647808db8535ac0bba2", "node_id": "C_kwDOAAsO6NoAKGMzZmRmNzQ4ODU2ZmEyMjBkYzI1MTY0NzgwOGRiODUzNWFjMGJiYTI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-11T15:29:24Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-15T15:13:47Z"}, "message": "errors: lint on `LintDiagnosticBuilder::build`\n\nApply the `#[rustc_lint_diagnostics]` attribute to\n`LintDiagnosticBuilder::build` so that diagnostic migration lints will\ntrigger for it.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "90761b4da497d24d8ceb9360091a6e649987b3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90761b4da497d24d8ceb9360091a6e649987b3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fdf748856fa220dc251647808db8535ac0bba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fdf748856fa220dc251647808db8535ac0bba2", "html_url": "https://github.com/rust-lang/rust/commit/c3fdf748856fa220dc251647808db8535ac0bba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fdf748856fa220dc251647808db8535ac0bba2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f480661f66e35869521ccd60278107233f9670", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f480661f66e35869521ccd60278107233f9670", "html_url": "https://github.com/rust-lang/rust/commit/06f480661f66e35869521ccd60278107233f9670"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "f8a750da93f8d3442af9adb9b59b813d1cb4c9bb", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=c3fdf748856fa220dc251647808db8535ac0bba2", "patch": "@@ -10,3 +10,12 @@ privacy-unnamed-item-is-private = {$kind} is private\n privacy-in-public-interface = {$vis_descr} {$kind} `{$descr}` in public interface\n     .label = can't leak {$vis_descr} {$kind}\n     .visibility-label = `{$descr}` declared as {$vis_descr}\n+\n+privacy-from-private-dep-in-public-interface =\n+    {$kind} `{$descr}` from private dependency '{$krate}' in public interface\n+\n+private-in-public-lint =\n+    {$vis_descr} {$kind} `{$descr}` in public interface (error {$kind ->\n+        [trait] E0445\n+        *[other] E0446\n+    })"}, {"sha": "9e68ee282e65235634506aab28e2d97c41e698da", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=c3fdf748856fa220dc251647808db8535ac0bba2", "patch": "@@ -595,6 +595,7 @@ macro_rules! error_code {\n pub struct LintDiagnosticBuilder<'a, G: EmissionGuarantee>(DiagnosticBuilder<'a, G>);\n \n impl<'a, G: EmissionGuarantee> LintDiagnosticBuilder<'a, G> {\n+    #[rustc_lint_diagnostics]\n     /// Return the inner `DiagnosticBuilder`, first setting the primary message to `msg`.\n     pub fn build(mut self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'a, G> {\n         self.0.set_primary_message(msg);"}, {"sha": "b0fac91f6ebc35831e6790f8406bdf358272d041", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=c3fdf748856fa220dc251647808db8535ac0bba2", "patch": "@@ -1,4 +1,4 @@\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -73,3 +73,19 @@ pub struct InPublicInterface<'a> {\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[lint(privacy::from_private_dep_in_public_interface)]\n+pub struct FromPrivateDependencyInPublicInterface<'a> {\n+    pub kind: &'a str,\n+    pub descr: String,\n+    pub krate: Symbol,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[lint(privacy::private_in_public_lint)]\n+pub struct PrivateInPublicLint<'a> {\n+    pub vis_descr: &'static str,\n+    pub kind: &'a str,\n+    pub descr: String,\n+}"}, {"sha": "9a835808d4935518ea21e24dd95189aa85a477ab", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fdf748856fa220dc251647808db8535ac0bba2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c3fdf748856fa220dc251647808db8535ac0bba2", "patch": "@@ -38,8 +38,8 @@ use std::ops::ControlFlow;\n use std::{cmp, fmt, mem};\n \n use errors::{\n-    FieldIsPrivate, FieldIsPrivateLabel, InPublicInterface, InPublicInterfaceTraits, ItemIsPrivate,\n-    UnnamedItemIsPrivate,\n+    FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, UnnamedItemIsPrivate,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -1716,19 +1716,14 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n \n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         if self.leaks_private_dep(def_id) {\n-            self.tcx.struct_span_lint_hir(\n+            self.tcx.emit_spanned_lint(\n                 lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,\n                 self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),\n                 self.tcx.def_span(self.item_def_id.to_def_id()),\n-                |lint| {\n-                    lint.build(&format!(\n-                        \"{} `{}` from private dependency '{}' in public \\\n-                                                interface\",\n-                        kind,\n-                        descr,\n-                        self.tcx.crate_name(def_id.krate)\n-                    ))\n-                    .emit();\n+                FromPrivateDependencyInPublicInterface {\n+                    kind,\n+                    descr: descr.to_string(),\n+                    krate: self.tcx.crate_name(def_id.krate),\n                 },\n             );\n         }\n@@ -1754,12 +1749,14 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 }\n             };\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n+            let descr = descr.to_string();\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n                 let descr = descr.to_string();\n-                let vis_span = self.tcx.def_span(def_id);\n+                let vis_span =\n+                    self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n                 if kind == \"trait\" {\n                     self.tcx.sess.emit_err(InPublicInterfaceTraits {\n                         span,\n@@ -1778,19 +1775,11 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     });\n                 }\n             } else {\n-                let err_code = if kind == \"trait\" { \"E0445\" } else { \"E0446\" };\n-                self.tcx.struct_span_lint_hir(\n+                self.tcx.emit_spanned_lint(\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    |lint| {\n-                        lint.build(&format!(\n-                            \"{} (error {})\",\n-                            format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr),\n-                            err_code\n-                        ))\n-                        .emit();\n-                    },\n+                    PrivateInPublicLint { vis_descr, kind, descr },\n                 );\n             }\n         }"}]}