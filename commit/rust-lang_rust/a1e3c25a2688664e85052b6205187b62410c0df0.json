{"sha": "a1e3c25a2688664e85052b6205187b62410c0df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZTNjMjVhMjY4ODY2NGU4NTA1MmI2MjA1MTg3YjYyNDEwYzBkZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-12T09:03:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-12T09:03:04Z"}, "message": "Auto merge of #24248 - nrc:macro-span, r=sfackler", "tree": {"sha": "a9f3baed1ea1f5cef2caaa4bf20b7bef34c1c896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f3baed1ea1f5cef2caaa4bf20b7bef34c1c896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e3c25a2688664e85052b6205187b62410c0df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e3c25a2688664e85052b6205187b62410c0df0", "html_url": "https://github.com/rust-lang/rust/commit/a1e3c25a2688664e85052b6205187b62410c0df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e3c25a2688664e85052b6205187b62410c0df0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "html_url": "https://github.com/rust-lang/rust/commit/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718"}, {"sha": "b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e", "html_url": "https://github.com/rust-lang/rust/commit/b9fa6c67fbe20bdd6a89d86d3eabe62dacb8ac5e"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "a3dd77b8197dc187b8a24d58189a9ba33550cbf5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1e3c25a2688664e85052b6205187b62410c0df0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e3c25a2688664e85052b6205187b62410c0df0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a1e3c25a2688664e85052b6205187b62410c0df0", "patch": "@@ -2162,13 +2162,13 @@ impl<'a> Parser<'a> {\n                             &token::CloseDelim(delim),\n                             seq_sep_none(),\n                             |p| p.parse_token_tree()));\n-                        let hi = self.span.hi;\n+                        let hi = self.last_span.hi;\n \n                         return Ok(self.mk_mac_expr(lo,\n-                                                hi,\n-                                                MacInvocTT(pth,\n-                                                           tts,\n-                                                           EMPTY_CTXT)));\n+                                                   hi,\n+                                                   MacInvocTT(pth,\n+                                                              tts,\n+                                                              EMPTY_CTXT)));\n                     }\n                     if self.check(&token::OpenDelim(token::Brace)) {\n                         // This is a struct literal, unless we're prohibited\n@@ -3449,7 +3449,7 @@ impl<'a> Parser<'a> {\n                 seq_sep_none(),\n                 |p| p.parse_token_tree()\n             ));\n-            let hi = self.span.hi;\n+            let hi = self.last_span.hi;\n \n             let style = if delim == token::Brace {\n                 MacStmtWithBraces\n@@ -3567,7 +3567,7 @@ impl<'a> Parser<'a> {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n                                 node: StmtMac(mac, MacStmtWithSemicolon),\n-                                span: span,\n+                                span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             try!(self.bump());\n                         }\n@@ -3591,7 +3591,7 @@ impl<'a> Parser<'a> {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n                                 node: StmtMac(m, MacStmtWithSemicolon),\n-                                span: span,\n+                                span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             try!(self.bump());\n                         }\n@@ -3610,13 +3610,15 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 _ => { // all other kinds of statements:\n+                    let mut hi = span.hi;\n                     if classify::stmt_ends_with_semi(&node) {\n                         try!(self.commit_stmt_expecting(token::Semi));\n+                        hi = self.last_span.hi;\n                     }\n \n                     stmts.push(P(Spanned {\n                         node: node,\n-                        span: span\n+                        span: mk_sp(span.lo, hi)\n                     }));\n                 }\n             }"}]}