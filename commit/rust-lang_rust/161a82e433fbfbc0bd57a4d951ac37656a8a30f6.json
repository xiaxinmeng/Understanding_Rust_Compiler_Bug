{"sha": "161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MWE4MmU0MzNmYmZiYzBiZDU3YTRkOTUxYWMzNzY1NmE4YTMwZjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-27T21:22:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-28T00:22:18Z"}, "message": "Camel case various core constructors", "tree": {"sha": "c59e3d6a32f471299a8fde09506ebf6cff8f44db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c59e3d6a32f471299a8fde09506ebf6cff8f44db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "html_url": "https://github.com/rust-lang/rust/commit/161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba9fdd3627869f04ee39d6146023df822e0936e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba9fdd3627869f04ee39d6146023df822e0936e", "html_url": "https://github.com/rust-lang/rust/commit/4ba9fdd3627869f04ee39d6146023df822e0936e"}], "stats": {"total": 1075, "additions": 530, "deletions": 545}, "files": [{"sha": "434b0eb3f2d53a020f178f533f4af17b40781b74", "filename": "doc/rust.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3030,8 +3030,8 @@ The result of a `spawn` call is a `core::task::task` value.\n An example of a `spawn` call:\n \n ~~~~\n-let po = comm::port();\n-let ch = comm::chan(po);\n+let po = comm::Port();\n+let ch = comm::Chan(po);\n \n do task::spawn {\n     // let task run, do other things\n@@ -3052,24 +3052,24 @@ channel's outgoing buffer.\n An example of a send:\n \n ~~~~\n-let po = comm::port();\n-let ch = comm::chan(po);\n+let po = comm::Port();\n+let ch = comm::Chan(po);\n comm::send(ch, ~\"hello, world\");\n ~~~~\n \n \n ### Receiving values from ports\n \n Receiving a value is done by a call to the `recv` method on a value of type\n-`core::comm::port`. This call causes the receiving task to enter the *blocked\n+`core::comm::Port`. This call causes the receiving task to enter the *blocked\n reading* state until a value arrives in the port's receive queue, at which\n time the port deques a value to return, and un-blocks the receiving task.\n \n An example of a *receive*:\n \n ~~~~~~~~\n-# let po = comm::port();\n-# let ch = comm::chan(po);\n+# let po = comm::Port();\n+# let ch = comm::Chan(po);\n # comm::send(ch, ~\"\");\n let s = comm::recv(po);\n ~~~~~~~~"}, {"sha": "fc79e5fcd33d4cc9fb05f4f33eeb6b20761e27ac", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2996,9 +2996,9 @@ message to the port.  The next statement actually spawns the child:\n \n ~~~~\n # import task::{spawn};\n-# import comm::{port, chan};\n+# import comm::{Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n-# let port = port();\n+# let port = Port();\n # let chan = port.chan();\n do spawn {\n     let result = some_expensive_computation();"}, {"sha": "7be2bed4f797d984e9ec066285fcc537ba480474", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -30,8 +30,8 @@\n import either::Either;\n import libc::size_t;\n \n-export Port, port;\n-export Chan, chan;\n+export Port;\n+export Chan;\n export send;\n export recv;\n export peek;\n@@ -69,13 +69,13 @@ enum Chan<T: send> {\n }\n \n /// Constructs a port\n-fn port<T: send>() -> Port<T> {\n+fn Port<T: send>() -> Port<T> {\n     Port_(@PortPtr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n }\n \n impl<T: send> Port<T> {\n \n-    fn chan() -> Chan<T> { chan(self) }\n+    fn chan() -> Chan<T> { Chan(self) }\n     fn send(+v: T) { self.chan().send(v) }\n     fn recv() -> T { recv(self) }\n     fn peek() -> bool { peek(self) }\n@@ -93,7 +93,7 @@ impl<T: send> Chan<T> {\n \n /// Open a new receiving channel for the duration of a function\n fn listen<T: send, U>(f: fn(Chan<T>) -> U) -> U {\n-    let po = port();\n+    let po = Port();\n     f(po.chan())\n }\n \n@@ -157,7 +157,7 @@ fn as_raw_port<T: send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n  * Constructs a channel. The channel is bound to the port used to\n  * construct it.\n  */\n-fn chan<T: send>(p: Port<T>) -> Chan<T> {\n+fn Chan<T: send>(p: Port<T>) -> Chan<T> {\n     Chan_(rustrt::get_port_id((**p).po))\n }\n \n@@ -295,51 +295,51 @@ extern mod rusti {\n \n \n #[test]\n-fn create_port_and_chan() { let p = port::<int>(); chan(p); }\n+fn create_port_and_chan() { let p = Port::<int>(); Chan(p); }\n \n #[test]\n fn send_int() {\n-    let p = port::<int>();\n-    let c = chan(p);\n+    let p = Port::<int>();\n+    let c = Chan(p);\n     send(c, 22);\n }\n \n #[test]\n fn send_recv_fn() {\n-    let p = port::<int>();\n-    let c = chan::<int>(p);\n+    let p = Port::<int>();\n+    let c = Chan::<int>(p);\n     send(c, 42);\n     assert (recv(p) == 42);\n }\n \n #[test]\n fn send_recv_fn_infer() {\n-    let p = port();\n-    let c = chan(p);\n+    let p = Port();\n+    let c = Chan(p);\n     send(c, 42);\n     assert (recv(p) == 42);\n }\n \n #[test]\n fn chan_chan_infer() {\n-    let p = port(), p2 = port::<int>();\n-    let c = chan(p);\n-    send(c, chan(p2));\n+    let p = Port(), p2 = Port::<int>();\n+    let c = Chan(p);\n+    send(c, Chan(p2));\n     recv(p);\n }\n \n #[test]\n fn chan_chan() {\n-    let p = port::<Chan<int>>(), p2 = port::<int>();\n-    let c = chan(p);\n-    send(c, chan(p2));\n+    let p = Port::<Chan<int>>(), p2 = Port::<int>();\n+    let c = Chan(p);\n+    send(c, Chan(p2));\n     recv(p);\n }\n \n #[test]\n fn test_peek() {\n-    let po = port();\n-    let ch = chan(po);\n+    let po = Port();\n+    let ch = Chan(po);\n     assert !peek(po);\n     send(ch, ());\n     assert peek(po);\n@@ -349,10 +349,10 @@ fn test_peek() {\n \n #[test]\n fn test_select2_available() {\n-    let po_a = port();\n-    let po_b = port();\n-    let ch_a = chan(po_a);\n-    let ch_b = chan(po_b);\n+    let po_a = Port();\n+    let po_b = Port();\n+    let ch_a = Chan(po_a);\n+    let ch_b = Chan(po_b);\n \n     send(ch_a, ~\"a\");\n \n@@ -365,10 +365,10 @@ fn test_select2_available() {\n \n #[test]\n fn test_select2_rendezvous() {\n-    let po_a = port();\n-    let po_b = port();\n-    let ch_a = chan(po_a);\n-    let ch_b = chan(po_b);\n+    let po_a = Port();\n+    let po_b = Port();\n+    let ch_a = Chan(po_a);\n+    let ch_b = Chan(po_b);\n \n     for iter::repeat(10u) {\n         do task::spawn {\n@@ -389,10 +389,10 @@ fn test_select2_rendezvous() {\n \n #[test]\n fn test_select2_stress() {\n-    let po_a = port();\n-    let po_b = port();\n-    let ch_a = chan(po_a);\n-    let ch_b = chan(po_b);\n+    let po_a = Port();\n+    let po_b = Port();\n+    let ch_a = Chan(po_a);\n+    let ch_b = Chan(po_b);\n \n     let msgs = 100u;\n     let times = 4u;\n@@ -426,8 +426,8 @@ fn test_select2_stress() {\n \n #[test]\n fn test_recv_chan() {\n-    let po = port();\n-    let ch = chan(po);\n+    let po = Port();\n+    let ch = Chan(po);\n     send(ch, ~\"flower\");\n     assert recv_chan(ch) == ~\"flower\";\n }\n@@ -436,16 +436,16 @@ fn test_recv_chan() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_recv_chan_dead() {\n-    let ch = chan(port());\n+    let ch = Chan(Port());\n     send(ch, ~\"flower\");\n     recv_chan(ch);\n }\n \n #[test]\n #[ignore(cfg(windows))]\n fn test_recv_chan_wrong_task() {\n-    let po = port();\n-    let ch = chan(po);\n+    let po = Port();\n+    let ch = Chan(po);\n     send(ch, ~\"flower\");\n     assert result::is_err(task::try(||\n         recv_chan(ch)\n@@ -454,14 +454,14 @@ fn test_recv_chan_wrong_task() {\n \n #[test]\n fn test_port_send() {\n-    let po = port();\n+    let po = Port();\n     po.send(());\n     po.recv();\n }\n \n #[test]\n fn test_chan_peek() {\n-    let po = port();\n+    let po = Port();\n     let ch = po.chan();\n     ch.send(());\n     assert ch.peek();\n@@ -482,7 +482,7 @@ fn test_listen() {\n fn test_port_detach_fail() {\n     for iter::repeat(100u) {\n         do task::spawn_unlinked {\n-            let po = port();\n+            let po = Port();\n             let ch = po.chan();\n \n             do task::spawn {"}, {"sha": "8a1943876d678038497958a276f365197cc7646d", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -8,7 +8,7 @@\n  * Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n  */\n \n-export DList, dlist, dlist_node;\n+export DList;\n export new_dlist, from_elem, from_vec, extensions;\n \n type DListLink<T> = Option<DListNode<T>>;\n@@ -20,11 +20,13 @@ enum DListNode<T> = @{\n     mut next: DListLink<T>\n };\n \n-enum DList<T> = @{\n-    mut size: uint,\n-    mut hd:   DListLink<T>,\n-    mut tl:   DListLink<T>,\n-};\n+enum DList<T> {\n+    DList_(@{\n+        mut size: uint,\n+        mut hd:   DListLink<T>,\n+        mut tl:   DListLink<T>\n+    })\n+}\n \n priv impl<T> DListNode<T> {\n     pure fn assert_links() {\n@@ -83,19 +85,19 @@ pure fn new_dlist_node<T>(+data: T) -> DListNode<T> {\n }\n \n /// Creates a new, empty dlist.\n-pure fn new_dlist<T>() -> DList<T> {\n-    DList(@{mut size: 0, mut hd: None, mut tl: None})\n+pure fn DList<T>() -> DList<T> {\n+    DList_(@{mut size: 0, mut hd: None, mut tl: None})\n }\n \n /// Creates a new dlist with a single element\n pure fn from_elem<T>(+data: T) -> DList<T> {\n-    let list = new_dlist();\n+    let list = DList();\n     unchecked { list.push(data); }\n     list\n }\n \n fn from_vec<T: copy>(+vec: &[T]) -> DList<T> {\n-    do vec::foldl(new_dlist(), vec) |list,data| {\n+    do vec::foldl(DList(), vec) |list,data| {\n         list.push(data); // Iterating left-to-right -- add newly to the tail.\n         list\n     }\n@@ -104,7 +106,7 @@ fn from_vec<T: copy>(+vec: &[T]) -> DList<T> {\n /// Produce a list from a list of lists, leaving no elements behind in the\n /// input. O(number of sub-lists).\n fn concat<T>(lists: DList<DList<T>>) -> DList<T> {\n-    let result = new_dlist();\n+    let result = DList();\n     while !lists.is_empty() {\n         result.append(lists.pop().get());\n     }\n@@ -485,7 +487,7 @@ mod tests {\n     #[test]\n     fn test_dlist_append_empty() {\n         let a = from_vec(~[1,2,3]);\n-        let b = new_dlist::<int>();\n+        let b = DList::<int>();\n         a.append(b);\n         assert a.len() == 3;\n         assert b.len() == 0;\n@@ -497,7 +499,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_append_to_empty() {\n-        let a = new_dlist::<int>();\n+        let a = DList::<int>();\n         let b = from_vec(~[4,5,6]);\n         a.append(b);\n         assert a.len() == 3;\n@@ -510,8 +512,8 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_append_two_empty() {\n-        let a = new_dlist::<int>();\n-        let b = new_dlist::<int>();\n+        let a = DList::<int>();\n+        let b = DList::<int>();\n         a.append(b);\n         assert a.len() == 0;\n         assert b.len() == 0;\n@@ -522,14 +524,14 @@ mod tests {\n     #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_dlist_append_self() {\n-        let a = new_dlist::<int>();\n+        let a = DList::<int>();\n         a.append(a);\n     }\n     #[test]\n     #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_dlist_prepend_self() {\n-        let a = new_dlist::<int>();\n+        let a = DList::<int>();\n         a.prepend(a);\n     }\n     #[test]\n@@ -562,7 +564,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_reverse_empty() {\n-        let a = new_dlist::<int>();\n+        let a = DList::<int>();\n         a.reverse();\n         assert a.len() == 0;\n         a.assert_consistent();\n@@ -593,7 +595,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_is_empty() {\n-        let empty = new_dlist::<int>();\n+        let empty = DList::<int>();\n         let full1 = from_vec(~[1,2,3]);\n         assert empty.is_empty();\n         assert !full1.is_empty();\n@@ -635,7 +637,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_push() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.push(1);\n         assert l.head() == 1;\n         assert l.tail() == 1;\n@@ -649,7 +651,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_push_head() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.push_head(3);\n         assert l.head() == 3;\n         assert l.tail() == 3;\n@@ -678,7 +680,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_head() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let _two = l.push_n(2);\n         l.assert_consistent(); let _three = l.push_n(3);\n@@ -693,7 +695,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_mid() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let _one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); let _three = l.push_n(3);\n@@ -708,7 +710,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_tail() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let _one = l.push_n(1);\n         l.assert_consistent(); let _two = l.push_n(2);\n         l.assert_consistent(); let three = l.push_n(3);\n@@ -723,7 +725,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_one_two() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); let _three = l.push_n(3);\n@@ -739,7 +741,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_one_three() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let _two = l.push_n(2);\n         l.assert_consistent(); let three = l.push_n(3);\n@@ -754,7 +756,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_two_three() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let _one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); let three = l.push_n(3);\n@@ -769,7 +771,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_remove_all() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); let three = l.push_n(3);\n@@ -782,7 +784,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_insert_n_before() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let _one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); let three = new_dlist_node(3);\n@@ -798,7 +800,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_insert_n_after() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let _two = l.push_n(2);\n         l.assert_consistent(); let three = new_dlist_node(3);\n@@ -814,7 +816,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_insert_before_head() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let one = l.push_n(1);\n         l.assert_consistent(); let _two = l.push_n(2);\n         l.assert_consistent(); assert l.len() == 2;\n@@ -829,7 +831,7 @@ mod tests {\n     }\n     #[test]\n     fn test_dlist_insert_after_tail() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         l.assert_consistent(); let _one = l.push_n(1);\n         l.assert_consistent(); let two = l.push_n(2);\n         l.assert_consistent(); assert l.len() == 2;\n@@ -844,15 +846,15 @@ mod tests {\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_asymmetric_link() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let _one = l.push_n(1);\n         let two = l.push_n(2);\n         two.prev = None;\n         l.assert_consistent();\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_cyclic_list() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let one = l.push_n(1);\n         let _two = l.push_n(2);\n         let three = l.push_n(3);\n@@ -862,32 +864,32 @@ mod tests {\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_headless() {\n-        new_dlist::<int>().head();\n+        DList::<int>().head();\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_insert_already_present_before() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let one = l.push_n(1);\n         let two = l.push_n(2);\n         l.insert_n_before(two, one);\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_insert_already_present_after() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let one = l.push_n(1);\n         let two = l.push_n(2);\n         l.insert_n_after(one, two);\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_insert_before_orphan() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let one = new_dlist_node(1);\n         let two = new_dlist_node(2);\n         l.insert_n_before(one, two);\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_dlist_insert_after_orphan() {\n-        let l = new_dlist::<int>();\n+        let l = DList::<int>();\n         let one = new_dlist_node(1);\n         let two = new_dlist_node(2);\n         l.insert_n_after(two, one);"}, {"sha": "1cfd76fc1e2e336c1b8d888ebde7b52cc8cf6c5a", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -13,7 +13,6 @@ import unsafe::reinterpret_cast;\n import ptr::null;\n \n export DVec;\n-export dvec;\n export from_elem;\n export from_vec;\n export extensions;\n@@ -59,7 +58,7 @@ enum DVec<A> {\n }\n \n /// Creates a new, empty dvec\n-fn dvec<A>() -> DVec<A> {\n+fn DVec<A>() -> DVec<A> {\n     DVec_({mut data: ~[mut]})\n }\n "}, {"sha": "d5521b509d42b9ec07e21d5513f0624521a7f0e4", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -6,7 +6,7 @@ Basic input/output\n \n import result::Result;\n \n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n import libc::consts::os::posix88::*;\n import libc::consts::os::extra::*;\n@@ -683,7 +683,7 @@ impl MemBuffer: Writer {\n }\n \n fn mem_buffer() -> MemBuffer {\n-    @{buf: dvec(), mut pos: 0u}\n+    @{buf: DVec(), mut pos: 0u}\n }\n fn mem_buffer_writer(b: MemBuffer) -> Writer { b as Writer }\n fn mem_buffer_buf(b: MemBuffer) -> ~[u8] { b.buf.get() }"}, {"sha": "013b50ddad20fce070bdda036dca181446b16f4d", "filename": "src/libcore/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -149,25 +149,25 @@ mod global_env {\n \n     fn getenv(n: &str) -> Option<~str> {\n         let env_ch = get_global_env_chan();\n-        let po = comm::port();\n+        let po = comm::Port();\n         comm::send(env_ch, MsgGetEnv(str::from_slice(n),\n-                                     comm::chan(po)));\n+                                     comm::Chan(po)));\n         comm::recv(po)\n     }\n \n     fn setenv(n: &str, v: &str) {\n         let env_ch = get_global_env_chan();\n-        let po = comm::port();\n+        let po = comm::Port();\n         comm::send(env_ch, MsgSetEnv(str::from_slice(n),\n                                      str::from_slice(v),\n-                                     comm::chan(po)));\n+                                     comm::Chan(po)));\n         comm::recv(po)\n     }\n \n     fn env() -> ~[(~str,~str)] {\n         let env_ch = get_global_env_chan();\n-        let po = comm::port();\n-        comm::send(env_ch, MsgEnv(comm::chan(po)));\n+        let po = comm::Port();\n+        comm::send(env_ch, MsgEnv(comm::Chan(po)));\n         comm::recv(po)\n     }\n \n@@ -833,7 +833,7 @@ mod tests {\n \n     fn make_rand_name() -> ~str {\n         import rand;\n-        let rng: rand::Rng = rand::rng();\n+        let rng: rand::Rng = rand::Rng();\n         let n = ~\"TEST\" + rng.gen_str(10u);\n         assert option::is_none(getenv(n));\n         n"}, {"sha": "3f46e1d1653ade116ff37f6581b4bcfb604c0c8a", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -47,8 +47,8 @@ unsafe fn chan_from_global_ptr<T: send>(\n \n         let (setup_po, setup_ch) = do task_fn().spawn_conversation\n             |setup_po, setup_ch| {\n-            let po = comm::port::<T>();\n-            let ch = comm::chan(po);\n+            let po = comm::Port::<T>();\n+            let ch = comm::Chan(po);\n             comm::send(setup_ch, ch);\n \n             // Wait to hear if we are the official instance of\n@@ -105,8 +105,8 @@ fn test_from_global_chan1() {\n         }\n     };\n     // Talk to it\n-    let po = comm::port();\n-    comm::send(ch, comm::chan(po));\n+    let po = comm::Port();\n+    comm::send(ch, comm::Chan(po));\n     assert comm::recv(po) == true;\n \n     // This one just reuses the previous channel\n@@ -118,8 +118,8 @@ fn test_from_global_chan1() {\n     };\n \n     // Talk to the original global task\n-    let po = comm::port();\n-    comm::send(ch, comm::chan(po));\n+    let po = comm::Port();\n+    comm::send(ch, comm::Chan(po));\n     assert comm::recv(po) == true;\n }\n \n@@ -131,8 +131,8 @@ fn test_from_global_chan2() {\n         let globchan = 0u;\n         let globchanp = ptr::addr_of(globchan);\n \n-        let resultpo = comm::port();\n-        let resultch = comm::chan(resultpo);\n+        let resultpo = comm::Port();\n+        let resultch = comm::Chan(resultpo);\n \n         // Spawn a bunch of tasks that all want to compete to\n         // create the global channel\n@@ -148,9 +148,9 @@ fn test_from_global_chan2() {\n                         }\n                     }\n                 };\n-                let po = comm::port();\n-                comm::send(ch, comm::chan(po));\n-                // We are the winner if our version of the\n+                let po = comm::Port();\n+                comm::send(ch, comm::Chan(po));\n+                // We are The winner if our version of the\n                 // task was installed\n                 let winner = comm::recv(po);\n                 comm::send(resultch, winner == i);\n@@ -186,8 +186,8 @@ fn test_from_global_chan2() {\n  *   a reference to its parent, so the parent will not die.\n  */\n unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     unsafe {\n         rustrt::rust_task_weaken(unsafe::reinterpret_cast(ch));\n     }"}, {"sha": "ee779e476420e57c28508c9f229664fc3ad31665", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n //! Random number generation\n \n-export Rng, rng, seed, seeded_rng, Weighted, extensions;\n+export Rng, seed, seeded_rng, Weighted, extensions;\n export xorshift, seeded_xorshift;\n \n #[allow(non_camel_case_types)] // runtime type\n@@ -259,7 +259,7 @@ fn seed() -> ~[u8] {\n }\n \n /// Create a random number generator with a system specified seed\n-fn rng() -> Rng {\n+fn Rng() -> Rng {\n     @RandRes(rustrt::rand_new()) as Rng\n }\n \n@@ -335,7 +335,7 @@ mod tests {\n \n     #[test]\n     fn gen_int_range() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         let a = r.gen_int_range(-3, 42);\n         assert a >= -3 && a < 42;\n         assert r.gen_int_range(0, 1) == 0;\n@@ -346,12 +346,12 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     fn gen_int_from_fail() {\n-        rand::rng().gen_int_range(5, -2);\n+        rand::Rng().gen_int_range(5, -2);\n     }\n \n     #[test]\n     fn gen_uint_range() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         let a = r.gen_uint_range(3u, 42u);\n         assert a >= 3u && a < 42u;\n         assert r.gen_uint_range(0u, 1u) == 0u;\n@@ -362,27 +362,27 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     fn gen_uint_range_fail() {\n-        rand::rng().gen_uint_range(5u, 2u);\n+        rand::Rng().gen_uint_range(5u, 2u);\n     }\n \n     #[test]\n     fn gen_float() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         let a = r.gen_float();\n         let b = r.gen_float();\n         log(debug, (a, b));\n     }\n \n     #[test]\n     fn gen_weighted_bool() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.gen_weighted_bool(0u) == true;\n         assert r.gen_weighted_bool(1u) == true;\n     }\n \n     #[test]\n     fn gen_str() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n@@ -393,28 +393,28 @@ mod tests {\n \n     #[test]\n     fn gen_bytes() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.gen_bytes(0u).len() == 0u;\n         assert r.gen_bytes(10u).len() == 10u;\n         assert r.gen_bytes(16u).len() == 16u;\n     }\n \n     #[test]\n     fn choose() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.choose(~[1, 1, 1]) == 1;\n     }\n \n     #[test]\n     fn choose_option() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.choose_option(~[]) == None::<int>;\n         assert r.choose_option(~[1, 1, 1]) == Some(1);\n     }\n \n     #[test]\n     fn choose_weighted() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.choose_weighted(~[{weight: 1u, item: 42}]) == 42;\n         assert r.choose_weighted(~[\n             {weight: 0u, item: 42},\n@@ -424,7 +424,7 @@ mod tests {\n \n     #[test]\n     fn choose_weighted_option() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         assert r.choose_weighted_option(~[{weight: 1u, item: 42}]) ==\n                Some(42);\n         assert r.choose_weighted_option(~[\n@@ -436,7 +436,7 @@ mod tests {\n \n     #[test]\n     fn weighted_vec() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         let empty: ~[int] = ~[];\n         assert r.weighted_vec(~[]) == empty;\n         assert r.weighted_vec(~[\n@@ -448,7 +448,7 @@ mod tests {\n \n     #[test]\n     fn shuffle() {\n-        let r = rand::rng();\n+        let r = rand::Rng();\n         let empty: ~[int] = ~[];\n         assert r.shuffle(~[]) == empty;\n         assert r.shuffle(~[1, 1, 1]) == ~[1, 1, 1];"}, {"sha": "7a0b6df7e7dd39849f7622d6da718f7f3f4b53bd", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -297,8 +297,8 @@ fn program_output(prog: &str, args: &[~str]) ->\n     // in parallel so we don't deadlock while blocking on one\n     // or the other. FIXME (#2625): Surely there's a much more\n     // clever way to do this.\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n     do task::spawn_sched(task::SingleThreaded) {\n         let errput = readclose(pipe_err.in);\n         comm::send(ch, (2, errput));"}, {"sha": "19d87980c8c35a7a5b58afd0facd0409ef1ebfcd", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -39,7 +39,7 @@ mod linear {\n         ((capacity as float) * 3. / 4.) as uint\n     }\n \n-    fn linear_map<K,V>(\n+    fn LinearMap<K,V>(\n         +hashfn: pure fn~(x: &K) -> uint,\n         +eqfn: pure fn~(x: &K, y: &K) -> bool) -> LinearMap<K,V> {\n \n@@ -338,13 +338,13 @@ mod linear {\n #[test]\n mod test {\n \n-    import linear::{LinearMap, linear_map};\n+    import linear::LinearMap;\n \n     pure fn uint_hash(x: &uint) -> uint { *x }\n     pure fn uint_eq(x: &uint, y: &uint) -> bool { *x == *y }\n \n     fn int_linear_map<V>() -> LinearMap<uint,V> {\n-        return linear_map(uint_hash, uint_eq);\n+        return LinearMap(uint_hash, uint_eq);\n     }\n \n     #[test]"}, {"sha": "86992385fe14ccbae1e752203bf84f8cd8c43435", "filename": "src/libcore/task.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -285,8 +285,8 @@ impl TaskBuilder {\n         }\n \n         // Construct the future and give it to the caller.\n-        let po = comm::port::<Notification>();\n-        let ch = comm::chan(po);\n+        let po = comm::Port::<Notification>();\n+        let ch = comm::Chan(po);\n \n         blk(do future::from_fn {\n             match comm::recv(po) {\n@@ -368,11 +368,11 @@ impl TaskBuilder {\n      * to the child.\n      */\n     fn spawn_listener<A: send>(+f: fn~(comm::Port<A>)) -> comm::Chan<A> {\n-        let setup_po = comm::port();\n-        let setup_ch = comm::chan(setup_po);\n+        let setup_po = comm::Port();\n+        let setup_ch = comm::Chan(setup_po);\n         do self.spawn {\n-            let po = comm::port();\n-            let ch = comm::chan(po);\n+            let po = comm::Port();\n+            let ch = comm::Chan(po);\n             comm::send(setup_ch, ch);\n             f(po);\n         }\n@@ -385,8 +385,8 @@ impl TaskBuilder {\n     fn spawn_conversation<A: send, B: send>\n         (+f: fn~(comm::Port<A>, comm::Chan<B>))\n         -> (comm::Port<B>, comm::Chan<A>) {\n-        let from_child = comm::port();\n-        let to_parent = comm::chan(from_child);\n+        let from_child = comm::Port();\n+        let to_parent = comm::Chan(from_child);\n         let to_child = do self.spawn_listener |from_parent| {\n             f(from_parent, to_parent)\n         };\n@@ -407,8 +407,8 @@ impl TaskBuilder {\n      * Fails if a future_result was already set for this task.\n      */\n     fn try<T: send>(+f: fn~() -> T) -> Result<T,()> {\n-        let po = comm::port();\n-        let ch = comm::chan(po);\n+        let po = comm::Port();\n+        let ch = comm::Chan(po);\n         let mut result = None;\n \n         do self.future_result(|+r| { result = Some(r); }).spawn {\n@@ -711,7 +711,7 @@ fn new_taskset() -> TaskSet {\n         task1 == task2\n     }\n \n-    send_map::linear::linear_map(task_hash, task_eq)\n+    send_map::linear::LinearMap(task_hash, task_eq)\n }\n fn taskset_insert(tasks: &mut TaskSet, task: *rust_task) {\n     let didnt_overwrite = tasks.insert(task, ());\n@@ -1295,7 +1295,7 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n     // drop when they finish. No \"re-storing after modifying\" is needed.\n     let map_ptr = rustrt::rust_get_task_local_data(task);\n     if map_ptr.is_null() {\n-        let map: TaskLocalMap = @dvec::dvec();\n+        let map: TaskLocalMap = @dvec::DVec();\n         // Use reinterpret_cast -- transmute would take map away from us also.\n         rustrt::rust_set_task_local_data(task, unsafe::reinterpret_cast(map));\n         rustrt::rust_task_local_data_atexit(task, cleanup_task_local_map);\n@@ -1494,8 +1494,8 @@ extern mod rustrt {\n \n #[test]\n fn test_spawn_raw_simple() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     do spawn_raw(default_task_opts()) {\n         comm::send(ch, ());\n     }\n@@ -1532,8 +1532,8 @@ fn test_cant_dup_task_builder() {\n \n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     do spawn_unlinked {\n         do spawn_unlinked {\n             // Give middle task a chance to fail-but-not-kill-us.\n@@ -1562,8 +1562,8 @@ fn test_spawn_unlinked_sup_fail_down() {\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n-    let po = comm::port::<()>();\n-    let _ch = comm::chan(po);\n+    let po = comm::Port::<()>();\n+    let _ch = comm::Chan(po);\n     // Unidirectional \"parenting\" shouldn't override bidirectional linked.\n     // We have to cheat with opts - the interface doesn't support them because\n     // they don't make sense (redundant with task().supervised()).\n@@ -1591,8 +1591,8 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n-    let po = comm::port::<()>();\n-    let _ch = comm::chan(po);\n+    let po = comm::Port::<()>();\n+    let _ch = comm::Chan(po);\n     // Default options are to spawn linked & unsupervised.\n     do spawn { fail; }\n     comm::recv(po); // We should get punted awake\n@@ -1664,10 +1664,10 @@ fn test_spawn_linked_sup_propagate_sibling() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify() {\n-    let task_po = comm::port();\n-    let task_ch = comm::chan(task_po);\n-    let notify_po = comm::port();\n-    let notify_ch = comm::chan(notify_po);\n+    let task_po = comm::Port();\n+    let task_ch = comm::Chan(task_po);\n+    let notify_po = comm::Port();\n+    let notify_ch = comm::Chan(notify_po);\n \n     let opts = {\n         notify_chan: Some(notify_ch)\n@@ -1694,8 +1694,8 @@ fn test_spawn_raw_notify() {\n \n #[test]\n fn test_run_basic() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     do task().spawn {\n         comm::send(ch, ());\n     }\n@@ -1704,8 +1704,8 @@ fn test_run_basic() {\n \n #[test]\n fn test_add_wrapper() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     let b0 = task();\n     let b1 = do b0.add_wrapper |body| {\n         fn~() {\n@@ -1738,8 +1738,8 @@ fn test_back_to_the_future_result() {\n \n #[test]\n fn test_spawn_listiner_bidi() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     let ch = do spawn_listener |po| {\n         // Now the child has a port called 'po' to read from and\n         // an environment-captured channel called 'ch'.\n@@ -1794,8 +1794,8 @@ fn test_spawn_sched_no_threads() {\n \n #[test]\n fn test_spawn_sched() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n \n     fn f(i: int, ch: comm::Chan<()>) {\n         let parent_sched_id = rustrt::rust_get_sched_id();\n@@ -1818,8 +1818,8 @@ fn test_spawn_sched() {\n \n #[test]\n fn test_spawn_sched_childs_on_same_sched() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n \n     do spawn_sched(SingleThreaded) {\n         let parent_sched_id = rustrt::rust_get_sched_id();\n@@ -1852,10 +1852,10 @@ fn test_spawn_sched_blocking() {\n     // without affecting other schedulers\n     for iter::repeat(20u) {\n \n-        let start_po = comm::port();\n-        let start_ch = comm::chan(start_po);\n-        let fin_po = comm::port();\n-        let fin_ch = comm::chan(fin_po);\n+        let start_po = comm::Port();\n+        let start_ch = comm::Chan(start_po);\n+        let fin_po = comm::Port();\n+        let fin_ch = comm::Chan(fin_po);\n \n         let lock = testrt::rust_dbg_lock_create();\n \n@@ -1882,13 +1882,13 @@ fn test_spawn_sched_blocking() {\n             }\n         }\n \n-        let setup_po = comm::port();\n-        let setup_ch = comm::chan(setup_po);\n-        let parent_po = comm::port();\n-        let parent_ch = comm::chan(parent_po);\n+        let setup_po = comm::Port();\n+        let setup_ch = comm::Chan(setup_po);\n+        let parent_po = comm::Port();\n+        let parent_ch = comm::Chan(parent_po);\n         do spawn {\n-            let child_po = comm::port();\n-            comm::send(setup_ch, comm::chan(child_po));\n+            let child_po = comm::Port();\n+            comm::send(setup_ch, comm::Chan(child_po));\n             pingpong(child_po, parent_ch);\n         };\n \n@@ -1905,8 +1905,8 @@ fn test_spawn_sched_blocking() {\n \n #[cfg(test)]\n fn avoid_copying_the_body(spawnfn: fn(+fn~())) {\n-    let p = comm::port::<uint>();\n-    let ch = comm::chan(p);\n+    let p = comm::Port::<uint>();\n+    let ch = comm::Chan(p);\n \n     let x = ~1;\n     let x_in_parent = ptr::addr_of(*x) as uint;\n@@ -1972,8 +1972,8 @@ fn test_avoid_copying_the_body_unlinked() {\n \n #[test]\n fn test_platform_thread() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     do task().sched_mode(PlatformThread).spawn {\n         comm::send(ch, ());\n     }\n@@ -1984,7 +1984,7 @@ fn test_platform_thread() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable() {\n-    let po = comm::port();\n+    let po = comm::Port();\n     let ch = po.chan();\n \n     // We want to do this after failing\n@@ -2020,7 +2020,7 @@ fn test_unkillable() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n-    let po = comm::port();\n+    let po = comm::Port();\n     let ch = po.chan();\n \n     // We want to do this after failing"}, {"sha": "838bd695d9dc6fbac98a949ecad1bfcab26db711", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,7 +1,7 @@\n //! A deque. Untested as of yet. Likely buggy\n \n import option::{Some, None};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n trait t<T> {\n     fn size() -> uint;"}, {"sha": "cb0fddcfe6141855136ec24d4754c0e89ebc2419", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -121,19 +121,19 @@ enum tcp_connect_err_data {\n fn connect(-input_ip: ip::ip_addr, port: uint,\n            iotask: iotask)\n     -> result::Result<tcp_socket, tcp_connect_err_data> unsafe {\n-    let result_po = core::comm::port::<conn_attempt>();\n-    let closed_signal_po = core::comm::port::<()>();\n+    let result_po = core::comm::Port::<conn_attempt>();\n+    let closed_signal_po = core::comm::Port::<()>();\n     let conn_data = {\n-        result_ch: core::comm::chan(result_po),\n-        closed_signal_ch: core::comm::chan(closed_signal_po)\n+        result_ch: core::comm::Chan(result_po),\n+        closed_signal_ch: core::comm::Chan(closed_signal_po)\n     };\n     let conn_data_ptr = ptr::addr_of(conn_data);\n-    let reader_po = core::comm::port::<result::Result<~[u8], tcp_err_data>>();\n+    let reader_po = core::comm::Port::<result::Result<~[u8], tcp_err_data>>();\n     let stream_handle_ptr = malloc_uv_tcp_t();\n     *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n     let socket_data = @{\n         reader_po: reader_po,\n-        reader_ch: core::comm::chan(reader_po),\n+        reader_ch: core::comm::Chan(reader_po),\n         stream_handle_ptr: stream_handle_ptr,\n         connect_req: uv::ll::connect_t(),\n         write_req: uv::ll::write_t(),\n@@ -468,13 +468,13 @@ fn accept(new_conn: tcp_new_connection)\n       new_tcp_conn(server_handle_ptr) => {\n         let server_data_ptr = uv::ll::get_data_for_uv_handle(\n             server_handle_ptr) as *tcp_listen_fc_data;\n-        let reader_po = core::comm::port();\n+        let reader_po = core::comm::Port();\n         let iotask = (*server_data_ptr).iotask;\n         let stream_handle_ptr = malloc_uv_tcp_t();\n         *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n         let client_socket_data = @{\n             reader_po: reader_po,\n-            reader_ch: core::comm::chan(reader_po),\n+            reader_ch: core::comm::Chan(reader_po),\n             stream_handle_ptr : stream_handle_ptr,\n             connect_req : uv::ll::connect_t(),\n             write_req : uv::ll::write_t(),\n@@ -484,8 +484,8 @@ fn accept(new_conn: tcp_new_connection)\n         let client_stream_handle_ptr =\n             (*client_socket_data_ptr).stream_handle_ptr;\n \n-        let result_po = core::comm::port::<Option<tcp_err_data>>();\n-        let result_ch = core::comm::chan(result_po);\n+        let result_po = core::comm::Port::<Option<tcp_err_data>>();\n+        let result_ch = core::comm::Chan(result_po);\n \n         // UNSAFE LIBUV INTERACTION BEGIN\n         // .. normally this happens within the context of\n@@ -581,14 +581,14 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n           on_establish_cb: fn~(comm::Chan<Option<tcp_err_data>>),\n           -on_connect_cb: fn~(*uv::ll::uv_tcp_t))\n     -> result::Result<(), tcp_listen_err_data> unsafe {\n-    let stream_closed_po = core::comm::port::<()>();\n-    let kill_po = core::comm::port::<Option<tcp_err_data>>();\n-    let kill_ch = core::comm::chan(kill_po);\n+    let stream_closed_po = core::comm::Port::<()>();\n+    let kill_po = core::comm::Port::<Option<tcp_err_data>>();\n+    let kill_ch = core::comm::Chan(kill_po);\n     let server_stream = uv::ll::tcp_t();\n     let server_stream_ptr = ptr::addr_of(server_stream);\n     let server_data = {\n         server_stream_ptr: server_stream_ptr,\n-        stream_closed_ch: core::comm::chan(stream_closed_po),\n+        stream_closed_ch: core::comm::Chan(stream_closed_po),\n         kill_ch: kill_ch,\n         on_connect_cb: on_connect_cb,\n         iotask: iotask,\n@@ -833,8 +833,8 @@ impl tcp_socket_buf: io::Writer {\n // INTERNAL API\n \n fn tear_down_socket_data(socket_data: @tcp_socket_data) unsafe {\n-    let closed_po = core::comm::port::<()>();\n-    let closed_ch = core::comm::chan(closed_po);\n+    let closed_po = core::comm::Port::<()>();\n+    let closed_ch = core::comm::Chan(closed_po);\n     let close_data = {\n         closed_ch: closed_ch\n     };\n@@ -896,8 +896,8 @@ fn read_common_impl(socket_data: *tcp_socket_data, timeout_msecs: uint)\n fn read_stop_common_impl(socket_data: *tcp_socket_data) ->\n     result::Result<(), tcp_err_data> unsafe {\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n-    let stop_po = core::comm::port::<Option<tcp_err_data>>();\n-    let stop_ch = core::comm::chan(stop_po);\n+    let stop_po = core::comm::Port::<Option<tcp_err_data>>();\n+    let stop_ch = core::comm::Chan(stop_po);\n     do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, ~\"in interact cb for tcp::read_stop\");\n         match uv::ll::read_stop(stream_handle_ptr as *uv::ll::uv_stream_t) {\n@@ -923,8 +923,8 @@ fn read_start_common_impl(socket_data: *tcp_socket_data)\n     -> result::Result<comm::Port<\n         result::Result<~[u8], tcp_err_data>>, tcp_err_data> unsafe {\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n-    let start_po = core::comm::port::<Option<uv::ll::uv_err_data>>();\n-    let start_ch = core::comm::chan(start_po);\n+    let start_po = core::comm::Port::<Option<uv::ll::uv_err_data>>();\n+    let start_ch = core::comm::Chan(start_po);\n     log(debug, ~\"in tcp::read_start before interact loop\");\n     do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"in tcp::read_start interact cb %?\", loop_ptr));\n@@ -961,9 +961,9 @@ fn write_common_impl(socket_data_ptr: *tcp_socket_data,\n         vec::unsafe::to_ptr(raw_write_data),\n         vec::len(raw_write_data)) ];\n     let write_buf_vec_ptr = ptr::addr_of(write_buf_vec);\n-    let result_po = core::comm::port::<tcp_write_result>();\n+    let result_po = core::comm::Port::<tcp_write_result>();\n     let write_data = {\n-        result_ch: core::comm::chan(result_po)\n+        result_ch: core::comm::Chan(result_po)\n     };\n     let write_data_ptr = ptr::addr_of(write_data);\n     do iotask::interact((*socket_data_ptr).iotask) |loop_ptr| unsafe {\n@@ -1278,11 +1278,11 @@ mod test {\n         let expected_req = ~\"ping\";\n         let expected_resp = ~\"pong\";\n \n-        let server_result_po = core::comm::port::<~str>();\n-        let server_result_ch = core::comm::chan(server_result_po);\n+        let server_result_po = core::comm::Port::<~str>();\n+        let server_result_ch = core::comm::Chan(server_result_po);\n \n-        let cont_po = core::comm::port::<()>();\n-        let cont_ch = core::comm::chan(cont_po);\n+        let cont_po = core::comm::Port::<()>();\n+        let cont_ch = core::comm::Chan(cont_po);\n         // server\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             let actual_req = do comm::listen |server_ch| {\n@@ -1344,11 +1344,11 @@ mod test {\n         let expected_req = ~\"ping\";\n         let expected_resp = ~\"pong\";\n \n-        let server_result_po = core::comm::port::<~str>();\n-        let server_result_ch = core::comm::chan(server_result_po);\n+        let server_result_po = core::comm::Port::<~str>();\n+        let server_result_ch = core::comm::Chan(server_result_po);\n \n-        let cont_po = core::comm::port::<()>();\n-        let cont_ch = core::comm::chan(cont_po);\n+        let cont_po = core::comm::Port::<()>();\n+        let cont_ch = core::comm::Chan(cont_po);\n         // server\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             let actual_req = do comm::listen |server_ch| {"}, {"sha": "7770d376f9bcb1a84f09f86aa3be3e9fafd26803", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,7 +3,7 @@\n import map;\n import map::{hashmap, str_hash};\n import io::{Reader, ReaderUtil};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n export url, userinfo, query;\n export from_str, to_str;\n@@ -217,7 +217,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n                     let values = match m.find(key) {\n                       Some(values) => values,\n                       None => {\n-                        let values = @dvec();\n+                        let values = @DVec();\n                         m.insert(key, values);\n                         values\n                       }\n@@ -252,7 +252,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n             let values = match m.find(key) {\n               Some(values) => values,\n               None => {\n-                let values = @dvec();\n+                let values = @DVec();\n                 m.insert(key, values);\n                 values\n               }\n@@ -1010,8 +1010,8 @@ mod tests {\n         let m = str_hash();\n         assert encode_form_urlencoded(m) == ~\"\";\n \n-        m.insert(~\"\", @dvec());\n-        m.insert(~\"foo\", @dvec());\n+        m.insert(~\"\", @DVec());\n+        m.insert(~\"foo\", @DVec());\n         assert encode_form_urlencoded(m) == ~\"\";\n \n         let m = str_hash();"}, {"sha": "db3aafb974712e114510a2b265f08b27938997e1", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -4,7 +4,7 @@\n  */\n import core::option;\n import core::option::{Some, None};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import map::map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n@@ -17,7 +17,7 @@ enum smallintmap<T:copy> {\n \n /// Create a smallintmap\n fn mk<T: copy>() -> smallintmap<T> {\n-    let v = dvec();\n+    let v = DVec();\n     return smallintmap_(@{v: v});\n }\n "}, {"sha": "a10e4605f615ceb6b7044ac4dee03729cb01d25e", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -5,7 +5,7 @@ import option::{None, Some};\n import rand;\n \n fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n-    let r = rand::rng();\n+    let r = rand::Rng();\n     let mut i = 0u;\n     while (i < 1000u) {\n         let p = tmpdir.push(r.gen_str(16u) +"}, {"sha": "2ebf88271547906a746b862840f0db21ee0b0e9e", "filename": "src/libstd/test.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -286,8 +286,8 @@ fn run_tests(opts: test_opts, tests: ~[test_desc],\n     let mut wait_idx = 0u;\n     let mut done_idx = 0u;\n \n-    let p = core::comm::port();\n-    let ch = core::comm::chan(p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(p);\n \n     while done_idx < total {\n         while wait_idx < concurrency && run_idx < total {\n@@ -420,8 +420,8 @@ mod tests {\n             ignore: true,\n             should_fail: false\n         };\n-        let p = core::comm::port();\n-        let ch = core::comm::chan(p);\n+        let p = core::comm::Port();\n+        let ch = core::comm::Chan(p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res != tr_ok;\n@@ -436,8 +436,8 @@ mod tests {\n             ignore: true,\n             should_fail: false\n         };\n-        let p = core::comm::port();\n-        let ch = core::comm::chan(p);\n+        let p = core::comm::Port();\n+        let ch = core::comm::Chan(p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == tr_ignored;\n@@ -453,8 +453,8 @@ mod tests {\n             ignore: false,\n             should_fail: true\n         };\n-        let p = core::comm::port();\n-        let ch = core::comm::chan(p);\n+        let p = core::comm::Port();\n+        let ch = core::comm::Chan(p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == tr_ok;\n@@ -469,8 +469,8 @@ mod tests {\n             ignore: false,\n             should_fail: true\n         };\n-        let p = core::comm::port();\n-        let ch = core::comm::chan(p);\n+        let p = core::comm::Port();\n+        let ch = core::comm::Chan(p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == tr_failed;"}, {"sha": "a30e28f6953d2759e62d5fd6a76b6c376bd5fec2", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -29,8 +29,8 @@ export delayed_send, sleep, recv_timeout;\n fn delayed_send<T: copy send>(iotask: iotask,\n                               msecs: uint, ch: comm::Chan<T>, +val: T) {\n         unsafe {\n-            let timer_done_po = core::comm::port::<()>();\n-            let timer_done_ch = core::comm::chan(timer_done_po);\n+            let timer_done_po = core::comm::Port::<()>();\n+            let timer_done_ch = core::comm::Chan(timer_done_po);\n             let timer_done_ch_ptr = ptr::addr_of(timer_done_ch);\n             let timer = uv::ll::timer_t();\n             let timer_ptr = ptr::addr_of(timer);\n@@ -76,8 +76,8 @@ fn delayed_send<T: copy send>(iotask: iotask,\n  * * msecs - an amount of time, in milliseconds, for the current task to block\n  */\n fn sleep(iotask: iotask, msecs: uint) {\n-    let exit_po = core::comm::port::<()>();\n-    let exit_ch = core::comm::chan(exit_po);\n+    let exit_po = core::comm::Port::<()>();\n+    let exit_ch = core::comm::Chan(exit_po);\n     delayed_send(iotask, msecs, exit_ch, ());\n     core::comm::recv(exit_po);\n }\n@@ -105,8 +105,8 @@ fn sleep(iotask: iotask, msecs: uint) {\n fn recv_timeout<T: copy send>(iotask: iotask,\n                               msecs: uint,\n                               wait_po: comm::Port<T>) -> Option<T> {\n-    let timeout_po = comm::port::<()>();\n-    let timeout_ch = comm::chan(timeout_po);\n+    let timeout_po = comm::Port::<()>();\n+    let timeout_ch = comm::Chan(timeout_po);\n     delayed_send(iotask, msecs, timeout_ch, ());\n     // FIXME: This could be written clearer (#2618)\n     either::either(\n@@ -163,8 +163,8 @@ mod test {\n \n     #[test]\n     fn test_gl_timer_sleep_stress2() {\n-        let po = core::comm::port();\n-        let ch = core::comm::chan(po);\n+        let po = core::comm::Port();\n+        let ch = core::comm::Chan(po);\n         let hl_loop = uv::global_loop::get();\n \n         let repeat = 20u;\n@@ -182,7 +182,7 @@ mod test {\n                 let (times, maxms) = spec;\n                 do task::spawn {\n                     import rand::*;\n-                    let rng = rng();\n+                    let rng = Rng();\n                     for iter::repeat(times) {\n                         sleep(hl_loop, rng.next() as uint % maxms);\n                     }\n@@ -240,9 +240,9 @@ mod test {\n         let hl_loop = uv::global_loop::get();\n \n         for iter::repeat(times as uint) {\n-            let expected = rand::rng().gen_str(16u);\n-            let test_po = core::comm::port::<~str>();\n-            let test_ch = core::comm::chan(test_po);\n+            let expected = rand::Rng().gen_str(16u);\n+            let test_po = core::comm::Port::<~str>();\n+            let test_ch = core::comm::Chan(test_po);\n \n             do task::spawn() {\n                 delayed_send(hl_loop, 50u, test_ch, expected);"}, {"sha": "29a4749b89c07c0ea67eb92604c1731880423cdc", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -8,7 +8,7 @@ import get_gl = get;\n import iotask::{iotask, spawn_iotask};\n import priv::{chan_from_global_ptr, weaken_task};\n import comm = core::comm;\n-import comm::{Port, Chan, port, chan, select2, listen};\n+import comm::{Port, Chan, select2, listen};\n import task::TaskBuilder;\n import either::{Left, Right};\n \n@@ -132,8 +132,8 @@ mod test {\n     }\n \n     fn impl_uv_hl_simple_timer(iotask: iotask) unsafe {\n-        let exit_po = core::comm::port::<bool>();\n-        let exit_ch = core::comm::chan(exit_po);\n+        let exit_po = core::comm::Port::<bool>();\n+        let exit_ch = core::comm::Chan(exit_po);\n         let exit_ch_ptr = ptr::addr_of(exit_ch);\n         log(debug, fmt!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n@@ -165,8 +165,8 @@ mod test {\n     #[test]\n     fn test_gl_uv_global_loop_high_level_global_timer() unsafe {\n         let hl_loop = get_gl();\n-        let exit_po = comm::port::<()>();\n-        let exit_ch = comm::chan(exit_po);\n+        let exit_po = comm::Port::<()>();\n+        let exit_ch = comm::Chan(exit_po);\n         task::spawn_sched(task::ManualThreads(1u), || {\n             impl_uv_hl_simple_timer(hl_loop);\n             core::comm::send(exit_ch, ());\n@@ -181,8 +181,8 @@ mod test {\n     #[ignore]\n     fn test_stress_gl_uv_global_loop_high_level_global_timer() unsafe {\n         let hl_loop = get_gl();\n-        let exit_po = core::comm::port::<()>();\n-        let exit_ch = core::comm::chan(exit_po);\n+        let exit_po = core::comm::Port::<()>();\n+        let exit_ch = core::comm::Chan(exit_po);\n         let cycles = 5000u;\n         for iter::repeat(cycles) {\n             task::spawn_sched(task::ManualThreads(1u), || {"}, {"sha": "4567decf4791804670b50001adb051111ac4c1d4", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -13,7 +13,7 @@ export exit;\n import libc::c_void;\n import ptr::addr_of;\n import comm = core::comm;\n-import comm::{Port, port, Chan, chan, listen};\n+import comm::{Port, Chan, listen};\n import task::TaskBuilder;\n import ll = uv_ll;\n \n@@ -102,7 +102,7 @@ fn run_loop(iotask_ch: Chan<iotask>) unsafe {\n     // initialize our loop data and store it in the loop\n     let data: iotask_loop_data = {\n         async_handle: async_handle,\n-        msg_po: port()\n+        msg_po: Port()\n     };\n     ll::set_data_for_uv_handle(async_handle, addr_of(data));\n \n@@ -186,8 +186,8 @@ mod test {\n     fn impl_uv_iotask_async(iotask: iotask) unsafe {\n         let async_handle = ll::async_t();\n         let ah_ptr = ptr::addr_of(async_handle);\n-        let exit_po = core::comm::port::<()>();\n-        let exit_ch = core::comm::chan(exit_po);\n+        let exit_po = core::comm::Port::<()>();\n+        let exit_ch = core::comm::Chan(exit_po);\n         let ah_data = {\n             iotask: iotask,\n             exit_ch: exit_ch\n@@ -204,8 +204,8 @@ mod test {\n     // this fn documents the bear minimum neccesary to roll your own\n     // high_level_loop\n     unsafe fn spawn_test_loop(exit_ch: comm::Chan<()>) -> iotask {\n-        let iotask_port = comm::port::<iotask>();\n-        let iotask_ch = comm::chan(iotask_port);\n+        let iotask_port = comm::Port::<iotask>();\n+        let iotask_ch = comm::Chan(iotask_port);\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             run_loop(iotask_ch);\n             exit_ch.send(());\n@@ -225,8 +225,8 @@ mod test {\n \n     #[test]\n     fn test_uv_iotask_async() unsafe {\n-        let exit_po = core::comm::port::<()>();\n-        let exit_ch = core::comm::chan(exit_po);\n+        let exit_po = core::comm::Port::<()>();\n+        let exit_ch = core::comm::Chan(exit_po);\n         let iotask = spawn_test_loop(exit_ch);\n \n         // using this handle to manage the lifetime of the high_level_loop,\n@@ -235,8 +235,8 @@ mod test {\n         // under race-condition type situations.. this ensures that the loop\n         // lives until, at least, all of the impl_uv_hl_async() runs have been\n         // called, at least.\n-        let work_exit_po = core::comm::port::<()>();\n-        let work_exit_ch = core::comm::chan(work_exit_po);\n+        let work_exit_po = core::comm::Port::<()>();\n+        let work_exit_ch = core::comm::Chan(work_exit_po);\n         for iter::repeat(7u) {\n             do task::spawn_sched(task::ManualThreads(1u)) {\n                 impl_uv_iotask_async(iotask);"}, {"sha": "1e7c2c2c8247df90d1938d6a345efc4c8576bacf", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1461,13 +1461,13 @@ mod test {\n         let port = 8887;\n         let kill_server_msg = ~\"does a dog have buddha nature?\";\n         let server_resp_msg = ~\"mu!\";\n-        let client_port = core::comm::port::<~str>();\n-        let client_chan = core::comm::chan::<~str>(client_port);\n-        let server_port = core::comm::port::<~str>();\n-        let server_chan = core::comm::chan::<~str>(server_port);\n+        let client_port = core::comm::Port::<~str>();\n+        let client_chan = core::comm::Chan::<~str>(client_port);\n+        let server_port = core::comm::Port::<~str>();\n+        let server_chan = core::comm::Chan::<~str>(server_port);\n \n-        let continue_port = core::comm::port::<bool>();\n-        let continue_chan = core::comm::chan::<bool>(continue_port);\n+        let continue_port = core::comm::Port::<bool>();\n+        let continue_chan = core::comm::Chan::<bool>(continue_port);\n         let continue_chan_ptr = ptr::addr_of(continue_chan);\n \n         do task::spawn_sched(task::ManualThreads(1u)) {"}, {"sha": "31e725988a6beae8e1c9fc12f5b58e564b7106f8", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,4 +1,4 @@\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n export filename;\n export filemap;\n@@ -52,7 +52,7 @@ type codemap = @{files: DVec<filemap>};\n \n type loc = {file: filemap, line: uint, col: uint};\n \n-fn new_codemap() -> codemap { @{files: dvec()} }\n+fn new_codemap() -> codemap { @{files: DVec()} }\n \n fn new_filemap_w_substr(+filename: filename, +substr: file_substr,\n                         src: @~str,"}, {"sha": "6d45bfe414262fb9b94339c714506dda2e2e34b0", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,7 +2,7 @@\n \n import to_str::ToStr;\n \n-import dvec::dvec;\n+import dvec::DVec;\n \n import ast::ident;\n import util::interner;"}, {"sha": "6c9dd5770600276e3d411e63c1b27c5b25634d52", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,5 +1,5 @@\n import to_str::ToStr;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n import ast_builder::{path, append_types};\n \n@@ -119,7 +119,7 @@ struct protocol_ {\n     new(name: ~str, span: span) {\n         self.name = name;\n         self.span = span;\n-        self.states = dvec();\n+        self.states = DVec();\n         self.bounded = None;\n     }\n \n@@ -164,7 +164,7 @@ struct protocol_ {\n impl protocol {\n     fn add_state_poly(name: ~str, ident: ast::ident, dir: direction,\n                       +ty_params: ~[ast::ty_param]) -> state {\n-        let messages = dvec();\n+        let messages = DVec();\n \n         let state = state_(@{\n             id: self.states.len(),"}, {"sha": "47f551a9e988d0aa0e83685d064bebd976f185c0", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,7 +2,7 @@ import ast::{crate, expr_, mac_invoc,\n                      mac_aq, mac_var};\n import parse::parser;\n import parse::parser::parse_from_source_str;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import parse::token::ident_interner;\n \n import fold::*;\n@@ -119,7 +119,7 @@ fn gather_anti_quotes<N: qq_helper>(lo: uint, node: N) -> aq_ctxt\n     let v = @{visit_expr: |node, &&cx, v| visit_aq(node, ~\"from_expr\", cx, v),\n               visit_ty: |node, &&cx, v| visit_aq(node, ~\"from_ty\", cx, v)\n               with *default_visitor()};\n-    let cx = @{lo:lo, gather: dvec()};\n+    let cx = @{lo:lo, gather: DVec()};\n     node.visit(cx, mk_vt(v));\n     // FIXME (#2250): Maybe this is an overkill (merge_sort), it might\n     // be better to just keep the gather array in sorted order."}, {"sha": "3097c70478af969564cb733b9902df8791d244d2", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n import codemap::span;\n import std::map::{hashmap, str_hash, uint_hash};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n import base::*;\n \n@@ -136,7 +136,7 @@ fn acumm_bindings(_cx: ext_ctxt, _b_dest: bindings, _b_src: bindings) { }\n fn pattern_to_selectors(cx: ext_ctxt, e: @expr) -> binders {\n     let res: binders =\n         {real_binders: uint_hash::<selector>(),\n-         literal_ast_matchers: dvec()};\n+         literal_ast_matchers: DVec()};\n     //this oughta return binders instead, but macro args are a sequence of\n     //expressions, rather than a single expression\n     fn trivial_selector(m: matchable) -> match_result {"}, {"sha": "db96ce484be731b30b65ee12489eed32895a2a62", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -7,7 +7,7 @@ import parse::parser::{parser,SOURCE_FILE};\n //import parse::common::parser_common;\n import parse::common::*; //resolve bug?\n import parse::parse_sess;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n import ast_util::mk_sp;\n import std::map::{hashmap, uint_hash};\n@@ -137,7 +137,7 @@ fn initial_matcher_pos(ms: ~[matcher], sep: Option<token>, lo: uint)\n         }\n     }\n     ~{elts: ms, sep: sep, mut idx: 0u, mut up: matcher_pos_up(None),\n-      matches: copy vec::from_fn(count_names(ms), |_i| dvec::dvec()),\n+      matches: copy vec::from_fn(count_names(ms), |_i| dvec::DVec()),\n       match_lo: 0u, match_hi: match_idx_hi, sp_lo: lo}\n }\n \n@@ -296,7 +296,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     }\n \n                     let matches = vec::map(ei.matches, // fresh, same size:\n-                                           |_m| dvec::<@named_match>());\n+                                           |_m| DVec::<@named_match>());\n                     let ei_t <- ei;\n                     vec::push(cur_eis, ~{\n                         elts: matchers, sep: sep, mut idx: 0u,"}, {"sha": "8bc78a5354859398e79333f414d0ef6f7cce13a6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -13,7 +13,7 @@ import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n                 seq_sep_none, token_to_str};\n-import dvec::dvec;\n+import dvec::DVec;\n import vec::{push};\n import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n@@ -3427,7 +3427,7 @@ struct parser {\n                 items_allowed = false\n         }\n \n-        let (view_items, items) = (dvec(), dvec());\n+        let (view_items, items) = (DVec(), DVec());\n         loop {\n             match self.parse_item_or_view_item(attrs, items_allowed) {\n                 iovi_none =>"}, {"sha": "d1f7235dc1bc64bc6cbe70466f13893b854fcf6a", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,5 +1,5 @@\n import io::WriterUtil;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's\n@@ -117,7 +117,7 @@ fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n                mut scan_stack_empty: true,\n                mut top: 0u,\n                mut bottom: 0u,\n-               print_stack: dvec(),\n+               print_stack: DVec(),\n                mut pending_indentation: 0,\n                mut token_tree_last_was_ident: false})\n }"}, {"sha": "3465ca205659b5ee737322a3434c66708eb02b10", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -6,7 +6,7 @@ import pp::{break_offset, word, printer,\n import diagnostic;\n import ast::{required, provided};\n import ast_util::{operator_prec};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import parse::classify::*;\n import parse::token::ident_interner;\n \n@@ -53,7 +53,7 @@ fn rust_printer(writer: io::Writer, intr: ident_interner) -> ps {\n              literals: None::<~[comments::lit]>,\n              mut cur_cmnt: 0u,\n              mut cur_lit: 0u,\n-             boxes: dvec(),\n+             boxes: DVec(),\n              ann: no_ann()};\n }\n \n@@ -82,7 +82,7 @@ fn print_crate(cm: codemap, intr: ident_interner,\n           literals: if is_expanded { None } else { Some(r.lits) },\n           mut cur_cmnt: 0u,\n           mut cur_lit: 0u,\n-          boxes: dvec(),\n+          boxes: DVec(),\n           ann: ann};\n     print_crate_(s, crate);\n }"}, {"sha": "73459bbaf5f267528902fea2529a36f50926b263", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,7 +3,7 @@\n // type, and vice versa.\n import std::map;\n import std::map::{hashmap, hashfn, eqfn};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n type hash_interner<T: const> =\n     {map: hashmap<T, uint>,\n@@ -14,7 +14,7 @@ type hash_interner<T: const> =\n fn mk<T: const copy>(+hasher: hashfn<T>, +eqer: eqfn<T>) -> interner<T> {\n     let m = map::hashmap::<T, uint>(copy hasher, copy eqer);\n     let hi: hash_interner<T> =\n-        {map: m, vect: dvec(), hasher: hasher, eqer: eqer};\n+        {map: m, vect: DVec(), hasher: hasher, eqer: eqer};\n     return hi as interner::<T>;\n }\n "}, {"sha": "927b6b3da2b754a3c4fa147ab6d2aea6a3c464e0", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -217,8 +217,8 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n         done,\n     };\n \n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n \n     match do task::try  {\n "}, {"sha": "1a6cce37737b4ccfe4292e06be35bc73b503782e", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -9,7 +9,7 @@ import syntax::codemap::span;\n import driver::session;\n import session::session;\n import syntax::attr;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n export modify_for_testing;\n \n@@ -42,7 +42,7 @@ fn generate_test_harness(sess: session::session,\n         @{sess: sess,\n           crate: crate,\n           mut path: ~[],\n-          testfns: dvec()};\n+          testfns: DVec()};\n \n     let precursor =\n         @{fold_crate: fold::wrap(|a,b| fold_crate(cx, a, b) ),"}, {"sha": "4f3df6cac709b05fcf3c55ac213b141c2a486b96", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -9,7 +9,7 @@ import std::map::{hashmap, int_hash};\n import syntax::print::pprust;\n import filesearch::filesearch;\n import common::*;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import syntax::parse::token::ident_interner;\n \n export read_crates;\n@@ -24,7 +24,7 @@ fn read_crates(diag: span_handler, crate: ast::crate,\n               cstore: cstore,\n               os: os,\n               static: static,\n-              crate_cache: dvec(),\n+              crate_cache: DVec(),\n               mut next_crate_num: 1,\n               intr: intr};\n     let v ="}, {"sha": "2aa36a8e01b49f8e0fd6860e3d58e3db53784407", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -11,7 +11,7 @@ import syntax::diagnostic::expect;\n import ast_util::dummy_sp;\n import common::*;\n import std::map::hashmap;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n export class_dtor;\n export get_symbol;"}, {"sha": "2fbb7605a0d113eb0ad5089fbffee6f45431bac5", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,7 +3,7 @@\n import std::{ebml, map};\n import std::map::{hashmap, str_hash};\n import io::WriterUtil;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import syntax::{ast, ast_util};\n import syntax::attr;\n import middle::ty;\n@@ -714,7 +714,7 @@ fn get_method_names_if_trait(intr: ident_interner, cdata: cmd,\n         return None;\n     }\n \n-    let resulting_methods = @dvec();\n+    let resulting_methods = @DVec();\n     for ebml::tagged_docs(item, tag_item_trait_method) |method| {\n         resulting_methods.push(\n             (item_name(intr, method), get_self_ty(method)));"}, {"sha": "049e0a4c8981a2b978382f74141b42f99ff38921", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -229,7 +229,7 @@ import syntax::print::pprust;\n import util::common::indenter;\n import ty::to_str;\n import driver::session::session;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import mem_categorization::*;\n \n export check_crate, root_map, mutbl_map;"}, {"sha": "7248a8b235c88130f77e60c76966051e0581cbee", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -7,7 +7,7 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves to dnot affect things loaned out in any way\n \n-import dvec::dvec;\n+import dvec::DVec;\n \n export check_loans;\n "}, {"sha": "e775bc7c50bdbd4cb68023d69789137064bc5c66", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -11,7 +11,7 @@ impl borrowck_ctxt {\n             mutbl: ast::mutability) -> bckres<@DVec<loan>> {\n         let lc = loan_ctxt_(@{bccx: self,\n                               scope_region: scope_region,\n-                              loans: @dvec()});\n+                              loans: @DVec()});\n         match lc.loan(cmt, mutbl) {\n           Ok(()) => {Ok(lc.loans)}\n           Err(e) => {Err(e)}"}, {"sha": "8c50c9461b71d920da315a1850397ff1f9d3f4d2", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,7 +2,7 @@ import syntax::ast::*;\n import syntax::{visit, ast_util, ast_map};\n import driver::session::session;\n import std::map::hashmap;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n                def_map: resolve3::DefMap,\n@@ -158,7 +158,7 @@ fn check_item_recursion(sess: session, ast_map: ast_map::map,\n         sess: sess,\n         ast_map: ast_map,\n         def_map: def_map,\n-        idstack: @dvec()\n+        idstack: @DVec()\n     };\n \n     let visitor = visit::mk_vt(@{"}, {"sha": "2e303f6491d35101614b5a6783241f348206f4f0", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -100,7 +100,7 @@\n  * - `self_var`: a variable representing 'self'\n  */\n \n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import std::map::{hashmap, int_hash, str_hash, uint_hash};\n import syntax::{visit, ast_util};\n import syntax::print::pprust::{expr_to_str};\n@@ -348,7 +348,7 @@ impl IrMaps {\n             let v = match self.last_use_map.find(expr_id) {\n               Some(v) => v,\n               None => {\n-                let v = @dvec();\n+                let v = @DVec();\n                 self.last_use_map.insert(expr_id, v);\n                 v\n               }"}, {"sha": "f1d97f7ba6c3e90205122175dce35a107a5ad949", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -14,7 +14,7 @@ import syntax::codemap::span;\n import syntax::print::pprust;\n import syntax::ast_util::new_def_hash;\n import syntax::ast_map;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import metadata::csearch;\n import ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n \n@@ -468,7 +468,7 @@ impl determine_rp_ctxt {\n         let vec = match self.dep_map.find(from) {\n             Some(vec) => vec,\n             None => {\n-                let vec = @dvec();\n+                let vec = @DVec();\n                 self.dep_map.insert(from, vec);\n                 vec\n             }\n@@ -753,7 +753,7 @@ fn determine_rp_in_crate(sess: session,\n                                   def_map: def_map,\n                                   region_paramd_items: int_hash(),\n                                   dep_map: int_hash(),\n-                                  worklist: dvec(),\n+                                  worklist: DVec(),\n                                   mut item_id: 0,\n                                   mut anon_implies_rp: false,\n                                   mut ambient_variance: rv_covariant});"}, {"sha": "1115e92a9de3c37619f280a58288758d89d05812", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -53,7 +53,7 @@ import syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n import syntax::visit::{visit_mod, visit_ty, vt};\n \n import box::ptr_eq;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import option::{get, is_some};\n import str::{connect, split_str};\n import vec::pop;\n@@ -384,7 +384,7 @@ struct Module {\n         self.def_id = def_id;\n \n         self.children = atom_hashmap();\n-        self.imports = dvec();\n+        self.imports = DVec();\n \n         self.anonymous_children = int_hash();\n \n@@ -654,9 +654,9 @@ struct Resolver {\n         self.unresolved_imports = 0u;\n \n         self.current_module = (*self.graph_root).get_module();\n-        self.value_ribs = @dvec();\n-        self.type_ribs = @dvec();\n-        self.label_ribs = @dvec();\n+        self.value_ribs = @DVec();\n+        self.type_ribs = @DVec();\n+        self.label_ribs = @DVec();\n \n         self.xray_context = NoXray;\n         self.current_trait_refs = None;\n@@ -1069,7 +1069,7 @@ struct Resolver {\n                     // globs and lists, the path is found directly in the AST;\n                     // for simple paths we have to munge the path a little.\n \n-                    let module_path = @dvec();\n+                    let module_path = @DVec();\n                     match view_path.node {\n                         view_path_simple(_, full_path, _) => {\n                             let path_len = full_path.idents.len();\n@@ -3304,7 +3304,7 @@ struct Resolver {\n             // Resolve the trait reference, if necessary.\n             let original_trait_refs = self.current_trait_refs;\n             if trait_references.len() >= 1 {\n-                let mut new_trait_refs = @dvec();\n+                let mut new_trait_refs = @DVec();\n                 for trait_references.each |trait_reference| {\n                     match self.resolve_path(\n                         trait_reference.path, TypeNS, true, visitor) {\n@@ -3893,7 +3893,7 @@ struct Resolver {\n     }\n \n     fn intern_module_part_of_path(path: @path) -> @DVec<Atom> {\n-        let module_path_atoms = @dvec();\n+        let module_path_atoms = @DVec();\n         for path.idents.eachi |index, ident| {\n             if index == path.idents.len() - 1u {\n                 break;\n@@ -4304,7 +4304,7 @@ struct Resolver {\n     }\n \n     fn search_for_traits_containing_method(name: Atom) -> @DVec<def_id> {\n-        let found_traits = @dvec();\n+        let found_traits = @DVec();\n         let mut search_module = self.current_module;\n         loop {\n             // Look for the current trait.\n@@ -4406,7 +4406,7 @@ struct Resolver {\n     }\n \n     fn add_fixed_trait_for_expr(expr_id: node_id, +trait_id: Option<def_id>) {\n-        let traits = @dvec();\n+        let traits = @DVec();\n         traits.push(trait_id.get());\n         self.trait_map.insert(expr_id, traits);\n     }\n@@ -4503,7 +4503,7 @@ struct Resolver {\n \n     /// A somewhat inefficient routine to print out the name of a module.\n     fn module_to_str(module_: @Module) -> ~str {\n-        let atoms = dvec();\n+        let atoms = DVec();\n         let mut current_module = module_;\n         loop {\n             match current_module.parent_link {"}, {"sha": "4a610799fffea92084e350dd525eac2d237fc5b8", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -13,7 +13,7 @@ import syntax::print::pprust::pat_to_str;\n import middle::resolve3::DefMap;\n import back::abi;\n import std::map::hashmap;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n import common::*;\n \n@@ -282,7 +282,7 @@ fn get_options(ccx: @crate_ctxt, m: match_, col: uint) -> ~[opt] {\n         set.push(val);\n     }\n \n-    let found = dvec();\n+    let found = DVec();\n     for vec::each(m) |br| {\n         let cur = br.pats[col];\n         if pat_is_variant(ccx.tcx.def_map, cur) {"}, {"sha": "2dd5d968ceecb858efdcf5cbbbf2181dbcd625fb", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -15,7 +15,7 @@ import syntax::ast_util::{dummy_sp, new_def_hash};\n import syntax::util::interner;\n import util::ppaux::ty_to_str;\n import syntax::codemap::span;\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n import std::map::hashmap;\n import option::is_some;\n@@ -192,7 +192,7 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     return {mut next_tag_id: 0u16,\n          pad: 0u16,\n          tag_id_to_index: new_nominal_id_hash(),\n-         tag_order: dvec(),\n+         tag_order: DVec(),\n          resources: interner::mk(hash_nominal_id, eq_nominal_id),\n          llshapetablesty: llshapetablesty,\n          llshapetables: llshapetables};"}, {"sha": "c232b8cd94bc588aaa95493105976c37fe5b960c", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -9,7 +9,7 @@ import syntax::ast::{sty_value, by_ref, by_copy};\n import syntax::ast_map;\n import syntax::ast_map::node_id_to_str;\n import syntax::ast_util::{dummy_sp, new_def_hash};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n enum method_lookup_mode {\n     subtyping_mode,\n@@ -98,7 +98,7 @@ struct lookup {\n         self.m_name = m_name;\n         self.self_ty = self_ty;\n         self.derefs = 0u;\n-        self.candidates = dvec();\n+        self.candidates = DVec();\n         self.candidate_impls = new_def_hash();\n         self.supplied_tps = supplied_tps;\n         self.include_private = include_private;"}, {"sha": "0c89b0abe114a17eafec38f15234d2b02385c706", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -30,7 +30,7 @@ import syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n import syntax::visit::{visit_mod};\n import util::ppaux::ty_to_str;\n \n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import result::Ok;\n import std::map::{hashmap, int_hash};\n import uint::range;\n@@ -329,7 +329,7 @@ struct CoherenceChecker {\n             .find(base_def_id) {\n \n             None => {\n-                implementation_list = @dvec();\n+                implementation_list = @DVec();\n                 self.crate_context.coherence_info.inherent_methods\n                     .insert(base_def_id, implementation_list);\n             }\n@@ -347,7 +347,7 @@ struct CoherenceChecker {\n                 .find(trait_id) {\n \n             None => {\n-                implementation_list = @dvec();\n+                implementation_list = @DVec();\n                 self.crate_context.coherence_info.extension_methods\n                     .insert(trait_id, implementation_list);\n             }\n@@ -547,7 +547,7 @@ struct CoherenceChecker {\n     }\n \n     fn gather_privileged_types(items: ~[@item]) -> @DVec<def_id> {\n-        let results = @dvec();\n+        let results = @DVec();\n         for items.each |item| {\n             match item.node {\n                 item_class(*) | item_enum(*) | item_trait(*) => {"}, {"sha": "765dbf81da44ee5a6c2da2b201d915fa2b9552e3", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -262,7 +262,7 @@ import driver::session::session;\n import util::common::{indent, indenter};\n import ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n import ast::{m_const, m_imm, m_mutbl};\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import region_var_bindings::{RegionVarBindings};\n import ast_util::dummy_sp;\n \n@@ -376,7 +376,7 @@ fn new_infer_ctxt(tcx: ty::ctxt) -> infer_ctxt {\n                  ty_var_counter: @mut 0u,\n                  ty_var_integral_counter: @mut 0u,\n                  region_var_counter: @mut 0u,\n-                 borrowings: dvec()})}\n+                 borrowings: DVec()})}\n \n fn mk_sub(cx: infer_ctxt, a_is_expected: bool, span: span) -> Sub {\n     Sub(combine_fields {infcx: cx, a_is_expected: a_is_expected, span: span})"}, {"sha": "a5cfbaa873674c23520ac852ad5e1fbd2b4ac8f5", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -305,7 +305,7 @@ because `&x` was created alone, but is relatable to `&A`.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n import result::Result;\n import result::{Ok, Err};\n import std::map::{hashmap, uint_hash};\n@@ -365,12 +365,12 @@ struct RegionVarBindings {\n fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n     RegionVarBindings {\n         tcx: tcx,\n-        var_spans: dvec(),\n+        var_spans: DVec(),\n         values: empty_cell(),\n         constraints: hashmap(hash_constraint, sys::shape_eq),\n         lubs: CombineMap(),\n         glbs: CombineMap(),\n-        undo_log: dvec()\n+        undo_log: DVec()\n     }\n }\n "}, {"sha": "027a0f275bd3ad2d8981bb801a16c49c462c670d", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -92,8 +92,8 @@ fn exec<T:send>(\n     srv: srv,\n     +f: fn~(ctxt: ctxt) -> T\n ) -> T {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     let msg = handle_request(fn~(move f, ctxt: ctxt) {\n         comm::send(ch, f(ctxt))\n     });"}, {"sha": "7b856d69e2d948f96eeddadbc4779ecfc9a35f8b", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -109,15 +109,15 @@ fn pandoc_writer(\n         os::close(pipe_err.out);\n         os::close(pipe_in.out);\n \n-        let stdout_po = comm::port();\n-        let stdout_ch = comm::chan(stdout_po);\n+        let stdout_po = comm::Port();\n+        let stdout_ch = comm::Chan(stdout_po);\n         do task::spawn_sched(task::SingleThreaded) {\n             comm::send(stdout_ch, readclose(pipe_out.in));\n         }\n         let stdout = comm::recv(stdout_po);\n \n-        let stderr_po = comm::port();\n-        let stderr_ch = comm::chan(stderr_po);\n+        let stderr_po = comm::Port();\n+        let stderr_ch = comm::Chan(stderr_po);\n         do task::spawn_sched(task::SingleThreaded) {\n             comm::send(stderr_ch, readclose(pipe_err.in));\n         }\n@@ -267,11 +267,11 @@ fn write_file(path: &Path, s: ~str) {\n \n fn future_writer_factory(\n ) -> (writer_factory, comm::Port<(doc::page, ~str)>) {\n-    let markdown_po = comm::port();\n-    let markdown_ch = comm::chan(markdown_po);\n+    let markdown_po = comm::Port();\n+    let markdown_ch = comm::Chan(markdown_po);\n     let writer_factory = fn~(page: doc::page) -> writer {\n-        let writer_po = comm::port();\n-        let writer_ch = comm::chan(writer_po);\n+        let writer_po = comm::Port();\n+        let writer_ch = comm::Chan(writer_po);\n         do task::spawn {\n             let (writer, future) = future_writer();\n             comm::send(writer_ch, writer);\n@@ -285,8 +285,8 @@ fn future_writer_factory(\n }\n \n fn future_writer() -> (writer, future::Future<~str>) {\n-    let port = comm::port();\n-    let chan = comm::chan(port);\n+    let port = comm::Port();\n+    let chan = comm::Chan(port);\n     let writer = fn~(+instr: writeinstr) {\n         comm::send(chan, copy instr);\n     };"}, {"sha": "a022ee63273123faa59a9a552f1a3fed988b122c", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,8 +3,8 @@ export foo;\n import comm::*;\n \n fn foo<T: send copy>(x: T) -> Port<T> {\n-    let p = port();\n-    let c = chan(p);\n+    let p = Port();\n+    let c = Chan(p);\n     do task::spawn() |copy c, copy x| {\n         c.send(x);\n     }"}, {"sha": "ff468be95409a1eb41f8cf944ba57e919dcca95f", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,4 +1,4 @@\n-import dvec::{DVec, dvec};\n+import dvec::DVec;\n \n type entry<A,B> = {key: A, value: B};\n type alist<A,B> = { eq_fn: fn@(A,A) -> bool, data: DVec<entry<A,B>> };\n@@ -18,12 +18,12 @@ fn alist_get<A: copy, B: copy>(lst: alist<A,B>, k: A) -> B {\n #[inline]\n fn new_int_alist<B: copy>() -> alist<int, B> {\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    return {eq_fn: eq_int, data: dvec()};\n+    return {eq_fn: eq_int, data: DVec()};\n }\n \n #[inline]\n fn new_int_alist_2<B: copy>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    return {eq_fn: eq_int, data: dvec()};\n+    return {eq_fn: eq_int, data: DVec()};\n }\n\\ No newline at end of file"}, {"sha": "8daa79991d9d3a709b264f4f6443d7f8fba907ac", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -168,10 +168,10 @@ fn main(args: ~[~str]) {\n         let rng = rand::seeded_rng(copy seed);\n         let mut results = empty_results();\n         int_benchmarks::<Managed<LinearMap<uint, uint>>>(\n-            || Managed(linear_map(uint::hash, uint::eq)),\n+            || Managed(LinearMap(uint::hash, uint::eq)),\n             rng, num_keys, &mut results);\n         str_benchmarks::<Managed<LinearMap<~str, uint>>>(\n-            || Managed(linear_map(str::hash, str::eq)),\n+            || Managed(LinearMap(str::hash, str::eq)),\n             rng, num_keys, &mut results);\n         write_results(\"libstd::map::hashmap\", &results);\n     }"}, {"sha": "2cea9d14cdd350f32d771cb9695cb378ab637913", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -64,7 +64,7 @@ fn read_line() {\n }\n \n fn str_set() {\n-    let r = rand::rng();\n+    let r = rand::Rng();\n \n     let s = map::hashmap(str::hash, str::eq);\n \n@@ -82,7 +82,7 @@ fn str_set() {\n }\n \n fn vec_plus() {\n-    let r = rand::rng();\n+    let r = rand::Rng();\n \n     let mut v = ~[]; \n     let mut i = 0;\n@@ -99,7 +99,7 @@ fn vec_plus() {\n }\n \n fn vec_append() {\n-    let r = rand::rng();\n+    let r = rand::Rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -116,7 +116,7 @@ fn vec_append() {\n }\n \n fn vec_push_all() {\n-    let r = rand::rng();\n+    let r = rand::Rng();\n \n     let mut v = ~[];\n     for uint::range(0, 1500) |i| {"}, {"sha": "fe65bcaf623be5656c865e6d8b99c0051980c4c3", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,7 +1,7 @@\n // A raw test of vector appending performance.\n \n use std;\n-import dvec::dvec;\n+import dvec::DVec;\n import io::WriterUtil;\n \n fn collect_raw(num: uint) -> ~[uint] {\n@@ -13,7 +13,7 @@ fn collect_raw(num: uint) -> ~[uint] {\n }\n \n fn collect_dvec(num: uint) -> ~[mut uint] {\n-    let result = dvec();\n+    let result = DVec();\n     for uint::range(0u, num) |i| {\n         result.push(i);\n     }"}, {"sha": "b30a2c4eac9ee910281561109e32764a891c2366", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -88,7 +88,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n \n fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n     let keys = map::hashmap::<node_id, ()>(node_hash, sys::shape_eq);\n-    let r = rand::rng();\n+    let r = rand::Rng();\n \n     while keys.size() < n {\n         let k = r.gen_uint_range(0u, graph.len());"}, {"sha": "05590037f0bab77b0ea7e7319ce50471c2fc9703", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -33,21 +33,21 @@ fn main(args: ~[~str]) {\n     let num_tasks = option::get(uint::from_str(args[1]));\n     let msg_per_task = option::get(uint::from_str(args[2]));\n \n-    let num_port = port();\n-    let mut num_chan = chan(num_port);\n+    let num_port = Port();\n+    let mut num_chan = Chan(num_port);\n \n     let start = time::precise_time_s();\n \n     // create the ring\n     let mut futures = ~[];\n \n     for uint::range(1u, num_tasks) |i| {\n-        let get_chan = port();\n-        let get_chan_chan = chan(get_chan);\n+        let get_chan = Port();\n+        let get_chan_chan = Chan(get_chan);\n \n         futures += ~[do future::spawn |copy num_chan, move get_chan_chan| {\n-            let p = port();\n-            get_chan_chan.send(chan(p));\n+            let p = Port();\n+            get_chan_chan.send(Chan(p));\n             thread_ring(i, msg_per_task, num_chan,  p)\n         }];\n         "}, {"sha": "a4ac4794bd339f58aa4e13920ed61480367566d5", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -122,12 +122,12 @@ fn creature(\n \n fn rendezvous(nn: uint, set: ~[color]) {\n     // these ports will allow us to hear from the creatures\n-    let from_creatures:     comm::Port<creature_info> = comm::port();\n-    let from_creatures_log: comm::Port<~str> = comm::port();\n+    let from_creatures:     comm::Port<creature_info> = comm::Port();\n+    let from_creatures_log: comm::Port<~str> = comm::Port();\n \n     // these channels will be passed to the creatures so they can talk to us\n-    let to_rendezvous     = comm::chan(from_creatures);\n-    let to_rendezvous_log = comm::chan(from_creatures_log);\n+    let to_rendezvous     = comm::Chan(from_creatures);\n+    let to_rendezvous_log = comm::Chan(from_creatures_log);\n \n     // these channels will allow us to talk to each creature by 'name'/index\n     let to_creature: ~[comm::Chan<Option<creature_info>>] ="}, {"sha": "896ec6729b0cad417298c8020d585bf83317bed8", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -45,7 +45,7 @@ fn select_random(r: u32, genelist: ~[aminoacids]) -> char {\n \n fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[aminoacids], n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n-    let rng = @{mut last: rand::rng().next()};\n+    let rng = @{mut last: rand::Rng().next()};\n     let mut op: ~str = ~\"\";\n     for uint::range(0u, n as uint) |_i| {\n         str::push_char(op, select_random(myrandom_next(rng, 100u32),"}, {"sha": "206c91da7de4f1a97d79cc525b08cadb35b77eb5", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -138,8 +138,8 @@ fn main(args: ~[~str]) {\n \n    // initialize each sequence sorter\n    let sizes = ~[1u,2u,3u,4u,6u,12u,18u];\n-   let from_child = vec::map (sizes, |_sz| comm::port() );\n-   let to_parent  = vec::mapi(sizes, |ii, _sz| comm::chan(from_child[ii]) );\n+   let from_child = vec::map (sizes, |_sz| comm::Port() );\n+   let to_parent  = vec::mapi(sizes, |ii, _sz| comm::Chan(from_child[ii]) );\n    let to_child   = vec::mapi(sizes, fn@(ii: uint, sz: uint) -> comm::Chan<~[u8]> {\n        return do task::spawn_listener |from_parent| {\n          make_sequence_processor(sz, from_parent, to_parent[ii]);"}, {"sha": "fc011952be3f374f77b450f9d43b02495b50ad9e", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -100,8 +100,8 @@ impl devnull: io::Writer {\n \n fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n {\n-    let p: comm::Port<line> = comm::port();\n-    let ch = comm::chan(p);\n+    let p: comm::Port<line> = comm::Port();\n+    let ch = comm::Chan(p);\n     comm::send(writech, ch);\n     let cout: io::Writer = match path {\n         ~\"\" => {\n@@ -168,8 +168,8 @@ fn main(args: ~[~str]) {\n     let size = if vec::len(args) < 2_u { 80_u }\n     else { uint::from_str(args[1]).get() };\n \n-    let writep = comm::port();\n-    let writech = comm::chan(writep);\n+    let writep = comm::Port();\n+    let writech = comm::Chan(writep);\n     do task::spawn {\n         writer(path, writech, size);\n     };"}, {"sha": "702f53e56933c44a04e30c4e68dc1709b2ca4840", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -6,8 +6,8 @@ const n_threads: int = 503;\n fn start(+token: int) {\n     import iter::*;\n \n-    let p = comm::port();\n-    let mut ch = comm::chan(p);\n+    let p = comm::Port();\n+    let mut ch = comm::Chan(p);\n     for int::range(2, n_threads + 1) |i| {\n         let id = n_threads + 2 - i;\n         let to_child = do task::spawn_listener::<int> |p, copy ch| {"}, {"sha": "c2ebfc785dfcd07b68ddb72d21e4494ea4f1518b", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -10,13 +10,13 @@\n // Creates in the background 'num_tasks' tasks, all blocked forever.\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n fn grandchild_group(num_tasks: uint) {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n \n     for num_tasks.times {\n         do task::spawn { // linked\n             comm::send(ch, ());\n-            comm::recv(comm::port::<()>()); // block forever\n+            comm::recv(comm::Port::<()>()); // block forever\n         }\n     }\n     #error[\"Grandchild group getting started\"];"}, {"sha": "86b23d126cfe2357e97b7a55ffc8615de046d5e2", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -7,8 +7,8 @@ enum msg {\n }\n \n fn calc(children: uint, parent_ch: comm::Chan<msg>) {\n-    let port = comm::port();\n-    let chan = comm::chan(port);\n+    let port = comm::Port();\n+    let chan = comm::Chan(port);\n     let mut child_chs = ~[];\n     let mut sum = 0;\n \n@@ -58,8 +58,8 @@ fn main(args: ~[~str]) {\n     };\n \n     let children = uint::from_str(args[1]).get();\n-    let port = comm::port();\n-    let chan = comm::chan(port);\n+    let port = comm::Port();\n+    let chan = comm::Chan(port);\n     do task::spawn {\n         calc(children, chan);\n     };"}, {"sha": "0c175ab4e2cb0268047b98fbd06643fc58b98b06", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -28,9 +28,7 @@ import u64;\n import task;\n import comm;\n import comm::Chan;\n-import comm::chan;\n import comm::Port;\n-import comm::port;\n import comm::recv;\n import comm::send;\n \n@@ -62,8 +60,8 @@ impl ~str: hash_key {\n // These used to be in task, but they disappeard.\n type joinable_task = Port<()>;\n fn spawn_joinable(+f: fn~()) -> joinable_task {\n-    let p = port();\n-    let c = chan(p);\n+    let p = Port();\n+    let c = Chan(p);\n     do task::spawn() |move f| {\n         f();\n         c.send(());\n@@ -214,9 +212,9 @@ mod map_reduce {\n         key: K,\n         out: Chan<Chan<reduce_proto<V>>>)\n     {\n-        let p = port();\n+        let p = Port();\n \n-        send(out, chan(p));\n+        send(out, Chan(p));\n \n         let mut ref_count = 0;\n         let mut is_done = false;\n@@ -277,8 +275,8 @@ mod map_reduce {\n                   }\n                   None => {\n                     // log(error, \"creating new reducer for \" + k);\n-                    let p = port();\n-                    let ch = chan(p);\n+                    let p = Port();\n+                    let ch = Chan(p);\n                     let r = reduce, kk = k;\n                     vec::push(tasks,\n                               spawn_joinable(|| reduce_task(r, kk, ch) ));\n@@ -355,7 +353,7 @@ struct random_word_reader: word_reader {\n     let rng: rand::Rng;\n     new(count: uint) {\n         self.remaining = count;\n-        self.rng = rand::rng();\n+        self.rng = rand::Rng();\n     }\n \n     fn read_word() -> Option<~str> {"}, {"sha": "2a6c26e9f13653cdae6fcd06713aa14ec0962f8b", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -5,7 +5,7 @@ fn main() {\n       drop {}\n     }\n    \n-    let x = ~mut Some(foo(comm::port()));\n+    let x = ~mut Some(foo(comm::Port()));\n \n     do task::spawn |move x| { //~ ERROR not a sendable value\n         let mut y = None;"}, {"sha": "29d89fbf8602b35d44f9f70e92e0b05347ea3e8e", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -9,7 +9,7 @@ struct foo {\n \n fn main() {\n   let cat = ~\"kitty\";\n-  let po = comm::port();         //~ ERROR missing `send`\n-  let ch = comm::chan(po);       //~ ERROR missing `send`\n+  let po = comm::Port();         //~ ERROR missing `send`\n+  let ch = comm::Chan(po);       //~ ERROR missing `send`\n   comm::send(ch, foo(42, @cat)); //~ ERROR missing `send`\n }"}, {"sha": "8b1f2588274654c3e0c3ea8d29467ea3328f97c5", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,13 +3,13 @@\n // error-pattern:1 == 2\n use std;\n import task;\n-import comm::port;\n+import comm::Port;\n import comm::recv;\n \n fn child() { assert (1 == 2); }\n \n fn main() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     task::spawn(|| child() );\n     let x = recv(p);\n }"}, {"sha": "cdb4dd446a1cfbdb1f21be3d7d6e7d4d11550c9a", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,14 +3,14 @@\n // error-pattern:fail\n use std;\n import task;\n-import comm::chan;\n-import comm::port;\n+import comm::Chan;\n+import comm::Port;\n import comm::recv;\n \n fn child() { fail; }\n \n fn main() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     task::spawn(|| child() );\n     task::yield();\n }"}, {"sha": "2acb1494078b75112d9fb3d370474598a87f684a", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,19 +3,19 @@\n // error-pattern:fail\n use std;\n import task;\n-import comm::port;\n+import comm::Port;\n import comm::recv;\n \n fn grandchild() { fail ~\"grandchild dies\"; }\n \n fn child() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     task::spawn(|| grandchild() );\n     let x = recv(p);\n }\n \n fn main() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     task::spawn(|| child() );\n     let x = recv(p);\n }"}, {"sha": "4808ab7097658a199873c9e7273bd7bfa1415bf6", "filename": "src/test/run-fail/linked-failure4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure4.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,22 +2,22 @@\n // error-pattern:1 == 2\n use std;\n import task;\n-import comm::chan;\n-import comm::port;\n+import comm::Chan;\n+import comm::Port;\n import comm::recv;\n \n fn child() { assert (1 == 2); }\n \n fn parent() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     task::spawn(|| child() );\n     let x = recv(p);\n }\n \n // This task is not linked to the failure chain, but since the other\n // tasks are going to fail the kernel, this one will fail too\n fn sleeper() {\n-    let p = port::<int>();\n+    let p = Port::<int>();\n     let x = recv(p);\n }\n "}, {"sha": "17b03ed53cf3a3f2783d3028cf8b5bab960f0f0d", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,16 +1,15 @@\n // error-pattern:meep\n use std;\n import comm::Chan;\n-import comm::chan;\n-import comm::port;\n+import comm::Port;\n import comm::send;\n import comm::recv;\n \n fn echo<T: send>(c: Chan<T>, oc: Chan<Chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n-    let p = port::<T>();\n-    send(oc, chan(p));\n+    let p = Port::<T>();\n+    send(oc, Chan(p));\n \n     let x = recv(p);\n     send(c, x);"}, {"sha": "1dc0561fc5443283d5c1c8ec69bc7933c6ab364b", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -11,7 +11,7 @@ fn goodfail() {\n \n fn main() {\n     task::spawn(|| goodfail() );\n-    let po = comm::port();\n+    let po = comm::Port();\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n     let i: int = comm::recv(po);"}, {"sha": "d1447f3bc60d0aeb81c474f8f7cac630a6b0f5e0", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,17 +2,16 @@\n \n use std;\n import comm::Chan;\n-import comm::chan;\n-import comm::port;\n+import comm::Port;\n import comm::send;\n import comm::recv;\n import task;\n \n fn a(c: Chan<int>) { send(c, 10); }\n \n fn main() {\n-    let p = port();\n-    let ch = chan(p);\n+    let p = Port();\n+    let ch = Chan(p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| a(ch) );\n     let mut n: int = 0;"}, {"sha": "c4719299b074c26fc9c7152d71757c813865c704", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,18 +2,17 @@\n \n use std;\n import comm;\n-import comm::port;\n+import comm::Port;\n import comm::send;\n import comm::Chan;\n-import comm::chan;\n import comm::recv;\n import task;\n \n fn a(c: Chan<int>) { debug!(\"task a0\"); debug!(\"task a1\"); send(c, 10); }\n \n fn main() {\n-    let p = port();\n-    let ch = chan(p);\n+    let p = Port();\n+    let ch = Chan(p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut n: int = 0;"}, {"sha": "5e436208897d430a634f161f9410650a068e7b4d", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -4,7 +4,6 @@ use std;\n import comm;\n import comm::send;\n import comm::Chan;\n-import comm::chan;\n import comm::recv;\n import task;\n \n@@ -31,8 +30,8 @@ fn g(x: int, y: ~str) -> int {\n fn main() {\n     let mut n: int = 2 + 3 * 7;\n     let s: ~str = ~\"hello there\";\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut x: int = 10;"}, {"sha": "0542faafb42cce5bc5ff18878acd342603d3e733", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -60,17 +60,17 @@ fn test_box() {\n }\n \n fn test_port() {\n-    let p1 = comm::port::<int>();\n-    let p2 = comm::port::<int>();\n+    let p1 = comm::Port::<int>();\n+    let p2 = comm::Port::<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n }\n \n fn test_chan() {\n-    let p: comm::Port<int> = comm::port();\n-    let ch1 = comm::chan(p);\n-    let ch2 = comm::chan(p);\n+    let p: comm::Port<int> = comm::Port();\n+    let ch1 = comm::Chan(p);\n+    let ch2 = comm::Chan(p);\n \n     assert (ch1 == ch1);\n     // Chans are equal because they are just task:port addresses."}, {"sha": "8b887c28ccce9449e3bb1ce8e6469b40c3cdc2a1", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,28 +3,27 @@\n use std;\n import task;\n import comm::Chan;\n-import comm::chan;\n import comm::send;\n import comm;\n-import comm::port;\n+import comm::Port;\n import comm::recv;\n \n enum request { quit, close(Chan<bool>), }\n \n type ctx = Chan<request>;\n \n fn request_task(c: Chan<ctx>) {\n-    let p = port();\n-    send(c, chan(p));\n+    let p = Port();\n+    send(c, Chan(p));\n     let mut req: request;\n     req = recv(p);\n     // Need to drop req before receiving it again\n     req = recv(p);\n }\n \n fn new_cx() -> ctx {\n-    let p = port();\n-    let ch = chan(p);\n+    let p = Port();\n+    let ch = Chan(p);\n     let t = task::spawn(|| request_task(ch) );\n     let mut cx: ctx;\n     cx = recv(p);\n@@ -34,7 +33,7 @@ fn new_cx() -> ctx {\n fn main() {\n     let cx = new_cx();\n \n-    let p = port::<bool>();\n-    send(cx, close(chan(p)));\n+    let p = Port::<bool>();\n+    send(cx, close(Chan(p)));\n     send(cx, quit);\n }"}, {"sha": "83109235433d163f4861b64739c1ce0182371078", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,14 +3,13 @@\n use std;\n import comm;\n import comm::Chan;\n-import comm::chan;\n import comm::send;\n import comm::recv;\n import task;\n \n fn main() {\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n     let t = task::spawn(|| child(ch) );\n     let y = recv(p);\n     error!(\"received\");"}, {"sha": "2d1ce1b25650459c6f993876403d617a73daa23f", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,14 +1,14 @@\n // -*- rust -*-\n \n use std;\n-import comm::port;\n-import comm::chan;\n+import comm::Port;\n+import comm::Chan;\n import comm::send;\n import comm::recv;\n \n fn main() {\n-    let po = port();\n-    let ch = chan(po);\n+    let po = Port();\n+    let ch = Chan(po);\n     send(ch, 10);\n     let i = recv(po);\n     assert (i == 10);"}, {"sha": "6a3688607e05d3369fc48a9633455cf6a8464f2e", "filename": "src/test/run-pass/dvec-index-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x = dvec::dvec();\n+    let x = dvec::DVec();\n     x.push(1);\n     io::println(fmt!(\"%d\", x[0]));\n }"}, {"sha": "06b48565785b4827a38b76ba195ca16ad99a8027", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,7 +1,7 @@\n-import dvec::dvec;\n+import dvec::DVec;\n \n fn main() {\n-    let d = dvec();\n+    let d = DVec();\n     d.push(3);\n     d.push(4);\n     assert d.get() == ~[3, 4];"}, {"sha": "f1450a5c02d8a90a7b661c33b63581f051c14679", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -15,8 +15,7 @@ import std::map;\n import std::map::hashmap;\n import task;\n import comm::Chan;\n-import comm::chan;\n-import comm::port;\n+import comm::Port;\n import comm::send;\n import comm::recv;\n import comm;\n@@ -49,9 +48,9 @@ mod map_reduce {\n             match im.find(key) {\n               Some(_c) => { c = _c }\n               None => {\n-                let p = port();\n+                let p = Port();\n                 error!(\"sending find_reducer\");\n-                send(ctrl, find_reducer(str::to_bytes(key), chan(p)));\n+                send(ctrl, find_reducer(str::to_bytes(key), Chan(p)));\n                 error!(\"receiving\");\n                 c = recv(p);\n                 log(error, c);\n@@ -65,7 +64,7 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: ~[~str]) {\n-        let ctrl = port();\n+        let ctrl = Port();\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n@@ -74,7 +73,7 @@ mod map_reduce {\n \n         reducers = map::str_hash();\n \n-        start_mappers(chan(ctrl), inputs);\n+        start_mappers(Chan(ctrl), inputs);\n \n         let mut num_mappers = vec::len(inputs) as int;\n "}, {"sha": "4459b97ff5bf638eea32603dc31de6d3586e75e8", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -10,9 +10,8 @@ use std;\n import task;\n import comm;\n import comm::Chan;\n-import comm::chan;\n import comm::send;\n-import comm::port;\n+import comm::Port;\n import comm::recv;\n \n fn grandchild(c: Chan<int>) { send(c, 42); }\n@@ -22,8 +21,8 @@ fn child(c: Chan<int>) {\n }\n \n fn main() {\n-    let p = comm::port();\n-    let ch = chan(p);\n+    let p = comm::Port();\n+    let ch = Chan(p);\n \n     task::spawn(|| child(ch) );\n "}, {"sha": "ed50e6e51437b11ceb8f02e96bc43154a3f73432", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,9 +3,7 @@ import vec;\n import task;\n import comm;\n import comm::Chan;\n-import comm::chan;\n import comm::Port;\n-import comm::port;\n import comm::recv;\n import comm::send;\n \n@@ -18,8 +16,8 @@ fn producer(c: Chan<~[u8]>) {\n }\n \n fn packager(cb: Chan<Chan<~[u8]>>, msg: Chan<msg>) {\n-    let p: Port<~[u8]> = port();\n-    send(cb, chan(p));\n+    let p: Port<~[u8]> = Port();\n+    send(cb, Chan(p));\n     loop {\n         debug!(\"waiting for bytes\");\n         let data = recv(p);\n@@ -39,10 +37,10 @@ fn packager(cb: Chan<Chan<~[u8]>>, msg: Chan<msg>) {\n }\n \n fn main() {\n-    let p: Port<msg> = port();\n-    let ch = chan(p);\n-    let recv_reader: Port<Chan<~[u8]>> = port();\n-    let recv_reader_chan = chan(recv_reader);\n+    let p: Port<msg> = Port();\n+    let ch = Chan(p);\n+    let recv_reader: Port<Chan<~[u8]>> = Port();\n+    let recv_reader_chan = Chan(recv_reader);\n     let pack = task::spawn(|| packager(recv_reader_chan, ch) );\n \n     let source_chan: Chan<~[u8]> = recv(recv_reader);"}, {"sha": "9f908625a3322ae2a7650eaa5634a55377ac1eef", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -5,11 +5,11 @@ import task::*;\n fn a() {\n     fn doit() {\n         fn b(c: Chan<Chan<int>>) {\n-            let p = port();\n-            send(c, chan(p));\n+            let p = Port();\n+            send(c, Chan(p));\n         }\n-        let p = port();\n-        let ch = chan(p);\n+        let p = Port();\n+        let ch = Chan(p);\n         spawn(|| b(ch) );\n         recv(p);\n     }"}, {"sha": "d6a72422507ee470c0b6318ffed78155bdcc6a1d", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,9 +3,7 @@ use std;\n import task;\n import comm;\n import comm::Chan;\n-import comm::chan;\n import comm::Port;\n-import comm::port;\n import comm::send;\n import comm::recv;\n \n@@ -16,8 +14,8 @@ fn producer(c: Chan<~[u8]>) {\n }\n \n fn main() {\n-    let p: Port<~[u8]> = port();\n-    let ch = chan(p);\n+    let p: Port<~[u8]> = Port();\n+    let ch = Chan(p);\n     let prod = task::spawn(|| producer(ch) );\n \n     let data: ~[u8] = recv(p);"}, {"sha": "ebb7507789ebd4b9618cb33632249185e58e29e3", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -5,8 +5,8 @@ import task;\n import comm::*;\n \n fn main() {\n-    let p = port();\n-    let ch = chan(p);\n+    let p = Port();\n+    let ch = Chan(p);\n     let mut y: int;\n \n     task::spawn(|| child(ch) );"}, {"sha": "78339d8c0c6ef3eb63e88e3fbca9d753732b182f", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -8,17 +8,17 @@ fn sub(parent: comm::Chan<int>, id: int) {\n     if id == 0 {\n         comm::send(parent, 0);\n     } else {\n-        let p = comm::port();\n-        let ch = comm::chan(p);\n+        let p = comm::Port();\n+        let ch = comm::Chan(p);\n         let child = task::spawn(|| sub(ch, id - 1) );\n         let y = comm::recv(p);\n         comm::send(parent, y + 1);\n     }\n }\n \n fn main() {\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n     let child = task::spawn(|| sub(ch, 200) );\n     let y = comm::recv(p);\n     debug!(\"transmission complete\");"}, {"sha": "3036d4c201fa2160b72f48ade0c119c0b7efdab8", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -50,7 +50,7 @@ fn main() {\n         calllink09,\n         calllink10\n     ];\n-    let rng = rand::rng();\n+    let rng = rand::Rng();\n     for fns.each |f| {\n         let sz = rng.next() % 256u32 + 256u32;\n         let frame_backoff = rng.next() % 10u32 + 1u32;"}, {"sha": "aaaa34453e01e70fa4273b72e0133fa564110a01", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -6,8 +6,8 @@ use std;\n import option;\n import uint;\n import comm;\n-import comm::port;\n-import comm::chan;\n+import comm::Port;\n+import comm::Chan;\n import comm::send;\n import comm::recv;\n \n@@ -20,8 +20,8 @@ type record = {val1: u32, val2: u32, val3: u32};\n // power of two so needs to be rounded up. Don't trigger any\n // assertions.\n fn test_init() {\n-    let myport = port();\n-    let mychan = chan(myport);\n+    let myport = Port();\n+    let mychan = Chan(myport);\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n     send(mychan, val);\n }\n@@ -30,8 +30,8 @@ fn test_init() {\n // Dump lots of items into the channel so it has to grow.\n // Don't trigger any assertions.\n fn test_grow() {\n-    let myport = port();\n-    let mychan = chan(myport);\n+    let myport = Port();\n+    let mychan = Chan(myport);\n     for uint::range(0u, 100u) |i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n@@ -41,15 +41,15 @@ fn test_grow() {\n \n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n-    let myport = port();\n-    let mychan = chan(myport);\n+    let myport = Port();\n+    let mychan = Chan(myport);\n     send(mychan, 0i8);\n     let x = recv(myport);\n }\n \n fn test_shrink2() {\n-    let myport = port();\n-    let mychan = chan(myport);\n+    let myport = Port();\n+    let mychan = Chan(myport);\n     for uint::range(0u, 100u) |_i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n@@ -60,8 +60,8 @@ fn test_shrink2() {\n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n-    let myport = port();\n-    let mychan = chan(myport);\n+    let myport = Port();\n+    let mychan = Chan(myport);\n     for uint::range(0u, 100u) |i| {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n         send(mychan, val);\n@@ -76,8 +76,8 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = port::<record>();\n-    let mychan = chan(myport);\n+    let myport = Port::<record>();\n+    let mychan = Chan(myport);\n     for uint::range(0u, 10u) |j| {\n         for uint::range(0u, 10u) |i| {\n             let val: record ="}, {"sha": "628b8d7d929feb2e63c75f30c9250d54469203fc", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -16,8 +16,8 @@ extern mod rustrt {\n }\n \n fn main() unsafe {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     let parent_sched_id = rustrt::rust_get_sched_id();\n     error!(\"parent %?\", parent_sched_id);\n     let num_threads = 1u;"}, {"sha": "6f423291cb454b1714fca96eadb158dd1c85b30f", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -10,8 +10,8 @@ fn die() {\n \n fn iloop() {\n     task::spawn(|| die() );\n-    let p = comm::port::<()>();\n-    let c = comm::chan(p);\n+    let p = comm::Port::<()>();\n+    let c = comm::Chan(p);\n     loop {\n         // Sending and receiving here because these actions yield,\n         // at which point our child can kill us"}, {"sha": "ce91d22ec75d20d2f3de6bf4f28a5e2afcaaf025", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -8,12 +8,12 @@ struct test {\n }\n \n fn main() {\n-    let p = port();\n-    let c = chan(p);\n+    let p = Port();\n+    let c = Chan(p);\n \n     do spawn() {\n-        let p = port();\n-        c.send(chan(p));\n+        let p = Port();\n+        c.send(Chan(p));\n \n         let _r = p.recv();\n     }"}, {"sha": "cf975c541332f494cd4f3c220904adb43400382a", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,14 +1,13 @@\n use std;\n import comm::Chan;\n-import comm::chan;\n import comm::send;\n-import comm::port;\n+import comm::Port;\n \n // tests that ctrl's type gets inferred properly\n type command<K: send, V: send> = {key: K, val: V};\n \n fn cache_server<K: send, V: send>(c: Chan<Chan<command<K, V>>>) {\n-    let ctrl = port();\n-    send(c, chan(ctrl));\n+    let ctrl = Port();\n+    send(c, Chan(ctrl));\n }\n fn main() { }"}, {"sha": "762d510da20a87d2b9da6c70076ffdfcb2be0b56", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -7,7 +7,7 @@ struct foo {\n }\n \n fn main() {\n-  let po = comm::port::<foo>();\n-  let ch = comm::chan(po);\n+  let po = comm::Port::<foo>();\n+  let ch = comm::Chan(po);\n   comm::send(ch, foo(42, 'c'));\n }\n\\ No newline at end of file"}, {"sha": "f9eaae7a3549499ca203d41b5e310d8f334eb491", "filename": "src/test/run-pass/sendfn-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-import comm::chan;\n+import comm::Chan;\n import comm::send;\n \n fn main() { test05(); }"}, {"sha": "486a6e0eacfd2812e594e19e1e16b3b90d0b1a1b", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-import comm::chan;\n+import comm::Chan;\n import comm::send;\n \n fn main() { test05(); }"}, {"sha": "3e268e6a4a9751dc43b41d1794c3b27396469b3c", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-import comm::chan;\n+import comm::Chan;\n import comm::send;\n \n fn main() { test05(); }"}, {"sha": "7151da4563a296102db5ef39677895031b8d014f", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -17,7 +17,7 @@ fn iotask(cx: ctx, ip: ~str) {\n }\n \n fn main() {\n-    let p = comm::port::<int>();\n-    let ch = comm::chan(p);\n+    let p = comm::Port::<int>();\n+    let ch = comm::Chan(p);\n     task::spawn(|| iotask(ch, ~\"localhost\") );\n }"}, {"sha": "26506dc4bc81f17bfb5f44d103c80fa7c8c07ce9", "filename": "src/test/run-pass/task-comm-chan-cleanup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,7 +2,7 @@ use std;\n import comm;\n \n fn main() {\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let p = comm::Port();\n+    let c = comm::Chan(p);\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "26506dc4bc81f17bfb5f44d103c80fa7c8c07ce9", "filename": "src/test/run-pass/task-comm-chan-cleanup2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -2,7 +2,7 @@ use std;\n import comm;\n \n fn main() {\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let p = comm::Port();\n+    let c = comm::Chan(p);\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "f01282f0f6ce84e33c4f155a0a5cce9566e0ec87", "filename": "src/test/run-pass/task-comm-chan-cleanup3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,8 +3,8 @@ import comm;\n \n fn main() {\n     let c = {\n-        let p = comm::port();\n-        comm::chan(p)\n+        let p = comm::Port();\n+        comm::Chan(p)\n     };\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "b839a9ae30f537f7dbdc39f59c350e8650b19a8b", "filename": "src/test/run-pass/task-comm-chan-cleanup4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -14,8 +14,8 @@ fn starship(&&ch: comm::Chan<~str>) {\n \n fn starbase() {\n     for int::range(0, 10) |_i| {\n-        let p = comm::port();\n-        let c = comm::chan(p);\n+        let p = comm::Port();\n+        let c = comm::Chan(p);\n         task::spawn(|| starship(c) );\n         task::yield();\n     }"}, {"sha": "25b64bc074e86f5e4eee770200daa9d7858d4ffb", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -7,8 +7,8 @@ import comm;\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test.\n fn main() {\n-    let po = comm::port();\n-    let ch = comm::chan(po);\n+    let po = comm::Port();\n+    let ch = comm::Chan(po);\n     comm::send(ch, ());\n     let n: () = comm::recv(po);\n     assert (n == ());"}, {"sha": "6be6729b7c2d31e0842c3597d2dba69694016678", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -4,8 +4,7 @@ import task;\n import task::task;\n import comm;\n import comm::Chan;\n-import comm::chan;\n-import comm::port;\n+import comm::Port;\n import comm::send;\n import comm::recv;\n \n@@ -34,8 +33,8 @@ fn test00() {\n     let number_of_messages: int = 4;\n     debug!(\"Creating tasks\");\n \n-    let po = port();\n-    let ch = chan(po);\n+    let po = Port();\n+    let ch = Chan(po);\n \n     let mut i: int = 0;\n \n@@ -64,15 +63,15 @@ fn test00() {\n }\n \n fn test01() {\n-    let p = port();\n+    let p = Port();\n     debug!(\"Reading from a port that is never written to.\");\n     let value: int = recv(p);\n     log(debug, value);\n }\n \n fn test02() {\n-    let p = port();\n-    let c = chan(p);\n+    let p = Port();\n+    let c = Chan(p);\n     debug!(\"Writing to a local task channel.\");\n     send(c, 42);\n     debug!(\"Reading from a local task port.\");\n@@ -103,8 +102,8 @@ fn test05_start(ch: Chan<int>) {\n }\n \n fn test05() {\n-    let po = comm::port();\n-    let ch = chan(po);\n+    let po = comm::Port();\n+    let ch = Chan(po);\n     task::spawn(|| test05_start(ch) );\n     let mut value: int;\n     value = recv(po);"}, {"sha": "ce631196fbee2e289451ae3e7328ea71e6da61c0", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -30,8 +30,8 @@ fn joinable(+f: fn~()) -> comm::Port<bool> {\n         f();\n         *b = true;\n     }\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let p = comm::Port();\n+    let c = comm::Chan(p);\n     do task::spawn_unlinked { wrapper(c, copy f) };\n     p\n }"}, {"sha": "9cedfea61300f481a7c6223c5b66962ad6236870", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n-    let p = comm::port::<uint>();\n-    let ch = comm::chan(p);\n+    let p = comm::Port::<uint>();\n+    let ch = comm::Chan(p);\n \n     let x = ~1;\n     let x_in_parent = ptr::addr_of(*x) as uint;"}, {"sha": "fa98f886a5c17bfe4f7da74971c25fc717ede660", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -8,8 +8,8 @@ fn child(c: comm::Chan<~uint>, i: uint) {\n }\n \n fn main() {\n-    let p = comm::port();\n-    let ch = comm::chan(p);\n+    let p = comm::Port();\n+    let ch = comm::Chan(p);\n     let n = 100u;\n     let mut expected = 0u;\n     for uint::range(0u, n) |i| {"}, {"sha": "eabfc1e859fdfefb0f28b49f345015f5b582d83e", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -3,8 +3,8 @@ import comm;\n import task;\n \n fn main() {\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let p = comm::Port();\n+    let c = comm::Chan(p);\n     comm::send(c, ~100);\n     let v = comm::recv(p);\n     assert v == ~100;"}, {"sha": "c8b2be18e15e967ec32fd00ac02bc6e419708fda", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a82e433fbfbc0bd57a4d951ac37656a8a30f6/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "patch": "@@ -19,8 +19,8 @@ fn f(c: comm::Chan<bool>) {\n }\n \n fn main() {\n-    let p = comm::port();\n-    let c = comm::chan(p);\n+    let p = comm::Port();\n+    let c = comm::Chan(p);\n     task::spawn_unlinked(|| f(c) );\n     error!(\"hiiiiiiiii\");\n     assert comm::recv(p);"}]}