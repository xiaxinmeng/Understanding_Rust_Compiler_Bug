{"sha": "f02df27f0484b5b7b05dcb674d4233727bb46e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMmRmMjdmMDQ4NGI1YjdiMDVkY2I2NzRkNDIzMzcyN2JiNDZlODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T08:31:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T08:31:28Z"}, "message": "Auto merge of #6780 - matthiaskrgr:lintcheck2, r=flip1995\n\nlintcheck: fully rerun lintcheck if clippy was rebuilt since last log update\n\nAutomatically clean lintchecks shared target dir (will force clippy to recheck sources) if\nthe clippy binaries are older than the lintcheck logs.\n\nAlso updated lintcheck logs in the pr.\n\nchangelog: lintcheck: fully rerun lintcheck if clippy was rebuilt since last log update", "tree": {"sha": "6c88dda0fb1f381c772ca6269b58e946f9fac314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c88dda0fb1f381c772ca6269b58e946f9fac314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f02df27f0484b5b7b05dcb674d4233727bb46e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f02df27f0484b5b7b05dcb674d4233727bb46e82", "html_url": "https://github.com/rust-lang/rust/commit/f02df27f0484b5b7b05dcb674d4233727bb46e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f02df27f0484b5b7b05dcb674d4233727bb46e82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0984754dd75ce6f002389eb5a6c47466f604ed7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0984754dd75ce6f002389eb5a6c47466f604ed7f", "html_url": "https://github.com/rust-lang/rust/commit/0984754dd75ce6f002389eb5a6c47466f604ed7f"}, {"sha": "363f6d3dc6468dab9a07348fc180ab9ffe1f3fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/363f6d3dc6468dab9a07348fc180ab9ffe1f3fdd", "html_url": "https://github.com/rust-lang/rust/commit/363f6d3dc6468dab9a07348fc180ab9ffe1f3fdd"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "2a6d931531166fd67a54059f2a1b8d275ea5c627", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f02df27f0484b5b7b05dcb674d4233727bb46e82/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02df27f0484b5b7b05dcb674d4233727bb46e82/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=f02df27f0484b5b7b05dcb674d4233727bb46e82", "patch": "@@ -310,6 +310,14 @@ fn filter_clippy_warnings(line: &str) -> bool {\n     false\n }\n \n+/// get the path to lintchecks crate sources .toml file, check LINTCHECK_TOML first but if it's\n+/// empty use the default path\n+fn lintcheck_config_toml() -> PathBuf {\n+    PathBuf::from(\n+        env::var(\"LINTCHECK_TOML\").unwrap_or(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\").to_string()),\n+    )\n+}\n+\n /// Builds clippy inside the repo to make sure we have a clippy executable we can use.\n fn build_clippy() {\n     let status = Command::new(\"cargo\")\n@@ -324,9 +332,7 @@ fn build_clippy() {\n \n /// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n-    let toml_path = PathBuf::from(\n-        env::var(\"LINTCHECK_TOML\").unwrap_or(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\").to_string()),\n-    );\n+    let toml_path = lintcheck_config_toml();\n     // save it so that we can use the name of the sources.toml as name for the logfile later.\n     let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n@@ -436,12 +442,50 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> String {\n         .collect::<String>()\n }\n \n+/// check if the latest modification of the logfile is older than the modification date of the\n+/// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n+fn lintcheck_needs_rerun() -> bool {\n+    let clippy_modified: std::time::SystemTime = {\n+        let mut times = [\"target/debug/clippy-driver\", \"target/debug/cargo-clippy\"]\n+            .into_iter()\n+            .map(|p| {\n+                std::fs::metadata(p)\n+                    .expect(\"failed to get metadata of file\")\n+                    .modified()\n+                    .expect(\"failed to get modification date\")\n+            });\n+        // the lates modification of either of the binaries\n+        std::cmp::max(times.next().unwrap(), times.next().unwrap())\n+    };\n+\n+    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_config_toml())\n+        .expect(\"failed to get metadata of file\")\n+        .modified()\n+        .expect(\"failed to get modification date\");\n+\n+    // if clippys modification time is bigger (older) than the logs mod time, we need to rerun lintcheck\n+    clippy_modified > logs_modified\n+}\n+\n /// lintchecks `main()` function\n pub fn run(clap_config: &ArgMatches) {\n     println!(\"Compiling clippy...\");\n     build_clippy();\n     println!(\"Done compiling\");\n \n+    // if the clippy bin is newer than our logs, throw away target dirs to force clippy to\n+    // refresh the logs\n+    if lintcheck_needs_rerun() {\n+        let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n+        if std::fs::metadata(&shared_target_dir)\n+            .expect(\"failed to get metadata of shared target dir\")\n+            .is_dir()\n+        {\n+            println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n+            std::fs::remove_dir_all(&shared_target_dir).expect(\"failed to remove target/lintcheck/shared_target_dir\");\n+        }\n+    }\n+\n     let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\")\n         .canonicalize()\n         .expect(\"failed to canonicalize path to clippy binary\");"}, {"sha": "c23dd926f621d1edd78409dde998be0ffbf7df4b", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f02df27f0484b5b7b05dcb674d4233727bb46e82/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f02df27f0484b5b7b05dcb674d4233727bb46e82/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=f02df27f0484b5b7b05dcb674d4233727bb46e82", "patch": "@@ -1,4 +1,4 @@\n-clippy 0.1.52 (bb5f9d18a 2021-02-19)\n+clippy 0.1.52 (697f3b6d4 2021-02-22)\n \n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.categories` metadata\"\n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.keywords` metadata\"\n@@ -102,6 +102,7 @@ cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:424:5 clippy::\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:469:58 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:603:19 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:665:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:697:12 clippy::inconsistent_struct_constructor \"inconsistent struct constructor\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:82:31 clippy::doc_markdown \"you should put `FileType` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:83:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:84:9 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n@@ -177,7 +178,7 @@ cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:606:5 clippy::missing_error\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:688:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:756:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n-cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:823:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1021:51 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1656:16 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n@@ -233,7 +234,7 @@ cargo-0.49.0/src/cargo/core/compiler/job_queue.rs:93:24 clippy::doc_markdown \"yo\n cargo-0.49.0/src/cargo/core/compiler/links.rs:8:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:1016:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:1094:19 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n-cargo-0.49.0/src/cargo/core/compiler/mod.rs:1131:1 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:1131:1 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:1268:34 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:1277:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:179:1 clippy::too_many_lines \"this function has too many lines (162/100)\"\n@@ -242,13 +243,13 @@ cargo-0.49.0/src/cargo/core/compiler/mod.rs:201:25 clippy::single_match_else \"yo\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:267:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:324:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n-cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:392:45 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:415:23 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:464:18 clippy::ptr_arg \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:488:61 clippy::ptr_arg \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:667:15 clippy::similar_names \"binding's name is too similar to existing binding\"\n-cargo-0.49.0/src/cargo/core/compiler/mod.rs:693:1 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:693:1 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:725:42 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:736:1 clippy::too_many_lines \"this function has too many lines (141/100)\"\n cargo-0.49.0/src/cargo/core/compiler/mod.rs:73:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -486,7 +487,7 @@ cargo-0.49.0/src/cargo/core/profiles.rs:1014:5 clippy::must_use_candidate \"this\n cargo-0.49.0/src/cargo/core/profiles.rs:1018:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1028:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:106:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n-cargo-0.49.0/src/cargo/core/profiles.rs:143:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/profiles.rs:143:5 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/core/profiles.rs:286:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/profiles.rs:286:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:294:40 clippy::if_not_else \"unnecessary boolean `not` operation\"\n@@ -887,7 +888,7 @@ cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:233:21 clippy::si\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:244:22 clippy::doc_markdown \"you should put `PackageId` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:244:63 clippy::doc_markdown \"you should put `PackageId` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:253:17 clippy::if_not_else \"unnecessary boolean `not` operation\"\n-cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:370:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:370:5 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:505:8 clippy::map_unwrap_or \"called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\"\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:525:10 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:542:27 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -1321,6 +1322,7 @@ cargo-0.49.0/src/cargo/util/process_builder.rs:185:5 clippy::missing_errors_doc\n cargo-0.49.0/src/cargo/util/process_builder.rs:190:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:218:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:218:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/util/process_builder.rs:278:22 clippy::inconsistent_struct_constructor \"inconsistent struct constructor\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:307:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:343:39 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/util/progress.rs:122:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -2392,6 +2394,7 @@ rayon-1.5.0/src/iter/chain.rs:58:17 clippy::shadow_unrelated \"`b` is being shado\n rayon-1.5.0/src/iter/chain.rs:78:14 clippy::shadow_unrelated \"`a` is being shadowed\"\n rayon-1.5.0/src/iter/chain.rs:78:17 clippy::shadow_unrelated \"`b` is being shadowed\"\n rayon-1.5.0/src/iter/chain.rs:97:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n+rayon-1.5.0/src/iter/chunks.rs:29:9 clippy::inconsistent_struct_constructor \"inconsistent struct constructor\"\n rayon-1.5.0/src/iter/chunks.rs:3:5 clippy::wildcard_imports \"usage of wildcard import\"\n rayon-1.5.0/src/iter/chunks.rs:4:5 clippy::wildcard_imports \"usage of wildcard import\"\n rayon-1.5.0/src/iter/chunks.rs:77:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -3279,7 +3282,7 @@ xsv-0.13.0/src/cmd/sort.rs:48:9 clippy::similar_names \"binding's name is too sim\n xsv-0.13.0/src/cmd/sort.rs:91:14 clippy::explicit_into_iter_loop \"it is more concise to loop over containers instead of using explicit iteration methods\"\n xsv-0.13.0/src/cmd/split.rs:14:16 clippy::redundant_static_lifetimes \"statics have by default a `'static` lifetime\"\n xsv-0.13.0/src/cmd/split.rs:61:9 clippy::similar_names \"binding's name is too similar to existing binding\"\n-xsv-0.13.0/src/cmd/split.rs:94:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+xsv-0.13.0/src/cmd/split.rs:94:5 clippy::unnecessary_wraps \"this function's return value is unnecessary\"\n xsv-0.13.0/src/cmd/split.rs:96:14 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n xsv-0.13.0/src/cmd/split.rs:99:13 clippy::cast_possible_truncation \"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\"\n xsv-0.13.0/src/cmd/stats.rs:110:36 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -3416,6 +3419,7 @@ clippy::write_with_newline 2\n clippy::filter_map_next 3\n clippy::fn_params_excessive_bools 3\n clippy::if_same_then_else 3\n+clippy::inconsistent_struct_constructor 3\n clippy::mut_mut 3\n clippy::ptr_arg 3\n clippy::zero_ptr 3"}]}