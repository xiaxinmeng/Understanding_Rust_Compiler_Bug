{"sha": "960e49e89b3c09baf9197dc9c87f3ca7755a486c", "node_id": "C_kwDOAAsO6NoAKDk2MGU0OWU4OWIzYzA5YmFmOTE5N2RjOWM4N2YzY2E3NzU1YTQ4NmM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:41Z"}, "message": "Rollup merge of #88706 - ThePuzzlemaker:issue-88609, r=jackh726\n\nNormalize associated type projections when checking return type of main\n\nThis fixes #88609.\n\nPreviously, the return type of `fn main()` would not have any associated type projections within normalized before checking if it implements the standard library trait `std::process::Termination`. This commit appears to fix it.\n\nThis feels vaguely symptomatic of a problem in the underlying trait solving engine, but I am not sure how I would solve that. I am unsure why the example in #88609 with `assert_impl_termination` and `fn foo()` work, but simply `fn main()` doesn't. The way that I solved this is also probably not the best way to do this, so please let me know if there is a better way to do this.\n\nI have added a build-pass regression test for this issue.", "tree": {"sha": "7ce87a645176134704f0e0d989ea3e5b021357c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce87a645176134704f0e0d989ea3e5b021357c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/960e49e89b3c09baf9197dc9c87f3ca7755a486c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0JCRBK7hj4Ov3rIwAA4ewIAFG70dA72zBoNvWIFjbOkXhP\ncQddFC+1o9Zjbi3wKKMeoknvPkpaqRsEetz3/hQvRvGn+D8UkIdoaeWuKb6V/00o\nCrepw0X+q6YX48mpkYg0lj3fNLZTWOLWSMbp5tiyxN4kxo6GWcnLDm+SVlD0do2j\n8iipaexL1zBeJWBHjVvNr2eH0W5aB3me3I0s1YN/TGeL7p5gD67+vfyD0Kp5Wkbf\nclMUxfVyv+KgW8idTwfEMvzKIx3tUtWxpv3Jp3uzB5uXFN8EHhVabaWwYn3slUdc\nGUsGzKKLNtbXHnUYhw/vvgUJIedukzbXDnA2hE606q9adMbCfQjm5PUDWwsrCzo=\n=XNcP\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ce87a645176134704f0e0d989ea3e5b021357c5\nparent 25ec8273855fde2d72ae877b397e054de5300e10\nparent 33a28254f21c792cb0bda5427e66efa91b87dd4d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463561 -0700\ncommitter GitHub <noreply@github.com> 1633463561 -0700\n\nRollup merge of #88706 - ThePuzzlemaker:issue-88609, r=jackh726\n\nNormalize associated type projections when checking return type of main\n\nThis fixes #88609.\n\nPreviously, the return type of `fn main()` would not have any associated type projections within normalized before checking if it implements the standard library trait `std::process::Termination`. This commit appears to fix it.\n\nThis feels vaguely symptomatic of a problem in the underlying trait solving engine, but I am not sure how I would solve that. I am unsure why the example in #88609 with `assert_impl_termination` and `fn foo()` work, but simply `fn main()` doesn't. The way that I solved this is also probably not the best way to do this, so please let me know if there is a better way to do this.\n\nI have added a build-pass regression test for this issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/960e49e89b3c09baf9197dc9c87f3ca7755a486c", "html_url": "https://github.com/rust-lang/rust/commit/960e49e89b3c09baf9197dc9c87f3ca7755a486c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/960e49e89b3c09baf9197dc9c87f3ca7755a486c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ec8273855fde2d72ae877b397e054de5300e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ec8273855fde2d72ae877b397e054de5300e10", "html_url": "https://github.com/rust-lang/rust/commit/25ec8273855fde2d72ae877b397e054de5300e10"}, {"sha": "33a28254f21c792cb0bda5427e66efa91b87dd4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a28254f21c792cb0bda5427e66efa91b87dd4d", "html_url": "https://github.com/rust-lang/rust/commit/33a28254f21c792cb0bda5427e66efa91b87dd4d"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "65eedd2daafa8ebf50232b309b4e25394d375482", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/960e49e89b3c09baf9197dc9c87f3ca7755a486c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960e49e89b3c09baf9197dc9c87f3ca7755a486c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=960e49e89b3c09baf9197dc9c87f3ca7755a486c", "patch": "@@ -107,6 +107,7 @@ use rustc_middle::util;\n use rustc_session::config::EntryFnType;\n use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt as _,\n@@ -328,7 +329,26 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n                 ObligationCauseCode::MainFunctionType,\n             );\n             let mut fulfillment_cx = traits::FulfillmentContext::new();\n-            fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), return_ty, term_id, cause);\n+            // normalize any potential projections in the return type, then add\n+            // any possible obligations to the fulfillment context.\n+            // HACK(ThePuzzlemaker) this feels symptomatic of a problem within\n+            // checking trait fulfillment, not this here. I'm not sure why it\n+            // works in the example in `fn test()` given in #88609? This also\n+            // probably isn't the best way to do this.\n+            let InferOk { value: norm_return_ty, obligations } = infcx\n+                .partially_normalize_associated_types_in(\n+                    cause.clone(),\n+                    ty::ParamEnv::empty(),\n+                    return_ty,\n+                );\n+            fulfillment_cx.register_predicate_obligations(&infcx, obligations);\n+            fulfillment_cx.register_bound(\n+                &infcx,\n+                ty::ParamEnv::empty(),\n+                norm_return_ty,\n+                term_id,\n+                cause,\n+            );\n             if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                 infcx.report_fulfillment_errors(&err, None, false);\n                 error = true;"}, {"sha": "dc459c885fa70fd56a9b1fd5516f9e570594beef", "filename": "src/test/ui/typeck/issue-88609.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/960e49e89b3c09baf9197dc9c87f3ca7755a486c/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960e49e89b3c09baf9197dc9c87f3ca7755a486c/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs?ref=960e49e89b3c09baf9197dc9c87f3ca7755a486c", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #88609:\n+// The return type for `main` is not normalized while checking if it implements\n+// the trait `std::process::Termination`.\n+\n+// build-pass\n+\n+trait Same {\n+    type Output;\n+}\n+\n+impl<T> Same for T {\n+    type Output = T;\n+}\n+\n+type Unit = <() as Same>::Output;\n+\n+fn main() -> Result<Unit, std::io::Error> {\n+    unimplemented!()\n+}"}]}