{"sha": "e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTA0MGM3MDRhYTlhYjQ2ZmIxYzdhMTBlMjkzZmQ1ZjZiZmUwNzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-12T02:32:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-06T22:27:34Z"}, "message": "Make foreign calls work outside of tasks. #4451", "tree": {"sha": "48b2526c07bfbe119a995feb78781d653c67091f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b2526c07bfbe119a995feb78781d653c67091f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "html_url": "https://github.com/rust-lang/rust/commit/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "html_url": "https://github.com/rust-lang/rust/commit/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "db72a2277050e63b5a3f1f7ef61d68aa9d72c954", "filename": "mk/tests.mk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "patch": "@@ -746,9 +746,6 @@ $(3)/test/$$(FT_DRIVER)-$(2).out: \\\n \t--logfile tmp/$$(FT_DRIVER)-$(2).log\n \n check-fast-T-$(2)-H-$(3):     \t\t\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-rustc\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-core\t\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-std\t\t\\\n \t$(3)/test/$$(FT_DRIVER)-$(2).out\n \n endef"}, {"sha": "ea3961467558d7db30a315acef9e0876d142b8af", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "patch": "@@ -45,6 +45,8 @@ call_upcall_on_c_stack(rust_task *task, void *args, void *fn_ptr) {\n     task->call_on_c_stack(args, fn_ptr);\n }\n \n+typedef void (*CDECL stack_switch_shim)(void*);\n+\n /**********************************************************************\n  * Switches to the C-stack and invokes |fn_ptr|, passing |args| as argument.\n  * This is used by the C compiler to call foreign functions and by other\n@@ -54,13 +56,20 @@ call_upcall_on_c_stack(rust_task *task, void *args, void *fn_ptr) {\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n-    rust_task *task = rust_get_current_task();\n-\n-    try {\n-        task->call_on_c_stack(args, fn_ptr);\n-    } catch (...) {\n-        // Logging here is not reliable\n-        assert(false && \"Foreign code threw an exception\");\n+    rust_task *task = rust_try_get_current_task();\n+\n+    if (task) {\n+        // We're running in task context, do a stack switch\n+        try {\n+            task->call_on_c_stack(args, fn_ptr);\n+        } catch (...) {\n+            // Logging here is not reliable\n+            assert(false && \"Foreign code threw an exception\");\n+        }\n+    } else {\n+        // There's no task. Call the function and hope for the best\n+        stack_switch_shim f = (stack_switch_shim)fn_ptr;\n+        f(args);\n     }\n }\n \n@@ -70,15 +79,22 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n-    rust_task *task = rust_get_current_task();\n-\n-    try {\n-        task->call_on_rust_stack(args, fn_ptr);\n-    } catch (...) {\n-        // We can't count on being able to unwind through arbitrary\n-        // code. Our best option is to just fail hard.\n-        // Logging here is not reliable\n-        assert(false && \"Rust task failed after reentering the Rust stack\");\n+    rust_task *task = rust_try_get_current_task();\n+\n+    if (task) {\n+        try {\n+            task->call_on_rust_stack(args, fn_ptr);\n+        } catch (...) {\n+            // We can't count on being able to unwind through arbitrary\n+            // code. Our best option is to just fail hard.\n+            // Logging here is not reliable\n+            assert(false\n+                   && \"Rust task failed after reentering the Rust stack\");\n+        }\n+    } else {\n+        // There's no task. Call the function and hope for the best\n+        stack_switch_shim f = (stack_switch_shim)fn_ptr;\n+        f(args);\n     }\n }\n "}, {"sha": "865aa775362843993ba0fd26f350406b3197a593", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91040c704aa9ab46fb1c7a10e293fd5f6bfe079/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=e91040c704aa9ab46fb1c7a10e293fd5f6bfe079", "patch": "@@ -0,0 +1,24 @@\n+use core::private::run_in_bare_thread;\n+\n+extern {\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        do run_in_bare_thread() {\n+            unsafe {\n+                let i = &100;\n+                rust_dbg_call(callback, cast::transmute(i));\n+            }\n+        }\n+    }\n+}\n+\n+extern fn callback(data: libc::uintptr_t) {\n+    unsafe {\n+        let data: *int = cast::transmute(data);\n+        assert *data == 100;\n+    }\n+}\n\\ No newline at end of file"}]}