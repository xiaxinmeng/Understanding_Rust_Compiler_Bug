{"sha": "fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMzZjOGJjODBiNGQ4ZjA3MTMxN2FkYmIwNTMzN2M5YTBhMmRiYWU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-17T08:46:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "query_outlives_constraints_into_obligations", "tree": {"sha": "97b98e0d1bb89c6f48d8b13d0b395dcf4aa0a4e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b98e0d1bb89c6f48d8b13d0b395dcf4aa0a4e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "html_url": "https://github.com/rust-lang/rust/commit/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd30894c2f7113bf79c7f66d30a774f11b315d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd30894c2f7113bf79c7f66d30a774f11b315d3f", "html_url": "https://github.com/rust-lang/rust/commit/cd30894c2f7113bf79c7f66d30a774f11b315d3f"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "89add21a7cd3dd2d907df116f465e5fee8876fce", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "patch": "@@ -526,27 +526,31 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |constraint| {\n             let constraint = substitute_value(self.tcx, result_subst, constraint);\n-            let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n \n-            Obligation::new(\n-                cause.clone(),\n-                param_env,\n-                match k1.unpack() {\n-                    GenericArgKind::Lifetime(r1) => ty::PredicateKind::RegionOutlives(\n-                        ty::Binder::bind(ty::OutlivesPredicate(r1, r2)),\n-                    )\n-                    .to_predicate(self.tcx),\n-                    GenericArgKind::Type(t1) => ty::PredicateKind::TypeOutlives(ty::Binder::bind(\n-                        ty::OutlivesPredicate(t1, r2),\n-                    ))\n-                    .to_predicate(self.tcx),\n-                    GenericArgKind::Const(..) => {\n-                        // Consts cannot outlive one another, so we don't expect to\n-                        // ecounter this branch.\n-                        span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n-                    }\n-                },\n-            )\n+            let to_predicate = |ty::OutlivesPredicate(k1, r2): ty::OutlivesPredicate<\n+                GenericArg<'tcx>,\n+                ty::Region<'tcx>,\n+            >| match k1.unpack() {\n+                GenericArgKind::Lifetime(r1) => self.tcx.intern_predicate_kint(\n+                    ty::PredicateKint::RegionOutlives(ty::OutlivesPredicate(r1, r2)),\n+                ),\n+                GenericArgKind::Type(t1) => self.tcx.intern_predicate_kint(\n+                    ty::PredicateKint::TypeOutlives(ty::OutlivesPredicate(t1, r2)),\n+                ),\n+                GenericArgKind::Const(..) => {\n+                    // Consts cannot outlive one another, so we don't expect to\n+                    // ecounter this branch.\n+                    span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n+                }\n+            };\n+\n+            let predicate = if let Some(constraint) = constraint.no_bound_vars() {\n+                to_predicate(constraint).to_predicate(self.tcx)\n+            } else {\n+                ty::PredicateKint::ForAll(constraint.map_bound(to_predicate)).to_predicate(self.tcx)\n+            };\n+\n+            Obligation::new(cause.clone(), param_env, predicate)\n         })\n     }\n "}]}