{"sha": "409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc", "node_id": "C_kwDOAAsO6NoAKDQwOWUzZWIyY2JjN2ExOGUxYTllNmJjNjA3NzY2ZWYxOGNkNzlkZmM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:24:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:40:39Z"}, "message": "Remove unnecessary argument", "tree": {"sha": "32a48692d610c6cf7be21aae4b85e15aad56c139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a48692d610c6cf7be21aae4b85e15aad56c139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc", "html_url": "https://github.com/rust-lang/rust/commit/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70cc24254500f783ddd08e65e6abcf21e27c0c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/70cc24254500f783ddd08e65e6abcf21e27c0c27", "html_url": "https://github.com/rust-lang/rust/commit/70cc24254500f783ddd08e65e6abcf21e27c0c27"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "24e9ed338223b6c137d42a17f08f8895ea75dcb5", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=409e3eb2cbc7a18e1a9e6bc607766ef18cd79dfc", "patch": "@@ -74,13 +74,12 @@ macro intrinsic_match {\n }\n \n macro call_intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $substs:expr, $ret:expr, $args:expr, $(\n+    ($fx:expr, $intrinsic:expr, $ret:expr, $args:expr, $(\n         $name:ident($($arg:ident),*) -> $ty:ident => $func:ident,\n     )*) => {\n         match $intrinsic {\n             $(\n                 sym::$name => {\n-                    assert!($substs.is_noop());\n                     if let [$(ref $arg),*] = *$args {\n                         let ($($arg,)*) = (\n                             $(codegen_operand($fx, $arg),)*\n@@ -415,7 +414,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         self::simd::codegen_simd_intrinsic_call(fx, intrinsic, substs, args, ret, span);\n         let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n-    } else if codegen_float_intrinsic_call(fx, intrinsic, substs, args, ret) {\n+    } else if codegen_float_intrinsic_call(fx, intrinsic, args, ret) {\n         let ret_block = fx.get_block(destination.expect(\"Float intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n@@ -426,12 +425,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n fn codegen_float_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: Symbol,\n-    substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n ) -> bool {\n     call_intrinsic_match! {\n-        fx, intrinsic, substs, ret, args,\n+        fx, intrinsic, ret, args,\n         expf32(flt) -> f32 => expf,\n         expf64(flt) -> f64 => exp,\n         exp2f32(flt) -> f32 => exp2f,"}]}