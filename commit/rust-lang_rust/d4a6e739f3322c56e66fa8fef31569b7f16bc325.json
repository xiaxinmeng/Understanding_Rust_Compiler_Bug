{"sha": "d4a6e739f3322c56e66fa8fef31569b7f16bc325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YTZlNzM5ZjMzMjJjNTZlNjZmYThmZWYzMTU2OWI3ZjE2YmMzMjU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-11-09T14:12:09Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-11-27T08:24:13Z"}, "message": "Use sort_by_cached_key when key the function is not trivial/free", "tree": {"sha": "5a1ace9df168ef5c524346a492abb1ccb7d6561e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1ace9df168ef5c524346a492abb1ccb7d6561e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4a6e739f3322c56e66fa8fef31569b7f16bc325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a6e739f3322c56e66fa8fef31569b7f16bc325", "html_url": "https://github.com/rust-lang/rust/commit/d4a6e739f3322c56e66fa8fef31569b7f16bc325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4a6e739f3322c56e66fa8fef31569b7f16bc325/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45205f2ac18e926ec61f2672d16ec3b955de5652", "url": "https://api.github.com/repos/rust-lang/rust/commits/45205f2ac18e926ec61f2672d16ec3b955de5652", "html_url": "https://github.com/rust-lang/rust/commit/45205f2ac18e926ec61f2672d16ec3b955de5652"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "07054ee99af76fc9fc00ced43dee4da22b59997e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d4a6e739f3322c56e66fa8fef31569b7f16bc325", "patch": "@@ -1573,7 +1573,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .collect();\n \n         // ensure that we issue lints in a repeatable order\n-        def_ids.sort_by_key(|&def_id| self.tcx.def_path_hash(def_id));\n+        def_ids.sort_by_cached_key(|&def_id| self.tcx.def_path_hash(def_id));\n \n         for def_id in def_ids {\n             debug!("}, {"sha": "2909daf22b3bab0933676b4df20e8854174e87c2", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=d4a6e739f3322c56e66fa8fef31569b7f16bc325", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             .collect::<Vec<_>>();\n \n         // existential predicates need to be in a specific order\n-        associated_types.sort_by_key(|item| self.def_path_hash(item.def_id));\n+        associated_types.sort_by_cached_key(|item| self.def_path_hash(item.def_id));\n \n         let projection_predicates = associated_types.into_iter().map(|item| {\n             ty::ExistentialPredicate::Projection(ty::ExistentialProjection {"}, {"sha": "3a6ee6da42215b21c45f2b2f40a6c2ea245205e9", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a6e739f3322c56e66fa8fef31569b7f16bc325/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d4a6e739f3322c56e66fa8fef31569b7f16bc325", "patch": "@@ -985,7 +985,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n-                cgus.as_mut_slice().sort_by_key(|&(ref name, _)| name.clone());\n+                cgus.as_mut_slice().sort_by_cached_key(|&(ref name, _)| name.clone());\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push_str(\" \");"}]}