{"sha": "5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "node_id": "C_kwDOAAsO6NoAKDVhN2U0YzZiNWFhOGY0MmJkNTYzNjVmZWNmOTNjZDFiNmJmMWQyMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T21:52:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T21:52:34Z"}, "message": "Auto merge of #94298 - Urgau:rustbuild-check-cfg, r=Mark-Simulacrum\n\nEnable conditional compilation checking on the Rust codebase\n\nThis pull-request enable conditional compilation checking on every rust project build by the `bootstrap` tool.\n\nTo be more specific, this PR only enable well known names checking + extra names (bootstrap, parallel_compiler, ...).\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "6379ce30cbf8f053e3e3ea732fa039427284482d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6379ce30cbf8f053e3e3ea732fa039427284482d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "html_url": "https://github.com/rust-lang/rust/commit/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcbc32053d5084d1de79bd484de82474cdae427", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcbc32053d5084d1de79bd484de82474cdae427", "html_url": "https://github.com/rust-lang/rust/commit/9fcbc32053d5084d1de79bd484de82474cdae427"}, {"sha": "976fdb18c98864f13448a7d48402c5df7b51d711", "url": "https://api.github.com/repos/rust-lang/rust/commits/976fdb18c98864f13448a7d48402c5df7b51d711", "html_url": "https://github.com/rust-lang/rust/commit/976fdb18c98864f13448a7d48402c5df7b51d711"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "0ec32dc43070d23fd638a23ad6114036d4d63c2b", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "patch": "@@ -152,6 +152,3 @@ impl<I: Idx, K, V> std::ops::Index<I> for SortedIndexMultiMap<I, K, V> {\n         &self.items[idx].1\n     }\n }\n-\n-#[cfg(tests)]\n-mod tests;"}, {"sha": "9db5a9a288940df0d70f79d23d784946024f6bc3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "patch": "@@ -817,6 +817,7 @@ impl<T> MaybeUninit<T> {\n     /// ### Correct usage of this method:\n     ///\n     /// ```rust\n+    /// # #![allow(unexpected_cfgs)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// # unsafe extern \"C\" fn initialize_buffer(buf: *mut [u8; 1024]) { *buf = [0; 1024] }"}, {"sha": "f15baff59dbfb589b0dec2f68fd235b14822da03", "filename": "library/std/src/os/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "patch": "@@ -158,6 +158,7 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![allow(unexpected_cfgs)]\n     /// # #[cfg(for_demonstration_only)]\n     /// extern crate winapi;\n     /// # mod winapi { pub const FILE_FLAG_DELETE_ON_CLOSE: u32 = 0x04000000; }\n@@ -195,6 +196,7 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![allow(unexpected_cfgs)]\n     /// # #[cfg(for_demonstration_only)]\n     /// extern crate winapi;\n     /// # mod winapi { pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2; }\n@@ -236,6 +238,7 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![allow(unexpected_cfgs)]\n     /// # #[cfg(for_demonstration_only)]\n     /// extern crate winapi;\n     /// # mod winapi { pub const SECURITY_IDENTIFICATION: u32 = 0; }"}, {"sha": "00aebc21f581ad747908c07e01836320b5db7a06", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "patch": "@@ -26,6 +26,7 @@ use crate::run;\n use crate::test;\n use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n+use crate::EXTRA_CHECK_CFGS;\n use crate::{Build, CLang, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n@@ -1095,6 +1096,33 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zunstable-options\");\n         }\n \n+        // #[cfg(not(bootstrap)]\n+        if stage != 0 {\n+            // Enable cfg checking of cargo features\n+            // FIXME: De-comment this when cargo beta get support for it\n+            // cargo.arg(\"-Zcheck-cfg-features\");\n+\n+            // Enable cfg checking of rustc well-known names\n+            rustflags.arg(\"-Zunstable-options\").arg(\"--check-cfg=names()\");\n+\n+            // Add extra cfg not defined in rustc\n+            for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n+                if *restricted_mode == None || *restricted_mode == Some(mode) {\n+                    // Creating a string of the values by concatenating each value:\n+                    // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n+                    let values = match values {\n+                        Some(values) => values\n+                            .iter()\n+                            .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n+                            .flatten()\n+                            .collect::<String>(),\n+                        None => String::new(),\n+                    };\n+                    rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n+                }\n+            }\n+        }\n+\n         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,\n         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See\n         // #71458."}, {"sha": "4089a63f881d1b0a22567ed7bbbedd33c79b59e8", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "patch": "@@ -186,6 +186,34 @@ const LLVM_TOOLS: &[&str] = &[\n \n pub const VERSION: usize = 2;\n \n+/// Extra --check-cfg to add when building\n+/// (Mode restriction, config name, config values (if any))\n+const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)] = &[\n+    (None, \"bootstrap\", None),\n+    (Some(Mode::Rustc), \"parallel_compiler\", None),\n+    (Some(Mode::ToolRustc), \"parallel_compiler\", None),\n+    (Some(Mode::Std), \"miri\", None),\n+    (Some(Mode::Std), \"stdarch_intel_sde\", None),\n+    (Some(Mode::Std), \"no_fp_fmt_parse\", None),\n+    (Some(Mode::Std), \"no_global_oom_handling\", None),\n+    (Some(Mode::Std), \"freebsd12\", None),\n+    (Some(Mode::Std), \"backtrace_in_libstd\", None),\n+    // FIXME: Used by rustfmt is their test but is invalid (neither cargo nor bootstrap ever set\n+    // this config) should probably by removed or use a allow attribute.\n+    (Some(Mode::ToolRustc), \"release\", None),\n+    // FIXME: Used by stdarch in their test, should use a allow attribute instead.\n+    (Some(Mode::Std), \"dont_compile_me\", None),\n+    // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),\n+    (Some(Mode::ToolRustc), \"no_btreemap_remove_entry\", None),\n+    // FIXME: Used by crossbeam-utils, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"crossbeam_loom\", None),\n+    (Some(Mode::ToolRustc), \"crossbeam_loom\", None),\n+    // FIXME: Used by proc-macro2, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"span_locations\", None),\n+    (Some(Mode::ToolRustc), \"span_locations\", None),\n+];\n+\n /// A structure representing a Rust compiler.\n ///\n /// Each compiler has a `stage` that it is associated with and a `host` that"}]}