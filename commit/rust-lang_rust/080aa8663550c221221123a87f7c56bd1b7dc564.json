{"sha": "080aa8663550c221221123a87f7c56bd1b7dc564", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MGFhODY2MzU1MGMyMjEyMjExMjNhODdmN2M1NmJkMWI3ZGM1NjQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-05T13:06:51Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-05T13:06:51Z"}, "message": "lint: extern non-exhaustive types are improper\n\nThis commit makes the `improper_ctype` lint trigger for non-exhaustive\ntypes when those types aren't defined in the current crate.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "8a0ace26e416c44e3bd22c0aab22ae62bcc3699b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0ace26e416c44e3bd22c0aab22ae62bcc3699b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/080aa8663550c221221123a87f7c56bd1b7dc564", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl2YlboACgkQJZLnbIc4\nH9lAABAAmHqpVZvFgfYeflQaibZ4X9TquVbNBTMzliab3vEYMb1fDFdcgmf10m+V\nzUcSClRBfBbPmCLhUSuaiOpoQDS2l8rVRi4lDVBhpwrd5pTwcwtXYKQyHzHtgcDU\nwpxVUR/wSh2mrWOWcoRH3mDj5CoOAogeVoqxLQNOx9cx+8XDkX30cDwlaKvhMUGz\naiR2u3lxfTLpBUEXqKS1YvLCB78SpwKgSDbnn+8RTJHxrxM7HfGNnISnl1pvbcC3\nX8z2uOkQ5TB6SX/M/4W4YbgAHbT8LjrXtcFyhAzYrAF+gMouQQSNKBbplINIrEB6\nI/pWCzp8GQOJ0aeK6dfbdF1jayUboO9x2jt2neb8T7p7OJNXQYFnxyRsNqHHb4VF\nljR/PAIrHkTum96C8jLof1XBVgX1irXd548Z3pFjYE09e+3VpyUYph5/jff8klxi\nb8D9iXV8hVnkZo/as8QFbElKfhEEh4PZbFAIcHFr/QwOyDvitV/701qRaNoX1Wvt\ncNx9N9Vg+6VAyzHSuRNN6C6YCwc51dOc/Ag5+isNjQorY7qbKQ9EtmEVVw6w8k1T\nAutJWNgWj6WR6siNU51bKUx3TT9FpUGdEZLeU/bjXPPVDJFCWluuFHNvA9UZfQ4z\nLUkvS2E4VFSaSaTt1EW6J/qfif3SrEQyLEN99IK3O0m3qrpSA9M=\n=tnc6\n-----END PGP SIGNATURE-----", "payload": "tree 8a0ace26e416c44e3bd22c0aab22ae62bcc3699b\nparent 7870050796e5904a0fc85ecbe6fa6dde1cfe0c91\nauthor David Wood <david@davidtw.co> 1570280811 +0100\ncommitter David Wood <david@davidtw.co> 1570280811 +0100\n\nlint: extern non-exhaustive types are improper\n\nThis commit makes the `improper_ctype` lint trigger for non-exhaustive\ntypes when those types aren't defined in the current crate.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/080aa8663550c221221123a87f7c56bd1b7dc564", "html_url": "https://github.com/rust-lang/rust/commit/080aa8663550c221221123a87f7c56bd1b7dc564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/080aa8663550c221221123a87f7c56bd1b7dc564/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "aa6dfa50dddf3030267ec8325078545196ae0296", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=080aa8663550c221221123a87f7c56bd1b7dc564", "patch": "@@ -631,6 +631,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             };\n                         }\n \n+                        let is_non_exhaustive =\n+                            def.non_enum_variant().is_field_list_non_exhaustive();\n+                        if is_non_exhaustive && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this struct is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe {\n                                 ty,\n@@ -730,8 +740,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             }\n                         }\n \n+                        if def.is_variant_list_non_exhaustive() && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this enum is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         // Check the contained variants.\n                         for variant in &def.variants {\n+                            let is_non_exhaustive = variant.is_field_list_non_exhaustive();\n+                            if is_non_exhaustive && !variant.def_id.is_local() {\n+                                return FfiUnsafe {\n+                                    ty,\n+                                    reason: \"this enum has non-exhaustive variants\",\n+                                    help: None,\n+                                };\n+                            }\n+\n                             for field in &variant.fields {\n                                 let field_ty = cx.normalize_erasing_regions(\n                                     ParamEnv::reveal_all(),"}, {"sha": "1a187d042517e170255a29a1f89f4587bbee8640", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/auxiliary/types.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs?ref=080aa8663550c221221123a87f7c56bd1b7dc564", "patch": "@@ -0,0 +1,31 @@\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}"}, {"sha": "900b9333f76e8ffe9d7dd3dea9854f5da9d36468", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs?ref=080aa8663550c221221123a87f7c56bd1b7dc564", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:types.rs\n+#![deny(improper_ctypes)]\n+\n+extern crate types;\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` from an extern crate are considered\n+// improper.\n+\n+use types::{NonExhaustiveEnum, NormalStruct, UnitStruct, TupleStruct, NonExhaustiveVariants};\n+\n+extern {\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    //~^ ERROR `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+    //~^ ERROR `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    //~^ ERROR `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+}\n+\n+fn main() { }"}, {"sha": "7fbf1157e56f8bcc6a3d00eeaa8edd83a8bc344a", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr?ref=080aa8663550c221221123a87f7c56bd1b7dc564", "patch": "@@ -0,0 +1,47 @@\n+error: `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:12:35\n+   |\n+LL |     pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+   |                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: lint level defined here\n+  --> $DIR/extern_crate_improper.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this enum is non-exhaustive\n+\n+error: `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:14:44\n+   |\n+LL |     pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+   |                                            ^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:16:42\n+   |\n+LL |     pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+   |                                          ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:18:43\n+   |\n+LL |     pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+   |                                           ^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:20:38\n+   |\n+LL |     pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this enum has non-exhaustive variants\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "3f38e3cd8e5a7904cf38f1bcef0db9812223d5ca", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/same_crate_proper.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080aa8663550c221221123a87f7c56bd1b7dc564/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs?ref=080aa8663550c221221123a87f7c56bd1b7dc564", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+#![feature(non_exhaustive)]\n+#![deny(improper_ctypes)]\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` are considered proper within\n+// the defining crate.\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}\n+\n+extern {\n+    // Unit structs aren't tested here because they will trigger `improper_ctypes` anyway.\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+}\n+\n+fn main() { }"}]}