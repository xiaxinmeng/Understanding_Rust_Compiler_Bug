{"sha": "5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOGE0NDE5NmIzY2YwOTlmOGM5YjAxNTZiZDkwMmVhZWMwYjRlNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T08:15:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T08:15:17Z"}, "message": "Auto merge of #87242 - JohnTitor:rollup-t9rmwpo, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #86763 (Add a regression test for issue-63355)\n - #86814 (Recover from a misplaced inner doc comment)\n - #86843 (Check that const parameters of trait methods have compatible types)\n - #86889 (rustdoc: Cleanup ExternalCrate)\n - #87092 (Remove nondeterminism in multiple-definitions test)\n - #87170 (Add diagnostic items for Clippy)\n - #87183 (fix typo in compile_fail doctest)\n - #87205 (rustc_middle: remove redundant clone)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "44c6de9143298d107532d67ee58eff441f6ded1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c6de9143298d107532d67ee58eff441f6ded1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "html_url": "https://github.com/rust-lang/rust/commit/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab6b60337edeb49339d173853fee1f8569421e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab6b60337edeb49339d173853fee1f8569421e0", "html_url": "https://github.com/rust-lang/rust/commit/3ab6b60337edeb49339d173853fee1f8569421e0"}, {"sha": "810e47897aae7d19c7f0a58dc8ede07a4caae2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/810e47897aae7d19c7f0a58dc8ede07a4caae2a0", "html_url": "https://github.com/rust-lang/rust/commit/810e47897aae7d19c7f0a58dc8ede07a4caae2a0"}], "stats": {"total": 453, "additions": 352, "deletions": 101}, "files": [{"sha": "e32dae49131ab0487d7e0a704425f54ffc7cf6b0", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -221,9 +221,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             sess,\n             &codegen_results,\n             outputs,\n-        );\n-\n-        Ok(())\n+        )\n     }\n }\n "}, {"sha": "aa4db1622b233fcac03486718649d51e7aa5fc96", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -292,9 +292,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n-        link_binary::<LlvmArchiveBuilder<'_>>(sess, &codegen_results, outputs);\n-\n-        Ok(())\n+        link_binary::<LlvmArchiveBuilder<'_>>(sess, &codegen_results, outputs)\n     }\n }\n "}, {"sha": "773a1c500b2f6e324a2b32ac18a09df9935eaa9e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 49, "deletions": 65, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -1,9 +1,9 @@\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::Handler;\n+use rustc_errors::{ErrorReported, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::{DllCallingConvention, DllImport};\n+use rustc_middle::middle::cstore::DllImport;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n@@ -35,7 +35,6 @@ use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, Se\n use tempfile::Builder as TempFileBuilder;\n \n use std::ffi::OsString;\n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -54,7 +53,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n     outputs: &OutputFilenames,\n-) {\n+) -> Result<(), ErrorReported> {\n     let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types().iter() {\n@@ -95,11 +94,17 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             match crate_type {\n                 CrateType::Rlib => {\n                     let _timer = sess.timer(\"link_rlib\");\n-                    link_rlib::<B>(sess, codegen_results, RlibFlavor::Normal, &out_filename, &path)\n-                        .build();\n+                    link_rlib::<B>(\n+                        sess,\n+                        codegen_results,\n+                        RlibFlavor::Normal,\n+                        &out_filename,\n+                        &path,\n+                    )?\n+                    .build();\n                 }\n                 CrateType::Staticlib => {\n-                    link_staticlib::<B>(sess, codegen_results, &out_filename, &path);\n+                    link_staticlib::<B>(sess, codegen_results, &out_filename, &path)?;\n                 }\n                 _ => {\n                     link_natively::<B>(\n@@ -145,6 +150,8 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             }\n         }\n     });\n+\n+    Ok(())\n }\n \n pub fn each_linked_rlib(\n@@ -220,7 +227,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     flavor: RlibFlavor,\n     out_filename: &Path,\n     tmpdir: &MaybeTempDir,\n-) -> B {\n+) -> Result<B, ErrorReported> {\n     info!(\"preparing rlib to {:?}\", out_filename);\n     let mut ab = <B as ArchiveBuilder>::new(sess, out_filename, None);\n \n@@ -259,7 +266,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     for (raw_dylib_name, raw_dylib_imports) in\n-        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)\n+        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)?\n     {\n         ab.inject_dll_import_lib(&raw_dylib_name, &raw_dylib_imports, tmpdir);\n     }\n@@ -312,7 +319,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n             }\n         }\n     }\n-    return ab;\n+    return Ok(ab);\n \n     // For rlibs we \"pack\" rustc metadata into a dummy object file. When rustc\n     // creates a dylib crate type it will pass `--whole-archive` (or the\n@@ -454,65 +461,40 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n fn collate_raw_dylibs(\n     sess: &Session,\n     used_libraries: &[NativeLib],\n-) -> Vec<(String, Vec<DllImport>)> {\n-    let mut dylib_table: FxHashMap<String, FxHashSet<DllImport>> = FxHashMap::default();\n+) -> Result<Vec<(String, Vec<DllImport>)>, ErrorReported> {\n+    // Use index maps to preserve original order of imports and libraries.\n+    let mut dylib_table = FxIndexMap::<String, FxIndexMap<Symbol, &DllImport>>::default();\n \n     for lib in used_libraries {\n         if lib.kind == NativeLibKind::RawDylib {\n-            let name = lib.name.unwrap_or_else(||\n-                bug!(\"`link` attribute with kind = \\\"raw-dylib\\\" and no name should have caused error earlier\")\n-            );\n-            let name = if matches!(lib.verbatim, Some(true)) {\n-                name.to_string()\n-            } else {\n-                format!(\"{}.dll\", name)\n-            };\n-            dylib_table.entry(name).or_default().extend(lib.dll_imports.iter().cloned());\n-        }\n-    }\n-\n-    // Rustc already signals an error if we have two imports with the same name but different\n-    // calling conventions (or function signatures), so we don't have pay attention to those\n-    // when ordering.\n-    // FIXME: when we add support for ordinals, figure out if we need to do anything if we\n-    // have two DllImport values with the same name but different ordinals.\n-    let mut result: Vec<(String, Vec<DllImport>)> = dylib_table\n-        .into_iter()\n-        .map(|(lib_name, import_table)| {\n-            let mut imports = Vec::from_iter(import_table.into_iter());\n-            imports.sort_unstable_by_key(|x: &DllImport| x.name.as_str());\n-            (lib_name, imports)\n-        })\n-        .collect::<Vec<_>>();\n-    result.sort_unstable_by(|a: &(String, Vec<DllImport>), b: &(String, Vec<DllImport>)| {\n-        a.0.cmp(&b.0)\n-    });\n-    let result = result;\n-\n-    // Check for multiple imports with the same name but different calling conventions or\n-    // (when relevant) argument list sizes.  Rustc only signals an error for this if the\n-    // declarations are at the same scope level; if one shadows the other, we only get a lint\n-    // warning.\n-    for (library, imports) in &result {\n-        let mut import_table: FxHashMap<Symbol, DllCallingConvention> = FxHashMap::default();\n-        for import in imports {\n-            if let Some(old_convention) =\n-                import_table.insert(import.name, import.calling_convention)\n-            {\n-                if import.calling_convention != old_convention {\n-                    sess.span_fatal(\n-                        import.span,\n-                        &format!(\n-                            \"multiple definitions of external function `{}` from library `{}` have different calling conventions\",\n-                            import.name,\n-                            library,\n-                    ));\n+            let ext = if matches!(lib.verbatim, Some(true)) { \"\" } else { \".dll\" };\n+            let name = format!(\"{}{}\", lib.name.expect(\"unnamed raw-dylib library\"), ext);\n+            let imports = dylib_table.entry(name.clone()).or_default();\n+            for import in &lib.dll_imports {\n+                if let Some(old_import) = imports.insert(import.name, import) {\n+                    // FIXME: when we add support for ordinals, figure out if we need to do anything\n+                    // if we have two DllImport values with the same name but different ordinals.\n+                    if import.calling_convention != old_import.calling_convention {\n+                        sess.span_err(\n+                            import.span,\n+                            &format!(\n+                                \"multiple declarations of external function `{}` from \\\n+                                 library `{}` have different calling conventions\",\n+                                import.name, name,\n+                            ),\n+                        );\n+                    }\n                 }\n             }\n         }\n     }\n-\n-    result\n+    sess.compile_status()?;\n+    Ok(dylib_table\n+        .into_iter()\n+        .map(|(name, imports)| {\n+            (name, imports.into_iter().map(|(_, import)| import.clone()).collect())\n+        })\n+        .collect())\n }\n \n /// Create a static archive.\n@@ -531,9 +513,9 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     out_filename: &Path,\n     tempdir: &MaybeTempDir,\n-) {\n+) -> Result<(), ErrorReported> {\n     let mut ab =\n-        link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir);\n+        link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir)?;\n     let mut all_native_libs = vec![];\n \n     let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n@@ -581,6 +563,8 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n             print_native_static_libs(sess, &all_native_libs);\n         }\n     }\n+\n+    Ok(())\n }\n \n fn escape_stdout_stderr_string(s: &[u8]) -> String {"}, {"sha": "a4913a32e81efbc7cdfa5276fff142f6e3249df2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -1581,7 +1581,7 @@ impl EncodeContext<'a, 'tcx> {\n     fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {\n         empty_proc_macro!(self);\n         let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);\n-        self.lazy(used_libraries.iter().cloned())\n+        self.lazy(used_libraries.iter())\n     }\n \n     fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {"}, {"sha": "8150e67929509e3f4df6d2a26758786069e59a95", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -64,7 +64,7 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Debug, Encodable, Decodable, HashStable)]\n pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n@@ -75,7 +75,7 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n+#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n pub struct DllImport {\n     pub name: Symbol,\n     pub ordinal: Option<u16>,\n@@ -92,7 +92,7 @@ pub struct DllImport {\n ///\n /// The usize value, where present, indicates the size of the function's argument list\n /// in bytes.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n+#[derive(Clone, PartialEq, Debug, Encodable, Decodable, HashStable)]\n pub enum DllCallingConvention {\n     C,\n     Stdcall(usize),"}, {"sha": "6b51adc6aafddab3e759ac577025e7b057d7dd67", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -281,11 +281,10 @@ pub struct CaptureInfo<'tcx> {\n }\n \n pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n-    let name = match place.base {\n+    let mut curr_string: String = match place.base {\n         HirPlaceBase::Upvar(upvar_id) => tcx.hir().name(upvar_id.var_path.hir_id).to_string(),\n         _ => bug!(\"Capture_information should only contain upvars\"),\n     };\n-    let mut curr_string = name;\n \n     for (i, proj) in place.projections.iter().enumerate() {\n         match proj.kind {\n@@ -314,7 +313,7 @@ pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) ->\n         }\n     }\n \n-    curr_string.to_string()\n+    curr_string\n }\n \n #[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, TypeFoldable, Copy, HashStable)]"}, {"sha": "e9f0038b2d65dc9d09b763c3ae596d4fb8212e6d", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -64,7 +64,14 @@ impl<'a> Parser<'a> {\n                 }\n                 self.bump();\n                 just_parsed_doc_comment = true;\n-                Some(attr::mk_doc_comment(comment_kind, attr_style, data, self.prev_token.span))\n+                // Always make an outer attribute - this allows us to recover from a misplaced\n+                // inner attribute.\n+                Some(attr::mk_doc_comment(\n+                    comment_kind,\n+                    ast::AttrStyle::Outer,\n+                    data,\n+                    self.prev_token.span,\n+                ))\n             } else {\n                 None\n             };"}, {"sha": "a8f969782b22daeb45d5253b27fa05eff65138b1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -122,10 +122,14 @@ symbols! {\n     // nice to have.\n     Symbols {\n         Alignment,\n+        Any,\n         Arc,\n         Argument,\n         ArgumentV1,\n         Arguments,\n+        AsMut,\n+        AsRef,\n+        BTreeEntry,\n         BTreeMap,\n         BTreeSet,\n         BinaryHeap,\n@@ -139,19 +143,25 @@ symbols! {\n         Continue,\n         Copy,\n         Count,\n+        Cow,\n         Debug,\n         DebugStruct,\n         DebugTuple,\n         Decodable,\n         Decoder,\n         Default,\n         Deref,\n+        DirBuilder,\n+        DoubleEndedIterator,\n+        Duration,\n         Encodable,\n         Encoder,\n         Eq,\n         Equal,\n         Err,\n         Error,\n+        File,\n+        FileType,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -162,11 +172,14 @@ symbols! {\n         GlobalAlloc,\n         Hash,\n         HashMap,\n+        HashMapEntry,\n         HashSet,\n         Hasher,\n         Implied,\n         Input,\n         IntoIterator,\n+        IoRead,\n+        IoWrite,\n         Is,\n         ItemContext,\n         Iterator,\n@@ -369,6 +382,8 @@ symbols! {\n         closure,\n         closure_to_fn_coercion,\n         cmp,\n+        cmp_max,\n+        cmp_min,\n         cmpxchg16b_target_feature,\n         cmse_nonsecure_entry,\n         coerce_unsized,\n@@ -674,6 +689,7 @@ symbols! {\n         item,\n         item_like_imports,\n         iter,\n+        iter_repeat,\n         keyword,\n         kind,\n         kreg,\n@@ -740,6 +756,12 @@ symbols! {\n         maybe_uninit,\n         maybe_uninit_uninit,\n         maybe_uninit_zeroed,\n+        mem_discriminant,\n+        mem_drop,\n+        mem_forget,\n+        mem_replace,\n+        mem_size_of,\n+        mem_size_of_val,\n         mem_uninitialized,\n         mem_zeroed,\n         member_constraints,"}, {"sha": "d35868881558e31fafdbe338658060340af6035d", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -66,6 +66,10 @@ crate fn compare_impl_method<'tcx>(\n     {\n         return;\n     }\n+\n+    if let Err(ErrorReported) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n+        return;\n+    }\n }\n \n fn compare_predicate_entailment<'tcx>(\n@@ -929,6 +933,68 @@ fn compare_synthetic_generics<'tcx>(\n     if error_found { Err(ErrorReported) } else { Ok(()) }\n }\n \n+fn compare_const_param_types<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_m: &ty::AssocItem,\n+    trait_m: &ty::AssocItem,\n+    trait_item_span: Option<Span>,\n+) -> Result<(), ErrorReported> {\n+    let const_params_of = |def_id| {\n+        tcx.generics_of(def_id).params.iter().filter_map(|param| match param.kind {\n+            GenericParamDefKind::Const { .. } => Some(param.def_id),\n+            _ => None,\n+        })\n+    };\n+    let const_params_impl = const_params_of(impl_m.def_id);\n+    let const_params_trait = const_params_of(trait_m.def_id);\n+\n+    for (const_param_impl, const_param_trait) in iter::zip(const_params_impl, const_params_trait) {\n+        let impl_ty = tcx.type_of(const_param_impl);\n+        let trait_ty = tcx.type_of(const_param_trait);\n+        if impl_ty != trait_ty {\n+            let (impl_span, impl_ident) = match tcx.hir().get_if_local(const_param_impl) {\n+                Some(hir::Node::GenericParam(hir::GenericParam { span, name, .. })) => (\n+                    span,\n+                    match name {\n+                        hir::ParamName::Plain(ident) => Some(ident),\n+                        _ => None,\n+                    },\n+                ),\n+                other => bug!(\n+                    \"expected GenericParam, found {:?}\",\n+                    other.map_or_else(|| \"nothing\".to_string(), |n| format!(\"{:?}\", n))\n+                ),\n+            };\n+            let trait_span = match tcx.hir().get_if_local(const_param_trait) {\n+                Some(hir::Node::GenericParam(hir::GenericParam { span, .. })) => Some(span),\n+                _ => None,\n+            };\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                *impl_span,\n+                E0053,\n+                \"method `{}` has an incompatible const parameter type for trait\",\n+                trait_m.ident\n+            );\n+            err.span_note(\n+                trait_span.map_or_else(|| trait_item_span.unwrap_or(*impl_span), |span| *span),\n+                &format!(\n+                    \"the const parameter{} has type `{}`, but the declaration \\\n+                              in trait `{}` has type `{}`\",\n+                    &impl_ident.map_or_else(|| \"\".to_string(), |ident| format!(\" `{}`\", ident)),\n+                    impl_ty,\n+                    tcx.def_path_str(trait_m.def_id),\n+                    trait_ty\n+                ),\n+            );\n+            err.emit();\n+            return Err(ErrorReported);\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n crate fn compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_c: &ty::AssocItem,"}, {"sha": "482a497201de6d54fba41e8ce4876110ce80df0c", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -177,6 +177,7 @@ where\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Cow\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n where\n     B: ToOwned,"}, {"sha": "5fec8dc2d13343a6b45730474d1105b83cd1ce3f", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -14,6 +14,7 @@ use Entry::*;\n ///\n /// [`entry`]: BTreeMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "19652106b3d01325f5f9f9266b7932447e594cd1", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -108,6 +108,7 @@ use crate::intrinsics;\n // unsafe traits and unsafe methods (i.e., `type_id` would still be safe to call,\n // but we would likely want to indicate as such in documentation).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Any\")]\n pub trait Any: 'static {\n     /// Gets the `TypeId` of `self`.\n     ///"}, {"sha": "79610bb409d37c06b383ea7622452560b179ebf6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -1104,6 +1104,7 @@ pub macro PartialOrd($item:item) {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_min\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n@@ -1166,6 +1167,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_max\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n }"}, {"sha": "1e512af48051ed9dc7c5627ed29aef8b0906506f", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -152,6 +152,7 @@ pub const fn identity<T>(x: T) -> T {\n /// is_hello(s);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -193,6 +194,7 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "733142ed01103ce3e41806d56fecf1561a03d00a", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -51,6 +51,7 @@ use crate::iter::{FusedIterator, TrustedLen};\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"iter_repeat\")]\n pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n     Repeat { element: elt }\n }"}, {"sha": "9a9cf20077096d4e50cc70664d89de32fa960aed", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -36,6 +36,7 @@ use crate::ops::{ControlFlow, Try};\n /// assert_eq!(None, iter.next_back());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///"}, {"sha": "2c75de39ffa2fc3644cdf479786903e046788f7a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -140,6 +140,7 @@ pub use crate::intrinsics::transmute;\n #[inline]\n #[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_forget\")]\n pub const fn forget<T>(t: T) {\n     let _ = ManuallyDrop::new(t);\n }\n@@ -298,6 +299,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of\")]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -324,6 +326,7 @@ pub const fn size_of<T>() -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of_val\")]\n pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n     // SAFETY: `val` is a reference, so it's a valid raw pointer\n     unsafe { intrinsics::size_of_val(val) }\n@@ -814,6 +817,7 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n #[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_replace\")]\n pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n@@ -888,6 +892,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// [`RefCell`]: crate::cell::RefCell\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_drop\")]\n pub fn drop<T>(_x: T) {}\n \n /// Interprets `src` as having type `&U`, and then reads `src` without moving\n@@ -1015,6 +1020,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]\n pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v))\n }"}, {"sha": "c27db0767ac9d9cb90f48374c0455c8efb965707", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -356,7 +356,7 @@\n //! // must have the same concrete type.\n //! fn make_iter(do_insert: bool) -> impl Iterator<Item = i32> {\n //!     // Explicit returns to illustrate return types not matching\n-//!     match x {\n+//!     match do_insert {\n //!         true => return (0..4).chain(once(42)).chain(4..8),\n //!         false => return (0..4).chain(empty()).chain(4..8),\n //!     }"}, {"sha": "2d8a1cb1ab01639757cc0efc20ed062da46cdb7c", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -61,6 +61,7 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n /// crate to do so.\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Duration\")]\n pub struct Duration {\n     secs: u64,\n     nanos: u32, // Always 0 <= nanos < NANOS_PER_SEC"}, {"sha": "fac285c96f00d3f4e2212d7976ce5181933b23df", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -1829,6 +1829,7 @@ impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n ///\n /// [`entry`]: HashMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"HashMapEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "bbe1ab40537f220b8c821a8211a6edce9b632a87", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -88,6 +88,7 @@ use crate::time::SystemTime;\n /// [`BufReader<R>`]: io::BufReader\n /// [`sync_all`]: File::sync_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"File\")]\n pub struct File {\n     inner: fs_imp::File,\n }\n@@ -183,12 +184,14 @@ pub struct Permissions(fs_imp::FilePermissions);\n /// It is returned by [`Metadata::file_type`] method.\n #[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"FileType\")]\n pub struct FileType(fs_imp::FileType);\n \n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DirBuilder\")]\n #[derive(Debug)]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,"}, {"sha": "cc615b95f8625eec22a447b9b35033ce565304e9", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -514,6 +514,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// [`File`]: crate::fs::File\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoRead\")]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -1361,6 +1362,7 @@ impl Initializer {\n /// [`write_all`]: Write::write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoWrite\")]\n pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///"}, {"sha": "1a2852dc6c724e4aa662f73eb2929793d3147e76", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -14,7 +14,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n@@ -85,12 +85,6 @@ impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n     }\n }\n \n-impl Clean<ExternalCrate> for CrateNum {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> ExternalCrate {\n-        ExternalCrate { crate_num: *self }\n-    }\n-}\n-\n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let mut items: Vec<Item> = vec![];"}, {"sha": "2fd2d14bcabc3ec25a6ace935a70a58246cb57aa", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -118,7 +118,7 @@ crate struct Crate {\n     crate name: Symbol,\n     crate src: FileName,\n     crate module: Item,\n-    crate externs: Vec<(CrateNum, ExternalCrate)>,\n+    crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n@@ -133,14 +133,14 @@ crate struct TraitWithExtraInfo {\n     crate is_notable: bool,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug)]\n crate struct ExternalCrate {\n     crate crate_num: CrateNum,\n }\n \n impl ExternalCrate {\n     #[inline]\n-    fn def_id(&self) -> DefId {\n+    crate fn def_id(&self) -> DefId {\n         DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n     }\n "}, {"sha": "bdd5350aab2cb1571f81bf8ed1e8c8bcecf21e9a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -1,9 +1,9 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    Visibility,\n+    inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n+    ItemKind, Lifetime, Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type,\n+    TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -35,11 +35,11 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates(()).iter() {\n-        externs.push((cnum, cnum.clean(cx)));\n+        externs.push(ExternalCrate { crate_num: cnum });\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n-    externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n+    externs.sort_unstable_by_key(|e| e.crate_num);\n \n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n@@ -61,7 +61,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         _ => unreachable!(),\n     }\n \n-    let local_crate = LOCAL_CRATE.clean(cx);\n+    let local_crate = ExternalCrate { crate_num: LOCAL_CRATE };\n     let src = local_crate.src(cx.tcx);\n     let name = local_crate.name(cx.tcx);\n     let primitives = local_crate.primitives(cx.tcx);"}, {"sha": "5ea2cdc2ad9093a239b8615303e409af1b828a72", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -151,19 +151,18 @@ impl Cache {\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for &(n, ref e) in &krate.externs {\n+        for &e in &krate.externs {\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            self.extern_locations.insert(n, e.location(extern_url, &dst, tcx));\n-            self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n+            self.extern_locations.insert(e.crate_num, e.location(extern_url, &dst, tcx));\n+            self.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }\n \n         // Cache where all known primitives have their documentation located.\n         //\n         // Favor linking to as local extern as possible, so iterate all crates in\n         // reverse topological order.\n-        for &(_, ref e) in krate.externs.iter().rev() {\n+        for &e in krate.externs.iter().rev() {\n             for &(def_id, prim) in &e.primitives(tcx) {\n                 self.primitive_locations.insert(prim, def_id);\n             }"}, {"sha": "04650403c6bafe70b6b1c7c8be14ff44555d36c7", "filename": "src/test/ui/const-generics/issue-86820.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for the ICE described in #86820.\n+\n+#![allow(unused,dead_code)]\n+use std::ops::BitAnd;\n+\n+const C: fn() = || is_set();\n+fn is_set() {\n+    0xffu8.bit::<0>();\n+}\n+\n+trait Bits {\n+    fn bit<const I : u8>(self) -> bool;\n+    //~^ NOTE: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+}\n+\n+impl Bits for u8 {\n+    fn bit<const I : usize>(self) -> bool {\n+    //~^ ERROR: method `bit` has an incompatible const parameter type for trait [E0053]\n+        let i = 1 << I;\n+        let mask = u8::from(i);\n+        mask & self == mask\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f4396f2f2b0a27599d09e23e60b012529c285b77", "filename": "src/test/ui/const-generics/issue-86820.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,15 @@\n+error[E0053]: method `bit` has an incompatible const parameter type for trait\n+  --> $DIR/issue-86820.rs:17:18\n+   |\n+LL |     fn bit<const I : usize>(self) -> bool {\n+   |                  ^\n+   |\n+note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+  --> $DIR/issue-86820.rs:12:18\n+   |\n+LL |     fn bit<const I : u8>(self) -> bool;\n+   |                  ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "8be1ae77738e9cdc2d8dc6703c021e728fe8f38d", "filename": "src/test/ui/proc-macro/issue-86781-bad-inner-doc.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+//! Inner doc comment\n+//~^ ERROR expected outer doc comment\n+#[derive(Empty)]\n+pub struct Foo;\n+\n+fn main() {}"}, {"sha": "0b2e612ee5bb96b18803c75d4855aa77002da3d6", "filename": "src/test/ui/proc-macro/issue-86781-bad-inner-doc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,11 @@\n+error[E0753]: expected outer doc comment\n+  --> $DIR/issue-86781-bad-inner-doc.rs:6:1\n+   |\n+LL | //! Inner doc comment\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0753`."}, {"sha": "d02bebc9d61d26a87d895d88743b7f2046a52613", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,19 @@\n+// only-i686-pc-windows-msvc\n+// compile-flags: --crate-type lib --emit link\n+#![allow(clashing_extern_declarations)]\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    fn f(x: i32);\n+}\n+\n+pub fn lib_main() {\n+    #[link(name = \"foo\", kind = \"raw-dylib\")]\n+    extern \"stdcall\" {\n+        fn f(x: i32);\n+        //~^ ERROR multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n+    }\n+\n+    unsafe { f(42); }\n+}"}, {"sha": "a9cfd6b23f9f8d8df177d128e41c89b089c084ad", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multiple-declarations.rs:4:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n+  --> $DIR/multiple-declarations.rs:14:9\n+   |\n+LL |         fn f(x: i32);\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "8762d189c73891237009db88e35d9d96b571d309", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,50 @@\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {}\n+\n+pub trait Bar {\n+    type Foo: Foo;\n+\n+    fn foo() -> Self::Foo;\n+}\n+\n+pub trait Baz {\n+    type Foo: Foo;\n+    type Bar: Bar<Foo = Self::Foo>;\n+\n+    fn foo() -> Self::Foo;\n+    fn bar() -> Self::Bar;\n+}\n+\n+impl Foo for () {}\n+\n+impl Bar for () {\n+    type Foo = FooImpl;\n+\n+    fn foo() -> Self::Foo {\n+        ()\n+    }\n+}\n+\n+// FIXME(#86731): The below is illegal use of `min_type_alias_impl_trait`\n+// but the compiler doesn't report it, we should fix it.\n+pub type FooImpl = impl Foo;\n+pub type BarImpl = impl Bar<Foo = FooImpl>;\n+//~^ ERROR: type mismatch resolving `<() as Bar>::Foo == ()`\n+\n+impl Baz for () {\n+    type Foo = FooImpl;\n+    type Bar = BarImpl;\n+\n+    fn foo() -> Self::Foo {\n+        ()\n+    }\n+\n+    fn bar() -> Self::Bar {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dc5370a2666b76f4119fd355ee373fa933d43f54", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr?ref=5a8a44196b3cf099f8c9b0156bd902eaec0b4e5f", "patch": "@@ -0,0 +1,14 @@\n+error[E0271]: type mismatch resolving `<() as Bar>::Foo == ()`\n+  --> $DIR/issue-63355.rs:34:20\n+   |\n+LL | pub type FooImpl = impl Foo;\n+   |                    -------- the found opaque type\n+LL | pub type BarImpl = impl Bar<Foo = FooImpl>;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}