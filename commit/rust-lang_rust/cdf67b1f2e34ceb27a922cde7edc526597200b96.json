{"sha": "cdf67b1f2e34ceb27a922cde7edc526597200b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZjY3YjFmMmUzNGNlYjI3YTkyMmNkZTdlZGM1MjY1OTcyMDBiOTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T01:09:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T01:09:49Z"}, "message": "Better backpointer logic.", "tree": {"sha": "828af70a52db9bd6e902010b408e18b862064023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828af70a52db9bd6e902010b408e18b862064023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdf67b1f2e34ceb27a922cde7edc526597200b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf67b1f2e34ceb27a922cde7edc526597200b96", "html_url": "https://github.com/rust-lang/rust/commit/cdf67b1f2e34ceb27a922cde7edc526597200b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdf67b1f2e34ceb27a922cde7edc526597200b96/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246e72b0fbb838ae566fbfda4b023912de86a2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/246e72b0fbb838ae566fbfda4b023912de86a2f2", "html_url": "https://github.com/rust-lang/rust/commit/246e72b0fbb838ae566fbfda4b023912de86a2f2"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "0888f8e8c6e175d534e5ebe967e1866d82ee96f7", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=cdf67b1f2e34ceb27a922cde7edc526597200b96", "patch": "@@ -903,9 +903,20 @@ let get_element_ptr\n         (string_of_cell fmt mem_cell)\n ;;\n \n-let ptr_cast (cell:cell) (rty:referent_ty) : cell =\n+let cell_cast (cell:cell) (rty:referent_ty) : cell =\n   match cell with\n       Mem (mem, _) -> Mem (mem, rty)\n+    | Reg (reg, _) ->\n+        begin\n+          match rty with\n+              ScalarTy st -> Reg (reg, st)\n+            | _ -> bug () \"expected scalar type in Il.cell_cast on register\"\n+        end\n+\n+\n+let ptr_cast (cell:cell) (rty:referent_ty) : cell =\n+  match cell with\n+      Mem (mem, ScalarTy (AddrTy _)) -> Mem (mem, ScalarTy (AddrTy rty))\n     | Reg (reg, AddrTy _) -> Reg (reg, AddrTy rty)\n     | _ -> bug () \"expected address cell in Il.ptr_cast\"\n ;;"}, {"sha": "468d1ab1b5bb47beae745703b4458053fbef02ef", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=cdf67b1f2e34ceb27a922cde7edc526597200b96", "patch": "@@ -1078,17 +1078,17 @@ let rec calculate_sz\n \n       mov (rc eax) (Il.Cell closure_ptr);\n       let obj_body = word_n (h eax) Abi.box_rc_field_body in\n-      let obj_body = Il.ptr_cast obj_body obj_box_rty in\n+      let obj_body = Il.cell_cast obj_body obj_box_rty in\n       let tydesc_ptr = get_element_ptr obj_body Abi.obj_body_elt_tydesc in\n \n         mov (rc eax) (Il.Cell tydesc_ptr);\n-        let tydesc = Il.ptr_cast (word_at (h eax)) tydesc_rty in\n+        let tydesc = Il.cell_cast (word_at (h eax)) tydesc_rty in\n         let ty_params_ptr =\n           get_element_ptr tydesc Abi.tydesc_field_first_param\n         in\n \n           mov (rc eax) (Il.Cell ty_params_ptr);\n-          let ty_params = Il.ptr_cast (word_at (h eax)) ty_params_rty in\n+          let ty_params = Il.cell_cast (word_at (h eax)) ty_params_rty in\n             get_element_ptr ty_params i\n   in\n "}, {"sha": "275245733792e206cd30050bd9661bea3abbb854", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=cdf67b1f2e34ceb27a922cde7edc526597200b96", "patch": "@@ -2142,27 +2142,33 @@ and vec_sty (word_bits:Il.bits) : Il.scalar_ty =\n   let ptr = Il.ScalarTy (Il.AddrTy Il.OpaqueTy) in\n     Il.AddrTy (Il.StructTy [| word; word; word; ptr |])\n \n-and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n+and referent_type\n+    ?parent_tags:parent_tags\n+    ?boxed:(boxed=false)\n+    (cx:ctxt)\n+    (t:Ast.ty)\n+    : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let v b = Il.ValTy b in\n   let p t = Il.AddrTy t in\n   let sv b = s (v b) in\n   let sp t = s (p t) in\n+  let recur ty = referent_type ?parent_tags ~boxed cx ty in\n \n   let word_bits = cx.ctxt_abi.Abi.abi_word_bits in\n   let word = word_rty word_bits in\n   let ptr = sp Il.OpaqueTy in\n   let rc_ptr = sp (Il.StructTy [| word; Il.OpaqueTy |]) in\n-  let tup ttup = Il.StructTy (Array.map (referent_type cx) ttup) in\n+  let tup ttup = Il.StructTy (Array.map recur ttup) in\n   let tag ttag =\n     let n = get_n_tag_tups cx ttag in\n     let union =\n-      let rty t =\n-        match t with\n-            Ast.TY_box (Ast.TY_tag dst_tag) when is_back_edge ttag dst_tag ->\n-              sp (Il.StructTy [| word; Il.OpaqueTy |])\n-          | _ -> referent_type cx t\n+      let parent_tags =\n+        match parent_tags with\n+            None -> [ttag]\n+          | Some pts -> ttag::pts\n       in\n+      let rty t = referent_type ~parent_tags ~boxed cx t in\n       let tup ttup = Il.StructTy (Array.map rty ttup) in\n         Array.init n (fun i -> tup (get_nth_tag_tup cx ttag i))\n     in\n@@ -2202,7 +2208,17 @@ and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n       | Ast.TY_fn _ -> fn_rty cx false\n       | Ast.TY_obj _ -> obj_rty word_bits\n \n-      | Ast.TY_tag ttag -> tag ttag\n+      | Ast.TY_tag ttag ->\n+          begin\n+            match parent_tags with\n+                Some parent_tags\n+                  when boxed\n+                    && parent_tags <> []\n+                    && List.mem ttag parent_tags\n+                    && is_back_edge ttag (List.hd parent_tags) ->\n+                  Il.StructTy [| word; Il.OpaqueTy |]\n+              | _ -> tag ttag\n+          end\n \n       | Ast.TY_chan _\n       | Ast.TY_port _\n@@ -2213,14 +2229,15 @@ and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n       | Ast.TY_native _ -> ptr\n \n       | Ast.TY_box t ->\n-          sp (Il.StructTy [| word; referent_type cx t |])\n+          sp (Il.StructTy\n+            [| word; referent_type ?parent_tags ~boxed:true cx t |])\n \n-      | Ast.TY_mutable t -> referent_type cx t\n+      | Ast.TY_mutable t -> recur t\n \n       | Ast.TY_param (i, _) -> Il.ParamTy i\n \n       | Ast.TY_named _ -> bug () \"named type in referent_type\"\n-      | Ast.TY_constrained (t, _) -> referent_type cx t\n+      | Ast.TY_constrained (t, _) -> recur t\n \n and slot_referent_type (cx:ctxt) (sl:Ast.slot) : Il.referent_ty =\n   let s t = Il.ScalarTy t in"}, {"sha": "bb0d28a97c2b6d6a0f05e8c77305b56cc0da9b39", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cdf67b1f2e34ceb27a922cde7edc526597200b96/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=cdf67b1f2e34ceb27a922cde7edc526597200b96", "patch": "@@ -337,6 +337,8 @@ let trans_visitor\n \n   let rec ptr_cast = Il.ptr_cast\n \n+  and cell_cast = Il.cell_cast\n+\n   and curr_crate_ptr _ : Il.cell =\n     word_at (fp_imm frame_crate_ptr)\n \n@@ -465,7 +467,7 @@ let trans_visitor\n     let indirect_args =\n       get_element_ptr args_cell Abi.calltup_elt_indirect_args\n     in\n-      deref (ptr_cast\n+      deref (cell_cast\n                (get_element_ptr indirect_args Abi.indirect_args_elt_closure)\n                (Il.ScalarTy (Il.AddrTy (obj_box_rty word_bits))))\n   in\n@@ -508,7 +510,7 @@ let trans_visitor\n               get_element_ptr (deref tydesc) Abi.tydesc_field_first_param\n             in\n             let ty_params =\n-              ptr_cast ty_params (Il.ScalarTy (Il.AddrTy ty_params_rty))\n+              cell_cast ty_params (Il.ScalarTy (Il.AddrTy ty_params_rty))\n             in\n               deref ty_params\n           else\n@@ -550,7 +552,7 @@ let trans_visitor\n     let blk_fn = get_element_ptr self_iterator_args\n       Abi.iterator_args_elt_block_fn\n     in\n-      ptr_cast blk_fn\n+      cell_cast blk_fn\n         (Il.ScalarTy (Il.AddrTy Il.CodeTy))\n   in\n \n@@ -3223,13 +3225,27 @@ let trans_visitor\n             iter_ty_parts_full ty_params dst src ty\n               (clone_ty ty_params clone_task)\n \n+  and unfold_opaque_cell (c:Il.cell) (ty:Ast.ty) : Il.cell =\n+    match Il.cell_referent_ty c with\n+        Il.ScalarTy (Il.AddrTy _) ->\n+          begin\n+            match strip_mutable_or_constrained_ty ty with\n+                Ast.TY_box boxed ->\n+                  Il.ptr_cast c\n+                    (Il.StructTy [| word_rty; referent_type cx boxed |])\n+              | _ -> c\n+          end\n+      | _ -> c\n+\n   and free_ty\n       (is_gc:bool)\n       (ty_params:Il.cell)\n       (ty:Ast.ty)\n       (cell:Il.cell)\n       : unit =\n     check_box_rty cell;\n+    let cell = unfold_opaque_cell cell ty in\n+    check_box_rty cell;\n     note_drop_step ty \"in free-ty\";\n     begin\n     match strip_mutable_or_constrained_ty ty with\n@@ -3463,6 +3479,8 @@ let trans_visitor\n \n       | (Ast.TY_box ty', DEREF_one_box)\n       | (Ast.TY_box ty', DEREF_all_boxes) ->\n+          check_box_rty cell;\n+          let cell = unfold_opaque_cell cell ty in\n           check_box_rty cell;\n           if initializing\n           then init_box cell ty;\n@@ -4092,7 +4110,7 @@ let trans_visitor\n     in\n     let pair_code_cell = get_element_ptr dst_cell Abi.fn_field_code in\n     let pair_box_cell =\n-      ptr_cast\n+      cell_cast\n         (get_element_ptr dst_cell Abi.fn_field_box)\n         (Il.ScalarTy (Il.AddrTy (closure_box_rty)))\n     in"}]}