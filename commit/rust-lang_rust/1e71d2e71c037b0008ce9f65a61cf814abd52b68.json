{"sha": "1e71d2e71c037b0008ce9f65a61cf814abd52b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzFkMmU3MWMwMzdiMDAwOGNlOWY2NWE2MWNmODE0YWJkNTJiNjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-21T12:28:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-24T21:27:23Z"}, "message": "Added `W: Writer` bound to `BufferedWriter<W>` to avoid specialized `Drop` impl.", "tree": {"sha": "ca6f8d4aff4a45f9eecea3c08b26f97b7ce71285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca6f8d4aff4a45f9eecea3c08b26f97b7ce71285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e71d2e71c037b0008ce9f65a61cf814abd52b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e71d2e71c037b0008ce9f65a61cf814abd52b68", "html_url": "https://github.com/rust-lang/rust/commit/1e71d2e71c037b0008ce9f65a61cf814abd52b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e71d2e71c037b0008ce9f65a61cf814abd52b68/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1249e6089180211c18fdc381a464274ec95edb25", "url": "https://api.github.com/repos/rust-lang/rust/commits/1249e6089180211c18fdc381a464274ec95edb25", "html_url": "https://github.com/rust-lang/rust/commit/1249e6089180211c18fdc381a464274ec95edb25"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "9a9d421dfe1f02700d12a855837c7d1370e19699", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e71d2e71c037b0008ce9f65a61cf814abd52b68/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e71d2e71c037b0008ce9f65a61cf814abd52b68/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=1e71d2e71c037b0008ce9f65a61cf814abd52b68", "patch": "@@ -148,14 +148,14 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// writer.write_str(\"hello, world\").unwrap();\n /// writer.flush().unwrap();\n /// ```\n-pub struct BufferedWriter<W> {\n+pub struct BufferedWriter<W: Writer> {\n     inner: Option<W>,\n     buf: Vec<u8>,\n     pos: uint\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W> fmt::Debug for BufferedWriter<W> where W: fmt::Debug {\n+impl<W: Writer> fmt::Debug for BufferedWriter<W> where W: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"BufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n                self.inner.as_ref().unwrap(), self.pos, self.buf.len())\n@@ -250,12 +250,12 @@ impl<W: Writer> Drop for BufferedWriter<W> {\n /// `'\\n'`) is detected.\n ///\n /// This writer will be flushed when it is dropped.\n-pub struct LineBufferedWriter<W> {\n+pub struct LineBufferedWriter<W: Writer> {\n     inner: BufferedWriter<W>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W> fmt::Debug for LineBufferedWriter<W> where W: fmt::Debug {\n+impl<W: Writer> fmt::Debug for LineBufferedWriter<W> where W: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"LineBufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n                self.inner.inner, self.inner.pos, self.inner.buf.len())\n@@ -299,16 +299,16 @@ impl<W: Writer> Writer for LineBufferedWriter<W> {\n     fn flush(&mut self) -> IoResult<()> { self.inner.flush() }\n }\n \n-struct InternalBufferedWriter<W>(BufferedWriter<W>);\n+struct InternalBufferedWriter<W: Writer>(BufferedWriter<W>);\n \n-impl<W> InternalBufferedWriter<W> {\n+impl<W: Writer> InternalBufferedWriter<W> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut BufferedWriter<W> {\n         let InternalBufferedWriter(ref mut w) = *self;\n         return w;\n     }\n }\n \n-impl<W: Reader> Reader for InternalBufferedWriter<W> {\n+impl<W: Reader + Writer> Reader for InternalBufferedWriter<W> {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         self.get_mut().inner.as_mut().unwrap().read(buf)\n     }\n@@ -343,12 +343,12 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n ///     Err(e) => println!(\"error reading: {}\", e)\n /// }\n /// ```\n-pub struct BufferedStream<S> {\n+pub struct BufferedStream<S: Writer> {\n     inner: BufferedReader<InternalBufferedWriter<S>>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<S> fmt::Debug for BufferedStream<S> where S: fmt::Debug {\n+impl<S: Writer> fmt::Debug for BufferedStream<S> where S: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let reader = &self.inner;\n         let writer = &self.inner.inner.0;"}]}