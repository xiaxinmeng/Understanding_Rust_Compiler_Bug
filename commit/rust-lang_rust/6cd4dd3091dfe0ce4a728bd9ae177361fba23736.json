{"sha": "6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "node_id": "C_kwDOAAsO6NoAKDZjZDRkZDMwOTFkZmUwY2U0YTcyOGJkOWFlMTc3MzYxZmJhMjM3MzY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-25T08:26:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T14:04:02Z"}, "message": "rustc_hir: Relax lifetime requirements on `Visitor::visit_path`", "tree": {"sha": "79c7ac3b2466884bcb5725a99d7433de0192457d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c7ac3b2466884bcb5725a99d7433de0192457d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "html_url": "https://github.com/rust-lang/rust/commit/6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0bc3028a575eece6d4e8fbc6624cb95b9c9893", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0bc3028a575eece6d4e8fbc6624cb95b9c9893", "html_url": "https://github.com/rust-lang/rust/commit/9c0bc3028a575eece6d4e8fbc6624cb95b9c9893"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "9eeb04c8e01020e92a126f279496c1974d32fdb7", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -422,7 +422,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, _span: Span) {\n         walk_qpath(self, qpath, id)\n     }\n-    fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'v>, _id: HirId) {\n         walk_path(self, path)\n     }\n     fn visit_path_segment(&mut self, path_segment: &'v PathSegment<'v>) {\n@@ -1126,7 +1126,7 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath<'v>, id:\n     }\n }\n \n-pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>) {\n+pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &Path<'v>) {\n     for segment in path.segments {\n         visitor.visit_path_segment(segment);\n     }"}, {"sha": "9a7b261fffd4ded6cde9bc8bee5f84f8af042336", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         for (i, segment) in path.segments.iter().enumerate() {\n             let depth = path.segments.len() - i - 1;\n             if let Some(ref args) = segment.args {"}, {"sha": "4f92661dbd3342198d286c717b67a26bd7039bf6", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n     fn check_path(\n         &mut self,\n         cx: &LateContext<'tcx>,\n-        path: &'tcx rustc_hir::Path<'tcx>,\n+        path: &rustc_hir::Path<'tcx>,\n         _: rustc_hir::HirId,\n     ) {\n         if let Some(segment) = path.segments.iter().nth_back(1)"}, {"sha": "1d0b3f34d5d7830f2dfe6e19a2ca81bebdf173d0", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -292,7 +292,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_lifetime(self, lt);\n     }\n \n-    fn visit_path(&mut self, p: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n+    fn visit_path(&mut self, p: &hir::Path<'tcx>, id: hir::HirId) {\n         lint_callback!(self, check_path, p, id);\n         hir_visit::walk_path(self, p);\n     }"}, {"sha": "fc11d092ccb4b084b26b2315e64206c414aef7a3", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -44,7 +44,7 @@ macro_rules! late_lint_methods {\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n             fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_path(a: &$hir hir::Path<$hir>, b: hir::HirId);\n+            fn check_path(a: &hir::Path<$hir>, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n \n             /// Called when entering a syntax node that can have lint attributes such"}, {"sha": "da023fcf4c3b5c23405cacb7bca785998dd95c94", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -433,7 +433,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         self.in_pat = false;\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         self.handle_res(path.res);\n         intravisit::walk_path(self, path);\n     }"}, {"sha": "20951878e0032745764cb5a07ca04429ec08a94c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -442,7 +442,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_lifetime(self, lifetime)\n     }\n \n-    fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'v>, _id: hir::HirId) {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)\n     }"}, {"sha": "da715523474f9bc6cb63c8da1b83880f71a67682", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -787,7 +787,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n         intravisit::walk_item(self, item);\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             let method_span = path.segments.last().map(|s| s.ident.span);\n             let item_is_allowed = self.tcx.check_stability_allow_unstable(\n@@ -880,7 +880,7 @@ struct CheckTraitImplStable<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             if let Some(stab) = self.tcx.lookup_stability(def_id) {\n                 self.fully_stable &= stab.level.is_stable();"}, {"sha": "605cf0a93b877aa255df7aaa99cb7e7823ccfdd5", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -66,7 +66,7 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         if let Res::Local(var_id) = path.res {\n             self.visit_local_use(var_id, path.span);\n         }"}, {"sha": "da0df596c41e34f7ca88e07b1e7b0811b75ed22d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -489,7 +489,7 @@ impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         debug!(\"visiting path {:?}\", path);\n         if path.res == Res::Err {\n             // We have less context here than in rustc_resolve,"}, {"sha": "b898db242464a310ad573458cb55c5b2c6268462", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx rustc_hir::Path<'tcx>, _id: HirId) {\n+    fn visit_path(&mut self, path: &rustc_hir::Path<'tcx>, _id: HirId) {\n         if self.handle_macro(path.span) {\n             return;\n         }"}, {"sha": "6d9ede5f73bbe92a773ff5a13018622cd863992b", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SelfFinder<'a, 'tcx> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path<'tcx>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         for segment in path.segments {\n             match segment.ident.name {\n                 kw::SelfLower => self.lower.push(segment.ident.span),"}, {"sha": "910ee14855e234d21507ff2ef01eb25061461bbb", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -97,7 +97,7 @@ struct UnwrapVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n             return;"}, {"sha": "786d9608c851ee1001e1c59c36c1a0911e313544", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -330,7 +330,7 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n+    fn visit_path(&mut self, path: &Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }"}, {"sha": "857abe77e21f239c6225a1dd06b6d45348d38d5b", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -1019,7 +1019,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'hir>, _id: hir::HirId) {\n         for (index, enum_value) in paths::APPLICABILITY_VALUES.iter().enumerate() {\n             if match_path(path, enum_value) {\n                 self.add_new_index(index);"}, {"sha": "ab3976a13bdbbf4f8524e965e209f62165f623ce", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd4dd3091dfe0ce4a728bd9ae177361fba23736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         if let hir::def::Res::Local(id) = path.res {\n             if self.binding_ids.contains(&id) {\n                 self.usage_found = true;"}]}