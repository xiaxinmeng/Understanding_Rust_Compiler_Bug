{"sha": "fc557576a4b0e9ff04715c5585e21f595c9415d3", "node_id": "C_kwDOAAsO6NoAKGZjNTU3NTc2YTRiMGU5ZmYwNDcxNWM1NTg1ZTIxZjU5NWM5NDE1ZDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T06:07:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T06:07:38Z"}, "message": "Rollup merge of #112150 - taiki-e:apple-atomic-128, r=Amanieu\n\nSupport 128-bit atomics on all x86_64 Apple targets\n\nOn x86_64, we currently set `max_atomic_width` to 128 only on macOS.\n\nhttps://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler/rustc_target/src/spec/x86_64_apple_darwin.rs#L8\n\nHowever, other x86_64 Apple targets (iOS, tvOS, and watchOS) are also core2+ and support cmpxchg16b.\n\nhttps://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler/rustc_target/src/spec/apple_base.rs#L71-L76\n\n```console\n# Script to get targets that support cmpxchg16b by default:\n$ (for target in $(rustc --print target-list); do [[ $target == \"x86_64\"* ]] && rustc --print cfg --target \"$target\" | grep -q cmpxchg16b && echo \"$target\"; done)\nx86_64-apple-darwin\nx86_64-apple-ios\nx86_64-apple-ios-macabi\nx86_64-apple-tvos\nx86_64-apple-watchos-sim\nx86_64h-apple-darwin\n```\n\nr? `@Amanieu`", "tree": {"sha": "ecca48bc247df2374f4a1508c83ba0f23ef0c032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecca48bc247df2374f4a1508c83ba0f23ef0c032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc557576a4b0e9ff04715c5585e21f595c9415d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkeYcqCRBK7hj4Ov3rIwAAMecIAJiqsVoU9PHaeBez19O0o34F\nPuUbwMgrzX0I3/2KYp0Ttmn2QftqgOKiRjUxjSnh6Nyn4t2CO1F597sccL1uAISJ\nES/RQES1WBPuAdl0kHXobYrk3IpTN1e3mKfK2pGTxe9pwjAlksP5u6TRVmRP71BJ\nVsx0zvxflg8mjuebev+noD5XjX7UWAmG/SVTqVsIPzm+SdUXpD7qWIasU85O7Aas\n8X/AyUlIIZBuva/EN3KrYkzNketua8XMjTPx6UkvLptoLW6EvyyVGTtndBjfwbzL\n1DHrVsZkVjwcYVW0zSOus8KNuruDfrQOgrS/9XI/ATBG+hBo7Y1yu5HZ4fhsJWs=\n=x1xD\n-----END PGP SIGNATURE-----\n", "payload": "tree ecca48bc247df2374f4a1508c83ba0f23ef0c032\nparent 8ceb283c923f83d02efb3b2ccd8296241ff1a775\nparent 0a61bc4d36e737cb6dca3d3953985a5ad469387d\nauthor Michael Goulet <michael@errs.io> 1685686058 -0700\ncommitter GitHub <noreply@github.com> 1685686058 -0700\n\nRollup merge of #112150 - taiki-e:apple-atomic-128, r=Amanieu\n\nSupport 128-bit atomics on all x86_64 Apple targets\n\nOn x86_64, we currently set `max_atomic_width` to 128 only on macOS.\n\nhttps://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler/rustc_target/src/spec/x86_64_apple_darwin.rs#L8\n\nHowever, other x86_64 Apple targets (iOS, tvOS, and watchOS) are also core2+ and support cmpxchg16b.\n\nhttps://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler/rustc_target/src/spec/apple_base.rs#L71-L76\n\n```console\n# Script to get targets that support cmpxchg16b by default:\n$ (for target in $(rustc --print target-list); do [[ $target == \"x86_64\"* ]] && rustc --print cfg --target \"$target\" | grep -q cmpxchg16b && echo \"$target\"; done)\nx86_64-apple-darwin\nx86_64-apple-ios\nx86_64-apple-ios-macabi\nx86_64-apple-tvos\nx86_64-apple-watchos-sim\nx86_64h-apple-darwin\n```\n\nr? `@Amanieu`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc557576a4b0e9ff04715c5585e21f595c9415d3", "html_url": "https://github.com/rust-lang/rust/commit/fc557576a4b0e9ff04715c5585e21f595c9415d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc557576a4b0e9ff04715c5585e21f595c9415d3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ceb283c923f83d02efb3b2ccd8296241ff1a775", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ceb283c923f83d02efb3b2ccd8296241ff1a775", "html_url": "https://github.com/rust-lang/rust/commit/8ceb283c923f83d02efb3b2ccd8296241ff1a775"}, {"sha": "0a61bc4d36e737cb6dca3d3953985a5ad469387d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a61bc4d36e737cb6dca3d3953985a5ad469387d", "html_url": "https://github.com/rust-lang/rust/commit/0a61bc4d36e737cb6dca3d3953985a5ad469387d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "061b6a96fc888f87e28e50430f32ef80593a6c40", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=fc557576a4b0e9ff04715c5585e21f595c9415d3", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..base\n         },"}, {"sha": "50f359c357bdf2ad4fa16c5d7f43f5629a32e766", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=fc557576a4b0e9ff04715c5585e21f595c9415d3", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..base\n         },"}, {"sha": "76de7d20c4c6f9b60f76bf724001e20ad0600a3d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=fc557576a4b0e9ff04715c5585e21f595c9415d3", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..opts(\"tvos\", arch)\n         },"}, {"sha": "5fcc00a86ff95905ce5f7c2e6eceaca1876ceecd", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc557576a4b0e9ff04715c5585e21f595c9415d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=fc557576a4b0e9ff04715c5585e21f595c9415d3", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             forces_embed_bitcode: true,\n             // Taken from a clang build on Xcode 11.4.1."}]}