{"sha": "18fae7b2e5744f9a177482e268967a9c7a171425", "node_id": "C_kwDOAAsO6NoAKDE4ZmFlN2IyZTU3NDRmOWExNzc0ODJlMjY4OTY3YTljN2ExNzE0MjU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T10:08:57Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T10:41:46Z"}, "message": "update comments", "tree": {"sha": "badbd5b04c73f03d6d1848314c9c93ea644fd55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/badbd5b04c73f03d6d1848314c9c93ea644fd55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fae7b2e5744f9a177482e268967a9c7a171425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fae7b2e5744f9a177482e268967a9c7a171425", "html_url": "https://github.com/rust-lang/rust/commit/18fae7b2e5744f9a177482e268967a9c7a171425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fae7b2e5744f9a177482e268967a9c7a171425/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "c7fa2527eb2f388b0fae7ad1685720da4ad50b4f", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=18fae7b2e5744f9a177482e268967a9c7a171425", "patch": "@@ -49,7 +49,6 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// At the end of processing, the substitution S (once\n     /// canonicalized) then represents the values that you computed\n     /// for each of the canonical inputs to your query.\n-\n     pub fn instantiate_canonical_with_fresh_inference_vars<T>(\n         &self,\n         span: Span,"}, {"sha": "8ad4805f94f396f38152a584e3c1864acb451057", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=18fae7b2e5744f9a177482e268967a9c7a171425", "patch": "@@ -558,9 +558,9 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n     }\n }\n \n-/// Helper type of a temporary returned by `tcx.infer_ctxt()`.\n-/// Necessary because we can't write the following bound:\n-/// `F: for<'b, 'tcx> where 'tcx FnOnce(InferCtxt<'b, 'tcx>)`.\n+/// A temporary returned by `tcx.infer_ctxt()`. This is necessary\n+/// for multiple `InferCtxt` to share the same `in_progress_typeck_results`\n+/// without using `Rc` or something similar.\n pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,"}, {"sha": "62ca728868b45595cf57a788b65882982a8c0c44", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fae7b2e5744f9a177482e268967a9c7a171425/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=18fae7b2e5744f9a177482e268967a9c7a171425", "patch": "@@ -68,9 +68,9 @@ impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n     }\n }\n \n-/// Helper type of a temporary returned by `Inherited::build(...)`.\n-/// Necessary because we can't write the following bound:\n-/// `F: for<'b, 'tcx> where 'tcx FnOnce(Inherited<'b, 'tcx>)`.\n+/// A temporary returned by `Inherited::build(...)`. This is necessary\n+/// for multiple `InferCtxt` to share the same `in_progress_typeck_results`\n+/// without using `Rc` or something similar.\n pub struct InheritedBuilder<'tcx> {\n     infcx: infer::InferCtxtBuilder<'tcx>,\n     def_id: LocalDefId,"}]}