{"sha": "49b0fe20ab6aa752df3764908b7c21f4b1827e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YjBmZTIwYWI2YWE3NTJkZjM3NjQ5MDhiN2MyMWY0YjE4MjdlNTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T12:10:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T12:10:30Z"}, "message": "fix suffix ranges", "tree": {"sha": "3adb0077bd7d7a34376d87cbb0ae7ea5b942d532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3adb0077bd7d7a34376d87cbb0ae7ea5b942d532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b0fe20ab6aa752df3764908b7c21f4b1827e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b0fe20ab6aa752df3764908b7c21f4b1827e52", "html_url": "https://github.com/rust-lang/rust/commit/49b0fe20ab6aa752df3764908b7c21f4b1827e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b0fe20ab6aa752df3764908b7c21f4b1827e52/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a912b261d3e6c95430bf2116b15b3af2e112bc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a912b261d3e6c95430bf2116b15b3af2e112bc4b", "html_url": "https://github.com/rust-lang/rust/commit/a912b261d3e6c95430bf2116b15b3af2e112bc4b"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "d0897eeedb6f9d4bca775421e1d4c0c70cdd1e16", "filename": "crates/ra_syntax/src/validation/byte.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -28,7 +28,10 @@ pub(super) fn validate_byte_node(node: ast::Byte, errors: &mut Vec<SyntaxError>)\n     }\n \n     if let Some(range) = components.suffix {\n-        errors.push(SyntaxError::new(InvalidSuffix, range));\n+        errors.push(SyntaxError::new(\n+            InvalidSuffix,\n+            range + literal_range.start(),\n+        ));\n     }\n \n     if len == 0 {"}, {"sha": "f7a4fb156af3ef77d0ff58d1532877c5d7b75feb", "filename": "crates/ra_syntax/src/validation/byte_string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -34,7 +34,10 @@ pub(crate) fn validate_byte_string_node(node: ast::ByteString, errors: &mut Vec<\n     }\n \n     if let Some(range) = components.suffix {\n-        errors.push(SyntaxError::new(InvalidSuffix, range));\n+        errors.push(SyntaxError::new(\n+            InvalidSuffix,\n+            range + literal_range.start(),\n+        ));\n     }\n }\n "}, {"sha": "19cd3830f09a57f4a5ff95b3f890a77d89434d48", "filename": "crates/ra_syntax/src/validation/char.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -31,7 +31,10 @@ pub(super) fn validate_char_node(node: ast::Char, errors: &mut Vec<SyntaxError>)\n     }\n \n     if let Some(range) = components.suffix {\n-        errors.push(SyntaxError::new(InvalidSuffix, range));\n+        errors.push(SyntaxError::new(\n+            InvalidSuffix,\n+            range + literal_range.start(),\n+        ));\n     }\n \n     if len == 0 {"}, {"sha": "1371bb1f0d5ac0af7487b9f3bde6d94a6f6e64b7", "filename": "crates/ra_syntax/src/validation/string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -29,7 +29,10 @@ pub(crate) fn validate_string_node(node: ast::String, errors: &mut Vec<SyntaxErr\n     }\n \n     if let Some(range) = components.suffix {\n-        errors.push(SyntaxError::new(InvalidSuffix, range));\n+        errors.push(SyntaxError::new(\n+            InvalidSuffix,\n+            range + literal_range.start(),\n+        ));\n     }\n }\n "}, {"sha": "261aad1fb6b402f13d3a192bebcef9d28e963ea8", "filename": "crates/ra_syntax/tests/data/parser/err/0030_string_suffixes.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.rs?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let _ = 'c'u32;\n+    let _ = \"string\"invalid;\n+    let _ = b'b'_suff;\n+    let _ = b\"bs\"invalid;\n+}"}, {"sha": "dc10e9ee7d7594d8dd22dd7b96b1c30c515c3e7a", "filename": "crates/ra_syntax/tests/data/parser/err/0030_string_suffixes.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/49b0fe20ab6aa752df3764908b7c21f4b1827e52/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0030_string_suffixes.txt?ref=49b0fe20ab6aa752df3764908b7c21f4b1827e52", "patch": "@@ -0,0 +1,73 @@\n+SOURCE_FILE@[0; 112)\n+  FN_DEF@[0; 111)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK@[10; 111)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      LET_STMT@[16; 27)\n+        LET_KW@[16; 19)\n+        WHITESPACE@[19; 20)\n+        PLACEHOLDER_PAT@[20; 21)\n+          UNDERSCORE@[20; 21)\n+        WHITESPACE@[21; 22)\n+        EQ@[22; 23)\n+        WHITESPACE@[23; 24)\n+        LITERAL@[24; 27)\n+          CHAR@[24; 27)\n+          err: `expected SEMI`\n+      EXPR_STMT@[27; 31)\n+        PATH_EXPR@[27; 30)\n+          PATH@[27; 30)\n+            PATH_SEGMENT@[27; 30)\n+              NAME_REF@[27; 30)\n+                IDENT@[27; 30) \"u32\"\n+        SEMI@[30; 31)\n+      WHITESPACE@[31; 36)\n+      LET_STMT@[36; 60)\n+        LET_KW@[36; 39)\n+        WHITESPACE@[39; 40)\n+        PLACEHOLDER_PAT@[40; 41)\n+          UNDERSCORE@[40; 41)\n+        WHITESPACE@[41; 42)\n+        EQ@[42; 43)\n+        WHITESPACE@[43; 44)\n+        LITERAL@[44; 59)\n+          STRING@[44; 59)\n+          err: `Invalid literal suffix`\n+        SEMI@[59; 60)\n+      WHITESPACE@[60; 65)\n+      LET_STMT@[65; 83)\n+        LET_KW@[65; 68)\n+        WHITESPACE@[68; 69)\n+        PLACEHOLDER_PAT@[69; 70)\n+          UNDERSCORE@[69; 70)\n+        WHITESPACE@[70; 71)\n+        EQ@[71; 72)\n+        WHITESPACE@[72; 73)\n+        LITERAL@[73; 82)\n+          BYTE@[73; 82)\n+          err: `Invalid literal suffix`\n+        SEMI@[82; 83)\n+      WHITESPACE@[83; 88)\n+      LET_STMT@[88; 109)\n+        LET_KW@[88; 91)\n+        WHITESPACE@[91; 92)\n+        PLACEHOLDER_PAT@[92; 93)\n+          UNDERSCORE@[92; 93)\n+        WHITESPACE@[93; 94)\n+        EQ@[94; 95)\n+        WHITESPACE@[95; 96)\n+        LITERAL@[96; 108)\n+          BYTE_STRING@[96; 108)\n+          err: `Invalid literal suffix`\n+        SEMI@[108; 109)\n+      WHITESPACE@[109; 110)\n+      R_CURLY@[110; 111)\n+  WHITESPACE@[111; 112)"}]}