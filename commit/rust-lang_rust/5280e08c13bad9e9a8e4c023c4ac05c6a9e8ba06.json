{"sha": "5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "node_id": "C_kwDOAAsO6NoAKDUyODBlMDhjMTNiYWQ5ZTlhOGU0YzAyM2M0YWMwNWM2YTllOGJhMDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-05T08:49:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-05T08:53:20Z"}, "message": "minor: Sort ide-completions test outputs for less disruptive diffs", "tree": {"sha": "81dbb48fb244fa19334e4d1bde3b805d53e4439b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81dbb48fb244fa19334e4d1bde3b805d53e4439b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "html_url": "https://github.com/rust-lang/rust/commit/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b092ec3371349d8353e9e7948921cae76d3d70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b092ec3371349d8353e9e7948921cae76d3d70f", "html_url": "https://github.com/rust-lang/rust/commit/8b092ec3371349d8353e9e7948921cae76d3d70f"}], "stats": {"total": 1891, "additions": 946, "deletions": 945}, "files": [{"sha": "01a5f856c1b1f513e7b8c42979498bb28f0c4d4b", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -190,9 +190,9 @@ pub mod m {\n fn foo(a: lib::m::A) { a.$0 }\n \"#,\n             expect![[r#\"\n+                fd crate_field   u32\n                 fd private_field u32\n                 fd pub_field     u32\n-                fd crate_field   u32\n                 fd super_field   u32\n             \"#]],\n         );\n@@ -248,8 +248,8 @@ mod m {\n fn foo(a: lib::A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me private_method() fn(&self)\n                 me crate_method()   fn(&self)\n+                me private_method() fn(&self)\n                 me pub_method()     fn(&self)\n             \"#]],\n         );\n@@ -686,11 +686,11 @@ struct Foo { field: i32 }\n impl Foo { fn foo(&self) { $0 } }\"#,\n             expect![[r#\"\n                 fd self.field i32\n-                me self.foo() fn(&self)\n                 lc self       &Foo\n                 sp Self\n                 st Foo\n                 bt u32\n+                me self.foo() fn(&self)\n             \"#]],\n         );\n         check(\n@@ -700,11 +700,11 @@ struct Foo(i32);\n impl Foo { fn foo(&mut self) { $0 } }\"#,\n             expect![[r#\"\n                 fd self.0     i32\n-                me self.foo() fn(&mut self)\n                 lc self       &mut Foo\n                 sp Self\n                 st Foo\n                 bt u32\n+                me self.foo() fn(&mut self)\n             \"#]],\n         );\n     }"}, {"sha": "07cfad81d263fe617d38ada8dca499097c8e8948", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -205,8 +205,8 @@ mod tests {\n             r\"fn my_fn() { unsafe $0 }\",\n             expect![[r#\"\n                 kw fn\n-                kw trait\n                 kw impl\n+                kw trait\n                 sn pd\n                 sn ppd\n             \"#]],\n@@ -225,15 +225,15 @@ fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 kw await expr.await\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n                 sn box   Box::new(expr)\n+                sn call  function(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n                 sn let   let\n                 sn letm  let mut\n+                sn match match expr {}\n+                sn ref   &expr\n+                sn refm  &mut expr\n             \"#]],\n         );\n \n@@ -248,15 +248,15 @@ fn foo() {\n \"#,\n             expect![[r#\"\n                 kw await expr.await\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n                 sn box   Box::new(expr)\n+                sn call  function(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n                 sn let   let\n                 sn letm  let mut\n+                sn match match expr {}\n+                sn ref   &expr\n+                sn refm  &mut expr\n             \"#]],\n         )\n     }"}, {"sha": "43b0da61a9bb24e9e46c61fc3c165f18be729707", "filename": "crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -182,8 +182,8 @@ fn bar() {}\n fn ignored_bar() {}\n \"#,\n             expect![[r#\"\n-                md foo;\n                 md bar;\n+                md foo;\n             \"#]],\n         );\n     }\n@@ -219,8 +219,8 @@ fn bar() {}\n fn ignored_bar() {}\n \"#,\n             expect![[r#\"\n-                md foo;\n                 md bar;\n+                md foo;\n             \"#]],\n         );\n     }\n@@ -346,8 +346,8 @@ fn bar() {}\n fn ignored_bar() {}\n \"#,\n             expect![[r#\"\n-                md foo;\n                 md bar;\n+                md foo;\n             \"#]],\n         );\n     }"}, {"sha": "7b936f0ff777fd14a3f93b6cf6a9bdf61f838cc3", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -309,18 +309,18 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn if    if expr {}\n-                sn while while expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n                 sn box   Box::new(expr)\n+                sn call  function(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n+                sn if    if expr {}\n                 sn let   let\n                 sn letm  let mut\n+                sn match match expr {}\n+                sn not   !expr\n+                sn ref   &expr\n+                sn refm  &mut expr\n+                sn while while expr {}\n             \"#]],\n         );\n     }\n@@ -339,16 +339,16 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n+                sn box   Box::new(expr)\n+                sn call  function(expr)\n+                sn dbg   dbg!(expr)\n+                sn dbgr  dbg!(&expr)\n                 sn if    if expr {}\n-                sn while while expr {}\n+                sn match match expr {}\n                 sn not   !expr\n                 sn ref   &expr\n                 sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n+                sn while while expr {}\n             \"#]],\n         );\n     }\n@@ -363,15 +363,15 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n                 sn box   Box::new(expr)\n+                sn call  function(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n                 sn let   let\n                 sn letm  let mut\n+                sn match match expr {}\n+                sn ref   &expr\n+                sn refm  &mut expr\n             \"#]],\n         )\n     }\n@@ -386,18 +386,18 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn if    if expr {}\n-                sn while while expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n                 sn box   Box::new(expr)\n+                sn call  function(expr)\n                 sn dbg   dbg!(expr)\n                 sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n+                sn if    if expr {}\n                 sn let   let\n                 sn letm  let mut\n+                sn match match expr {}\n+                sn not   !expr\n+                sn ref   &expr\n+                sn refm  &mut expr\n+                sn while while expr {}\n             \"#]],\n         );\n     }"}, {"sha": "ad92820bca9f4d6ddee245414167b95a658ec610", "filename": "crates/ide-completion/src/completions/qualified_path.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -249,8 +249,8 @@ impl S {\n fn foo() { let _ = lib::S::$0 }\n \"#,\n             expect![[r#\"\n-                fn public_method() fn()\n                 ct PUBLIC_CONST    pub const PUBLIC_CONST: u32\n+                fn public_method() fn()\n                 ta PublicType      pub type PublicType = u32\n             \"#]],\n         );\n@@ -340,14 +340,14 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::$0 }\n \"#,\n             expect![[r#\"\n-                ta SubTy (as Sub)        type SubTy\n-                ta Ty (as Super)         type Ty\n                 ct C2 (as Sub)           const C2: ()\n-                fn subfunc() (as Sub)    fn()\n-                me submethod(\u2026) (as Sub) fn(&self)\n                 ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n+                fn subfunc() (as Sub)    fn()\n+                ta SubTy (as Sub)        type SubTy\n+                ta Ty (as Super)         type Ty\n                 me method(\u2026) (as Super)  fn(&self)\n+                me submethod(\u2026) (as Sub) fn(&self)\n             \"#]],\n         );\n     }\n@@ -380,13 +380,13 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ta SubTy (as Sub)        type SubTy\n-                ta Ty (as Super)         type Ty\n+                ct C2 (as Sub)           const C2: ()\n                 ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n-                me method(\u2026) (as Super)  fn(&self)\n-                ct C2 (as Sub)           const C2: ()\n                 fn subfunc() (as Sub)    fn()\n+                ta SubTy (as Sub)        type SubTy\n+                ta Ty (as Super)         type Ty\n+                me method(\u2026) (as Super)  fn(&self)\n                 me submethod(\u2026) (as Sub) fn(&self)\n             \"#]],\n         );\n@@ -404,8 +404,8 @@ impl T { fn bar() {} }\n fn main() { T::$0; }\n \"#,\n             expect![[r#\"\n-                fn foo() fn()\n                 fn bar() fn()\n+                fn foo() fn()\n             \"#]],\n         );\n     }\n@@ -518,8 +518,8 @@ fn main() { m!(self::f$0); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n-                fn main() fn()\n                 fn foo()  fn()\n+                fn main() fn()\n             \"#]],\n         );\n     }\n@@ -536,8 +536,8 @@ mod m {\n }\n \"#,\n             expect![[r#\"\n-                md z\n                 fn z() fn()\n+                md z\n             \"#]],\n         );\n     }"}, {"sha": "80fbaffd71e630ef3d72780bb03a680849166be6", "filename": "crates/ide-completion/src/completions/trait_impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -343,8 +343,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );\n@@ -448,8 +448,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );\n@@ -465,8 +465,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );\n@@ -484,8 +484,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );\n@@ -532,8 +532,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );\n@@ -549,8 +549,8 @@ impl Test for T {\n \",\n             expect![[r#\"\n                 sp Self\n-                tt Test\n                 st T\n+                tt Test\n                 bt u32\n             \"#]],\n         );"}, {"sha": "c4d4c5549e46ce2db706fdee20cf4235dce7d986", "filename": "crates/ide-completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -176,8 +176,8 @@ pub mod prelude {\n \"#,\n             expect![[r#\"\n                 md std\n-                bt u32\n                 st Option\n+                bt u32\n             \"#]],\n         );\n     }\n@@ -233,10 +233,10 @@ pub mod prelude {\n }\n \"#,\n             expect![[r#\"\n-                md std\n                 md core\n-                bt u32\n+                md std\n                 st String\n+                bt u32\n             \"#]],\n         );\n     }"}, {"sha": "fe1ad2bf82dd5389647812d1ad0567a27e546068", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -268,7 +268,7 @@ impl CompletionRelevance {\n }\n \n /// The type of the completion item.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum CompletionItemKind {\n     SymbolKind(SymbolKind),\n     Binding,"}, {"sha": "5387b455f038b000f771076071ab8129b0515d94", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -98,6 +98,7 @@ fn completion_list_with_config(\n         })\n         .filter(|it| include_keywords || it.kind() != CompletionItemKind::Keyword)\n         .filter(|it| include_keywords || it.kind() != CompletionItemKind::Snippet)\n+        .sorted_by_key(|it| (it.kind(), it.label().to_owned(), it.detail().map(ToOwned::to_owned)))\n         .collect();\n     render_completion_list(items)\n }"}, {"sha": "664bd05e2de3d777809ad366c31e21bed94f5fdc", "filename": "crates/ide-completion/src/tests/attribute.rs", "status": "modified", "additions": 216, "deletions": 216, "changes": 432, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -17,25 +17,25 @@ fn proc_macros() {\n struct Foo;\n \"#,\n         expect![[r#\"\n-            md proc_macros\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n+            at derive(\u2026)\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n-            at derive(\u2026)\n-            at repr(\u2026)\n             at non_exhaustive\n+            at repr(\u2026)\n+            at warn(\u2026)\n+            md proc_macros\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     )\n }\n@@ -77,15 +77,15 @@ fn with_existing_attr() {\n     check(\n         r#\"#[no_mangle] #[$0] mcall!();\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n             at forbid(\u2026)\n             at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     )\n }\n@@ -95,29 +95,29 @@ fn attr_on_source_file() {\n     check(\n         r#\"#![$0]\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n+            at crate_name = \"\"\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n-            at must_use\n-            at no_mangle\n-            at crate_name = \"\"\n+            at doc(hidden)\n             at feature(\u2026)\n+            at forbid(\u2026)\n+            at must_use\n             at no_implicit_prelude\n             at no_main\n+            at no_mangle\n             at no_std\n             at recursion_limit = \"\u2026\"\n             at type_length_limit = \u2026\n+            at warn(\u2026)\n             at windows_subsystem = \"\u2026\"\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -127,44 +127,44 @@ fn attr_on_module() {\n     check(\n         r#\"#[$0] mod foo;\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n+            at macro_use\n             at must_use\n             at no_mangle\n-            at macro_use\n             at path = \"\u2026\"\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n     check(\n         r#\"mod foo {#![$0]}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n-            at no_mangle\n             at no_implicit_prelude\n+            at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -174,23 +174,23 @@ fn attr_on_macro_rules() {\n     check(\n         r#\"#[$0] macro_rules! foo {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n-            at must_use\n-            at no_mangle\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at macro_export\n             at macro_use\n+            at must_use\n+            at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -200,21 +200,21 @@ fn attr_on_macro_def() {\n     check(\n         r#\"#[$0] macro foo {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -224,22 +224,22 @@ fn attr_on_extern_crate() {\n     check(\n         r#\"#[$0] extern crate foo;\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n+            at macro_use\n             at must_use\n             at no_mangle\n-            at macro_use\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -249,21 +249,21 @@ fn attr_on_use() {\n     check(\n         r#\"#[$0] use foo;\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -273,21 +273,21 @@ fn attr_on_type_alias() {\n     check(\n         r#\"#[$0] type foo = ();\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -301,26 +301,26 @@ fn attr_on_struct() {\n struct Foo;\n \"#,\n         expect![[r#\"\n-            md core\n-            at derive           macro derive\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n+            at derive           macro derive\n+            at derive(\u2026)\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n-            at derive(\u2026)\n-            at repr(\u2026)\n             at non_exhaustive\n+            at repr(\u2026)\n+            at warn(\u2026)\n+            md core\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -330,24 +330,24 @@ fn attr_on_enum() {\n     check(\n         r#\"#[$0] enum Foo {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n+            at derive(\u2026)\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n-            at derive(\u2026)\n-            at repr(\u2026)\n             at non_exhaustive\n+            at repr(\u2026)\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -357,21 +357,21 @@ fn attr_on_const() {\n     check(\n         r#\"#[$0] const FOO: () = ();\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -381,26 +381,26 @@ fn attr_on_static() {\n     check(\n         r#\"#[$0] static FOO: () = ()\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n-            at must_use\n-            at no_mangle\n+            at doc(hidden)\n             at export_name = \"\u2026\"\n+            at forbid(\u2026)\n+            at global_allocator\n             at link_name = \"\u2026\"\n             at link_section = \"\u2026\"\n-            at global_allocator\n+            at must_use\n+            at no_mangle\n             at used\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -410,22 +410,22 @@ fn attr_on_trait() {\n     check(\n         r#\"#[$0] trait Foo {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n-            at no_mangle\n             at must_use\n+            at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -435,42 +435,42 @@ fn attr_on_impl() {\n     check(\n         r#\"#[$0] impl () {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n+            at automatically_derived\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n-            at automatically_derived\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n     check(\n         r#\"impl () {#![$0]}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n             at must_use\n             at no_mangle\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -480,43 +480,43 @@ fn attr_on_extern_block() {\n     check(\n         r#\"#[$0] extern {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n+            at link\n             at must_use\n             at no_mangle\n-            at link\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n     check(\n         r#\"extern {#![$0]}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at forbid(\u2026)\n+            at link\n             at must_use\n             at no_mangle\n-            at link\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -526,16 +526,16 @@ fn attr_on_variant() {\n     check(\n         r#\"enum Foo { #[$0] Bar }\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n             at forbid(\u2026)\n-            at warn(\u2026)\n             at non_exhaustive\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -545,36 +545,36 @@ fn attr_on_fn() {\n     check(\n         r#\"#[$0] fn main() {}\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n+            at cold\n             at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n             at deprecated\n             at doc = \"\u2026\"\n-            at doc(hidden)\n             at doc(alias = \"\u2026\")\n-            at must_use\n-            at no_mangle\n+            at doc(hidden)\n             at export_name = \"\u2026\"\n-            at link_name = \"\u2026\"\n-            at link_section = \"\u2026\"\n-            at cold\n+            at forbid(\u2026)\n             at ignore = \"\u2026\"\n             at inline\n+            at link_name = \"\u2026\"\n+            at link_section = \"\u2026\"\n             at must_use\n+            at must_use\n+            at no_mangle\n             at panic_handler\n             at proc_macro\n-            at proc_macro_derive(\u2026)\n             at proc_macro_attribute\n+            at proc_macro_derive(\u2026)\n             at should_panic\n             at target_feature = \"\u2026\"\n             at test\n             at track_caller\n+            at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -585,15 +585,15 @@ fn attr_on_expr() {\n     check(\n         r#\"fn main() { #[$0] foo() }\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at cfg(\u2026)\n             at cfg_attr(\u2026)\n             at deny(\u2026)\n             at forbid(\u2026)\n             at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -603,9 +603,6 @@ fn attr_in_source_file_end() {\n     check(\n         r#\"#[$0]\"#,\n         expect![[r#\"\n-            kw self::\n-            kw super::\n-            kw crate::\n             at allow(\u2026)\n             at automatically_derived\n             at cfg(\u2026)\n@@ -642,6 +639,9 @@ fn attr_in_source_file_end() {\n             at track_caller\n             at used\n             at warn(\u2026)\n+            kw crate::\n+            kw self::\n+            kw super::\n         \"#]],\n     );\n }\n@@ -654,8 +654,8 @@ mod cfg {\n         check(\n             r#\"#[cfg(target_endian = $0\"#,\n             expect![[r#\"\n-                ba little\n                 ba big\n+                ba little\n             \"#]],\n         );\n     }\n@@ -688,17 +688,17 @@ mod derive {\n #[derive($0)] struct Test;\n \"#,\n             expect![[r#\"\n-                md core\n-                de Default                macro Default\n+                de Clone                  macro Clone\n                 de Clone, Copy\n+                de Default                macro Default\n                 de PartialEq              macro PartialEq\n                 de PartialEq, Eq\n                 de PartialEq, Eq, PartialOrd, Ord\n-                de Clone                  macro Clone\n                 de PartialEq, PartialOrd\n+                md core\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n             \"#]],\n         );\n     }\n@@ -711,16 +711,16 @@ mod derive {\n #[derive(serde::Serialize, PartialEq, $0)] struct Test;\n \"#,\n             expect![[r#\"\n-                md core\n-                de Default             macro Default\n+                de Clone               macro Clone\n                 de Clone, Copy\n+                de Default             macro Default\n                 de Eq\n                 de Eq, PartialOrd, Ord\n-                de Clone               macro Clone\n                 de PartialOrd\n+                md core\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n             \"#]],\n         )\n     }\n@@ -733,16 +733,16 @@ mod derive {\n #[derive($0 serde::Serialize, PartialEq)] struct Test;\n \"#,\n             expect![[r#\"\n-                md core\n-                de Default             macro Default\n+                de Clone               macro Clone\n                 de Clone, Copy\n+                de Default             macro Default\n                 de Eq\n                 de Eq, PartialOrd, Ord\n-                de Clone               macro Clone\n                 de PartialOrd\n+                md core\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n             \"#]],\n         );\n     }\n@@ -755,15 +755,15 @@ mod derive {\n #[derive(PartialEq, Eq, Or$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                md core\n-                de Default         macro Default\n-                de Clone, Copy\n-                de PartialOrd, Ord\n                 de Clone           macro Clone\n+                de Clone, Copy\n+                de Default         macro Default\n                 de PartialOrd\n+                de PartialOrd, Ord\n+                md core\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n             \"#]],\n         );\n     }\n@@ -777,12 +777,12 @@ mod derive {\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                md proc_macros\n+                de DeriveIdentity (use proc_macros::DeriveIdentity) proc_macro DeriveIdentity\n                 md core\n+                md proc_macros\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n-                de DeriveIdentity (use proc_macros::DeriveIdentity) proc_macro DeriveIdentity\n             \"#]],\n         );\n         check_derive(\n@@ -794,11 +794,11 @@ use proc_macros::DeriveIdentity;\n \"#,\n             expect![[r#\"\n                 de DeriveIdentity proc_macro DeriveIdentity\n-                md proc_macros\n                 md core\n+                md proc_macros\n+                kw crate::\n                 kw self::\n                 kw super::\n-                kw crate::\n             \"#]],\n         );\n     }\n@@ -953,22 +953,22 @@ mod repr {\n         check_repr(\n             r#\"#[repr($0)] struct Test;\"#,\n             expect![[r#\"\n+                ba C\n                 ba align($0)\n+                ba i16\n+                ba i28\n+                ba i32\n+                ba i64\n+                ba i8\n+                ba isize\n                 ba packed\n                 ba transparent\n-                ba C\n-                ba u8\n+                ba u128\n                 ba u16\n                 ba u32\n                 ba u64\n-                ba u128\n+                ba u8\n                 ba usize\n-                ba i8\n-                ba i16\n-                ba i32\n-                ba i64\n-                ba i28\n-                ba isize\n             \"#]],\n         );\n     }\n@@ -983,20 +983,20 @@ mod repr {\n         check_repr(\n             r#\"#[repr(align(1), $0)] struct Test;\"#,\n             expect![[r#\"\n-                ba transparent\n                 ba C\n-                ba u8\n-                ba u16\n-                ba u32\n-                ba u64\n-                ba u128\n-                ba usize\n-                ba i8\n                 ba i16\n+                ba i28\n                 ba i32\n                 ba i64\n-                ba i28\n+                ba i8\n                 ba isize\n+                ba transparent\n+                ba u128\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u8\n+                ba usize\n             \"#]],\n         );\n     }\n@@ -1006,20 +1006,20 @@ mod repr {\n         check_repr(\n             r#\"#[repr(packed, $0)] struct Test;\"#,\n             expect![[r#\"\n-                ba transparent\n                 ba C\n-                ba u8\n-                ba u16\n-                ba u32\n-                ba u64\n-                ba u128\n-                ba usize\n-                ba i8\n                 ba i16\n+                ba i28\n                 ba i32\n                 ba i64\n-                ba i28\n+                ba i8\n                 ba isize\n+                ba transparent\n+                ba u128\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u8\n+                ba usize\n             \"#]],\n         );\n     }\n@@ -1030,19 +1030,19 @@ mod repr {\n             r#\"#[repr(C, $0)] struct Test;\"#,\n             expect![[r#\"\n                 ba align($0)\n+                ba i16\n+                ba i28\n+                ba i32\n+                ba i64\n+                ba i8\n+                ba isize\n                 ba packed\n-                ba u8\n+                ba u128\n                 ba u16\n                 ba u32\n                 ba u64\n-                ba u128\n+                ba u8\n                 ba usize\n-                ba i8\n-                ba i16\n-                ba i32\n-                ba i64\n-                ba i28\n-                ba isize\n             \"#]],\n         );\n     }\n@@ -1052,9 +1052,9 @@ mod repr {\n         check_repr(\n             r#\"#[repr(usize, $0)] struct Test;\"#,\n             expect![[r#\"\n+                ba C\n                 ba align($0)\n                 ba packed\n-                ba C\n             \"#]],\n         );\n     }"}, {"sha": "a068d5bf7afdfbf65c32cb047d22c2202041b5ac", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 248, "deletions": 248, "changes": 496, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -31,38 +31,38 @@ fn baz() {\n             \"#,\n         // This should not contain `FooDesc {\u2026}`.\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw mut\n-            kw return\n-            kw self\n-            kw super\n-            kw crate\n-            st FooDesc\n-            fn create_foo(\u2026) fn(&FooDesc)\n-            bt u32\n-            tt Trait\n+            ct CONST\n             en Enum\n-            st Record\n-            st Tuple\n-            md module\n             fn baz()         fn()\n-            st Unit\n-            md _69latrick\n-            ma makro!(\u2026)     macro_rules! makro\n+            fn create_foo(\u2026) fn(&FooDesc)\n             fn function()    fn()\n+            ma makro!(\u2026)     macro_rules! makro\n+            md _69latrick\n+            md module\n             sc STATIC\n+            st FooDesc\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt Trait\n             un Union\n             ev TupleV(\u2026)     TupleV(u32)\n-            ct CONST\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw mut\n+            kw return\n+            kw self\n+            kw super\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     )\n }\n@@ -83,28 +83,28 @@ fn func(param0 @ (param1, param2): (i32, i32)) {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw return\n-            kw self\n-            kw super\n-            kw crate\n-            lc matcharm   i32\n+            fn func(\u2026)    fn((i32, i32))\n             lc ifletlocal i32\n             lc letlocal   i32\n+            lc matcharm   i32\n             lc param0     (i32, i32)\n             lc param1     i32\n             lc param2     i32\n-            fn func(\u2026)    fn((i32, i32))\n             bt u32\n+            kw crate\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw self\n+            kw super\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n }\n@@ -126,57 +126,57 @@ impl Unit {\n \"#,\n         // `self` is in here twice, once as the module, once as the local\n         expect![[r#\"\n-            me self.foo()   fn(self)\n-            kw unsafe\n-            kw fn\n+            ct CONST\n+            cp CONST_PARAM\n+            en Enum\n+            fn function()   fn()\n+            fn local_func() fn()\n+            lc self         Unit\n+            ma makro!(\u2026)    macro_rules! makro\n+            md module\n+            md qualified\n+            sp Self\n+            sc STATIC\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt Trait\n+            tp TypeParam\n+            un Union\n+            ev TupleV(\u2026)    TupleV(u32)\n+            bt u32\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n             kw mod\n-            kw enum\n+            kw return\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw true\n+            kw type\n             kw union\n-            kw match\n+            kw unsafe\n+            kw use\n             kw while\n             kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw let\n-            kw return\n+            me self.foo()   fn(self)\n+            sn macro_rules\n             sn pd\n             sn ppd\n-            sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            fn local_func() fn()\n-            bt u32\n-            lc self         Unit\n-            tp TypeParam\n-            cp CONST_PARAM\n-            sp Self\n-            tt Trait\n-            en Enum\n-            st Record\n-            st Tuple\n-            md module\n-            st Unit\n-            md qualified\n-            ma makro!(\u2026)    macro_rules! makro\n             ?? Unresolved\n-            fn function()   fn()\n-            sc STATIC\n-            un Union\n-            ev TupleV(\u2026)    TupleV(u32)\n-            ct CONST\n         \"#]],\n     );\n     check(\n@@ -192,20 +192,20 @@ impl Unit {\n }\n \"#,\n         expect![[r#\"\n-            tt Trait\n+            ct CONST\n             en Enum\n-            st Record\n-            st Tuple\n+            fn function() fn()\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n-            st Unit\n             md qualified\n-            ma makro!(\u2026)  macro_rules! makro\n-            ?? Unresolved\n-            fn function() fn()\n             sc STATIC\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt Trait\n             un Union\n             ev TupleV(\u2026)  TupleV(u32)\n-            ct CONST\n+            ?? Unresolved\n         \"#]],\n     );\n }\n@@ -221,38 +221,38 @@ fn complete_in_block() {\n     }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw fn\n+            fn foo()       fn()\n+            bt u32\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n             kw mod\n-            kw enum\n+            kw return\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw true\n+            kw type\n             kw union\n-            kw match\n+            kw unsafe\n+            kw use\n             kw while\n             kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw let\n-            kw return\n+            sn macro_rules\n             sn pd\n             sn ppd\n-            sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            fn foo()       fn()\n-            bt u32\n         \"#]],\n     )\n }\n@@ -267,40 +267,40 @@ fn complete_after_if_expr() {\n     }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw fn\n+            fn foo()       fn()\n+            bt u32\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw else\n+            kw else if\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n             kw mod\n-            kw enum\n+            kw return\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw true\n+            kw type\n             kw union\n-            kw match\n+            kw unsafe\n+            kw use\n             kw while\n             kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw let\n-            kw else\n-            kw else if\n-            kw return\n+            sn macro_rules\n             sn pd\n             sn ppd\n-            sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            fn foo()       fn()\n-            bt u32\n         \"#]],\n     )\n }\n@@ -316,22 +316,22 @@ fn complete_in_match_arm() {\n     }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn foo()     fn()\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            fn foo()     fn()\n-            bt u32\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     )\n }\n@@ -341,40 +341,40 @@ fn completes_in_loop_ctx() {\n     check_empty(\n         r\"fn my() { loop { $0 } }\",\n         expect![[r#\"\n-            kw unsafe\n-            kw fn\n+            fn my()        fn()\n+            bt u32\n+            kw break\n             kw const\n-            kw type\n-            kw impl\n+            kw continue\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n             kw mod\n-            kw enum\n+            kw return\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw true\n+            kw type\n             kw union\n-            kw match\n+            kw unsafe\n+            kw use\n             kw while\n             kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw let\n-            kw continue\n-            kw break\n-            kw return\n+            sn macro_rules\n             sn pd\n             sn ppd\n-            sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            fn my()        fn()\n-            bt u32\n         \"#]],\n     );\n }\n@@ -384,22 +384,22 @@ fn completes_in_let_initializer() {\n     check_empty(\n         r#\"fn main() { let _ = $0 }\"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn main()    fn()\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            fn main()    fn()\n-            bt u32\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     )\n }\n@@ -418,23 +418,23 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn foo()     fn()\n+            st Foo\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            st Foo\n-            fn foo()     fn()\n-            bt u32\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n }\n@@ -454,23 +454,23 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn foo()     fn()\n+            lc bar       i32\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            lc bar       i32\n-            fn foo()     fn()\n-            bt u32\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n }\n@@ -485,24 +485,24 @@ fn quux(x: i32) {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn quux(\u2026)   fn(i32)\n+            lc x         i32\n+            ma m!(\u2026)     macro_rules! m\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            bt u32\n-            lc x         i32\n-            fn quux(\u2026)   fn(i32)\n-            ma m!(\u2026)     macro_rules! m\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n     check_empty(\n@@ -513,24 +513,24 @@ fn quux(x: i32) {\n }\n \",\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n+            fn quux(\u2026)   fn(i32)\n+            lc x         i32\n+            ma m!(\u2026)     macro_rules! m\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n             kw if\n             kw if let\n-            kw for\n-            kw true\n-            kw false\n+            kw loop\n+            kw match\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            bt u32\n-            lc x         i32\n-            fn quux(\u2026)   fn(i32)\n-            ma m!(\u2026)     macro_rules! m\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n     check_empty(\n@@ -559,12 +559,12 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026)   TupleV(u32)\n-            ev RecordV {\u2026} RecordV { field: u32 }\n-            ev UnitV       UnitV\n             ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n             ta AssocType   type AssocType = ()\n+            ev RecordV {\u2026} RecordV { field: u32 }\n+            ev TupleV(\u2026)   TupleV(u32)\n+            ev UnitV       UnitV\n         \"#]],\n     );\n }\n@@ -601,8 +601,8 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev Variant(\u2026) Variant\n             fn variant    fn() -> Enum\n+            ev Variant(\u2026) Variant\n         \"#]],\n     );\n }\n@@ -618,11 +618,11 @@ fn main() {\n     self::$0\n }\n \",\n-        expect![[r\"\n-            tt Trait\n-            fn main() fn()\n+        expect![[r#\"\n             fn foo()  fn() -> impl Trait<U>\n-        \"]],\n+            fn main() fn()\n+            tt Trait\n+        \"#]],\n     );\n }\n \n@@ -638,12 +638,12 @@ fn main() {\n     self::$0\n }\n \"#,\n-        expect![[r\"\n-            tt Trait\n-            fn main() fn()\n+        expect![[r#\"\n             fn bar()  async fn() -> impl Trait<U>\n             fn foo()  async fn() -> u8\n-        \"]],\n+            fn main() fn()\n+            tt Trait\n+        \"#]],\n     );\n }\n "}, {"sha": "f8e145c7470665af2bcb92649f433075c2084fd0", "filename": "crates/ide-completion/src/tests/fn_param.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -17,8 +17,8 @@ fn baz(file$0) {}\n \"#,\n         expect![[r#\"\n             bn file_id: usize\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -33,8 +33,8 @@ fn baz(foo: (), file$0) {}\n \"#,\n         expect![[r#\"\n             bn file_id: usize\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -49,8 +49,8 @@ fn baz(file$0 id: u32) {}\n \"#,\n         expect![[r#\"\n             bn file_id: usize,\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -63,8 +63,8 @@ fn foo(file_id: usize) {}\n fn bar(file_id: u32, $0) {}\n \"#,\n         expect![[r#\"\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n \n@@ -73,10 +73,10 @@ fn bar(file_id: u32, $0) {}\n fn f(#[foo = \"bar\"] baz: u32,) {}\n fn g(baz: (), ba$0)\n \"#,\n-        expect![[r##\"\n-                kw ref\n-                kw mut\n-            \"##]],\n+        expect![[r#\"\n+            kw mut\n+            kw ref\n+        \"#]],\n     )\n }\n \n@@ -91,8 +91,8 @@ pub(crate) trait SourceRoot {\n \"#,\n         expect![[r#\"\n             bn file_id: usize\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -107,8 +107,8 @@ fn outer(text: &str) {\n \"#,\n         expect![[r#\"\n             bn text: &str\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -122,11 +122,11 @@ fn foo(Bar { bar }: Bar) {}\n fn foo2($0) {}\n \"#,\n         expect![[r#\"\n+            st Bar\n+            bn Bar              Bar { bar$1 }: Bar$0\n             bn Bar { bar }: Bar\n-            kw ref\n             kw mut\n-            bn Bar              Bar { bar$1 }: Bar$0\n-            st Bar\n+            kw ref\n         \"#]],\n     )\n }\n@@ -143,15 +143,15 @@ impl A {\n }\n \"#,\n         expect![[r#\"\n-            bn self\n-            bn &self\n-            bn mut self\n+            sp Self\n+            st A\n             bn &mut self\n+            bn &self\n             bn file_id: usize\n-            kw ref\n+            bn mut self\n+            bn self\n             kw mut\n-            sp Self\n-            st A\n+            kw ref\n         \"#]],\n     )\n }\n@@ -168,11 +168,11 @@ impl A {\n }\n \"#,\n         expect![[r#\"\n-            bn file_id: usize\n-            kw ref\n-            kw mut\n             sp Self\n             st A\n+            bn file_id: usize\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -195,11 +195,11 @@ fn outer() {\n }\n \"#,\n         expect![[r#\"\n-            bn foo: i32\n-            bn baz: i32\n             bn bar: i32\n-            kw ref\n+            bn baz: i32\n+            bn foo: i32\n             kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -220,11 +220,11 @@ fn outer() {\n }\n \"#,\n         expect![[r#\"\n-            bn baz: i32\n             bn bar: i32\n+            bn baz: i32\n             bn foo: i32\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -238,8 +238,8 @@ fn bar(bar$0) {}\n \"#,\n         expect![[r#\"\n             bn bar: u32\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     )\n }"}, {"sha": "8f2f8a548a484b849ec7297d71c21ba33f846a45", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -18,18 +18,18 @@ fn target_type_or_trait_in_impl_block() {\n impl Tra$0\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     )\n }\n@@ -41,18 +41,18 @@ fn target_type_in_trait_impl_block() {\n impl Trait for Str$0\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     )\n }\n@@ -72,17 +72,17 @@ fn after_target_name_in_impl() {\n     check(\n         r\"impl Trait $0\",\n         expect![[r#\"\n-            kw where\n             kw for\n+            kw where\n         \"#]],\n     );\n     // FIXME: This should not emit `kw for`\n     check(\n         r\"impl Trait for Type $0\",\n         expect![[r#\"\n-        kw where\n-        kw for\n-    \"#]],\n+            kw for\n+            kw where\n+        \"#]],\n     );\n }\n \n@@ -92,30 +92,30 @@ fn after_struct_name() {\n     check(\n         r\"struct Struct $0\",\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n+            ma makro!(\u2026)           macro_rules! makro\n+            md module\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw fn\n+            kw impl\n             kw mod\n-            kw enum\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw type\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n+            kw unsafe\n+            kw use\n             sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026)           macro_rules! makro\n+            sn tfn (Test function)\n+            sn tmod (Test module)\n         \"#]],\n     );\n }\n@@ -126,30 +126,30 @@ fn after_fn_name() {\n     check(\n         r\"fn func() $0\",\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n+            ma makro!(\u2026)           macro_rules! makro\n+            md module\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw fn\n+            kw impl\n             kw mod\n-            kw enum\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw type\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n+            kw unsafe\n+            kw use\n             sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026)           macro_rules! makro\n+            sn tfn (Test function)\n+            sn tmod (Test module)\n         \"#]],\n     );\n }\n@@ -164,9 +164,9 @@ struct Foo {\n }\n \"#,\n         expect![[r#\"\n+            kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw pub\n         \"#]],\n     )\n }"}, {"sha": "40d3b90da9de0a0250b135c1b9d4279d005f06a0", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -13,29 +13,29 @@ fn in_mod_item_list() {\n     check(\n         r#\"mod tests { $0 }\"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n+            ma makro!(\u2026)           macro_rules! makro\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw fn\n+            kw impl\n             kw mod\n-            kw enum\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw type\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n+            kw unsafe\n+            kw use\n             sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            ma makro!(\u2026)           macro_rules! makro\n+            sn tfn (Test function)\n+            sn tmod (Test module)\n         \"#]],\n     )\n }\n@@ -45,30 +45,30 @@ fn in_source_file_item_list() {\n     check(\n         r#\"$0\"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n+            ma makro!(\u2026)           macro_rules! makro\n+            md module\n             kw const\n-            kw type\n-            kw impl\n+            kw crate\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw fn\n+            kw impl\n             kw mod\n-            kw enum\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw self\n+            kw static\n             kw struct\n+            kw super\n+            kw trait\n+            kw type\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n+            kw unsafe\n+            kw use\n             sn macro_rules\n-            kw self\n-            kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026)           macro_rules! makro\n+            sn tfn (Test function)\n+            sn tmod (Test module)\n         \"#]],\n     )\n }\n@@ -78,25 +78,25 @@ fn in_item_list_after_attr() {\n     check(\n         r#\"#[attr] $0\"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n             kw const\n-            kw type\n-            kw impl\n+            kw enum\n             kw extern\n-            kw use\n-            kw trait\n-            kw static\n+            kw fn\n+            kw impl\n             kw mod\n-            kw enum\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw static\n             kw struct\n+            kw trait\n+            kw type\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n+            kw unsafe\n+            kw use\n             sn macro_rules\n+            sn tfn (Test function)\n+            sn tmod (Test module)\n         \"#]],\n     )\n }\n@@ -107,8 +107,8 @@ fn in_qualified_path() {\n     check(\n         r#\"crate::$0\"#,\n         expect![[r#\"\n-            md module\n             ma makro!(\u2026) macro_rules! makro\n+            md module\n         \"#]],\n     )\n }\n@@ -119,8 +119,8 @@ fn after_unsafe_token() {\n         r#\"unsafe $0\"#,\n         expect![[r#\"\n             kw fn\n-            kw trait\n             kw impl\n+            kw trait\n         \"#]],\n     );\n }\n@@ -130,17 +130,17 @@ fn after_visibility() {\n     check(\n         r#\"pub $0\"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw fn\n             kw const\n-            kw type\n-            kw use\n-            kw trait\n-            kw static\n-            kw mod\n             kw enum\n+            kw fn\n+            kw mod\n+            kw static\n             kw struct\n+            kw trait\n+            kw type\n             kw union\n+            kw unsafe\n+            kw use\n         \"#]],\n     );\n }\n@@ -152,8 +152,8 @@ fn after_visibility_unsafe() {\n         r#\"pub unsafe $0\"#,\n         expect![[r#\"\n             kw fn\n-            kw trait\n             kw impl\n+            kw trait\n         \"#]],\n     );\n }\n@@ -163,18 +163,18 @@ fn in_impl_assoc_item_list() {\n     check(\n         r#\"impl Struct { $0 }\"#,\n         expect![[r#\"\n+            ma makro!(\u2026)  macro_rules! makro\n+            md module\n+            kw const\n+            kw crate\n+            kw fn\n+            kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n-            kw const\n-            kw type\n             kw self\n             kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026)  macro_rules! makro\n+            kw type\n+            kw unsafe\n         \"#]],\n     )\n }\n@@ -184,13 +184,13 @@ fn in_impl_assoc_item_list_after_attr() {\n     check(\n         r#\"impl Struct { #[attr] $0 }\"#,\n         expect![[r#\"\n+            kw const\n+            kw fn\n+            kw pub\n             kw pub(crate)\n             kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n-            kw const\n             kw type\n+            kw unsafe\n         \"#]],\n     )\n }\n@@ -200,15 +200,15 @@ fn in_trait_assoc_item_list() {\n     check(\n         r\"trait Foo { $0 }\",\n         expect![[r#\"\n-            kw unsafe\n-            kw fn\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             kw const\n-            kw type\n+            kw crate\n+            kw fn\n             kw self\n             kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026) macro_rules! makro\n+            kw type\n+            kw unsafe\n         \"#]],\n     );\n }\n@@ -234,21 +234,21 @@ impl Test for () {\n }\n \"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw unsafe\n-            kw fn\n-            kw const\n-            kw type\n-            ta type Type1 =\n             ct const CONST1: () =\n             fn fn function1()\n+            ma makro!(\u2026)          macro_rules! makro\n+            md module\n+            ta type Type1 =\n+            kw const\n+            kw crate\n+            kw fn\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n             kw self\n             kw super\n-            kw crate\n-            md module\n-            ma makro!(\u2026)          macro_rules! makro\n+            kw type\n+            kw unsafe\n         \"#]],\n     );\n }"}, {"sha": "b353883bc7ec9250b7b8491f104b1c62b7b34351", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -22,8 +22,8 @@ fn quux() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n             kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -113,19 +113,19 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n+            ct CONST\n             en Enum\n-            bn Record    Record { field$1 }$0\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n-            bn Tuple     Tuple($1)$0\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n-            bn TupleV    TupleV($1)$0\n             ev TupleV\n-            ct CONST\n+            bn Record    Record { field$1 }$0\n+            bn Tuple     Tuple($1)$0\n+            bn TupleV    TupleV($1)$0\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -143,17 +143,17 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Record            Record { field$1 }$0\n+            en SingleVariantEnum\n+            ma makro!(\u2026)         macro_rules! makro\n+            md module\n             st Record\n-            bn Tuple             Tuple($1)$0\n             st Tuple\n-            ev Variant\n-            md module\n-            en SingleVariantEnum\n             st Unit\n-            ma makro!(\u2026)         macro_rules! makro\n+            ev Variant\n+            bn Record            Record { field$1 }$0\n+            bn Tuple             Tuple($1)$0\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -166,15 +166,15 @@ fn foo(a$0) {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Record    Record { field$1 }: Record$0\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n-            bn Tuple     Tuple($1): Tuple$0\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            bn Record    Record { field$1 }: Record$0\n+            bn Tuple     Tuple($1): Tuple$0\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n     check(\n@@ -183,15 +183,15 @@ fn foo(a$0: Tuple) {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Record    Record { field$1 }$0\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n-            bn Tuple     Tuple($1)$0\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            bn Record    Record { field$1 }$0\n+            bn Tuple     Tuple($1)$0\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -210,9 +210,9 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n             ma m!(\u2026) macro_rules! m\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -229,10 +229,10 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n             en E\n             ma m!(\u2026) macro_rules! m\n+            kw mut\n+            kw ref\n         \"#]],\n     );\n }\n@@ -253,14 +253,14 @@ fn outer() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Record    Record { field$1, .. }$0\n+            md foo\n+            st Invisible\n             st Record\n-            bn Tuple     Tuple($1, ..)$0\n             st Tuple\n-            st Invisible\n-            md foo\n+            bn Record    Record { field$1, .. }$0\n+            bn Tuple     Tuple($1, ..)$0\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -279,12 +279,12 @@ impl Foo {\n }\n     \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Self Self($1)$0\n             sp Self\n-            bn Foo  Foo($1)$0\n             st Foo\n+            bn Foo  Foo($1)$0\n+            bn Self Self($1)$0\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -303,10 +303,10 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026)   TupleV(u32)\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n             ev RecordV {\u2026} RecordV { field: u32 }\n+            ev TupleV(\u2026)   TupleV(u32)\n             ev UnitV       UnitV\n-            ct ASSOC_CONST const ASSOC_CONST: ()\n         \"#]],\n     );\n }\n@@ -320,12 +320,12 @@ struct Bar(u32);\n fn outer(Foo { bar: $0 }: Foo) {}\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Foo Foo { bar$1 }$0\n+            st Bar\n             st Foo\n             bn Bar Bar($1)$0\n-            st Bar\n+            bn Foo Foo { bar$1 }$0\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -351,12 +351,12 @@ struct Bar(u32);\n fn foo($0) {}\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Foo Foo { bar$1 }: Foo$0\n+            st Bar\n             st Foo\n             bn Bar Bar($1): Bar$0\n-            st Bar\n+            bn Foo Foo { bar$1 }: Foo$0\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -372,12 +372,12 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            kw ref\n-            kw mut\n-            bn Foo Foo { bar$1 }$0\n+            st Bar\n             st Foo\n             bn Bar Bar($1)$0\n-            st Bar\n+            bn Foo Foo { bar$1 }$0\n+            kw mut\n+            kw ref\n         \"#]],\n     )\n }\n@@ -394,9 +394,9 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n+            kw crate::\n             kw self::\n             kw super::\n-            kw crate::\n         \"#]],\n     );\n     check_empty(\n@@ -409,13 +409,13 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n+            fn foo()  fn()\n+            st Foo\n+            bt u32\n+            kw crate\n             kw return\n             kw self\n             kw super\n-            kw crate\n-            st Foo\n-            fn foo()  fn()\n-            bt u32\n         \"#]],\n     );\n     check_empty("}, {"sha": "cc18bf445360e3fc1b69f2ec7b304cffa0a5f748", "filename": "crates/ide-completion/src/tests/predicate.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -16,19 +16,19 @@ fn predicate_start() {\n struct Foo<'lt, T, const C: usize> where $0 {}\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -40,12 +40,12 @@ fn bound_for_type_pred() {\n struct Foo<'lt, T, const C: usize> where T: $0 {}\n \"#,\n         expect![[r#\"\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            tt Trait\n+            kw crate\n             kw self\n             kw super\n-            kw crate\n-            tt Trait\n-            md module\n-            ma makro!(\u2026) macro_rules! makro\n         \"#]],\n     );\n }\n@@ -59,12 +59,12 @@ fn bound_for_lifetime_pred() {\n struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n \"#,\n         expect![[r#\"\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            tt Trait\n+            kw crate\n             kw self\n             kw super\n-            kw crate\n-            tt Trait\n-            md module\n-            ma makro!(\u2026) macro_rules! makro\n         \"#]],\n     );\n }\n@@ -76,12 +76,12 @@ fn bound_for_for_pred() {\n struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n \"#,\n         expect![[r#\"\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            tt Trait\n+            kw crate\n             kw self\n             kw super\n-            kw crate\n-            tt Trait\n-            md module\n-            ma makro!(\u2026) macro_rules! makro\n         \"#]],\n     );\n }\n@@ -93,19 +93,19 @@ fn param_list_for_for_pred() {\n struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -119,19 +119,19 @@ impl Record {\n }\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            sp Self\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            sp Self\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }"}, {"sha": "9eae6f84954b173285bb8da2dbd5b2f5f0cc764d", "filename": "crates/ide-completion/src/tests/proc_macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -25,15 +25,15 @@ fn main() {\n \"#,\n         expect![[r#\"\n             me foo() fn(&self)\n-            sn ref   &expr\n-            sn refm  &mut expr\n-            sn match match expr {}\n             sn box   Box::new(expr)\n+            sn call  function(expr)\n             sn dbg   dbg!(expr)\n             sn dbgr  dbg!(&expr)\n-            sn call  function(expr)\n             sn let   let\n             sn letm  let mut\n+            sn match match expr {}\n+            sn ref   &expr\n+            sn refm  &mut expr\n         \"#]],\n     )\n }\n@@ -55,15 +55,15 @@ fn main() {\n \"#,\n         expect![[r#\"\n             me foo() fn(&self)\n-            sn ref   &expr\n-            sn refm  &mut expr\n-            sn match match expr {}\n             sn box   Box::new(expr)\n+            sn call  function(expr)\n             sn dbg   dbg!(expr)\n             sn dbgr  dbg!(&expr)\n-            sn call  function(expr)\n             sn let   let\n             sn letm  let mut\n+            sn match match expr {}\n+            sn ref   &expr\n+            sn refm  &mut expr\n         \"#]],\n     )\n }\n@@ -87,15 +87,15 @@ fn main() {}\n \"#,\n         expect![[r#\"\n             me foo() fn(&self)\n-            sn ref   &expr\n-            sn refm  &mut expr\n-            sn match match expr {}\n             sn box   Box::new(expr)\n+            sn call  function(expr)\n             sn dbg   dbg!(expr)\n             sn dbgr  dbg!(&expr)\n-            sn call  function(expr)\n             sn let   let\n             sn letm  let mut\n+            sn match match expr {}\n+            sn ref   &expr\n+            sn refm  &mut expr\n         \"#]],\n     )\n }\n@@ -119,15 +119,15 @@ fn main() {}\n \"#,\n         expect![[r#\"\n             me foo() fn(&self)\n-            sn ref   &expr\n-            sn refm  &mut expr\n-            sn match match expr {}\n             sn box   Box::new(expr)\n+            sn call  function(expr)\n             sn dbg   dbg!(expr)\n             sn dbgr  dbg!(&expr)\n-            sn call  function(expr)\n             sn let   let\n             sn letm  let mut\n+            sn match match expr {}\n+            sn ref   &expr\n+            sn refm  &mut expr\n         \"#]],\n     )\n }"}, {"sha": "bae5ddb53940a1404d8c328fcae6f747be31adce", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -155,32 +155,32 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw return\n-            st Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n             fd ..Default::default()\n             fd foo1                 u32\n             fd foo2                 u32\n-            kw self\n-            kw super\n-            kw crate\n+            fn main()               fn()\n             lc foo                  Foo\n             lc thing                i32\n-            st Foo\n-            fn main()               fn()\n             md core\n-            bt u32\n-            tt Sized\n+            st Foo\n+            st Foo {\u2026}              Foo { foo1: u32, foo2: u32 }\n             tt Default\n+            tt Sized\n+            bt u32\n+            kw crate\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw self\n+            kw super\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n         \"#]],\n     );\n     check(\n@@ -198,9 +198,9 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            fn default() (as Default) fn() -> Self\n             fd foo1                   u32\n             fd foo2                   u32\n+            fn default() (as Default) fn() -> Self\n         \"#]],\n     );\n }\n@@ -218,8 +218,8 @@ fn foo() {\n }\n         \"#,\n         expect![[r#\"\n-            fd foo u32\n             fd bar f32\n+            fd foo u32\n         \"#]],\n     )\n }"}, {"sha": "fcbb2e05a797c8c6d8153904f08ee0e51e13b8fe", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -17,21 +17,21 @@ struct Foo<'lt, T, const C: usize> {\n }\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            sp Self\n-            tp T\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n+            sp Self\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     )\n }\n@@ -43,24 +43,24 @@ fn tuple_struct_field() {\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub(super)\n-            kw pub\n-            kw self\n-            kw super\n-            kw crate\n-            sp Self\n-            tp T\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n+            sp Self\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026)  macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n             bt u32\n+            kw crate\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+            kw self\n+            kw super\n         \"#]],\n     )\n }\n@@ -72,19 +72,19 @@ fn fn_return_type() {\n fn x<'lt, T, const C: usize>() -> $0\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tp T\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -97,20 +97,20 @@ struct Foo<T>(T);\n const FOO: $0 = Foo(2);\n \"#,\n         expect![[r#\"\n-            it Foo<i32>\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            it Foo<i32>\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -125,19 +125,19 @@ fn f2() {\n }\n \"#,\n         expect![[r#\"\n-            it i32\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            it i32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -154,19 +154,19 @@ fn f2() {\n }\n \"#,\n         expect![[r#\"\n-            it u64\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            it u64\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -180,19 +180,19 @@ fn f2(x: u64) -> $0 {\n }\n \"#,\n         expect![[r#\"\n-            it u64\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            it u64\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -207,19 +207,19 @@ fn f2(x: $0) {\n }\n \"#,\n         expect![[r#\"\n-            it i32\n-            kw self\n-            kw super\n-            kw crate\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n             bt u32\n+            it i32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -240,21 +240,21 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n-            it a::Foo<a::Foo<i32>>\n-            kw self\n-            kw super\n-            kw crate\n-            tp T\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026)           macro_rules! makro\n+            md a\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026)           macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n-            md a\n             bt u32\n+            it a::Foo<a::Foo<i32>>\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -270,21 +270,21 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n-            it Foo<i32>\n-            kw self\n-            kw super\n-            kw crate\n-            tp T\n-            tt Trait\n             en Enum\n-            st Record\n-            st Tuple\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n             st Foo<\u2026>\n+            st Record\n+            st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n             bt u32\n+            it Foo<i32>\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n }\n@@ -299,19 +299,19 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            tp T\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n+            tp T\n             un Union\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n     check(\n@@ -322,13 +322,13 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             un Union\n         \"#]],\n     );\n@@ -345,23 +345,23 @@ trait Trait2 {\n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n         expect![[r#\"\n-            kw self\n-            kw super\n-            kw crate\n-            ta Foo =  (as Trait2) type Foo\n-            tp T\n+            ct CONST\n             cp CONST_PARAM\n-            tt Trait\n             en Enum\n+            ma makro!(\u2026)          macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026)          macro_rules! makro\n+            tt Trait\n             tt Trait2\n+            ta Foo =  (as Trait2) type Foo\n+            tp T\n             un Union\n-            ct CONST\n             bt u32\n+            kw crate\n+            kw self\n+            kw super\n         \"#]],\n     );\n     check(\n@@ -373,16 +373,16 @@ trait Trait2 {\n fn foo<'lt, T: Trait2<self::$0>, const CONST_PARAM: usize>(_: T) {}\n     \"#,\n         expect![[r#\"\n-            tt Trait\n+            ct CONST\n             en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n             st Record\n             st Tuple\n-            md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            tt Trait\n             tt Trait2\n             un Union\n-            ct CONST\n         \"#]],\n     );\n }"}, {"sha": "70aa5e5468a5bff6395a05a1777c585a2e32a49e", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -24,9 +24,9 @@ mod foo {}\n         expect![[r#\"\n             md foo\n             md other_crate\n+            kw crate::\n             kw self::\n             kw super::\n-            kw crate::\n         \"#]],\n     );\n }\n@@ -60,8 +60,8 @@ mod foo { pub struct S; }\n use self::{foo::*, bar$0};\n \"#,\n         expect![[r#\"\n-            st S\n             md foo\n+            st S\n         \"#]],\n     );\n }\n@@ -91,8 +91,8 @@ mod foo {\n use foo::{$0}\n \"#,\n         expect![[r#\"\n-            kw self\n             md bar\n+            kw self\n         \"#]],\n     );\n }\n@@ -126,8 +126,8 @@ mod foo {\n use foo::{bar::{$0}}\n \"#,\n         expect![[r#\"\n-            kw self\n             md baz\n+            kw self\n         \"#]],\n     );\n }\n@@ -147,8 +147,8 @@ mod foo {\n struct Bar;\n \"#,\n         expect![[r#\"\n-            st Foo\n             ma foo macro_rules! foo_\n+            st Foo\n         \"#]],\n     );\n }\n@@ -200,10 +200,10 @@ mod foo {}\n struct Bar;\n \"#,\n         expect![[r#\"\n-            kw super::\n-            st Bar\n             md bar\n             md foo\n+            st Bar\n+            kw super::\n         \"#]],\n     );\n }\n@@ -221,9 +221,9 @@ mod a {\n }\n \"#,\n         expect![[r#\"\n-            kw super::\n-            md b\n             ct A\n+            md b\n+            kw super::\n         \"#]],\n     );\n }\n@@ -255,8 +255,8 @@ pub struct Foo;\n pub mod foo {}\n \"#,\n         expect![[r#\"\n-            st Foo\n             md foo\n+            st Foo\n         \"#]],\n     );\n }\n@@ -271,9 +271,9 @@ pub use $0;\n \"#,\n         expect![[r#\"\n             md bar\n+            kw crate::\n             kw self::\n             kw super::\n-            kw crate::\n         \"#]],\n     );\n }\n@@ -288,9 +288,9 @@ use {$0};\n \"#,\n         expect![[r#\"\n             md bar\n+            kw crate::\n             kw self::\n             kw super::\n-            kw crate::\n         \"#]],\n     );\n }"}, {"sha": "b77c595eeeca944fa3bb84f0e4d3241ad59fbebe", "filename": "crates/ide-completion/src/tests/visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=5280e08c13bad9e9a8e4c023c4ac05c6a9e8ba06", "patch": "@@ -16,10 +16,10 @@ fn empty_pub() {\n pub($0)\n \"#,\n         expect![[r#\"\n+            kw crate\n             kw in\n             kw self\n             kw super\n-            kw crate\n         \"#]],\n     );\n }\n@@ -31,9 +31,9 @@ fn after_in_kw() {\n pub(in $0)\n \"#,\n         expect![[r#\"\n+            kw crate\n             kw self\n             kw super\n-            kw crate\n         \"#]],\n     );\n }"}]}