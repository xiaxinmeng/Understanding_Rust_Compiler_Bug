{"sha": "aeb9a2b72cf94ae15624482abf89f2de7a538aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYjlhMmI3MmNmOTRhZTE1NjI0NDgyYWJmODlmMmRlN2E1MzhhZWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-14T22:32:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-14T22:39:24Z"}, "message": "Add zero check/fail paths on div/mod paths. Close #944.", "tree": {"sha": "6803f329b66254d3c0583fe647a000264bc0455a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6803f329b66254d3c0583fe647a000264bc0455a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb9a2b72cf94ae15624482abf89f2de7a538aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb9a2b72cf94ae15624482abf89f2de7a538aed", "html_url": "https://github.com/rust-lang/rust/commit/aeb9a2b72cf94ae15624482abf89f2de7a538aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb9a2b72cf94ae15624482abf89f2de7a538aed/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4fa2611c6d21d104b35f7e585fc32195a2d61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4fa2611c6d21d104b35f7e585fc32195a2d61d", "html_url": "https://github.com/rust-lang/rust/commit/aa4fa2611c6d21d104b35f7e585fc32195a2d61d"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "21b9549cf822979a1bd835c78f44caf98da140b1", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=aeb9a2b72cf94ae15624482abf89f2de7a538aed", "patch": "@@ -1634,11 +1634,38 @@ fn cast_shift_rhs(op: ast::binop,\n     }\n }\n \n+fn fail_if_zero(cx: block, span: span, divmod: ast::binop,\n+                rhs: ValueRef, rhs_t: ty::t) -> block {\n+    let text = if divmod == ast::div {\n+        \"divide by zero\"\n+    } else {\n+        \"modulo zero\"\n+    };\n+    let is_zero = alt ty::get(rhs_t).struct {\n+      ty::ty_int(t) {\n+        let zero = C_integral(T_int_ty(cx.ccx(), t), 0u64, False);\n+        ICmp(cx, lib::llvm::IntEQ, rhs, zero)\n+      }\n+      ty::ty_uint(t) {\n+        let zero = C_integral(T_uint_ty(cx.ccx(), t), 0u64, False);\n+        ICmp(cx, lib::llvm::IntEQ, rhs, zero)\n+      }\n+      _ {\n+        cx.tcx().sess.bug(\"fail-if-zero on unexpected type: \" +\n+                          ty_to_str(cx.ccx().tcx, rhs_t));\n+      }\n+    };\n+    with_cond(cx, is_zero) {|bcx|\n+        trans_fail(bcx, some(span), text)\n+    }\n+}\n+\n // Important to get types for both lhs and rhs, because one might be _|_\n // and the other not.\n-fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n+fn trans_eager_binop(cx: block, span: span, op: ast::binop, lhs: ValueRef,\n                      lhs_t: ty::t, rhs: ValueRef, rhs_t: ty::t, dest: dest)\n     -> block {\n+    let mut cx = cx;\n     let _icx = cx.insn_ctxt(\"trans_eager_binop\");\n     if dest == ignore { ret cx; }\n     let intype = {\n@@ -1667,16 +1694,30 @@ fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n         else { Mul(cx, lhs, rhs) }\n       }\n       ast::div {\n-        if is_float { FDiv(cx, lhs, rhs) }\n-        else if ty::type_is_signed(intype) {\n-            SDiv(cx, lhs, rhs)\n-        } else { UDiv(cx, lhs, rhs) }\n+        if is_float {\n+            FDiv(cx, lhs, rhs)\n+        } else {\n+            // Only zero-check integers; fp /0 is NaN\n+            cx = fail_if_zero(cx, span, op, rhs, rhs_t);\n+            if ty::type_is_signed(intype) {\n+                SDiv(cx, lhs, rhs)\n+            } else {\n+                UDiv(cx, lhs, rhs)\n+            }\n+        }\n       }\n       ast::rem {\n-        if is_float { FRem(cx, lhs, rhs) }\n-        else if ty::type_is_signed(intype) {\n-            SRem(cx, lhs, rhs)\n-        } else { URem(cx, lhs, rhs) }\n+        if is_float {\n+            FRem(cx, lhs, rhs)\n+        } else {\n+            // Only zero-check integers; fp %0 is NaN\n+            cx = fail_if_zero(cx, span, op, rhs, rhs_t);\n+            if ty::type_is_signed(intype) {\n+                SRem(cx, lhs, rhs)\n+            } else {\n+                URem(cx, lhs, rhs)\n+            }\n+        }\n       }\n       ast::bitor { Or(cx, lhs, rhs) }\n       ast::bitand { And(cx, lhs, rhs) }\n@@ -1744,7 +1785,8 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n           _ { }\n         }\n     }\n-    ret trans_eager_binop(bcx, op, Load(bcx, lhs_res.val), t, rhs_val, t,\n+    ret trans_eager_binop(bcx, ex.span,\n+                          op, Load(bcx, lhs_res.val), t, rhs_val, t,\n                           save_in(lhs_res.val));\n }\n \n@@ -1885,7 +1927,8 @@ fn trans_binary(bcx: block, op: ast::binop, lhs: @ast::expr,\n         // Remaining cases are eager:\n         let lhs_res = trans_temp_expr(bcx, lhs);\n         let rhs_res = trans_temp_expr(lhs_res.bcx, rhs);\n-        ret trans_eager_binop(rhs_res.bcx, op, lhs_res.val,\n+        ret trans_eager_binop(rhs_res.bcx, ex.span,\n+                              op, lhs_res.val,\n                               expr_ty(bcx, lhs), rhs_res.val,\n                               expr_ty(bcx, rhs), dest);\n       }"}, {"sha": "8eb0d427ca43ea75096e5040134fe9d92d72d4c4", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=aeb9a2b72cf94ae15624482abf89f2de7a538aed", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:divide by zero\n+fn main() {\n+    let y = 0;\n+    let z = 1 / y;\n+}"}, {"sha": "7a10ed05aafe53303dd9a8e7291adebc2a8cd2e2", "filename": "src/test/run-fail/mod-zero.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb9a2b72cf94ae15624482abf89f2de7a538aed/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=aeb9a2b72cf94ae15624482abf89f2de7a538aed", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:modulo zero\n+fn main() {\n+    let y = 0;\n+    let z = 1 % y;\n+}"}]}