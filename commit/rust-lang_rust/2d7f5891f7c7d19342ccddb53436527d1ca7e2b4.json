{"sha": "2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "node_id": "C_kwDOAAsO6NoAKDJkN2Y1ODkxZjdjN2QxOTM0MmNjZGRiNTM0MzY1MjdkMWNhN2UyYjQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-11T17:47:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-11T17:47:24Z"}, "message": "Remove faulty logic for ascending test attributes for runnables", "tree": {"sha": "79a98a4a14d8a6ab987e583ef29f249ca7ff461a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a98a4a14d8a6ab987e583ef29f249ca7ff461a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "html_url": "https://github.com/rust-lang/rust/commit/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a510021065e8ae3d4f052f67553b5415aabc68fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a510021065e8ae3d4f052f67553b5415aabc68fa", "html_url": "https://github.com/rust-lang/rust/commit/a510021065e8ae3d4f052f67553b5415aabc68fa"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "0c4fdfa0fe59c248fa893b9856010252069bcecc", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "patch": "@@ -699,23 +699,6 @@ impl<N: AstNode> InFile<N> {\n     pub fn syntax(&self) -> InFile<&SyntaxNode> {\n         self.with_value(self.value.syntax())\n     }\n-\n-    pub fn nodes_with_attributes<'db>(\n-        self,\n-        db: &'db dyn db::AstDatabase,\n-    ) -> impl Iterator<Item = InFile<N>> + 'db\n-    where\n-        N: 'db,\n-    {\n-        iter::successors(Some(self), move |node| {\n-            let InFile { file_id, value } = node.file_id.call_node(db)?;\n-            N::cast(value).map(|n| InFile::new(file_id, n))\n-        })\n-    }\n-\n-    pub fn node_with_attributes(self, db: &dyn db::AstDatabase) -> InFile<N> {\n-        self.nodes_with_attributes(db).last().unwrap()\n-    }\n }\n \n /// In Rust, macros expand token trees to token trees. When we want to turn a"}, {"sha": "40c6b2115988c7158559c24307e366acf36d2a5a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "patch": "@@ -236,9 +236,7 @@ fn find_related_tests(\n                 .filter_map(|token| token.ancestors().find_map(ast::Fn::cast))\n                 .map(|f| hir::InFile::new(sema.hir_file_for(f.syntax()), f));\n \n-            for fn_def in functions {\n-                // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-                let InFile { value: fn_def, .. } = &fn_def.node_with_attributes(sema.db);\n+            for InFile { value: ref fn_def, .. } in functions {\n                 if let Some(runnable) = as_test_runnable(sema, fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n@@ -294,8 +292,7 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n-    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-    let func = def.source(sema.db)?.node_with_attributes(sema.db);\n+    let func = def.source(sema.db)?;\n     let name_string = def.name(sema.db).to_string();\n \n     let root = def.module(sema.db).krate().root_module(sema.db);\n@@ -504,8 +501,6 @@ fn has_test_function_or_multiple_test_submodules(\n         match item {\n             hir::ModuleDef::Function(f) => {\n                 if let Some(it) = f.source(sema.db) {\n-                    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-                    let it = it.node_with_attributes(sema.db);\n                     if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }"}]}