{"sha": "e70f7dc10c622e0ffec4b264235ad203b4047171", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGY3ZGMxMGM2MjJlMGZmZWM0YjI2NDIzNWFkMjAzYjQwNDcxNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T22:27:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T22:27:57Z"}, "message": "Minor", "tree": {"sha": "fe3b2a9c5e1facf36807730129be1a66a827b79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3b2a9c5e1facf36807730129be1a66a827b79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70f7dc10c622e0ffec4b264235ad203b4047171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70f7dc10c622e0ffec4b264235ad203b4047171", "html_url": "https://github.com/rust-lang/rust/commit/e70f7dc10c622e0ffec4b264235ad203b4047171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70f7dc10c622e0ffec4b264235ad203b4047171/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72fb712dff63a518e5b607030266e30ea7542756", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fb712dff63a518e5b607030266e30ea7542756", "html_url": "https://github.com/rust-lang/rust/commit/72fb712dff63a518e5b607030266e30ea7542756"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "891fdb96d1de90976d6aaddc265a76ecdde236ee", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=e70f7dc10c622e0ffec4b264235ad203b4047171", "patch": "@@ -59,7 +59,7 @@ impl<'a> RequestDispatcher<'a> {\n             }\n         };\n \n-        self.global_state.task_pool.0.spawn({\n+        self.global_state.task_pool.handle.spawn({\n             let world = self.global_state.snapshot();\n             move || {\n                 let result = f(world, params);"}, {"sha": "17de2a075abd2172f89a2589c443cdcc7d3395ac", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=e70f7dc10c622e0ffec4b264235ad203b4047171", "patch": "@@ -13,7 +13,7 @@ use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n-use vfs::loader::Handle;\n+use vfs::loader::Handle as _;\n \n use crate::{\n     config::Config,\n@@ -42,19 +42,26 @@ impl Default for Status {\n     }\n }\n \n+// Enforces drop order\n+pub(crate) struct Handle<H, C> {\n+    pub(crate) handle: H,\n+    pub(crate) receiver: C,\n+}\n+\n /// `GlobalState` is the primary mutable state of the language server\n ///\n /// The most interesting components are `vfs`, which stores a consistent\n /// snapshot of the file systems, and `analysis_host`, which stores our\n /// incremental salsa database.\n+///\n+/// Note that this struct has more than on impl in various modules!\n pub(crate) struct GlobalState {\n     sender: Sender<lsp_server::Message>,\n+    pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n+    pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n+    pub(crate) flycheck: Option<Handle<FlycheckHandle, Receiver<flycheck::Message>>>,\n     pub(crate) config: Config,\n-    pub(crate) task_pool: (TaskPool<Task>, Receiver<Task>),\n     pub(crate) analysis_host: AnalysisHost,\n-    pub(crate) loader: Box<dyn vfs::loader::Handle>,\n-    pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n-    pub(crate) flycheck: Option<(FlycheckHandle, Receiver<flycheck::Message>)>,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: FxHashSet<VfsPath>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -82,37 +89,36 @@ impl GlobalState {\n         lru_capacity: Option<usize>,\n         config: Config,\n     ) -> GlobalState {\n-        let (task_sender, task_receiver) = unbounded::<vfs::loader::Message>();\n-\n         let loader = {\n-            let loader = vfs_notify::NotifyHandle::spawn(Box::new(move |msg| {\n-                task_sender.send(msg).unwrap()\n-            }));\n-            Box::new(loader)\n+            let (sender, receiver) = unbounded::<vfs::loader::Message>();\n+            let handle =\n+                vfs_notify::NotifyHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n+            let handle = Box::new(handle) as Box<dyn vfs::loader::Handle>;\n+            Handle { handle, receiver }\n         };\n \n         let task_pool = {\n             let (sender, receiver) = unbounded();\n-            (TaskPool::new(sender), receiver)\n+            let handle = TaskPool::new(sender);\n+            Handle { handle, receiver }\n         };\n \n         GlobalState {\n             sender,\n-            config,\n             task_pool,\n-            analysis_host: AnalysisHost::new(lru_capacity),\n             loader,\n-            task_receiver,\n+            config,\n+            analysis_host: AnalysisHost::new(lru_capacity),\n             flycheck: None,\n             diagnostics: Default::default(),\n             mem_docs: FxHashSet::default(),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n             status: Status::default(),\n             req_queue: ReqQueue::default(),\n-            latest_requests: Default::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: ProcMacroClient::dummy(),\n             workspaces: Arc::new(Vec::new()),\n+            latest_requests: Default::default(),\n         }\n     }\n "}, {"sha": "d4879283dc3ff9d0942b389e3afe9debe61921a2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e70f7dc10c622e0ffec4b264235ad203b4047171", "patch": "@@ -100,13 +100,13 @@ impl GlobalState {\n             recv(inbox) -> msg =>\n                 msg.ok().map(Event::Lsp),\n \n-            recv(self.task_pool.1) -> task =>\n+            recv(self.task_pool.receiver) -> task =>\n                 Some(Event::Task(task.unwrap())),\n \n-            recv(self.task_receiver) -> task =>\n+            recv(self.loader.receiver) -> task =>\n                 Some(Event::Vfs(task.unwrap())),\n \n-            recv(self.flycheck.as_ref().map_or(&never(), |it| &it.1)) -> task =>\n+            recv(self.flycheck.as_ref().map_or(&never(), |it| &it.receiver)) -> task =>\n                 Some(Event::Flycheck(task.unwrap())),\n         }\n     }\n@@ -132,7 +132,7 @@ impl GlobalState {\n         let _p = profile(\"GlobalState::handle_event\");\n \n         log::info!(\"handle_event({:?})\", event);\n-        let queue_count = self.task_pool.0.len();\n+        let queue_count = self.task_pool.handle.len();\n         if queue_count > 0 {\n             log::info!(\"queued count = {}\", queue_count);\n         }\n@@ -233,7 +233,7 @@ impl GlobalState {\n         let state_changed = self.process_changes();\n         if became_ready {\n             if let Some(flycheck) = &self.flycheck {\n-                flycheck.0.update();\n+                flycheck.handle.update();\n             }\n         }\n \n@@ -370,7 +370,7 @@ impl GlobalState {\n                         log::error!(\"orphan DidCloseTextDocument: {}\", path)\n                     }\n                     if let Some(path) = path.as_path() {\n-                        this.loader.invalidate(path.to_path_buf());\n+                        this.loader.handle.invalidate(path.to_path_buf());\n                     }\n                 }\n                 let params = lsp_types::PublishDiagnosticsParams {\n@@ -384,7 +384,7 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, _params| {\n                 if let Some(flycheck) = &this.flycheck {\n-                    flycheck.0.update();\n+                    flycheck.handle.update();\n                 }\n                 Ok(())\n             })?\n@@ -427,7 +427,7 @@ impl GlobalState {\n             .on::<lsp_types::notification::DidChangeWatchedFiles>(|this, params| {\n                 for change in params.changes {\n                     if let Ok(path) = from_proto::abs_path(&change.uri) {\n-                        this.loader.invalidate(path);\n+                        this.loader.handle.invalidate(path);\n                     }\n                 }\n                 Ok(())\n@@ -440,7 +440,7 @@ impl GlobalState {\n         if self.config.publish_diagnostics {\n             let snapshot = self.snapshot();\n             let subscriptions = subscriptions.clone();\n-            self.task_pool.0.spawn(move || {\n+            self.task_pool.handle.spawn(move || {\n                 let diagnostics = subscriptions\n                     .into_iter()\n                     .filter_map(|file_id| {\n@@ -458,7 +458,7 @@ impl GlobalState {\n                 Task::Diagnostics(diagnostics)\n             })\n         }\n-        self.task_pool.0.spawn({\n+        self.task_pool.handle.spawn({\n             let subs = subscriptions;\n             let snap = self.snapshot();\n             move || {"}, {"sha": "a22d3e26234ae81bda8d7f54344246497e388948", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70f7dc10c622e0ffec4b264235ad203b4047171/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e70f7dc10c622e0ffec4b264235ad203b4047171", "patch": "@@ -11,7 +11,7 @@ use vfs::{file_set::FileSetConfig, AbsPath};\n \n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n-    global_state::GlobalState,\n+    global_state::{GlobalState, Handle},\n };\n \n impl GlobalState {\n@@ -105,15 +105,15 @@ impl GlobalState {\n             FilesWatcher::Client => vec![],\n             FilesWatcher::Notify => project_folders.watch,\n         };\n-        self.loader.set_config(vfs::loader::Config { load: project_folders.load, watch });\n+        self.loader.handle.set_config(vfs::loader::Config { load: project_folders.load, watch });\n \n         // Create crate graph from all the workspaces\n         let crate_graph = {\n             let mut crate_graph = CrateGraph::default();\n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n             let mut load = |path: &AbsPath| {\n-                let contents = loader.load_sync(path);\n+                let contents = loader.handle.load_sync(path);\n                 let path = vfs::VfsPath::from(path.to_path_buf());\n                 vfs.set_file_contents(path.clone(), contents);\n                 vfs.file_id(&path)\n@@ -153,9 +153,9 @@ impl GlobalState {\n                 let (sender, receiver) = unbounded();\n                 let sender = Box::new(move |msg| sender.send(msg).unwrap());\n                 let cargo_project_root = cargo.workspace_root().to_path_buf();\n-                let flycheck =\n+                let handle =\n                     FlycheckHandle::spawn(sender, config.clone(), cargo_project_root.into());\n-                Some((flycheck, receiver))\n+                Some(Handle { handle, receiver })\n             }\n             ProjectWorkspace::Json { .. } => {\n                 log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");"}]}