{"sha": "f1ab6f93e6c25170b78ec21105ecbb6893080993", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWI2ZjkzZTZjMjUxNzBiNzhlYzIxMTA1ZWNiYjY4OTMwODA5OTM=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-27T18:55:38Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-16T04:22:01Z"}, "message": "Make GATs no longer incomplete", "tree": {"sha": "a38bfbb802c4c4dd343a2c1b88eab9a4f8a8dc41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38bfbb802c4c4dd343a2c1b88eab9a4f8a8dc41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ab6f93e6c25170b78ec21105ecbb6893080993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ab6f93e6c25170b78ec21105ecbb6893080993", "html_url": "https://github.com/rust-lang/rust/commit/f1ab6f93e6c25170b78ec21105ecbb6893080993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ab6f93e6c25170b78ec21105ecbb6893080993/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e42058811e448b1a7dd8630d86ab247fbfcb9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e42058811e448b1a7dd8630d86ab247fbfcb9b", "html_url": "https://github.com/rust-lang/rust/commit/27e42058811e448b1a7dd8630d86ab247fbfcb9b"}], "stats": {"total": 784, "additions": 197, "deletions": 587}, "files": [{"sha": "64f0824e355ede5a8fddaa84d265e10f04777502", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -405,7 +405,7 @@ declare_features! (\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (incomplete, generic_associated_types, \"1.23.0\", Some(44265), None),\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),"}, {"sha": "ccdbccae156c34cb2d2f5e6e066c8ee57dc652f4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -2315,7 +2315,7 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(generic_associated_types)]\n+    /// #![feature(const_generics)]\n     /// ```\n     ///\n     /// {{produces}}"}, {"sha": "0944bf110c1b5211a74d70797d57535e1be0a576", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "22fbc0271b481af2fc85d8c7a03a77c6dccdd1b9", "filename": "src/test/ui/generic-associated-types/collections-project-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/collections-project-default.rs:60:5\n+  --> $DIR/collections-project-default.rs:59:5\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type"}, {"sha": "f14c6dac1b1ed9d28436adfc09c4dd511baf5f68", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "afde5f37634b1d1722c34b7db6ad4d64a8c3ba0a", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Foo::Assoc GAT."}, {"sha": "51046be79b7e5af1719378354c95656e105df107", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Foo::Assoc GAT."}, {"sha": "457fe27b3ff3aacbbc1009409cee4e8bc9dfd1d1", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Bar::Assoc GAT."}, {"sha": "e315ee842180ed30c03acdd34e728d1c26fefeb0", "filename": "src/test/ui/generic-associated-types/constraint-assoc-type-suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Test that correct syntax is used in suggestion to constrain associated type\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<T>;"}, {"sha": "ad02202dfc90c0e22a153f20ac703000a0e9bc3c", "filename": "src/test/ui/generic-associated-types/constraint-assoc-type-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/constraint-assoc-type-suggestion.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/constraint-assoc-type-suggestion.rs:13:23\n+  --> $DIR/constraint-assoc-type-suggestion.rs:12:23\n    |\n LL |     let b: Vec<i32> = a;\n    |            --------   ^ expected struct `Vec`, found associated type\n@@ -22,6 +13,6 @@ help: consider constraining the associated type `<T as X>::Y<i32>` to `Vec<i32>`\n LL | fn f<T: X<Y<i32> = Vec<i32>>>(a: T::Y<i32>) {\n    |          ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "9ae328cc48b1d988d8a9fecd3632987ab2d8a219", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n // check-pass"}, {"sha": "772b7f2b4e3012e8cbc100161abd5fd563ab6045", "filename": "src/test/ui/generic-associated-types/empty_generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Foo {"}, {"sha": "ac22bfc0835b946e769f5ef7ab86e4719440373f", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/empty_generics.rs:5:14\n+  --> $DIR/empty_generics.rs:4:14\n    |\n LL | trait Foo {\n    |           - while parsing this item list starting here"}, {"sha": "f542a7f545e0be907c10bfdc678eaa89d5a0cc52", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n   type Y<'x>;"}, {"sha": "ce9df46483d136079ec4b81383b739f89b979297", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:35\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:35\n    |\n LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |        -                          ^^ undeclared lifetime\n@@ -18,12 +9,12 @@ LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:33\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:33\n    |\n LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0261, E0582.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "fb03a86e169715df91c5d4bcaae07a096c4f359b", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n trait Foo {"}, {"sha": "eb8e101a83d799cbae56e5eec1ac0965c47bb797", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-in-trait-path.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/gat-in-trait-path.rs:22:13\n+  --> $DIR/gat-in-trait-path.rs:21:13\n    |\n LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n    = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/gat-in-trait-path.rs:6:10\n+  --> $DIR/gat-in-trait-path.rs:5:10\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     type A<'a> where Self: 'a;\n    |          ^ ...because it contains the generic associated type `A`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "607ea1759888c6e857e4c3aa0dc69ef0bb95ac63", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n fn main() {}"}, {"sha": "0215ff395df7d835f0008855b0a1e6c7f5f6b9af", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr?ref=27e42058811e448b1a7dd8630d86ab247fbfcb9b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-incomplete-warning.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "246659a268ac933d07359093c05b0acfdbdb4a4a", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait Foo {\n     type F<'a>;"}, {"sha": "310f722e120fdf8ef49045ffbaa82f3f64fff6f9", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,22 +1,13 @@\n error[E0403]: the name `T1` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:11:12\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:10:12\n    |\n LL | impl <T, T1> Foo for T {\n    |          -- first use of `T1`\n LL |     type F<T1> = &[u8];\n    |            ^^ already used\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0106]: missing lifetime specifier\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:11:18\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:10:18\n    |\n LL |     type F<T1> = &[u8];\n    |                  ^ expected named lifetime parameter\n@@ -26,7 +17,7 @@ help: consider introducing a named lifetime parameter\n LL |     type F<'a, T1> = &'a [u8];\n    |            ^^^       ^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0106, E0403.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "9864787f0aa2f40287dffab453bd22045546dd94", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n   type Y<'a>;"}, {"sha": "9b63e8f30726b0381b16ffe44881321587ae9255", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:11:20\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:10:20\n    |\n LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:4:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n@@ -24,13 +15,13 @@ LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^^^^^\n \n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:11:20\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:10:20\n    |\n LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:4:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n@@ -39,6 +30,6 @@ help: add missing lifetime argument\n LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "48b4a4fc393777ecb289ecfc5e8468dec949af9f", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n   type Y<'a>;"}, {"sha": "d6fba8b8e4c8ac4ec4038b0ad94c942a5197e8f9", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,26 +1,17 @@\n error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:8:29\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:7:29\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^\n \n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:8:29\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:7:29\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n@@ -30,13 +21,13 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n@@ -46,19 +37,19 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n    |                             ^^^\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^---- help: remove these generics\n    |                           |\n    |                           expected 0 generic arguments\n    |\n note: associated type defined here, with 0 generic parameters\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n    |\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors; 2 warnings emitted\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "5d3a3a893527eec22a81d8e34129fc277116698e", "filename": "src/test/ui/generic-associated-types/generic-associated-type-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n pub trait X {"}, {"sha": "592ff9399232371489bbb3bb3aede873efcd2d4c", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n // Checking the interaction with this other feature"}, {"sha": "d65265438220999d516e0ac415053af58757e93e", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/generic-associated-types-where.rs:21:5\n+  --> $DIR/generic-associated-types-where.rs:20:5\n    |\n LL |     type Assoc2<T> = Vec<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n@@ -11,7 +11,7 @@ LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n    |                  ^^^^^^^^^^^^^^^^^^^\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/generic-associated-types-where.rs:23:5\n+  --> $DIR/generic-associated-types-where.rs:22:5\n    |\n LL |     type Assoc3<T>;\n    |     --------------- definition of `Assoc3` from trait"}, {"sha": "43058f7eb41bfb7930edf1549227083722fb78d7", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n use std::ops::Deref;"}, {"sha": "e87176e0fb27ba5c31b51506f8c70c0b20d5f2eb", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:9:37\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:8:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n@@ -15,7 +15,7 @@ LL |     type Iter<'b, 'a>: Iterator<Item = Self::Item<'a>>\n    |               ^^^\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:12:41\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime"}, {"sha": "01edad00a89f15408d93c5ae018360b569fb16b8", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "b80b7cf519bce4d97ce02487f855439fa08b00c5", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/impl_bounds.rs:16:5\n+  --> $DIR/impl_bounds.rs:15:5\n    |\n LL |     type A<'a> where Self: 'static = (&'a ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,48 +8,48 @@ LL |     type A<'a> where Self: 'static = (&'a ());\n    = note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:18:5\n+  --> $DIR/impl_bounds.rs:17:5\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 18:16\n-  --> $DIR/impl_bounds.rs:18:16\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 17:16\n+  --> $DIR/impl_bounds.rs:17:16\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 18:12\n-  --> $DIR/impl_bounds.rs:18:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 17:12\n+  --> $DIR/impl_bounds.rs:17:12\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:18:5\n+  --> $DIR/impl_bounds.rs:17:5\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 18:12\n-  --> $DIR/impl_bounds.rs:18:12\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 17:12\n+  --> $DIR/impl_bounds.rs:17:12\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 18:16\n-  --> $DIR/impl_bounds.rs:18:16\n+note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 17:16\n+  --> $DIR/impl_bounds.rs:17:16\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:21:5\n+  --> $DIR/impl_bounds.rs:20:5\n    |\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n note: the requirement `Fooy<T>: Copy` appears on the associated impl type `C` but not on the corresponding associated trait type\n-  --> $DIR/impl_bounds.rs:8:5\n+  --> $DIR/impl_bounds.rs:7:5\n    |\n LL | trait Foo {\n    |       --- in this trait\n@@ -62,14 +62,14 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:23:5\n+  --> $DIR/impl_bounds.rs:22:5\n    |\n LL |     fn d() where Self: Copy {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n note: the requirement `Fooy<T>: Copy` appears on the impl method `d` but not on the corresponding trait method\n-  --> $DIR/impl_bounds.rs:9:8\n+  --> $DIR/impl_bounds.rs:8:8\n    |\n LL | trait Foo {\n    |       --- in this trait"}, {"sha": "08120b9670f67da1a295391463d3aae2ce27d0c0", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "da5fca2a6569f942a833beb392ba72176dd54d53", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // Check that this program doesn't cause the compiler to error without output.\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Foo {"}, {"sha": "56677457726f7868229e2cf090a1c9ef4db3f690", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-47206-where-clause.rs:13:5\n+  --> $DIR/issue-47206-where-clause.rs:12:5\n    |\n LL |     type Assoc3<T>;\n    |     --------------- definition of `Assoc3` from trait"}, {"sha": "e87a76825c37de3793da7474208ae74abb2028d3", "filename": "src/test/ui/generic-associated-types/issue-58694-parameter-out-of-range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Cert {"}, {"sha": "d74d6d056d665e37b8d0c8b7e19d734fc37a83c0", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n // check-pass"}, {"sha": "99f0e84fa6df4c25b7d224bc8e6f0f79c56c5f45", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "8cc9f2816a166a30e05548ba800dd156a1c899b4", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67510-pass.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-67510-pass.rs:8:19\n+  --> $DIR/issue-67510-pass.rs:7:19\n    |\n LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n    = help: consider moving `Y` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-67510-pass.rs:5:10\n+  --> $DIR/issue-67510-pass.rs:4:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object...\n LL |     type Y<'a>;\n    |          ^ ...because it contains the generic associated type `Y`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "e81a5b231a0015f34f267b32f8324f04718bf61e", "filename": "src/test/ui/generic-associated-types/issue-67510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "8ed2854ed3057108bac806b838da23fc56e2bb98", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67510.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-67510.rs:8:21\n+  --> $DIR/issue-67510.rs:7:21\n    |\n LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |     -               ^^ undeclared lifetime\n@@ -18,7 +9,7 @@ LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-67510.rs:8:26\n+  --> $DIR/issue-67510.rs:7:26\n    |\n LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |     -                    ^^ undeclared lifetime\n@@ -27,6 +18,6 @@ LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |\n    = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0261`."}, {"sha": "617d985dce9fed60dfc433e8ea96f17136c7a5a3", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68641\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait UnsafeCopy {\n     type Item<'a>: Copy;"}, {"sha": "7ac1ccf0f37f3e60d29ad486032538ebb717354e", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68641-check-gat-bounds.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-68641-check-gat-bounds.rs:15:5\n+  --> $DIR/issue-68641-check-gat-bounds.rs:14:5\n    |\n LL |     type Item<'a>: Copy;\n    |                    ---- required by this bound in `UnsafeCopy::Item`\n@@ -21,6 +12,6 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::marker::Copy> UnsafeCopy for T {\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "def0ad18f2328e2b29ac0aa97650ca6303047700", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68642\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait Fun {\n     type F<'a>: Fn() -> u32;"}, {"sha": "4e609ca5484df50906fbf92f96f958113ff5cd86", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68642-broken-llvm-ir.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68642-broken-llvm-ir.rs:15:5\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:14:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ----------- required by this bound in `Fun::F`\n@@ -22,6 +13,6 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n    |       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "9af065b5d26d1003ea3244b8f3aeabd1c9062f41", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68643\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait Fun {\n     type F<'a>: Fn() -> u32;"}, {"sha": "44600bfcf96f7f6e7e0f4dfc059d68796f8621a9", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68643-broken-mir.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68643-broken-mir.rs:15:5\n+  --> $DIR/issue-68643-broken-mir.rs:14:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ----------- required by this bound in `Fun::F`\n@@ -22,6 +13,6 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n    |       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1d2636c260d8d3f5221f5c6029f351573882387b", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68644\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait Fun {\n     type F<'a>: Fn() -> u32;"}, {"sha": "2c21795e161993d3cb88cc095f6f86de2cad6684", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68644-codegen-selection.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68644-codegen-selection.rs:15:5\n+  --> $DIR/issue-68644-codegen-selection.rs:14:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ----------- required by this bound in `Fun::F`\n@@ -22,6 +13,6 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n    |       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "aa505064f8c513bf9726ea0693561304b3e70c6f", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68645\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait Fun {\n     type F<'a>: Fn() -> u32;"}, {"sha": "b2a2636d3eb9b4e5a64aac311951abeadd892264", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68645-codegen-fulfillment.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68645-codegen-fulfillment.rs:15:5\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:14:5\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ----------- required by this bound in `Fun::F`\n@@ -22,6 +13,6 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::ops::Fn<()>> Fun for T {\n    |       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "17bc034b39584219ca78e42346e459b8781434c5", "filename": "src/test/ui/generic-associated-types/issue-68648-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n \n trait Fun {"}, {"sha": "322a8f9e13f811209bb3ca880756be8e6c6971a7", "filename": "src/test/ui/generic-associated-types/issue-68648-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr?ref=27e42058811e448b1a7dd8630d86ab247fbfcb9b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68648-1.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6c9a0d126a78232f8cacdced7e59a2562fc5ebc7", "filename": "src/test/ui/generic-associated-types/issue-68648-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait Fun {\n     type F<'a>;"}, {"sha": "7a7d5a6c2313fbed08e806c66180b3ae643514e8", "filename": "src/test/ui/generic-associated-types/issue-68648-2.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68648-2.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/issue-68648-2.rs:15:17\n+  --> $DIR/issue-68648-2.rs:14:17\n    |\n LL | fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n    |            - this type parameter\n@@ -18,6 +9,6 @@ LL |     T::identity(())\n    = note: expected type parameter `T`\n                    found unit type `()`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "33f08faff56bd3ce23520eccad26ab27963d7244", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait Fun {\n     type F<'a>;"}, {"sha": "e4a2f8d2a640190c28ddf045c2c74fe19cb77d34", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27e42058811e448b1a7dd8630d86ab247fbfcb9b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr?ref=27e42058811e448b1a7dd8630d86ab247fbfcb9b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68649-pass.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1e84717e9259f9fe5c2e4c0ab5704be3abca19aa", "filename": "src/test/ui/generic-associated-types/issue-68653.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Fun {"}, {"sha": "c0d933362567e71182c2d6efabd7f08f6f5d7b00", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #68656\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n \n trait UnsafeCopy<T: Copy> {\n     type Item<'a>: std::ops::Deref<Target = T>;"}, {"sha": "9d90d6f608f7af58bbdfe705b9cdcdb2e3a7bdfd", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68656-unsized-values.rs:3:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n-  --> $DIR/issue-68656-unsized-values.rs:16:5\n+  --> $DIR/issue-68656-unsized-values.rs:15:5\n    |\n LL |     type Item<'a>: std::ops::Deref<Target = T>;\n    |                                    ---------- required by this bound in `UnsafeCopy::Item`\n@@ -25,6 +16,6 @@ help: consider further restricting this bound\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<T> for T {\n    |                                ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "d238f53bde7bee4df9e2d9d28628c710c3478e31", "filename": "src/test/ui/generic-associated-types/issue-70303.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Document {"}, {"sha": "ae64f9310d112912fb24bf32deaba3943153d377", "filename": "src/test/ui/generic-associated-types/issue-70304.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Document {"}, {"sha": "fd9e1acc557fa7a4ecb57746bdefd00348fc1a85", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-70304.rs:55:41\n+  --> $DIR/issue-70304.rs:54:41\n    |\n LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n    |                                         ^^ expected named lifetime parameter"}, {"sha": "c2f0d59f4435fc41b6d6bb05e188d532e5b5788e", "filename": "src/test/ui/generic-associated-types/issue-71176.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Provider {"}, {"sha": "f0babdaa60bea5337b0ae1f68f840261fac1a157", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `Provider::A`\n-  --> $DIR/issue-71176.rs:13:27\n+  --> $DIR/issue-71176.rs:12:27\n    |\n LL |   inner: Box<dyn Provider<A = B>>,\n    |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-71176.rs:5:10\n+  --> $DIR/issue-71176.rs:4:10\n    |\n LL |     type A<'a>;\n    |          ^ --"}, {"sha": "0e3899a88cc965ad02ca3a7e33e2a90c23867441", "filename": "src/test/ui/generic-associated-types/issue-74684-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait Fun {\n     type F<'a>: ?Sized;"}, {"sha": "2cd050ed8be6c3e9e7ec9e3d40c9e8351961fa7c", "filename": "src/test/ui/generic-associated-types/issue-74684-1.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74684-1.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-74684-1.rs:16:26\n+  --> $DIR/issue-74684-1.rs:15:26\n    |\n LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n    |        -- lifetime `'a` defined here\n@@ -22,6 +13,6 @@ LL |     let _x = T::identity(&a);\n LL | }\n    | - `a` dropped here while still borrowed\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "fca55070b5ba3cf596292f607d44951ad7869146", "filename": "src/test/ui/generic-associated-types/issue-74684-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait Fun {\n     type F<'a>: ?Sized;"}, {"sha": "23fb4285fc9d3a52d2b83939c0a824e881ea16af", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74684-2.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n-  --> $DIR/issue-74684-2.rs:24:5\n+  --> $DIR/issue-74684-2.rs:23:5\n    |\n LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n    |                            ------------ required by this bound in `bug`\n ...\n LL |     bug(Box::new(x));\n    |     ^^^ expected slice `[u8]`, found `i32`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "c932025d1178c79787208e1bb34e87270ff9cb60", "filename": "src/test/ui/generic-associated-types/issue-74816.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n #![feature(associated_type_defaults)]\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n trait Trait1 {\n     fn foo();"}, {"sha": "431182e79c4f07070989ebb38c8e2cdde1f40e6d", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Self: Trait1` is not satisfied\n-  --> $DIR/issue-74816.rs:10:5\n+  --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n    |     ^^^^^^^^^^^^^^^^^------^^^^^^^^\n@@ -13,7 +13,7 @@ LL | trait Trait2: Trait1 {\n    |             ^^^^^^^^\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-74816.rs:10:5\n+  --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1bbf7aac5cdabc6ff70bb90f645e3f85ccda02f8", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n-#![allow(incomplete_features)]\n \n use std::ops::Deref;\n "}, {"sha": "54cb3fba2b5872113765ea0808d534ed9125c64b", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Box<T>: Copy` is not satisfied\n-  --> $DIR/issue-74824.rs:8:5\n+  --> $DIR/issue-74824.rs:7:5\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |     ^^^^^^^^^^^^^^----^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type Copy<T>: Copy = Box<T>;\n    |     the trait `Copy` is not implemented for `Box<T>`\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/issue-74824.rs:8:5\n+  --> $DIR/issue-74824.rs:7:5\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |     ^^^^^^^^^^^^^^----^^^^^^^^^^"}, {"sha": "a8141829ba88924ba45128c84477dc9f3dfe0e7c", "filename": "src/test/ui/generic-associated-types/issue-76407.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n trait Marker {}\n "}, {"sha": "1dad856d5a370fd888f13e7b3e83cce8d46706ba", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature\n \n pub trait SubTrait {}\n "}, {"sha": "45af30e39651eef333b61492a2590638373d9389", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-76535.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: missing generics for associated type `SuperTrait::SubType`\n-  --> $DIR/issue-76535.rs:37:33\n+  --> $DIR/issue-76535.rs:36:33\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                 ^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-76535.rs:7:10\n+  --> $DIR/issue-76535.rs:6:10\n    |\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ --\n@@ -24,29 +15,29 @@ LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperS\n    |                                 ^^^^^^^^^^^\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:37:14\n+  --> $DIR/issue-76535.rs:36:14\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n    = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:7:10\n+  --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:37:57\n+  --> $DIR/issue-76535.rs:36:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n    = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:7:10\n+  --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n@@ -55,7 +46,7 @@ LL |     type SubType<'a>: SubTrait;\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n    = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "d3201a156a18cf22a4457bb50f305b3688fa5ba6", "filename": "src/test/ui/generic-associated-types/issue-76826.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n pub trait Iter {\n     type Item<'a> where Self: 'a;"}, {"sha": "7ccf376e5cb633a98a50edba0824b4a16aee0585", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait CollectionFamily {"}, {"sha": "802621bd18c0b707b843f377fd20b43dcd0b989d", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `CollectionFamily::Member`\n-  --> $DIR/issue-78671.rs:8:47\n+  --> $DIR/issue-78671.rs:7:47\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                                               ^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-78671.rs:5:10\n+  --> $DIR/issue-78671.rs:4:10\n    |\n LL |     type Member<T>;\n    |          ^^^^^^ -\n@@ -15,14 +15,14 @@ LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n    |                                               ^^^^^^^^^\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n-  --> $DIR/issue-78671.rs:8:25\n+  --> $DIR/issue-78671.rs:7:25\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n    |\n    = help: consider moving `Member` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-78671.rs:5:10\n+  --> $DIR/issue-78671.rs:4:10\n    |\n LL | trait CollectionFamily {\n    |       ---------------- this trait cannot be made into an object..."}, {"sha": "7f0ac348358840c6bc0975e954cc1238345933e1", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait RefCont<'a, T> {"}, {"sha": "cf0a80bb2c58d4fbd8631b021cc08dd820739f63", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `MapLike::VRefCont`\n-  --> $DIR/issue-79422.rs:43:36\n+  --> $DIR/issue-79422.rs:42:36\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |                                    ^^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-79422.rs:21:10\n+  --> $DIR/issue-79422.rs:20:10\n    |\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ --\n@@ -15,29 +15,29 @@ LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                    ^^^^^^^^^^^^\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:43:12\n+  --> $DIR/issue-79422.rs:42:12\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n    = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:21:10\n+  --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:42:13\n+  --> $DIR/issue-79422.rs:41:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n    = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:21:10\n+  --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object..."}, {"sha": "6d73fd68dbed17b4247a0371bc6560b17c2ec008", "filename": "src/test/ui/generic-associated-types/issue-79636-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Monad {"}, {"sha": "e6f9a0c754681a08b29de9e518efd5a447e3972f", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `Monad::Wrapped`\n-  --> $DIR/issue-79636-1.rs:16:34\n+  --> $DIR/issue-79636-1.rs:15:34\n    |\n LL |     MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n    |                                  ^^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `B`\n-  --> $DIR/issue-79636-1.rs:6:10\n+  --> $DIR/issue-79636-1.rs:5:10\n    |\n LL |     type Wrapped<B>;\n    |          ^^^^^^^ -"}, {"sha": "cdaf2e483411eb93791e7e681427311449f5a782", "filename": "src/test/ui/generic-associated-types/issue-79636-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait SomeTrait {"}, {"sha": "9a240c6545824aeea3ec3cf80df94310abc3f3c0", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SomeTrait::Wrapped`\n-  --> $DIR/issue-79636-2.rs:12:18\n+  --> $DIR/issue-79636-2.rs:11:18\n    |\n LL |     W: SomeTrait<Wrapped = W>,\n    |                  ^^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `A`\n-  --> $DIR/issue-79636-2.rs:5:10\n+  --> $DIR/issue-79636-2.rs:4:10\n    |\n LL |     type Wrapped<A>: SomeTrait;\n    |          ^^^^^^^ -"}, {"sha": "f15d4d8b1385a7ec47faac3921a8fc17e4e8d16b", "filename": "src/test/ui/generic-associated-types/issue-80433-reduced.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n struct E {}"}, {"sha": "6a1fe7519a840ee20b92669a15ebb8169f360eb1", "filename": "src/test/ui/generic-associated-types/issue-80433.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n #[derive(Default)]\n struct E<T> {"}, {"sha": "26c879193b66b9a838f5576f2b9adbf0e4a939d3", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `TestMut::Output`\n-  --> $DIR/issue-80433.rs:24:47\n+  --> $DIR/issue-80433.rs:23:47\n    |\n LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n    |                                               ^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-80433.rs:10:10\n+  --> $DIR/issue-80433.rs:9:10\n    |\n LL |     type Output<'a>;\n    |          ^^^^^^ --"}, {"sha": "fa2f86242257f95141a74ff9840b4d1823fc462a", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #81712.\n \n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n trait A {\n     type BType: B<AType = Self>;"}, {"sha": "850b434e9bfdc8e77e66b1274d4fba6a614e6eb7", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `C::DType`\n-  --> $DIR/issue-81712-cyclic-traits.rs:17:19\n+  --> $DIR/issue-81712-cyclic-traits.rs:16:19\n    |\n LL |     type CType: C<DType = Self>;\n    |                   ^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-81712-cyclic-traits.rs:14:10\n+  --> $DIR/issue-81712-cyclic-traits.rs:13:10\n    |\n LL |     type DType<T>: D<T, CType = Self>;\n    |          ^^^^^ -"}, {"sha": "e457bca0c09636edf557ba337220deb564bddbf2", "filename": "src/test/ui/generic-associated-types/issue-81862.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait StreamingIterator {"}, {"sha": "1ba21ccd796792c1614058a1d282462b4d0d5edf", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `StreamingIterator::Item`\n-  --> $DIR/issue-81862.rs:6:40\n+  --> $DIR/issue-81862.rs:5:40\n    |\n LL |     fn next(&mut self) -> Option<Self::Item>;\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-81862.rs:5:10\n+  --> $DIR/issue-81862.rs:4:10\n    |\n LL |     type Item<'a>;\n    |          ^^^^ --"}, {"sha": "a8b54c354e3f3e35afb1365be8f81627f7cd3039", "filename": "src/test/ui/generic-associated-types/issue-86483.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // Regression test of #86483.\n \n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n pub trait IceIce<T> //~ ERROR: the parameter type `T` may not live long enough\n where"}, {"sha": "2106b214fec03559aef50d9d3b0842bb6bb03d57", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:6:1\n+  --> $DIR/issue-86483.rs:5:1\n    |\n LL |   pub trait IceIce<T>\n    |   ^                - help: consider adding an explicit lifetime bound...: `T: 'a`\n@@ -14,7 +14,7 @@ LL | | }\n    | |_^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:10:5\n+  --> $DIR/issue-86483.rs:9:5\n    |\n LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n@@ -23,7 +23,7 @@ LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:10:32\n+  --> $DIR/issue-86483.rs:9:32\n    |\n LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'v`"}, {"sha": "952fca8ab8a65fff5314647d3de9d60cf94ee965", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n // run-pass"}, {"sha": "6db249221b849821494b7dad00ee512693baa4bb", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -2,9 +2,6 @@\n // generics for a generic associated type.\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-//~| NOTE `#[warn(incomplete_features)]` on by default\n-//~| NOTE see issue #44265\n \n trait X {\n     type Y<T>;"}, {"sha": "8af9fbed872e15e72da14bb01cd84696eaed08ed", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:4:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0599]: the method `f` exists for struct `S`, but its trait bounds were not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:29:7\n+  --> $DIR/method-unsatified-assoc-type-predicate.rs:26:7\n    |\n LL | struct S;\n    | ---------\n@@ -24,6 +15,6 @@ LL |     a.f();\n            `<S as X>::Y<i32> = i32`\n            which is required by `S: M`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "cd918157f7c8d123c3223943698b071ab51af574", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types`\n \n trait X {\n     type Y<'a, 'b>;"}, {"sha": "95b048d36c2dec25e2a60f44851de4d6d941e4ef", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing_lifetime_args.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/missing_lifetime_args.rs:14:32\n+  --> $DIR/missing_lifetime_args.rs:13:32\n    |\n LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y = (&'c u32, &'d u32)>>) {}\n    |                                ^ expected 2 lifetime arguments\n    |\n note: associated type defined here, with 2 lifetime parameters: `'a`, `'b`\n-  --> $DIR/missing_lifetime_args.rs:5:10\n+  --> $DIR/missing_lifetime_args.rs:4:10\n    |\n LL |     type Y<'a, 'b>;\n    |          ^ --  --\n@@ -24,15 +15,15 @@ LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n    |                                ^^^^^^^^^\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n-  --> $DIR/missing_lifetime_args.rs:17:26\n+  --> $DIR/missing_lifetime_args.rs:16:26\n    |\n LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n    |                          ^^^ --  -- supplied 2 lifetime arguments\n    |                          |\n    |                          expected 3 lifetime arguments\n    |\n note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n-  --> $DIR/missing_lifetime_args.rs:8:8\n+  --> $DIR/missing_lifetime_args.rs:7:8\n    |\n LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --\n@@ -42,15 +33,15 @@ LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b, 'a>) {}\n    |                                    ^^^^\n \n error[E0107]: this struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing_lifetime_args.rs:20:16\n+  --> $DIR/missing_lifetime_args.rs:19:16\n    |\n LL | fn f<'a>(_arg: Foo<'a>) {}\n    |                ^^^ -- supplied 1 lifetime argument\n    |                |\n    |                expected 3 lifetime arguments\n    |\n note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n-  --> $DIR/missing_lifetime_args.rs:8:8\n+  --> $DIR/missing_lifetime_args.rs:7:8\n    |\n LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --\n@@ -59,6 +50,6 @@ help: add missing lifetime arguments\n LL | fn f<'a>(_arg: Foo<'a, 'b, 'c>) {}\n    |                      ^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "e3e78dd96f62bce481282300183829ba92fd664e", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature\n \n trait Foo {\n     type Assoc<'a, const N: usize>;"}, {"sha": "02d3cd2e8d5f9e7f7b1603e78a1e483af9f8ccf2", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing_lifetime_const.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/missing_lifetime_const.rs:9:24\n+  --> $DIR/missing_lifetime_const.rs:8:24\n    |\n LL |     let _: <T as Foo>::Assoc<3>;\n    |                        ^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/missing_lifetime_const.rs:5:10\n+  --> $DIR/missing_lifetime_const.rs:4:10\n    |\n LL |     type Assoc<'a, const N: usize>;\n    |          ^^^^^ --\n@@ -23,6 +14,6 @@ help: add missing lifetime argument\n LL |     let _: <T as Foo>::Assoc<'a, 3>;\n    |                              ^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "0508cc2daeae0fb3328d42c5052f5ad027cf8bb8", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "db469597f9a637654d2d4b6c226d3049592a55bd", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,25 +1,25 @@\n error[E0107]: this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:13:24\n+  --> $DIR/parameter_number_and_kind.rs:12:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                        ^          ------- help: remove this lifetime argument\n    |                        |\n    |                        expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/parameter_number_and_kind.rs:10:10\n+  --> $DIR/parameter_number_and_kind.rs:9:10\n    |\n LL |     type E<'a, T>;\n    |          ^ --\n \n error[E0107]: this associated type takes 1 generic argument but 0 generic arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:13:24\n+  --> $DIR/parameter_number_and_kind.rs:12:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                        ^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/parameter_number_and_kind.rs:10:10\n+  --> $DIR/parameter_number_and_kind.rs:9:10\n    |\n LL |     type E<'a, T>;\n    |          ^     -\n@@ -29,15 +29,15 @@ LL |     type FErr1 = Self::E<'static, 'static, T>;\n    |                                          ^^^\n \n error[E0107]: this associated type takes 1 generic argument but 2 generic arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:16:27\n+  --> $DIR/parameter_number_and_kind.rs:15:27\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n    |                           ^             --- help: remove this generic argument\n    |                           |\n    |                           expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/parameter_number_and_kind.rs:10:10\n+  --> $DIR/parameter_number_and_kind.rs:9:10\n    |\n LL |     type E<'a, T>;\n    |          ^     -"}, {"sha": "6ca0bc6ddbc9f150d4d7859a43cf89de89277b67", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n "}, {"sha": "1458bf0c4a49341147eb47f4bf57c7601c8e5199", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error[E0195]: lifetime parameters or bounds on type `A` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:16:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:15:11\n    |\n LL |     type A<'a>;\n    |           ---- lifetimes in impl do not match this type in trait\n@@ -8,7 +8,7 @@ LL |     type A = u32;\n    |           ^ lifetimes do not match type in trait\n \n error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:18:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:17:12\n    |\n LL |     type B<'a, 'b>;\n    |            --  --\n@@ -21,7 +21,7 @@ LL |     type B<'a, T> = Vec<T>;\n    |            found 1 type parameter\n \n error[E0195]: lifetime parameters or bounds on type `C` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:20:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:19:11\n    |\n LL |     type C;\n    |           - lifetimes in impl do not match this type in trait\n@@ -30,7 +30,7 @@ LL |     type C<'a> = u32;\n    |           ^^^^ lifetimes do not match type in trait\n \n error[E0049]: type `A` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:27:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:26:12\n    |\n LL |     type A<'a>;\n    |            -- expected 0 type parameters\n@@ -39,7 +39,7 @@ LL |     type A<T> = u32;\n    |            ^ found 1 type parameter\n \n error[E0195]: lifetime parameters or bounds on type `B` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:29:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:28:11\n    |\n LL |     type B<'a, 'b>;\n    |           -------- lifetimes in impl do not match this type in trait\n@@ -48,7 +48,7 @@ LL |     type B<'a> = u32;\n    |           ^^^^ lifetimes do not match type in trait\n \n error[E0049]: type `C` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:31:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:30:12\n    |\n LL |     type C;\n    |           - expected 0 type parameters"}, {"sha": "be85598b7bfaf758cf59be07028c2774425c4136", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "2b265e921616db1fb1d1dc47b66f3b1fa635477d", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,19 +1,10 @@\n error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n-  --> $DIR/trait-path-expected-token.rs:8:33\n+  --> $DIR/trait-path-expected-token.rs:7:33\n    |\n LL | fn f1<'a>(arg : Box<dyn X<Y = B = &'a ()>>) {}\n    |                               - ^ expected one of 7 possible tokens\n    |                               |\n    |                               maybe try to close unmatched angle bracket\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-expected-token.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "d57c2813b38a972f0dc25343208f0560ee246373", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING: the feature `generic_associated_types` is incomplete\n \n mod error1 {\n   trait X {"}, {"sha": "b1fea6d33a7f0e5c6ec522b352fa9a5629b43143", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,27 +1,18 @@\n error: expected expression, found `)`\n-  --> $DIR/trait-path-expressions.rs:9:39\n+  --> $DIR/trait-path-expressions.rs:8:39\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 1 = 32 >>) {}\n    |                              -        ^ expected expression\n    |                              |\n    |                              while parsing a const generic argument starting here\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-expressions.rs:19:36\n+  --> $DIR/trait-path-expressions.rs:18:36\n    |\n LL |   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n    |                                  - ^ expected one of `,`, `:`, or `>`\n    |                                  |\n    |                                  maybe try to close unmatched angle bracket\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-expressions.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "7914864807ce3ab61e56f458c5da0e39dd8f042d", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "c2908150429e342951e1ce2d2135bfe20c130c4b", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `>`, a const expression, lifetime, or type, found `:`\n-  --> $DIR/trait-path-missing-gen_arg.rs:9:30\n+  --> $DIR/trait-path-missing-gen_arg.rs:8:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                              ^ expected one of `>`, a const expression, lifetime, or type\n@@ -10,13 +10,13 @@ LL |   fn f1<'a>(arg : Box<{ dyn X< : 32 } >>) {}\n    |                       ^             ^\n \n error: expected parameter name, found `>`\n-  --> $DIR/trait-path-missing-gen_arg.rs:9:36\n+  --> $DIR/trait-path-missing-gen_arg.rs:8:36\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    ^ expected parameter name\n \n error: expected one of `!`, `)`, `+`, `,`, or `::`, found `>`\n-  --> $DIR/trait-path-missing-gen_arg.rs:9:36\n+  --> $DIR/trait-path-missing-gen_arg.rs:8:36\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    ^\n@@ -25,28 +25,19 @@ LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    help: missing `,`\n \n error: expected one of `>`, a const expression, lifetime, or type, found `=`\n-  --> $DIR/trait-path-missing-gen_arg.rs:17:30\n+  --> $DIR/trait-path-missing-gen_arg.rs:16:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< = 32 >>) {}\n    |                            - ^ expected one of `>`, a const expression, lifetime, or type\n    |                            |\n    |                            maybe try to close unmatched angle bracket\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-missing-gen_arg.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0747]: constant provided when a type was expected\n-  --> $DIR/trait-path-missing-gen_arg.rs:9:23\n+  --> $DIR/trait-path-missing-gen_arg.rs:8:23\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                       ^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors; 1 warning emitted\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0747`."}, {"sha": "e943f075f53427bcee1961a7a719ddd9db341e15", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING: the feature `generic_associated_types` is incomplete\n \n const _: () = {\n     trait X {"}, {"sha": "bfb109fbfa40d3b97c060d7d8c8b949185057e44", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,35 +1,26 @@\n error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:9:36\n+  --> $DIR/trait-path-segments.rs:8:36\n    |\n LL |     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n    |                                  - ^ expected one of 8 possible tokens\n    |                                  |\n    |                                  maybe try to close unmatched angle bracket\n \n error: expected one of `,`, `::`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:20:35\n+  --> $DIR/trait-path-segments.rs:19:35\n    |\n LL |     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n    |                                 - ^ expected one of `,`, `::`, `:`, or `>`\n    |                                 |\n    |                                 maybe try to close unmatched angle bracket\n \n error: expected one of `!`, `+`, `,`, `::`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:31:25\n+  --> $DIR/trait-path-segments.rs:30:25\n    |\n LL |     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n    |                       - ^ expected one of `!`, `+`, `,`, `::`, `:`, or `>`\n    |                       |\n    |                       maybe try to close unmatched angle bracket\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-segments.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n "}, {"sha": "4846af96d32ac6d91958f8be05cd7e0107845232", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-  //~^ the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "59b53c70388acdb094f3ee1de11250af7683cb55", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-type-error-once-implemented.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:9:29\n+  --> $DIR/trait-path-type-error-once-implemented.rs:8:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n    |                             ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+  --> $DIR/trait-path-type-error-once-implemented.rs:4:10\n    |\n LL |     type Y<'a>;\n    |          ^ --\n@@ -24,19 +15,19 @@ LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n    |                               ^^^\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:9:29\n+  --> $DIR/trait-path-type-error-once-implemented.rs:8:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n    |                             ^--- help: remove these generics\n    |                             |\n    |                             expected 0 generic arguments\n    |\n note: associated type defined here, with 0 generic parameters\n-  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+  --> $DIR/trait-path-type-error-once-implemented.rs:4:10\n    |\n LL |     type Y<'a>;\n    |          ^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "856253cc7fab6d18b7b5750f88566803dce49827", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARNING: the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;"}, {"sha": "c0fa41b9e0e0c48d499325447f2c4834e2196db3", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,35 +1,26 @@\n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:9:37\n+  --> $DIR/trait-path-types.rs:8:37\n    |\n LL |   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n    |                                   - ^ expected one of `,`, `:`, or `>`\n    |                                   |\n    |                                   maybe try to close unmatched angle bracket\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:14:37\n+  --> $DIR/trait-path-types.rs:13:37\n    |\n LL |   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n    |                                   - ^ expected one of `,`, `:`, or `>`\n    |                                   |\n    |                                   maybe try to close unmatched angle bracket\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:19:33\n+  --> $DIR/trait-path-types.rs:18:33\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n    |                              -- ^ expected one of `,`, `:`, or `>`\n    |                              |\n    |                              maybe try to close unmatched angle bracket\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-path-types.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n "}, {"sha": "da86e7f274820e24f16603ad6010d5f6865a90e8", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n // check-pass"}, {"sha": "7517e1fa9d061fc3777ba41f8e21fb2b6a9466c7", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -2,7 +2,6 @@\n // `feature(trivial_bounds)`.\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n trait Print {\n     fn print();"}, {"sha": "d5e9caf9ecd4e3f0bc2a15cd7300791bf2fcf013", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/projection-bound-cycle-generic.rs:4:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle-generic.rs:45:5\n+  --> $DIR/projection-bound-cycle-generic.rs:44:5\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "8f8cb679e9c0e8c7815fa0a85a1d5f6c2293c771", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -3,7 +3,6 @@\n // proven when a bound and a where clause of an associated type are the same.\n \n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(trivial_bounds)]\n \n trait Print {"}, {"sha": "fac62fef1ecff0094f9a50ad0259babd5dde441d", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/projection-bound-cycle.rs:5:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle.rs:47:5\n+  --> $DIR/projection-bound-cycle.rs:46:5\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "b976ee3261fcc7f9569d9fc2758dd50da656a0aa", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n pub trait X {"}, {"sha": "315bef16c5f1377ac550d54b7186f5d553f5823e", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,17 +1,17 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:18:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n    |\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:23:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n    |\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:28:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n    |\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required"}, {"sha": "2a9763457df753cd10955cbd59302d64dcc3915c", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait Shadow<'a> {"}, {"sha": "857757f8940dc41668d6f0de58e4376e7217dc46", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,29 +1,29 @@\n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:19:14\n+  --> $DIR/shadowing.rs:18:14\n    |\n LL | trait ShadowT<T> {\n    |               - first use of `T`\n LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:28:14\n+  --> $DIR/shadowing.rs:27:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`\n LL |     type Bar<T> = i32;\n    |              ^ already used\n \n error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:14:14\n+  --> $DIR/shadowing.rs:13:14\n    |\n LL | impl<'a> NoShadow<'a> for &'a u32 {\n    |      -- first declared here\n LL |     type Bar<'a> = i32;\n    |              ^^ lifetime `'a` already in scope\n \n error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:5:14\n+  --> $DIR/shadowing.rs:4:14\n    |\n LL | trait Shadow<'a> {\n    |              -- first declared here"}, {"sha": "2feff9f4c6f2ff3f64e191e5ac148064fd68018a", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n use std::fmt::Display;"}, {"sha": "559e6758a32af62d91893377f6be44c6843c3417", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n trait StreamingIterator {\n     type Item<'a> where Self: 'a;"}, {"sha": "a121566bbd884be69a820ede9604e4f355d3bcd5", "filename": "src/test/ui/generic-associated-types/trait-objects.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,12 +1,12 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:11:16\n+  --> $DIR/trait-objects.rs:10:16\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n    = help: consider moving `Item` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:5:10\n+  --> $DIR/trait-objects.rs:4:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object..."}, {"sha": "8b40dac574a43c33fc1c6469fb416dbc44a63c26", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n pub trait X {"}, {"sha": "772d027685d0831d2a8f78009d6495229fa94eb8", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,45 +1,45 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/unsatified-item-lifetime-bound.rs:5:12\n+  --> $DIR/unsatified-item-lifetime-bound.rs:4:12\n    |\n LL |     type Y<'a: 'static>;\n    |            ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:14:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:13:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 13:10\n-  --> $DIR/unsatified-item-lifetime-bound.rs:13:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 12:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:12:10\n    |\n LL | struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:19:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:18:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 18:10\n-  --> $DIR/unsatified-item-lifetime-bound.rs:18:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 17:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:17:10\n    |\n LL | struct C<'a, T: X> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:24:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:23:8\n    |\n LL |     f: <() as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 23:10\n-  --> $DIR/unsatified-item-lifetime-bound.rs:23:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 22:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:22:10\n    |\n LL | struct D<'a> {\n    |          ^^"}, {"sha": "6466bf98dfc8fc0f83e05fc6b1a615fa3d390da8", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n trait ATy {"}, {"sha": "d2482b2998b9ba8ca812434839c2b263678f33dd", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,17 +1,17 @@\n error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n+  --> $DIR/unsatisfied-outlives-bound.rs:8:5\n    |\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n-  --> $DIR/unsatisfied-outlives-bound.rs:9:15\n+note: type must outlive the lifetime `'a` as defined on the associated item at 8:15\n+  --> $DIR/unsatisfied-outlives-bound.rs:8:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n \n error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:18:5\n+  --> $DIR/unsatisfied-outlives-bound.rs:17:5\n    |\n LL |     type Item<'a> = &'a ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7bc250ee87b944dc50cf4f0714923f5ce893bb4f", "filename": "src/test/ui/generic-associated-types/variance_constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // issue #69184\n #![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n \n trait A {\n     type B<'a>;"}, {"sha": "9871cb8fe3ee84955ce5f58e503e0300d138b3e0", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,5 +1,4 @@\n #![feature(generic_associated_types)]\n-//~^ WARN the feature `generic_associated_types` is incomplete\n \n fn main() {}\n "}, {"sha": "4b398d791c4d1907057e5c7101b8cf0b48485fa4", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -1,58 +1,49 @@\n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:8:5\n    |\n LL |     type Y;\n    |     ^^^^^^-\n    |           |\n    |           help: provide a definition for the type: `= <type>;`\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^-\n    |                |\n    |                help: provide a definition for the type: `= <type>;`\n \n error: bounds on `type`s in `impl`s have no effect\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:13\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:13\n    |\n LL |     type Z: Ord;\n    |             ^^^\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                               |\n    |                               help: provide a definition for the type: `= <type>;`\n \n error: bounds on `type`s in `impl`s have no effect\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:13\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:13\n    |\n LL |     type W: Ord where Self: Eq;\n    |             ^^^\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:19:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^-\n    |                          |\n    |                          help: provide a definition for the type: `= <type>;`\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:8:5\n    |\n LL |     type Y;\n    |     ^^^^^^^\n@@ -61,7 +52,7 @@ LL |     type Y;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^^\n@@ -70,7 +61,7 @@ LL |     type Z: Ord;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,14 +70,14 @@ LL |     type W: Ord where Self: Eq;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:19:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors; 1 warning emitted\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0f5714e996a17cef78e0dd3c6112882e72c57db3", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -3,7 +3,6 @@\n #![feature(specialization)]\n #![feature(generic_associated_types)]\n //~^^ WARNING `specialization` is incomplete\n-//~^^ WARNING the feature `generic_associated_types` is incomplete\n \n trait X {\n     type U<'a>: PartialEq<&'a Self> where Self: 'a;"}, {"sha": "e646c1640b1c6f28a52bc4bc80aad18442d94b5b", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab6f93e6c25170b78ec21105ecbb6893080993/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=f1ab6f93e6c25170b78ec21105ecbb6893080993", "patch": "@@ -8,16 +8,8 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n-warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-generic-associated-type-bound.rs:4:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0277]: can't compare `T` with `T`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:19:5\n+  --> $DIR/deafult-generic-associated-type-bound.rs:18:5\n    |\n LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n    |                 ------------------- required by this bound in `X::U`\n@@ -31,6 +23,6 @@ help: consider further restricting this bound\n LL | impl<T: 'static + std::cmp::PartialEq> X for T {\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}]}