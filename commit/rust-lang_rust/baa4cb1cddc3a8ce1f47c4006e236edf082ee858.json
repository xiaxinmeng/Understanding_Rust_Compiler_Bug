{"sha": "baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTRjYjFjZGRjM2E4Y2UxZjQ3YzQwMDZlMjM2ZWRmMDgyZWU4NTg=", "commit": {"author": {"name": "jrqc", "email": "jrqc01@hotmail.com", "date": "2020-08-14T06:25:26Z"}, "committer": {"name": "jrqc", "email": "jrqc01@hotmail.com", "date": "2020-08-15T21:24:27Z"}, "message": "early return removed", "tree": {"sha": "a377c88e8292df2de5a65c8e54bdaf8d6e91baa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a377c88e8292df2de5a65c8e54bdaf8d6e91baa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "html_url": "https://github.com/rust-lang/rust/commit/baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/comments", "author": {"login": "jrqc", "id": 14986914, "node_id": "MDQ6VXNlcjE0OTg2OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/14986914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrqc", "html_url": "https://github.com/jrqc", "followers_url": "https://api.github.com/users/jrqc/followers", "following_url": "https://api.github.com/users/jrqc/following{/other_user}", "gists_url": "https://api.github.com/users/jrqc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrqc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrqc/subscriptions", "organizations_url": "https://api.github.com/users/jrqc/orgs", "repos_url": "https://api.github.com/users/jrqc/repos", "events_url": "https://api.github.com/users/jrqc/events{/privacy}", "received_events_url": "https://api.github.com/users/jrqc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrqc", "id": 14986914, "node_id": "MDQ6VXNlcjE0OTg2OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/14986914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrqc", "html_url": "https://github.com/jrqc", "followers_url": "https://api.github.com/users/jrqc/followers", "following_url": "https://api.github.com/users/jrqc/following{/other_user}", "gists_url": "https://api.github.com/users/jrqc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrqc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrqc/subscriptions", "organizations_url": "https://api.github.com/users/jrqc/orgs", "repos_url": "https://api.github.com/users/jrqc/repos", "events_url": "https://api.github.com/users/jrqc/events{/privacy}", "received_events_url": "https://api.github.com/users/jrqc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96efaee55240a3d3428ea5fe30c884a3227dad6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/96efaee55240a3d3428ea5fe30c884a3227dad6e", "html_url": "https://github.com/rust-lang/rust/commit/96efaee55240a3d3428ea5fe30c884a3227dad6e"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "3c5541e64b4d44f5d920b8f46b25c2f8252c76f2", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "patch": "@@ -160,10 +160,6 @@ fn check_final_expr<'tcx>(\n     span: Option<Span>,\n     replacement: RetReplacement,\n ) {\n-    if last_statement_borrows(cx, expr) {\n-        return;\n-    }\n-\n     match expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {"}, {"sha": "7548c6afa973afec4838369bb06ed8b6bd5efd3c", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "patch": "@@ -16,8 +16,7 @@ declare_clippy_lint! {\n     /// less readable. Depending on formatting they can make a `break` or `return`\n     /// statement look like a function call.\n     ///\n-    /// **Known problems:** The lint currently misses unit return types in types,\n-    /// e.g., the `F` in `fn generic_unit<F: Fn() -> ()>(f: F) { .. }`.\n+    /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust"}, {"sha": "d849e093da7bb821a765122d0d966ba78adf4a39", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "patch": "@@ -69,24 +69,20 @@ fn test_void_match(x: u32) {\n     }\n }\n \n-mod no_lint_if_stmt_borrows {\n-    mod issue_5858 {\n-        fn read_line() -> String {\n-            use std::io::BufRead;\n-            let stdin = ::std::io::stdin();\n-            return stdin.lock().lines().next().unwrap().unwrap();\n-        }\n+fn read_line() -> String {\n+    use std::io::BufRead;\n+    let stdin = ::std::io::stdin();\n+    return stdin.lock().lines().next().unwrap().unwrap();\n+}\n \n-        fn read_line2(value: bool) -> String {\n-            if value {\n-                use std::io::BufRead;\n-                let stdin = ::std::io::stdin();\n-                let _a = stdin.lock().lines().next().unwrap().unwrap();\n-                return String::from(\"test\");\n-            } else {\n-                return String::new();\n-            }\n-        }\n+fn borrows_but_not_last(value: bool) -> String {\n+    if value {\n+        use std::io::BufRead;\n+        let stdin = ::std::io::stdin();\n+        let _a = stdin.lock().lines().next().unwrap().unwrap();\n+        String::from(\"test\")\n+    } else {\n+        String::new()\n     }\n }\n "}, {"sha": "29f2bd1852af00e9f1df68916f1f7624046e4c93", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "patch": "@@ -69,24 +69,20 @@ fn test_void_match(x: u32) {\n     }\n }\n \n-mod no_lint_if_stmt_borrows {\n-    mod issue_5858 {\n-        fn read_line() -> String {\n-            use std::io::BufRead;\n-            let stdin = ::std::io::stdin();\n-            return stdin.lock().lines().next().unwrap().unwrap();\n-        }\n+fn read_line() -> String {\n+    use std::io::BufRead;\n+    let stdin = ::std::io::stdin();\n+    return stdin.lock().lines().next().unwrap().unwrap();\n+}\n \n-        fn read_line2(value: bool) -> String {\n-            if value {\n-                use std::io::BufRead;\n-                let stdin = ::std::io::stdin();\n-                let _a = stdin.lock().lines().next().unwrap().unwrap();\n-                return String::from(\"test\");\n-            } else {\n-                return String::new();\n-            }\n-        }\n+fn borrows_but_not_last(value: bool) -> String {\n+    if value {\n+        use std::io::BufRead;\n+        let stdin = ::std::io::stdin();\n+        let _a = stdin.lock().lines().next().unwrap().unwrap();\n+        return String::from(\"test\");\n+    } else {\n+        return String::new();\n     }\n }\n "}, {"sha": "f73c833a801f3dc143bb92545a5e7ad41b566916", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baa4cb1cddc3a8ce1f47c4006e236edf082ee858/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=baa4cb1cddc3a8ce1f47c4006e236edf082ee858", "patch": "@@ -72,5 +72,17 @@ error: unneeded `return` statement\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n-error: aborting due to 12 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:83:9\n+   |\n+LL |         return String::from(\"test\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:85:9\n+   |\n+LL |         return String::new();\n+   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+\n+error: aborting due to 14 previous errors\n "}]}