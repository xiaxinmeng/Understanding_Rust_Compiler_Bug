{"sha": "fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "node_id": "C_kwDOAAsO6NoAKGZjMWRmNGZmMTcwZWMxMzdlY2FiN2Q3YWE3ZjRkYzg5NGJiMTc0NDk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-03T15:45:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-06-03T16:46:19Z"}, "message": "Use serde_json for target spec json", "tree": {"sha": "4069f5bb6a9d28342893fe91c47f49d0833bf4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4069f5bb6a9d28342893fe91c47f49d0833bf4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "html_url": "https://github.com/rust-lang/rust/commit/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2abe6952a00c21a2bb77ad8bd86dcb6e6abea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2abe6952a00c21a2bb77ad8bd86dcb6e6abea2", "html_url": "https://github.com/rust-lang/rust/commit/fc2abe6952a00c21a2bb77ad8bd86dcb6e6abea2"}], "stats": {"total": 232, "additions": 167, "deletions": 65}, "files": [{"sha": "aefaaadb2deb36c69c73bbbf819a479212766140", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -3774,6 +3774,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_typeck\",\n+ \"serde_json\",\n  \"tracing\",\n  \"winapi\",\n ]\n@@ -4445,6 +4446,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\",\n+ \"serde_json\",\n  \"tracing\",\n ]\n "}, {"sha": "a2cbd9abc9047e525ed4933226cd7ca4b203998d", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -9,6 +9,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n libc = \"0.2\"\n tracing = { version = \"0.1.28\" }\n+serde_json = \"1.0.59\"\n rustc_log = { path = \"../rustc_log\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }"}, {"sha": "0434997977ae5af92e288266e72f9d2811b549c0", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -30,7 +30,6 @@ use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-use rustc_serialize::json::ToJson;\n use rustc_session::config::{nightly_options, CG_OPTIONS, DB_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::cstore::MetadataLoader;\n@@ -40,6 +39,7 @@ use rustc_session::{config, DiagnosticOutput, Session};\n use rustc_session::{early_error, early_error_no_abort, early_warn};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n+use rustc_target::json::ToJson;\n \n use std::borrow::Cow;\n use std::cmp::max;\n@@ -665,7 +665,9 @@ fn print_crate_info(\n             }\n             Sysroot => println!(\"{}\", sess.sysroot.display()),\n             TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n-            TargetSpec => println!(\"{}\", sess.target.to_json().pretty()),\n+            TargetSpec => {\n+                println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n+            }\n             FileNames | CrateName => {\n                 let input = input.unwrap_or_else(|| {\n                     early_error(ErrorOutputType::default(), \"no input file provided\")"}, {"sha": "146ae45e46898ffaae61e9fffd9f37ebe759d50c", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -315,7 +315,7 @@ impl<Tag> Scalar<Tag> {\n                 ScalarSizeMismatch { target_size: target_size.bytes(), data_size: size.bytes() }\n             })?),\n             Scalar::Ptr(ptr, sz) => {\n-                if target_size.bytes() != sz.into() {\n+                if target_size.bytes() != u64::from(sz) {\n                     return Err(ScalarSizeMismatch {\n                         target_size: target_size.bytes(),\n                         data_size: sz.into(),"}, {"sha": "162376af45f15bc8c0353dc02053c78cfd443f68", "filename": "compiler/rustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2FCargo.toml?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [dependencies]\n bitflags = \"1.2.1\"\n tracing = \"0.1\"\n+serde_json = \"1.0.59\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }"}, {"sha": "0850e6834590300d8f4a7d19d98644e08af83c3e", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -1,6 +1,7 @@\n pub use Integer::*;\n pub use Primitive::*;\n \n+use crate::json::{Json, ToJson};\n use crate::spec::Target;\n \n use std::convert::{TryFrom, TryInto};\n@@ -13,7 +14,6 @@ use std::str::FromStr;\n use rustc_data_structures::intern::Interned;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable_Generic;\n-use rustc_serialize::json::{Json, ToJson};\n \n pub mod call;\n \n@@ -166,7 +166,8 @@ impl TargetDataLayout {\n             ));\n         }\n \n-        if dl.pointer_size.bits() != target.pointer_width.into() {\n+        let target_pointer_width: u64 = target.pointer_width.into();\n+        if dl.pointer_size.bits() != target_pointer_width {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n                  pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\","}, {"sha": "b5d926352122898d2e19a64dfc03715af116437d", "filename": "compiler/rustc_target/src/json.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fjson.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -0,0 +1,91 @@\n+use std::borrow::Cow;\n+use std::collections::BTreeMap;\n+\n+pub use serde_json::Value as Json;\n+use serde_json::{Map, Number};\n+\n+pub trait ToJson {\n+    fn to_json(&self) -> Json;\n+}\n+\n+impl ToJson for Json {\n+    fn to_json(&self) -> Json {\n+        self.clone()\n+    }\n+}\n+\n+macro_rules! to_json_impl_num {\n+    ($($t:ty), +) => (\n+        $(impl ToJson for $t {\n+            fn to_json(&self) -> Json {\n+                Json::Number(Number::from(*self))\n+            }\n+        })+\n+    )\n+}\n+\n+to_json_impl_num! { isize, i8, i16, i32, i64, usize, u8, u16, u32, u64 }\n+\n+impl ToJson for bool {\n+    fn to_json(&self) -> Json {\n+        Json::Bool(*self)\n+    }\n+}\n+\n+impl ToJson for str {\n+    fn to_json(&self) -> Json {\n+        Json::String(self.to_owned())\n+    }\n+}\n+\n+impl ToJson for String {\n+    fn to_json(&self) -> Json {\n+        Json::String(self.to_owned())\n+    }\n+}\n+\n+impl<'a> ToJson for Cow<'a, str> {\n+    fn to_json(&self) -> Json {\n+        Json::String(self.to_string())\n+    }\n+}\n+\n+impl<A: ToJson> ToJson for [A] {\n+    fn to_json(&self) -> Json {\n+        Json::Array(self.iter().map(|elt| elt.to_json()).collect())\n+    }\n+}\n+\n+impl<A: ToJson> ToJson for Vec<A> {\n+    fn to_json(&self) -> Json {\n+        Json::Array(self.iter().map(|elt| elt.to_json()).collect())\n+    }\n+}\n+\n+impl<'a, A: ToJson> ToJson for Cow<'a, [A]>\n+where\n+    [A]: ToOwned,\n+{\n+    fn to_json(&self) -> Json {\n+        Json::Array(self.iter().map(|elt| elt.to_json()).collect())\n+    }\n+}\n+\n+impl<T: ToString, A: ToJson> ToJson for BTreeMap<T, A> {\n+    fn to_json(&self) -> Json {\n+        let mut d = Map::new();\n+        for (key, value) in self {\n+            d.insert(key.to_string(), value.to_json());\n+        }\n+        Json::Object(d)\n+    }\n+}\n+\n+impl<A: ToJson> ToJson for Option<A> {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            None => Json::Null,\n+            Some(ref value) => value.to_json(),\n+        }\n+    }\n+}"}, {"sha": "e9627e33ff17079a159f34f37e18cc90d215ea57", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -28,6 +28,7 @@ extern crate tracing;\n \n pub mod abi;\n pub mod asm;\n+pub mod json;\n pub mod spec;\n \n #[cfg(test)]"}, {"sha": "52ac3622eca8d867136b99f025eeb44e332c7265", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -40,8 +40,8 @@\n //! but not gcc's. As a result rustc cannot link with C++ static libraries (#36710)\n //! when linking in self-contained mode.\n \n+use crate::json::{Json, ToJson};\n use crate::spec::LinkOutputKind;\n-use rustc_serialize::json::{Json, ToJson};\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::str::FromStr;"}, {"sha": "00c4cf6a9bc49d23183e784a201624664b8a8507", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 59, "deletions": 54, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -35,11 +35,12 @@\n //! to the list specified by the target, rather than replace.\n \n use crate::abi::Endian;\n+use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n+use serde_json::Value;\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::convert::TryFrom;\n@@ -548,7 +549,7 @@ impl StackProbeType {\n         let object = json.as_object().ok_or_else(|| \"expected a JSON object\")?;\n         let kind = object\n             .get(\"kind\")\n-            .and_then(|o| o.as_string())\n+            .and_then(|o| o.as_str())\n             .ok_or_else(|| \"expected `kind` to be a string\")?;\n         match kind {\n             \"none\" => Ok(StackProbeType::None),\n@@ -592,11 +593,11 @@ impl ToJson for StackProbeType {\n             StackProbeType::Call => {\n                 [(String::from(\"kind\"), \"call\".to_json())].into_iter().collect()\n             }\n-            StackProbeType::InlineOrCall { min_llvm_version_for_inline } => [\n+            StackProbeType::InlineOrCall { min_llvm_version_for_inline: (maj, min, patch) } => [\n                 (String::from(\"kind\"), \"inline-or-call\".to_json()),\n                 (\n                     String::from(\"min-llvm-version-for-inline\"),\n-                    min_llvm_version_for_inline.to_json(),\n+                    Json::Array(vec![maj.to_json(), min.to_json(), patch.to_json()]),\n                 ),\n             ]\n             .into_iter()\n@@ -1682,17 +1683,22 @@ impl Target {\n     }\n \n     /// Loads a target descriptor from a JSON object.\n-    pub fn from_json(mut obj: Json) -> Result<(Target, TargetWarnings), String> {\n+    pub fn from_json(obj: Json) -> Result<(Target, TargetWarnings), String> {\n         // While ugly, this code must remain this way to retain\n         // compatibility with existing JSON fields and the internal\n         // expected naming of the Target and TargetOptions structs.\n         // To ensure compatibility is retained, the built-in targets\n         // are round-tripped through this code to catch cases where\n         // the JSON parser is not updated to match the structs.\n \n+        let mut obj = match obj {\n+            Value::Object(obj) => obj,\n+            _ => return Err(\"Expected JSON object for target\")?,\n+        };\n+\n         let mut get_req_field = |name: &str| {\n-            obj.remove_key(name)\n-                .and_then(|j| Json::as_string(&j).map(str::to_string))\n+            obj.remove(name)\n+                .and_then(|j| j.as_str().map(str::to_string))\n                 .ok_or_else(|| format!(\"Field {} in target specification is required\", name))\n         };\n \n@@ -1711,31 +1717,31 @@ impl Target {\n         macro_rules! key {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string).map(Cow::from)) {\n+                if let Some(s) = obj.remove(&name).and_then(|s| s.as_str().map(str::to_string).map(Cow::from)) {\n                     base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident = $json_name:expr) => ( {\n                 let name = $json_name;\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string).map(Cow::from)) {\n+                if let Some(s) = obj.remove(name).and_then(|s| s.as_str().map(str::to_string).map(Cow::from)) {\n                     base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident, bool) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_boolean(&j)) {\n+                if let Some(s) = obj.remove(&name).and_then(|b| b.as_bool()) {\n                     base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident, u64) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n+                if let Some(s) = obj.remove(&name).and_then(|j| Json::as_u64(&j)) {\n                     base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident, Option<u32>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n+                if let Some(s) = obj.remove(&name).and_then(|b| b.as_u64()) {\n                     if s < 1 || s > 5 {\n                         return Err(\"Not a valid DWARF version number\".into());\n                     }\n@@ -1744,13 +1750,13 @@ impl Target {\n             } );\n             ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n+                if let Some(s) = obj.remove(&name).and_then(|b| b.as_u64()) {\n                     base.$key_name = Some(s);\n                 }\n             } );\n             ($key_name:ident, MergeFunctions) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<MergeFunctions>() {\n                         Ok(mergefunc) => base.$key_name = mergefunc,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n@@ -1763,7 +1769,7 @@ impl Target {\n             } );\n             ($key_name:ident, RelocModel) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<RelocModel>() {\n                         Ok(relocation_model) => base.$key_name = relocation_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid relocation model. \\\n@@ -1775,7 +1781,7 @@ impl Target {\n             } );\n             ($key_name:ident, CodeModel) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<CodeModel>() {\n                         Ok(code_model) => base.$key_name = Some(code_model),\n                         _ => return Some(Err(format!(\"'{}' is not a valid code model. \\\n@@ -1787,7 +1793,7 @@ impl Target {\n             } );\n             ($key_name:ident, TlsModel) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<TlsModel>() {\n                         Ok(tls_model) => base.$key_name = tls_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid TLS model. \\\n@@ -1799,7 +1805,7 @@ impl Target {\n             } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s {\n                         \"unwind\" => base.$key_name = PanicStrategy::Unwind,\n                         \"abort\" => base.$key_name = PanicStrategy::Abort,\n@@ -1812,7 +1818,7 @@ impl Target {\n             } );\n             ($key_name:ident, RelroLevel) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<RelroLevel>() {\n                         Ok(level) => base.$key_name = level,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n@@ -1824,7 +1830,7 @@ impl Target {\n             } );\n             ($key_name:ident, SplitDebuginfo) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<SplitDebuginfo>() {\n                         Ok(level) => base.$key_name = level,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n@@ -1836,10 +1842,10 @@ impl Target {\n             } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(j) = obj.remove_key(&name){\n-                    if let Some(v) = Json::as_array(&j) {\n+                if let Some(j) = obj.remove(&name) {\n+                    if let Some(v) = j.as_array() {\n                         base.$key_name = v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string().into())\n+                            .map(|a| a.as_str().unwrap().to_string().into())\n                             .collect();\n                     } else {\n                         incorrect_type.push(name)\n@@ -1848,10 +1854,10 @@ impl Target {\n             } );\n             ($key_name:ident, opt_list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(j) = obj.remove_key(&name) {\n-                    if let Some(v) = Json::as_array(&j) {\n+                if let Some(j) = obj.remove(&name) {\n+                    if let Some(v) = j.as_array() {\n                         base.$key_name = Some(v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string().into())\n+                            .map(|a| a.as_str().unwrap().to_string().into())\n                             .collect());\n                     } else {\n                         incorrect_type.push(name)\n@@ -1860,15 +1866,15 @@ impl Target {\n             } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(o) = obj.remove_key(&name[..]) {\n+                if let Some(o) = obj.remove(&name) {\n                     base.$key_name = o\n-                        .as_string()\n+                        .as_str()\n                         .map(|s| s.to_string().into());\n                 }\n             } );\n             ($key_name:ident, LldFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     if let Some(flavor) = LldFlavor::from_str(&s) {\n                         base.$key_name = flavor;\n                     } else {\n@@ -1882,7 +1888,7 @@ impl Target {\n             } );\n             ($key_name:ident, LinkerFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match LinkerFlavor::from_str(s) {\n                         Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n@@ -1893,7 +1899,7 @@ impl Target {\n             } );\n             ($key_name:ident, StackProbeType) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| match StackProbeType::from_json(&o) {\n+                obj.remove(&name).and_then(|o| match StackProbeType::from_json(&o) {\n                     Ok(v) => {\n                         base.$key_name = v;\n                         Some(Ok(()))\n@@ -1905,10 +1911,10 @@ impl Target {\n             } );\n             ($key_name:ident, SanitizerSet) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(o) = obj.remove_key(&name[..]) {\n+                if let Some(o) = obj.remove(&name) {\n                     if let Some(a) = o.as_array() {\n                         for s in a {\n-                            base.$key_name |= match s.as_string() {\n+                            base.$key_name |= match s.as_str() {\n                                 Some(\"address\") => SanitizerSet::ADDRESS,\n                                 Some(\"cfi\") => SanitizerSet::CFI,\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n@@ -1929,7 +1935,7 @@ impl Target {\n \n             ($key_name:ident, crt_objects_fallback) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match s.parse::<CrtObjectsFallback>() {\n                         Ok(fallback) => base.$key_name = Some(fallback),\n                         _ => return Some(Err(format!(\"'{}' is not a valid CRT objects fallback. \\\n@@ -1940,7 +1946,7 @@ impl Target {\n             } );\n             ($key_name:ident, link_objects) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove_key(&name[..]) {\n+                if let Some(val) = obj.remove(&name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per CRT object kind.\", name))?;\n                     let mut args = CrtObjects::new();\n@@ -1955,7 +1961,7 @@ impl Target {\n                             format!(\"{}.{}: expected a JSON array\", name, k)\n                         )?.iter().enumerate()\n                             .map(|(i,s)| {\n-                                let s = s.as_string().ok_or_else(||\n+                                let s = s.as_str().ok_or_else(||\n                                     format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n                                 Ok(s.to_string().into())\n                             })\n@@ -1968,7 +1974,7 @@ impl Target {\n             } );\n             ($key_name:ident, link_args) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove_key(&name[..]) {\n+                if let Some(val) = obj.remove(&name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per linker-flavor.\", name))?;\n                     let mut args = LinkArgs::new();\n@@ -1982,7 +1988,7 @@ impl Target {\n                             format!(\"{}.{}: expected a JSON array\", name, k)\n                         )?.iter().enumerate()\n                             .map(|(i,s)| {\n-                                let s = s.as_string().ok_or_else(||\n+                                let s = s.as_str().ok_or_else(||\n                                     format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n                                 Ok(s.to_string().into())\n                             })\n@@ -1995,10 +2001,10 @@ impl Target {\n             } );\n             ($key_name:ident, env) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(o) = obj.remove_key(&name[..]) {\n+                if let Some(o) = obj.remove(&name) {\n                     if let Some(a) = o.as_array() {\n                         for o in a {\n-                            if let Some(s) = o.as_string() {\n+                            if let Some(s) = o.as_str() {\n                                 let p = s.split('=').collect::<Vec<_>>();\n                                 if p.len() == 2 {\n                                     let k = p[0].to_string();\n@@ -2014,7 +2020,7 @@ impl Target {\n             } );\n             ($key_name:ident, Option<Abi>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove_key(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n                     match lookup_abi(s) {\n                         Some(abi) => base.$key_name = Some(abi),\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for abi\", s))),\n@@ -2023,28 +2029,28 @@ impl Target {\n                 })).unwrap_or(Ok(()))\n             } );\n             ($key_name:ident, TargetFamilies) => ( {\n-                if let Some(value) = obj.remove_key(\"target-family\") {\n-                    if let Some(v) = Json::as_array(&value) {\n+                if let Some(value) = obj.remove(\"target-family\") {\n+                    if let Some(v) = value.as_array() {\n                         base.$key_name = v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string().into())\n+                            .map(|a| a.as_str().unwrap().to_string().into())\n                             .collect();\n-                    } else if let Some(v) = Json::as_string(&value) {\n+                    } else if let Some(v) = value.as_str() {\n                         base.$key_name = vec![v.to_string().into()].into();\n                     }\n                 }\n             } );\n         }\n \n-        if let Some(j) = obj.remove_key(\"target-endian\") {\n-            if let Some(s) = Json::as_string(&j) {\n+        if let Some(j) = obj.remove(\"target-endian\") {\n+            if let Some(s) = j.as_str() {\n                 base.endian = s.parse()?;\n             } else {\n                 incorrect_type.push(\"target-endian\".into())\n             }\n         }\n \n-        if let Some(fp) = obj.remove_key(\"frame-pointer\") {\n-            if let Some(s) = Json::as_string(&fp) {\n+        if let Some(fp) = obj.remove(\"frame-pointer\") {\n+            if let Some(s) = fp.as_str() {\n                 base.frame_pointer = s\n                     .parse()\n                     .map_err(|()| format!(\"'{}' is not a valid value for frame-pointer\", s))?;\n@@ -2156,8 +2162,8 @@ impl Target {\n             // This can cause unfortunate ICEs later down the line.\n             return Err(\"may not set is_builtin for targets not built-in\".into());\n         }\n-        // Each field should have been read using `Json::remove_key` so any keys remaining are unused.\n-        let remaining_keys = obj.as_object().ok_or(\"Expected JSON object for target\")?.keys();\n+        // Each field should have been read using `Json::remove` so any keys remaining are unused.\n+        let remaining_keys = obj.keys();\n         Ok((\n             base,\n             TargetWarnings { unused_fields: remaining_keys.cloned().collect(), incorrect_type },\n@@ -2189,13 +2195,12 @@ impl Target {\n         target_triple: &TargetTriple,\n         sysroot: &Path,\n     ) -> Result<(Target, TargetWarnings), String> {\n-        use rustc_serialize::json;\n         use std::env;\n         use std::fs;\n \n         fn load_file(path: &Path) -> Result<(Target, TargetWarnings), String> {\n             let contents = fs::read_to_string(path).map_err(|e| e.to_string())?;\n-            let obj = json::from_str(&contents).map_err(|e| e.to_string())?;\n+            let obj = serde_json::from_str(&contents).map_err(|e| e.to_string())?;\n             Target::from_json(obj)\n         }\n \n@@ -2248,7 +2253,7 @@ impl Target {\n \n impl ToJson for Target {\n     fn to_json(&self) -> Json {\n-        let mut d = BTreeMap::new();\n+        let mut d = serde_json::Map::new();\n         let default: TargetOptions = Default::default();\n \n         macro_rules! target_val {"}, {"sha": "76375170db63da637c0a41b8533aedc82d8b3703", "filename": "compiler/rustc_target/src/tests.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449/compiler%2Frustc_target%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Ftests.rs?ref=fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "patch": "@@ -1,10 +1,8 @@\n use crate::spec::Target;\n-use rustc_serialize::json::Json;\n-use std::str::FromStr;\n \n #[test]\n fn report_unused_fields() {\n-    let json = Json::from_str(\n+    let json = serde_json::from_str(\n         r#\"\n     {\n         \"arch\": \"powerpc64\",\n@@ -23,7 +21,7 @@ fn report_unused_fields() {\n \n #[test]\n fn report_incorrect_json_type() {\n-    let json = Json::from_str(\n+    let json = serde_json::from_str(\n         r#\"\n     {\n         \"arch\": \"powerpc64\",\n@@ -42,7 +40,7 @@ fn report_incorrect_json_type() {\n \n #[test]\n fn no_warnings_for_valid_target() {\n-    let json = Json::from_str(\n+    let json = serde_json::from_str(\n         r#\"\n     {\n         \"arch\": \"powerpc64\","}]}