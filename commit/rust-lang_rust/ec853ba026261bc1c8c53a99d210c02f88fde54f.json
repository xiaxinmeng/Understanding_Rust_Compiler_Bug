{"sha": "ec853ba026261bc1c8c53a99d210c02f88fde54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODUzYmEwMjYyNjFiYzFjOGM1M2E5OWQyMTBjMDJmODhmZGU1NGY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-11T16:33:10Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-19T20:47:03Z"}, "message": "[const-prop] Don't const-prop into terminators unless mir-opt-level >= 2", "tree": {"sha": "e7ae6997d9f5444b0e919af5afd15b4f3736c7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ae6997d9f5444b0e919af5afd15b4f3736c7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec853ba026261bc1c8c53a99d210c02f88fde54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec853ba026261bc1c8c53a99d210c02f88fde54f", "html_url": "https://github.com/rust-lang/rust/commit/ec853ba026261bc1c8c53a99d210c02f88fde54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec853ba026261bc1c8c53a99d210c02f88fde54f/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2baab0eaaa8daa0f972b580748815db970ca547d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2baab0eaaa8daa0f972b580748815db970ca547d", "html_url": "https://github.com/rust-lang/rust/commit/2baab0eaaa8daa0f972b580748815db970ca547d"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "8f3dd72c4f2450a82ca151b53d8ebbe9128b72d6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec853ba026261bc1c8c53a99d210c02f88fde54f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec853ba026261bc1c8c53a99d210c02f88fde54f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ec853ba026261bc1c8c53a99d210c02f88fde54f", "patch": "@@ -546,6 +546,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             }\n         }\n     }\n+\n+    fn should_const_prop(&self) -> bool {\n+        self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+    }\n }\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -639,7 +643,7 @@ impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             assert!(self.places[local].is_none());\n                             self.places[local] = Some(value);\n \n-                            if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+                            if self.should_const_prop() {\n                                 self.replace_with_const(rval, value, statement.source_info.span);\n                             }\n                         }\n@@ -726,20 +730,25 @@ impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             &msg,\n                         );\n                     } else {\n-                        if let ScalarMaybeUndef::Scalar(scalar) = value_const {\n-                            *cond = self.operand_from_scalar(\n-                                scalar,\n-                                self.tcx.types.bool,\n-                                source_info.span,\n-                            );\n+                        if self.should_const_prop() {\n+                            if let ScalarMaybeUndef::Scalar(scalar) = value_const {\n+                                *cond = self.operand_from_scalar(\n+                                    scalar,\n+                                    self.tcx.types.bool,\n+                                    source_info.span,\n+                                );\n+                            }\n                         }\n                     }\n                 }\n             },\n             TerminatorKind::SwitchInt { ref mut discr, switch_ty, .. } => {\n-                if let Some(value) = self.eval_operand(&discr, source_info) {\n-                    if let ScalarMaybeUndef::Scalar(scalar) = self.ecx.read_scalar(value).unwrap() {\n-                        *discr = self.operand_from_scalar(scalar, switch_ty, source_info.span);\n+                if self.should_const_prop() {\n+                    if let Some(value) = self.eval_operand(&discr, source_info) {\n+                        if let ScalarMaybeUndef::Scalar(scalar) =\n+                                self.ecx.read_scalar(value).unwrap() {\n+                            *discr = self.operand_from_scalar(scalar, switch_ty, source_info.span);\n+                        }\n                     }\n                 }\n             },"}]}