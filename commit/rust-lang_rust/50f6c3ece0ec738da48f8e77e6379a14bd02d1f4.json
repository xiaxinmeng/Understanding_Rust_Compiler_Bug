{"sha": "50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjZjM2VjZTBlYzczOGRhNDhmOGU3N2U2Mzc5YTE0YmQwMmQxZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T16:08:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T16:08:07Z"}, "message": "Auto merge of #46745 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 7 pull requests\n\n- Successful merges: #46601, #46652, #46690, #46705, #46710, #46728, #46737\n- Failed merges:", "tree": {"sha": "56b55759ba9b8e1f4f884958dbcafb7228922f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b55759ba9b8e1f4f884958dbcafb7228922f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "html_url": "https://github.com/rust-lang/rust/commit/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0dc2d06d92d3bef7502d2095cd0d51486d4e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0dc2d06d92d3bef7502d2095cd0d51486d4e12", "html_url": "https://github.com/rust-lang/rust/commit/5a0dc2d06d92d3bef7502d2095cd0d51486d4e12"}, {"sha": "b98de5d0aca50ec6c947db9d1f2f54aab7d1ef6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98de5d0aca50ec6c947db9d1f2f54aab7d1ef6f", "html_url": "https://github.com/rust-lang/rust/commit/b98de5d0aca50ec6c947db9d1f2f54aab7d1ef6f"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "35cd7441c66bcf4e0ef93706c54d4ada83a6b365", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -621,27 +621,24 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let a = [\"1\", \"2\", \"lol\"];\n+    /// let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n     ///\n     /// let mut iter = a.iter().filter_map(|s| s.parse().ok());\n     ///\n     /// assert_eq!(iter.next(), Some(1));\n-    /// assert_eq!(iter.next(), Some(2));\n+    /// assert_eq!(iter.next(), Some(3));\n+    /// assert_eq!(iter.next(), Some(5));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///\n     /// Here's the same example, but with [`filter`] and [`map`]:\n     ///\n     /// ```\n-    /// let a = [\"1\", \"2\", \"lol\"];\n-    ///\n-    /// let mut iter = a.iter()\n-    ///                 .map(|s| s.parse())\n-    ///                 .filter(|s| s.is_ok())\n-    ///                 .map(|s| s.unwrap());\n-    ///\n+    /// let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+    /// let mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\n     /// assert_eq!(iter.next(), Some(1));\n-    /// assert_eq!(iter.next(), Some(2));\n+    /// assert_eq!(iter.next(), Some(3));\n+    /// assert_eq!(iter.next(), Some(5));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///"}, {"sha": "4ce0740130b98fc5e6bbbafc86678bd404c1e36c", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -35,13 +35,13 @@\n ///\n /// For more details, visit [the chapter in *The Rust Programming Language*]\n /// [book] as well as the reference sections on [the dereference operator]\n-/// [ref-deref-op], [the `Deref` trait][ref-deref-trait], and [type coercions].\n+/// [ref-deref-op], [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/second-edition/ch15-02-deref.html\n /// [`DerefMut`]: trait.DerefMut.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n-/// [ref-deref-trait]: ../../reference/the-deref-trait.html\n+/// [method resolution]: ../../reference/expressions/method-call-expr.html\n /// [type coercions]: ../../reference/type-coercions.html\n ///\n /// # Examples\n@@ -122,13 +122,13 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n ///\n /// For more details, visit [the chapter in *The Rust Programming Language*]\n /// [book] as well as the reference sections on [the dereference operator]\n-/// [ref-deref-op], [the `Deref` trait][ref-deref-trait], and [type coercions].\n+/// [ref-deref-op], [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/second-edition/ch15-02-deref.html\n /// [`Deref`]: trait.Deref.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n-/// [ref-deref-trait]: ../../reference/the-deref-trait.html\n+/// [method resolution]: ../../reference/expressions/method-call-expr.html\n /// [type coercions]: ../../reference/type-coercions.html\n ///\n /// # Examples"}, {"sha": "41ccd88b4a887f559d3b2e2aeeb0d84a2d2f716e", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -265,10 +265,12 @@ impl Span {\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n-    line: usize,\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub line: usize,\n     /// The 0-indexed column (in UTF-8 characters) in the source file on which\n     /// the span starts or ends (inclusive).\n-    column: usize\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub column: usize\n }\n \n /// The source file of a given `Span`."}, {"sha": "a9200a3c8059a6540ade78bbd96c0b81fba81418", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -635,9 +635,13 @@ impl Session {\n                  self.perf_stats.incr_comp_hashes_count.get());\n         println!(\"Total number of bytes hashed for incr. comp.:  {}\",\n                  self.perf_stats.incr_comp_bytes_hashed.get());\n-        println!(\"Average bytes hashed per incr. comp. HIR node: {}\",\n-                 self.perf_stats.incr_comp_bytes_hashed.get() /\n-                 self.perf_stats.incr_comp_hashes_count.get());\n+        if self.perf_stats.incr_comp_hashes_count.get() != 0 {\n+            println!(\"Average bytes hashed per incr. comp. HIR node: {}\",\n+                    self.perf_stats.incr_comp_bytes_hashed.get() /\n+                    self.perf_stats.incr_comp_hashes_count.get());\n+        } else {\n+            println!(\"Average bytes hashed per incr. comp. HIR node: N/A\");\n+        }\n         println!(\"Total time spent computing symbol hashes:      {}\",\n                  duration_to_secs_str(self.perf_stats.symbol_hash_time.get()));\n         println!(\"Total time spent decoding DefPath tables:      {}\","}, {"sha": "29d3d31e45155091708a04e2ec6e22bc2b86f14b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -810,9 +810,8 @@ impl RustcDefaultCalls {\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n                     rustc_trans::print(*req, sess);\n                 }\n-                PrintRequest::NativeStaticLibs => {\n-                    println!(\"Native static libs can be printed only during linking\");\n-                }\n+                // Any output here interferes with Cargo's parsing of other printed output\n+                PrintRequest::NativeStaticLibs => {}\n             }\n         }\n         return Compilation::Stop;"}, {"sha": "96f98efe4aaa8d8fc7c32b6e9b3855dea5cee80c", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -123,9 +123,6 @@ pub struct RawTable<K, V> {\n     marker: marker::PhantomData<(K, V)>,\n }\n \n-unsafe impl<K: Send, V: Send> Send for RawTable<K, V> {}\n-unsafe impl<K: Sync, V: Sync> Sync for RawTable<K, V> {}\n-\n // An unsafe view of a RawTable bucket\n // Valid indexes are within [0..table_capacity)\n pub struct RawBucket<K, V> {"}, {"sha": "e0a14f9b14f8241465b5b6eaa86ea6f59b276198", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/50f6c3ece0ec738da48f8e77e6379a14bd02d1f4/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=50f6c3ece0ec738da48f8e77e6379a14bd02d1f4", "patch": "@@ -969,11 +969,19 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // linkage will stay as external, and internal will stay as internal.\n   std::set<GlobalValue::GUID> ExportedGUIDs;\n   for (auto &List : Ret->Index) {\n+#if LLVM_VERSION_GE(5, 0)\n+    for (auto &GVS: List.second.SummaryList) {\n+#else\n     for (auto &GVS: List.second) {\n+#endif\n       if (GlobalValue::isLocalLinkage(GVS->linkage()))\n         continue;\n       auto GUID = GVS->getOriginalName();\n+#if LLVM_VERSION_GE(5, 0)\n+      if (GVS->flags().Live)\n+#else\n       if (!DeadSymbols.count(GUID))\n+#endif\n         ExportedGUIDs.insert(GUID);\n     }\n   }"}]}