{"sha": "6cf5988651b3220a6d674b2c3581eeef841a631b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjU5ODg2NTFiMzIyMGE2ZDY3NGIyYzM1ODFlZWVmODQxYTYzMWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-24T23:13:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-24T23:13:10Z"}, "message": "Rollup merge of #40602 - oli-obk:fn_const, r=eddyb\n\nRepresent function pointers in mir-constants as a Value instead of Item\n\nr? @eddyb", "tree": {"sha": "4a4a825ddcf3945287d6ca1f0ab5e72a1b53e238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4a825ddcf3945287d6ca1f0ab5e72a1b53e238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf5988651b3220a6d674b2c3581eeef841a631b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf5988651b3220a6d674b2c3581eeef841a631b", "html_url": "https://github.com/rust-lang/rust/commit/6cf5988651b3220a6d674b2c3581eeef841a631b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf5988651b3220a6d674b2c3581eeef841a631b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667e3166d896766b7233bdc40715397b2e877bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/667e3166d896766b7233bdc40715397b2e877bfa", "html_url": "https://github.com/rust-lang/rust/commit/667e3166d896766b7233bdc40715397b2e877bfa"}, {"sha": "9c918464e186c7b19550004a771104589c0952d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c918464e186c7b19550004a771104589c0952d2", "html_url": "https://github.com/rust-lang/rust/commit/9c918464e186c7b19550004a771104589c0952d2"}], "stats": {"total": 107, "additions": 51, "deletions": 56}, "files": [{"sha": "01dc7f51e29d9938c2b63e36086094414dd2dad8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -983,16 +983,16 @@ impl<'tcx> Debug for Operand<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn item<'a>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-                    def_id: DefId,\n-                    substs: &'tcx Substs<'tcx>,\n-                    span: Span)\n-                    -> Self\n-    {\n+    pub fn function_handle<'a>(\n+        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>,\n+        span: Span,\n+    ) -> Self {\n         Operand::Constant(Constant {\n             span: span,\n             ty: tcx.item_type(def_id).subst(tcx, substs),\n-            literal: Literal::Item { def_id, substs }\n+            literal: Literal::Value { value: ConstVal::Function(def_id, substs) },\n         })\n     }\n "}, {"sha": "dd4190a412dacd7fee78db5870c406133a12fd9d", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -89,6 +89,7 @@ should go to.\n use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n+use rustc::middle::const_val::ConstVal;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n@@ -784,9 +785,8 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         func: Operand::Constant(Constant {\n             span: data.span,\n             ty: tcx.item_type(free_func).subst(tcx, substs),\n-            literal: Literal::Item {\n-                def_id: free_func,\n-                substs: substs\n+            literal: Literal::Value {\n+                value: ConstVal::Function(free_func, substs),\n             }\n         }),\n         args: vec![Operand::Consume(data.value.clone())],"}, {"sha": "44858a98e36f963f0c597ae971b00968ea00bda1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -714,9 +714,8 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         ty: callee.ty,\n         span: expr.span,\n         kind: ExprKind::Literal {\n-            literal: Literal::Item {\n-                def_id: callee.def_id,\n-                substs: callee.substs,\n+            literal: Literal::Value {\n+                value: ConstVal::Function(callee.def_id, callee.substs),\n             },\n         },\n     }\n@@ -743,22 +742,32 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                      -> ExprKind<'tcx> {\n     let substs = cx.tables().node_id_item_substs(expr.id)\n         .unwrap_or_else(|| cx.tcx.intern_substs(&[]));\n-    let def_id = match def {\n+    match def {\n         // A regular function, constructor function or a constant.\n         Def::Fn(def_id) |\n         Def::Method(def_id) |\n         Def::StructCtor(def_id, CtorKind::Fn) |\n-        Def::VariantCtor(def_id, CtorKind::Fn) |\n+        Def::VariantCtor(def_id, CtorKind::Fn) => ExprKind::Literal {\n+            literal: Literal::Value {\n+                value: ConstVal::Function(def_id, substs),\n+            },\n+        },\n+\n         Def::Const(def_id) |\n-        Def::AssociatedConst(def_id) => def_id,\n+        Def::AssociatedConst(def_id) => ExprKind::Literal {\n+            literal: Literal::Item {\n+                def_id: def_id,\n+                substs: substs,\n+            },\n+        },\n \n         Def::StructCtor(def_id, CtorKind::Const) |\n         Def::VariantCtor(def_id, CtorKind::Const) => {\n             match cx.tables().node_id_to_type(expr.id).sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::TyAdt(adt_def, substs) => {\n-                    return ExprKind::Adt {\n+                    ExprKind::Adt {\n                         adt_def: adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs: substs,\n@@ -770,17 +779,11 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        Def::Static(node_id, _) => return ExprKind::StaticRef { id: node_id },\n+        Def::Static(node_id, _) => ExprKind::StaticRef { id: node_id },\n \n-        Def::Local(..) | Def::Upvar(..) => return convert_var(cx, expr, def),\n+        Def::Local(..) | Def::Upvar(..) => convert_var(cx, expr, def),\n \n         _ => span_bug!(expr.span, \"def `{:?}` not yet implemented\", def),\n-    };\n-    ExprKind::Literal {\n-        literal: Literal::Item {\n-            def_id: def_id,\n-            substs: substs,\n-        },\n     }\n }\n "}, {"sha": "3eef5d83b8ba0504f2e8946c4f4b5179aeb0bfe7", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -132,9 +132,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                 let method_ty = self.tcx.item_type(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n                 return (method_ty,\n-                        Literal::Item {\n-                            def_id: item.def_id,\n-                            substs: substs,\n+                        Literal::Value {\n+                            value: ConstVal::Function(item.def_id, substs),\n                         });\n             }\n         }"}, {"sha": "63d20be88feee70eb623fd9c9b8fe13f1e2b7538", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -12,6 +12,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::middle::region::ROOT_CODE_EXTENT;\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty};\n@@ -335,7 +336,9 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             Operand::Constant(Constant {\n                 span: span,\n                 ty: tcx.item_type(def_id).subst(tcx, param_env.free_substs),\n-                literal: Literal::Item { def_id, substs: param_env.free_substs },\n+                literal: Literal::Value {\n+                    value: ConstVal::Function(def_id, param_env.free_substs),\n+                },\n             }),\n             vec![rcvr]\n         )"}, {"sha": "ba42804c9262f0c92f776453399528e4e6d0443a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -568,11 +568,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 });\n             }\n             Operand::Constant(ref constant) => {\n-                // Only functions and methods can have these types.\n-                if let ty::TyFnDef(..) = constant.ty.sty {\n-                    return;\n-                }\n-\n                 if let Literal::Item { def_id, substs } = constant.literal {\n                     // Don't peek inside generic (associated) constants.\n                     if substs.types().next().is_some() {"}, {"sha": "3d604affbfea9ce0e24f33c5f02069dab9896e46", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -15,6 +15,7 @@ use rustc::infer::{self, InferCtxt, InferOk};\n use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n@@ -526,7 +527,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn is_box_free(&self, operand: &Operand<'tcx>) -> bool {\n         match operand {\n             &Operand::Constant(Constant {\n-                literal: Literal::Item { def_id, .. }, ..\n+                literal: Literal::Value {\n+                    value: ConstVal::Function(def_id, _), ..\n+                }, ..\n             }) => {\n                 Some(def_id) == self.tcx().lang_items.box_free_fn()\n             }"}, {"sha": "ccbc6700d89c1bc3c314d5d3d8acf9a4434cc299", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -525,8 +525,8 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             }],\n             terminator: Some(Terminator {\n                 kind: TerminatorKind::Call {\n-                    func: Operand::item(tcx, drop_fn.def_id, substs,\n-                                        self.source_info.span),\n+                    func: Operand::function_handle(tcx, drop_fn.def_id, substs,\n+                                                   self.source_info.span),\n                     args: vec![Operand::Consume(Lvalue::Local(ref_lvalue))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind,\n@@ -629,7 +629,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n \n         let call = TerminatorKind::Call {\n-            func: Operand::item(tcx, free_func, substs, self.source_info.span),\n+            func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n             args: vec![Operand::Consume(self.lvalue.clone())],\n             destination: Some((unit_temp, target)),\n             cleanup: None"}, {"sha": "a3968650043ba41a5b29accdf68f238e4c7dc209", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -13,7 +13,8 @@\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc::mir::{self, Location, TerminatorKind};\n+use rustc::middle::const_val::ConstVal;\n+use rustc::mir::{self, Location, TerminatorKind, Literal};\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n use common;\n@@ -109,7 +110,9 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n         match *kind {\n             mir::TerminatorKind::Call {\n                 func: mir::Operand::Constant(mir::Constant {\n-                    literal: mir::Literal::Item { def_id, .. }, ..\n+                    literal: Literal::Value {\n+                        value: ConstVal::Function(def_id, _), ..\n+                    }, ..\n                 }),\n                 ref args, ..\n             } if Some(def_id) == self.cx.ccx.tcx().lang_items.box_free_fn() => {"}, {"sha": "dbd928194c0329834a14f47eb0a45ed12ae98d1d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5988651b3220a6d674b2c3581eeef841a631b/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=6cf5988651b3220a6d674b2c3581eeef841a631b", "patch": "@@ -101,9 +101,12 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n             ConstVal::ByteStr(ref v) => consts::addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n             ConstVal::Struct(_) | ConstVal::Tuple(_) |\n-            ConstVal::Array(..) | ConstVal::Repeat(..) |\n+            ConstVal::Array(..) | ConstVal::Repeat(..) => {\n+                bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv)\n+            }\n             ConstVal::Function(..) => {\n-                bug!(\"MIR must not use `{:?}` (which refers to a local ID)\", cv)\n+                let llty = type_of::type_of(ccx, ty);\n+                return Const::new(C_null(llty), ty);\n             }\n             ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n         };\n@@ -476,13 +479,6 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let ty = self.monomorphize(&constant.ty);\n                 match constant.literal.clone() {\n                     mir::Literal::Item { def_id, substs } => {\n-                        // Shortcut for zero-sized types, including function item\n-                        // types, which would not work with MirConstContext.\n-                        if common::type_is_zero_size(self.ccx, ty) {\n-                            let llty = type_of::type_of(self.ccx, ty);\n-                            return Ok(Const::new(C_null(llty), ty));\n-                        }\n-\n                         let substs = self.monomorphize(&substs);\n                         MirConstContext::trans_def(self.ccx, def_id, substs, IndexVec::new())\n                     }\n@@ -924,13 +920,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let ty = self.monomorphize(&constant.ty);\n         let result = match constant.literal.clone() {\n             mir::Literal::Item { def_id, substs } => {\n-                // Shortcut for zero-sized types, including function item\n-                // types, which would not work with MirConstContext.\n-                if common::type_is_zero_size(bcx.ccx, ty) {\n-                    let llty = type_of::type_of(bcx.ccx, ty);\n-                    return Const::new(C_null(llty), ty);\n-                }\n-\n                 let substs = self.monomorphize(&substs);\n                 MirConstContext::trans_def(bcx.ccx, def_id, substs, IndexVec::new())\n             }"}]}