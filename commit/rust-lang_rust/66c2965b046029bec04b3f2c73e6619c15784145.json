{"sha": "66c2965b046029bec04b3f2c73e6619c15784145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzI5NjViMDQ2MDI5YmVjMDRiM2YyYzczZTY2MTljMTU3ODQxNDU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:39:34Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:39:34Z"}, "message": "iter: fix `RangeInclusive`'s `DoubleEndedIterator`", "tree": {"sha": "e65b17ebc94818075951a290c854d72e27428995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65b17ebc94818075951a290c854d72e27428995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c2965b046029bec04b3f2c73e6619c15784145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c2965b046029bec04b3f2c73e6619c15784145", "html_url": "https://github.com/rust-lang/rust/commit/66c2965b046029bec04b3f2c73e6619c15784145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c2965b046029bec04b3f2c73e6619c15784145/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "html_url": "https://github.com/rust-lang/rust/commit/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "0903d6d0b23d0ffe4dd56661a50f5bdfc3ac9db3", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66c2965b046029bec04b3f2c73e6619c15784145/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c2965b046029bec04b3f2c73e6619c15784145/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=66c2965b046029bec04b3f2c73e6619c15784145", "patch": "@@ -1829,11 +1829,11 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for RangeInclu\n             let result = self.range.stop.clone();\n             self.range.stop = self.range.stop - self.range.one;\n             Some(result)\n-        } else if self.done {\n-            None\n-        } else {\n+        } else if !self.done && self.range.state == self.range.stop {\n             self.done = true;\n             Some(self.range.stop.clone())\n+        } else {\n+            None\n         }\n     }\n }\n@@ -2713,7 +2713,9 @@ mod tests {\n         assert_eq!(range_inclusive(0i, 5).collect::<~[int]>(), ~[0i, 1, 2, 3, 4, 5]);\n         assert_eq!(range_inclusive(0i, 5).invert().collect::<~[int]>(), ~[5i, 4, 3, 2, 1, 0]);\n         assert_eq!(range_inclusive(200, -5).collect::<~[int]>(), ~[]);\n+        assert_eq!(range_inclusive(200, -5).invert().collect::<~[int]>(), ~[]);\n         assert_eq!(range_inclusive(200, 200).collect::<~[int]>(), ~[200]);\n+        assert_eq!(range_inclusive(200, 200).invert().collect::<~[int]>(), ~[200]);\n     }\n \n     #[test]"}]}