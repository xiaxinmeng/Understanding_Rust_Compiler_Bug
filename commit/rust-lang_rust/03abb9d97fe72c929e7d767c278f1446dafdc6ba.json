{"sha": "03abb9d97fe72c929e7d767c278f1446dafdc6ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYWJiOWQ5N2ZlNzJjOTI5ZTdkNzY3YzI3OGYxNDQ2ZGFmZGM2YmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T08:20:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-11T08:20:21Z"}, "message": "Rollup merge of #43721 - natboehm:patch-1, r=steveklabnik\n\nProvide more explanation for Deref in String docs\n\nWhile working on a different project I encountered a point of confusion where using `&String` to dereference a `String` into `&str` did not compile. I found the explanation of [String Deref](https://doc.rust-lang.org/std/string/struct.String.html#deref), thought that it matched what I was trying to do, and was confused as to why my program did not compile when the docs stated that it would work with 'any function which takes a `&str`'. At the bottom it is mentioned that this will 'generally' work, unless `String` is needed, but I found this statement confusing based on the previous claim of 'any'. Looking further into the docs I was able to find the function `as_str()` that works instead.\n\nI thought it might be helpful to mention here deref coercion, an instance in which using `&String` does not work, to explain why it does not work, then direct users to a different option that should work in this instance. A user casually skimming the page will likely come to this explanation first, then find `as_str()` later, but be no the wiser as to what potentially went wrong.\n\nr? @steveklabnik", "tree": {"sha": "d37681ee19702812c9d1a2f10109c62837ba78df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d37681ee19702812c9d1a2f10109c62837ba78df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03abb9d97fe72c929e7d767c278f1446dafdc6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03abb9d97fe72c929e7d767c278f1446dafdc6ba", "html_url": "https://github.com/rust-lang/rust/commit/03abb9d97fe72c929e7d767c278f1446dafdc6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03abb9d97fe72c929e7d767c278f1446dafdc6ba/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d39094c9653c16a8412cbf750d9995a8003151", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d39094c9653c16a8412cbf750d9995a8003151", "html_url": "https://github.com/rust-lang/rust/commit/e9d39094c9653c16a8412cbf750d9995a8003151"}, {"sha": "fac6ce79e54a2d5bdbdc5157c645970a479e2fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac6ce79e54a2d5bdbdc5157c645970a479e2fb1", "html_url": "https://github.com/rust-lang/rust/commit/fac6ce79e54a2d5bdbdc5157c645970a479e2fb1"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "322b137e99f0e9b6856d5171384aab0b3f482a87", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/03abb9d97fe72c929e7d767c278f1446dafdc6ba/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03abb9d97fe72c929e7d767c278f1446dafdc6ba/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=03abb9d97fe72c929e7d767c278f1446dafdc6ba", "patch": "@@ -144,7 +144,7 @@ use boxed::Box;\n /// # Deref\n ///\n /// `String`s implement [`Deref`]`<Target=str>`, and so inherit all of [`str`]'s\n-/// methods. In addition, this means that you can pass a `String` to any\n+/// methods. In addition, this means that you can pass a `String` to a\n /// function which takes a [`&str`] by using an ampersand (`&`):\n ///\n /// ```\n@@ -160,8 +160,38 @@ use boxed::Box;\n ///\n /// This will create a [`&str`] from the `String` and pass it in. This\n /// conversion is very inexpensive, and so generally, functions will accept\n-/// [`&str`]s as arguments unless they need a `String` for some specific reason.\n+/// [`&str`]s as arguments unless they need a `String` for some specific\n+/// reason.\n ///\n+/// In certain cases Rust doesn't have enough information to make this\n+/// conversion, known as `Deref` coercion. In the following example a string\n+/// slice `&'a str` implements the trait `TraitExample`, and the function\n+/// `example_func` takes anything that implements the trait. In this case Rust\n+/// would need to make two implicit conversions, which Rust doesn't have the\n+/// means to do. For that reason, the following example will not compile.\n+///\n+/// ```compile_fail,E0277\n+/// trait TraitExample {}\n+///\n+/// impl<'a> TraitExample for &'a str {}\n+///\n+/// fn example_func<A: TraitExample>(example_arg: A) {}\n+///\n+/// fn main() {\n+///     let example_string = String::from(\"example_string\");\n+///     example_func(&example_string);\n+/// }\n+/// ```\n+///\n+/// There are two options that would work instead. The first would be to\n+/// change the line `example_func(&example_string);` to\n+/// `example_func(example_string.as_str());`, using the method `as_str()`\n+/// to explicitly extract the string slice containing the string. The second\n+/// way changes `example_func(&example_string);` to\n+/// `example_func(&*example_string);`. In this case we are dereferencing a\n+/// `String` to a `str`, then referencing the `str` back to `&str`. The\n+/// second way is more idiomatic, however both work to do the conversion\n+/// explicitly rather than relying on the implicit conversion.\n ///\n /// # Representation\n ///"}]}