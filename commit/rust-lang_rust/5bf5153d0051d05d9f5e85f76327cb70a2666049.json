{"sha": "5bf5153d0051d05d9f5e85f76327cb70a2666049", "node_id": "C_kwDOAAsO6NoAKDViZjUxNTNkMDA1MWQwNWQ5ZjVlODVmNzYzMjdjYjcwYTI2NjYwNDk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-14T15:49:32Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-14T15:49:32Z"}, "message": "Fix non-dynamic indexing into vector types", "tree": {"sha": "faf6d4d8f50474384b3bf61d36930fafb07b98e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faf6d4d8f50474384b3bf61d36930fafb07b98e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf5153d0051d05d9f5e85f76327cb70a2666049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5153d0051d05d9f5e85f76327cb70a2666049", "html_url": "https://github.com/rust-lang/rust/commit/5bf5153d0051d05d9f5e85f76327cb70a2666049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5153d0051d05d9f5e85f76327cb70a2666049/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478bc5ba01a02d3d0c0ec1b1766f15448b29b8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/478bc5ba01a02d3d0c0ec1b1766f15448b29b8fa", "html_url": "https://github.com/rust-lang/rust/commit/478bc5ba01a02d3d0c0ec1b1766f15448b29b8fa"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "4600d417fa1ebdc866630bbfaf2b947c6a4bed88", "filename": "src/value_and_place.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5bf5153d0051d05d9f5e85f76327cb70a2666049/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf5153d0051d05d9f5e85f76327cb70a2666049/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=5bf5153d0051d05d9f5e85f76327cb70a2666049", "patch": "@@ -3,6 +3,7 @@\n use crate::prelude::*;\n \n use cranelift_codegen::ir::immediates::Offset32;\n+use cranelift_codegen::ir::{InstructionData, Opcode};\n \n fn codegen_field<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n@@ -457,13 +458,15 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    #[track_caller]\n     pub(crate) fn to_ptr(self) -> Pointer {\n         match self.to_ptr_maybe_unsized() {\n             (ptr, None) => ptr,\n             (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n         }\n     }\n \n+    #[track_caller]\n     pub(crate) fn to_ptr_maybe_unsized(self) -> (Pointer, Option<Value>) {\n         match self.inner {\n             CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n@@ -787,7 +790,36 @@ impl<'tcx> CPlace<'tcx> {\n         index: Value,\n     ) -> CPlace<'tcx> {\n         let (elem_layout, ptr) = match self.layout().ty.kind() {\n-            ty::Array(elem_ty, _) => (fx.layout_of(*elem_ty), self.to_ptr()),\n+            ty::Array(elem_ty, _) => {\n+                let elem_layout = fx.layout_of(*elem_ty);\n+                match self.inner {\n+                    CPlaceInner::Var(local, var) => {\n+                        // This is a hack to handle `vector_val.0[1]`. It doesn't allow dynamic\n+                        // indexing.\n+                        let lane_idx = match fx.bcx.func.dfg.insts\n+                            [fx.bcx.func.dfg.value_def(index).unwrap_inst()]\n+                        {\n+                            InstructionData::UnaryImm { opcode: Opcode::Iconst, imm } => imm,\n+                            _ => bug!(\n+                                \"Dynamic indexing into a vector type is not supported: {self:?}[{index}]\"\n+                            ),\n+                        };\n+                        return CPlace {\n+                            inner: CPlaceInner::VarLane(\n+                                local,\n+                                var,\n+                                lane_idx.bits().try_into().unwrap(),\n+                            ),\n+                            layout: elem_layout,\n+                        };\n+                    }\n+                    CPlaceInner::Addr(addr, None) => (elem_layout, addr),\n+                    CPlaceInner::Addr(_, Some(_))\n+                    | CPlaceInner::VarPair(_, _, _)\n+                    | CPlaceInner::VarLane(_, _, _) => bug!(\"Can't index into {self:?}\"),\n+                }\n+                // FIXME use VarLane in case of Var with simd type\n+            }\n             ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_maybe_unsized().0),\n             _ => bug!(\"place_index({:?})\", self.layout().ty),\n         };"}]}