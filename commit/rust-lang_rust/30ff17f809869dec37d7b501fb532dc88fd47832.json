{"sha": "30ff17f809869dec37d7b501fb532dc88fd47832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmYxN2Y4MDk4NjlkZWMzN2Q3YjUwMWZiNTMyZGM4OGZkNDc4MzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T21:43:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-17T18:11:39Z"}, "message": "Upgrade LLVM\n\nThis comes with a number of fixes to be compatible with upstream LLVM:\n\n* Previously all monomorphizations of \"mem::size_of()\" would receive the same\n  symbol. In the past LLVM would silently rename duplicated symbols, but it\n  appears to now be dropping the duplicate symbols and functions now. The symbol\n  names of monomorphized functions are now no longer solely based on the type of\n  the function, but rather the type and the unique hash for the\n  monomorphization.\n\n* Split stacks are no longer a global feature controlled by a flag in LLVM.\n  Instead, they are opt-in on a per-function basis through a function attribute.\n  The rust #[no_split_stack] attribute will disable this, otherwise all\n  functions have #[split_stack] attached to them.\n\n* The compare and swap instruction now takes two atomic orderings, one for the\n  successful case and one for the failure case. LLVM internally has an\n  implementation of calculating the appropriate failure ordering given a\n  particular success ordering (previously only a success ordering was\n  specified), and I copied that into the intrinsic translation so the failure\n  ordering isn't supplied on a source level for now.\n\n* Minor tweaks to LLVM's API in terms of debuginfo, naming, c++11 conventions,\n  etc.", "tree": {"sha": "c2959002747236a37d2b5a1920ba49c8aea4c099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2959002747236a37d2b5a1920ba49c8aea4c099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ff17f809869dec37d7b501fb532dc88fd47832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ff17f809869dec37d7b501fb532dc88fd47832", "html_url": "https://github.com/rust-lang/rust/commit/30ff17f809869dec37d7b501fb532dc88fd47832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ff17f809869dec37d7b501fb532dc88fd47832/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903fbd263553c105b7b8c5f5ee19fab89d4618bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/903fbd263553c105b7b8c5f5ee19fab89d4618bd", "html_url": "https://github.com/rust-lang/rust/commit/903fbd263553c105b7b8c5f5ee19fab89d4618bd"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "8099aada558e729bc0e0eb36b9e551ced3c3d394", "filename": "configure", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/configure", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -921,10 +921,6 @@ do\n         LLVM_OPTS=\"$LLVM_OPTS --disable-terminfo\"\n         # Try to have LLVM pull in as few dependencies as possible (#9397)\n         LLVM_OPTS=\"$LLVM_OPTS --disable-zlib --disable-libffi\"\n-        # LLVM says it needs a \"new\" clang/gcc, but we seem to get by ok with\n-        # older versions on the bots. Get by for a little longer by asking it to\n-        # not do version detection\n-        LLVM_OPTS=\"$LLVM_OPTS --disable-compiler-version-checks\"\n \n         # Use win32 native thread/lock apis instead of pthread wrapper.\n         # (llvm's configure tries to find pthread first, so we have to disable it explicitly.)"}, {"sha": "10e717e550d1fc8c1105f5268af4ff1344026a78", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -1261,7 +1261,8 @@ pub mod llvm {\n                                       LHS: ValueRef,\n                                       CMP: ValueRef,\n                                       RHS: ValueRef,\n-                                      Order: AtomicOrdering)\n+                                      Order: AtomicOrdering,\n+                                      FailureOrder: AtomicOrdering)\n                                       -> ValueRef;\n         pub fn LLVMBuildAtomicRMW(B: BuilderRef,\n                                   Op: AtomicBinOp,\n@@ -1586,7 +1587,8 @@ pub mod llvm {\n                                                Scope: DIDescriptor,\n                                                File: DIFile,\n                                                Line: c_uint,\n-                                               Col: c_uint)\n+                                               Col: c_uint,\n+                                               Discriminator: c_uint)\n                                                -> DILexicalBlock;\n \n         pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,"}, {"sha": "95b928587c4d100749c29edf04d9dd0b0e057c65", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -445,8 +445,8 @@ pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     }\n \n     // Add the no-split-stack attribute if requested\n-    if contains_name(attrs, \"no_split_stack\") {\n-        set_no_split_stack(llfn);\n+    if !contains_name(attrs, \"no_split_stack\") {\n+        set_split_stack(llfn);\n     }\n \n     if contains_name(attrs, \"cold\") {\n@@ -458,8 +458,8 @@ pub fn set_always_inline(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n-pub fn set_no_split_stack(f: ValueRef) {\n-    \"no-split-stack\".with_c_str(|buf| {\n+pub fn set_split_stack(f: ValueRef) {\n+    \"split-stack\".with_c_str(|buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     })\n }"}, {"sha": "65db4bdc9ab9d26c7a8c07f979c68be0b36189e4", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -814,8 +814,9 @@ pub fn Resume(cx: &Block, exn: ValueRef) -> ValueRef {\n // Atomic Operations\n pub fn AtomicCmpXchg(cx: &Block, dst: ValueRef,\n                      cmp: ValueRef, src: ValueRef,\n-                     order: AtomicOrdering) -> ValueRef {\n-    B(cx).atomic_cmpxchg(dst, cmp, src, order)\n+                     order: AtomicOrdering,\n+                     failure_order: AtomicOrdering) -> ValueRef {\n+    B(cx).atomic_cmpxchg(dst, cmp, src, order, failure_order)\n }\n pub fn AtomicRMW(cx: &Block, op: AtomicBinOp,\n                  dst: ValueRef, src: ValueRef,"}, {"sha": "a02453a2554f4e4acdf1516851c8d07009358069", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -949,9 +949,11 @@ impl<'a> Builder<'a> {\n     // Atomic Operations\n     pub fn atomic_cmpxchg(&self, dst: ValueRef,\n                          cmp: ValueRef, src: ValueRef,\n-                         order: AtomicOrdering) -> ValueRef {\n+                         order: AtomicOrdering,\n+                         failure_order: AtomicOrdering) -> ValueRef {\n         unsafe {\n-            llvm::LLVMBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src, order)\n+            llvm::LLVMBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n+                                         order, failure_order)\n         }\n     }\n     pub fn atomic_rmw(&self, op: AtomicBinOp,"}, {"sha": "fd6a465eabb22611180e6fb226a6920b458550d2", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -2422,7 +2422,8 @@ fn populate_scope_map(cx: &CrateContext,\n                 parent_scope,\n                 file_metadata,\n                 loc.line as c_uint,\n-                loc.col.to_uint() as c_uint)\n+                loc.col.to_uint() as c_uint,\n+                0)\n         };\n \n         scope_stack.push(ScopeStackEntry { scope_metadata: scope_metadata, ident: None });\n@@ -2539,7 +2540,8 @@ fn populate_scope_map(cx: &CrateContext,\n                                 parent_scope,\n                                 file_metadata,\n                                 loc.line as c_uint,\n-                                loc.col.to_uint() as c_uint)\n+                                loc.col.to_uint() as c_uint,\n+                                0)\n                         };\n \n                         scope_stack.push(ScopeStackEntry {"}, {"sha": "9e5213e6a99a2971fac1dd0c5ca35f02d2514b10", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -223,10 +223,23 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n \n         match *split.get(1) {\n             \"cxchg\" => {\n+                // See include/llvm/IR/Instructions.h for their implementation\n+                // of this, I assume that it's good enough for us to use for\n+                // now.\n+                let strongest_failure_ordering = match order {\n+                    lib::llvm::NotAtomic | lib::llvm::Unordered =>\n+                        ccx.sess().fatal(\"cmpxchg must be atomic\"),\n+                    lib::llvm::Monotonic | lib::llvm::Release =>\n+                        lib::llvm::Monotonic,\n+                    lib::llvm::Acquire | lib::llvm::AcquireRelease =>\n+                        lib::llvm::Acquire,\n+                    lib::llvm::SequentiallyConsistent =>\n+                        lib::llvm::SequentiallyConsistent,\n+                };\n                 let old = AtomicCmpXchg(bcx, get_param(decl, first_real_arg),\n                                         get_param(decl, first_real_arg + 1u),\n                                         get_param(decl, first_real_arg + 2u),\n-                                        order);\n+                                        order, strongest_failure_ordering);\n                 Ret(bcx, old);\n             }\n             \"load\" => {"}, {"sha": "35ae9a26954db5b4ef811f8c1ef3abaea77d90c8", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use back::link::mangle_exported_name;\n+use back::link::exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n@@ -27,6 +26,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::local_def;\n+use std::hash::sip;\n \n pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n@@ -178,7 +178,8 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     }\n \n     let s = ccx.tcx.map.with_path(fn_id.node, |path| {\n-        mangle_exported_name(ccx, path, mono_ty, fn_id.node)\n+        exported_name(path, format!(\"h{}\", sip::hash(&(hash_id, mono_ty))),\n+                      ccx.link_meta.crateid.version_or_default())\n     });\n     debug!(\"monomorphize_fn mangled to {}\", s);\n "}, {"sha": "4b4d0533b4f76cc3fbba31bd9e7ac02e0c738b1d", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -1 +1 @@\n-Subproject commit 263c617d66005999afa27d00809c1568a26112ee\n+Subproject commit 4b4d0533b4f76cc3fbba31bd9e7ac02e0c738b1d"}, {"sha": "32bac73debfb9609bc0d228a226e4c69ef0671e8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -81,7 +81,9 @@ LLVMRustCreateTargetMachine(const char *triple,\n \n     TargetOptions Options;\n     Options.NoFramePointerElim = NoFramePointerElim;\n+#if LLVM_VERSION_MINOR < 5\n     Options.EnableSegmentedStacks = EnableSegmentedStacks;\n+#endif\n     Options.FloatABIType = FloatABI::Default;\n     Options.UseSoftFloat = UseSoftFloat;\n     if (UseSoftFloat) {\n@@ -111,7 +113,11 @@ LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n                           LLVMPassManagerRef PMR,\n                           LLVMModuleRef M) {\n     PassManagerBase *PM = unwrap(PMR);\n+#if LLVM_VERSION_MINOR >= 5\n+    PM->add(new DataLayoutPass(unwrap(M)));\n+#else\n     PM->add(new DataLayout(unwrap(M)));\n+#endif\n     unwrap(TM)->addAnalysisPasses(*PM);\n }\n "}, {"sha": "035a39669de8d4323b52b2f4cb95cbdc6458205c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -129,9 +129,14 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                LLVMValueRef target,\n                                                LLVMValueRef old,\n                                                LLVMValueRef source,\n-                                               AtomicOrdering order) {\n+                                               AtomicOrdering order,\n+                                               AtomicOrdering failure_order) {\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n-                                               unwrap(source), order));\n+                                               unwrap(source), order\n+#if LLVM_VERSION_MINOR >= 5\n+                                               , failure_order\n+#endif\n+                                               ));\n }\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n     return wrap(unwrap(B)->CreateFence(order));\n@@ -289,10 +294,9 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         RunTimeLang,\n         unwrapDI<DIType>(VTableHolder)\n #if LLVM_VERSION_MINOR >= 5\n-        ,UniqueId));\n-#else\n-        ));\n+        ,UniqueId\n #endif\n+        ));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n@@ -318,10 +322,15 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n     LLVMValueRef Scope,\n     LLVMValueRef File,\n     unsigned Line,\n-    unsigned Col) {\n+    unsigned Col,\n+    unsigned Discriminator) {\n     return wrap(Builder->createLexicalBlock(\n         unwrapDI<DIDescriptor>(Scope),\n-        unwrapDI<DIFile>(File), Line, Col));\n+        unwrapDI<DIFile>(File), Line, Col\n+#if LLVM_VERSION_MINOR >= 5\n+        , Discriminator\n+#endif\n+        ));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateStaticVariable(\n@@ -477,15 +486,16 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang\n #if LLVM_VERSION_MINOR >= 5\n-        ,UniqueId));\n-#else\n-        ));\n+        ,UniqueId\n #endif\n+        ));\n }\n \n+#if LLVM_VERSION_MINOR < 5\n extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n     unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n }\n+#endif\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n     DIBuilderRef Builder,\n@@ -620,6 +630,23 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n }\n #endif\n \n+#if LLVM_VERSION_MINOR >= 5\n+extern \"C\" void*\n+LLVMRustOpenArchive(char *path) {\n+    std::unique_ptr<MemoryBuffer> buf;\n+    error_code err = MemoryBuffer::getFile(path, buf);\n+    if (err) {\n+        LLVMRustError = err.message().c_str();\n+        return NULL;\n+    }\n+    Archive *ret = new Archive(buf.release(), err);\n+    if (err) {\n+        LLVMRustError = err.message().c_str();\n+        return NULL;\n+    }\n+    return ret;\n+}\n+#else\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     OwningPtr<MemoryBuffer> buf;\n@@ -635,6 +662,7 @@ LLVMRustOpenArchive(char *path) {\n     }\n     return ret;\n }\n+#endif\n \n extern \"C\" const char*\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {"}, {"sha": "340a491527710eb8c574852cf8660823562854d4", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-02-25\n+2014-04-14"}, {"sha": "42c60e72baba7e0c3aab7dd0f99ec54139daac63", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/30ff17f809869dec37d7b501fb532dc88fd47832/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=30ff17f809869dec37d7b501fb532dc88fd47832", "patch": "@@ -12,7 +12,6 @@\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n #include \"llvm/IR/Module.h\"\n-#include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n@@ -43,8 +42,6 @@\n #include \"llvm/Transforms/IPO.h\"\n #include \"llvm/Transforms/Instrumentation.h\"\n #include \"llvm/Transforms/Vectorize.h\"\n-#include \"llvm/DebugInfo.h\"\n-#include \"llvm/DIBuilder.h\"\n #include \"llvm/Bitcode/ReaderWriter.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n@@ -53,8 +50,14 @@\n \n #if LLVM_VERSION_MINOR >= 5\n #include \"llvm/IR/IRPrintingPasses.h\"\n+#include \"llvm/IR/DebugInfo.h\"\n+#include \"llvm/IR/DIBuilder.h\"\n+#include \"llvm/Linker/Linker.h\"\n #else\n #include \"llvm/Assembly/PrintModulePass.h\"\n+#include \"llvm/DebugInfo.h\"\n+#include \"llvm/DIBuilder.h\"\n+#include \"llvm/Linker.h\"\n #endif\n \n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()"}]}