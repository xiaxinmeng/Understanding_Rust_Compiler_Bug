{"sha": "544a6bb7e72c907f05881ae7f461005cc5f92759", "node_id": "C_kwDOAAsO6NoAKDU0NGE2YmI3ZTcyYzkwN2YwNTg4MWFlN2Y0NjEwMDVjYzVmOTI3NTk", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-28T21:43:08Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-28T21:43:08Z"}, "message": "Replace &DocCtxt -> TyCtxt in macro matcher rendering", "tree": {"sha": "4f49ddfa6944db60cd635ad00baa8988a7d0cb4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f49ddfa6944db60cd635ad00baa8988a7d0cb4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544a6bb7e72c907f05881ae7f461005cc5f92759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHLhOwACgkQ+boUO5X/\nbYL1/Q//ZqreuBDahScYniTwlXlfwu62fQtVJD3v3VFBJ7nJFYsljNW9O4ol3qli\ndaAZGznyS0PE3OYrG9jr6i+o0e6ZpGcJjNo2m4Sm60OiL7Jt0r/C+jecqsVX+mBW\nY9ttIk2zXlX7apUus2VybPtcnSVx74eXGW5tNOHA3LHnYxxIB3Zv8WSsR3r2aE98\nW9gcsJ4cOWB+YaRG2KdI+StAw1jQC0KeXI6Ug3cShz2/otVDgdAvoKkja/lODVId\nklBsfdH8tONJy0xUyOy2pl9K+vrrslIrw0I5Uc9H+vJsC65iqoEeXNE7T3xKcu9x\ncK8TwxA/NyDcLNh7Hs5ciyeah1W+ppAaqB+Y6PHqd9LYF/2jFA16DTZoqE4dGSq0\n+T11l7mn6BL1V/JCxUETItI144gzoFeqirdBDQ6oL9SbCe93BtTM2+cyeJALrCRO\nmZpRzeq0ywmQ67VMLXygbN/k8OqkY/PoHOJf08mV0C0Y6dVFIIuKaCNlyc85cgKk\nkFpjyspU7xQWhuNIL3UPJnOUHlCD+1J3NE/LjTpEdZK+7XDXus9uiXTbnaQ/QPUg\nrfeyf0r2ksQNlAMa85PuZ2UGIjkjaRssqAjUGgBenmMjFpFxxiIPYmThfSbokDGx\nrAE4AiN0z4c8Awb/UkCHkJ7aD1zWRHOnpanV6WM9X8EMp2oL65A=\n=ilHl\n-----END PGP SIGNATURE-----", "payload": "tree 4f49ddfa6944db60cd635ad00baa8988a7d0cb4b\nparent 336c85a053ff502fb2f42d2579fcff61efd6bdda\nauthor David Tolnay <dtolnay@gmail.com> 1640727788 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640727788 -0800\n\nReplace &DocCtxt -> TyCtxt in macro matcher rendering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544a6bb7e72c907f05881ae7f461005cc5f92759", "html_url": "https://github.com/rust-lang/rust/commit/544a6bb7e72c907f05881ae7f461005cc5f92759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544a6bb7e72c907f05881ae7f461005cc5f92759/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336c85a053ff502fb2f42d2579fcff61efd6bdda", "url": "https://api.github.com/repos/rust-lang/rust/commits/336c85a053ff502fb2f42d2579fcff61efd6bdda", "html_url": "https://github.com/rust-lang/rust/commit/336c85a053ff502fb2f42d2579fcff61efd6bdda"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2c3fd39baf69f523e3c018fb84b081faed8d1572", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/544a6bb7e72c907f05881ae7f461005cc5f92759/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544a6bb7e72c907f05881ae7f461005cc5f92759/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=544a6bb7e72c907f05881ae7f461005cc5f92759", "patch": "@@ -486,22 +486,22 @@ crate const DOC_RUST_LANG_ORG_CHANNEL: &str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");\n /// Render a sequence of macro arms in a format suitable for displaying to the user\n /// as part of an item declaration.\n pub(super) fn render_macro_arms<'a>(\n-    cx: &DocContext<'_>,\n+    tcx: TyCtxt<'_>,\n     matchers: impl Iterator<Item = &'a TokenTree>,\n     arm_delim: &str,\n ) -> String {\n     let mut out = String::new();\n     for matcher in matchers {\n-        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(cx, matcher), arm_delim)\n+        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(tcx, matcher), arm_delim)\n             .unwrap();\n     }\n     out\n }\n \n /// Render a macro matcher in a format suitable for displaying to the user\n /// as part of an item declaration.\n-pub(super) fn render_macro_matcher(cx: &DocContext<'_>, matcher: &TokenTree) -> String {\n-    if let Some(snippet) = snippet_equal_to_token(cx, matcher) {\n+pub(super) fn render_macro_matcher(tcx: TyCtxt<'_>, matcher: &TokenTree) -> String {\n+    if let Some(snippet) = snippet_equal_to_token(tcx, matcher) {\n         snippet\n     } else {\n         rustc_ast_pretty::pprust::tt_to_string(matcher)\n@@ -510,11 +510,11 @@ pub(super) fn render_macro_matcher(cx: &DocContext<'_>, matcher: &TokenTree) ->\n \n /// Find the source snippet for this token's Span, reparse it, and return the\n /// snippet if the reparsed TokenTree matches the argument TokenTree.\n-fn snippet_equal_to_token(cx: &DocContext<'_>, matcher: &TokenTree) -> Option<String> {\n+fn snippet_equal_to_token(tcx: TyCtxt<'_>, matcher: &TokenTree) -> Option<String> {\n     // Find what rustc thinks is the source snippet.\n     // This may not actually be anything meaningful if this matcher was itself\n     // generated by a macro.\n-    let source_map = cx.sess().source_map();\n+    let source_map = tcx.sess.source_map();\n     let span = matcher.span();\n     let snippet = source_map.span_to_snippet(span).ok()?;\n \n@@ -561,21 +561,21 @@ pub(super) fn display_macro_source(\n     let matchers = tts.chunks(4).map(|arm| &arm[0]);\n \n     if def.macro_rules {\n-        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx, matchers, \";\"))\n+        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx.tcx, matchers, \";\"))\n     } else {\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                matchers.map(|matcher| render_macro_matcher(cx, matcher)).collect::<String>(),\n+                matchers.map(|matcher| render_macro_matcher(cx.tcx, matcher)).collect::<String>(),\n             )\n         } else {\n             format!(\n                 \"{}macro {} {{\\n{}}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                render_macro_arms(cx, matchers, \",\"),\n+                render_macro_arms(cx.tcx, matchers, \",\"),\n             )\n         }\n     }"}]}