{"sha": "f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NGU1MmE3ZjcwM2VjYjE4Y2JmN2MzOWJkMTQ3OWNkOTliZDIwYWU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T18:18:18Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:38Z"}, "message": "Tell trans which binops are by value", "tree": {"sha": "198c815ff0e557677b7cad0a2a21c5e32d282f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198c815ff0e557677b7cad0a2a21c5e32d282f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "html_url": "https://github.com/rust-lang/rust/commit/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae/comments", "author": null, "committer": null, "parents": [{"sha": "c3a6d2860cc0448dea8a9918d22b30839d2548c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a6d2860cc0448dea8a9918d22b30839d2548c8", "html_url": "https://github.com/rust-lang/rust/commit/c3a6d2860cc0448dea8a9918d22b30839d2548c8"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "bde68981ff493e7a7d954e0d0369f401c8a331a0", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "patch": "@@ -996,10 +996,11 @@ pub enum CallArgs<'a, 'tcx> {\n     // value.\n     ArgVals(&'a [ValueRef]),\n \n-    // For overloaded operators: `(lhs, Vec(rhs, rhs_id))`. `lhs`\n+    // For overloaded operators: `(lhs, Vec(rhs, rhs_id), autoref)`. `lhs`\n     // is the left-hand-side and `rhs/rhs_id` is the datum/expr-id of\n-    // the right-hand-side arguments (if any).\n-    ArgOverloadedOp(Datum<'tcx, Expr>, Vec<(Datum<'tcx, Expr>, ast::NodeId)>),\n+    // the right-hand-side arguments (if any). `autoref` indicates whether the `rhs`\n+    // arguments should be auto-referenced\n+    ArgOverloadedOp(Datum<'tcx, Expr>, Vec<(Datum<'tcx, Expr>, ast::NodeId)>, bool),\n \n     // Supply value of arguments as a list of expressions that must be\n     // translated, for overloaded call operators.\n@@ -1171,7 +1172,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                               arg_cleanup_scope,\n                                               ignore_self)\n         }\n-        ArgOverloadedOp(lhs, rhs) => {\n+        ArgOverloadedOp(lhs, rhs, autoref) => {\n             assert!(!variadic);\n \n             llargs.push(unpack_result!(bcx, {\n@@ -1185,7 +1186,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                 llargs.push(unpack_result!(bcx, {\n                     trans_arg_datum(bcx, arg_tys[1], rhs,\n                                     arg_cleanup_scope,\n-                                    DoAutorefArg(rhs_id))\n+                                    if autoref { DoAutorefArg(rhs_id) } else { DontAutorefArg })\n                 }));\n             }\n         }"}, {"sha": "55672004f142221bac4352c64f74eb2eb025fbf5", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "patch": "@@ -609,7 +609,8 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                method_call,\n                                                base_datum,\n                                                args,\n-                                               Some(SaveIn(scratch.val))));\n+                                               Some(SaveIn(scratch.val)),\n+                                               true));\n             DatumBlock::new(bcx, scratch.to_expr_datum())\n         }\n         ast::ExprBox(_, ref contents) => {\n@@ -762,7 +763,8 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                method_call,\n                                                base_datum,\n                                                vec![(ix_datum, idx.id)],\n-                                               Some(SaveIn(scratch.val))));\n+                                               Some(SaveIn(scratch.val)),\n+                                               true));\n             let datum = scratch.to_expr_datum();\n             if ty::type_is_sized(bcx.tcx(), elt_ty) {\n                 Datum::new(datum.to_llscalarish(bcx), elt_ty, LvalueExpr)\n@@ -1092,25 +1094,26 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                       callee::ArgExprs(args.as_slice()),\n                                       dest)\n         }\n-        ast::ExprBinary(_, ref lhs, ref rhs) => {\n+        ast::ExprBinary(op, ref lhs, ref rhs) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let lhs = unpack_datum!(bcx, trans(bcx, &**lhs));\n             let rhs_datum = unpack_datum!(bcx, trans(bcx, &**rhs));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id), lhs,\n-                                vec![(rhs_datum, rhs.id)], Some(dest)).bcx\n+                                vec![(rhs_datum, rhs.id)], Some(dest),\n+                                !ast_util::is_by_value_binop(op)).bcx\n         }\n         ast::ExprUnary(_, ref subexpr) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let arg = unpack_datum!(bcx, trans(bcx, &**subexpr));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id),\n-                                arg, Vec::new(), Some(dest)).bcx\n+                                arg, Vec::new(), Some(dest), true).bcx\n         }\n         ast::ExprIndex(ref base, ref idx) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let base = unpack_datum!(bcx, trans(bcx, &**base));\n             let idx_datum = unpack_datum!(bcx, trans(bcx, &**idx));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id), base,\n-                                vec![(idx_datum, idx.id)], Some(dest)).bcx\n+                                vec![(idx_datum, idx.id)], Some(dest), true).bcx\n         }\n         ast::ExprCast(ref val, _) => {\n             // DPS output mode means this is a trait cast:\n@@ -1803,7 +1806,8 @@ fn trans_overloaded_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                    method_call: MethodCall,\n                                    lhs: Datum<'tcx, Expr>,\n                                    rhs: Vec<(Datum<'tcx, Expr>, ast::NodeId)>,\n-                                   dest: Option<Dest>)\n+                                   dest: Option<Dest>,\n+                                   autoref: bool)\n                                    -> Result<'blk, 'tcx> {\n     let method_ty = (*bcx.tcx().method_map.borrow())[method_call].ty;\n     callee::trans_call_inner(bcx,\n@@ -1815,7 +1819,7 @@ fn trans_overloaded_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                           None,\n                                                           arg_cleanup_scope)\n                              },\n-                             callee::ArgOverloadedOp(lhs, rhs),\n+                             callee::ArgOverloadedOp(lhs, rhs, autoref),\n                              dest)\n }\n \n@@ -2122,7 +2126,8 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_deref\");\n \n             unpack_result!(bcx, trans_overloaded_op(bcx, expr, method_call,\n-                                                    datum, Vec::new(), Some(SaveIn(scratch.val))));\n+                                                    datum, Vec::new(), Some(SaveIn(scratch.val)),\n+                                                    false));\n             scratch.to_expr_datum()\n         }\n         None => {"}]}