{"sha": "4800c05a206eb156617b76fdb30af0b6c2c0fb26", "node_id": "C_kwDOAAsO6NoAKDQ4MDBjMDVhMjA2ZWIxNTY2MTdiNzZmZGIzMGFmMGI2YzJjMGZiMjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-31T16:03:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T16:03:23Z"}, "message": "Merge #11388\n\n11388: fix: Fix proc-macro server not using the supplied span in Ident::new r=Veykril a=Veykril\n\nThis makes the hack introduced by https://github.com/rust-analyzer/rust-analyzer/pull/10899 obsolete.\r\n\r\nFor async-trait specifically, (unfortunately, but technically correct) due to how async-trait works, the self local now renders white, as it now resolves to the `__self` local introduced by the attribute.\r\n\r\n![Code_0Ezw6PJAbh](https://user-images.githubusercontent.com/3757771/151827812-c03b8fc7-7ecf-4959-804a-2680d8e61e8b.png)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "73a434b339b3906fcfa7214bb375fd1f682e5b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a434b339b3906fcfa7214bb375fd1f682e5b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4800c05a206eb156617b76fdb30af0b6c2c0fb26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+AhLCRBK7hj4Ov3rIwAARu8IAEjrpvTihVdLUwd3wuPouQMY\nE0ImNoo/znflD3YAnQOGuFRtxWnG3RFbw4rTgrl6QiqZSlCH3heDah0/78Jzy1EK\njKg9wY6aHdPAXoLJXLg/V05eGrDq1GY/Tj0NUTml3K4C5y7fXsBq57QVBiU+Kuaf\np5IDw5ngjgpnuBqio3wfUxMbV3yGSrqq/mn9+FNONZgoViwF8E9cSVO07IwwCS8c\nPrhHOlCdmKAHGSjRfA4C5IREOSObxWejLCoXiOYxC6Saf3NMrMTKTWZ56BSp8yiS\nEBK48fl2xfcG9Ungu4XO5LHY2LafKQL3wMBoqBaOgDVbDMrvW5lJbecXtU8Dves=\n=PJOj\n-----END PGP SIGNATURE-----\n", "payload": "tree 73a434b339b3906fcfa7214bb375fd1f682e5b2f\nparent 1cc125fdd8be945dd975daf0815be3f60b1cca9a\nparent f6def3ccdfb9e59083e14f8b321fee1cde5249df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643645003 +0000\ncommitter GitHub <noreply@github.com> 1643645003 +0000\n\nMerge #11388\n\n11388: fix: Fix proc-macro server not using the supplied span in Ident::new r=Veykril a=Veykril\n\nThis makes the hack introduced by https://github.com/rust-analyzer/rust-analyzer/pull/10899 obsolete.\r\n\r\nFor async-trait specifically, (unfortunately, but technically correct) due to how async-trait works, the self local now renders white, as it now resolves to the `__self` local introduced by the attribute.\r\n\r\n![Code_0Ezw6PJAbh](https://user-images.githubusercontent.com/3757771/151827812-c03b8fc7-7ecf-4959-804a-2680d8e61e8b.png)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4800c05a206eb156617b76fdb30af0b6c2c0fb26", "html_url": "https://github.com/rust-lang/rust/commit/4800c05a206eb156617b76fdb30af0b6c2c0fb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4800c05a206eb156617b76fdb30af0b6c2c0fb26/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc125fdd8be945dd975daf0815be3f60b1cca9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc125fdd8be945dd975daf0815be3f60b1cca9a", "html_url": "https://github.com/rust-lang/rust/commit/1cc125fdd8be945dd975daf0815be3f60b1cca9a"}, {"sha": "f6def3ccdfb9e59083e14f8b321fee1cde5249df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6def3ccdfb9e59083e14f8b321fee1cde5249df", "html_url": "https://github.com/rust-lang/rust/commit/f6def3ccdfb9e59083e14f8b321fee1cde5249df"}], "stats": {"total": 56, "additions": 8, "deletions": 48}, "files": [{"sha": "c869db3b8b7d74f8a890ae1d8cca50d993f5a67f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=4800c05a206eb156617b76fdb30af0b6c2c0fb26", "patch": "@@ -234,15 +234,6 @@ fn highlight_name_ref(\n         None if syntactic_name_ref_highlighting => {\n             return highlight_name_ref_by_syntax(name_ref, sema, krate)\n         }\n-        // FIXME: Workaround for https://github.com/rust-analyzer/rust-analyzer/issues/10708\n-        //\n-        // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n-        // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n-        // within a function with a self param, pretend to still be `self`, rather than\n-        // an unresolved reference.\n-        None if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) => {\n-            return SymbolKind::SelfParam.into()\n-        }\n         // FIXME: This is required for helper attributes used by proc-macros, as those do not map down\n         // to anything when used.\n         // We can fix this for derive attributes since derive helpers are recorded, but not for\n@@ -712,14 +703,3 @@ fn parents_match(mut node: NodeOrToken<SyntaxNode, SyntaxToken>, mut kinds: &[Sy\n fn parent_matches<N: AstNode>(token: &SyntaxToken) -> bool {\n     token.parent().map_or(false, |it| N::can_cast(it.kind()))\n }\n-\n-fn is_in_fn_with_self_param(node: &ast::NameRef) -> bool {\n-    node.syntax()\n-        .ancestors()\n-        .find_map(ast::Item::cast)\n-        .and_then(|item| match item {\n-            ast::Item::Fn(fn_) => fn_.param_list()?.self_param(),\n-            _ => None,\n-        })\n-        .is_some()\n-}"}, {"sha": "1ef137029d19b3750015e0a09220ebe1253e54ef", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=4800c05a206eb156617b76fdb30af0b6c2c0fb26", "patch": "@@ -463,13 +463,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "3904cb8f3eae70f1d3952fd1e7cec7f4edea46d4", "filename": "crates/proc_macro_srv/src/abis/abi_1_54/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs?ref=4800c05a206eb156617b76fdb30af0b6c2c0fb26", "patch": "@@ -463,13 +463,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "cf797752310d38716a6d5c8ca9a826b4e8896add", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=4800c05a206eb156617b76fdb30af0b6c2c0fb26", "patch": "@@ -464,13 +464,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "5c3f4da00145e48b87f6cd0815946ac2027fcaca", "filename": "crates/proc_macro_srv/src/abis/abi_1_58/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4800c05a206eb156617b76fdb30af0b6c2c0fb26/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs?ref=4800c05a206eb156617b76fdb30af0b6c2c0fb26", "patch": "@@ -468,13 +468,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}]}