{"sha": "ebc6474668ec60cc793af0f48143bf33d984deb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzY0NzQ2NjhlYzYwY2M3OTNhZjBmNDgxNDNiZjMzZDk4NGRlYjQ=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-13T07:18:12Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-13T07:18:12Z"}, "message": "Cosmetic fixes & comments", "tree": {"sha": "5e03b151befb417b1d5262b45ce19a69b4fe5651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e03b151befb417b1d5262b45ce19a69b4fe5651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc6474668ec60cc793af0f48143bf33d984deb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc6474668ec60cc793af0f48143bf33d984deb4", "html_url": "https://github.com/rust-lang/rust/commit/ebc6474668ec60cc793af0f48143bf33d984deb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc6474668ec60cc793af0f48143bf33d984deb4/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "html_url": "https://github.com/rust-lang/rust/commit/70a79a9e0527fab74d8c2d2b49886b41bdd878f5"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "2d58c1bee15bd9aa0c480342945a77dff7a56653", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=ebc6474668ec60cc793af0f48143bf33d984deb4", "patch": "@@ -97,10 +97,14 @@ extern {}\n extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // agains corresponding routine (..._SjLj_...)\n-    // So here we just skip linking for iOS\n     #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n     pub fn _Unwind_RaiseException(exception: *_Unwind_Exception)\n-                -> _Unwind_Reason_Code;\n+                                  -> _Unwind_Reason_Code;\n+\n+    #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n+    fn _Unwind_SjLj_RaiseException(e: *_Unwind_Exception)\n+                                   -> _Unwind_Reason_Code;\n+\n     pub fn _Unwind_DeleteException(exception: *_Unwind_Exception);\n }\n \n@@ -111,9 +115,5 @@ extern \"C\" {\n #[inline(always)]\n pub unsafe fn _Unwind_RaiseException(exc: *_Unwind_Exception)\n                                      -> _Unwind_Reason_Code {\n-    extern \"C\" {\n-        fn _Unwind_SjLj_RaiseException(e: *_Unwind_Exception)\n-                                       -> _Unwind_Reason_Code; }\n-\n     _Unwind_SjLj_RaiseException(exc)\n }"}, {"sha": "5b941c9d5aa39246875948e956146180c2af7bce", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=ebc6474668ec60cc793af0f48143bf33d984deb4", "patch": "@@ -303,7 +303,6 @@ pub mod eabi {\n     use libc::c_int;\n \n     extern \"C\" {\n-        #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n         fn __gcc_personality_sj0(version: c_int,\n                                 actions: uw::_Unwind_Action,\n                                 exception_class: uw::_Unwind_Exception_Class,"}, {"sha": "0e3e7cc796a3d8d6ee4c79c77b611cb6e340ebfb", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=ebc6474668ec60cc793af0f48143bf33d984deb4", "patch": "@@ -248,6 +248,11 @@ mod imp {\n     /// _Unwind_Backtrace is even not available there. Still,\n     /// backtraces could be extracted using a backtrace function,\n     /// which thanks god is public\n+    ///\n+    /// As mentioned in a huge comment block above, backtrace doesn't\n+    /// play well with green threads, so while it is extremely nice\n+    /// and simple to use it should be used only on iOS devices as the\n+    /// only viable option.\n     #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n     #[inline(never)]\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n@@ -267,9 +272,9 @@ mod imp {\n \n         try!(writeln!(w, \"stack backtrace:\"));\n         // 100 lines should be enough\n-        static size: libc::c_int = 100;\n-        let mut buf: [*libc::c_void, ..size] = unsafe {mem::zeroed()};\n-        let cnt = unsafe { backtrace(buf.as_mut_ptr(), size) as uint};\n+        static SIZE: libc::c_int = 100;\n+        let mut buf: [*libc::c_void, ..SIZE] = unsafe {mem::zeroed()};\n+        let cnt = unsafe { backtrace(buf.as_mut_ptr(), SIZE) as uint};\n \n         // skipping the first one as it is write itself\n         result::fold_(range(1, cnt).map(|i| {"}, {"sha": "d0e9b81b95a9bfbe03a1268100afcfafd7afc2fb", "filename": "src/rt/arch/arm/record_sp.S", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/ebc6474668ec60cc793af0f48143bf33d984deb4/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Frecord_sp.S?ref=ebc6474668ec60cc793af0f48143bf33d984deb4", "patch": "@@ -1,4 +1,8 @@\n-// Do not compile anything here for iOS\n+// Do not compile anything here for iOS because split stacks\n+// are disabled at all and do not need any runtime support.\n+//\n+// See also comments in librustrt/stack.rs about why it was\n+// disabled and how it could be implemented in case of need.\n #if !defined(__APPLE__)\n // Mark stack as non-executable\n #if defined(__linux__) && defined(__ELF__)"}]}