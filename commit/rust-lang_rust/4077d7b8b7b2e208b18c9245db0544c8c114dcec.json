{"sha": "4077d7b8b7b2e208b18c9245db0544c8c114dcec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNzdkN2I4YjdiMmUyMDhiMThjOTI0NWRiMDU0NGM4YzExNGRjZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-26T19:35:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T20:12:57Z"}, "message": "Permit either foo/&self or foo<'self>", "tree": {"sha": "715530c51f12a659156e82cbd1f9fc445b8fcb7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715530c51f12a659156e82cbd1f9fc445b8fcb7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4077d7b8b7b2e208b18c9245db0544c8c114dcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4077d7b8b7b2e208b18c9245db0544c8c114dcec", "html_url": "https://github.com/rust-lang/rust/commit/4077d7b8b7b2e208b18c9245db0544c8c114dcec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4077d7b8b7b2e208b18c9245db0544c8c114dcec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3168fe06ff69970be329583f560a3ccd9c00c874", "url": "https://api.github.com/repos/rust-lang/rust/commits/3168fe06ff69970be329583f560a3ccd9c00c874", "html_url": "https://github.com/rust-lang/rust/commit/3168fe06ff69970be329583f560a3ccd9c00c874"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "f71f07655f29ad37f2231658b66f65a76d691be2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4077d7b8b7b2e208b18c9245db0544c8c114dcec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4077d7b8b7b2e208b18c9245db0544c8c114dcec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4077d7b8b7b2e208b18c9245db0544c8c114dcec", "patch": "@@ -599,6 +599,12 @@ pub impl Parser {\n         }\n     }\n \n+    fn region_from_lifetime(&self, l: &ast::Lifetime) -> @region {\n+        // eventually `ast::region` should go away in favor of\n+        // `ast::Lifetime`.  For now we convert between them.\n+        self.region_from_name(Some(l.ident))\n+    }\n+\n     fn parse_ty(&self, colons_before_params: bool) -> @Ty {\n         maybe_whole!(self, nt_ty);\n \n@@ -944,7 +950,7 @@ pub impl Parser {\n \n         // Parse the region parameter, if any, which will\n         // be written \"foo/&x\"\n-        let rp = {\n+        let rp_slash = {\n             // Hack: avoid parsing vstores like /@ and /~.  This is painful\n             // because the notation for region bounds and the notation for\n             // vstores is... um... the same.  I guess that's my fault.  This\n@@ -961,9 +967,23 @@ pub impl Parser {\n         };\n \n         // Parse any lifetime or type parameters which may appear:\n-        let tps = self.parse_generic_values();\n+        let (lifetimes, tps) = self.parse_generic_values();\n         let hi = self.span.lo;\n \n+        let rp = match (&rp_slash, &lifetimes) {\n+            (&Some(_), _) => rp_slash,\n+            (&None, v) => {\n+                if v.len() == 0 {\n+                    None\n+                } else if v.len() == 1 {\n+                    Some(self.region_from_lifetime(v.get(0)))\n+                } else {\n+                    self.fatal(fmt!(\"Expected at most one \\\n+                                     lifetime name (for now)\"));\n+                }\n+            }\n+        };\n+\n         @ast::path { span: mk_sp(lo, hi),\n                      rp: rp,\n                      types: tps,\n@@ -1316,11 +1336,11 @@ pub impl Parser {\n                   token::IDENT(i, _) => {\n                     hi = self.span.hi;\n                     self.bump();\n-                    let tys = if self.eat(&token::MOD_SEP) {\n+                    let (_, tys) = if self.eat(&token::MOD_SEP) {\n                         self.expect(&token::LT);\n                         self.parse_generic_values_after_lt()\n                     } else {\n-                        ~[]\n+                        (opt_vec::Empty, ~[])\n                     };\n \n                     // expr.f() method call\n@@ -2776,20 +2796,24 @@ pub impl Parser {\n         }\n     }\n \n-    fn parse_generic_values(&self) -> ~[@Ty] {\n+    fn parse_generic_values(\n+        &self) -> (OptVec<ast::Lifetime>, ~[@Ty])\n+    {\n         if !self.eat(&token::LT) {\n-            ~[]\n+            (opt_vec::Empty, ~[])\n         } else {\n             self.parse_generic_values_after_lt()\n         }\n     }\n \n-    fn parse_generic_values_after_lt(&self) -> ~[@Ty] {\n-        let _lifetimes = self.parse_lifetimes();\n+    fn parse_generic_values_after_lt(\n+        &self) -> (OptVec<ast::Lifetime>, ~[@Ty])\n+    {\n+        let lifetimes = self.parse_lifetimes();\n         let result = self.parse_seq_to_gt(\n             Some(token::COMMA),\n             |p| p.parse_ty(false));\n-        opt_vec::take_vec(result)\n+        (lifetimes, opt_vec::take_vec(result))\n     }\n \n     fn parse_fn_decl(&self, parse_arg_fn: fn(&Parser) -> arg_or_capture_item)"}]}