{"sha": "3c4a6c860609fbf135fdd92996a65f14c3eb00da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNGE2Yzg2MDYwOWZiZjEzNWZkZDkyOTk2YTY1ZjE0YzNlYjAwZGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-06T00:37:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-06T00:37:59Z"}, "message": "Rollup merge of #62296 - RalfJung:memalign, r=alexcrichton\n\nrequest at least ptr-size alignment from posix_memalign\n\nFixes https://github.com/rust-lang/rust/issues/62251", "tree": {"sha": "ff75246055e34acbf405f731b9ba4787fefa78cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff75246055e34acbf405f731b9ba4787fefa78cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4a6c860609fbf135fdd92996a65f14c3eb00da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH+1nCRBK7hj4Ov3rIwAAdHIIAAwaYL18+CJePw9rjyMkWISk\n+2F7L2T5nGF7vwmzOsysxhRCpkbwd86f7QjuHr6KYID37TGcmlSEzYyDizcg0KY9\nYXOq9Eemmrrr7ucVg2h5F5nPUPhHVZinRBXcW6f/83scgiD6js8fd16P8IgMLJNx\nldOzN+ISk1H0Vv8J7j+51OJoF5NPIaZMI3JGJU9oGQzT34RXEUqNS+ncMAmR1D3I\n79WPcO2Ch13Cf8EeNZcB7VxDG373Ia64r+bKPhNQhn1OSM09uHm3gUiBFjf4tkdm\n7cMMFa6xfHq2v14cCTvUi/UUx8E1AwsfaqZHTt/GiI2YDDIzuZWDu+gJiWA2cZo=\n=z1f3\n-----END PGP SIGNATURE-----\n", "payload": "tree ff75246055e34acbf405f731b9ba4787fefa78cb\nparent 0383be8577adfa0c1b8e17887eae2fcc54eab81a\nparent 2e47fc3bcd46e548d7168e2ba631b3dfa8464d01\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562373479 +0200\ncommitter GitHub <noreply@github.com> 1562373479 +0200\n\nRollup merge of #62296 - RalfJung:memalign, r=alexcrichton\n\nrequest at least ptr-size alignment from posix_memalign\n\nFixes https://github.com/rust-lang/rust/issues/62251\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4a6c860609fbf135fdd92996a65f14c3eb00da", "html_url": "https://github.com/rust-lang/rust/commit/3c4a6c860609fbf135fdd92996a65f14c3eb00da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4a6c860609fbf135fdd92996a65f14c3eb00da/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0383be8577adfa0c1b8e17887eae2fcc54eab81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0383be8577adfa0c1b8e17887eae2fcc54eab81a", "html_url": "https://github.com/rust-lang/rust/commit/0383be8577adfa0c1b8e17887eae2fcc54eab81a"}, {"sha": "2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "html_url": "https://github.com/rust-lang/rust/commit/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "904b3e7e1b07cc4f23bd2ddae5e3063d1e335752", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c4a6c860609fbf135fdd92996a65f14c3eb00da/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4a6c860609fbf135fdd92996a65f14c3eb00da/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=3c4a6c860609fbf135fdd92996a65f14c3eb00da", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{Global, Alloc, Layout, System};\n \n-/// Issue #45955.\n+/// Issue #45955 and #62251.\n #[test]\n fn alloc_system_overaligned_request() {\n     check_overalign_requests(System)\n@@ -12,21 +12,23 @@ fn std_heap_overaligned_request() {\n }\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n-    let size = 8;\n-    let align = 16; // greater than size\n-    let iterations = 100;\n-    unsafe {\n-        let pointers: Vec<_> = (0..iterations).map(|_| {\n-            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n-        }).collect();\n-        for &ptr in &pointers {\n-            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n-                       \"Got a pointer less aligned than requested\")\n-        }\n+    for &align in &[4, 8, 16, 32] { // less than and bigger than `MIN_ALIGN`\n+        for &size in &[align/2, align-1] { // size less than alignment\n+            let iterations = 128;\n+            unsafe {\n+                let pointers: Vec<_> = (0..iterations).map(|_| {\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+                }).collect();\n+                for &ptr in &pointers {\n+                    assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                               \"Got a pointer less aligned than requested\")\n+                }\n \n-        // Clean up\n-        for &ptr in &pointers {\n-            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                // Clean up\n+                for &ptr in &pointers {\n+                    allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "2c2dd3b77eae9791d31a7b3cb2c5ed6a9d95a3d9", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c4a6c860609fbf135fdd92996a65f14c3eb00da/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4a6c860609fbf135fdd92996a65f14c3eb00da/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=3c4a6c860609fbf135fdd92996a65f14c3eb00da", "patch": "@@ -6,6 +6,10 @@ use crate::alloc::{GlobalAlloc, Layout, System};\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        // jemalloc provides alignment less than MIN_ALIGN for small allocations.\n+        // So only rely on MIN_ALIGN if size >= align.\n+        // Also see <https://github.com/rust-lang/rust/issues/45955> and\n+        // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::malloc(layout.size()) as *mut u8\n         } else {\n@@ -21,6 +25,7 @@ unsafe impl GlobalAlloc for System {\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+        // See the comment above in `alloc` for why this check looks the way it does.\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::calloc(layout.size(), 1) as *mut u8\n         } else {\n@@ -80,7 +85,10 @@ unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     let mut out = ptr::null_mut();\n-    let ret = libc::posix_memalign(&mut out, layout.align(), layout.size());\n+    // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.\n+    // Since these are all powers of 2, we can just use max.\n+    let align = layout.align().max(crate::mem::size_of::<usize>());\n+    let ret = libc::posix_memalign(&mut out, align, layout.size());\n     if ret != 0 {\n         ptr::null_mut()\n     } else {"}]}