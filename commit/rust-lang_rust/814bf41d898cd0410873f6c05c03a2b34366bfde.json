{"sha": "814bf41d898cd0410873f6c05c03a2b34366bfde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNGJmNDFkODk4Y2QwNDEwODczZjZjMDVjMDNhMmIzNDM2NmJmZGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-15T22:35:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-15T22:44:41Z"}, "message": "Add operator 'copy', translates as fall-through.", "tree": {"sha": "c281eaf689a64894ca2ac50ab00d69db4394d570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c281eaf689a64894ca2ac50ab00d69db4394d570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/814bf41d898cd0410873f6c05c03a2b34366bfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/814bf41d898cd0410873f6c05c03a2b34366bfde", "html_url": "https://github.com/rust-lang/rust/commit/814bf41d898cd0410873f6c05c03a2b34366bfde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/814bf41d898cd0410873f6c05c03a2b34366bfde/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca8df93b318aa4dc721a187f1216ac7f3a6671b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca8df93b318aa4dc721a187f1216ac7f3a6671b", "html_url": "https://github.com/rust-lang/rust/commit/9ca8df93b318aa4dc721a187f1216ac7f3a6671b"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "9237e35d9a08ba71d0e6866fdd2b415f064e8d7f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -5052,6 +5052,10 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n         sub.bcx.build.Br(next_cx.llbb);\n         ret rslt(next_cx, sub.val);\n       }\n+      ast::expr_copy(a) {\n+        // FIXME: this has more-subtle semantics than just \"fall through\".\n+        ret trans_expr_out(cx, a, output);\n+      }\n       ast::expr_move(dst, src) {\n         let lhs_res = trans_lval(cx, dst);\n         assert (lhs_res.is_mem);"}, {"sha": "015e515c834a03a6ecd859ae930e4202b423bb95", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -517,12 +517,13 @@ fn trans_alt(cx: &@block_ctxt, expr: &@ast::expr, arms: &[ast::arm],\n \n // Not alt-related, but similar to the pattern-munging code above\n fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n-                        table: hashmap[ast::node_id, ValueRef], copy: bool)\n+                        table: hashmap[ast::node_id, ValueRef],\n+                        make_copy: bool)\n     -> @block_ctxt {\n     let ccx = bcx.fcx.lcx.ccx;\n     alt pat.node {\n       ast::pat_bind(_) {\n-        if copy {\n+        if make_copy {\n             let ty = ty::node_id_to_monotype(ccx.tcx, pat.id);\n             let llty = trans::type_of(ccx, pat.span, ty);\n             let alloc = trans::alloca(bcx, llty);\n@@ -541,7 +542,8 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n         let args = extract_variant_args(bcx, pat.id, vdefs, val);\n         let i = 0;\n         for argval: ValueRef in args.vals {\n-            bcx = bind_irrefutable_pat(bcx, sub.(i), argval, table, copy);\n+            bcx = bind_irrefutable_pat(bcx, sub.(i), argval, table,\n+                                       make_copy);\n             i += 1;\n         }\n       }\n@@ -553,15 +555,15 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n             let ix: uint =\n                 ty::field_idx(ccx.sess, pat.span, f.ident, rec_fields);\n             let r = trans::GEP_tup_like(bcx, rec_ty, val, ~[0, ix as int]);\n-            bcx = bind_irrefutable_pat(r.bcx, f.pat, r.val, table, copy);\n+            bcx = bind_irrefutable_pat(r.bcx, f.pat, r.val, table, make_copy);\n         }\n       }\n       ast::pat_tup(elems) {\n         let tup_ty = ty::node_id_to_monotype(ccx.tcx, pat.id);\n         let i = 0u;\n         for elem in elems {\n             let r = trans::GEP_tup_like(bcx, tup_ty, val, ~[0, i as int]);\n-            bcx = bind_irrefutable_pat(r.bcx, elem, r.val, table, copy);\n+            bcx = bind_irrefutable_pat(r.bcx, elem, r.val, table, make_copy);\n             i += 1u;\n         }\n       }"}, {"sha": "e08c6afa338f0e4e2d6f8563a0c8df22e7b63721", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -406,6 +406,10 @@ fn find_pre_post_expr(fcx: &fn_ctxt, e: @expr) {\n       expr_tup(elts) {\n         find_pre_post_exprs(fcx, elts, e.id);\n       }\n+      expr_copy(a) {\n+        find_pre_post_expr(fcx, a);\n+        copy_pre_post(fcx.ccx, e.id, a);\n+      }\n       expr_move(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_move); }\n       expr_swap(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_swap); }\n       expr_assign(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_assign); }"}, {"sha": "8776c0107baed840cac763d5f00aa7efe6f9fc30", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -393,6 +393,9 @@ fn find_pre_post_state_expr(fcx: &fn_ctxt, pres: &prestate, e: @expr) ->\n                                                      ivec::len(elts)),\n                                       elts, return);\n       }\n+      expr_copy(a) {\n+        ret find_pre_post_state_sub(fcx, pres, a, e.id, none);\n+      }\n       expr_move(lhs, rhs) {\n         ret find_pre_post_state_two(fcx, pres, lhs, rhs, e.id, oper_move);\n       }"}, {"sha": "1a280297bbeb6b19e8f3dc7fd9f086359c12679c", "filename": "src/comp/middle/tstate/tritv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -204,8 +204,8 @@ fn tritv_copy(target: &t, source: &t) -> bool {\n     let changed =\n         !bitv::equal(target.uncertain, source.uncertain) ||\n             !bitv::equal(target.val, source.val);\n-    bitv::copy(target.uncertain, source.uncertain);\n-    bitv::copy(target.val, source.val);\n+    bitv::assign(target.uncertain, source.uncertain);\n+    bitv::assign(target.val, source.val);\n     ret changed;\n }\n "}, {"sha": "e500aad42f906c3b467aff4267c3eced8ea7d783", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -1942,6 +1942,13 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         bot = check_expr_with(fcx, e, ty::mk_bool(tcx));\n         write::nil_ty(tcx, id);\n       }\n+      ast::expr_copy(a) {\n+        bot = check_expr_with_unifier(fcx, a, unify, expected);\n+        let tpot = ty::node_id_to_ty_param_substs_opt_and_ty(fcx.ccx.tcx,\n+                                                             a.id);\n+        write::ty_fixup(fcx, id, tpot);\n+\n+      }\n       ast::expr_move(lhs, rhs) {\n         require_impure(tcx.sess, fcx.purity, expr.span);\n         bot = check_assignment(fcx, expr.span, lhs, rhs, id);"}, {"sha": "82ca1772c739a5f14eec1819db84f4f2bb4ee6cf", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -317,6 +317,7 @@ tag expr_ {\n      * FIXME: many of these @exprs should be constrained with\n      * is_lval once we have constrained types working.\n      */\n+    expr_copy(@expr);\n     expr_move(@expr, @expr);\n     expr_assign(@expr, @expr);\n     expr_swap(@expr, @expr);"}, {"sha": "806d72499aab490b3094087860a77ae9644aacd2", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -397,6 +397,9 @@ fn noop_fold_expr(e: &expr_, fld: ast_fold) -> expr_ {\n           expr_move(el, er) {\n             expr_move(fld.fold_expr(el), fld.fold_expr(er))\n           }\n+          expr_copy(e) {\n+            expr_copy(fld.fold_expr(e))\n+          }\n           expr_assign(el, er) {\n             expr_assign(fld.fold_expr(el), fld.fold_expr(er))\n           }"}, {"sha": "86d61ba1f949ffbad7d863093e2cfa73248fb848", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -180,6 +180,7 @@ fn bad_expr_word_table() -> hashmap[str, ()] {\n     words.insert(\"log_err\", ());\n     words.insert(\"tag\", ());\n     words.insert(\"obj\", ());\n+    words.insert(\"copy\", ());\n     ret words;\n }\n \n@@ -999,6 +1000,10 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n         hi = e.span.hi;\n         expect(p, token::RPAREN);\n         ex = ast::expr_chan(e);\n+    } else if (eat_word(p, \"copy\")) {\n+        let e = parse_expr(p);\n+        ex = ast::expr_copy(e);\n+        hi = e.span.hi;\n     } else if (eat_word(p, \"self\")) {\n         log \"parsing a self-call...\";\n         expect(p, token::DOT);"}, {"sha": "3835435777fa5916da7c6688600d017c4a56de80", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -881,6 +881,10 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         ibox(s, 0u);\n         print_block(s, blk);\n       }\n+      ast::expr_copy(e) {\n+        word_space(s, \"copy\");\n+        print_expr(s, e);\n+      }\n       ast::expr_move(lhs, rhs) {\n         print_expr(s, lhs);\n         space(s.s);"}, {"sha": "2f366621c285fe21f5b5db0644fac94fa313f084", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -299,6 +299,7 @@ fn visit_expr[E](ex: &@expr, e: &E, v: &vt[E]) {\n       expr_fn(f) { v.visit_fn(f, ~[], ex.span, none, ex.id, e, v); }\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n+      expr_copy(a) { v.visit_expr(a, e, v); }\n       expr_move(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_swap(a, b) { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n       expr_assign_op(_, a, b) {"}, {"sha": "b241cce6b3d7e98661c1486be9ed797922b4d198", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -3,7 +3,7 @@ export t;\n export create;\n export union;\n export intersect;\n-export copy;\n+export assign;\n export clone;\n export get;\n export equal;\n@@ -63,7 +63,10 @@ fn intersect(v0: &t, v1: &t) -> bool {\n \n fn right(w0: uint, w1: uint) -> uint { ret w1; }\n \n-fn copy(v0: &t, v1: t) -> bool { let sub = right; ret process(sub, v0, v1); }\n+fn assign(v0: &t, v1: t) -> bool {\n+    let sub = right;\n+    ret process(sub, v0, v1);\n+}\n \n fn clone(v: t) -> t {\n     let storage = ivec::init_elt_mut[uint](0u, v.nbits / uint_bits() + 1u);"}, {"sha": "6fbaf4f76794fee5352c8818d02fef92f8854d28", "filename": "src/test/run-pass/expr-copy.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814bf41d898cd0410873f6c05c03a2b34366bfde/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=814bf41d898cd0410873f6c05c03a2b34366bfde", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 10;\n+    let y = copy x;\n+    log y;\n+}\n\\ No newline at end of file"}]}