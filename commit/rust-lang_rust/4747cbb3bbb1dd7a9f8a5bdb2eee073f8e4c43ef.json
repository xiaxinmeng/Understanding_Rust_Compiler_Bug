{"sha": "4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDdjYmIzYmJiMWRkN2E5ZjhhNWJkYjJlZWUwNzNmOGU0YzQzZWY=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T19:12:02Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T09:00:21Z"}, "message": "allow unordered const/ty params if any cg feature is active", "tree": {"sha": "613a2fd8b0bbff7d864d067a07d95244ee600965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613a2fd8b0bbff7d864d067a07d95244ee600965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "html_url": "https://github.com/rust-lang/rust/commit/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c28e028b6f45f33447f24de7dd762b8599b7a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c28e028b6f45f33447f24de7dd762b8599b7a4e", "html_url": "https://github.com/rust-lang/rust/commit/0c28e028b6f45f33447f24de7dd762b8599b7a4e"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "e1ea464dedb1e4ec5dc8932ebf453a05fbfd53a2", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "patch": "@@ -332,8 +332,8 @@ pub type GenericBounds = Vec<GenericBound>;\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    // `unordered` is only `true` if `sess.has_features().const_generics_defaults`\n-    // is active. Specifically, if it's only `min_const_generics`, it will still require\n+    // `unordered` is only `true` if `sess.unordered_const_ty_params()`\n+    // returns true. Specifically, if it's only `min_const_generics`, it will still require\n     // ordering consts after types.\n     Const { unordered: bool },\n     // `Infer` is not actually constructed directly from the AST, but is implicitly constructed"}, {"sha": "73abd2bb83b9e6c82d672a7a9a2513b5384bb3d6", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "patch": "@@ -1351,7 +1351,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let cg_defaults = self.session.features_untracked().const_generics_defaults;\n+        let cg_defaults = self.session.features_untracked().unordered_const_ty_params();\n \n         let mut prev_param_default = None;\n         for param in &generics.params {"}, {"sha": "79a1f4e0c5cf159544b23f72f8ed22707d7a6c36", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "patch": "@@ -71,7 +71,7 @@ macro_rules! declare_features {\n             }\n \n             pub fn unordered_const_ty_params(&self) -> bool {\n-                self.const_generics_defaults\n+                self.const_generics_defaults || self.generic_const_exprs || self.const_param_types\n             }\n \n             /// Some features are known to be incomplete and using them is likely to have"}, {"sha": "9f0b2efae96cef8e13566867259b12e69ebbdbf7", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "patch": "@@ -3,8 +3,6 @@ error: generic parameters with a default must be trailing\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21"}]}