{"sha": "d773cc53276cf49236615834cd4902710f0cb58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzNjYzUzMjc2Y2Y0OTIzNjYxNTgzNGNkNDkwMjcxMGYwY2I1OGQ=", "commit": {"author": {"name": "Thia Wyrod", "email": "thia@wyrod.ca", "date": "2016-04-17T17:01:16Z"}, "committer": {"name": "Thia Wyrod", "email": "thia@wyrod.ca", "date": "2016-04-17T20:52:04Z"}, "message": "Added loop/match brace style control option\n\nThis adds Allman style loop/match braces as an alternative to the current\ndefault style.", "tree": {"sha": "99599b3bbd3986aa77456c053742d127d7a0e4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99599b3bbd3986aa77456c053742d127d7a0e4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d773cc53276cf49236615834cd4902710f0cb58d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXE/eAAAoJELvnPdPH3mEhJPgP/AushsumW7AnR6Tit49CS4nd\nPF95kkIlsm6D8Nr6hMzqacIMRPC4ypitlJzcRclhEl1UlgV4WjjQ9g6GI17jALVB\nJlXLaL43MeDOZJaQUcfjD7kVBJhzwAutSN24k5UdnYb7GZoux1W+W+guo01h2A6F\nxJcwdDR8fJgVgNiInls540N0CHExo11zTViWMbTt8nRsnmUvNO24bIpD5ocHm0OP\nmPE2L2hHZT79fxAaNC+4CAceerg3OKK6lYh0ikNAEQfl813dCVoQSWCRcbKQB04j\nLYwHDHu2ya0pw0TZBst0IfZJAXE/vJ37sah4ITzOSPCva+hawzfuIEAebBAKMP1N\ndEMIveWUOZq9exIecnk6Ikqw7qsaE7baI/n3tOhRDxlFp0DJWlrW0UwV9QzJTJeI\nncFTmxUgr7NIdjGjjE0HDq12f3jQkBj1PmZ+ZhAl947v/k8E/rpE513butg6s3YS\nqXFTDnn2iuhXIi8WsttVVUywZHjpw53PZnG/hfXLo9JCt0eeVSSfRfLfRZKxraA6\n6tulWyP0msZ0sBtvEh75Hrf7yVE+drTL86PNc1P0e0eRbvPLpsoyIgeogGOESnGb\nHFa6PJTy8ZuRVkuDs+PO8fayrC7CakyT/ubdXDMjjsfPOBXaNNm+DBhzetCHmX5n\nS7N/JczBlWMNg9FieLWj\n=uLc+\n-----END PGP SIGNATURE-----", "payload": "tree 99599b3bbd3986aa77456c053742d127d7a0e4c4\nparent 5bd6036218cbb0521b6c752ec7f8d757514ab900\nauthor Thia Wyrod <thia@wyrod.ca> 1460912476 -0600\ncommitter Thia Wyrod <thia@wyrod.ca> 1460926324 -0600\n\nAdded loop/match brace style control option\n\nThis adds Allman style loop/match braces as an alternative to the current\ndefault style.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d773cc53276cf49236615834cd4902710f0cb58d", "html_url": "https://github.com/rust-lang/rust/commit/d773cc53276cf49236615834cd4902710f0cb58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d773cc53276cf49236615834cd4902710f0cb58d/comments", "author": {"login": "thwyr", "id": 13190116, "node_id": "MDQ6VXNlcjEzMTkwMTE2", "avatar_url": "https://avatars.githubusercontent.com/u/13190116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thwyr", "html_url": "https://github.com/thwyr", "followers_url": "https://api.github.com/users/thwyr/followers", "following_url": "https://api.github.com/users/thwyr/following{/other_user}", "gists_url": "https://api.github.com/users/thwyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/thwyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thwyr/subscriptions", "organizations_url": "https://api.github.com/users/thwyr/orgs", "repos_url": "https://api.github.com/users/thwyr/repos", "events_url": "https://api.github.com/users/thwyr/events{/privacy}", "received_events_url": "https://api.github.com/users/thwyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thwyr", "id": 13190116, "node_id": "MDQ6VXNlcjEzMTkwMTE2", "avatar_url": "https://avatars.githubusercontent.com/u/13190116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thwyr", "html_url": "https://github.com/thwyr", "followers_url": "https://api.github.com/users/thwyr/followers", "following_url": "https://api.github.com/users/thwyr/following{/other_user}", "gists_url": "https://api.github.com/users/thwyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/thwyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thwyr/subscriptions", "organizations_url": "https://api.github.com/users/thwyr/orgs", "repos_url": "https://api.github.com/users/thwyr/repos", "events_url": "https://api.github.com/users/thwyr/events{/privacy}", "received_events_url": "https://api.github.com/users/thwyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd6036218cbb0521b6c752ec7f8d757514ab900", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd6036218cbb0521b6c752ec7f8d757514ab900", "html_url": "https://github.com/rust-lang/rust/commit/5bd6036218cbb0521b6c752ec7f8d757514ab900"}], "stats": {"total": 225, "additions": 219, "deletions": 6}, "files": [{"sha": "82715c2164a437ef4395628e7a11a3940006e158", "filename": "src/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -38,6 +38,13 @@ configuration_option_enum! { BraceStyle:\n     SameLineWhere,\n }\n \n+configuration_option_enum! { ControlBraceStyle:\n+    // K&R/Stroustrup style, Rust community default\n+    AlwaysSameLine,\n+    // Allman style\n+    AlwaysNextLine,\n+}\n+\n configuration_option_enum! { ElseIfBraceStyle:\n     // K&R style, Rust community default\n     AlwaysSameLine,\n@@ -326,6 +333,8 @@ create_config! {\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n     else_if_brace_style: ElseIfBraceStyle, ElseIfBraceStyle::AlwaysSameLine,\n         \"Brace style for if, else if, and else constructs\";\n+    control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine,\n+        \"Brace style for match, loop, for, and while constructs\";\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";"}, {"sha": "248cc7e090a2128f0c219a37af81867385df2be2", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -23,7 +23,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n             first_line_width, semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n use visitor::FmtVisitor;\n-use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle};\n+use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -648,14 +648,20 @@ impl<'a> Rewrite for Loop<'a> {\n             None => String::new(),\n         };\n \n+        let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+        let block_sep = match context.config.control_brace_style {\n+            ControlBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+            ControlBraceStyle::AlwaysSameLine => \" \",\n+        };\n         // FIXME: this drops any comment between \"loop\" and the block.\n         self.block\n             .rewrite(context, width, offset)\n             .map(|result| {\n-                format!(\"{}{}{} {}\",\n+                format!(\"{}{}{}{}{}\",\n                         label_string,\n                         self.keyword,\n                         pat_expr_string,\n+                        block_sep,\n                         result)\n             })\n     }\n@@ -940,7 +946,12 @@ fn rewrite_match(context: &RewriteContext,\n     // `match `cond` {`\n     let cond_budget = try_opt!(width.checked_sub(8));\n     let cond_str = try_opt!(cond.rewrite(context, cond_budget, offset + 6));\n-    let mut result = format!(\"match {} {{\", cond_str);\n+    let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+    let block_sep = match context.config.control_brace_style {\n+        ControlBraceStyle::AlwaysSameLine => \" \",\n+        ControlBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+    };\n+    let mut result = format!(\"match {}{}{{\", cond_str, block_sep);\n \n     let nested_context = context.nested_context();\n     let arm_indent = nested_context.block_indent;\n@@ -1099,6 +1110,7 @@ impl Rewrite for ast::Arm {\n         };\n \n         let comma = arm_comma(&context.config, self, body);\n+        let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n@@ -1112,12 +1124,17 @@ impl Rewrite for ast::Arm {\n                 false\n             };\n \n+            let block_sep = match context.config.control_brace_style {\n+                ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n+                _ => \" \",\n+            };\n             match rewrite {\n                 Some(ref body_str) if !body_str.contains('\\n') || !context.config.wrap_match_arms ||\n                                       is_block => {\n-                    return Some(format!(\"{}{} => {}{}\",\n+                    return Some(format!(\"{}{} =>{}{}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n+                                        block_sep,\n                                         body_str,\n                                         comma));\n                 }\n@@ -1145,10 +1162,14 @@ impl Rewrite for ast::Arm {\n             (\"\", \"\")\n         };\n \n-        Some(format!(\"{}{} =>{}\\n{}{}\\n{}{}\",\n+        let block_sep = match context.config.control_brace_style {\n+            ControlBraceStyle::AlwaysNextLine => alt_block_sep,\n+            ControlBraceStyle::AlwaysSameLine => String::from(body_prefix) + \"\\n\",\n+        };\n+        Some(format!(\"{}{} =>{}{}{}\\n{}{}\",\n                      attr_str.trim_left(),\n                      pats_str,\n-                     body_prefix,\n+                     block_sep,\n                      indent_str,\n                      next_line_body,\n                      offset.to_string(context.config),"}, {"sha": "9a2ec04e3004d968cde791534501c94c27139901", "filename": "tests/source/control-brace-style-always-next-line.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-control_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+        }\n+\n+\n+    'loop_label: loop // loop comment  \n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond { // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        },\n+    };\n+}"}, {"sha": "52b0c8fdc466616deab6f4447e9f1152d1cb38d3", "filename": "tests/source/control-brace-style-always-same-line.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-control_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+        }\n+\n+\n+    'loop_label: loop // loop comment  \n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond { // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        },\n+    };\n+}"}, {"sha": "534dfb89969fc5021a66aac7eefead59af741fc3", "filename": "tests/target/control-brace-style-always-next-line.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -0,0 +1,52 @@\n+// rustfmt-control_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    loop\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    'loop_label: loop\n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond\n+    {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond\n+    {\n+        // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter\n+    {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond\n+            {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var\n+    { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 =>\n+        {\n+            do_stuff();\n+            val2\n+        }\n+    };\n+}"}, {"sha": "60a07e46986f8a87c93e817c3f2caf83dd2bc213", "filename": "tests/target/control-brace-style-always-same-line.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773cc53276cf49236615834cd4902710f0cb58d/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs?ref=d773cc53276cf49236615834cd4902710f0cb58d", "patch": "@@ -0,0 +1,43 @@\n+// rustfmt-control_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+    }\n+\n+\n+    'loop_label: loop {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond {\n+        // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        }\n+    };\n+}"}]}