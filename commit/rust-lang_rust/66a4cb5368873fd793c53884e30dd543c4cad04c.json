{"sha": "66a4cb5368873fd793c53884e30dd543c4cad04c", "node_id": "C_kwDOAAsO6NoAKDY2YTRjYjUzNjg4NzNmZDc5M2M1Mzg4NGUzMGRkNTQzYzRjYWQwNGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-05T19:43:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-05T19:43:44Z"}, "message": "Rollup merge of #105223 - lukas-code:(ExprWithBlock), r=petrochenkov\n\nsuggest parenthesis around ExprWithBlock BinOp ExprWithBlock\n\nfix https://github.com/rust-lang/rust/issues/105179\nfix https://github.com/rust-lang/rust/issues/102171", "tree": {"sha": "967c5749a9fa36a93a1f6ec493fb69e8db240453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967c5749a9fa36a93a1f6ec493fb69e8db240453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a4cb5368873fd793c53884e30dd543c4cad04c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjknwCRBK7hj4Ov3rIwAAzMMIACoFMyUXVdklJT9PVGiYIKF4\nFZQrWVLDpbhWalw4QoXiGKLEs1vfgLmq/8MMBkYcMG+RiW/v36xJai65yy+JE/LX\nyd5WFvFVI4DvrBvT/iW18TCHeCis64chqoVherfuiJTeLZCqPhY0KOF29TrBS8SZ\n1DQodvnuMLNRDQghnFtMrEGwDbq2ZQnYgQ0wx2LCnGFgw0Yn+nEJuWZc80khOuMo\n0COEKgUp+4MGlwjVSH/pY257yNv8Z911bZRIrboBDg1HYQz6Tm96UBYbkMf2tWWC\nZJnNsCT1xhF4u3+dSFHjjA254wiwXJQCeV5q7nGMr5rjKbT3rfpUJMRfB8NtFTM=\n=RTmM\n-----END PGP SIGNATURE-----\n", "payload": "tree 967c5749a9fa36a93a1f6ec493fb69e8db240453\nparent e84e8f4165c1e0a9f34911a1d6d22780d48f5c63\nparent c808d0b289c1f8e0f26885bf44cb2ba1873ba10e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670269424 +0100\ncommitter GitHub <noreply@github.com> 1670269424 +0100\n\nRollup merge of #105223 - lukas-code:(ExprWithBlock), r=petrochenkov\n\nsuggest parenthesis around ExprWithBlock BinOp ExprWithBlock\n\nfix https://github.com/rust-lang/rust/issues/105179\nfix https://github.com/rust-lang/rust/issues/102171\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a4cb5368873fd793c53884e30dd543c4cad04c", "html_url": "https://github.com/rust-lang/rust/commit/66a4cb5368873fd793c53884e30dd543c4cad04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a4cb5368873fd793c53884e30dd543c4cad04c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84e8f4165c1e0a9f34911a1d6d22780d48f5c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84e8f4165c1e0a9f34911a1d6d22780d48f5c63", "html_url": "https://github.com/rust-lang/rust/commit/e84e8f4165c1e0a9f34911a1d6d22780d48f5c63"}, {"sha": "c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "html_url": "https://github.com/rust-lang/rust/commit/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "4f92477b5d87ef221239c71054742025efb7bf32", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66a4cb5368873fd793c53884e30dd543c4cad04c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a4cb5368873fd793c53884e30dd543c4cad04c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=66a4cb5368873fd793c53884e30dd543c4cad04c", "patch": "@@ -32,11 +32,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n+        // This suggestion is incorrect for\n+        // fn foo() -> bool { match () { () => true } || match () { () => true } }\n         err.span_suggestion_short(\n             span.shrink_to_hi(),\n             \"consider using a semicolon here\",\n             \";\",\n-            Applicability::MachineApplicable,\n+            Applicability::MaybeIncorrect,\n         );\n     }\n "}, {"sha": "f6a6ed379a2b595de95d36534b1e234187e6a40d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/66a4cb5368873fd793c53884e30dd543c4cad04c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a4cb5368873fd793c53884e30dd543c4cad04c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=66a4cb5368873fd793c53884e30dd543c4cad04c", "patch": "@@ -390,20 +390,11 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::Add)) // `{ 42 } + 42\n-            // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n-            // `if x { a } else { b } && if y { c } else { d }`\n-            if !self.look_ahead(1, |t| t.is_used_keyword()) => {\n-                // These cases are ambiguous and can't be identified in the parser alone.\n-                let sp = self.sess.source_map().start_point(self.token.span);\n-                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n-                false\n-            }\n-            (true, Some(AssocOp::LAnd)) |\n-            (true, Some(AssocOp::LOr)) |\n-            (true, Some(AssocOp::BitOr)) => {\n-                // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n-                // above due to #74233.\n+            (true, Some(AssocOp::Add)) | // `{ 42 } + 42` (unary plus)\n+            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n+            (true, Some(AssocOp::LOr)) | // `{ 42 } || 42` (\"logical or\" or closure)\n+            (true, Some(AssocOp::BitOr)) // `{ 42 } | 42` or `{ 42 } |x| 42`\n+            => {\n                 // These cases are ambiguous and can't be identified in the parser alone.\n                 //\n                 // Bitwise AND is left out because guessing intent is hard. We can make"}, {"sha": "b06f62794c4e3a4632930ed8ed7d90866bac79bd", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=66a4cb5368873fd793c53884e30dd543c4cad04c", "patch": "@@ -64,4 +64,16 @@ fn asteroids() -> impl FnOnce() -> bool {\n     { foo(); } || { true } //~ ERROR E0308\n }\n \n+// https://github.com/rust-lang/rust/issues/105179\n+fn r#match() -> i32 {\n+    (match () { () => 1 }) + match () { () => 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+// https://github.com/rust-lang/rust/issues/102171\n+fn r#unsafe() -> i32 {\n+    (unsafe { 1 }) + unsafe { 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "b39d2b88647c0a5d806ce3c4b227801dbe86ee7f", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=66a4cb5368873fd793c53884e30dd543c4cad04c", "patch": "@@ -64,4 +64,16 @@ fn asteroids() -> impl FnOnce() -> bool {\n     { foo() } || { true } //~ ERROR E0308\n }\n \n+// https://github.com/rust-lang/rust/issues/105179\n+fn r#match() -> i32 {\n+    match () { () => 1 } + match () { () => 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+// https://github.com/rust-lang/rust/issues/102171\n+fn r#unsafe() -> i32 {\n+    unsafe { 1 } + unsafe { 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "18c8b0b7c506bbb6b0fd069ecb07d2df43ac6e79", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66a4cb5368873fd793c53884e30dd543c4cad04c/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=66a4cb5368873fd793c53884e30dd543c4cad04c", "patch": "@@ -55,6 +55,28 @@ help: parentheses are required to parse this as an expression\n LL |     ({ true }) | { true }\n    |     +        +\n \n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:69:26\n+   |\n+LL |     match () { () => 1 } + match () { () => 1 }\n+   |                          ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (match () { () => 1 }) + match () { () => 1 }\n+   |     +                    +\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:75:18\n+   |\n+LL |     unsafe { 1 } + unsafe { 1 }\n+   |                  ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (unsafe { 1 }) + unsafe { 1 }\n+   |     +            +\n+\n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:64:7\n    |\n@@ -201,7 +223,26 @@ help: parentheses are required to parse this as an expression\n LL |     ({ true }) || { true }\n    |     +        +\n \n-error: aborting due to 18 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:69:5\n+   |\n+LL |     match () { () => 1 } + match () { () => 1 }\n+   |     ^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\n+   |     |\n+   |     expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:75:14\n+   |\n+LL |     unsafe { 1 } + unsafe { 1 }\n+   |              ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     unsafe { return 1; } + unsafe { 1 }\n+   |              ++++++  +\n+\n+error: aborting due to 22 previous errors\n \n Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}]}