{"sha": "6a5ee110276aa0f24e569c15d10172e3fc40752f", "node_id": "C_kwDOAAsO6NoAKDZhNWVlMTEwMjc2YWEwZjI0ZTU2OWMxNWQxMDE3MmUzZmM0MDc1MmY", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-12-16T07:18:25Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-05-05T21:25:56Z"}, "message": "Don't bitcast aggregate field.", "tree": {"sha": "9d35e0fa621dec39aa334fc5f2aaf0a1cc776e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d35e0fa621dec39aa334fc5f2aaf0a1cc776e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5ee110276aa0f24e569c15d10172e3fc40752f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5ee110276aa0f24e569c15d10172e3fc40752f", "html_url": "https://github.com/rust-lang/rust/commit/6a5ee110276aa0f24e569c15d10172e3fc40752f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5ee110276aa0f24e569c15d10172e3fc40752f/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af69cc0ea0698d47b281e6b5da78d4794dc5df04", "url": "https://api.github.com/repos/rust-lang/rust/commits/af69cc0ea0698d47b281e6b5da78d4794dc5df04", "html_url": "https://github.com/rust-lang/rust/commit/af69cc0ea0698d47b281e6b5da78d4794dc5df04"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "7623daeb96fd06ffb9cdca9b521051e44e81953e", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a5ee110276aa0f24e569c15d10172e3fc40752f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5ee110276aa0f24e569c15d10172e3fc40752f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=6a5ee110276aa0f24e569c15d10172e3fc40752f", "patch": "@@ -237,13 +237,18 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n         };\n \n         match (&mut val, field.abi) {\n-            (OperandValue::Immediate(llval), _) => {\n+            (\n+                OperandValue::Immediate(llval),\n+                Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. },\n+            ) => {\n                 // Bools in union fields needs to be truncated.\n                 *llval = bx.to_immediate(*llval, field);\n                 // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n                 let ty = bx.cx().immediate_backend_type(field);\n                 if bx.type_kind(ty) == TypeKind::Pointer {\n                     *llval = bx.pointercast(*llval, ty);\n+                } else {\n+                    *llval = bx.bitcast(*llval, ty);\n                 }\n             }\n             (OperandValue::Pair(a, b), Abi::ScalarPair(a_abi, b_abi)) => {\n@@ -255,11 +260,31 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let b_ty = bx.cx().scalar_pair_element_backend_type(field, 1, true);\n                 if bx.type_kind(a_ty) == TypeKind::Pointer {\n                     *a = bx.pointercast(*a, a_ty);\n+                } else {\n+                    *a = bx.bitcast(*a, a_ty);\n                 }\n                 if bx.type_kind(b_ty) == TypeKind::Pointer {\n                     *b = bx.pointercast(*b, b_ty);\n+                } else {\n+                    *b = bx.bitcast(*b, b_ty);\n                 }\n             }\n+            // Newtype vector of array, e.g. #[repr(simd)] struct S([i32; 4]);\n+            (OperandValue::Immediate(llval), Abi::Aggregate { sized: true }) => {\n+                assert!(matches!(self.layout.abi, Abi::Vector { .. }));\n+\n+                let llty = bx.cx().backend_type(self.layout);\n+                let llfield_ty = bx.cx().backend_type(field);\n+\n+                // Can't bitcast an aggregate, so round trip through memory.\n+                let lltemp = bx.alloca(llfield_ty, field.align.abi);\n+                let llptr = bx.pointercast(lltemp, bx.cx().type_ptr_to(llty));\n+                bx.store(*llval, llptr, field.align.abi);\n+                *llval = bx.load(llfield_ty, lltemp, field.align.abi);\n+            }\n+            (OperandValue::Immediate(_), Abi::Uninhabited | Abi::Aggregate { sized: false }) => {\n+                bug!()\n+            }\n             (OperandValue::Pair(..), _) => bug!(),\n             (OperandValue::Ref(..), _) => bug!(),\n         }"}]}