{"sha": "5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDlkN2MzZGU2Y2M1ZGFmMWI5OTI1YThlN2QxOWVkZjQ0YzI3YTc=", "commit": {"author": {"name": "Evgeny Safronov", "email": "division494@gmail.com", "date": "2017-03-06T06:03:31Z"}, "committer": {"name": "Evgeny Safronov", "email": "division494@gmail.com", "date": "2017-04-14T06:46:03Z"}, "message": "Add `as_bytes()` for `FromUtf8Error`.\n\nThis change allows to obtain an underlying invalid UTF-8 bytes\nwithout `FromUtf8Error` destruction. Such method may be useful\nfor example in a library that attempts to save both valid and\ninvalid UTF-8 strings in some struct and to be able to provide\nimmutable access to it without destruction.", "tree": {"sha": "730e929fb44e5cd1520334b31762cbff6340c1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/730e929fb44e5cd1520334b31762cbff6340c1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7", "html_url": "https://github.com/rust-lang/rust/commit/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7/comments", "author": {"login": "3Hren", "id": 969900, "node_id": "MDQ6VXNlcjk2OTkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/969900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3Hren", "html_url": "https://github.com/3Hren", "followers_url": "https://api.github.com/users/3Hren/followers", "following_url": "https://api.github.com/users/3Hren/following{/other_user}", "gists_url": "https://api.github.com/users/3Hren/gists{/gist_id}", "starred_url": "https://api.github.com/users/3Hren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3Hren/subscriptions", "organizations_url": "https://api.github.com/users/3Hren/orgs", "repos_url": "https://api.github.com/users/3Hren/repos", "events_url": "https://api.github.com/users/3Hren/events{/privacy}", "received_events_url": "https://api.github.com/users/3Hren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "3Hren", "id": 969900, "node_id": "MDQ6VXNlcjk2OTkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/969900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3Hren", "html_url": "https://github.com/3Hren", "followers_url": "https://api.github.com/users/3Hren/followers", "following_url": "https://api.github.com/users/3Hren/following{/other_user}", "gists_url": "https://api.github.com/users/3Hren/gists{/gist_id}", "starred_url": "https://api.github.com/users/3Hren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3Hren/subscriptions", "organizations_url": "https://api.github.com/users/3Hren/orgs", "repos_url": "https://api.github.com/users/3Hren/repos", "events_url": "https://api.github.com/users/3Hren/events{/privacy}", "received_events_url": "https://api.github.com/users/3Hren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f32e0dfb287c2b3d0c48cb3b8090b3902960084", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f32e0dfb287c2b3d0c48cb3b8090b3902960084", "html_url": "https://github.com/rust-lang/rust/commit/4f32e0dfb287c2b3d0c48cb3b8090b3902960084"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "12f582404dc7e32a1e3a558ca4cf6b555953d61d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5a09d7c3de6cc5daf1b9925a8e7d19edf44c27a7", "patch": "@@ -1403,6 +1403,25 @@ impl String {\n }\n \n impl FromUtf8Error {\n+    /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // some invalid bytes, in a vector\n+    /// let bytes = vec![0, 159];\n+    ///\n+    /// let value = String::from_utf8(bytes);\n+    ///\n+    /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n+    /// ```\n+    #[unstable(feature = \"from_utf8_error_as_bytes\", issue = \"40895\")]\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes[..]\n+    }\n+\n     /// Returns the bytes that were attempted to convert to a `String`.\n     ///\n     /// This method is carefully constructed to avoid allocation. It will"}]}