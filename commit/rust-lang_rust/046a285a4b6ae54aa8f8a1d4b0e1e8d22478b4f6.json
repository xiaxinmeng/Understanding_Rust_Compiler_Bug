{"sha": "046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NmEyODVhNGI2YWU1NGFhOGY4YTFkNGIwZTFlOGQyMjQ3OGI0ZjY=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-04-30T11:01:26Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-01T22:17:29Z"}, "message": "libstd: impl Clone for BigUint/BigInt and replace `copy` with `.clone()`", "tree": {"sha": "81b2a3712483dcb3a02e95431334dadbd67166e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b2a3712483dcb3a02e95431334dadbd67166e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6", "html_url": "https://github.com/rust-lang/rust/commit/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "html_url": "https://github.com/rust-lang/rust/commit/08dd625d455548c7a5795db930ebfc5e3b1eb9c4"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "e2a336027fdef962c3b4e5dd70516c6fcd95ead0", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=046a285a4b6ae54aa8f8a1d4b0e1e8d22478b4f6", "patch": "@@ -80,6 +80,7 @@ A big unsigned integer type.\n A BigUint-typed value BigUint { data: @[a, b, c] } represents a number\n (a + b * BigDigit::base + c * BigDigit::base^2).\n */\n+#[deriving(Clone)]\n pub struct BigUint {\n     priv data: ~[BigDigit]\n }\n@@ -680,7 +681,7 @@ priv fn get_radix_base(radix: uint) -> (uint, uint) {\n }\n \n /// A Sign is a BigInt's composing element.\n-#[deriving(Eq)]\n+#[deriving(Eq, Clone)]\n pub enum Sign { Minus, Zero, Plus }\n \n impl Ord for Sign {\n@@ -726,6 +727,7 @@ impl Neg<Sign> for Sign {\n }\n \n /// A big signed integer type.\n+#[deriving(Clone)]\n pub struct BigInt {\n     priv sign: Sign,\n     priv data: BigUint\n@@ -825,8 +827,8 @@ impl Signed for BigInt {\n     #[inline(always)]\n     fn abs(&self) -> BigInt {\n         match self.sign {\n-            Plus | Zero => copy *self,\n-            Minus => BigInt::from_biguint(Plus, copy self.data)\n+            Plus | Zero => self.clone(),\n+            Minus => BigInt::from_biguint(Plus, self.data.clone())\n         }\n     }\n \n@@ -850,8 +852,8 @@ impl Add<BigInt, BigInt> for BigInt {\n     #[inline(always)]\n     fn add(&self, other: &BigInt) -> BigInt {\n         match (self.sign, other.sign) {\n-            (Zero, _)      => copy *other,\n-            (_,    Zero)   => copy *self,\n+            (Zero, _)      => other.clone(),\n+            (_,    Zero)   => self.clone(),\n             (Plus, Plus)   => BigInt::from_biguint(Plus,\n                                                    self.data + other.data),\n             (Plus, Minus)  => self - (-*other),\n@@ -866,7 +868,7 @@ impl Sub<BigInt, BigInt> for BigInt {\n     fn sub(&self, other: &BigInt) -> BigInt {\n         match (self.sign, other.sign) {\n             (Zero, _)    => -other,\n-            (_,    Zero) => copy *self,\n+            (_,    Zero) => self.clone(),\n             (Plus, Plus) => match self.data.cmp(&other.data) {\n                 Less    => BigInt::from_biguint(Minus, other.data - self.data),\n                 Greater => BigInt::from_biguint(Plus, self.data - other.data),\n@@ -913,7 +915,7 @@ impl Rem<BigInt, BigInt> for BigInt {\n impl Neg<BigInt> for BigInt {\n     #[inline(always)]\n     fn neg(&self) -> BigInt {\n-        BigInt::from_biguint(self.sign.neg(), copy self.data)\n+        BigInt::from_biguint(self.sign.neg(), self.data.clone())\n     }\n }\n \n@@ -1100,9 +1102,9 @@ pub impl BigInt {\n \n #[cfg(test)]\n mod biguint_tests {\n+    use super::*;\n     use core::num::{IntConvertible, Zero, One, FromStrRadix};\n     use core::cmp::{Less, Equal, Greater};\n-    use super::{BigUint, BigDigit};\n \n     #[test]\n     fn test_from_slice() {\n@@ -1390,10 +1392,10 @@ mod biguint_tests {\n             let c = BigUint::from_slice(cVec);\n \n             if !a.is_zero() {\n-                assert!(c.div_rem(&a) == (copy b, Zero::zero()));\n+                assert!(c.div_rem(&a) == (b.clone(), Zero::zero()));\n             }\n             if !b.is_zero() {\n-                assert!(c.div_rem(&b) == (copy a, Zero::zero()));\n+                assert!(c.div_rem(&b) == (a.clone(), Zero::zero()));\n             }\n         }\n \n@@ -1555,7 +1557,7 @@ mod biguint_tests {\n \n #[cfg(test)]\n mod bigint_tests {\n-    use super::{BigInt, BigUint, BigDigit, Sign, Minus, Zero, Plus};\n+    use super::*;\n     use core::cmp::{Less, Equal, Greater};\n     use core::num::{IntConvertible, Zero, One, FromStrRadix};\n "}]}