{"sha": "c75044f4633413780ba714dcea2bd6e7a2eca9b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NTA0NGY0NjMzNDEzNzgwYmE3MTRkY2VhMmJkNmU3YTJlY2E5YjE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-25T14:05:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-25T14:05:21Z"}, "message": "Rollup merge of #66569 - pietroalbini:gha-1, r=alexcrichton\n\nGitHub Actions: preparations, part 1\n\nThis PR adds the first batch of commits in preparation for GitHub Actions:\n\n* Added GitHub Actions support in `src/ci/shared.sh` and bootstrap.\n* Addded a `setup-environment.sh` script which guesses and sets the `DEPLOY`, `DEPLOY_ALT` and `IMAGE` environment variables automatically, to reduce the verbosity of the CI configuration.\n\nThis PR does **not** yet add any builders on GitHub Actions.\n\nr? @alexcrichton", "tree": {"sha": "886666084265a5c984ac4f97ae7aae289839ad5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886666084265a5c984ac4f97ae7aae289839ad5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75044f4633413780ba714dcea2bd6e7a2eca9b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd29+hCRBK7hj4Ov3rIwAAdHIIAGO9nHW/f5N1BfV6kaRiDjok\nbjoC4rjY3634K5z3JCYZgCSsEk5nDrYt/x5ZlPhqqQl8JclUO4IvcldI8e59xDSR\nCDi5Eqc6mcM91uP4TRv1+MOiiWnVFG4S1O7YCPbU7gzYURqHA6GuwMETwrvqEhSs\nCxurYQ3y2qi9dHjlXeiMrAQouutqz0XkDUtAdPLM4RtIreK5kRrST8QxC+u21+yt\nQ1/ZCiY20WRnV0SqdUEG4Fh/1apl9Zn9qgnw9EuQHbtCKRtzrWj0GIwmRPG1rMFK\nwAZUYw+DjlDgeeBwp+tfe9V52eQhkJXkoj8N9GYJw84e6OpV6yfe5dnu7q0l/4M=\n=VT8H\n-----END PGP SIGNATURE-----\n", "payload": "tree 886666084265a5c984ac4f97ae7aae289839ad5b\nparent 2b4af1036732d5fbb2e472e0a243d7057a03fcf8\nparent 90a37bce44d145715eeac9f1f2f34433fc813ef0\nauthor Pietro Albini <pietro@pietroalbini.org> 1574690721 +0100\ncommitter GitHub <noreply@github.com> 1574690721 +0100\n\nRollup merge of #66569 - pietroalbini:gha-1, r=alexcrichton\n\nGitHub Actions: preparations, part 1\n\nThis PR adds the first batch of commits in preparation for GitHub Actions:\n\n* Added GitHub Actions support in `src/ci/shared.sh` and bootstrap.\n* Addded a `setup-environment.sh` script which guesses and sets the `DEPLOY`, `DEPLOY_ALT` and `IMAGE` environment variables automatically, to reduce the verbosity of the CI configuration.\n\nThis PR does **not** yet add any builders on GitHub Actions.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75044f4633413780ba714dcea2bd6e7a2eca9b1", "html_url": "https://github.com/rust-lang/rust/commit/c75044f4633413780ba714dcea2bd6e7a2eca9b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75044f4633413780ba714dcea2bd6e7a2eca9b1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4af1036732d5fbb2e472e0a243d7057a03fcf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4af1036732d5fbb2e472e0a243d7057a03fcf8", "html_url": "https://github.com/rust-lang/rust/commit/2b4af1036732d5fbb2e472e0a243d7057a03fcf8"}, {"sha": "90a37bce44d145715eeac9f1f2f34433fc813ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a37bce44d145715eeac9f1f2f34433fc813ef0", "html_url": "https://github.com/rust-lang/rust/commit/90a37bce44d145715eeac9f1f2f34433fc813ef0"}], "stats": {"total": 402, "additions": 154, "deletions": 248}, "files": [{"sha": "6f8a630874570324e26b750ec700d05122fca01b", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -262,13 +262,17 @@ pub enum CiEnv {\n     None,\n     /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n     AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n }\n \n impl CiEnv {\n     /// Obtains the current CI environment.\n     pub fn current() -> CiEnv {\n         if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AzurePipelines\n+        } else if env::var(\"GITHUB_ACTIONS\").ok().map_or(false, |e| &*e == \"true\") {\n+            CiEnv::GitHubActions\n         } else {\n             CiEnv::None\n         }"}, {"sha": "bfe5174bf1e5734410950ca6e085e3a97e881b78", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 35, "deletions": 133, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -19,136 +19,46 @@ jobs:\n   strategy:\n     matrix:\n       x86_64-gnu-llvm-6.0:\n-        IMAGE: x86_64-gnu-llvm-6.0\n         RUST_BACKTRACE: 1\n-\n-      dist-x86_64-linux:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY: 1\n-\n-      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n-      # turned on, they're deployed to a different location primarily for\n-      # additional testing.\n+      dist-x86_64-linux: {}\n       dist-x86_64-linux-alt:\n         IMAGE: dist-x86_64-linux\n-        DEPLOY_ALT: 1\n-\n-      # Linux builders, remaining docker images\n-      arm-android:\n-        IMAGE: arm-android\n-\n-      armhf-gnu:\n-        IMAGE: armhf-gnu\n-\n-      dist-various-1:\n-        IMAGE: dist-various-1\n-        DEPLOY: 1\n-\n-      dist-various-2:\n-        IMAGE: dist-various-2\n-        DEPLOY: 1\n-\n-      dist-aarch64-linux:\n-        IMAGE: dist-aarch64-linux\n-        DEPLOY: 1\n-\n-      dist-android:\n-        IMAGE: dist-android\n-        DEPLOY: 1\n-\n-      dist-arm-linux:\n-        IMAGE: dist-arm-linux\n-        DEPLOY: 1\n-\n-      dist-armhf-linux:\n-        IMAGE: dist-armhf-linux\n-        DEPLOY: 1\n-\n-      dist-armv7-linux:\n-        IMAGE: dist-armv7-linux\n-        DEPLOY: 1\n-\n-      dist-i586-gnu-i586-i686-musl:\n-        IMAGE: dist-i586-gnu-i586-i686-musl\n-        DEPLOY: 1\n-\n-      dist-i686-freebsd:\n-        IMAGE: dist-i686-freebsd\n-        DEPLOY: 1\n-\n-      dist-i686-linux:\n-        IMAGE: dist-i686-linux\n-        DEPLOY: 1\n-\n-      dist-mips-linux:\n-        IMAGE: dist-mips-linux\n-        DEPLOY: 1\n-\n-      dist-mips64-linux:\n-        IMAGE: dist-mips64-linux\n-        DEPLOY: 1\n-\n-      dist-mips64el-linux:\n-        IMAGE: dist-mips64el-linux\n-        DEPLOY: 1\n-\n-      dist-mipsel-linux:\n-        IMAGE: dist-mipsel-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc-linux:\n-        IMAGE: dist-powerpc-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc64-linux:\n-        IMAGE: dist-powerpc64-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc64le-linux:\n-        IMAGE: dist-powerpc64le-linux\n-        DEPLOY: 1\n-\n-      dist-s390x-linux:\n-        IMAGE: dist-s390x-linux\n-        DEPLOY: 1\n-\n-      dist-x86_64-freebsd:\n-        IMAGE: dist-x86_64-freebsd\n-        DEPLOY: 1\n-\n-      dist-x86_64-musl:\n-        IMAGE: dist-x86_64-musl\n-        DEPLOY: 1\n-\n-      dist-x86_64-netbsd:\n-        IMAGE: dist-x86_64-netbsd\n-        DEPLOY: 1\n-\n-      i686-gnu:\n-        IMAGE: i686-gnu\n-      i686-gnu-nopt:\n-        IMAGE: i686-gnu-nopt\n-      test-various:\n-        IMAGE: test-various\n-      wasm32:\n-        IMAGE: wasm32\n-      x86_64-gnu:\n-        IMAGE: x86_64-gnu\n-      x86_64-gnu-full-bootstrap:\n-        IMAGE: x86_64-gnu-full-bootstrap\n-      x86_64-gnu-aux:\n-        IMAGE: x86_64-gnu-aux\n+      arm-android: {}\n+      armhf-gnu: {}\n+      dist-various-1: {}\n+      dist-various-2: {}\n+      dist-aarch64-linux: {}\n+      dist-android: {}\n+      dist-arm-linux: {}\n+      dist-armhf-linux: {}\n+      dist-armv7-linux: {}\n+      dist-i586-gnu-i586-i686-musl: {}\n+      dist-i686-freebsd: {}\n+      dist-i686-linux: {}\n+      dist-mips-linux: {}\n+      dist-mips64-linux: {}\n+      dist-mips64el-linux: {}\n+      dist-mipsel-linux: {}\n+      dist-powerpc-linux: {}\n+      dist-powerpc64-linux: {}\n+      dist-powerpc64le-linux: {}\n+      dist-s390x-linux: {}\n+      dist-x86_64-freebsd: {}\n+      dist-x86_64-musl: {}\n+      dist-x86_64-netbsd: {}\n+      i686-gnu: {}\n+      i686-gnu-nopt: {}\n+      test-various: {}\n+      wasm32: {}\n+      x86_64-gnu: {}\n+      x86_64-gnu-full-bootstrap: {}\n+      x86_64-gnu-aux: {}\n       x86_64-gnu-tools:\n-        IMAGE: x86_64-gnu-tools\n         DEPLOY_TOOLSTATES_JSON: toolstates-linux.json\n-      x86_64-gnu-debug:\n-        IMAGE: x86_64-gnu-debug\n-      x86_64-gnu-nopt:\n-        IMAGE: x86_64-gnu-nopt\n-      x86_64-gnu-distcheck:\n-        IMAGE: x86_64-gnu-distcheck\n-      mingw-check:\n-        IMAGE: mingw-check\n+      x86_64-gnu-debug: {}\n+      x86_64-gnu-nopt: {}\n+      x86_64-gnu-distcheck: {}\n+      mingw-check: {}\n \n - job: macOS\n   timeoutInMinutes: 600\n@@ -176,7 +86,6 @@ jobs:\n       dist-x86_64-apple:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -186,7 +95,6 @@ jobs:\n       dist-x86_64-apple-alt:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n-        DEPLOY_ALT: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -204,7 +112,6 @@ jobs:\n       dist-i686-apple:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --set rust.jemalloc\n-        DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -304,7 +211,6 @@ jobs:\n           --enable-profiler\n         SCRIPT: python x.py dist\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-i686-msvc:\n         RUST_CONFIGURE_ARGS: >-\n           --build=i686-pc-windows-msvc\n@@ -313,22 +219,18 @@ jobs:\n           --enable-profiler\n         SCRIPT: python x.py dist\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-i686-mingw:\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n         SCRIPT: python x.py dist\n         CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-x86_64-mingw:\n         SCRIPT: python x.py dist\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n         CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n \n       # \"alternate\" deployment, see .travis.yml for more info\n       dist-x86_64-msvc-alt:\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n         SCRIPT: python x.py dist\n-        DEPLOY_ALT: 1"}, {"sha": "aee4d8d5136aa81c1332f6152ea2f6f78af955dd", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -18,10 +18,7 @@ jobs:\n     - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0:\n-        IMAGE: x86_64-gnu-llvm-6.0\n-      mingw-check:\n-        IMAGE: mingw-check\n+      x86_64-gnu-llvm-6.0: {}\n+      mingw-check: {}\n       x86_64-gnu-tools:\n-        IMAGE: x86_64-gnu-tools\n         CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "f536388b25b966286b216ade8ee12cfbac2bc7ef", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -28,6 +28,9 @@ steps:\n - checkout: self\n   fetchDepth: 2\n \n+- bash: src/ci/scripts/setup-environment.sh\n+  displayName: Setup environment\n+\n - bash: src/ci/scripts/should-skip-this.sh\n   displayName: Decide whether to run this job\n \n@@ -38,38 +41,26 @@ steps:\n   displayName: Show the current environment\n \n - bash: src/ci/scripts/install-sccache.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install sccache\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-clang.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install clang\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/switch-xcode.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Switch to Xcode 9.3\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-wix.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install wix\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-innosetup.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install InnoSetup\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/windows-symlink-build-dir.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Ensure the build happens on C:\\ instead of D:\\\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -78,35 +69,22 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2-packages.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2 packages\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-mingw.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install MinGW\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-ninja.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install ninja\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/enable-docker-ipv6.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Enable IPv6 on Docker\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -120,22 +98,16 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/checkout-submodules.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Checkout submodules\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/verify-line-endings.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Verify line endings\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n # images, etc.\n - bash: src/ci/scripts/install-awscli.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Install awscli\n "}, {"sha": "3732ab5458f9b061b13333c5d857ec250cd953dd", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -6,72 +6,19 @@ variables:\n - group: prod-credentials\n \n jobs:\n-- job: Linux\n+- job: Windows\n   timeoutInMinutes: 600\n   pool:\n-    vmImage: ubuntu-16.04\n+    vmImage: 'vs2017-win2016'\n   steps:\n   - template: steps/run.yml\n   strategy:\n     matrix:\n-      dist-x86_64-linux:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY: 1\n-\n-      dist-x86_64-linux-alt:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY_ALT: 1\n-\n-# The macOS and Windows builds here are currently disabled due to them not being\n-# overly necessary on `try` builds. We also don't actually have anything that\n-# consumes the artifacts currently. Perhaps one day we can reenable, but for now\n-# it helps free up capacity on Azure.\n-# - job: macOS\n-#   timeoutInMinutes: 600\n-#   pool:\n-#     vmImage: macos-10.13\n-#   steps:\n-#   - template: steps/run.yml\n-#   strategy:\n-#     matrix:\n-#       dist-x86_64-apple:\n-#         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n-#         DEPLOY: 1\n-#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-#         MACOSX_DEPLOYMENT_TARGET: 10.7\n-#         NO_LLVM_ASSERTIONS: 1\n-#         NO_DEBUG_ASSERTIONS: 1\n-#         DIST_REQUIRE_ALL_TOOLS: 1\n-#\n-#       dist-x86_64-apple-alt:\n-#         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n-#         DEPLOY_ALT: 1\n-#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-#         MACOSX_DEPLOYMENT_TARGET: 10.7\n-#         NO_LLVM_ASSERTIONS: 1\n-#         NO_DEBUG_ASSERTIONS: 1\n-#\n-# - job: Windows\n-#   timeoutInMinutes: 600\n-#   pool:\n-#     vmImage: 'vs2017-win2016'\n-#   steps:\n-#   - template: steps/run.yml\n-#   strategy:\n-#     matrix:\n-#       dist-x86_64-msvc:\n-#         RUST_CONFIGURE_ARGS: >\n-#           --build=x86_64-pc-windows-msvc\n-#           --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n-#           --enable-full-tools\n-#           --enable-profiler\n-#         SCRIPT: python x.py dist\n-#         DIST_REQUIRE_ALL_TOOLS: 1\n-#         DEPLOY: 1\n-#\n-#       dist-x86_64-msvc-alt:\n-#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n-#         SCRIPT: python x.py dist\n-#         DEPLOY_ALT: 1\n+      dist-x86_64-msvc:\n+        RUST_CONFIGURE_ARGS: >-\n+          --build=x86_64-pc-windows-msvc\n+          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1"}, {"sha": "f29f9f3bf1c453dcb098ca16f65b37d640b474cc", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -172,6 +172,8 @@ docker \\\n   --env CI \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n+  --env GITHUB_ACTIONS \\\n+  --env GITHUB_REF \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n   --env TOOLSTATE_PUBLISH \\"}, {"sha": "ae5b22493ab07efd593aa3eb1bfc15d489c8f935", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -23,9 +23,7 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-branch_name=$(getCIBranch)\n-\n-if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ] || [ \"$branch_name\" = \"try\" ]; then\n+if [ ! isCI ] || isCiBranch auto || isCiBranch beta; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}, {"sha": "98373df7fce50d92a0249cd506e795a02523416b", "filename": "src/ci/scripts/install-mingw.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -52,7 +52,7 @@ if isWindows; then\n     if [[ \"${CUSTOM_MINGW-0}\" -ne 1 ]]; then\n         pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n             mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${bits}/bin\"\n+        ciCommandAddPath \"$(ciCheckoutPath)/msys2/mingw${bits}/bin\"\n     else\n         mingw_dir=\"mingw${bits}\"\n "}, {"sha": "c9fafc7fe6b41b5bc624a4b2818878753b100930", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -12,8 +12,8 @@ IFS=$'\\n\\t'\n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n if isWindows; then\n-    choco install msys2 --params=\"/InstallDir:${SYSTEM_WORKFOLDER}/msys2 /NoPath\" -y --no-progress\n-    mkdir -p \"${SYSTEM_WORKFOLDER}/msys2/home/${USERNAME}\"\n+    choco install msys2 --params=\"/InstallDir:$(ciCheckoutPath)/msys2 /NoPath\" -y --no-progress\n+    mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\"\n \n-    ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/usr/bin\"\n+    ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\"\n fi"}, {"sha": "e126a06edab7373a12df556e6f81f2f82d409239", "filename": "src/ci/scripts/setup-environment.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Fsetup-environment.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fscripts%2Fsetup-environment.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fsetup-environment.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+# This script guesses some environment variables based on the builder name and\n+# the current platform, to reduce the amount of variables defined in the CI\n+# configuration.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# Builders starting with `dist-` are dist builders, but if they also end with\n+# `-alt` they are alternate dist builders.\n+if [[ \"${CI_JOB_NAME}\" = dist-* ]]; then\n+    if [[ \"${CI_JOB_NAME}\" = *-alt ]]; then\n+        echo \"alternate dist builder detected, setting DEPLOY_ALT=1\"\n+        ciCommandSetEnv DEPLOY_ALT 1\n+    else\n+        echo \"normal dist builder detected, setting DEPLOY=1\"\n+        ciCommandSetEnv DEPLOY 1\n+    fi\n+fi\n+\n+# All the Linux builds happen inside Docker.\n+if isLinux; then\n+    if [[ -z \"${IMAGE+x}\" ]]; then\n+        echo \"linux builder detected, using docker to run the build\"\n+        ciCommandSetEnv IMAGE \"${CI_JOB_NAME}\"\n+    else\n+        echo \"a custom docker image is already set\"\n+    fi\n+fi"}, {"sha": "98120f5dff95dafb63b62f2a8ac64221b88b73bb", "filename": "src/ci/shared.sh", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c75044f4633413780ba714dcea2bd6e7a2eca9b1/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=c75044f4633413780ba714dcea2bd6e7a2eca9b1", "patch": "@@ -27,27 +27,66 @@ function retry {\n }\n \n function isCI {\n-  [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+    [[ \"${CI-false}\" = \"true\" ]] || isAzurePipelines || isGitHubActions\n+}\n+\n+function isAzurePipelines {\n+    [[ \"${TF_BUILD-False}\" = \"True\" ]]\n+}\n+\n+function isGitHubActions {\n+    [[ \"${GITHUB_ACTIONS-false}\" = \"true\" ]]\n }\n \n function isMacOS {\n-  [ \"$AGENT_OS\" = \"Darwin\" ]\n+    [[ \"${OSTYPE}\" = \"darwin\"* ]]\n }\n \n function isWindows {\n-  [ \"$AGENT_OS\" = \"Windows_NT\" ]\n+    [[ \"${OSTYPE}\" = \"cygwin\" ]] || [[ \"${OSTYPE}\" = \"msys\" ]]\n }\n \n function isLinux {\n-  [ \"$AGENT_OS\" = \"Linux\" ]\n+    [[ \"${OSTYPE}\" = \"linux-gnu\" ]]\n }\n \n-function getCIBranch {\n-  echo \"$BUILD_SOURCEBRANCHNAME\"\n+function isCiBranch {\n+    if [[ $# -ne 1 ]]; then\n+        echo \"usage: $0 <branch-name>\"\n+        exit 1\n+    fi\n+    name=\"$1\"\n+\n+    if isAzurePipelines; then\n+        [[ \"${BUILD_SOURCEBRANCHNAME}\" = \"${name}\" ]]\n+    elif isGitHubActions; then\n+        [[ \"${GITHUB_REF}\" = \"refs/heads/${name}\" ]]\n+    else\n+        echo \"isCiBranch only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommit {\n-  echo \"${BUILD_SOURCEVERSION}\"\n+    if isAzurePipelines; then\n+        echo \"${BUILD_SOURCEVERSION}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_SHA}\"\n+    else\n+        echo \"ciCommit only works inside CI!\"\n+        exit 1\n+    fi\n+}\n+\n+function ciCheckoutPath {\n+    if isAzurePipelines; then\n+        echo \"${SYSTEM_WORKFOLDER}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_WORKSPACE}\"\n+    else\n+        echo \"ciCheckoutPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandAddPath {\n@@ -57,7 +96,14 @@ function ciCommandAddPath {\n     fi\n     path=\"$1\"\n \n-    echo \"##vso[task.prependpath]${path}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.prependpath]${path}\"\n+    elif isGitHubActions; then\n+        echo \"::add-path::${value}\"\n+    else\n+        echo \"ciCommandAddPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandSetEnv {\n@@ -68,5 +114,12 @@ function ciCommandSetEnv {\n     name=\"$1\"\n     value=\"$2\"\n \n-    echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    elif isGitHubActions; then\n+        echo \"::set-env name=${name}::${value}\"\n+    else\n+        echo \"ciCommandSetEnv only works inside CI!\"\n+        exit 1\n+    fi\n }"}]}