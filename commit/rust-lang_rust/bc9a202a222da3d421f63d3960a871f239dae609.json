{"sha": "bc9a202a222da3d421f63d3960a871f239dae609", "node_id": "C_kwDOAAsO6NoAKGJjOWEyMDJhMjIyZGEzZDQyMWY2M2QzOTYwYTg3MWYyMzlkYWU2MDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-31T23:16:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-01T17:07:55Z"}, "message": "Use Key impl to select cache.", "tree": {"sha": "c7175fa5a01becf65502c95e4f8dcf224d9c8838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7175fa5a01becf65502c95e4f8dcf224d9c8838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9a202a222da3d421f63d3960a871f239dae609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a202a222da3d421f63d3960a871f239dae609", "html_url": "https://github.com/rust-lang/rust/commit/bc9a202a222da3d421f63d3960a871f239dae609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a202a222da3d421f63d3960a871f239dae609/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade5cffc2ba4a238030aca3386532fdf20c9d26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade5cffc2ba4a238030aca3386532fdf20c9d26d", "html_url": "https://github.com/rust-lang/rust/commit/ade5cffc2ba4a238030aca3386532fdf20c9d26d"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "880632561b9e8e2ba75ee46aac677f9932f879f2", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=bc9a202a222da3d421f63d3960a871f239dae609", "patch": "@@ -8,12 +8,15 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n+use rustc_query_system::query::{DefaultCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n-pub trait Key {\n+pub trait Key: Sized {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n     fn query_crate_is_local(&self) -> bool;\n@@ -100,6 +103,8 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n }\n \n impl Key for CrateNum {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         *self == LOCAL_CRATE\n@@ -110,6 +115,8 @@ impl Key for CrateNum {\n }\n \n impl Key for OwnerId {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -123,6 +130,8 @@ impl Key for OwnerId {\n }\n \n impl Key for LocalDefId {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}, {"sha": "0f62da9992f31444b382b7e9a560a83e1c0921aa", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=bc9a202a222da3d421f63d3960a871f239dae609", "patch": "@@ -15,6 +15,7 @@ use crate::mir::interpret::{\n };\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n+use crate::query::Key;\n use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -120,17 +121,15 @@ macro_rules! query_helper_param_ty {\n }\n \n macro_rules! query_storage {\n-    // FIXME(cjgillot) this macro-based way to perform type-based dispatch is clearly brittle.\n-    // It should probably be replaced by an associated type on the `Key` trait.\n-    ([][CrateNum, $V:ty]) => { VecCache<CrateNum, $V> };\n-    ([(arena_cache) $($rest:tt)*][CrateNum, $V:ty]) => { VecArenaCache<'tcx, CrateNum, $V> };\n-    ([][LocalDefId, $V:ty]) => { VecCache<LocalDefId, $V> };\n-    ([(arena_cache) $($rest:tt)*][LocalDefId, $V:ty]) => { VecArenaCache<'tcx, LocalDefId, $V> };\n-    ([][hir::OwnerId, $V:ty]) => { VecCache<hir::OwnerId, $V> };\n-    ([(arena_cache) $($rest:tt)*][hir::OwnerId, $V:ty]) => { VecArenaCache<'tcx, hir::OwnerId, $V> };\n-    ([][$K:ty, $V:ty]) => { DefaultCache<$K, $V> };\n-    ([(arena_cache) $($rest:tt)*][$K:ty, $V:ty]) => { ArenaCache<'tcx, $K, $V> };\n-    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => { query_storage!([$($modifiers)*][$($args)*]) };\n+    ([][$K:ty, $V:ty]) => {\n+        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::Cache\n+    };\n+    ([(arena_cache) $($rest:tt)*][$K:ty, $V:ty]) => {\n+        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::ArenaCache\n+    };\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        query_storage!([$($modifiers)*][$($args)*])\n+    };\n }\n \n macro_rules! separate_provide_extern_decl {"}, {"sha": "cdd4357242215e54f4cc5293c700869134f944ec", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=bc9a202a222da3d421f63d3960a871f239dae609", "patch": "@@ -12,6 +12,14 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::default::Default;\n use std::fmt::Debug;\n use std::hash::Hash;\n+use std::marker::PhantomData;\n+\n+pub trait CacheSelector<'tcx, V> {\n+    type Cache\n+    where\n+        V: Clone;\n+    type ArenaCache;\n+}\n \n pub trait QueryStorage {\n     type Value: Debug;\n@@ -43,6 +51,15 @@ pub trait QueryCache: QueryStorage + Sized {\n     fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex));\n }\n \n+pub struct DefaultCacheSelector<K>(PhantomData<K>);\n+\n+impl<'tcx, K: Eq + Hash, V: 'tcx> CacheSelector<'tcx, V> for DefaultCacheSelector<K> {\n+    type Cache = DefaultCache<K, V>\n+    where\n+        V: Clone;\n+    type ArenaCache = ArenaCache<'tcx, K, V>;\n+}\n+\n pub struct DefaultCache<K, V> {\n     #[cfg(parallel_compiler)]\n     cache: Sharded<FxHashMap<K, (V, DepNodeIndex)>>,\n@@ -209,6 +226,15 @@ where\n     }\n }\n \n+pub struct VecCacheSelector<K>(PhantomData<K>);\n+\n+impl<'tcx, K: Idx, V: 'tcx> CacheSelector<'tcx, V> for VecCacheSelector<K> {\n+    type Cache = VecCache<K, V>\n+    where\n+        V: Clone;\n+    type ArenaCache = VecArenaCache<'tcx, K, V>;\n+}\n+\n pub struct VecCache<K: Idx, V> {\n     #[cfg(parallel_compiler)]\n     cache: Sharded<IndexVec<K, Option<(V, DepNodeIndex)>>>,"}, {"sha": "1d3b46aad7b730df39b17d2239267a3d3308097a", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9a202a222da3d421f63d3960a871f239dae609/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=bc9a202a222da3d421f63d3960a871f239dae609", "patch": "@@ -8,7 +8,7 @@ pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJob\n \n mod caches;\n pub use self::caches::{\n-    ArenaCache, DefaultCache, QueryCache, QueryStorage, VecArenaCache, VecCache,\n+    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, VecCacheSelector,\n };\n \n mod config;"}]}