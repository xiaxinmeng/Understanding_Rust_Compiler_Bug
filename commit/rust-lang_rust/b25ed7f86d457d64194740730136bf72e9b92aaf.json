{"sha": "b25ed7f86d457d64194740730136bf72e9b92aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWVkN2Y4NmQ0NTdkNjQxOTQ3NDA3MzAxMzZiZjcyZTliOTJhYWY=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-09-19T01:31:49Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-19T06:26:10Z"}, "message": "Restructure crate as core module\n\nAligns module with rust-lang/library/core, creating an... unusual\narchitecture that is easier to pull in as a module, as core itself can\nhave no dependencies (as we haven't built core yet).", "tree": {"sha": "5ee3ae37565b599dc7459766c90910342ee5ab91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee3ae37565b599dc7459766c90910342ee5ab91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25ed7f86d457d64194740730136bf72e9b92aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25ed7f86d457d64194740730136bf72e9b92aaf", "html_url": "https://github.com/rust-lang/rust/commit/b25ed7f86d457d64194740730136bf72e9b92aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25ed7f86d457d64194740730136bf72e9b92aaf/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "html_url": "https://github.com/rust-lang/rust/commit/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf"}], "stats": {"total": 289, "additions": 159, "deletions": 130}, "files": [{"sha": "8c51baca8ede38efa9f8faa26d1a51238d6049fb", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, Mask, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Mask, Simd, SimdElement, SupportedLaneCount};\n \n impl<T, const LANES: usize> Simd<T, LANES>\n where\n@@ -8,13 +9,13 @@ where\n     /// Test if each lane is equal to the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_eq(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_eq(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_eq(self, other)) }\n     }\n \n     /// Test if each lane is not equal to the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_ne(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_ne(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_ne(self, other)) }\n     }\n }\n \n@@ -26,24 +27,24 @@ where\n     /// Test if each lane is less than the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_lt(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_lt(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_lt(self, other)) }\n     }\n \n     /// Test if each lane is greater than the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_gt(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_gt(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_gt(self, other)) }\n     }\n \n     /// Test if each lane is less than or equal to the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_le(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_le(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_le(self, other)) }\n     }\n \n     /// Test if each lane is greater than or equal to the corresponding lane in `other`.\n     #[inline]\n     pub fn lanes_ge(self, other: Self) -> Mask<T::Mask, LANES> {\n-        unsafe { Mask::from_int_unchecked(crate::intrinsics::simd_ge(self, other)) }\n+        unsafe { Mask::from_int_unchecked(intrinsics::simd_ge(self, other)) }\n     }\n }"}, {"sha": "15e8ed0253e140f2858711ac20613c844da8b929", "filename": "crates/core_simd/src/core_simd_docs.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fcore_simd_docs.md", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fcore_simd_docs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcore_simd_docs.md?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -0,0 +1,4 @@\n+Portable SIMD module.\n+\n+This module offers a portable abstraction for SIMD operations\n+that is not bound to any particular hardware architecture."}, {"sha": "dbd9839c4bfe9c9c61a0a0264de08892fc43d26a", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,17 +1,20 @@\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::fmt;\n+\n macro_rules! impl_fmt_trait {\n     { $($trait:ident,)* } => {\n         $(\n-            impl<T, const LANES: usize> core::fmt::$trait for crate::Simd<T, LANES>\n+            impl<T, const LANES: usize> fmt::$trait for Simd<T, LANES>\n             where\n-                crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-                T: crate::SimdElement + core::fmt::$trait,\n+                LaneCount<LANES>: SupportedLaneCount,\n+                T: SimdElement + fmt::$trait,\n             {\n-                fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     #[repr(transparent)]\n-                    struct Wrapper<'a, T: core::fmt::$trait>(&'a T);\n+                    struct Wrapper<'a, T: fmt::$trait>(&'a T);\n \n-                    impl<T: core::fmt::$trait> core::fmt::Debug for Wrapper<'_, T> {\n-                        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                    impl<T: fmt::$trait> fmt::Debug for Wrapper<'_, T> {\n+                        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                             self.0.fmt(f)\n                         }\n                     }"}, {"sha": "3ed9845d608eab2b26e1a7372b37ed694f942628", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -91,9 +91,9 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_bitmask<T, U>(x: T) -> U;\n \n     // select\n-    pub(crate) fn simd_select<T, U>(m: T, a: U, b: U) -> U;\n+    pub(crate) fn simd_select<M, T>(m: M, a: T, b: T) -> T;\n     #[allow(unused)]\n-    pub(crate) fn simd_select_bitmask<T, U>(m: T, a: U, b: U) -> U;\n+    pub(crate) fn simd_select_bitmask<M, T>(m: M, a: T, b: T) -> T;\n }\n \n #[cfg(feature = \"std\")]\n@@ -114,4 +114,4 @@ mod std {\n }\n \n #[cfg(feature = \"std\")]\n-pub(crate) use crate::intrinsics::std::*;\n+pub(crate) use crate::simd::intrinsics::std::*;"}, {"sha": "3275b4db8e49fba2c072b35826f3476e74713aec", "filename": "crates/core_simd/src/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fiter.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,4 @@\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n use core::{\n     iter::{Product, Sum},\n     ops::{Add, Mul},\n@@ -15,7 +15,7 @@ macro_rules! impl_traits {\n             }\n         }\n \n-        impl<const LANES: usize> core::iter::Product<Self> for Simd<$type, LANES>\n+        impl<const LANES: usize> Product<Self> for Simd<$type, LANES>\n         where\n             LaneCount<LANES>: SupportedLaneCount,\n         {"}, {"sha": "279999b09e2f06c265c42619c8ece9c500ee9fa5", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -14,31 +14,6 @@\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n \n-#[macro_use]\n-mod permute;\n-#[macro_use]\n-mod reduction;\n-\n-mod select;\n-pub use select::Select;\n-\n-#[cfg(feature = \"generic_const_exprs\")]\n-mod to_bytes;\n-\n-mod comparisons;\n-mod fmt;\n-mod intrinsics;\n-mod iter;\n-mod math;\n-mod ops;\n-mod round;\n-mod vendor;\n-\n-mod lane_count;\n-pub use lane_count::*;\n-\n-mod masks;\n-pub use masks::*;\n-\n-mod vector;\n-pub use vector::*;\n+#[path = \"mod.rs\"]\n+mod core_simd;\n+pub use self::core_simd::simd::*;"}, {"sha": "c4d6e188348376712778938a02ac4781390c677d", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -12,7 +12,9 @@\n )]\n mod mask_impl;\n \n-use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::cmp::Ordering;\n+use core::fmt;\n \n /// Marker trait for types that may be used as SIMD mask elements.\n pub unsafe trait MaskElement: SimdElement {\n@@ -251,17 +253,17 @@ where\n     LaneCount<LANES>: SupportedLaneCount,\n {\n     #[inline]\n-    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         self.0.partial_cmp(&other.0)\n     }\n }\n \n-impl<T, const LANES: usize> core::fmt::Debug for Mask<T, LANES>\n+impl<T, const LANES: usize> fmt::Debug for Mask<T, LANES>\n where\n-    T: MaskElement + core::fmt::Debug,\n+    T: MaskElement + fmt::Debug,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n-    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list()\n             .entries((0..LANES).map(|lane| self.test(lane)))\n             .finish()"}, {"sha": "0691c6ecd21849bdb185c2351c4d00831b13daf5", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, MaskElement, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n use core::marker::PhantomData;\n \n /// A mask where each lane is represented by a single bit.\n@@ -99,11 +100,7 @@ where\n         unsafe {\n             let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n                 core::mem::transmute_copy(&self);\n-            crate::intrinsics::simd_select_bitmask(\n-                mask,\n-                Simd::splat(T::TRUE),\n-                Simd::splat(T::FALSE),\n-            )\n+            intrinsics::simd_select_bitmask(mask, Simd::splat(T::TRUE), Simd::splat(T::FALSE))\n         }\n     }\n \n@@ -115,7 +112,7 @@ where\n             core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::IntBitMask>(),\n         );\n         let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-            crate::intrinsics::simd_bitmask(value);\n+            intrinsics::simd_bitmask(value);\n         Self(core::mem::transmute_copy(&mask), PhantomData)\n     }\n "}, {"sha": "b653bce05b9e77e20f1c4c59696468b74f161307", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,7 +1,8 @@\n //! Masks that take up full SIMD vector registers.\n \n use super::MaskElement;\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n \n #[repr(transparent)]\n pub struct Mask<T, const LANES: usize>(Simd<T, LANES>)\n@@ -98,7 +99,7 @@ where\n     where\n         U: MaskElement,\n     {\n-        unsafe { Mask(crate::intrinsics::simd_cast(self.0)) }\n+        unsafe { Mask(intrinsics::simd_cast(self.0)) }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]\n@@ -111,7 +112,7 @@ where\n                 LaneCount::<LANES>::BITMASK_LEN,\n             );\n             let bitmask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-                crate::intrinsics::simd_bitmask(self.0);\n+                intrinsics::simd_bitmask(self.0);\n             let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n                 core::mem::transmute_copy(&bitmask);\n \n@@ -149,7 +150,7 @@ where\n             let bitmask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n                 core::mem::transmute_copy(&bitmask);\n \n-            Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n+            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),\n                 Self::splat(false).to_int(),\n@@ -159,12 +160,12 @@ where\n \n     #[inline]\n     pub fn any(self) -> bool {\n-        unsafe { crate::intrinsics::simd_reduce_any(self.to_int()) }\n+        unsafe { intrinsics::simd_reduce_any(self.to_int()) }\n     }\n \n     #[inline]\n     pub fn all(self) -> bool {\n-        unsafe { crate::intrinsics::simd_reduce_all(self.to_int()) }\n+        unsafe { intrinsics::simd_reduce_all(self.to_int()) }\n     }\n }\n \n@@ -186,7 +187,7 @@ where\n     type Output = Self;\n     #[inline]\n     fn bitand(self, rhs: Self) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_and(self.0, rhs.0)) }\n+        unsafe { Self(intrinsics::simd_and(self.0, rhs.0)) }\n     }\n }\n \n@@ -198,7 +199,7 @@ where\n     type Output = Self;\n     #[inline]\n     fn bitor(self, rhs: Self) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_or(self.0, rhs.0)) }\n+        unsafe { Self(intrinsics::simd_or(self.0, rhs.0)) }\n     }\n }\n \n@@ -210,7 +211,7 @@ where\n     type Output = Self;\n     #[inline]\n     fn bitxor(self, rhs: Self) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_xor(self.0, rhs.0)) }\n+        unsafe { Self(intrinsics::simd_xor(self.0, rhs.0)) }\n     }\n }\n "}, {"sha": "6ee5efdb981cade15243f8fcc9cf34a5a8960a50", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics::{simd_saturating_add, simd_saturating_sub};\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n \n macro_rules! impl_uint_arith {\n     ($($ty:ty),+) => {\n@@ -20,7 +21,7 @@ macro_rules! impl_uint_arith {\n             /// ```\n             #[inline]\n             pub fn saturating_add(self, second: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_saturating_add(self, second) }\n+                unsafe { simd_saturating_add(self, second) }\n             }\n \n             /// Lanewise saturating subtract.\n@@ -38,7 +39,7 @@ macro_rules! impl_uint_arith {\n             /// assert_eq!(sat, Simd::splat(0));\n             #[inline]\n             pub fn saturating_sub(self, second: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+                unsafe { simd_saturating_sub(self, second) }\n             }\n         })+\n     }\n@@ -64,7 +65,7 @@ macro_rules! impl_int_arith {\n             /// ```\n             #[inline]\n             pub fn saturating_add(self, second: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_saturating_add(self, second) }\n+                unsafe { simd_saturating_add(self, second) }\n             }\n \n             /// Lanewise saturating subtract.\n@@ -82,7 +83,7 @@ macro_rules! impl_int_arith {\n             /// assert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));\n             #[inline]\n             pub fn saturating_sub(self, second: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+                unsafe { simd_saturating_sub(self, second) }\n             }\n \n             /// Lanewise absolute value, implemented in Rust."}, {"sha": "251091c1dc3e7afd4b1e4af463a8507018ca931d", "filename": "crates/core_simd/src/mod.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -0,0 +1,33 @@\n+#[macro_use]\n+mod permute;\n+#[macro_use]\n+mod reduction;\n+\n+mod select;\n+\n+#[cfg(feature = \"generic_const_exprs\")]\n+mod to_bytes;\n+\n+mod comparisons;\n+mod fmt;\n+mod intrinsics;\n+mod iter;\n+mod math;\n+mod ops;\n+mod round;\n+mod vendor;\n+\n+mod lane_count;\n+\n+mod masks;\n+\n+mod vector;\n+\n+#[doc = include_str!(\"core_simd_docs.md\")]\n+pub mod simd {\n+    pub use crate::core_simd::lane_count::*;\n+    pub use crate::core_simd::masks::*;\n+    pub use crate::core_simd::select::Select;\n+    pub use crate::core_simd::vector::*;\n+    pub(crate) use crate::core_simd::*;\n+}"}, {"sha": "5d7af474caf7005c9045bcb5e9cc99b226ae7872", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n \n impl<I, T, const LANES: usize> core::ops::Index<I> for Simd<T, LANES>\n where\n@@ -208,7 +209,7 @@ macro_rules! impl_op {\n             {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n-                    unsafe { crate::intrinsics::simd_neg(self) }\n+                    unsafe { intrinsics::simd_neg(self) }\n                 }\n             }\n         }\n@@ -226,7 +227,7 @@ macro_rules! impl_op {\n                 #[inline]\n                 fn $trait_fn(self, rhs: Self) -> Self::Output {\n                     unsafe {\n-                        crate::intrinsics::$intrinsic(self, rhs)\n+                        intrinsics::$intrinsic(self, rhs)\n                     }\n                 }\n             }\n@@ -268,7 +269,7 @@ macro_rules! impl_op {\n                 #[inline]\n                 fn $assign_trait_fn(&mut self, rhs: Self) {\n                     unsafe {\n-                        *self = crate::intrinsics::$intrinsic(*self, rhs);\n+                        *self = intrinsics::$intrinsic(*self, rhs);\n                     }\n                 }\n             }\n@@ -338,7 +339,7 @@ macro_rules! impl_unsigned_int_ops {\n                                 .any(|(x,y)| *x == <$scalar>::MIN && *y == -1 as _) {\n                             panic!(\"attempt to divide with overflow\");\n                         }\n-                        unsafe { crate::intrinsics::simd_div(self, rhs) }\n+                        unsafe { intrinsics::simd_div(self, rhs) }\n                     }\n                 }\n             }\n@@ -361,7 +362,7 @@ macro_rules! impl_unsigned_int_ops {\n                                 panic!(\"attempt to divide with overflow\");\n                         }\n                         let rhs = Self::splat(rhs);\n-                        unsafe { crate::intrinsics::simd_div(self, rhs) }\n+                        unsafe { intrinsics::simd_div(self, rhs) }\n                     }\n                 }\n             }\n@@ -428,7 +429,7 @@ macro_rules! impl_unsigned_int_ops {\n                                 .any(|(x,y)| *x == <$scalar>::MIN && *y == -1 as _) {\n                             panic!(\"attempt to calculate the remainder with overflow\");\n                         }\n-                        unsafe { crate::intrinsics::simd_rem(self, rhs) }\n+                        unsafe { intrinsics::simd_rem(self, rhs) }\n                     }\n                 }\n             }\n@@ -451,7 +452,7 @@ macro_rules! impl_unsigned_int_ops {\n                                 panic!(\"attempt to calculate the remainder with overflow\");\n                         }\n                         let rhs = Self::splat(rhs);\n-                        unsafe { crate::intrinsics::simd_rem(self, rhs) }\n+                        unsafe { intrinsics::simd_rem(self, rhs) }\n                     }\n                 }\n             }\n@@ -512,7 +513,7 @@ macro_rules! impl_unsigned_int_ops {\n                         {\n                             panic!(\"attempt to shift left with overflow\");\n                         }\n-                        unsafe { crate::intrinsics::simd_shl(self, rhs) }\n+                        unsafe { intrinsics::simd_shl(self, rhs) }\n                     }\n                 }\n             }\n@@ -530,7 +531,7 @@ macro_rules! impl_unsigned_int_ops {\n                             panic!(\"attempt to shift left with overflow\");\n                         }\n                         let rhs = Self::splat(rhs);\n-                        unsafe { crate::intrinsics::simd_shl(self, rhs) }\n+                        unsafe { intrinsics::simd_shl(self, rhs) }\n                     }\n                 }\n             }\n@@ -577,7 +578,7 @@ macro_rules! impl_unsigned_int_ops {\n                         {\n                             panic!(\"attempt to shift with overflow\");\n                         }\n-                        unsafe { crate::intrinsics::simd_shr(self, rhs) }\n+                        unsafe { intrinsics::simd_shr(self, rhs) }\n                     }\n                 }\n             }\n@@ -595,7 +596,7 @@ macro_rules! impl_unsigned_int_ops {\n                             panic!(\"attempt to shift with overflow\");\n                         }\n                         let rhs = Self::splat(rhs);\n-                        unsafe { crate::intrinsics::simd_shr(self, rhs) }\n+                        unsafe { intrinsics::simd_shr(self, rhs) }\n                     }\n                 }\n             }"}, {"sha": "206519340b3afba51e475be8b6b4bbd893ae8e68", "filename": "crates/core_simd/src/permute.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,8 +1,11 @@\n+use crate::simd::intrinsics;\n+use crate::simd::{Simd, SimdElement};\n+\n macro_rules! impl_shuffle_lane {\n     { $fn:ident, $n:literal } => {\n-        impl<T> crate::Simd<T, $n>\n+        impl<T> Simd<T, $n>\n         where\n-            T: crate::SimdElement,\n+            T: SimdElement,\n         {\n             /// A const SIMD shuffle that takes 2 SIMD vectors and produces another vector, using\n             /// the indices in the const parameter. The first or \"self\" vector will have its lanes\n@@ -24,7 +27,7 @@ macro_rules! impl_shuffle_lane {\n             /// ```\n             #[inline]\n             pub fn shuffle<const IDX: [u32; $n]>(self, second: Self) -> Self {\n-                unsafe { crate::intrinsics::$fn(self, second, IDX) }\n+                unsafe { intrinsics::$fn(self, second, IDX) }\n             }\n \n             /// Reverse the order of the lanes in the vector."}, {"sha": "db0640aae7905aa640816a03b8308eea86b5a923", "filename": "crates/core_simd/src/reduction.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Freduction.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,8 @@\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics::{\n+    simd_reduce_add_ordered, simd_reduce_and, simd_reduce_max, simd_reduce_min,\n+    simd_reduce_mul_ordered, simd_reduce_or, simd_reduce_xor,\n+};\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n \n macro_rules! impl_integer_reductions {\n     { $scalar:ty } => {\n@@ -9,46 +13,46 @@ macro_rules! impl_integer_reductions {\n             /// Horizontal wrapping add.  Returns the sum of the lanes of the vector, with wrapping addition.\n             #[inline]\n             pub fn horizontal_sum(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_add_ordered(self, 0) }\n+                unsafe { simd_reduce_add_ordered(self, 0) }\n             }\n \n             /// Horizontal wrapping multiply.  Returns the product of the lanes of the vector, with wrapping multiplication.\n             #[inline]\n             pub fn horizontal_product(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_mul_ordered(self, 1) }\n+                unsafe { simd_reduce_mul_ordered(self, 1) }\n             }\n \n             /// Horizontal bitwise \"and\".  Returns the cumulative bitwise \"and\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_and(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_and(self) }\n+                unsafe { simd_reduce_and(self) }\n             }\n \n             /// Horizontal bitwise \"or\".  Returns the cumulative bitwise \"or\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_or(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_or(self) }\n+                unsafe { simd_reduce_or(self) }\n             }\n \n             /// Horizontal bitwise \"xor\".  Returns the cumulative bitwise \"xor\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_xor(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_xor(self) }\n+                unsafe { simd_reduce_xor(self) }\n             }\n \n             /// Horizontal maximum.  Returns the maximum lane in the vector.\n             #[inline]\n             pub fn horizontal_max(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_max(self) }\n+                unsafe { simd_reduce_max(self) }\n             }\n \n             /// Horizontal minimum.  Returns the minimum lane in the vector.\n             #[inline]\n             pub fn horizontal_min(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_min(self) }\n+                unsafe { simd_reduce_min(self) }\n             }\n         }\n     }\n@@ -79,7 +83,7 @@ macro_rules! impl_float_reductions {\n                 if cfg!(all(target_arch = \"x86\", not(target_feature = \"sse2\"))) {\n                     self.as_array().iter().sum()\n                 } else {\n-                    unsafe { crate::intrinsics::simd_reduce_add_ordered(self, 0.) }\n+                    unsafe { simd_reduce_add_ordered(self, 0.) }\n                 }\n             }\n \n@@ -90,7 +94,7 @@ macro_rules! impl_float_reductions {\n                 if cfg!(all(target_arch = \"x86\", not(target_feature = \"sse2\"))) {\n                     self.as_array().iter().product()\n                 } else {\n-                    unsafe { crate::intrinsics::simd_reduce_mul_ordered(self, 1.) }\n+                    unsafe { simd_reduce_mul_ordered(self, 1.) }\n                 }\n             }\n \n@@ -100,7 +104,7 @@ macro_rules! impl_float_reductions {\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`.\n             #[inline]\n             pub fn horizontal_max(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_max(self) }\n+                unsafe { simd_reduce_max(self) }\n             }\n \n             /// Horizontal minimum.  Returns the minimum lane in the vector.\n@@ -109,7 +113,7 @@ macro_rules! impl_float_reductions {\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`.\n             #[inline]\n             pub fn horizontal_min(self) -> $scalar {\n-                unsafe { crate::intrinsics::simd_reduce_min(self) }\n+                unsafe { simd_reduce_min(self) }\n             }\n         }\n     }"}, {"sha": "3bb10d0ed0bf8200e4946476f9e7d2de8f82ad65", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n \n macro_rules! implement {\n     {\n@@ -13,28 +14,28 @@ macro_rules! implement {\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn ceil(self) -> Self {\n-                unsafe { crate::intrinsics::simd_ceil(self) }\n+                unsafe { intrinsics::simd_ceil(self) }\n             }\n \n             /// Returns the largest integer value less than or equal to each lane.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn floor(self) -> Self {\n-                unsafe { crate::intrinsics::simd_floor(self) }\n+                unsafe { intrinsics::simd_floor(self) }\n             }\n \n             /// Rounds to the nearest integer value. Ties round toward zero.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn round(self) -> Self {\n-                unsafe { crate::intrinsics::simd_round(self) }\n+                unsafe { intrinsics::simd_round(self) }\n             }\n \n             /// Returns the floating point's integer value, with its fractional part removed.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn trunc(self) -> Self {\n-                unsafe { crate::intrinsics::simd_trunc(self) }\n+                unsafe { intrinsics::simd_trunc(self) }\n             }\n \n             /// Returns the floating point's fractional value, with its integer part removed.\n@@ -60,14 +61,14 @@ macro_rules! implement {\n             /// * Be representable in the return type, after truncating off its fractional part\n             #[inline]\n             pub unsafe fn to_int_unchecked(self) -> Simd<$int_type, LANES> {\n-                crate::intrinsics::simd_cast(self)\n+                intrinsics::simd_cast(self)\n             }\n \n             /// Creates a floating-point vector from an integer vector.  Rounds values that are\n             /// not exactly representable.\n             #[inline]\n             pub fn round_from_int(value: Simd<$int_type, LANES>) -> Self {\n-                unsafe { crate::intrinsics::simd_cast(value) }\n+                unsafe { intrinsics::simd_cast(value) }\n             }\n         }\n     }"}, {"sha": "596621c5676b09d87f48e18bff3b23c99b9da303", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,5 @@\n-use crate::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n \n mod sealed {\n     pub trait Sealed {}\n@@ -25,7 +26,7 @@ where\n {\n     #[inline]\n     fn select(mask: Mask<T::Mask, LANES>, true_values: Self, false_values: Self) -> Self {\n-        unsafe { crate::intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n+        unsafe { intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n     }\n }\n "}, {"sha": "8d9b3e8ff85ea9f458e05d4f9b7732f327c9300c", "filename": "crates/core_simd/src/to_bytes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,19 +1,19 @@\n macro_rules! impl_to_bytes {\n     { $ty:ty, $size:literal } => {\n-        impl<const LANES: usize> crate::Simd<$ty, LANES>\n+        impl<const LANES: usize> crate::simd::Simd<$ty, LANES>\n         where\n-            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-            crate::LaneCount<{{ $size * LANES }}>: crate::SupportedLaneCount,\n+            crate::simd::LaneCount<LANES>: crate::simd::SupportedLaneCount,\n+            crate::simd::LaneCount<{{ $size * LANES }}>: crate::simd::SupportedLaneCount,\n         {\n             /// Return the memory representation of this integer as a byte array in native byte\n             /// order.\n-            pub fn to_ne_bytes(self) -> crate::Simd<u8, {{ $size * LANES }}> {\n+            pub fn to_ne_bytes(self) -> crate::simd::Simd<u8, {{ $size * LANES }}> {\n                 unsafe { core::mem::transmute_copy(&self) }\n             }\n \n             /// Create a native endian integer value from its memory representation as a byte array\n             /// in native endianness.\n-            pub fn from_ne_bytes(bytes: crate::Simd<u8, {{ $size * LANES }}>) -> Self {\n+            pub fn from_ne_bytes(bytes: crate::simd::Simd<u8, {{ $size * LANES }}>) -> Self {\n                 unsafe { core::mem::transmute_copy(&bytes) }\n             }\n         }"}, {"sha": "fb3518fa13d760da65b64dfdaa8a0bb655a58682", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -9,7 +9,8 @@ pub use uint::*;\n // Vectors of pointers are not for public use at the current time.\n pub(crate) mod ptr;\n \n-use crate::{LaneCount, Mask, MaskElement, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Mask, MaskElement, SupportedLaneCount};\n \n /// A SIMD vector of `LANES` elements of type `T`.\n #[repr(simd)]\n@@ -108,11 +109,11 @@ where\n         or: Self,\n     ) -> Self {\n         let mask = (mask & idxs.lanes_lt(Simd::splat(slice.len()))).to_int();\n-        let base_ptr = crate::vector::ptr::SimdConstPtr::splat(slice.as_ptr());\n+        let base_ptr = crate::simd::ptr::SimdConstPtr::splat(slice.as_ptr());\n         // Ferris forgive me, I have done pointer arithmetic here.\n         let ptrs = base_ptr.wrapping_add(idxs);\n         // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n-        unsafe { crate::intrinsics::simd_gather(or, ptrs, mask) }\n+        unsafe { intrinsics::simd_gather(or, ptrs, mask) }\n     }\n \n     /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n@@ -168,11 +169,11 @@ where\n         // 3. &mut [T] which will become our base ptr.\n         unsafe {\n             // Now Entering \u2622\ufe0f *mut T Zone\n-            let base_ptr = crate::vector::ptr::SimdMutPtr::splat(slice.as_mut_ptr());\n+            let base_ptr = crate::simd::ptr::SimdMutPtr::splat(slice.as_mut_ptr());\n             // Ferris forgive me, I have done pointer arithmetic here.\n             let ptrs = base_ptr.wrapping_add(idxs);\n             // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n-            crate::intrinsics::simd_scatter(self, ptrs, mask)\n+            intrinsics::simd_scatter(self, ptrs, mask)\n             // Cleared \u2622\ufe0f *mut T Zone\n         }\n     }"}, {"sha": "21a6c43e153a562dcec361252e1a40941591bf5b", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,6 +1,7 @@\n #![allow(non_camel_case_types)]\n \n-use crate::{LaneCount, Mask, Simd, SupportedLaneCount};\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Mask, Simd, SupportedLaneCount};\n \n /// Implements inherent methods for a float vector containing multiple\n /// `$lanes` of float `$type`, which uses `$bits_ty` as its binary\n@@ -31,7 +32,7 @@ macro_rules! impl_float_vector {\n             /// equivalently-indexed lane in `self`.\n             #[inline]\n             pub fn abs(self) -> Self {\n-                unsafe { crate::intrinsics::simd_fabs(self) }\n+                unsafe { intrinsics::simd_fabs(self) }\n             }\n \n             /// Fused multiply-add.  Computes `(self * a) + b` with only one rounding error,\n@@ -43,15 +44,15 @@ macro_rules! impl_float_vector {\n             /// hardware in mind.\n             #[inline]\n             pub fn mul_add(self, a: Self, b: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_fma(self, a, b) }\n+                unsafe { intrinsics::simd_fma(self, a, b) }\n             }\n \n             /// Produces a vector where every lane has the square root value\n             /// of the equivalently-indexed lane in `self`\n             #[inline]\n             #[cfg(feature = \"std\")]\n             pub fn sqrt(self) -> Self {\n-                unsafe { crate::intrinsics::simd_fsqrt(self) }\n+                unsafe { intrinsics::simd_fsqrt(self) }\n             }\n \n             /// Takes the reciprocal (inverse) of each lane, `1/x`."}, {"sha": "3eac02a27618c2047413ab0f9129c436424c9f4a", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,6 +1,6 @@\n #![allow(non_camel_case_types)]\n \n-use crate::{LaneCount, Mask, Simd, SupportedLaneCount};\n+use crate::simd::{LaneCount, Mask, Simd, SupportedLaneCount};\n \n /// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_integer_vector {"}, {"sha": "ac9b98ca031a64729718d71cf58ea56603146cac", "filename": "crates/core_simd/src/vector/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,5 +1,5 @@\n //! Private implementation details of public gather/scatter APIs.\n-use crate::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n use core::mem;\n \n /// A vector of *const T."}, {"sha": "ed91fc3640e74c85b7911b7fdf51f3dcd6eb727b", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,6 +1,6 @@\n #![allow(non_camel_case_types)]\n \n-use crate::Simd;\n+use crate::simd::Simd;\n \n /// Vector of two `usize` values\n pub type usizex2 = Simd<usize, 2>;"}, {"sha": "3e9487dfb33d3bda5ff7d93a0e39ee22854cb495", "filename": "crates/core_simd/src/vendor/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,4 @@\n-use crate::*;\n+use crate::simd::*;\n \n #[cfg(target_arch = \"arm\")]\n use core::arch::arm::*;"}, {"sha": "92f97d471b6e8690333f0d14f784f555fc2efd11", "filename": "crates/core_simd/src/vendor/powerpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,4 @@\n-use crate::*;\n+use crate::simd::*;\n \n #[cfg(target_arch = \"powerpc\")]\n use core::arch::powerpc::*;"}, {"sha": "ef3baf885b0fbf4e564f8be0acc000d94e25db92", "filename": "crates/core_simd/src/vendor/wasm32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,4 @@\n-use crate::*;\n+use crate::simd::*;\n use core::arch::wasm32::v128;\n \n from_transmute! { unsafe u8x16 => v128 }"}, {"sha": "d3c19ccc539ad4564bab7e35e2de57881686dcf4", "filename": "crates/core_simd/src/vendor/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ed7f86d457d64194740730136bf72e9b92aaf/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs?ref=b25ed7f86d457d64194740730136bf72e9b92aaf", "patch": "@@ -1,4 +1,4 @@\n-use crate::*;\n+use crate::simd::*;\n \n #[cfg(any(target_arch = \"x86\"))]\n use core::arch::x86::*;"}]}