{"sha": "fba110c805073a5733f79485428164d4b9218807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTExMGM4MDUwNzNhNTczM2Y3OTQ4NTQyODE2NGQ0YjkyMTg4MDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-03T14:05:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-03T21:37:31Z"}, "message": "reduce repetition in librustc(_lint) wrt. impl LintPass", "tree": {"sha": "f820db77add371f46dad307836334ac63b471a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f820db77add371f46dad307836334ac63b471a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba110c805073a5733f79485428164d4b9218807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba110c805073a5733f79485428164d4b9218807", "html_url": "https://github.com/rust-lang/rust/commit/fba110c805073a5733f79485428164d4b9218807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba110c805073a5733f79485428164d4b9218807/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8673e0ad85e98997faa76fa7edc99c5825f46ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8673e0ad85e98997faa76fa7edc99c5825f46ee", "html_url": "https://github.com/rust-lang/rust/commit/f8673e0ad85e98997faa76fa7edc99c5825f46ee"}], "stats": {"total": 789, "additions": 198, "deletions": 591}, "files": [{"sha": "dc5894cd6b91ff00ad34f7275108696378cbb7a2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 66, "deletions": 75, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -392,81 +392,72 @@ declare_lint! {\n     \"nested occurrence of `impl Trait` type\"\n }\n \n-/// Does nothing as a lint pass, but registers some `Lint`s\n-/// that are used by other parts of the compiler.\n-#[derive(Copy, Clone)]\n-pub struct HardwiredLints;\n-\n-impl LintPass for HardwiredLints {\n-    fn name(&self) -> &'static str {\n-        \"HardwiredLints\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n-            EXCEEDING_BITSHIFTS,\n-            UNUSED_IMPORTS,\n-            UNUSED_EXTERN_CRATES,\n-            UNUSED_QUALIFICATIONS,\n-            UNKNOWN_LINTS,\n-            UNUSED_VARIABLES,\n-            UNUSED_ASSIGNMENTS,\n-            DEAD_CODE,\n-            UNREACHABLE_CODE,\n-            UNREACHABLE_PATTERNS,\n-            UNUSED_MACROS,\n-            WARNINGS,\n-            UNUSED_FEATURES,\n-            STABLE_FEATURES,\n-            UNKNOWN_CRATE_TYPES,\n-            TRIVIAL_CASTS,\n-            TRIVIAL_NUMERIC_CASTS,\n-            PRIVATE_IN_PUBLIC,\n-            EXPORTED_PRIVATE_DEPENDENCIES,\n-            PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n-            INVALID_TYPE_PARAM_DEFAULT,\n-            CONST_ERR,\n-            RENAMED_AND_REMOVED_LINTS,\n-            SAFE_EXTERN_STATICS,\n-            SAFE_PACKED_BORROWS,\n-            PATTERNS_IN_FNS_WITHOUT_BODY,\n-            LEGACY_DIRECTORY_OWNERSHIP,\n-            LEGACY_CONSTRUCTOR_VISIBILITY,\n-            MISSING_FRAGMENT_SPECIFIER,\n-            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-            LATE_BOUND_LIFETIME_ARGUMENTS,\n-            INCOHERENT_FUNDAMENTAL_IMPLS,\n-            ORDER_DEPENDENT_TRAIT_OBJECTS,\n-            DEPRECATED,\n-            UNUSED_UNSAFE,\n-            UNUSED_MUT,\n-            UNCONDITIONAL_RECURSION,\n-            SINGLE_USE_LIFETIMES,\n-            UNUSED_LIFETIMES,\n-            UNUSED_LABELS,\n-            TYVAR_BEHIND_RAW_POINTER,\n-            ELIDED_LIFETIMES_IN_PATHS,\n-            BARE_TRAIT_OBJECTS,\n-            ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n-            UNSTABLE_NAME_COLLISIONS,\n-            IRREFUTABLE_LET_PATTERNS,\n-            DUPLICATE_MACRO_EXPORTS,\n-            INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-            MISSING_DOC_CODE_EXAMPLES,\n-            PRIVATE_DOC_TESTS,\n-            WHERE_CLAUSES_OBJECT_SAFETY,\n-            PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-            MACRO_USE_EXTERN_CRATE,\n-            MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-            parser::QUESTION_MARK_MACRO_SEP,\n-            parser::ILL_FORMED_ATTRIBUTE_INPUT,\n-            DEPRECATED_IN_FUTURE,\n-            AMBIGUOUS_ASSOCIATED_ITEMS,\n-            NESTED_IMPL_TRAIT,\n-            DUPLICATE_MATCHER_BINDING_NAME,\n-        )\n-    }\n+declare_lint_pass! {\n+    /// Does nothing as a lint pass, but registers some `Lint`s\n+    /// that are used by other parts of the compiler.\n+    HardwiredLints => [\n+        ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+        EXCEEDING_BITSHIFTS,\n+        UNUSED_IMPORTS,\n+        UNUSED_EXTERN_CRATES,\n+        UNUSED_QUALIFICATIONS,\n+        UNKNOWN_LINTS,\n+        UNUSED_VARIABLES,\n+        UNUSED_ASSIGNMENTS,\n+        DEAD_CODE,\n+        UNREACHABLE_CODE,\n+        UNREACHABLE_PATTERNS,\n+        UNUSED_MACROS,\n+        WARNINGS,\n+        UNUSED_FEATURES,\n+        STABLE_FEATURES,\n+        UNKNOWN_CRATE_TYPES,\n+        TRIVIAL_CASTS,\n+        TRIVIAL_NUMERIC_CASTS,\n+        PRIVATE_IN_PUBLIC,\n+        EXPORTED_PRIVATE_DEPENDENCIES,\n+        PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+        INVALID_TYPE_PARAM_DEFAULT,\n+        CONST_ERR,\n+        RENAMED_AND_REMOVED_LINTS,\n+        SAFE_EXTERN_STATICS,\n+        SAFE_PACKED_BORROWS,\n+        PATTERNS_IN_FNS_WITHOUT_BODY,\n+        LEGACY_DIRECTORY_OWNERSHIP,\n+        LEGACY_CONSTRUCTOR_VISIBILITY,\n+        MISSING_FRAGMENT_SPECIFIER,\n+        PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+        LATE_BOUND_LIFETIME_ARGUMENTS,\n+        INCOHERENT_FUNDAMENTAL_IMPLS,\n+        ORDER_DEPENDENT_TRAIT_OBJECTS,\n+        DEPRECATED,\n+        UNUSED_UNSAFE,\n+        UNUSED_MUT,\n+        UNCONDITIONAL_RECURSION,\n+        SINGLE_USE_LIFETIMES,\n+        UNUSED_LIFETIMES,\n+        UNUSED_LABELS,\n+        TYVAR_BEHIND_RAW_POINTER,\n+        ELIDED_LIFETIMES_IN_PATHS,\n+        BARE_TRAIT_OBJECTS,\n+        ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n+        UNSTABLE_NAME_COLLISIONS,\n+        IRREFUTABLE_LET_PATTERNS,\n+        DUPLICATE_MACRO_EXPORTS,\n+        INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+        MISSING_DOC_CODE_EXAMPLES,\n+        PRIVATE_DOC_TESTS,\n+        WHERE_CLAUSES_OBJECT_SAFETY,\n+        PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n+        MACRO_USE_EXTERN_CRATE,\n+        MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n+        parser::QUESTION_MARK_MACRO_SEP,\n+        parser::ILL_FORMED_ATTRIBUTE_INPUT,\n+        DEPRECATED_IN_FUTURE,\n+        AMBIGUOUS_ASSOCIATED_ITEMS,\n+        NESTED_IMPL_TRAIT,\n+        DUPLICATE_MATCHER_BINDING_NAME,\n+    ]\n }\n \n // this could be a closure, but then implementing derive traits"}, {"sha": "e1807026e6d2e5a245b625c998d31ff1ae784643", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -181,6 +181,27 @@ pub trait LintPass {\n     fn get_lints(&self) -> LintArray;\n }\n \n+/// Implements `LintPass for $name` with the given list of `Lint` statics.\n+#[macro_export]\n+macro_rules! impl_lint_pass {\n+    ($name:ident => [$($lint:expr),* $(,)?]) => {\n+        impl LintPass for $name {\n+            fn name(&self) -> &'static str { stringify!($name) }\n+            fn get_lints(&self) -> LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+    };\n+}\n+\n+/// Declares a type named `$name` which implements `LintPass`.\n+/// To the right of `=>` a comma separated list of `Lint` statics is given.\n+#[macro_export]\n+macro_rules! declare_lint_pass {\n+    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n+        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n+        $crate::impl_lint_pass!($name => [$($lint),*]);\n+    };\n+}\n+\n #[macro_export]\n macro_rules! late_lint_methods {\n     ($macro:path, $args:tt, [$hir:tt]) => ("}, {"sha": "cf9795941bdc7101da8dde91caf9826fb5a94483", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 81, "deletions": 314, "changes": 395, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -63,18 +63,7 @@ declare_lint! {\n     \"suggest using `loop { }` instead of `while true { }`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct WhileTrue;\n-\n-impl LintPass for WhileTrue {\n-    fn name(&self) -> &'static str {\n-        \"WhileTrue\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(WHILE_TRUE)\n-    }\n-}\n+declare_lint_pass!(WhileTrue => [WHILE_TRUE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n@@ -105,8 +94,7 @@ declare_lint! {\n     \"use of owned (Box type) heap memory\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct BoxPointers;\n+declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n \n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &LateContext<'_, '_>, span: Span, ty: Ty<'_>) {\n@@ -119,16 +107,6 @@ impl BoxPointers {\n     }\n }\n \n-impl LintPass for BoxPointers {\n-    fn name(&self) -> &'static str {\n-        \"BoxPointers\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_POINTERS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n@@ -169,18 +147,7 @@ declare_lint! {\n     \"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonShorthandFieldPatterns;\n-\n-impl LintPass for NonShorthandFieldPatterns {\n-    fn name(&self) -> &'static str {\n-        \"NonShorthandFieldPatterns\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_SHORTHAND_FIELD_PATTERNS)\n-    }\n-}\n+declare_lint_pass!(NonShorthandFieldPatterns => [NON_SHORTHAND_FIELD_PATTERNS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n     fn check_pat(&mut self, cx: &LateContext<'_, '_>, pat: &hir::Pat) {\n@@ -226,18 +193,7 @@ declare_lint! {\n     \"usage of `unsafe` code\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnsafeCode;\n-\n-impl LintPass for UnsafeCode {\n-    fn name(&self) -> &'static str {\n-        \"UnsafeCode\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSAFE_CODE)\n-    }\n-}\n+declare_lint_pass!(UnsafeCode => [UNSAFE_CODE]);\n \n impl UnsafeCode {\n     fn report_unsafe(&self, cx: &EarlyContext<'_>, span: Span, desc: &'static str) {\n@@ -327,6 +283,8 @@ pub struct MissingDoc {\n     private_traits: FxHashSet<hir::HirId>,\n }\n \n+impl_lint_pass!(MissingDoc => [MISSING_DOCS]);\n+\n fn has_doc(attr: &ast::Attribute) -> bool {\n     if !attr.check_name(\"doc\") {\n         return false;\n@@ -394,16 +352,6 @@ impl MissingDoc {\n     }\n }\n \n-impl LintPass for MissingDoc {\n-    fn name(&self) -> &'static str {\n-        \"MissingDoc\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_DOCS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     fn enter_lint_attrs(&mut self, _: &LateContext<'_, '_>, attrs: &[ast::Attribute]) {\n         let doc_hidden = self.doc_hidden() ||\n@@ -541,18 +489,7 @@ declare_lint! {\n     \"detects potentially-forgotten implementations of `Copy`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct MissingCopyImplementations;\n-\n-impl LintPass for MissingCopyImplementations {\n-    fn name(&self) -> &'static str {\n-        \"MissingCopyImplementations\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_COPY_IMPLEMENTATIONS)\n-    }\n-}\n+declare_lint_pass!(MissingCopyImplementations => [MISSING_COPY_IMPLEMENTATIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n@@ -609,22 +546,14 @@ pub struct MissingDebugImplementations {\n     impling_types: Option<HirIdSet>,\n }\n \n+impl_lint_pass!(MissingDebugImplementations => [MISSING_DEBUG_IMPLEMENTATIONS]);\n+\n impl MissingDebugImplementations {\n     pub fn new() -> MissingDebugImplementations {\n         MissingDebugImplementations { impling_types: None }\n     }\n }\n \n-impl LintPass for MissingDebugImplementations {\n-    fn name(&self) -> &'static str {\n-        \"MissingDebugImplementations\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_DEBUG_IMPLEMENTATIONS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         if !cx.access_levels.is_reachable(item.hir_id) {\n@@ -672,19 +601,10 @@ declare_lint! {\n     \"detects anonymous parameters\"\n }\n \n-/// Checks for use of anonymous parameters (RFC 1685).\n-#[derive(Copy, Clone)]\n-pub struct AnonymousParameters;\n-\n-impl LintPass for AnonymousParameters {\n-    fn name(&self) -> &'static str {\n-        \"AnonymousParameters\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ANONYMOUS_PARAMETERS)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Checks for use of anonymous parameters (RFC 1685).\n+    AnonymousParameters => [ANONYMOUS_PARAMETERS]\n+);\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::TraitItem) {\n@@ -736,6 +656,8 @@ pub struct DeprecatedAttr {\n     depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeTemplate, AttributeGate)>,\n }\n \n+impl_lint_pass!(DeprecatedAttr => []);\n+\n impl DeprecatedAttr {\n     pub fn new() -> DeprecatedAttr {\n         DeprecatedAttr {\n@@ -744,16 +666,6 @@ impl DeprecatedAttr {\n     }\n }\n \n-impl LintPass for DeprecatedAttr {\n-    fn name(&self) -> &'static str {\n-        \"DeprecatedAttr\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!()\n-    }\n-}\n-\n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         let name = attr.name_or_empty();\n@@ -786,18 +698,7 @@ declare_lint! {\n     \"detects doc comments that aren't used by rustdoc\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedDocComment;\n-\n-impl LintPass for UnusedDocComment {\n-    fn name(&self) -> &'static str {\n-        \"UnusedDocComment\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![UNUSED_DOC_COMMENTS]\n-    }\n-}\n+declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);\n \n impl UnusedDocComment {\n     fn warn_if_doc(\n@@ -884,18 +785,7 @@ declare_lint! {\n     \"compiler plugin used as ordinary library in non-plugin crate\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct PluginAsLibrary;\n-\n-impl LintPass for PluginAsLibrary {\n-    fn name(&self) -> &'static str {\n-        \"PluginAsLibrary\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![PLUGIN_AS_LIBRARY]\n-    }\n-}\n+declare_lint_pass!(PluginAsLibrary => [PLUGIN_AS_LIBRARY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n@@ -940,19 +830,7 @@ declare_lint! {\n     \"generic items must be mangled\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct InvalidNoMangleItems;\n-\n-impl LintPass for InvalidNoMangleItems {\n-    fn name(&self) -> &'static str {\n-        \"InvalidNoMangleItems\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NO_MANGLE_CONST_ITEMS,\n-                    NO_MANGLE_GENERIC_ITEMS)\n-    }\n-}\n+declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GENERIC_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n@@ -1011,24 +889,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     }\n }\n \n-#[derive(Clone, Copy)]\n-pub struct MutableTransmutes;\n-\n declare_lint! {\n     MUTABLE_TRANSMUTES,\n     Deny,\n     \"mutating transmuted &mut T from &T may cause undefined behavior\"\n }\n \n-impl LintPass for MutableTransmutes {\n-    fn name(&self) -> &'static str {\n-        \"MutableTransmutes\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MUTABLE_TRANSMUTES)\n-    }\n-}\n+declare_lint_pass!(MutableTransmutes => [MUTABLE_TRANSMUTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &hir::Expr) {\n@@ -1074,25 +941,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n     }\n }\n \n-/// Forbids using the `#[feature(...)]` attribute\n-#[derive(Copy, Clone)]\n-pub struct UnstableFeatures;\n-\n declare_lint! {\n     UNSTABLE_FEATURES,\n     Allow,\n     \"enabling unstable features (deprecated. do not use)\"\n }\n \n-impl LintPass for UnstableFeatures {\n-    fn name(&self) -> &'static str {\n-        \"UnstableFeatures\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSTABLE_FEATURES)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Forbids using the `#[feature(...)]` attribute\n+    UnstableFeatures => [UNSTABLE_FEATURES]\n+);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnstableFeatures {\n     fn check_attribute(&mut self, ctx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n@@ -1106,24 +964,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnstableFeatures {\n     }\n }\n \n-/// Lint for unions that contain fields with possibly non-trivial destructors.\n-pub struct UnionsWithDropFields;\n-\n declare_lint! {\n     UNIONS_WITH_DROP_FIELDS,\n     Warn,\n     \"use of unions that contain fields with possibly non-trivial drop code\"\n }\n \n-impl LintPass for UnionsWithDropFields {\n-    fn name(&self) -> &'static str {\n-        \"UnionsWithDropFields\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNIONS_WITH_DROP_FIELDS)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Lint for unions that contain fields with possibly non-trivial destructors.\n+    UnionsWithDropFields => [UNIONS_WITH_DROP_FIELDS]\n+);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext<'_, '_>, item: &hir::Item) {\n@@ -1143,25 +993,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     }\n }\n \n-/// Lint for items marked `pub` that aren't reachable from other crates.\n-#[derive(Copy, Clone)]\n-pub struct UnreachablePub;\n-\n declare_lint! {\n     pub UNREACHABLE_PUB,\n     Allow,\n     \"`pub` items not reachable from crate root\"\n }\n \n-impl LintPass for UnreachablePub {\n-    fn name(&self) -> &'static str {\n-        \"UnreachablePub\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNREACHABLE_PUB)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Lint for items marked `pub` that aren't reachable from other crates.\n+    UnreachablePub => [UNREACHABLE_PUB]\n+);\n \n impl UnreachablePub {\n     fn perform_lint(&self, cx: &LateContext<'_, '_>, what: &str, id: hir::HirId,\n@@ -1197,7 +1038,6 @@ impl UnreachablePub {\n     }\n }\n \n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         self.perform_lint(cx, \"item\", item.hir_id, &item.vis, item.span, true);\n@@ -1217,27 +1057,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     }\n }\n \n-/// Lint for trait and lifetime bounds in type aliases being mostly ignored.\n-/// They are relevant when using associated types, but otherwise neither checked\n-/// at definition site nor enforced at use site.\n-\n-pub struct TypeAliasBounds;\n-\n declare_lint! {\n     TYPE_ALIAS_BOUNDS,\n     Warn,\n     \"bounds in type aliases are not enforced\"\n }\n \n-impl LintPass for TypeAliasBounds {\n-    fn name(&self) -> &'static str {\n-        \"TypeAliasBounds\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TYPE_ALIAS_BOUNDS)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Lint for trait and lifetime bounds in type aliases being mostly ignored.\n+    /// They are relevant when using associated types, but otherwise neither checked\n+    /// at definition site nor enforced at use site.\n+    TypeAliasBounds => [TYPE_ALIAS_BOUNDS]\n+);\n \n impl TypeAliasBounds {\n     fn is_type_variable_assoc(qpath: &hir::QPath) -> bool {\n@@ -1331,21 +1162,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n     }\n }\n \n-/// Lint constants that are erroneous.\n-/// Without this lint, we might not get any diagnostic if the constant is\n-/// unused within this crate, even though downstream crates can't use it\n-/// without producing an error.\n-pub struct UnusedBrokenConst;\n-\n-impl LintPass for UnusedBrokenConst {\n-    fn name(&self) -> &'static str {\n-        \"UnusedBrokenConst\"\n-    }\n+declare_lint_pass!(\n+    /// Lint constants that are erroneous.\n+    /// Without this lint, we might not get any diagnostic if the constant is\n+    /// unused within this crate, even though downstream crates can't use it\n+    /// without producing an error.\n+    UnusedBrokenConst => []\n+);\n \n-    fn get_lints(&self) -> LintArray {\n-        lint_array!()\n-    }\n-}\n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n     let is_static = cx.tcx.is_static(def_id).is_some();\n@@ -1378,25 +1202,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n     }\n }\n \n-/// Lint for trait and lifetime bounds that don't depend on type parameters\n-/// which either do nothing, or stop the item from being used.\n-pub struct TrivialConstraints;\n-\n declare_lint! {\n     TRIVIAL_BOUNDS,\n     Warn,\n     \"these bounds don't depend on an type parameters\"\n }\n \n-impl LintPass for TrivialConstraints {\n-    fn name(&self) -> &'static str {\n-        \"TrivialConstraints\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TRIVIAL_BOUNDS)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Lint for trait and lifetime bounds that don't depend on type parameters\n+    /// which either do nothing, or stop the item from being used.\n+    TrivialConstraints => [TRIVIAL_BOUNDS]\n+);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n     fn check_item(\n@@ -1440,59 +1256,38 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n     }\n }\n \n-\n-/// Does nothing as a lint pass, but registers some `Lint`s\n-/// which are used by other parts of the compiler.\n-#[derive(Copy, Clone)]\n-pub struct SoftLints;\n-\n-impl LintPass for SoftLints {\n-    fn name(&self) -> &'static str {\n-        \"SoftLints\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            WHILE_TRUE,\n-            BOX_POINTERS,\n-            NON_SHORTHAND_FIELD_PATTERNS,\n-            UNSAFE_CODE,\n-            MISSING_DOCS,\n-            MISSING_COPY_IMPLEMENTATIONS,\n-            MISSING_DEBUG_IMPLEMENTATIONS,\n-            ANONYMOUS_PARAMETERS,\n-            UNUSED_DOC_COMMENTS,\n-            PLUGIN_AS_LIBRARY,\n-            NO_MANGLE_CONST_ITEMS,\n-            NO_MANGLE_GENERIC_ITEMS,\n-            MUTABLE_TRANSMUTES,\n-            UNSTABLE_FEATURES,\n-            UNIONS_WITH_DROP_FIELDS,\n-            UNREACHABLE_PUB,\n-            TYPE_ALIAS_BOUNDS,\n-            TRIVIAL_BOUNDS\n-        )\n-    }\n-}\n+declare_lint_pass!(\n+    /// Does nothing as a lint pass, but registers some `Lint`s\n+    /// which are used by other parts of the compiler.\n+    SoftLints => [\n+        WHILE_TRUE,\n+        BOX_POINTERS,\n+        NON_SHORTHAND_FIELD_PATTERNS,\n+        UNSAFE_CODE,\n+        MISSING_DOCS,\n+        MISSING_COPY_IMPLEMENTATIONS,\n+        MISSING_DEBUG_IMPLEMENTATIONS,\n+        ANONYMOUS_PARAMETERS,\n+        UNUSED_DOC_COMMENTS,\n+        PLUGIN_AS_LIBRARY,\n+        NO_MANGLE_CONST_ITEMS,\n+        NO_MANGLE_GENERIC_ITEMS,\n+        MUTABLE_TRANSMUTES,\n+        UNSTABLE_FEATURES,\n+        UNIONS_WITH_DROP_FIELDS,\n+        UNREACHABLE_PUB,\n+        TYPE_ALIAS_BOUNDS,\n+        TRIVIAL_BOUNDS\n+    ]\n+);\n \n declare_lint! {\n     pub ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n     Allow,\n     \"`...` range patterns are deprecated\"\n }\n \n-\n-pub struct EllipsisInclusiveRangePatterns;\n-\n-impl LintPass for EllipsisInclusiveRangePatterns {\n-    fn name(&self) -> &'static str {\n-        \"EllipsisInclusiveRangePatterns\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS)\n-    }\n-}\n+declare_lint_pass!(EllipsisInclusiveRangePatterns => [ELLIPSIS_INCLUSIVE_RANGE_PATTERNS]);\n \n impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n     fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat, visit_subpats: &mut bool) {\n@@ -1553,6 +1348,8 @@ pub struct UnnameableTestItems {\n     items_nameable: bool,\n }\n \n+impl_lint_pass!(UnnameableTestItems => [UNNAMEABLE_TEST_ITEMS]);\n+\n impl UnnameableTestItems {\n     pub fn new() -> Self {\n         Self {\n@@ -1562,16 +1359,6 @@ impl UnnameableTestItems {\n     }\n }\n \n-impl LintPass for UnnameableTestItems {\n-    fn name(&self) -> &'static str {\n-        \"UnnameableTestItems\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNAMEABLE_TEST_ITEMS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if self.items_nameable {\n@@ -1605,19 +1392,10 @@ declare_lint! {\n     \"detects edition keywords being used as an identifier\"\n }\n \n-/// Check for uses of edition keywords used as an identifier.\n-#[derive(Copy, Clone)]\n-pub struct KeywordIdents;\n-\n-impl LintPass for KeywordIdents {\n-    fn name(&self) -> &'static str {\n-        \"KeywordIdents\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(KEYWORD_IDENTS)\n-    }\n-}\n+declare_lint_pass!(\n+    /// Check for uses of edition keywords used as an identifier.\n+    KeywordIdents => [KEYWORD_IDENTS]\n+);\n \n struct UnderMacro(bool);\n \n@@ -1740,18 +1518,7 @@ impl EarlyLintPass for KeywordIdents {\n     }\n }\n \n-\n-pub struct ExplicitOutlivesRequirements;\n-\n-impl LintPass for ExplicitOutlivesRequirements {\n-    fn name(&self) -> &'static str {\n-        \"ExplicitOutlivesRequirements\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![EXPLICIT_OUTLIVES_REQUIREMENTS]\n-    }\n-}\n+declare_lint_pass!(ExplicitOutlivesRequirements => [EXPLICIT_OUTLIVES_REQUIREMENTS]);\n \n impl ExplicitOutlivesRequirements {\n     fn collect_outlives_bound_spans("}, {"sha": "1d8979f7d1c1bdc3fe494662ab9c4cf58bf056e3", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -38,6 +38,8 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n+declare_lint_pass!(NonCamelCaseTypes => [NON_CAMEL_CASE_TYPES]);\n+\n fn char_has_case(c: char) -> bool {\n     c.is_lowercase() || c.is_uppercase()\n }\n@@ -105,9 +107,6 @@ fn to_camel_case(s: &str) -> String {\n         .0\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonCamelCaseTypes;\n-\n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n         let name = &ident.name.as_str();\n@@ -126,16 +125,6 @@ impl NonCamelCaseTypes {\n     }\n }\n \n-impl LintPass for NonCamelCaseTypes {\n-    fn name(&self) -> &'static str {\n-        \"NonCamelCaseTypes\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_CAMEL_CASE_TYPES)\n-    }\n-}\n-\n impl EarlyLintPass for NonCamelCaseTypes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         let has_repr_c = it.attrs\n@@ -173,8 +162,7 @@ declare_lint! {\n     \"variables, methods, functions, lifetime parameters and modules should have snake case names\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonSnakeCase;\n+declare_lint_pass!(NonSnakeCase => [NON_SNAKE_CASE]);\n \n impl NonSnakeCase {\n     fn to_snake_case(mut str: &str) -> String {\n@@ -256,16 +244,6 @@ impl NonSnakeCase {\n     }\n }\n \n-impl LintPass for NonSnakeCase {\n-    fn name(&self) -> &'static str {\n-        \"NonSnakeCase\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_SNAKE_CASE)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod, _: Span, id: hir::HirId) {\n         if id != hir::CRATE_HIR_ID {\n@@ -387,8 +365,7 @@ declare_lint! {\n     \"static constants should have uppercase identifiers\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonUpperCaseGlobals;\n+declare_lint_pass!(NonUpperCaseGlobals => [NON_UPPER_CASE_GLOBALS]);\n \n impl NonUpperCaseGlobals {\n     fn check_upper_case(cx: &LateContext<'_, '_>, sort: &str, ident: &Ident) {\n@@ -410,16 +387,6 @@ impl NonUpperCaseGlobals {\n     }\n }\n \n-impl LintPass for NonUpperCaseGlobals {\n-    fn name(&self) -> &'static str {\n-        \"NonUpperCaseGlobals\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_UPPER_CASE_GLOBALS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {"}, {"sha": "77c948023bbd5ff8c496f4b8ed74839f08a32020", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -49,23 +49,14 @@ pub struct TypeLimits {\n     negated_expr_id: hir::HirId,\n }\n \n+impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS]);\n+\n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n         TypeLimits { negated_expr_id: hir::DUMMY_HIR_ID }\n     }\n }\n \n-impl LintPass for TypeLimits {\n-    fn name(&self) -> &'static str {\n-        \"TypeLimits\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_COMPARISONS,\n-                    OVERFLOWING_LITERALS)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         match e.node {\n@@ -424,6 +415,8 @@ declare_lint! {\n     \"proper use of libc types in foreign modules\"\n }\n \n+declare_lint_pass!(ImproperCTypes => [IMPROPER_CTYPES]);\n+\n struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n@@ -793,19 +786,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ImproperCTypes;\n-\n-impl LintPass for ImproperCTypes {\n-    fn name(&self) -> &'static str {\n-        \"ImproperCTypes\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IMPROPER_CTYPES)\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n@@ -824,17 +804,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     }\n }\n \n-pub struct VariantSizeDifferences;\n-\n-impl LintPass for VariantSizeDifferences {\n-    fn name(&self) -> &'static str {\n-        \"VariantSizeDifferences\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(VARIANT_SIZE_DIFFERENCES)\n-    }\n-}\n+declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {"}, {"sha": "d41d97f58bcbe0aea788c1acf62ad2110439ee57", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 6, "deletions": 72, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -32,18 +32,7 @@ declare_lint! {\n     \"unused result of an expression in a statement\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedResults;\n-\n-impl LintPass for UnusedResults {\n-    fn name(&self) -> &'static str {\n-        \"UnusedResults\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_MUST_USE, UNUSED_RESULTS)\n-    }\n-}\n+declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n@@ -203,18 +192,7 @@ declare_lint! {\n     \"path statements with no effect\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct PathStatements;\n-\n-impl LintPass for PathStatements {\n-    fn name(&self) -> &'static str {\n-        \"PathStatements\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PATH_STATEMENTS)\n-    }\n-}\n+declare_lint_pass!(PathStatements => [PATH_STATEMENTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n@@ -232,18 +210,7 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedAttributes;\n-\n-impl LintPass for UnusedAttributes {\n-    fn name(&self) -> &'static str {\n-        \"UnusedAttributes\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_ATTRIBUTES)\n-    }\n-}\n+declare_lint_pass!(UnusedAttributes => [UNUSED_ATTRIBUTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n@@ -305,8 +272,7 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedParens;\n+declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedParens {\n     fn check_unused_parens_expr(&self,\n@@ -383,16 +349,6 @@ impl UnusedParens {\n     }\n }\n \n-impl LintPass for UnusedParens {\n-    fn name(&self) -> &'static str {\n-        \"UnusedParens\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_PARENS)\n-    }\n-}\n-\n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n@@ -465,8 +421,7 @@ declare_lint! {\n     \"unnecessary braces around an imported item\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedImportBraces;\n+declare_lint_pass!(UnusedImportBraces => [UNUSED_IMPORT_BRACES]);\n \n impl UnusedImportBraces {\n     fn check_use_tree(&self, cx: &EarlyContext<'_>, use_tree: &ast::UseTree, item: &ast::Item) {\n@@ -505,16 +460,6 @@ impl UnusedImportBraces {\n     }\n }\n \n-impl LintPass for UnusedImportBraces {\n-    fn name(&self) -> &'static str {\n-        \"UnusedImportBraces\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_IMPORT_BRACES)\n-    }\n-}\n-\n impl EarlyLintPass for UnusedImportBraces {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         if let ast::ItemKind::Use(ref use_tree) = item.node {\n@@ -529,18 +474,7 @@ declare_lint! {\n     \"detects unnecessary allocations that can be eliminated\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnusedAllocation;\n-\n-impl LintPass for UnusedAllocation {\n-    fn name(&self) -> &'static str {\n-        \"UnusedAllocation\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_ALLOCATION)\n-    }\n-}\n+declare_lint_pass!(UnusedAllocation => [UNUSED_ALLOCATION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAllocation {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {"}, {"sha": "76d0906f97c9a85e9179ff5e0b493b7dfc4104d5", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -26,21 +26,14 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_attribute(\"whitelisted_attr\".to_string(), Whitelisted);\n }\n \n-declare_lint!(MISSING_WHITELISTED_ATTR, Deny,\n-              \"Checks for missing `whitelisted_attr` attribute\");\n-\n-struct MissingWhitelistedAttrPass;\n-\n-impl LintPass for MissingWhitelistedAttrPass {\n-    fn name(&self) -> &'static str {\n-        \"MissingWhitelistedAttrPass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_WHITELISTED_ATTR)\n-    }\n+declare_lint! {\n+    MISSING_WHITELISTED_ATTR,\n+    Deny,\n+    \"Checks for missing `whitelisted_attr` attribute\"\n }\n \n+declare_lint_pass!(MissingWhitelistedAttrPass => [MISSING_WHITELISTED_ATTR]);\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n     fn check_fn(&mut self,\n                 cx: &LateContext<'a, 'tcx>,"}, {"sha": "e8f1d2eedf559cc44979d2e4f8ab356b6d2b4fe3", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -12,20 +12,14 @@ use rustc_plugin::Registry;\n use rustc::hir;\n use syntax::attr;\n \n-declare_lint!(CRATE_NOT_OKAY, Warn, \"crate not marked with #![crate_okay]\");\n-\n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn name(&self) -> &'static str {\n-        \"Pass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CRATE_NOT_OKAY)\n-    }\n+declare_lint! {\n+    CRATE_NOT_OKAY,\n+    Warn,\n+    \"crate not marked with #![crate_okay]\"\n }\n \n+declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n         if !attr::contains_name(&krate.attrs, \"crate_okay\") {"}, {"sha": "941fe25b14c70172e094bdf2acde7fe7a1aeb01f", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -16,17 +16,7 @@ declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n declare_lint!(PLEASE_LINT, Warn, \"Warn about items named 'pleaselintme'\");\n \n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn name(&self) -> &'static str {\n-        \"Pass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT, PLEASE_LINT)\n-    }\n-}\n+declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {"}, {"sha": "1d204e7bfcffabaf87f413df39960095b286f096", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -16,17 +16,7 @@ use rustc_plugin::Registry;\n use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn name(&self) -> &'static str {\n-        \"Pass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-}\n+declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {"}, {"sha": "182d2899da1853ee4d51c4e2e1ca7cb85d876399", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba110c805073a5733f79485428164d4b9218807/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=fba110c805073a5733f79485428164d4b9218807", "patch": "@@ -19,17 +19,7 @@ declare_tool_lint!(\n     Warn, \"Warn about other stuff\"\n );\n \n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn name(&self) -> &'static str {\n-        \"Pass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT, TEST_GROUP)\n-    }\n-}\n+declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP]);\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {"}]}