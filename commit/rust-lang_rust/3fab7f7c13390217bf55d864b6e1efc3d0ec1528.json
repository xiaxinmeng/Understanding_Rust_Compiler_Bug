{"sha": "3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "node_id": "C_kwDOAAsO6NoAKDNmYWI3ZjdjMTMzOTAyMTdiZjU1ZDg2NGI2ZTFlZmMzZDBlYzE1Mjg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-30T09:49:06Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-10T07:21:21Z"}, "message": "review + some small stuff", "tree": {"sha": "4272c1205e67132bb3e9f037109b907308dbc43b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4272c1205e67132bb3e9f037109b907308dbc43b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "html_url": "https://github.com/rust-lang/rust/commit/3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2186847f28b240b6f06515402789e3d8fc9205bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2186847f28b240b6f06515402789e3d8fc9205bd", "html_url": "https://github.com/rust-lang/rust/commit/2186847f28b240b6f06515402789e3d8fc9205bd"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "7602bea5a248907a4d3ed8cef97fccc3d354d032", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -56,9 +56,19 @@ pub enum Certainty {\n impl Certainty {\n     pub const AMBIGUOUS: Certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n \n-    /// When proving multiple goals using **AND**, e.g. nested obligations for an impl,\n-    /// use this function to unify the certainty of these goals\n-    pub fn unify_and(self, other: Certainty) -> Certainty {\n+    /// Use this function to merge the certainty of multiple nested subgoals.\n+    ///\n+    /// Given an impl like `impl<T: Foo + Bar> Baz for T {}`, we have 2 nested\n+    /// subgoals whenever we use the impl as a candidate: `T: Foo` and `T: Bar`.\n+    /// If evaluating `T: Foo` results in ambiguity and `T: Bar` results in\n+    /// success, we merge these two responses. This results in ambiguity.\n+    ///\n+    /// If we unify ambiguity with overflow, we return overflow. This doesn't matter\n+    /// inside of the solver as we distinguish ambiguity from overflow. It does\n+    /// however matter for diagnostics. If `T: Foo` resulted in overflow and `T: Bar`\n+    /// in ambiguity without changing the inference state, we still want to tell the\n+    /// user that `T: Baz` results in overflow.\n+    pub fn unify_with(self, other: Certainty) -> Certainty {\n         match (self, other) {\n             (Certainty::Yes, Certainty::Yes) => Certainty::Yes,\n             (Certainty::Yes, Certainty::Maybe(_)) => other,"}, {"sha": "cbec39d82856e2862d6226c8be03e48dd5c970ea", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -11,7 +11,7 @@ use crate::solve::EvalCtxt;\n //\n // For types with an \"existential\" binder, i.e. generator witnesses, we also\n // instantiate the binder with placeholders eagerly.\n-pub(crate) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n+pub(in crate::solve) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n@@ -87,7 +87,7 @@ pub(crate) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     }\n }\n \n-pub(crate) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n+pub(in crate::solve) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> ty::Binder<'tcx, Ty<'tcx>> {\n@@ -108,7 +108,7 @@ pub(crate) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     ty::Binder::bind_with_vars(ty, bound_vars)\n }\n \n-pub(crate) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n+pub(in crate::solve) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n@@ -158,7 +158,7 @@ pub(crate) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     }\n }\n \n-pub(crate) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n+pub(in crate::solve) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n@@ -224,7 +224,7 @@ pub(crate) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n }\n \n // Returns a binder of the tupled inputs types and output type from a builtin callable type.\n-pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n+pub(in crate::solve) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     self_ty: Ty<'tcx>,\n     goal_kind: ty::ClosureKind,\n@@ -337,7 +337,13 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n /// additional step of eagerly folding the associated types in the where\n /// clauses of the impl. In this example, that means replacing\n /// `<Self as Foo>::Bar` with `Ty` in the first impl.\n-pub(crate) fn predicates_for_object_candidate<'tcx>(\n+///\n+// FIXME: This is only necessary as `<Self as Trait>::Assoc: ItemBound`\n+// bounds in impls are trivially proven using the item bound candidates.\n+// This is unsound in general and once that is fixed, we don't need to\n+// normalize eagerly here. See https://github.com/lcnr/solver-woes/issues/9\n+// for more details.\n+pub(in crate::solve) fn predicates_for_object_candidate<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,"}, {"sha": "28aca76cceb6696633ba7a725a1d4be9655c4c15", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                             // deal with `has_changed` in the next iteration.\n                             new_goals.normalizes_to_hack_goal =\n                                 Some(this.resolve_vars_if_possible(goal));\n-                            has_changed = has_changed.map_err(|c| c.unify_and(certainty));\n+                            has_changed = has_changed.map_err(|c| c.unify_with(certainty));\n                         }\n                     }\n                 }\n@@ -378,7 +378,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                         Certainty::Yes => {}\n                         Certainty::Maybe(_) => {\n                             new_goals.goals.push(goal);\n-                            has_changed = has_changed.map_err(|c| c.unify_and(certainty));\n+                            has_changed = has_changed.map_err(|c| c.unify_with(certainty));\n                         }\n                     }\n                 }"}, {"sha": "861fa0a305ac0184c9beeeab91fa53d58f1e4a85", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n         let goals_certainty = self.try_evaluate_added_goals()?;\n-        let certainty = certainty.unify_and(goals_certainty);\n+        let certainty = certainty.unify_with(goals_certainty);\n \n         let external_constraints = self.compute_external_query_constraints()?;\n "}, {"sha": "19bcbd461447d75c915abbae9b7f8ada593cee9a", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             return Err(NoSolution);\n         }\n         let certainty = responses.iter().fold(Certainty::AMBIGUOUS, |certainty, response| {\n-            certainty.unify_and(response.value.certainty)\n+            certainty.unify_with(response.value.certainty)\n         });\n \n         let response = self.evaluate_added_goals_and_make_canonical_response(certainty);"}, {"sha": "bcb201bf0c3796bb0a6c9ac3039ae436b86befcf", "filename": "tests/ui/higher-rank-trait-bounds/issue-95230.new.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -0,0 +1,18 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-95230.rs:9:13\n+   |\n+LL |     for<'a> &'a mut Self:;\n+   |             ^^^^^^^^^^^^ cannot infer type for mutable reference `&'a mut Bar`\n+   |\n+note: required by a bound in `Bar`\n+  --> $DIR/issue-95230.rs:9:13\n+   |\n+LL | pub struct Bar\n+   |            --- required by a bound in this struct\n+LL | where\n+LL |     for<'a> &'a mut Self:;\n+   |             ^^^^^^^^^^^^ required by this bound in `Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "769b6a9253769a44edf9b1fdc8aa04d3feac63fe", "filename": "tests/ui/higher-rank-trait-bounds/issue-95230.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fab7f7c13390217bf55d864b6e1efc3d0ec1528/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs?ref=3fab7f7c13390217bf55d864b6e1efc3d0ec1528", "patch": "@@ -1,4 +1,8 @@\n-// check-pass\n+// revisions: old new\n+//[new] compile-flags: -Ztrait-solver=next\n+//[old] check-pass\n+//[new] known-bug: #109764\n+\n \n pub struct Bar\n where"}]}