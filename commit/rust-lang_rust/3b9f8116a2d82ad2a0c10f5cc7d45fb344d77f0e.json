{"sha": "3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOWY4MTE2YTJkODJhZDJhMGMxMGY1Y2M3ZDQ1ZmIzNDRkNzdmMGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-24T12:08:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-24T12:08:04Z"}, "message": "get rid of NoMirFor error variant", "tree": {"sha": "f1eae224e2bda31a53f3a5ea7ae9db5c10d2b609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1eae224e2bda31a53f3a5ea7ae9db5c10d2b609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "html_url": "https://github.com/rust-lang/rust/commit/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c66d11a34047be1eb6c50703f8ba6689a15e716", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c66d11a34047be1eb6c50703f8ba6689a15e716", "html_url": "https://github.com/rust-lang/rust/commit/1c66d11a34047be1eb6c50703f8ba6689a15e716"}], "stats": {"total": 22, "additions": 4, "deletions": 18}, "files": [{"sha": "dad23d6255afb02bea6df68af3f8362837924634", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "patch": "@@ -402,8 +402,6 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-    /// Could not find MIR for a function.\n-    NoMirFor(DefId),\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n     //\n@@ -421,7 +419,6 @@ impl fmt::Display for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n-            NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }"}, {"sha": "daaf68c1d2bd5bb4c11d1d556e5bfb70be370e75", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "patch": "@@ -212,7 +212,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else {\n-                    throw_unsup!(NoMirFor(def.did))\n+                    let path = ecx.tcx.def_path_str(def.did);\n+                    Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))\n+                        .into())\n                 }\n             }\n             _ => Ok(ecx.tcx.instance_mir(instance)),\n@@ -247,20 +249,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n         }\n         // This is a const fn. Call it.\n-        Ok(Some(match ecx.load_mir(instance.def, None) {\n-            Ok(body) => body,\n-            Err(err) => {\n-                if let err_unsup!(NoMirFor(did)) = err.kind() {\n-                    let path = ecx.tcx.def_path_str(*did);\n-                    return Err(ConstEvalErrKind::NeedsRfc(format!(\n-                        \"calling extern function `{}`\",\n-                        path\n-                    ))\n-                    .into());\n-                }\n-                return Err(err);\n-            }\n-        }))\n+        Ok(Some(ecx.load_mir(instance.def, None)?))\n     }\n \n     fn call_intrinsic("}]}