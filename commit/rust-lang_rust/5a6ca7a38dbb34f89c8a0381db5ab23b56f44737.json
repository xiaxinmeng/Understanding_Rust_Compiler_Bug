{"sha": "5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNmNhN2EzOGRiYjM0Zjg5YzhhMDM4MWRiNWFiMjNiNTZmNDQ3Mzc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-20T18:07:40Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-22T02:17:04Z"}, "message": "save-analysis: add `Signature` info to structs", "tree": {"sha": "4f4c3a33655d607f58af5248736d5cb380044853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f4c3a33655d607f58af5248736d5cb380044853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "html_url": "https://github.com/rust-lang/rust/commit/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "html_url": "https://github.com/rust-lang/rust/commit/c217ab6c8dc1a305304b00a414be5f39ea6a2c81"}], "stats": {"total": 145, "additions": 139, "deletions": 6}, "files": [{"sha": "42fdb6a4dd750777eb257fa8b0eef93cb04028cf", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -290,6 +290,7 @@ pub struct StructData {\n     pub fields: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -405,3 +406,28 @@ pub struct VariableRefData {\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n+\n+\n+/// Encodes information about the signature of a definition. This should have\n+/// enough information to create a nice display about a definition without\n+/// access to the source code.\n+#[derive(Debug, RustcEncodable)]\n+pub struct Signature {\n+    pub span: Span,\n+    pub text: String,\n+    // These identify the main identifier for the defintion as byte offsets into\n+    // `text`. E.g., of `foo` in `pub fn foo(...)`\n+    pub ident_start: usize,\n+    pub ident_end: usize,\n+    pub defs: Vec<SigElement>,\n+    pub refs: Vec<SigElement>,\n+}\n+\n+/// An element of a signature. `start` and `end` are byte offsets into the `text`\n+/// of the parent `Signature`.\n+#[derive(Debug, RustcEncodable)]\n+pub struct SigElement {\n+    pub id: DefId,\n+    pub start: usize,\n+    pub end: usize,\n+}"}, {"sha": "a77527cf8bbc40bf1065a5609ecf31a879b2f2ff", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -619,6 +619,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         };\n \n         if !self.span.filter_generated(sub_span, item.span) {\n+            let mut sig = self.sig_base(item);\n+            sig.ident_start = sig.text.find(&name).expect(\"Name not in struct signature?\");\n+            sig.ident_end = sig.ident_start + name.len();\n             self.dumper.struct_data(StructData {\n                 span: sub_span.expect(\"No span found for struct\"),\n                 id: item.id,\n@@ -630,11 +633,10 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 fields: fields,\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n+                sig: sig,\n             }.lower(self.tcx));\n         }\n \n-\n-        // fields\n         for field in def.fields() {\n             self.process_struct_field_def(field, item.id);\n             self.visit_ty(&field.ty);\n@@ -643,6 +645,18 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         self.process_generic_params(ty_params, item.span, &qualname, item.id);\n     }\n \n+    fn sig_base(&self, item: &ast::Item) -> Signature {\n+        let text = self.span.signature_string_for_span(item.span).expect(\"Couldn't make signature\");\n+        Signature {\n+            span: mk_sp(item.span.lo, item.span.lo + BytePos(text.len() as u32)),\n+            text: text,\n+            ident_start: 0,\n+            ident_end: 0,\n+            defs: vec![],\n+            refs: vec![],\n+        }\n+    }\n+\n     fn process_enum(&mut self,\n                     item: &'l ast::Item,\n                     enum_definition: &'l ast::EnumDef,"}, {"sha": "d35b1bac78f348814c899a61a80e8977d8672f3a", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::NodeId;\n use syntax::codemap::CodeMap;\n use syntax_pos::Span;\n \n-use data::{self, Visibility};\n+use data::{self, Visibility, SigElement};\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n@@ -428,6 +428,7 @@ pub struct StructData {\n     pub fields: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::StructData {\n@@ -445,6 +446,7 @@ impl Lower for data::StructData {\n             fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -700,3 +702,30 @@ impl Lower for data::VariableRefData {\n         }\n     }\n }\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct Signature {\n+    pub span: SpanData,\n+    pub text: String,\n+    // These identify the main identifier for the defintion as byte offsets into\n+    // `text`. E.g., of `foo` in `pub fn foo(...)`\n+    pub ident_start: usize,\n+    pub ident_end: usize,\n+    pub defs: Vec<SigElement>,\n+    pub refs: Vec<SigElement>,\n+}\n+\n+impl Lower for data::Signature {\n+    type Target = Signature;\n+\n+    fn lower(self, tcx: TyCtxt) -> Signature {\n+        Signature {\n+            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            text: self.text,\n+            ident_start: self.ident_start,\n+            ident_end: self.ident_end,\n+            defs: self.defs,\n+            refs: self.refs,\n+        }\n+    }\n+}"}, {"sha": "118d2273c13af0b0ebdf82ec78754ece9bc6611f", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -179,6 +179,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n+    sig: Option<Signature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -221,6 +222,7 @@ impl From<EnumData> for Option<Def> {\n                 children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -240,6 +242,7 @@ impl From<TupleVariantData> for Option<Def> {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         })\n     }\n }\n@@ -256,6 +259,7 @@ impl From<StructVariantData> for Option<Def> {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         })\n     }\n }\n@@ -273,6 +277,7 @@ impl From<StructData> for Option<Def> {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(data.sig),\n         }),\n             _ => None,\n         }\n@@ -292,6 +297,7 @@ impl From<TraitData> for Option<Def> {\n                 parent: None,\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -311,6 +317,7 @@ impl From<FunctionData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -330,6 +337,7 @@ impl From<MethodData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: data.decl_id.map(|id| From::from(id)),\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -348,6 +356,7 @@ impl From<MacroData> for Option<Def> {\n             parent: None,\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         })\n     }\n }\n@@ -365,6 +374,7 @@ impl From<ModData> for Option<Def> {\n                 parent: None,\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -384,6 +394,7 @@ impl From<TypeDefData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: String::new(),\n+                sig: None,\n             }),\n             _ => None,\n         }\n@@ -408,6 +419,7 @@ impl From<VariableData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: None,\n             }),\n             _ => None,\n         }"}, {"sha": "3abb19d53841419fbe00dc523347e5d4193f3a81", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -86,6 +86,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -223,6 +224,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n+    sig: Option<Signature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -264,6 +266,7 @@ impl From<EnumData> for Def {\n             children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -280,6 +283,7 @@ impl From<TupleVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -295,6 +299,7 @@ impl From<StructVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -310,6 +315,7 @@ impl From<StructData> for Def {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(data.sig),\n         }\n     }\n }\n@@ -325,6 +331,7 @@ impl From<TraitData> for Def {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -340,6 +347,7 @@ impl From<FunctionData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -355,6 +363,7 @@ impl From<MethodData> for Def {\n             children: vec![],\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -370,10 +379,10 @@ impl From<MacroData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n-\n impl From<TypeDefData> for Def {\n     fn from(data: TypeDefData) -> Def {\n         Def {\n@@ -386,6 +395,7 @@ impl From<TypeDefData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: String::new(),\n+            sig: None,\n         }\n     }\n }\n@@ -406,6 +416,7 @@ impl From<VariableData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }"}, {"sha": "d09f73755009a8cbbe82eb725e7169a3dfd66697", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "patch": "@@ -18,8 +18,7 @@ use std::path::Path;\n \n use syntax::ast;\n use syntax::parse::lexer::{self, Reader, StringReader};\n-use syntax::parse::token::{self, Token};\n-use syntax::symbol::keywords;\n+use syntax::tokenstream::TokenTree;\n use syntax_pos::*;\n \n #[derive(Clone)]\n@@ -87,6 +86,12 @@ impl<'a> SpanUtils<'a> {\n         lexer::StringReader::new(s.diagnostic(), filemap)\n     }\n \n+    fn span_to_tts(&self, span: Span) -> Vec<TokenTree> {\n+        let srdr = self.retokenise_span(span);\n+        let mut p = Parser::new(&self.sess.parse_sess, Box::new(srdr));\n+        p.parse_all_token_trees().expect(\"Couldn't re-parse span\")\n+    }\n+\n     // Re-parses a path and returns the span for the last identifier in the path\n     pub fn span_for_last_ident(&self, span: Span) -> Option<Span> {\n         let mut result = None;\n@@ -308,6 +313,42 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n+    /// `span` must be the span for an item such as a function or struct. This\n+    /// function returns the program text from the start of the span until the\n+    /// end of the 'signature' part, that is up to, but not including an opening\n+    /// brace or semicolon.\n+    pub fn signature_string_for_span(&self, span: Span) -> Option<String> {\n+        let mut toks = self.span_to_tts(span).into_iter();\n+        let mut prev = toks.next().unwrap();\n+        let first_span = prev.get_span();\n+        let mut angle_count = 0;\n+        for tok in toks {\n+            if let TokenTree::Token(_, ref tok) = prev {\n+                angle_count += match *tok {\n+                    token::Eof => { return None; }\n+                    token::Lt => 1,\n+                    token::Gt => -1,\n+                    token::BinOp(token::Shl) => 2,\n+                    token::BinOp(token::Shr) => -2,\n+                    _ => 0,\n+                };\n+            }\n+            if angle_count > 0 {\n+                prev = tok;\n+                continue;\n+            }\n+            if let TokenTree::Token(_, token::Semi) = tok {\n+                return Some(self.snippet(mk_sp(first_span.lo, prev.get_span().hi)));\n+            } else if let TokenTree::Delimited(_, ref d) = tok {\n+                if d.delim == token::Brace {\n+                    return Some(self.snippet(mk_sp(first_span.lo, prev.get_span().hi)));\n+                }\n+            }\n+            prev = tok;\n+        }\n+        None\n+    }\n+\n     pub fn sub_span_before_token(&self, span: Span, tok: Token) -> Option<Span> {\n         let mut toks = self.retokenise_span(span);\n         let mut prev = toks.real_token();"}]}