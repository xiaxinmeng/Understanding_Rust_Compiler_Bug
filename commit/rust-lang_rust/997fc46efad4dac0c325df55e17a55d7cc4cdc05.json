{"sha": "997fc46efad4dac0c325df55e17a55d7cc4cdc05", "node_id": "C_kwDOAAsO6NoAKDk5N2ZjNDZlZmFkNGRhYzBjMzI1ZGY1NWUxN2E1NWQ3Y2M0Y2RjMDU", "commit": {"author": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-08-06T16:50:21Z"}, "committer": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-09-12T19:19:13Z"}, "message": "Implemented basic enum const eval", "tree": {"sha": "22d596b3f966ea5bdd279076139c5e6ae94400c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d596b3f966ea5bdd279076139c5e6ae94400c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997fc46efad4dac0c325df55e17a55d7cc4cdc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997fc46efad4dac0c325df55e17a55d7cc4cdc05", "html_url": "https://github.com/rust-lang/rust/commit/997fc46efad4dac0c325df55e17a55d7cc4cdc05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997fc46efad4dac0c325df55e17a55d7cc4cdc05/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64c95600c0887dbb48a429a00700df47af75eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64c95600c0887dbb48a429a00700df47af75eaa", "html_url": "https://github.com/rust-lang/rust/commit/f64c95600c0887dbb48a429a00700df47af75eaa"}], "stats": {"total": 244, "additions": 227, "deletions": 17}, "files": [{"sha": "484e2d7d7ddb26d7218b2122cdd1733643cddba3", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     macro_id_to_def_id,\n     nameres::DefMap,\n     path::{ModPath, Path},\n-    src::HasSource,\n+    src::{HasChildSource, HasSource},\n     AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, MacroId, ModuleId,\n     UnresolvedMacro,\n };\n@@ -324,6 +324,13 @@ impl Body {\n                 let src = s.source(db);\n                 (src.file_id, s.module(db), src.value.body())\n             }\n+            DefWithBodyId::VariantId(v) => {\n+                let e = v.parent.lookup(db);\n+                let src = v.parent.child_source(db);\n+                let variant = &src.value[v.local_id];\n+                // TODO(ole): Handle missing exprs (+1 to the prev)\n+                (src.file_id, e.container, variant.expr())\n+            }\n         };\n         let expander = Expander::new(db, file_id, module);\n         let (mut body, source_map) = Body::new(db, expander, params, body);"}, {"sha": "4c44840e861df33c3cd91c11d6f46559a005d41d", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -474,16 +474,25 @@ pub enum DefWithBodyId {\n     FunctionId(FunctionId),\n     StaticId(StaticId),\n     ConstId(ConstId),\n+    VariantId(EnumVariantId),\n }\n \n impl_from!(FunctionId, ConstId, StaticId for DefWithBodyId);\n \n+// FIXME: Rename EnumVariantId to VariantId so that the macro above can be used\n+impl From<EnumVariantId> for DefWithBodyId {\n+    fn from(id: EnumVariantId) -> Self {\n+        DefWithBodyId::VariantId(id)\n+    }\n+}\n+\n impl DefWithBodyId {\n     pub fn as_generic_def_id(self) -> Option<GenericDefId> {\n         match self {\n             DefWithBodyId::FunctionId(f) => Some(f.into()),\n             DefWithBodyId::StaticId(_) => None,\n             DefWithBodyId::ConstId(c) => Some(c.into()),\n+            DefWithBodyId::VariantId(c) => Some(c.into()),\n         }\n     }\n }\n@@ -681,6 +690,7 @@ impl HasModule for DefWithBodyId {\n             DefWithBodyId::FunctionId(it) => it.lookup(db).module(db),\n             DefWithBodyId::StaticId(it) => it.lookup(db).module(db),\n             DefWithBodyId::ConstId(it) => it.lookup(db).module(db),\n+            DefWithBodyId::VariantId(it) => it.parent.lookup(db).container,\n         }\n     }\n }\n@@ -691,6 +701,7 @@ impl DefWithBodyId {\n             DefWithBodyId::FunctionId(it) => it.lookup(db).id.value.into(),\n             DefWithBodyId::StaticId(it) => it.lookup(db).id.value.into(),\n             DefWithBodyId::ConstId(it) => it.lookup(db).id.value.into(),\n+            DefWithBodyId::VariantId(it) => it.parent.lookup(db).id.value.into(),\n         }\n     }\n }"}, {"sha": "070f6837133a3b645eb16bb37282d13515d9e798", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -839,6 +839,7 @@ impl HasResolver for DefWithBodyId {\n             DefWithBodyId::ConstId(c) => c.resolver(db),\n             DefWithBodyId::FunctionId(f) => f.resolver(db),\n             DefWithBodyId::StaticId(s) => s.resolver(db),\n+            DefWithBodyId::VariantId(v) => v.parent.resolver(db),\n         }\n     }\n }"}, {"sha": "e934fe1c3234cb3555d057ad6f0a84075aa4d473", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     path::ModPath,\n     resolver::{resolver_for_expr, ResolveValueResult, Resolver, ValueNs},\n     type_ref::ConstScalar,\n-    ConstId, DefWithBodyId,\n+    ConstId, DefWithBodyId, EnumVariantId,\n };\n use la_arena::{Arena, Idx};\n use stdx::never;\n@@ -339,6 +339,7 @@ pub fn eval_const(\n                 ValueNs::GenericParam(_) => {\n                     Err(ConstEvalError::NotSupported(\"const generic without substitution\"))\n                 }\n+                ValueNs::EnumVariantId(id) => ctx.db.const_eval_variant(id), // TODO(ole): Assuming this is all that has to happen?\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n@@ -412,6 +413,14 @@ pub(crate) fn const_eval_recover(\n     Err(ConstEvalError::Loop)\n }\n \n+pub(crate) fn const_eval_recover_variant(\n+    _: &dyn HirDatabase,\n+    _: &[String],\n+    _: &EnumVariantId,\n+) -> Result<ComputedExpr, ConstEvalError> {\n+    Err(ConstEvalError::Loop)\n+}\n+\n pub(crate) fn const_eval_query(\n     db: &dyn HirDatabase,\n     const_id: ConstId,\n@@ -433,6 +442,26 @@ pub(crate) fn const_eval_query(\n     result\n }\n \n+pub(crate) fn const_eval_query_variant(\n+    db: &dyn HirDatabase,\n+    variant_id: EnumVariantId,\n+) -> Result<ComputedExpr, ConstEvalError> {\n+    let def = variant_id.into();\n+    let body = db.body(def);\n+    let infer = &db.infer(def);\n+    eval_const(\n+        body.body_expr,\n+        &mut ConstEvalCtx {\n+            db,\n+            owner: def,\n+            exprs: &body.exprs,\n+            pats: &body.pats,\n+            local_data: HashMap::default(),\n+            infer,\n+        },\n+    )\n+}\n+\n pub(crate) fn eval_to_const<'a>(\n     expr: Idx<Expr>,\n     mode: ParamLoweringMode,"}, {"sha": "79c5c01ec65fa6993b741592e6be6b72d3af1ed2", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -6,8 +6,9 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase, expr::ExprId, BlockId, ConstId, ConstParamId, DefWithBodyId, FunctionId,\n-    GenericDefId, ImplId, LifetimeParamId, LocalFieldId, TypeOrConstParamId, VariantId,\n+    db::DefDatabase, expr::ExprId, BlockId, ConstId, ConstParamId, DefWithBodyId, EnumVariantId,\n+    FunctionId, GenericDefId, ImplId, LifetimeParamId, LocalFieldId, Lookup, TypeOrConstParamId,\n+    VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -47,6 +48,10 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::cycle(crate::consteval::const_eval_recover)]\n     fn const_eval(&self, def: ConstId) -> Result<ComputedExpr, ConstEvalError>;\n \n+    #[salsa::invoke(crate::consteval::const_eval_query_variant)]\n+    #[salsa::cycle(crate::consteval::const_eval_recover_variant)]\n+    fn const_eval_variant(&self, def: EnumVariantId) -> Result<ComputedExpr, ConstEvalError>;\n+\n     #[salsa::invoke(crate::lower::impl_trait_query)]\n     fn impl_trait(&self, def: ImplId) -> Option<Binders<TraitRef>>;\n \n@@ -188,6 +193,13 @@ fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult>\n         DefWithBodyId::ConstId(it) => {\n             db.const_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let up_db: &dyn DefDatabase = db.upcast();\n+            let loc = it.parent.lookup(up_db);\n+            let item_tree = loc.id.item_tree(up_db);\n+            let konst = &item_tree[loc.id.value];\n+            konst.name.to_string()\n+        }\n     });\n     db.infer_query(def)\n }"}, {"sha": "431ab949b46243ae2f8b0621454fe76614212334", "filename": "crates/hir-ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -18,7 +18,9 @@ pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n \n     let is_unsafe = match def {\n         DefWithBodyId::FunctionId(it) => db.function_data(it).has_unsafe_kw(),\n-        DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n+        DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) | DefWithBodyId::VariantId(_) => {\n+            false\n+        }\n     };\n     if is_unsafe {\n         return res;"}, {"sha": "63d0f1b01cf039c3dab530079dbb540f937d1314", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -67,6 +67,14 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n+        DefWithBodyId::VariantId(v) => {\n+            //let def = AttrDefId::EnumVariantId(v);\n+            //let attrs = db.attrs(def);\n+            //let repr = attrs.by_key(\"repr\").attrs().next().unwrap();\n+            //let ident = repr.single_ident_value().unwrap().text;\n+            // TODO(ole): Get the real type\n+            ctx.return_ty = TyBuilder::def_ty(db, v.parent.into()).fill_with_unknown().build()\n+        }\n     }\n \n     ctx.infer_body();"}, {"sha": "be5ece9c5c5000aa482897130d3646f67e24afd6", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -16,7 +16,7 @@ use base_db::{fixture::WithFixture, FileRange, SourceDatabaseExt};\n use expect_test::Expect;\n use hir_def::{\n     body::{Body, BodySourceMap, SyntheticSyntax},\n-    db::DefDatabase,\n+    db::{DefDatabase, InternDatabase},\n     expr::{ExprId, PatId},\n     item_scope::ItemScope,\n     nameres::DefMap,\n@@ -135,6 +135,10 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let loc = it.lookup(&db);\n             loc.source(&db).value.syntax().text_range().start()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let loc = db.lookup_intern_enum(it.parent);\n+            loc.source(&db).value.syntax().text_range().start()\n+        }\n     });\n     let mut unexpected_type_mismatches = String::new();\n     for def in defs {\n@@ -388,6 +392,10 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let loc = it.lookup(&db);\n             loc.source(&db).value.syntax().text_range().start()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let loc = db.lookup_intern_enum(it.parent);\n+            loc.source(&db).value.syntax().text_range().start()\n+        }\n     });\n     for def in defs {\n         let (_body, source_map) = db.body_with_source_map(def);"}, {"sha": "f825a72c0f58a63998d2cc32aca59b4727b02dba", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -140,6 +140,7 @@ impl From<DefWithBody> for DefWithBodyId {\n             DefWithBody::Function(it) => DefWithBodyId::FunctionId(it.id),\n             DefWithBody::Static(it) => DefWithBodyId::StaticId(it.id),\n             DefWithBody::Const(it) => DefWithBodyId::ConstId(it.id),\n+            DefWithBody::Variant(it) => DefWithBodyId::VariantId(it.into()),\n         }\n     }\n }\n@@ -150,6 +151,7 @@ impl From<DefWithBodyId> for DefWithBody {\n             DefWithBodyId::FunctionId(it) => DefWithBody::Function(it.into()),\n             DefWithBodyId::StaticId(it) => DefWithBody::Static(it.into()),\n             DefWithBodyId::ConstId(it) => DefWithBody::Const(it.into()),\n+            DefWithBodyId::VariantId(it) => DefWithBody::Variant(it.into()),\n         }\n     }\n }\n@@ -172,9 +174,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n             GenericDef::Impl(it) => GenericDefId::ImplId(it.id),\n-            GenericDef::Variant(it) => {\n-                GenericDefId::EnumVariantId(EnumVariantId { parent: it.parent.id, local_id: it.id })\n-            }\n+            GenericDef::Variant(it) => GenericDefId::EnumVariantId(it.into()),\n             GenericDef::Const(it) => GenericDefId::ConstId(it.id),\n         }\n     }\n@@ -188,9 +188,7 @@ impl From<GenericDefId> for GenericDef {\n             GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n             GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n             GenericDefId::ImplId(it) => GenericDef::Impl(it.into()),\n-            GenericDefId::EnumVariantId(it) => {\n-                GenericDef::Variant(Variant { parent: it.parent.into(), id: it.local_id })\n-            }\n+            GenericDefId::EnumVariantId(it) => GenericDef::Variant(it.into()),\n             GenericDefId::ConstId(it) => GenericDef::Const(it.into()),\n         }\n     }"}, {"sha": "258224a7584a4b3b3b33daf2508ce5c0dcde48a6", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -73,7 +73,7 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{impl_from, never};\n use syntax::{\n-    ast::{self, HasAttrs as _, HasDocComments, HasName},\n+    ast::{self, Expr, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxNodePtr, TextRange, T,\n };\n \n@@ -962,11 +962,16 @@ impl HasVisibility for Enum {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Variant {\n-    pub(crate) parent: Enum,\n-    pub(crate) id: LocalEnumVariantId,\n+    pub parent: Enum,\n+    pub id: LocalEnumVariantId,\n }\n \n impl Variant {\n+    pub fn value(self, db: &dyn HirDatabase) -> Option<Expr> {\n+        // TODO(ole): Handle missing exprs (+1 to the prev)\n+        self.source(db)?.value.expr()\n+    }\n+\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n@@ -1129,6 +1134,7 @@ pub enum DefWithBody {\n     Function(Function),\n     Static(Static),\n     Const(Const),\n+    Variant(Variant),\n }\n impl_from!(Function, Const, Static for DefWithBody);\n \n@@ -1138,6 +1144,7 @@ impl DefWithBody {\n             DefWithBody::Const(c) => c.module(db),\n             DefWithBody::Function(f) => f.module(db),\n             DefWithBody::Static(s) => s.module(db),\n+            DefWithBody::Variant(v) => v.module(db),\n         }\n     }\n \n@@ -1146,6 +1153,7 @@ impl DefWithBody {\n             DefWithBody::Function(f) => Some(f.name(db)),\n             DefWithBody::Static(s) => Some(s.name(db)),\n             DefWithBody::Const(c) => c.name(db),\n+            DefWithBody::Variant(v) => Some(v.name(db)),\n         }\n     }\n \n@@ -1155,6 +1163,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.ret_type(db),\n             DefWithBody::Static(it) => it.ty(db),\n             DefWithBody::Const(it) => it.ty(db),\n+            DefWithBody::Variant(it) => it.parent.ty(db),\n         }\n     }\n \n@@ -1379,6 +1388,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.into(),\n             DefWithBody::Static(it) => it.into(),\n             DefWithBody::Const(it) => it.into(),\n+            DefWithBody::Variant(it) => it.into(),\n         };\n         for diag in hir_ty::diagnostics::incorrect_case(db, krate, def.into()) {\n             acc.push(diag.into())"}, {"sha": "8432f0e7e013ccceafac0be55c54f8227810fe82", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -1,6 +1,7 @@\n //! File symbol extraction.\n \n use base_db::FileRange;\n+use hir_def::db::DefDatabase;\n use hir_def::{\n     item_tree::ItemTreeNode, src::HasSource, AdtId, AssocItemId, AssocItemLoc, DefWithBodyId,\n     HasModule, ImplId, ItemContainerId, Lookup, MacroId, ModuleDefId, ModuleId, TraitId,\n@@ -244,6 +245,10 @@ impl<'a> SymbolCollector<'a> {\n             DefWithBodyId::ConstId(id) => Some(\n                 id.lookup(self.db.upcast()).source(self.db.upcast()).value.name()?.text().into(),\n             ),\n+            DefWithBodyId::VariantId(id) => Some({\n+                let up_db: &dyn DefDatabase = self.db.upcast();\n+                up_db.lookup_intern_enum(id.parent).source(up_db).value.name()?.text().into()\n+            }),\n         }\n     }\n "}, {"sha": "20ab474e80273ee80b18efd6eb77ada20fba9c44", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -236,6 +236,7 @@ impl Definition {\n                 DefWithBody::Function(f) => f.source(db).map(|src| src.syntax().cloned()),\n                 DefWithBody::Const(c) => c.source(db).map(|src| src.syntax().cloned()),\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Variant(v) => v.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n                 Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),"}, {"sha": "cd63131e7a73249dee2f03d6e38aa23931bce8a3", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -2,7 +2,9 @@\n use std::fmt::Display;\n \n use either::Either;\n-use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n+use hir::{\n+    db::HirDatabase, AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo,\n+};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n@@ -346,7 +348,14 @@ pub(super) fn definition(\n         Definition::Module(it) => label_and_docs(db, it),\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),\n-        Definition::Variant(it) => label_and_docs(db, it),\n+        Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n+            let hir_db: &dyn HirDatabase = db;\n+            let body = hir_db.const_eval_variant(it.into());\n+            match body {\n+                Ok(x) => Some(format!(\"{}\", x)),\n+                Err(_) => it.value(db).map(|s| format!(\"{}\", s)),\n+            }\n+        }),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.eval(db);\n             match body {"}, {"sha": "f24dec25b6b99d21ebd3b35b655e376386a28466", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997fc46efad4dac0c325df55e17a55d7cc4cdc05/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=997fc46efad4dac0c325df55e17a55d7cc4cdc05", "patch": "@@ -3527,6 +3527,86 @@ impl<const LEN: usize> Foo<LEN$0> {}\n     );\n }\n \n+#[test]\n+fn hover_const_eval_variant() {\n+    // show hex for <10\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    /// This is a doc\n+    A$0 = 1 << 3,\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 8\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // show hex for >10\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    /// This is a doc\n+    A$0 = (1 << 3) + (1 << 2),\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 12 (0xC)\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // enums in const eval\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    A = 1,\n+    /// This is a doc\n+    B$0 = E::A + 1,\n+}\n+\"#,\n+        expect![[r#\"\n+            *B*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            B = 2\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_const_eval() {\n     // show hex for <10\n@@ -3820,6 +3900,35 @@ fn foo() {\n \n             ---\n \n+            This is a doc\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+enum E {\n+    /// This is a doc\n+    A = 3,\n+}\n+fn foo(e: E) {\n+    match e {\n+        E::A$0 => (),\n+        _ => ()\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 3\n+            ```\n+\n+            ---\n+\n             This is a doc\n         \"#]],\n     );"}]}