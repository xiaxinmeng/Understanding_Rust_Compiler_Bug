{"sha": "b92d360c6cf029bd98c154cb510ec9e11b39bad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MmQzNjBjNmNmMDI5YmQ5OGMxNTRjYjUxMGVjOWUxMWIzOWJhZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T08:26:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T08:26:48Z"}, "message": "Auto merge of #60378 - froydnj:apple-target-modifications, r=michaelwoerister\n\nconditionally modify darwin targets to macosx targets with versions\n\nWe need this behavior so that Rust LLVM IR objects match the target triple for Clang LLVM IR objects.  This matching then convinces the linker that yes, you really can do cross-language LTO with objects from different compilers.\n\nThe newly-added tests seem to pass locally on x86_64-unknown-linux-gnu.  I haven't done a full test run or tried the new compiler in an cross-language LTO setup yet.", "tree": {"sha": "4c3a4bbca11c0bfc68e57e27b5831e436bc9bb01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3a4bbca11c0bfc68e57e27b5831e436bc9bb01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92d360c6cf029bd98c154cb510ec9e11b39bad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92d360c6cf029bd98c154cb510ec9e11b39bad6", "html_url": "https://github.com/rust-lang/rust/commit/b92d360c6cf029bd98c154cb510ec9e11b39bad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92d360c6cf029bd98c154cb510ec9e11b39bad6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94", "html_url": "https://github.com/rust-lang/rust/commit/33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94"}, {"sha": "97ba4c95d00108ac79c86d2bbc6834b1fef008a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ba4c95d00108ac79c86d2bbc6834b1fef008a2", "html_url": "https://github.com/rust-lang/rust/commit/97ba4c95d00108ac79c86d2bbc6834b1fef008a2"}], "stats": {"total": 169, "additions": 157, "deletions": 12}, "files": [{"sha": "c47d7d85a3769cd7cfb61ff20c9c55b51fa086d2", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -783,7 +783,7 @@ impl<'a> CrateLoader<'a> {\n                 Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n                 Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n             };\n-            if !supported_targets.contains(&&*self.sess.target.target.llvm_target) {\n+            if !supported_targets.contains(&&*self.sess.opts.target_triple.triple()) {\n                 self.sess.err(&format!(\"{:?}Sanitizer only works with the `{}` target\",\n                     sanitizer,\n                     supported_targets.join(\"` or `\")\n@@ -794,7 +794,7 @@ impl<'a> CrateLoader<'a> {\n             // firstyear 2017 - during testing I was unable to access an OSX machine\n             // to make this work on different crate types. As a result, today I have\n             // only been able to test and support linux as a target.\n-            if self.sess.target.target.llvm_target == \"x86_64-unknown-linux-gnu\" {\n+            if self.sess.opts.target_triple.triple() == \"x86_64-unknown-linux-gnu\" {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime"}, {"sha": "9dd343b6c8de8ee1ee964858f63dfb6cb7a9b7e4", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -14,13 +14,7 @@ pub fn opts() -> TargetOptions {\n     //\n     // Here we detect what version is being requested, defaulting to 10.7. ELF\n     // TLS is flagged as enabled if it looks to be supported.\n-    let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n-    let version = deployment_target.as_ref().and_then(|s| {\n-        let mut i = s.splitn(2, '.');\n-        i.next().and_then(|a| i.next().map(|b| (a, b)))\n-    }).and_then(|(a, b)| {\n-        a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()\n-    }).unwrap_or((10, 7));\n+    let version = macos_deployment_target().unwrap_or((10, 7));\n \n     TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -40,3 +34,27 @@ pub fn opts() -> TargetOptions {\n         .. Default::default()\n     }\n }\n+\n+fn macos_deployment_target() -> Option<(u32, u32)> {\n+    let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n+    let version = deployment_target.as_ref().and_then(|s| {\n+        let mut i = s.splitn(2, '.');\n+        i.next().and_then(|a| i.next().map(|b| (a, b)))\n+    }).and_then(|(a, b)| {\n+        a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()\n+    });\n+\n+    version\n+}\n+\n+pub fn macos_llvm_target(arch: &str) -> String {\n+    let version = macos_deployment_target();\n+    let llvm_target = match version {\n+        Some((major, minor)) => {\n+            format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n+        },\n+        None => format!(\"{}-apple-darwin\", arch)\n+    };\n+\n+    llvm_target\n+}"}, {"sha": "7d804ea53fb31aa7521ee5926397594ede17ff5f", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -8,8 +8,14 @@ pub fn target() -> TargetResult {\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n \n+    // Clang automatically chooses a more specific target based on\n+    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+    // correctly, we do too.\n+    let arch = \"i686\";\n+    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n+\n     Ok(Target {\n-        llvm_target: \"i686-apple-darwin\".to_string(),\n+        llvm_target: llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),"}, {"sha": "182103440f035e9a0d47109131ad2ba7e3f96718", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -8,13 +8,19 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.stack_probes = true;\n \n+    // Clang automatically chooses a more specific target based on\n+    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+    // correctly, we do too.\n+    let arch = \"x86_64\";\n+    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n+\n     Ok(Target {\n-        llvm_target: \"x86_64-apple-darwin\".to_string(),\n+        llvm_target: llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n-        arch: \"x86_64\".to_string(),\n+        arch: arch.to_string(),\n         target_os: \"macos\".to_string(),\n         target_env: String::new(),\n         target_vendor: \"apple\".to_string(),"}, {"sha": "dad376d6677f73cf4670c4ab4beccc1f96fc15a9", "filename": "src/test/codegen/i686-macosx-deployment-target.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fi686-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fi686-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fi686-macosx-deployment-target.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -0,0 +1,26 @@\n+//\n+// Checks that we correctly modify the target when MACOSX_DEPLOYMENT_TARGET is set.\n+// See issue #60235.\n+\n+// compile-flags: -O --target=i686-apple-darwin --crate-type=rlib\n+// rustc-env:MACOSX_DEPLOYMENT_TARGET=10.9\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+#[repr(C)]\n+pub struct Bool {\n+    b: bool,\n+}\n+\n+// CHECK: target triple = \"i686-apple-macosx10.9.0\"\n+#[no_mangle]\n+pub extern \"C\" fn structbool() -> Bool {\n+    Bool { b: true }\n+}"}, {"sha": "eb826590523b73cd2bf14b1842cc8ba5ba56c885", "filename": "src/test/codegen/i686-no-macosx-deployment-target.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -0,0 +1,26 @@\n+//\n+// Checks that we leave the target alone MACOSX_DEPLOYMENT_TARGET is unset.\n+// See issue #60235.\n+\n+// compile-flags: -O --target=i686-apple-darwin --crate-type=rlib\n+// unset-rustc-env:MACOSX_DEPLOYMENT_TARGET\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+#[repr(C)]\n+pub struct Bool {\n+    b: bool,\n+}\n+\n+// CHECK: target triple = \"i686-apple-darwin\"\n+#[no_mangle]\n+pub extern \"C\" fn structbool() -> Bool {\n+    Bool { b: true }\n+}"}, {"sha": "8e291b7b298d5a3c41cff7b1179f1edeb2b2adc5", "filename": "src/test/codegen/x86_64-macosx-deployment-target.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fx86_64-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fx86_64-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_64-macosx-deployment-target.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -0,0 +1,26 @@\n+//\n+// Checks that we correctly modify the target when MACOSX_DEPLOYMENT_TARGET is set.\n+// See issue #60235.\n+\n+// compile-flags: -O --target=x86_64-apple-darwin --crate-type=rlib\n+// rustc-env:MACOSX_DEPLOYMENT_TARGET=10.9\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+#[repr(C)]\n+pub struct Bool {\n+    b: bool,\n+}\n+\n+// CHECK: target triple = \"x86_64-apple-macosx10.9.0\"\n+#[no_mangle]\n+pub extern \"C\" fn structbool() -> Bool {\n+    Bool { b: true }\n+}"}, {"sha": "58a11d1095bbe0a79b72471427c15c0f798c9e4e", "filename": "src/test/codegen/x86_64-no-macosx-deployment-target.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -0,0 +1,26 @@\n+//\n+// Checks that we leave the target alone when MACOSX_DEPLOYMENT_TARGET is unset.\n+// See issue #60235.\n+\n+// compile-flags: -O --target=x86_64-apple-darwin --crate-type=rlib\n+// unset-rustc-env:MACOSX_DEPLOYMENT_TARGET\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+#[repr(C)]\n+pub struct Bool {\n+    b: bool,\n+}\n+\n+// CHECK: target triple = \"x86_64-apple-darwin\"\n+#[no_mangle]\n+pub extern \"C\" fn structbool() -> Bool {\n+    Bool { b: true }\n+}"}, {"sha": "54e9b76a21ee07920fff3862cb9b5166f38528cb", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -305,6 +305,9 @@ pub struct TestProps {\n     pub extern_private: Vec<String>,\n     // Environment settings to use for compiling\n     pub rustc_env: Vec<(String, String)>,\n+    // Environment variables to unset prior to compiling.\n+    // Variables are unset before applying 'rustc_env'.\n+    pub unset_rustc_env: Vec<String>,\n     // Environment settings to use during execution\n     pub exec_env: Vec<(String, String)>,\n     // Lines to check if they appear in the expected debugger output\n@@ -373,6 +376,7 @@ impl TestProps {\n             extern_private: vec![],\n             revisions: vec![],\n             rustc_env: vec![],\n+            unset_rustc_env: vec![],\n             exec_env: vec![],\n             check_lines: vec![],\n             build_aux_docs: false,\n@@ -499,6 +503,10 @@ impl TestProps {\n                 self.rustc_env.push(ee);\n             }\n \n+            if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n+                self.unset_rustc_env.push(ev);\n+            }\n+\n             if let Some(cl) = config.parse_check_line(ln) {\n                 self.check_lines.push(cl);\n             }"}, {"sha": "a11a4f17eb5040315c2843913d65fb290bdbf088", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d360c6cf029bd98c154cb510ec9e11b39bad6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b92d360c6cf029bd98c154cb510ec9e11b39bad6", "patch": "@@ -1703,6 +1703,9 @@ impl<'test> TestCx<'test> {\n             add_extern_priv(&private_lib, true);\n         }\n \n+        self.props.unset_rustc_env.clone()\n+            .iter()\n+            .fold(&mut rustc, |rustc, v| rustc.env_remove(v));\n         rustc.envs(self.props.rustc_env.clone());\n         self.compose_and_run(\n             rustc,"}]}