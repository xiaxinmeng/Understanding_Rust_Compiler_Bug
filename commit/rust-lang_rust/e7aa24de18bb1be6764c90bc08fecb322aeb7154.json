{"sha": "e7aa24de18bb1be6764c90bc08fecb322aeb7154", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWEyNGRlMThiYjFiZTY3NjRjOTBiYzA4ZmVjYjMyMmFlYjcxNTQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-15T23:13:42Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-16T17:06:06Z"}, "message": "add self.token_to_str and is_any_keyword convenience abstractions", "tree": {"sha": "d92ac675584a91afaed79c5de6a97c87f5cc15f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92ac675584a91afaed79c5de6a97c87f5cc15f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7aa24de18bb1be6764c90bc08fecb322aeb7154", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa24de18bb1be6764c90bc08fecb322aeb7154", "html_url": "https://github.com/rust-lang/rust/commit/e7aa24de18bb1be6764c90bc08fecb322aeb7154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa24de18bb1be6764c90bc08fecb322aeb7154/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e4cd09e2e57aae38d837531a7af1de00461d416", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4cd09e2e57aae38d837531a7af1de00461d416", "html_url": "https://github.com/rust-lang/rust/commit/7e4cd09e2e57aae38d837531a7af1de00461d416"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "f353d94894a43046d9c3df686c38c0fd13a67ffb", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa24de18bb1be6764c90bc08fecb322aeb7154/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa24de18bb1be6764c90bc08fecb322aeb7154/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=e7aa24de18bb1be6764c90bc08fecb322aeb7154", "patch": "@@ -47,17 +47,29 @@ pub fn seq_sep_none() -> SeqSep {\n     }\n }\n \n+// maps any token back to a string. not necessary if you know it's\n+// an identifier....\n pub fn token_to_str(reader: @reader, token: &token::Token) -> ~str {\n     token::to_str(reader.interner(), token)\n }\n \n pub impl Parser {\n+    // convert a token to a string using self's reader\n+    fn token_to_str(&self, token: &token::Token) -> ~str {\n+        token::to_str(self.reader.interner(), token)\n+    }\n+\n+    // convert the current token to a string using self's reader\n+    fn this_token_to_str(&self) -> ~str {\n+        self.token_to_str(self.token)\n+    }\n+\n     fn unexpected_last(&self, t: &token::Token) -> ! {\n         self.span_fatal(\n             *self.last_span,\n             fmt!(\n                 \"unexpected token: `%s`\",\n-                token_to_str(self.reader, t)\n+                self.token_to_str(t)\n             )\n         );\n     }\n@@ -66,7 +78,7 @@ pub impl Parser {\n         self.fatal(\n             fmt!(\n                 \"unexpected token: `%s`\",\n-                token_to_str(self.reader, &copy *self.token)\n+                self.this_token_to_str()\n             )\n         );\n     }\n@@ -80,8 +92,8 @@ pub impl Parser {\n             self.fatal(\n                 fmt!(\n                     \"expected `%s` but found `%s`\",\n-                    token_to_str(self.reader, t),\n-                    token_to_str(self.reader, &copy *self.token)\n+                    self.token_to_str(t),\n+                    self.this_token_to_str()\n                 )\n             )\n         }\n@@ -104,7 +116,7 @@ pub impl Parser {\n                 self.fatal(\n                     fmt!(\n                         \"expected ident, found `%s`\",\n-                        token_to_str(self.reader, &copy *self.token)\n+                        self.this_token_to_str()\n                     )\n                 );\n             }\n@@ -128,12 +140,15 @@ pub impl Parser {\n     // Storing keywords as interned idents instead of strings would be nifty.\n \n     // A sanity check that the word we are asking for is a known keyword\n+    // NOTE: this could be done statically....\n     fn require_keyword(&self, word: &~str) {\n         if !self.keywords.contains(word) {\n             self.bug(fmt!(\"unknown keyword: %s\", *word));\n         }\n     }\n \n+    // return true when this token represents the given string, and is not\n+    // followed immediately by :: .\n     fn token_is_word(&self, word: &~str, tok: &token::Token) -> bool {\n         match *tok {\n             token::IDENT(sid, false) => { *self.id_to_str(sid) == *word }\n@@ -150,6 +165,10 @@ pub impl Parser {\n         self.token_is_keyword(word, &copy *self.token)\n     }\n \n+    fn id_is_any_keyword(&self, id: ast::ident) -> bool {\n+        self.keywords.contains(self.id_to_str(id))\n+    }\n+\n     fn is_any_keyword(&self, tok: &token::Token) -> bool {\n         match *tok {\n           token::IDENT(sid, false) => {\n@@ -182,7 +201,7 @@ pub impl Parser {\n                 fmt!(\n                     \"expected `%s`, found `%s`\",\n                     *word,\n-                    token_to_str(self.reader, &copy *self.token)\n+                    self.this_token_to_str()\n                 )\n             );\n         }\n@@ -248,9 +267,9 @@ pub impl Parser {\n             );\n         } else {\n             let mut s: ~str = ~\"expected `\";\n-            s += token_to_str(self.reader, &token::GT);\n+            s += self.token_to_str(&token::GT);\n             s += ~\"`, found `\";\n-            s += token_to_str(self.reader, &copy *self.token);\n+            s += self.this_token_to_str();\n             s += ~\"`\";\n             self.fatal(s);\n         }"}, {"sha": "c1f781f8570e01347167be0e87946bf64d9909d3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa24de18bb1be6764c90bc08fecb322aeb7154/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa24de18bb1be6764c90bc08fecb322aeb7154/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e7aa24de18bb1be6764c90bc08fecb322aeb7154", "patch": "@@ -66,7 +66,7 @@ use codemap::{span, BytePos, spanned, mk_sp};\n use codemap;\n use parse::attr::parser_attr;\n use parse::classify;\n-use parse::common::{seq_sep_none, token_to_str};\n+use parse::common::{seq_sep_none};\n use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;\n use parse::lexer::TokenAndSpan;\n@@ -252,8 +252,11 @@ pub fn Parser(sess: @mut ParseSess,\n pub struct Parser {\n     sess: @mut ParseSess,\n     cfg: crate_cfg,\n+    // the current token:\n     token: @mut token::Token,\n+    // the span of the current token:\n     span: @mut span,\n+    // the span of the prior token:\n     last_span: @mut span,\n     buffer: @mut [TokenAndSpan, ..4],\n     buffer_start: @mut int,\n@@ -499,7 +502,7 @@ pub impl Parser {\n             let hi = p.last_span.hi;\n             debug!(\"parse_trait_methods(): trait method signature ends in \\\n                     `%s`\",\n-                   token_to_str(p.reader, &copy *p.token));\n+                   self.this_token_to_str());\n             match *p.token {\n               token::SEMI => {\n                 p.bump();\n@@ -541,7 +544,7 @@ pub impl Parser {\n                     p.fatal(\n                         fmt!(\n                             \"expected `;` or `}` but found `%s`\",\n-                            token_to_str(p.reader, &copy *p.token)\n+                            self.this_token_to_str()\n                         )\n                     );\n                 }\n@@ -1456,6 +1459,11 @@ pub impl Parser {\n     fn parse_token_tree(&self) -> token_tree {\n         maybe_whole!(deref self, nt_tt);\n \n+        // this is the fall-through for the 'match' below.\n+        // invariants: the current token is not a left-delimiter,\n+        // not an EOF, and not the desired right-delimiter (if\n+        // it were, parse_seq_to_before_end would have prevented\n+        // reaching this point.\n         fn parse_non_delim_tt_tok(p: &Parser) -> token_tree {\n             maybe_whole!(deref p, nt_tt);\n             match *p.token {\n@@ -1464,7 +1472,7 @@ pub impl Parser {\n                 p.fatal(\n                     fmt!(\n                         \"incorrect close delimiter: `%s`\",\n-                        token_to_str(p.reader, &copy *p.token)\n+                        p.this_token_to_str()\n                     )\n                 );\n               }\n@@ -1506,18 +1514,17 @@ pub impl Parser {\n \n         match *self.token {\n             token::EOF => {\n-                self.fatal(~\"file ended in the middle of a macro invocation\");\n+                self.fatal(~\"file ended with unbalanced delimiters\");\n             }\n             token::LPAREN | token::LBRACE | token::LBRACKET => {\n-                // tjc: ??????\n-                let ket = token::flip_delimiter(&*self.token);\n+                let close_delim = token::flip_delimiter(&*self.token);\n                 tt_delim(\n                     vec::append(\n                         // the open delimiter:\n                         ~[parse_any_tt_tok(self)],\n                         vec::append(\n                             self.parse_seq_to_before_end(\n-                                &ket,\n+                                &close_delim,\n                                 seq_sep_none(),\n                                 |p| p.parse_token_tree()\n                             ),\n@@ -1531,6 +1538,8 @@ pub impl Parser {\n         }\n     }\n \n+    // parse a stream of tokens into a list of token_trees,\n+    // up to EOF.\n     fn parse_all_token_trees(&self) -> ~[token_tree] {\n         let mut tts = ~[];\n         while *self.token != token::EOF {\n@@ -2053,6 +2062,7 @@ pub impl Parser {\n         return e;\n     }\n \n+    // parse the RHS of a local variable declaration (e.g. '= 14;')\n     fn parse_initializer(&self) -> Option<@expr> {\n         match *self.token {\n           token::EQ => {\n@@ -2139,7 +2149,7 @@ pub impl Parser {\n                     self.fatal(\n                         fmt!(\n                             \"expected `}`, found `%s`\",\n-                            token_to_str(self.reader, &copy *self.token)\n+                            self.this_token_to_str()\n                         )\n                     );\n                 }\n@@ -2407,6 +2417,7 @@ pub impl Parser {\n         pat_ident(binding_mode, name, sub)\n     }\n \n+    // parse a local variable declaration\n     fn parse_local(&self, is_mutbl: bool,\n                    allow_init: bool) -> @local {\n         let lo = self.span.lo;\n@@ -2652,7 +2663,7 @@ pub impl Parser {\n                                             fmt!(\n                                                 \"expected `;` or `}` after \\\n                                                 expression but found `%s`\",\n-                                                token_to_str(self.reader, &t)\n+                                                self.token_to_str(&t)\n                                             )\n                                         );\n                                     }\n@@ -2867,7 +2878,7 @@ pub impl Parser {\n             self.fatal(\n                 fmt!(\n                     \"expected `self` but found `%s`\",\n-                    token_to_str(self.reader, &copy *self.token)\n+                    self.this_token_to_str()\n                 )\n             );\n         }\n@@ -2991,7 +3002,7 @@ pub impl Parser {\n                     self.fatal(\n                         fmt!(\n                             \"expected `,` or `)`, found `%s`\",\n-                            token_to_str(self.reader, &copy *self.token)\n+                            self.this_token_to_str()\n                         )\n                     );\n                 }\n@@ -3271,7 +3282,7 @@ pub impl Parser {\n                 fmt!(\n                     \"expected `{`, `(`, or `;` after struct name \\\n                     but found `%s`\",\n-                    token_to_str(self.reader, &copy *self.token)\n+                    self.this_token_to_str()\n                 )\n             );\n         }\n@@ -3321,7 +3332,7 @@ pub impl Parser {\n                     copy *self.span,\n                     fmt!(\n                         \"expected `;`, `,`, or '}' but found `%s`\",\n-                        token_to_str(self.reader, &copy *self.token)\n+                        self.this_token_to_str()\n                     )\n                 );\n             }\n@@ -3423,7 +3434,7 @@ pub impl Parser {\n                 self.fatal(\n                     fmt!(\n                         \"expected item but found `%s`\",\n-                        token_to_str(self.reader, &copy *self.token)\n+                        self.this_token_to_str()\n                     )\n                 );\n               }\n@@ -3683,7 +3694,7 @@ pub impl Parser {\n                 copy *self.span,\n                 fmt!(\n                     \"expected `{` or `mod` but found `%s`\",\n-                    token_to_str(self.reader, &copy *self.token)\n+                    self.this_token_to_str()\n                 )\n             );\n         }\n@@ -3696,7 +3707,7 @@ pub impl Parser {\n                         copy *self.span,\n                         fmt!(\n                             \"expected foreign module name but found `%s`\",\n-                            token_to_str(self.reader, &copy *self.token)\n+                            self.this_token_to_str()\n                         )\n                     );\n                 }"}]}