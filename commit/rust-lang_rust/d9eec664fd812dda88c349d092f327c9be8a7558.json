{"sha": "d9eec664fd812dda88c349d092f327c9be8a7558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZWVjNjY0ZmQ4MTJkZGE4OGMzNDlkMDkyZjMyN2M5YmU4YTc1NTg=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T15:11:50Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T16:35:36Z"}, "message": "Fix Ord implementation to use lexical ordering", "tree": {"sha": "8f4a4c0b329de0546ef377fe1695e9e3ca0d26f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4a4c0b329de0546ef377fe1695e9e3ca0d26f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9eec664fd812dda88c349d092f327c9be8a7558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9eec664fd812dda88c349d092f327c9be8a7558", "html_url": "https://github.com/rust-lang/rust/commit/d9eec664fd812dda88c349d092f327c9be8a7558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9eec664fd812dda88c349d092f327c9be8a7558/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db453ec0e507382b4ac1bb9eae4654957b8a7e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/db453ec0e507382b4ac1bb9eae4654957b8a7e76", "html_url": "https://github.com/rust-lang/rust/commit/db453ec0e507382b4ac1bb9eae4654957b8a7e76"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b07bb2bb1e6a556410a5b6c70102299512422ebb", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9eec664fd812dda88c349d092f327c9be8a7558/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9eec664fd812dda88c349d092f327c9be8a7558/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=d9eec664fd812dda88c349d092f327c9be8a7558", "patch": "@@ -165,7 +165,6 @@ macro_rules! tuple_impls(\n                     fn eq(&self, other: &($($T),+)) -> bool {\n                         $(*self.$get_ref_fn() == *other.$get_ref_fn())&&+\n                     }\n-\n                     #[inline(always)]\n                     fn ne(&self, other: &($($T),+)) -> bool {\n                         !(*self == *other)\n@@ -176,29 +175,30 @@ macro_rules! tuple_impls(\n                 impl<$($T:Ord),+> Ord for ($($T),+) {\n                     #[inline(always)]\n                     fn lt(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_ref_fn() < *other.$get_ref_fn())&&+\n+                        lexical_lt!($(*self.$get_ref_fn(), *other.$get_ref_fn()),+)\n                     }\n-\n                     #[inline(always)]\n-                    fn le(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_ref_fn() <= *other.$get_ref_fn())&&+\n-                    }\n-\n+                    fn le(&self, other: &($($T),+)) -> bool { !(*other).lt(&(*self)) }\n                     #[inline(always)]\n-                    fn ge(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_ref_fn() >= *other.$get_ref_fn())&&+\n-                    }\n-\n+                    fn ge(&self, other: &($($T),+)) -> bool { !(*self).lt(other) }\n                     #[inline(always)]\n-                    fn gt(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_ref_fn() > *other.$get_ref_fn())&&+\n-                    }\n+                    fn gt(&self, other: &($($T),+)) -> bool { (*other).lt(&(*self)) }\n                 }\n             )+\n         }\n     )\n )\n \n+// Constructs an expression that performs a lexical less-than ordering.\n+// The values are interleaved, so the macro invocation for\n+// `(a1, a2, a3) < (b1, b2, b3)` would be `lexical_lt!(a1, b1, a2, b2, a3, b3)`\n+macro_rules! lexical_lt(\n+    ($a:expr, $b:expr, $($rest_a:expr, $rest_b:expr),+) => (\n+        if $a < $b { true } else { lexical_lt!($($rest_a, $rest_b),+) }\n+    );\n+    ($a:expr, $b:expr) => ($a < $b);\n+)\n+\n tuple_impls!(\n     (CloneableTuple2, ImmutableTuple2) {\n         (n0, n0_ref) -> A { (ref a,_) => a }"}]}