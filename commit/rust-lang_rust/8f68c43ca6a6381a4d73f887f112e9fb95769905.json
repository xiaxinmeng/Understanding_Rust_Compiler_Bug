{"sha": "8f68c43ca6a6381a4d73f887f112e9fb95769905", "node_id": "C_kwDOAAsO6NoAKDhmNjhjNDNjYTZhNjM4MWE0ZDczZjg4N2YxMTJlOWZiOTU3Njk5MDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T00:26:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T00:26:22Z"}, "message": "Auto merge of #99925 - JohnTitor:rollup-4bt9ou3, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #99227 (Fix thumbv4t-none-eabi frame pointer setting)\n - #99518 (Let-else: break out scopes when a let-else pattern fails to match)\n - #99671 (Suggest dereferencing index when trying to use a reference of usize as index)\n - #99831 (Add Fuchsia platform support documentation)\n - #99881 (fix ICE when computing codegen_fn_attrs on closure with non-fn parent)\n - #99888 (Streamline lint checking)\n - #99891 (Adjust an expr span to account for macros)\n - #99904 (Cleanup html whitespace)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6c77fb057ae038f5e092061f050ec4d1f66761e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c77fb057ae038f5e092061f050ec4d1f66761e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f68c43ca6a6381a4d73f887f112e9fb95769905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f68c43ca6a6381a4d73f887f112e9fb95769905", "html_url": "https://github.com/rust-lang/rust/commit/8f68c43ca6a6381a4d73f887f112e9fb95769905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f68c43ca6a6381a4d73f887f112e9fb95769905/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211637d0802a1c17d41b414e091e9a8691b26068", "url": "https://api.github.com/repos/rust-lang/rust/commits/211637d0802a1c17d41b414e091e9a8691b26068", "html_url": "https://github.com/rust-lang/rust/commit/211637d0802a1c17d41b414e091e9a8691b26068"}, {"sha": "cfbf7be7d03faa55219a9f6d08e90687a3000d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbf7be7d03faa55219a9f6d08e90687a3000d1b", "html_url": "https://github.com/rust-lang/rust/commit/cfbf7be7d03faa55219a9f6d08e90687a3000d1b"}], "stats": {"total": 819, "additions": 629, "deletions": 190}, "files": [{"sha": "d9594b323dd0d0f7c092b7126fa44134116e063f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -15,7 +15,7 @@\n \n use crate::ast::*;\n \n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -109,12 +109,7 @@ pub enum LifetimeCtxt {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'ast>: Sized {\n-    fn visit_name(&mut self, _span: Span, _name: Symbol) {\n-        // Nothing to do.\n-    }\n-    fn visit_ident(&mut self, ident: Ident) {\n-        walk_ident(self, ident);\n-    }\n+    fn visit_ident(&mut self, _ident: Ident) {}\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) {\n         walk_foreign_item(self, i)\n     }\n@@ -267,10 +262,6 @@ macro_rules! walk_list {\n     }\n }\n \n-pub fn walk_ident<'a, V: Visitor<'a>>(visitor: &mut V, ident: Ident) {\n-    visitor.visit_name(ident.span, ident.name);\n-}\n-\n pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {\n     walk_list!(visitor, visit_item, &krate.items);\n     walk_list!(visitor, visit_attribute, &krate.attrs);\n@@ -315,11 +306,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);\n     match item.kind {\n-        ItemKind::ExternCrate(orig_name) => {\n-            if let Some(orig_name) = orig_name {\n-                visitor.visit_name(item.span, orig_name);\n-            }\n-        }\n+        ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(ref use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n         ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(_, ref typ, ref expr) => {\n             visitor.visit_ty(typ);"}, {"sha": "9c7369c83e2da57f8cf2bca9c4cc15862dc5065d", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -16,9 +16,8 @@ impl NodeCounter {\n }\n \n impl<'ast> Visitor<'ast> for NodeCounter {\n-    fn visit_ident(&mut self, ident: Ident) {\n+    fn visit_ident(&mut self, _ident: Ident) {\n         self.count += 1;\n-        walk_ident(self, ident);\n     }\n     fn visit_foreign_item(&mut self, i: &ForeignItem) {\n         self.count += 1;"}, {"sha": "d13711c3ab59851636b0449dfa2fd3fee538ecf8", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -90,9 +90,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_early_pass!(cx, check_foreign_item, it);\n             ast_visit::walk_foreign_item(cx, it);\n-            run_early_pass!(cx, check_foreign_item_post, it);\n         })\n     }\n \n@@ -104,7 +102,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_anon_const(&mut self, c: &'a ast::AnonConst) {\n-        run_early_pass!(self, check_anon_const, c);\n         self.check_id(c.id);\n         ast_visit::walk_anon_const(self, c);\n     }\n@@ -154,22 +151,17 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n                 self.check_id(closure_id);\n             }\n         }\n-\n-        run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a ast::VariantData) {\n-        run_early_pass!(self, check_struct_def, s);\n         if let Some(ctor_hir_id) = s.ctor_id() {\n             self.check_id(ctor_hir_id);\n         }\n         ast_visit::walk_struct_def(self, s);\n-        run_early_pass!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'a ast::FieldDef) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_early_pass!(cx, check_field_def, s);\n             ast_visit::walk_field_def(cx, s);\n         })\n     }\n@@ -178,7 +170,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n             run_early_pass!(cx, check_variant, v);\n             ast_visit::walk_variant(cx, v);\n-            run_early_pass!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -203,7 +194,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n-        run_early_pass!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n@@ -214,8 +204,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n-        run_early_pass!(self, check_expr_post, e);\n-\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n@@ -242,7 +230,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        run_early_pass!(self, check_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n@@ -256,23 +243,19 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast_visit::AssocCtxt::Trait => {\n                 run_early_pass!(cx, check_trait_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_trait_item_post, item);\n             }\n             ast_visit::AssocCtxt::Impl => {\n                 run_early_pass!(cx, check_impl_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_impl_item_post, item);\n             }\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n-        run_early_pass!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }\n \n     fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {\n-        run_early_pass!(self, check_path, p, id);\n         self.check_id(id);\n         ast_visit::walk_path(self, p);\n     }"}, {"sha": "a329b37519d98a04ec661f9c194918b0c8614b5b", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -81,7 +81,6 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         lint_callback!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n-        lint_callback!(self, check_mod_post, m, s, n);\n     }\n }\n \n@@ -118,7 +117,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         self.with_lint_attrs(param.hir_id, |cx| {\n-            lint_callback!(cx, check_param, param);\n             hir_visit::walk_param(cx, param);\n         });\n     }\n@@ -151,7 +149,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n-                lint_callback!(cx, check_foreign_item_post, it);\n             });\n         })\n     }\n@@ -193,7 +190,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         let body = self.context.tcx.hir().body(body_id);\n         lint_callback!(self, check_fn, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n-        lint_callback!(self, check_fn_post, fk, decl, body, span, id);\n         self.context.enclosing_body = old_enclosing_body;\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n@@ -208,7 +204,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     ) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n-        lint_callback!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n@@ -227,7 +222,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            lint_callback!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -237,14 +231,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n-        lint_callback!(self, check_infer, inf);\n         hir_visit::walk_inf(self, inf);\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: Symbol) {\n-        lint_callback!(self, check_name, sp, name);\n-    }\n-\n     fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         if !self.context.only_module {\n             self.process_mod(m, s, n);\n@@ -280,7 +269,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate<'tcx>) {\n-        lint_callback!(self, check_where_predicate, p);\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n@@ -300,7 +288,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(trait_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n-                lint_callback!(cx, check_trait_item_post, trait_item);\n             });\n         });\n         self.context.generics = generics;\n@@ -320,7 +307,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-        lint_callback!(self, check_lifetime, lt);\n         hir_visit::walk_lifetime(self, lt);\n     }\n "}, {"sha": "ae2088fbeb6f632e73955463fccca23e0cfd9e1a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -75,7 +75,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n };\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;"}, {"sha": "cb7bd407ed4c8670168f71f30a270de693004f9e", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -5,23 +5,19 @@ use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n     ($macro:path, $args:tt, [$hir:tt]) => (\n         $macro!($args, [$hir], [\n-            fn check_param(a: &$hir hir::Param<$hir>);\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n-            fn check_name(a: Span, b: Symbol);\n             fn check_crate();\n             fn check_crate_post();\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n-            fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n-            fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n             fn check_local(a: &$hir hir::Local<$hir>);\n@@ -33,35 +29,21 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n-            fn check_infer(a: &$hir hir::InferArg);\n-            fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n                 a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n-            fn check_fn_post(\n-                a: rustc_hir::intravisit::FnKind<$hir>,\n-                b: &$hir hir::FnDecl<$hir>,\n-                c: &$hir hir::Body<$hir>,\n-                d: Span,\n-                e: hir::HirId\n-            );\n             fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n-            fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n             fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n-            fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n             fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_variant_post(a: &$hir hir::Variant<$hir>);\n-            fn check_lifetime(a: &$hir hir::Lifetime);\n             fn check_path(a: &$hir hir::Path<$hir>, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n \n@@ -161,44 +143,25 @@ macro_rules! early_lint_methods {\n             fn check_ident(a: Ident);\n             fn check_crate(a: &ast::Crate);\n             fn check_crate_post(a: &ast::Crate);\n-            fn check_foreign_item(a: &ast::ForeignItem);\n-            fn check_foreign_item_post(a: &ast::ForeignItem);\n             fn check_item(a: &ast::Item);\n             fn check_item_post(a: &ast::Item);\n             fn check_local(a: &ast::Local);\n             fn check_block(a: &ast::Block);\n-            fn check_block_post(a: &ast::Block);\n             fn check_stmt(a: &ast::Stmt);\n             fn check_arm(a: &ast::Arm);\n             fn check_pat(a: &ast::Pat);\n-            fn check_anon_const(a: &ast::AnonConst);\n             fn check_pat_post(a: &ast::Pat);\n             fn check_expr(a: &ast::Expr);\n-            fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_where_predicate(a: &ast::WherePredicate);\n             fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n                                     b: &ast::TraitBoundModifier);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n-            fn check_fn_post(\n-                a: rustc_ast::visit::FnKind<'_>,\n-                c: Span,\n-                d: ast::NodeId\n-            );\n             fn check_trait_item(a: &ast::AssocItem);\n-            fn check_trait_item_post(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);\n-            fn check_impl_item_post(a: &ast::AssocItem);\n-            fn check_struct_def(a: &ast::VariantData);\n-            fn check_struct_def_post(a: &ast::VariantData);\n-            fn check_field_def(a: &ast::FieldDef);\n             fn check_variant(a: &ast::Variant);\n-            fn check_variant_post(a: &ast::Variant);\n-            fn check_lifetime(a: &ast::Lifetime);\n-            fn check_path(a: &ast::Path, b: ast::NodeId);\n             fn check_attribute(a: &ast::Attribute);\n             fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n             fn check_mac(a: &ast::MacCall);"}, {"sha": "6875600129a8ff211d41f4015954c647026bf15a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -132,6 +132,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 initializer_span,\n                                                 else_block,\n                                                 visibility_scope,\n+                                                *remainder_scope,\n                                                 remainder_span,\n                                                 pattern,\n                                             )"}, {"sha": "58b1564cc5d8ce3d600e1e5be4d57ffa6af65e7f", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -2282,49 +2282,55 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         initializer_span: Span,\n         else_block: &Block,\n         visibility_scope: Option<SourceScope>,\n+        remainder_scope: region::Scope,\n         remainder_span: Span,\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<()> {\n-        let scrutinee = unpack!(block = self.lower_scrutinee(block, init, initializer_span));\n-        let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n-        let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n-        self.declare_bindings(\n-            visibility_scope,\n-            remainder_span,\n-            pattern,\n-            ArmHasGuard(false),\n-            Some((None, initializer_span)),\n-        );\n-        let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n-        let fake_borrow_temps = self.lower_match_tree(\n-            block,\n-            initializer_span,\n-            pattern.span,\n-            false,\n-            &mut [&mut candidate, &mut wildcard],\n-        );\n-        // This block is for the matching case\n-        let matching = self.bind_pattern(\n-            self.source_info(pattern.span),\n-            candidate,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n-        // This block is for the failure case\n-        let failure = self.bind_pattern(\n-            self.source_info(else_block.span),\n-            wildcard,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n+        let (matching, failure) = self.in_if_then_scope(remainder_scope, |this| {\n+            let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n+            let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+            let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n+            this.declare_bindings(\n+                visibility_scope,\n+                remainder_span,\n+                pattern,\n+                ArmHasGuard(false),\n+                Some((None, initializer_span)),\n+            );\n+            let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n+            let fake_borrow_temps = this.lower_match_tree(\n+                block,\n+                initializer_span,\n+                pattern.span,\n+                false,\n+                &mut [&mut candidate, &mut wildcard],\n+            );\n+            // This block is for the matching case\n+            let matching = this.bind_pattern(\n+                this.source_info(pattern.span),\n+                candidate,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            // This block is for the failure case\n+            let failure = this.bind_pattern(\n+                this.source_info(else_block.span),\n+                wildcard,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            this.break_for_else(failure, remainder_scope, this.source_info(initializer_span));\n+            matching.unit()\n+        });\n+\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block."}, {"sha": "b2fd9f25bdde7964a692ae7aa5127ff29a5b9508", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n@@ -722,7 +722,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);"}, {"sha": "7125d141af7f5ad1672fd812c362c79864e6bb93", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -4,11 +4,21 @@\n //!\n //! Please ping @Lokathor if changes are needed.\n //!\n-//! This target profile assumes that you have the ARM binutils in your path (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free for all major OSes from the ARM developer's website, and they may also be available in your system's package manager. Unfortunately, the standard linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we must use the GNU `ld` linker.\n+//! This target profile assumes that you have the ARM binutils in your path\n+//! (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free\n+//! for all major OSes from the ARM developer's website, and they may also be\n+//! available in your system's package manager. Unfortunately, the standard\n+//! linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we\n+//! must use the GNU `ld` linker.\n //!\n-//! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n+//! **Important:** This target profile **does not** specify a linker script. You\n+//! just get the default link script when you build a binary for this target.\n+//! The default link script is very likely wrong, so you should use\n+//! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{cvs, LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{\n+    cvs, FramePointer, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions,\n+};\n \n pub fn target() -> Target {\n     Target {\n@@ -39,6 +49,14 @@ pub fn target() -> Target {\n             // minimum extra features, these cannot be disabled via -C\n             features: \"+soft-float,+strict-align\".into(),\n \n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: RelocModel::Static,\n+            // suggested from thumb_base, rust-lang/rust#44993.\n+            emit_debug_gdb_scripts: false,\n+            // suggested from thumb_base, with no-os gcc/clang use 8-bit enums\n+            c_enum_min_bits: 8,\n+            frame_pointer: FramePointer::MayOmit,\n+\n             main_needs_argc_argv: false,\n \n             // don't have atomic compare-and-swap"}, {"sha": "7ee3fe844b5a8cb1ce8071193f1237804c9b1809", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -531,6 +531,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);\n+                        self.suggest_dereferencing_index(&obligation, &mut err, trait_predicate);\n                         let mut suggested =\n                             self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);"}, {"sha": "1f72c96406de8fca1ee6f678c1ccd6eddf554ef3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -320,6 +320,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2895,6 +2902,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             );\n         }\n     }\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        if let ObligationCauseCode::ImplDerivedObligation(_) = obligation.cause.code()\n+            && self.tcx.is_diagnostic_item(sym::SliceIndex, trait_pred.skip_binder().trait_ref.def_id)\n+            && let ty::Slice(_) = trait_pred.skip_binder().trait_ref.substs.type_at(1).kind()\n+            && let ty::Ref(_, inner_ty, _) = trait_pred.skip_binder().self_ty().kind()\n+            && let ty::Uint(ty::UintTy::Usize) = inner_ty.kind()\n+        {\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_lo(),\n+            \"dereference this index\",\n+            '*',\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "df315b8a3bc3da7f2a6c9b8fa632440a85597f14", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -39,8 +39,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let scrut_diverges = self.diverges.replace(Diverges::Maybe);\n \n         // #55810: Type check patterns first so we get types for all bindings.\n+        let scrut_span = scrut.span.find_ancestor_inside(expr.span).unwrap_or(scrut.span);\n         for arm in arms {\n-            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut.span), true);\n+            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut_span), true);\n         }\n \n         // Now typecheck the blocks."}, {"sha": "65a562060ebfe23faf042ae05f9216ce7af44885", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -2648,6 +2648,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n+                    self.select_obligations_where_possible(false, |errors| {\n+                        self.point_at_index_if_possible(errors, idx.span)\n+                    });\n                     element_ty\n                 }\n                 None => {\n@@ -2691,6 +2694,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn point_at_index_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n+        span: Span,\n+    ) {\n+        for error in errors {\n+            match error.obligation.predicate.kind().skip_binder() {\n+                ty::PredicateKind::Trait(predicate)\n+                    if self.tcx.is_diagnostic_item(sym::SliceIndex, predicate.trait_ref.def_id) => {\n+                }\n+                _ => continue,\n+            }\n+            error.obligation.cause.span = span;\n+        }\n+    }\n+\n     fn check_expr_yield(\n         &self,\n         value: &'tcx hir::Expr<'tcx>,"}, {"sha": "abde4d9acfe1d36f56c82b6625796b5243370145", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1234,7 +1234,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Does the expected pattern type originate from an expression and what is the span?\n         let (origin_expr, ty_span) = match (decl.ty, decl.init) {\n             (Some(ty), _) => (false, Some(ty.span)), // Bias towards the explicit user type.\n-            (_, Some(init)) => (true, Some(init.span)), // No explicit type; so use the scrutinee.\n+            (_, Some(init)) => {\n+                (true, Some(init.span.find_ancestor_inside(decl.span).unwrap_or(init.span)))\n+            } // No explicit type; so use the scrutinee.\n             _ => (false, None), // We have `let $pat;`, so the expected type is unconstrained.\n         };\n "}, {"sha": "36111637a561c3a83d0a69702e00cb60e3640175", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -3165,9 +3165,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n     // #73631: closures inherit `#[target_feature]` annotations\n     if tcx.features().target_feature_11 && tcx.is_closure(did.to_def_id()) {\n         let owner_id = tcx.parent(did.to_def_id());\n-        codegen_fn_attrs\n-            .target_features\n-            .extend(tcx.codegen_fn_attrs(owner_id).target_features.iter().copied())\n+        if tcx.def_kind(owner_id).has_codegen_attrs() {\n+            codegen_fn_attrs\n+                .target_features\n+                .extend(tcx.codegen_fn_attrs(owner_id).target_features.iter().copied());\n+        }\n     }\n \n     // If a function uses #[target_feature] it can't be inlined into general"}, {"sha": "d168af60c2df0f96606f55831452326e2868e4c9", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -21,6 +21,7 @@\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n+    - [\\*-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)"}, {"sha": "61bd1b425bc35e420ce3e0506e35795dc77ed80d", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,295 @@\n+# `aarch64-fuchsia` and `x86_64-fuchsia`\n+\n+**Tier: 2**\n+\n+[Fuchsia] is a modern open source operating system that's simple, secure,\n+updatable, and performant.\n+\n+[Fuchsia]: https://fuchsia.dev/\n+\n+## Target maintainers\n+\n+The [Fuchsia team]:\n+\n+[Fuchsia team]: https://team-api.infra.rust-lang.org/v1/teams/fuchsia.json\n+\n+- Tyler Mandry ([@tmandry](https://github.com/tmandry))\n+- Dan Johnson ([@computerdruid](https://github.com/computerdruid))\n+- David Koloski ([@djkoloski](https://github.com/djkoloski))\n+- Andrew Pollack ([@andrewpollack](https://github.com/andrewpollack))\n+- Joseph Ryan ([@P1n3appl3](https://github.com/P1n3appl3))\n+\n+As the team evolves over time, the specific members listed here may differ from\n+the members reported by the API. The API should be considered to be\n+authoritative if this occurs. Instead of pinging individual members, use\n+`@rustbot ping fuchsia` to contact the team on GitHub.\n+\n+## Requirements\n+\n+This target is cross-compiled from a host environment. Development may be done\n+from the [source tree] or using the Fuchsia SDK.\n+\n+[source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build\n+\n+Fuchsia targets support std and follow the `sysv64` calling convention on\n+x86_64. Fuchsia binaries use the ELF file format.\n+\n+## Building the target\n+\n+Before building Rust for Fuchsia, you'll need a clang toolchain that supports\n+Fuchsia as well. A recent version (14+) of clang should be sufficient to compile\n+Rust for Fuchsia.\n+\n+You'll also need a recent copy of the [Fuchsia SDK], which provides the tools\n+and binaries required to build and link programs for Fuchsia.\n+\n+[Fuchsia SDK]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core\n+\n+x86-64 and AArch64 Fuchsia targets can be enabled using the following\n+configuration.\n+\n+In `config.toml`, add:\n+\n+```toml\n+[build]\n+target = [\"<host_platform>\", \"aarch64-fuchsia\", \"x86_64-fuchsia\"]\n+\n+[target.x86_64-fuchsia]\n+llvm-libunwind = \"in-tree\"\n+\n+[target.aarch64-fuchsia]\n+llvm-libunwind = \"in-tree\"\n+```\n+\n+Additionally, the following environment variables must be configured (for\n+example, using a script like `config-env.sh`):\n+\n+```sh\n+# Configure this environment variable to be the path to the downloaded SDK\n+export SDK_PATH=\"<SDK path goes here>\"\n+\n+export CFLAGS_aarch64_fuchsia=\"--target=aarch64-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -I${SDK_PATH}/pkg/fdio/include\"\n+export CXXFLAGS_aarch64_fuchsia=\"--target=aarch64-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -I${SDK_PATH}/pkg/fdio/include\"\n+export LDFLAGS_aarch64_fuchsia=\"--target=aarch64-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -L${SDK_PATH}/arch/arm64/lib\"\n+export CARGO_TARGET_AARCH64_FUCHSIA_RUSTFLAGS=\"-C link-arg=--sysroot=${SDK_PATH}/arch/arm64/sysroot -Lnative=${SDK_PATH}/arch/arm64/sysroot/lib -Lnative=${SDK_PATH}/arch/arm64/lib\"\n+export CFLAGS_x86_64_fuchsia=\"--target=x86_64-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -I${SDK_PATH}/pkg/fdio/include\"\n+export CXXFLAGS_x86_64_fuchsia=\"--target=x86_64-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -I${SDK_PATH}/pkg/fdio/include\"\n+export LDFLAGS_x86_64_fuchsia=\"--target=x86_64-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -L${SDK_PATH}/arch/x64/lib\"\n+export CARGO_TARGET_X86_64_FUCHSIA_RUSTFLAGS=\"-C link-arg=--sysroot=${SDK_PATH}/arch/x64/sysroot -Lnative=${SDK_PATH}/arch/x64/sysroot/lib -Lnative=${SDK_PATH}/arch/x64/lib\"\n+```\n+\n+These can be run together in a shell environment by executing\n+`(source config-env.sh && ./x.py install)`.\n+\n+## Building Rust programs\n+\n+After compiling Rust binaries, you'll need to build a component, package it, and\n+serve it to a Fuchsia device or emulator. All of this can be done using the\n+Fuchsia SDK.\n+\n+As an example, we'll compile and run this simple program on a Fuchsia emulator:\n+\n+**`hello_fuchsia.rs`**\n+```rust\n+fn main() {\n+    println!(\"Hello Fuchsia!\");\n+}\n+\n+#[test]\n+fn it_works() {\n+    assert_eq!(2 + 2, 4);\n+}\n+```\n+\n+Create a new file named `hello_fuchsia.rs` and fill out its contents with that\n+code.\n+\n+### Create a package\n+\n+On Fuchsia, a package is the unit of distribution for software. We'll need to\n+create a new package directory where we will place files like our finished\n+binary and any data it may need. The working directory will have this layout:\n+\n+```txt\n+hello_fuchsia.rs\n+hello_fuchsia.cml\n+package\n+\u2523\u2501 bin\n+\u2503  \u2517\u2501 hello_fuchsia\n+\u2523\u2501 meta\n+\u2503  \u2523\u2501 package\n+\u2503  \u2517\u2501 hello_fuchsia.cm\n+\u2517\u2501 hello_fuchsia.manifest\n+```\n+\n+Make the `package`, `package/bin`, and `package/meta` directories and create the\n+following files inside:\n+\n+**`package/meta/package`**\n+```json\n+{\"name\":\"hello_fuchsia\",\"version\":0}\n+```\n+\n+The `package` file describes our package's name and version number. Every\n+package must contain one.\n+\n+**`package/hello_fuchsia.manifest`**\n+```txt\n+bin/hello_fuchsia=package/bin/hello_fuchsia\n+lib/ld.so.1=<SDK_PATH>/arch/x64/sysroot/dist/lib/ld.so.1\n+lib/libfdio.so=<SDK_PATH>/arch/x64/dist/libfdio.so\n+meta/package=package/meta/package\n+meta/hello_fuchsia.cm=package/meta/hello_fuchsia.cm\n+```\n+\n+*Note: Relative manifest paths are resolved starting from the working directory\n+of `pm`. Make sure to fill out `<SDK_PATH>` with the path to the downloaded\n+SDK.*\n+\n+The `.manifest` file will be used to describe the contents of the package by\n+relating their location when installed to their location on the file system. You\n+can use this to make a package pull files from other places, but for this\n+example we'll just be placing everything in the `package` directory.\n+\n+### Compiling a binary\n+\n+Using your freshly compiled `rustc`, you can compile a binary for Fuchsia using\n+the following options:\n+\n+* `--target x86_64-fuchsia`/`--target aarch64-fuchsia`: Targets the Fuchsia\n+  platform of your choice\n+* `-Lnative ${SDK_PATH}/arch/${ARCH}/lib`: Link against Fuchsia libraries from\n+  the SDK\n+* `-Lnative ${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia kernel\n+  libraries from the SDK\n+\n+Putting it all together:\n+\n+```sh\n+# Configure these for the Fuchsia target of your choice\n+TARGET_ARCH=\"<x86_64-fuchsia|aarch64-fuchsia>\"\n+ARCH=\"<x64|aarch64>\"\n+\n+rustc --target ${TARGET_ARCH} -Lnative=${SDK_PATH}/arch/${ARCH}/lib -Lnative=${SDK_PATH}/arch/${ARCH}/sysroot/lib -o package/bin/hello_fuchsia hello_fuchsia.rs\n+```\n+\n+### Bulding a component\n+\n+On Fuchsia, components require a component manifest written in Fuchia's markup\n+language called CML. The Fuchsia devsite contains an [overview of CML] and a\n+[reference for the file format]. Here's a basic one that can run our single binary:\n+\n+[overview of CML]: https://fuchsia.dev/fuchsia-src/concepts/components/v2/component_manifests\n+[reference for the file format]: https://fuchsia.dev/reference/cml\n+\n+**`hello_fuchsia.cml`**\n+```txt\n+{\n+    include: [ \"syslog/client.shard.cml\" ],\n+    program: {\n+        runner: \"elf\",\n+        binary: \"bin/hello_fuchsia\",\n+    },\n+}\n+```\n+\n+Now we can compile that CML into a component manifest:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/cmc compile hello_fuchsia.cml --includepath ${SDK_PATH}/pkg -o package/meta/hello_fuchsia.cm\n+```\n+\n+`--includepath` tells the compiler where to look for `include`s from our CML.\n+In our case, we're only using `syslog/client.shard.cml`.\n+\n+### Building and publishing a package\n+\n+Next, we'll build our package as defined by our manifest:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/pm -o hello_fuchsia -m package/hello_fuchsia.manifest build -output-package-manifest hello_fuchsia_manifest\n+```\n+\n+This will produce `hello_fuchsia_manifest` which is a package manifest we can\n+publish directly to a repository. We can set up that repository with:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/pm newrepo -repo repo\n+```\n+\n+And then publish our new package to that repository with:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/pm publish -repo repo -lp -f <(echo \"hello_fuchsia_manifest\")\n+```\n+\n+Then we can add it to `ffx`'s package server as `hello-fuchsia` using:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx repository add-from-pm repo -r hello-fuchsia\n+```\n+\n+### Starting the emulator\n+\n+Start a Fuchsia emulator in a new terminal using:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx product-bundle get workstation_eng.qemu-${ARCH}\n+${SDK_PATH}/tools/${ARCH}/ffx emu start workstation_eng.qemu-${ARCH} --headless\n+```\n+\n+Then, once the emulator has been started:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx target repository register\n+```\n+\n+And watch the logs from the emulator in a separate terminal:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx log --since now\n+```\n+\n+Finally, run the component:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx component run fuchsia-pkg://hello-fuchsia/hello_fuchsia#meta/hello_fuchsia.cm\n+```\n+\n+On reruns of the component, the `--recreate` argument may also need to be\n+passed.\n+\n+## Testing\n+\n+### Running unit tests\n+\n+Tests can be run in the same way as a regular binary, simply by passing `--test`\n+to the `rustc` invocation and then repackaging and rerunning. The test harness\n+will run the applicable unit tests.\n+\n+Often when testing, you may want to pass additional command line arguments to\n+your binary. Additional arguments can be set in the component manifest:\n+\n+**`hello_fuchsia.cml`**\n+```txt\n+{\n+    include: [ \"syslog/client.shard.cml\" ],\n+    program: {\n+        runner: \"elf\",\n+        binary: \"bin/hello_fuchsia\",\n+        args: [\"it_works\"],\n+    },\n+}\n+```\n+\n+This will pass the argument `it_works` to the binary, filtering the tests to\n+only those tests that match the pattern. There are many more configuration\n+options available in CML including environment variables. More documentation is\n+available on the [Fuchsia devsite](https://fuchsia.dev/reference/cml).\n+\n+### Running the compiler test suite\n+\n+Running the Rust test suite on Fuchsia is [not currently supported], but work is\n+underway to enable it.\n+\n+[not currently supported]: https://fxbug.dev/105393"}, {"sha": "547d6696a431d26a81a69aa0cdbde0a6c06ee79f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -311,7 +311,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n-                 </h2>\\n{}\",\n+                 </h2>{}\",\n                 ITEM_TABLE_OPEN,\n                 id = cx.derive_id(my_section.id().to_owned()),\n                 name = my_section.name(),\n@@ -415,10 +415,10 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}module-item\\\">\\\n-                            <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n-                            {visibility_emoji}\\\n-                            {unsafety_flag}\\\n-                            {stab_tags}\\\n+                        <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n+                        {visibility_emoji}\\\n+                        {unsafety_flag}\\\n+                        {stab_tags}\\\n                      </div>\\\n                      <div class=\\\"item-right docblock-short\\\">{docs}</div>\",\n                     name = myitem.name.unwrap(),\n@@ -1126,7 +1126,8 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n         write!(\n             w,\n             \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n-                   Fields<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\"\n+                Fields<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a>\\\n+            </h2>\"\n         );\n         for (field, ty) in fields {\n             let name = field.name.expect(\"union field name\");\n@@ -1238,7 +1239,8 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n         write!(\n             w,\n             \"<h2 id=\\\"variants\\\" class=\\\"variants small-section-header\\\">\\\n-                   Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a></h2>\",\n+                Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a>\\\n+            </h2>\",\n             document_non_exhaustive_header(it)\n         );\n         document_non_exhaustive(w, it);\n@@ -1294,9 +1296,9 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                 w,\n                                 \"<div class=\\\"sub-variant-field\\\">\\\n                                  <span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                    <code>{f}:&nbsp;{t}</code>\\\n-                                </span>\",\n+                                     <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                                     <code>{f}:&nbsp;{t}</code>\\\n+                                 </span>\",\n                                 id = id,\n                                 f = field.name.unwrap(),\n                                 t = ty.print(cx)"}, {"sha": "8e25f6764a9c51faf6e20d2b8c2a03623eb31015", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -82,10 +82,10 @@\n             {%- else -%}\n                 <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n             {%- endif -%}\n-            </div>\n+            </div> {#- -#}\n         </a> {#- -#}\n-        <h2 class=\"location\"></h2>\n-    </nav>\n+        <h2 class=\"location\"></h2> {#- -#}\n+    </nav> {#- -#}\n     <nav class=\"sidebar\"> {#- -#}\n         <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n             <div class=\"logo-container\"> {#- -#}\n@@ -94,7 +94,7 @@ <h2 class=\"location\"></h2>\n                 {%- else -%}\n                     <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n                 {%- endif -%}\n-            </div>\n+            </div> {#- -#}\n         </a> {#- -#}\n         {{- sidebar|safe -}}\n     </nav> {#- -#}\n@@ -122,12 +122,12 @@ <h2 class=\"location\"></h2>\n                             <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n                                 <button type=\"button\">?</button> {#- -#}\n                             </div> {#- -#}\n-                            <div id=\"settings-menu\" tabindex=\"-1\">\n+                            <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n                                 <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n                                     <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n                                      src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n                                 </a> {#- -#}\n-                            </div>\n+                            </div> {#- -#}\n                         </div> {#- -#}\n                     </form> {#- -#}\n                 </nav> {#- -#}\n@@ -143,6 +143,6 @@ <h2 class=\"location\"></h2>\n          data-resource-suffix=\"{{page.resource_suffix}}\" {# -#}\n          data-rustdoc-version=\"{{rustdoc_version}}\" {# -#}\n     > {#- -#}\n-    </div>\n+    </div> {#- -#}\n </body> {#- -#}\n </html> {#- -#}"}, {"sha": "c755157d27687595327c52ce4e3811530887df17", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"main-heading\">\n+<div class=\"main-heading\"> {#- -#}\n     <h1 class=\"fqn\"> {#- -#}\n         <span class=\"in-band\"> {#- -#}\n             {{-typ-}}\n@@ -27,4 +27,4 @@ <h1 class=\"fqn\"> {#- -#}\n             [<span class=\"inner\">&#x2212;</span>] {#- -#}\n         </a> {#- -#}\n     </span> {#- -#}\n-</div>\n+</div> {#- -#}"}, {"sha": "b36f4dab8291db56a6dc355e253f4e34910af8f2", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `i32`\n-  --> $DIR/index-help.rs:3:5\n+  --> $DIR/index-help.rs:3:7\n    |\n LL |     x[0i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "fbff20f8deeabec8f35eea6fa09af31f19c5e767", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `u8`\n-  --> $DIR/indexing-requires-a-uint.rs:6:5\n+  --> $DIR/indexing-requires-a-uint.rs:6:9\n    |\n LL |     [0][0u8];\n-   |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |         ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "3f9094d124eea340fd9782dfea7aaebdf02fcf53", "filename": "src/test/ui/integral-indexing.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-indexing.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,78 +1,78 @@\n error[E0277]: the type `[isize]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:6:5\n+  --> $DIR/integral-indexing.rs:6:7\n    |\n LL |     v[3u8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:7:5\n+  --> $DIR/integral-indexing.rs:7:7\n    |\n LL |     v[3i8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:8:5\n+  --> $DIR/integral-indexing.rs:8:7\n    |\n LL |     v[3u32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:9:5\n+  --> $DIR/integral-indexing.rs:9:7\n    |\n LL |     v[3i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `Vec<isize>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:12:5\n+  --> $DIR/integral-indexing.rs:12:18\n    |\n LL |     s.as_bytes()[3u8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:13:5\n+  --> $DIR/integral-indexing.rs:13:18\n    |\n LL |     s.as_bytes()[3i8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:14:5\n+  --> $DIR/integral-indexing.rs:14:18\n    |\n LL |     s.as_bytes()[3u32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:15:5\n+  --> $DIR/integral-indexing.rs:15:18\n    |\n LL |     s.as_bytes()[3i32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "3910d35e77676b7391c4057569fe531c011db54f", "filename": "src/test/ui/let-else/let-else-temp-borrowck.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+//\n+// from issue #93951, where borrowck complained the temporary that `foo(&x)` was stored in was to\n+// be dropped sometime after `x` was. It then suggested adding a semicolon that was already there.\n+\n+#![feature(let_else)]\n+use std::fmt::Debug;\n+\n+fn foo<'a>(x: &'a str) -> Result<impl Debug + 'a, ()> {\n+    Ok(x)\n+}\n+\n+fn let_else() {\n+    let x = String::from(\"Hey\");\n+    let Ok(_) = foo(&x) else { return };\n+}\n+\n+fn if_let() {\n+    let x = String::from(\"Hey\");\n+    let _ = if let Ok(s) = foo(&x) { s } else { return };\n+}\n+\n+fn main() {\n+    let_else();\n+    if_let();\n+}"}, {"sha": "9c86901b97f034ef2020dd6c348772f5d40a7f96", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n #![feature(let_else)]\n \n+use std::fmt::Display;\n+use std::rc::Rc;\n use std::sync::atomic::{AtomicU8, Ordering};\n \n static TRACKER: AtomicU8 = AtomicU8::new(0);\n@@ -17,9 +19,70 @@ impl Drop for Droppy {\n     }\n }\n \n+fn foo<'a>(x: &'a str) -> Result<impl Display + 'a, ()> {\n+    Ok(x)\n+}\n+\n fn main() {\n     assert_eq!(TRACKER.load(Ordering::Acquire), 0);\n     let 0 = Droppy::default().inner else { return };\n     assert_eq!(TRACKER.load(Ordering::Acquire), 1);\n     println!(\"Should have dropped \ud83d\udc46\");\n+\n+    {\n+        // cf. https://github.com/rust-lang/rust/pull/99518#issuecomment-1191520030\n+        struct Foo<'a>(&'a mut u32);\n+\n+        impl<'a> Drop for Foo<'a> {\n+            fn drop(&mut self) {\n+                *self.0 = 0;\n+            }\n+        }\n+        let mut foo = 0;\n+        let Foo(0) = Foo(&mut foo) else {\n+            *&mut foo = 1;\n+            todo!()\n+        };\n+    }\n+    {\n+        let x = String::from(\"Hey\");\n+\n+        let Ok(s) = foo(&x) else { panic!() };\n+        assert_eq!(s.to_string(), x);\n+    }\n+    {\n+        // test let-else drops temps after statement\n+        let rc = Rc::new(0);\n+        let 0 = *rc.clone() else { unreachable!() };\n+        Rc::try_unwrap(rc).unwrap();\n+    }\n+    {\n+        let mut rc = Rc::new(0);\n+        let mut i = 0;\n+        loop {\n+            if i > 3 {\n+                break;\n+            }\n+            let 1 = *rc.clone() else {\n+                if let Ok(v) = Rc::try_unwrap(rc) {\n+                    rc = Rc::new(v);\n+                } else {\n+                    panic!()\n+                }\n+                i += 1;\n+                continue\n+            };\n+        }\n+    }\n+    {\n+        // test let-else drops temps before else block\n+        // NOTE: this test has to be the last block in the `main`\n+        // body.\n+        let rc = Rc::new(0);\n+        let 1 = *rc.clone() else {\n+            Rc::try_unwrap(rc).unwrap();\n+            return;\n+        };\n+        unreachable!();\n+    }\n }"}, {"sha": "72f67a685156dba2f8652ef43d7dc9270def6699", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:8:5\n+  --> $DIR/slice-index.rs:8:7\n    |\n LL |     x[1i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `RangeTo<i32>`\n-  --> $DIR/slice-index.rs:9:5\n+  --> $DIR/slice-index.rs:9:7\n    |\n LL |     x[..1i32];\n-   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n    = help: the following other types implement trait `SliceIndex<T>`:"}, {"sha": "033dcdfc08db036e397eb0110d9507ae7a6bbd2d", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/issue-99876.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(target_feature_11)]\n+\n+struct S<T>(T)\n+where\n+    [T; (|| {}, 1).1]: Copy;\n+\n+fn main() {}"}, {"sha": "9079a18d6a67b80cc37ff515f26a1b672b9c97c1", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:3:17\n+  --> $DIR/str-idx.rs:3:19\n    |\n LL |     let _: u8 = s[4];\n-   |                 ^^^^ string indices are ranges of `usize`\n+   |                   ^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n@@ -47,10 +47,10 @@ LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i:\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-idx.rs:6:17\n+  --> $DIR/str-idx.rs:6:19\n    |\n LL |     let _: u8 = s['c'];\n-   |                 ^^^^^^ string indices are ranges of `usize`\n+   |                   ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "2d062e56a9bdd121b9f2f1924eca64323a7a479d", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -25,10 +25,10 @@ LL |     s[1..2] = bot();\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be indexed by `usize`\n-  --> $DIR/str-mut-idx.rs:7:5\n+  --> $DIR/str-mut-idx.rs:7:7\n    |\n LL |     s[1usize] = bot();\n-   |     ^^^^^^^^^ string indices are ranges of `usize`\n+   |       ^^^^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n@@ -71,10 +71,10 @@ LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-mut-idx.rs:13:5\n+  --> $DIR/str-mut-idx.rs:13:7\n    |\n LL |     s['c'];\n-   |     ^^^^^^ string indices are ranges of `usize`\n+   |       ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "f8144641f3c314823101338489efd16a7f06efc7", "filename": "src/test/ui/suggestions/pattern-slice-vec.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -24,4 +24,8 @@ fn main() {\n         //~^ ERROR: expected an array or slice\n         _ => {}\n     }\n+\n+    let [..] = vec![1, 2, 3][..];\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n }"}, {"sha": "444687c85789ee75a84091d59e2c36d7fcb748c2", "filename": "src/test/ui/suggestions/pattern-slice-vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -24,4 +24,8 @@ fn main() {\n         //~^ ERROR: expected an array or slice\n         _ => {}\n     }\n+\n+    let [..] = vec![1, 2, 3];\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n }"}, {"sha": "f69e7de971a961a5705f5412842191dae09ca438", "filename": "src/test/ui/suggestions/pattern-slice-vec.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -31,6 +31,14 @@ LL |\n LL |         [5] => {}\n    |         ^^^ pattern cannot match with input type `Vec<_>`\n \n-error: aborting due to 4 previous errors\n+error[E0529]: expected an array or slice, found `Vec<{integer}>`\n+  --> $DIR/pattern-slice-vec.rs:28:9\n+   |\n+LL |     let [..] = vec![1, 2, 3];\n+   |         ^^^^   ------------- help: consider slicing here: `vec![1, 2, 3][..]`\n+   |         |\n+   |         pattern cannot match with input type `Vec<{integer}>`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0529`."}, {"sha": "dd4ae4eb14c3051c3911be0e5ee80a8721c1ceee", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][*i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "82ebacc49f235cccdb16f58fa1d76b4917241b0d", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "c8b87af7bd80c76ecc1e9233fedf6985f5a7bebf", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f68c43ca6a6381a4d73f887f112e9fb95769905/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr?ref=8f68c43ca6a6381a4d73f887f112e9fb95769905", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the type `[{integer}]` cannot be indexed by `&usize`\n+  --> $DIR/suggest-dereferencing-index.rs:6:42\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][i];\n+   |                                          ^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&usize`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+   = note: required because of the requirements on the impl of `Index<&usize>` for `[{integer}]`\n+help: dereference this index\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][*i];\n+   |                                          +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}