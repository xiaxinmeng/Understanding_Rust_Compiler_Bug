{"sha": "2ceb92bc53a849e36341c3fd619cb49470e224e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWI5MmJjNTNhODQ5ZTM2MzQxYzNmZDYxOWNiNDk0NzBlMjI0ZTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-20T15:38:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-23T12:15:15Z"}, "message": "Make drop-glue take advantage of -Zshare-generics.", "tree": {"sha": "34b98766b88b3740251bb9d9991aa22b2321b337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b98766b88b3740251bb9d9991aa22b2321b337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ceb92bc53a849e36341c3fd619cb49470e224e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ceb92bc53a849e36341c3fd619cb49470e224e2", "html_url": "https://github.com/rust-lang/rust/commit/2ceb92bc53a849e36341c3fd619cb49470e224e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ceb92bc53a849e36341c3fd619cb49470e224e2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190f0c0b0babaef16c97aea87189f89fa0481fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/190f0c0b0babaef16c97aea87189f89fa0481fba", "html_url": "https://github.com/rust-lang/rust/commit/190f0c0b0babaef16c97aea87189f89fa0481fba"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "7e888a271e316e5f0134967b2d61ccf16fcbccad", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=2ceb92bc53a849e36341c3fd619cb49470e224e2", "patch": "@@ -5,7 +5,7 @@ use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n use rustc::session::config::{self, Sanitizer};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::SubstsRef;\n+use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n use rustc_codegen_utils::symbol_names;\n@@ -248,19 +248,31 @@ fn exported_symbols_provider_local(\n                 continue;\n             }\n \n-            if let &MonoItem::Fn(Instance { def: InstanceDef::Item(def_id), substs }) = mono_item {\n-                if substs.non_erasable_generics().next().is_some() {\n-                    symbols\n-                        .push((ExportedSymbol::Generic(def_id, substs), SymbolExportLevel::Rust));\n+            match *mono_item {\n+                MonoItem::Fn(Instance { def: InstanceDef::Item(def_id), substs }) => {\n+                    if substs.non_erasable_generics().next().is_some() {\n+                        let symbol = ExportedSymbol::Generic(def_id, substs);\n+                        symbols.push((symbol, SymbolExportLevel::Rust));\n+                    }\n+                }\n+                MonoItem::Fn(Instance { def: InstanceDef::DropGlue(def_id, Some(ty)), substs }) => {\n+                    // A little sanity-check\n+                    debug_assert_eq!(\n+                        substs.non_erasable_generics().next(),\n+                        Some(GenericArgKind::Type(ty))\n+                    );\n+                    let symbol = ExportedSymbol::Generic(def_id, substs);\n+                    symbols.push((symbol, SymbolExportLevel::Rust));\n+                }\n+                _ => {\n+                    // Any other symbols don't qualify for sharing\n                 }\n             }\n         }\n     }\n \n     // Sort so we get a stable incr. comp. hash.\n-    symbols.sort_unstable_by(|&(ref symbol1, ..), &(ref symbol2, ..)| {\n-        symbol1.compare_stable(tcx, symbol2)\n-    });\n+    symbols.sort_by_cached_key(|s| s.0.symbol_name_for_local_instance(tcx));\n \n     Arc::new(symbols)\n }"}, {"sha": "91e685babbcdd514dc38c3413775babd5b187e6a", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=2ceb92bc53a849e36341c3fd619cb49470e224e2", "patch": "@@ -713,7 +713,8 @@ fn visit_instance_use<'tcx>(\n // need a mono item.\n fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n     let def_id = match instance.def {\n-        ty::InstanceDef::Item(def_id) => def_id,\n+        ty::InstanceDef::Item(def_id) | ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n+\n         ty::InstanceDef::VtableShim(..)\n         | ty::InstanceDef::ReifyShim(..)\n         | ty::InstanceDef::ClosureOnceShim { .. }\n@@ -725,12 +726,14 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx\n     };\n \n     if tcx.is_foreign_item(def_id) {\n-        // We can always link to foreign items.\n+        // Foreign items are always linked against, there's no way of\n+        // instantiating them.\n         return false;\n     }\n \n     if def_id.is_local() {\n-        // Local items cannot be referred to locally without monomorphizing them locally.\n+        // Local items cannot be referred to locally without\n+        // monomorphizing them locally.\n         return true;\n     }\n \n@@ -745,6 +748,7 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx\n     if !tcx.is_mir_available(def_id) {\n         bug!(\"cannot create local mono-item for {:?}\", def_id)\n     }\n+\n     return true;\n \n     fn is_available_upstream_generic<'tcx>("}, {"sha": "8bcf420e2aa370feec4f2040f180992a95213f1e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=2ceb92bc53a849e36341c3fd619cb49470e224e2", "patch": "@@ -324,7 +324,7 @@ fn mono_item_visibility(\n     };\n \n     let def_id = match instance.def {\n-        InstanceDef::Item(def_id) => def_id,\n+        InstanceDef::Item(def_id) | InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n         InstanceDef::VtableShim(..)"}, {"sha": "ffbd0dc54844913a1f562c5b05c707d8879337c1", "filename": "src/test/codegen-units/partitioning/auxiliary/shared_generics_aux.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs?ref=2ceb92bc53a849e36341c3fd619cb49470e224e2", "patch": "@@ -1,4 +1,6 @@\n-// compile-flags:-Zshare-generics=yes\n+// NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n+//       prevent drop-glue from participating in share-generics.\n+// compile-flags:-Zshare-generics=yes -Copt-level=0\n // no-prefer-dynamic\n \n #![crate_type=\"rlib\"]\n@@ -8,5 +10,17 @@ pub fn generic_fn<T>(x: T, y: T) -> (T, T) {\n }\n \n pub fn use_generic_fn_f32() -> (f32, f32) {\n+    // This line causes drop glue for Foo to be instantiated. We want to make\n+    // sure that this crate exports an instance to be re-used by share-generics.\n+    let _ = Foo(0);\n+\n     generic_fn(0.0f32, 1.0f32)\n }\n+\n+pub struct Foo(pub u32);\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"foo\");\n+    }\n+}"}, {"sha": "47ff94437ff37a0200b751fdbad0c7949285e0cd", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceb92bc53a849e36341c3fd619cb49470e224e2/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=2ceb92bc53a849e36341c3fd619cb49470e224e2", "patch": "@@ -1,6 +1,8 @@\n // ignore-tidy-linelength\n // no-prefer-dynamic\n-// compile-flags:-Zprint-mono-items=eager -Zshare-generics=yes -Zincremental=tmp/partitioning-tests/shared-generics-exe\n+// NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n+//       prevent drop-glue from participating in share-generics.\n+// compile-flags:-Zprint-mono-items=eager -Zshare-generics=yes -Zincremental=tmp/partitioning-tests/shared-generics-exe -Copt-level=0\n \n #![crate_type=\"rlib\"]\n \n@@ -16,6 +18,10 @@ pub fn foo() {\n     // This should not generate a monomorphization because it's already\n     // available in `shared_generics_aux`.\n     let _ = shared_generics_aux::generic_fn(0.0f32, 3.0f32);\n-}\n \n-// MONO_ITEM drop-glue i8\n+    // The following line will drop an instance of `Foo`, generating a call to\n+    // Foo's drop-glue function. However, share-generics should take care of\n+    // reusing the drop-glue from the upstream crate, so we do not expect a\n+    // mono item for the drop-glue\n+    let _ = shared_generics_aux::Foo(1);\n+}"}]}