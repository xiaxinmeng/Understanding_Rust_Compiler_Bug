{"sha": "3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NjBlYWJiYjY0ZDJiNTNiMWEwNWJkNGRiYTk2YWM3NzUxNDQxZjM=", "commit": {"author": {"name": "toidiu", "email": "apoorv@toidiu.com", "date": "2018-08-17T00:12:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-23T18:35:59Z"}, "message": "fix for late-bound regions", "tree": {"sha": "3692c1cfe740a702b294457e2925eb618ba5fe47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3692c1cfe740a702b294457e2925eb618ba5fe47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "html_url": "https://github.com/rust-lang/rust/commit/3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/comments", "author": {"login": "toidiu", "id": 4350690, "node_id": "MDQ6VXNlcjQzNTA2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4350690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidiu", "html_url": "https://github.com/toidiu", "followers_url": "https://api.github.com/users/toidiu/followers", "following_url": "https://api.github.com/users/toidiu/following{/other_user}", "gists_url": "https://api.github.com/users/toidiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidiu/subscriptions", "organizations_url": "https://api.github.com/users/toidiu/orgs", "repos_url": "https://api.github.com/users/toidiu/repos", "events_url": "https://api.github.com/users/toidiu/events{/privacy}", "received_events_url": "https://api.github.com/users/toidiu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5284b0b57275cb18618ef1532ee7f07c32a1e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5284b0b57275cb18618ef1532ee7f07c32a1e18", "html_url": "https://github.com/rust-lang/rust/commit/e5284b0b57275cb18618ef1532ee7f07c32a1e18"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "8ab9686f6f834b8e7020d1b824e5e456d877f427", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "patch": "@@ -12,7 +12,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::subst::{Kind, Subst, UnpackedKind};\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::util::nodemap::FxHashMap;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -208,14 +208,26 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 debug!(\"field_ty = {}\", &field_ty);\n                 debug!(\"ty in field = {}\", &ty);\n                 if let Some(ex_trait_ref) = obj.principal() {\n-                    check_explicit_predicates(\n-                        tcx,\n-                        &ex_trait_ref.skip_binder().def_id,\n-                        ex_trait_ref.with_self_ty(tcx, ty).skip_binder().substs,\n-                        required_predicates,\n-                        explicit_map,\n-                        true,\n-                    );\n+                    // The method `has_escaping_regions` checks if\n+                    // there are any late-bound regions, which is\n+                    // the lifetime `'r`. It is safe to ignore\n+                    // these since `'r` is not in scope for `Foo`.\n+                    //\n+                    // ```\n+                    // struct Foo {\n+                    //   bar: for<'r> Fn(usize, &'r FnMut())\n+                    // }\n+                    // ```\n+                    if !ty.has_escaping_regions() {\n+                        check_explicit_predicates(\n+                            tcx,\n+                            &ex_trait_ref.skip_binder().def_id,\n+                            ex_trait_ref.with_self_ty(tcx, ty).skip_binder().substs,\n+                            required_predicates,\n+                            explicit_map,\n+                            true,\n+                        );\n+                    }\n                 }\n             }\n "}, {"sha": "1b6d51d2b02806d74a73e57b6b5cabe2c67b04fa", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "patch": "@@ -59,8 +59,7 @@ fn inferred_outlives_of<'a, 'tcx>(\n                             ty::Predicate::TypeOutlives(p) => p.to_string(),\n \n                             err => bug!(\"unexpected predicate {:?}\", err),\n-                        })\n-                        .collect();\n+                        }).collect();\n                     pred.sort();\n \n                     let span = tcx.def_span(item_def_id);\n@@ -117,11 +116,9 @@ fn inferred_outlives_crate<'tcx>(\n                             ty::Binder::bind(ty::OutlivesPredicate(region1, region2)),\n                         ),\n                     },\n-                )\n-                .collect();\n+                ).collect();\n             (def_id, Lrc::new(vec))\n-        })\n-        .collect();\n+        }).collect();\n \n     let empty_predicate = Lrc::new(Vec::new());\n "}, {"sha": "e4ade1b6323b7b30023a06bfba6b1fbea9e76126", "filename": "src/test/ui/issue-53419.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Ftest%2Fui%2Fissue-53419.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3860eabbb64d2b53b1a05bd4dba96ac7751441f3/src%2Ftest%2Fui%2Fissue-53419.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53419.rs?ref=3860eabbb64d2b53b1a05bd4dba96ac7751441f3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//compile-pass\n+\n+#![feature(infer_outlives_requirements)]\n+\n+struct Foo {\n+    bar: for<'r> Fn(usize, &'r FnMut())\n+}\n+\n+fn main() {\n+}\n+"}]}