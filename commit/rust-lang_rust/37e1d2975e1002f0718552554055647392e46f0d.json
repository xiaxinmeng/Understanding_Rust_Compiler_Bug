{"sha": "37e1d2975e1002f0718552554055647392e46f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTFkMjk3NWUxMDAyZjA3MTg1NTI1NTQwNTU2NDczOTJlNDZmMGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-20T20:18:17Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-10-23T02:45:36Z"}, "message": "Don't rerun Mir passes when inlining\n\nWhen inlining a function using the Mir inliner, we shouldn't rerun the\nvarious Mir passes on it because the Mir has already been lowered and\nthat wil break various early Mir passes.\n\nThe issue in #50411 is that we've inlined a function with promotions\nwhose Mir has already been lowered. The promotions are then copied into\nthe local function and we begin to run passes on their lowered Mir\nwhich causes the ICE.\n\nFixes #50411", "tree": {"sha": "325e5684e64e52ea2cef7c01157ed97958e40721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325e5684e64e52ea2cef7c01157ed97958e40721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e1d2975e1002f0718552554055647392e46f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e1d2975e1002f0718552554055647392e46f0d", "html_url": "https://github.com/rust-lang/rust/commit/37e1d2975e1002f0718552554055647392e46f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e1d2975e1002f0718552554055647392e46f0d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "html_url": "https://github.com/rust-lang/rust/commit/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "797836f166173f0366e7838afe7ce65cb3cca6b2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37e1d2975e1002f0718552554055647392e46f0d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1d2975e1002f0718552554055647392e46f0d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=37e1d2975e1002f0718552554055647392e46f0d", "patch": "@@ -69,13 +69,31 @@ impl<'tcx> HasLocalDecls<'tcx> for Mir<'tcx> {\n     }\n }\n \n+/// The various \"big phases\" that MIR goes through.\n+///\n+/// Warning: ordering of variants is significant\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum MirPhase {\n+    Build,\n+    Const,\n+    Validated,\n+    Optimized,\n+}\n+\n /// Lowered representation of a single function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mir<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n \n+    /// Records how far through the \"desugaring and optimization\" process this particular\n+    /// MIR has traversed. This is particularly useful when inlining, since in that context\n+    /// we instantiate the promoted constants and add them to our promoted vector -- but those\n+    /// promoted items have already been optimized, whereas ours have not. This field allows\n+    /// us to see the difference and forego optimization on the inlined promoted items.\n+    pub phase: MirPhase,\n+\n     /// List of source scopes; these are referenced by statements\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n     pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n@@ -151,6 +169,7 @@ impl<'tcx> Mir<'tcx> {\n         );\n \n         Mir {\n+            phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n             source_scope_local_data,\n@@ -368,6 +387,7 @@ pub enum Safety {\n }\n \n impl_stable_hash_for!(struct Mir<'tcx> {\n+    phase,\n     basic_blocks,\n     source_scopes,\n     source_scope_local_data,\n@@ -616,6 +636,13 @@ impl_stable_hash_for!(enum self::ImplicitSelfKind {\n     None\n });\n \n+impl_stable_hash_for!(enum self::MirPhase {\n+    Build,\n+    Const,\n+    Validated,\n+    Optimized,\n+});\n+\n mod binding_form_impl {\n     use ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n@@ -2777,6 +2804,7 @@ pub enum ClosureOutlivesSubject<'tcx> {\n \n CloneTypeFoldableAndLiftImpls! {\n     BlockTailInfo,\n+    MirPhase,\n     Mutability,\n     SourceInfo,\n     UpvarDecl,\n@@ -2789,6 +2817,7 @@ CloneTypeFoldableAndLiftImpls! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n+        phase,\n         basic_blocks,\n         source_scopes,\n         source_scope_local_data,"}, {"sha": "61e150ea12a2261837519190bbc905806bff5b38", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37e1d2975e1002f0718552554055647392e46f0d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1d2975e1002f0718552554055647392e46f0d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=37e1d2975e1002f0718552554055647392e46f0d", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::nll::type_check;\n use build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{Mir, Promoted};\n+use rustc::mir::{Mir, MirPhase, Promoted};\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -155,9 +155,22 @@ pub trait MirPass {\n                           mir: &mut Mir<'tcx>);\n }\n \n-pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $($pass:expr,)*) {{\n+pub macro run_passes(\n+    $tcx:ident,\n+    $mir:ident,\n+    $def_id:ident,\n+    $suite_index:expr,\n+    $mir_phase:expr;\n+    $($pass:expr,)*\n+) {{\n     let suite_index: usize = $suite_index;\n     let run_passes = |mir: &mut _, promoted| {\n+        let mir: &mut Mir<'_> = mir;\n+\n+        if mir.phase >= $mir_phase {\n+            return;\n+        }\n+\n         let source = MirSource {\n             def_id: $def_id,\n             promoted\n@@ -175,6 +188,8 @@ pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $\n             index += 1;\n         };\n         $(run_pass(&$pass);)*\n+\n+        mir.phase = $mir_phase;\n     };\n \n     run_passes(&mut $mir, None);\n@@ -192,7 +207,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    run_passes![tcx, mir, def_id, 0;\n+    run_passes![tcx, mir, def_id, 0, MirPhase::Const;\n         // Remove all `EndRegion` statements that are not involved in borrows.\n         cleanup_post_borrowck::CleanEndRegions,\n \n@@ -214,7 +229,7 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes![tcx, mir, def_id, 1;\n+    run_passes![tcx, mir, def_id, 1, MirPhase::Validated;\n         // What we need to run borrowck etc.\n         qualify_consts::QualifyAndPromoteConstants,\n         simplify::SimplifyCfg::new(\"qualify-consts\"),\n@@ -232,7 +247,7 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    run_passes![tcx, mir, def_id, 2;\n+    run_passes![tcx, mir, def_id, 2, MirPhase::Optimized;\n         // Remove all things not needed by analysis\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),"}, {"sha": "1ba47d3b932ef70171f87e442d6d9fbdc506bc57", "filename": "src/test/ui/issues/issue-50411.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37e1d2975e1002f0718552554055647392e46f0d/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e1d2975e1002f0718552554055647392e46f0d/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs?ref=37e1d2975e1002f0718552554055647392e46f0d", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #50411: the MIR inliner was causing problems\n+// here because it would inline promoted code (which had already had\n+// elaborate-drops invoked on it) and then try to elaboate drops a\n+// second time. Uncool.\n+\n+// compile-flags:-Zmir-opt-level=3\n+// compile-pass\n+\n+fn main() {\n+    let _ = (0 .. 1).filter(|_| [1].iter().all(|_| true)).count();\n+}"}]}