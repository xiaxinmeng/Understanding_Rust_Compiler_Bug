{"sha": "63cba43b485cd9b4821c31d089bcc73eecc59586", "node_id": "C_kwDOAAsO6NoAKDYzY2JhNDNiNDg1Y2Q5YjQ4MjFjMzFkMDg5YmNjNzNlZWNjNTk1ODY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-26T13:52:04Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-27T10:18:59Z"}, "message": "Collect generic arguments in associated type bindings", "tree": {"sha": "84c7faf7634cd82ffa339379a7c88183f31ef619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c7faf7634cd82ffa339379a7c88183f31ef619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63cba43b485cd9b4821c31d089bcc73eecc59586", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNaWxMACgkQ4laYqTBY\nYXE5gQ//aFouFPvFtN0Rfc1Tz6jk0neJqScUAaqLmAKSajOyFEVuS0xIjGfM46pV\n6+8i6A8IU2/1E1GSdXkTSAKUwgRzZBz97nFlsozmLy5Zf2HXYYyiseJAaOCSi4gC\nUeVwSnvCtI6Wms0NQYNErSpY7SHHKMf17VILYMJxDXcUIiYJ6T+GR2MHNEE9BHho\nVRel39lQzQpSuobmGqiluAJruT1aPPRoJAwO2qF+1G5qtE81qnZaPjyBKeTS+cBR\nfjaTtZFEyclk311d4VfkRHJsdCYHq81SN3vkwAtolGpb9+PxqvZhhXYMf1fErf12\nClNxAcLb5CFFitp0yItRKFVkEGaWEKZpNVyeRXeFnO9qz98JNohO50u03JbpcZ1a\nU5zfr36sQjx9SD5KbqnuV3uf3L9of36yCgm1VYzxxIw2+tmgY/oAdmaysJLYrMr0\nt2hBYOpAQ+7CZX9MD5tfF7yLse+ib1s5mffBerg7F8MlYvwYdqWK7V/plk2zawa4\nP2MXRWvsJASkPhcMA76d7NyRsmssnDf8w5G1oVYolO3dcTAJJgrSsjYgd85tn/qz\nfpsR28mgqhoBmfEb8GpcmxcZ5aItuNF6KMZqzdh/oRWtawS1bm8nnKzdm3bdfiW/\nz2FHZovk9TJ2gRKrIdsQkSg3Nb7mbX/IBIGDvzy/EDtnTlYUAyw=\n=ZO8n\n-----END PGP SIGNATURE-----", "payload": "tree 84c7faf7634cd82ffa339379a7c88183f31ef619\nparent f233ac447fa95a637ac6e16d3c39f8b927a134f5\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1666792324 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1666865939 +0900\n\nCollect generic arguments in associated type bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63cba43b485cd9b4821c31d089bcc73eecc59586", "html_url": "https://github.com/rust-lang/rust/commit/63cba43b485cd9b4821c31d089bcc73eecc59586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63cba43b485cd9b4821c31d089bcc73eecc59586/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f233ac447fa95a637ac6e16d3c39f8b927a134f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f233ac447fa95a637ac6e16d3c39f8b927a134f5", "html_url": "https://github.com/rust-lang/rust/commit/f233ac447fa95a637ac6e16d3c39f8b927a134f5"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "79249757d9e9bb407aee638c8338e489b58c7842", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=63cba43b485cd9b4821c31d089bcc73eecc59586", "patch": "@@ -662,8 +662,12 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let mut generic_args: Vec<_> =\n         std::iter::repeat(None).take(path.segments().len() - 1).collect();\n     let mut last = GenericArgs::empty();\n-    let binding =\n-        AssociatedTypeBinding { name: name![Output], type_ref: Some(orig), bounds: Vec::new() };\n+    let binding = AssociatedTypeBinding {\n+        name: name![Output],\n+        args: None,\n+        type_ref: Some(orig),\n+        bounds: Vec::new(),\n+    };\n     last.bindings.push(binding);\n     generic_args.push(Some(Interned::new(last)));\n "}, {"sha": "592223f7d85fe76c020892ce158625c9eeec28a5", "filename": "crates/hir-def/src/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath.rs?ref=63cba43b485cd9b4821c31d089bcc73eecc59586", "patch": "@@ -68,6 +68,9 @@ pub struct GenericArgs {\n pub struct AssociatedTypeBinding {\n     /// The name of the associated type.\n     pub name: Name,\n+    /// The generic arguments to the associated type. e.g. For `Trait<Assoc<'a, T> = &'a T>`, this\n+    /// would be `['a, T]`.\n+    pub args: Option<Interned<GenericArgs>>,\n     /// The type bound to this associated type (in `Item = T`, this would be the\n     /// `T`). This can be `None` if there are bounds instead.\n     pub type_ref: Option<TypeRef>,"}, {"sha": "cfa3a6baaf8b4aae5cfc8dcdda63202036fd9c6a", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=63cba43b485cd9b4821c31d089bcc73eecc59586", "patch": "@@ -163,6 +163,10 @@ pub(super) fn lower_generic_args(\n             ast::GenericArg::AssocTypeArg(assoc_type_arg) => {\n                 if let Some(name_ref) = assoc_type_arg.name_ref() {\n                     let name = name_ref.as_name();\n+                    let args = assoc_type_arg\n+                        .generic_arg_list()\n+                        .and_then(|args| lower_generic_args(lower_ctx, args))\n+                        .map(Interned::new);\n                     let type_ref = assoc_type_arg.ty().map(|it| TypeRef::from_ast(lower_ctx, it));\n                     let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n                         l.bounds()\n@@ -171,7 +175,7 @@ pub(super) fn lower_generic_args(\n                     } else {\n                         Vec::new()\n                     };\n-                    bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n+                    bindings.push(AssociatedTypeBinding { name, args, type_ref, bounds });\n                 }\n             }\n             ast::GenericArg::LifetimeArg(lifetime_arg) => {\n@@ -214,6 +218,7 @@ fn lower_generic_args_from_fn_path(\n         let type_ref = TypeRef::from_ast_opt(ctx, ret_type.ty());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n+            args: None,\n             type_ref: Some(type_ref),\n             bounds: Vec::new(),\n         });\n@@ -222,6 +227,7 @@ fn lower_generic_args_from_fn_path(\n         let type_ref = TypeRef::Tuple(Vec::new());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n+            args: None,\n             type_ref: Some(type_ref),\n             bounds: Vec::new(),\n         });"}, {"sha": "5379732ac6c377d3e5fbf23d5c801afd2dd4c960", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=63cba43b485cd9b4821c31d089bcc73eecc59586", "patch": "@@ -51,7 +51,7 @@ TypeArg =\n   Type\n \n AssocTypeArg =\n-  NameRef GenericParamList? (':' TypeBoundList | ('=' Type | ConstArg))\n+  NameRef GenericArgList? (':' TypeBoundList | ('=' Type | ConstArg))\n \n LifetimeArg =\n   Lifetime"}, {"sha": "6cfb98d92fcf289c5a69c4504e69f10e6d31202d", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cba43b485cd9b4821c31d089bcc73eecc59586/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=63cba43b485cd9b4821c31d089bcc73eecc59586", "patch": "@@ -120,7 +120,7 @@ pub struct AssocTypeArg {\n impl ast::HasTypeBounds for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n+    pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n     pub fn const_arg(&self) -> Option<ConstArg> { support::child(&self.syntax) }\n@@ -142,16 +142,6 @@ impl ConstArg {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct GenericParamList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl GenericParamList {\n-    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n-    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n@@ -527,6 +517,16 @@ impl Abi {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct GenericParamList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl GenericParamList {\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n+    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n@@ -1834,17 +1834,6 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for GenericParamList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == GENERIC_PARAM_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2153,6 +2142,17 @@ impl AstNode for Abi {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for GenericParamList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == GENERIC_PARAM_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for WhereClause {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_CLAUSE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4263,11 +4263,6 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for GenericParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for TypeBoundList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4408,6 +4403,11 @@ impl std::fmt::Display for Abi {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for GenericParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for WhereClause {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}]}