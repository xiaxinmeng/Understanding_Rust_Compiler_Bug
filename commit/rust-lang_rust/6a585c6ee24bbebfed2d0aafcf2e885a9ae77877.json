{"sha": "6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTg1YzZlZTI0YmJlYmZlZDJkMGFhZmNmMmU4ODVhOWFlNzc4Nzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-02T13:46:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T13:46:50Z"}, "message": "Merge #7795\n\n7795: Show docs on hover for keywords and primitives r=matklad a=Veykril\n\n![lAWFadkziX](https://user-images.githubusercontent.com/3757771/109369534-eeb4f500-789c-11eb-8f2b-2f9c4e129de3.gif)\r\n\r\nIt's a bit annoying that this requires the `SyntaxNode` and `Semantics` to be pulled through `hover_for_definition` just so we can get the `std` crate but I couldn't think of a better way.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c8de313a9271d96035836a16a9f80b796e047a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8de313a9271d96035836a16a9f80b796e047a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPkHKCRBK7hj4Ov3rIwAAdHIIAAmlY9M6DJIwbACAIRmYzkbV\nox6c8SmlVhp5w+caqmjU9UCLefkBDNJi5CTJA1YCw5IOHHRjJE0muEg/rqt2vFXa\ny2lsHPLn3w/7s1Lt+ImJ4tWs5Zc1CIjqGoZCN//Q7f/IiWg2KNZAePWil/dGxuoL\nip71trsEkZi9VOMOTuP6L3UroXQoHGZXKNDrgG7M7lS5LA3sddSdB8CEU3N38F2t\nPCj+F2pWvPsRocFqx9rGROgn7ClnLR8XFJcU8AAS2JDORtzehwZItHliYB7qbe0F\nh16GWCLj7znn6k5kzTSNf5+KBPkM4TziuFQXIhRKzCU4VHs63ELGqaHhYPgjXdQ=\n=DZon\n-----END PGP SIGNATURE-----\n", "payload": "tree c8de313a9271d96035836a16a9f80b796e047a66\nparent 657ec3616f076c85e21d82feba0397690e836bd9\nparent 8d305680e6560debaf7868c160112e07a7bea8a0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614692810 +0000\ncommitter GitHub <noreply@github.com> 1614692810 +0000\n\nMerge #7795\n\n7795: Show docs on hover for keywords and primitives r=matklad a=Veykril\n\n![lAWFadkziX](https://user-images.githubusercontent.com/3757771/109369534-eeb4f500-789c-11eb-8f2b-2f9c4e129de3.gif)\r\n\r\nIt's a bit annoying that this requires the `SyntaxNode` and `Semantics` to be pulled through `hover_for_definition` just so we can get the `std` crate but I couldn't think of a better way.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "html_url": "https://github.com/rust-lang/rust/commit/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "657ec3616f076c85e21d82feba0397690e836bd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/657ec3616f076c85e21d82feba0397690e836bd9", "html_url": "https://github.com/rust-lang/rust/commit/657ec3616f076c85e21d82feba0397690e836bd9"}, {"sha": "8d305680e6560debaf7868c160112e07a7bea8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d305680e6560debaf7868c160112e07a7bea8a0", "html_url": "https://github.com/rust-lang/rust/commit/8d305680e6560debaf7868c160112e07a7bea8a0"}], "stats": {"total": 158, "additions": 139, "deletions": 19}, "files": [{"sha": "69fcdab07a01a71a736327d5c204f40717a793d7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "patch": "@@ -33,11 +33,11 @@ mod has_source;\n pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     code_model::{\n-        Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n-        ConstParam, Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function,\n-        GenericDef, GenericParam, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef,\n-        Module, ModuleDef, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union,\n-        Variant, VariantDef,\n+        Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, BuiltinType, Callable,\n+        CallableKind, Const, ConstParam, Crate, CrateDependency, DefWithBody, Enum, Field,\n+        FieldSource, Function, GenericDef, GenericParam, HasVisibility, Impl, Label, LifetimeParam,\n+        Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n+        TypeParam, Union, Variant, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},\n@@ -47,7 +47,6 @@ pub use hir_def::{\n     adt::StructKind,\n     attr::{Attrs, Documentation},\n     body::scope::ExprScopes,\n-    builtin_type::BuiltinType,\n     find_path::PrefixKind,\n     import_map,\n     item_scope::ItemInNs,"}, {"sha": "a9454cfa317342c56225449c240640edd2df8259", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 122, "deletions": 13, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "patch": "@@ -5,6 +5,7 @@ use hir::{\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::{Definition, NameClass, NameRefClass},\n+    helpers::FamousDefs,\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -107,16 +108,14 @@ pub(crate) fn hover(\n         }\n     };\n     if let Some(definition) = definition {\n-        if let Some(markup) = hover_for_definition(db, definition) {\n-            let markup = markup.as_str();\n-            let markup = if !markdown {\n-                remove_markdown(markup)\n-            } else if links_in_hover {\n-                rewrite_links(db, markup, &definition)\n-            } else {\n-                remove_links(markup)\n-            };\n-            res.markup = Markup::from(markup);\n+        let famous_defs = match &definition {\n+            Definition::ModuleDef(ModuleDef::BuiltinType(_)) => {\n+                Some(FamousDefs(&sema, sema.scope(&node).krate()))\n+            }\n+            _ => None,\n+        };\n+        if let Some(markup) = hover_for_definition(db, definition, famous_defs.as_ref()) {\n+            res.markup = process_markup(sema.db, definition, &markup, links_in_hover, markdown);\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n             }\n@@ -138,6 +137,9 @@ pub(crate) fn hover(\n         // don't highlight the entire parent node on comment hover\n         return None;\n     }\n+    if let res @ Some(_) = hover_for_keyword(&sema, links_in_hover, markdown, &token) {\n+        return res;\n+    }\n \n     let node = token\n         .ancestors()\n@@ -272,6 +274,24 @@ fn hover_markup(\n     }\n }\n \n+fn process_markup(\n+    db: &RootDatabase,\n+    def: Definition,\n+    markup: &Markup,\n+    links_in_hover: bool,\n+    markdown: bool,\n+) -> Markup {\n+    let markup = markup.as_str();\n+    let markup = if !markdown {\n+        remove_markdown(markup)\n+    } else if links_in_hover {\n+        rewrite_links(db, markup, &def)\n+    } else {\n+        remove_links(markup)\n+    };\n+    Markup::from(markup)\n+}\n+\n fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String> {\n     match def {\n         Definition::Field(f) => Some(f.parent_def(db).name(db)),\n@@ -304,7 +324,11 @@ fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     def.module(db).map(|module| render_path(db, module, definition_owner_name(db, def)))\n }\n \n-fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n+fn hover_for_definition(\n+    db: &RootDatabase,\n+    def: Definition,\n+    famous_defs: Option<&FamousDefs>,\n+) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n@@ -339,7 +363,9 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n-            ModuleDef::BuiltinType(it) => Some(Markup::fenced_block(&it.name())),\n+            ModuleDef::BuiltinType(it) => famous_defs\n+                .and_then(|fd| hover_for_builtin(fd, it))\n+                .or_else(|| Some(Markup::fenced_block(&it.name()))),\n         },\n         Definition::Local(it) => Some(Markup::fenced_block(&it.ty(db).display(db))),\n         Definition::SelfType(impl_def) => {\n@@ -380,11 +406,52 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n     }\n }\n \n+fn hover_for_keyword(\n+    sema: &Semantics<RootDatabase>,\n+    links_in_hover: bool,\n+    markdown: bool,\n+    token: &SyntaxToken,\n+) -> Option<RangeInfo<HoverResult>> {\n+    if !token.kind().is_keyword() {\n+        return None;\n+    }\n+    let famous_defs = FamousDefs(&sema, sema.scope(&token.parent()).krate());\n+    // std exposes {}_keyword modules with docstrings on the root to document keywords\n+    let keyword_mod = format!(\"{}_keyword\", token.text());\n+    let doc_owner = find_std_module(&famous_defs, &keyword_mod)?;\n+    let docs = doc_owner.attrs(sema.db).docs()?;\n+    let markup = process_markup(\n+        sema.db,\n+        Definition::ModuleDef(doc_owner.into()),\n+        &hover_markup(Some(docs.into()), Some(token.text().into()), None)?,\n+        links_in_hover,\n+        markdown,\n+    );\n+    Some(RangeInfo::new(token.text_range(), HoverResult { markup, actions: Default::default() }))\n+}\n+\n+fn hover_for_builtin(famous_defs: &FamousDefs, builtin: hir::BuiltinType) -> Option<Markup> {\n+    // std exposes prim_{} modules with docstrings on the root to document the builtins\n+    let primitive_mod = format!(\"prim_{}\", builtin.name());\n+    let doc_owner = find_std_module(famous_defs, &primitive_mod)?;\n+    let docs = doc_owner.attrs(famous_defs.0.db).docs()?;\n+    hover_markup(Some(docs.into()), Some(builtin.name().to_string()), None)\n+}\n+\n+fn find_std_module(famous_defs: &FamousDefs, name: &str) -> Option<hir::Module> {\n+    let db = famous_defs.0.db;\n+    let std_crate = famous_defs.std()?;\n+    let std_root_module = std_crate.root_module(db);\n+    std_root_module\n+        .children(db)\n+        .find(|module| module.name(db).map_or(false, |module| module.to_string() == name))\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] => 3,\n+            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n             T!['('] | T![')'] => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n@@ -3523,6 +3590,48 @@ use foo::bar::{self$0};\n \n                 But this should appear\n             \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn hover_keyword() {\n+        let ra_fixture = r#\"//- /main.rs crate:main deps:std\n+fn f() { retur$0n; }\"#;\n+        let fixture = format!(\"{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        check(\n+            &fixture,\n+            expect![[r#\"\n+                *return*\n+\n+                ```rust\n+                return\n+                ```\n+\n+                ---\n+\n+                Docs for return_keyword\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_builtin() {\n+        let ra_fixture = r#\"//- /main.rs crate:main deps:std\n+cosnt _: &str$0 = \"\"; }\"#;\n+        let fixture = format!(\"{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        check(\n+            &fixture,\n+            expect![[r#\"\n+                *str*\n+\n+                ```rust\n+                str\n+                ```\n+\n+                ---\n+\n+                Docs for prim_str\n+            \"#]],\n         );\n     }\n }"}, {"sha": "3ff77400bbf0af632c4b4f7735e98d9bbe0b01b2", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "patch": "@@ -41,6 +41,10 @@ pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Cr\n impl FamousDefs<'_, '_> {\n     pub const FIXTURE: &'static str = include_str!(\"helpers/famous_defs_fixture.rs\");\n \n+    pub fn std(&self) -> Option<Crate> {\n+        self.find_crate(\"std\")\n+    }\n+\n     pub fn core(&self) -> Option<Crate> {\n         self.find_crate(\"core\")\n     }"}, {"sha": "d3464ae17b95ba4bda3852415c994af1393f78cf", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a585c6ee24bbebfed2d0aafcf2e885a9ae77877/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=6a585c6ee24bbebfed2d0aafcf2e885a9ae77877", "patch": "@@ -129,3 +129,11 @@ pub mod prelude {\n }\n #[prelude_import]\n pub use prelude::*;\n+//- /libstd.rs crate:std deps:core\n+//! Signatures of traits, types and functions from the std lib for use in tests.\n+\n+/// Docs for return_keyword\n+mod return_keyword {}\n+\n+/// Docs for prim_str\n+mod prim_str {}"}]}