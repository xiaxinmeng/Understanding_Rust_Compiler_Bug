{"sha": "8e043950c8d8f8fa6df777a896286e0768f73b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDQzOTUwYzhkOGY4ZmE2ZGY3NzdhODk2Mjg2ZTA3NjhmNzNiNGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-11T00:28:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T20:05:30Z"}, "message": "Swap const evaluation lint spans to point at problem in primary span", "tree": {"sha": "2a21bd89ade21729043fb035c1c47e88733982c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a21bd89ade21729043fb035c1c47e88733982c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e043950c8d8f8fa6df777a896286e0768f73b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e043950c8d8f8fa6df777a896286e0768f73b4a", "html_url": "https://github.com/rust-lang/rust/commit/8e043950c8d8f8fa6df777a896286e0768f73b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e043950c8d8f8fa6df777a896286e0768f73b4a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0ab0b8a9847efcf6428aa5f1db359a41fbdfed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0ab0b8a9847efcf6428aa5f1db359a41fbdfed", "html_url": "https://github.com/rust-lang/rust/commit/1b0ab0b8a9847efcf6428aa5f1db359a41fbdfed"}], "stats": {"total": 662, "additions": 358, "deletions": 304}, "files": [{"sha": "5cd1ced20220ae5e7a1aa28db45a87902c1e7322", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -100,6 +100,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str,\n         lint_root: hir::HirId,\n+        span: Option<Span>,\n     ) -> ErrorHandled {\n         let lint = self.struct_generic(\n             tcx,\n@@ -108,6 +109,16 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         );\n         match lint {\n             Ok(mut lint) => {\n+                if let Some(span) = span {\n+                    let primary_spans = lint.span.primary_spans().to_vec();\n+                    // point at the actual error as the primary span\n+                    lint.replace_span_with(span);\n+                    // point to the `const` statement as a secondary span\n+                    // they don't have any label\n+                    for sp in primary_spans {\n+                        lint.span_label(sp, \"\");\n+                    }\n+                }\n                 lint.emit();\n                 ErrorHandled::Reported\n             },"}, {"sha": "08ede2f5e80a47288ad50f8746b82bffa67b529e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -668,6 +668,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                         tcx.at(tcx.def_span(def_id)),\n                         \"any use of this value will cause an error\",\n                         hir_id,\n+                        Some(err.span),\n                     )\n                 },\n                 // promoting runtime code is only allowed to error if it references broken constants\n@@ -684,6 +685,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                             tcx.at(span),\n                             \"reaching this expression at runtime will panic or abort\",\n                             tcx.hir().as_local_hir_id(def_id).unwrap(),\n+                            Some(err.span),\n                         )\n                     }\n                 // anything else (array lengths, enum initializers, constant patterns) are reported"}, {"sha": "33672a2b7745c8c276263604795aecaeabd447e2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -237,6 +237,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n                             lint_root,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "78d456d6c2e0e6450d81b893664ad3765c35e4e6", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/array_const_index-0.rs:2:1\n+  --> $DIR/array_const_index-0.rs:2:16\n    |\n LL | const B: i32 = (&A)[1];\n-   | ^^^^^^^^^^^^^^^-------^\n+   | ---------------^^^^^^^-\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |"}, {"sha": "3e7360f935bb9cfdd6efda212cecda356aa5ba1b", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/array_const_index-1.rs:2:1\n+  --> $DIR/array_const_index-1.rs:2:16\n    |\n LL | const B: i32 = A[1];\n-   | ^^^^^^^^^^^^^^^----^\n+   | ---------------^^^^-\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |"}, {"sha": "9b0ef94a5b8c3660aef8a7daff287660d5c3af6a", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:3:1\n+  --> $DIR/const-err-early.rs:3:19\n    |\n LL | pub const A: i8 = -std::i8::MIN;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to negate with overflow\n    |\n@@ -13,34 +13,34 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:4:1\n+  --> $DIR/const-err-early.rs:4:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to add with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:1\n+  --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n-   | ^^^^^^^^^^^^^^^^^^---------^\n+   | ------------------^^^^^^^^^-\n    |                   |\n    |                   attempt to multiply with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:6:1\n+  --> $DIR/const-err-early.rs:6:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n-   | ^^^^^^^^^^^^^^^^^^-----------------^\n+   | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to subtract with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:1\n+  --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const E: u8 = [5u8][1];\n-   | ^^^^^^^^^^^^^^^^^^--------^\n+   | ------------------^^^^^^^^-\n    |                   |\n    |                   index out of bounds: the len is 1 but the index is 1\n "}, {"sha": "c647f13fc7520f83c73cb9f31ae4be969a51790e", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:3:1\n+  --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const A: i8 = -std::i8::MIN;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n+   | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to negate with overflow\n    |\n@@ -13,26 +13,26 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:5:1\n+  --> $DIR/const-err-multi.rs:5:19\n    |\n LL | pub const B: i8 = A;\n-   | ^^^^^^^^^^^^^^^^^^-^\n+   | ------------------^-\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:7:1\n+  --> $DIR/const-err-multi.rs:7:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ^^^^^^^^^^^^^^^^^^-------^\n+   | ------------------^^^^^^^-\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:1\n+  --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const D: i8 = 50 - A;\n-   | ^^^^^^^^^^^^^^^^^^------^\n+   | ------------------^^^^^^-\n    |                   |\n    |                   referenced constant has errors\n "}, {"sha": "0ee9ecdef451dc9cbbc9046b337674e9e25f2c9e", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:10:1\n+  --> $DIR/const-err.rs:10:17\n    |\n LL | const FOO: u8 = [5u8][1];\n-   | ^^^^^^^^^^^^^^^^--------^\n+   | ----------------^^^^^^^^-\n    |                 |\n    |                 index out of bounds: the len is 1 but the index is 1\n    |"}, {"sha": "7f94d849c006c4610a292893af44d1a250ece4b3", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:5:1\n+  --> $DIR/conditional_array_execution.rs:5:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------^^^^^---------------------------\n    |                   |\n    |                   attempt to subtract with overflow\n    |"}, {"sha": "a0dbcc88cea8a9da000689a7804cfee57da5159d", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "419b3d52dbff1b4139d9c662d51d1d44c57991eb", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:14:1\n+  --> $DIR/const-eval-overflow2.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n-   | |      ----------- attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:19:1\n+  --> $DIR/const-eval-overflow2.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:24:1\n+  --> $DIR/const-eval-overflow2.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:29:1\n+  --> $DIR/const-eval-overflow2.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:34:1\n+  --> $DIR/const-eval-overflow2.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n-   | |      ----------- attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:39:1\n+  --> $DIR/const-eval-overflow2.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:43:1\n+  --> $DIR/const-eval-overflow2.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:47:1\n+  --> $DIR/const-eval-overflow2.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n-   | |      ------------ attempt to subtract with overflow\n+   | |      ^^^^^^^^^^^^ attempt to subtract with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "da883671a60a3c6cbaebe860ab5da8100d7c8ac7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "2cfd34c9fc3c7661f8ac68b4ef5e2e2fc6818532", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:14:1\n+  --> $DIR/const-eval-overflow2b.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MAX + 1,\n-   | |      ----------- attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:19:1\n+  --> $DIR/const-eval-overflow2b.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:24:1\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:29:1\n+  --> $DIR/const-eval-overflow2b.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:34:1\n+  --> $DIR/const-eval-overflow2b.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n-   | |      ----------- attempt to add with overflow\n+   | |      ^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:39:1\n+  --> $DIR/const-eval-overflow2b.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:43:1\n+  --> $DIR/const-eval-overflow2b.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:47:1\n+  --> $DIR/const-eval-overflow2b.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n-   | |      ------------ attempt to add with overflow\n+   | |      ^^^^^^^^^^^^ attempt to add with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e87344405a103f5cf7bfa75ea19edbd8190639f1", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -11,43 +11,51 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+const VALS_I8: (i8,) =\n     (\n      i8::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n-const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      );\n+ //~^^ ERROR any use of this value will cause an error\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "5e63286c594d95165e49934dc8e1d99525a8a35a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:14:1\n+  --> $DIR/const-eval-overflow2c.rs:16:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN * 2,\n-   | |      ----------- attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n    |\n note: lint level defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n@@ -15,72 +15,72 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:19:1\n+  --> $DIR/const-eval-overflow2c.rs:22:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:24:1\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:29:1\n+  --> $DIR/const-eval-overflow2c.rs:34:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:34:1\n+  --> $DIR/const-eval-overflow2c.rs:40:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n-   | |      ----------- attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:39:1\n+  --> $DIR/const-eval-overflow2c.rs:45:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:43:1\n+  --> $DIR/const-eval-overflow2c.rs:50:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:47:1\n+  --> $DIR/const-eval-overflow2c.rs:56:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n-   | |      ------------ attempt to multiply with overflow\n+   | |      ^^^^^^^^^^^^ attempt to multiply with overflow\n LL | |      );\n-   | |_______^\n+   | |_______-\n \n error: aborting due to 8 previous errors\n "}, {"sha": "284b06984a31c09505e43295b84c92f33348202a", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -7,28 +7,28 @@ LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:27:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:27:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:30:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:33:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -49,26 +49,26 @@ LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.u\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:42:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:45:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:45:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:48:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:48:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -89,10 +89,10 @@ LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.i\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:57:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -105,42 +105,42 @@ LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.flo\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:63:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:63:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------------^^^\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:66:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:66:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:69:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:69:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:72:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:75:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:75:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -153,34 +153,34 @@ LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 }\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:81:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:81:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:84:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^^^\n+   |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:87:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -193,18 +193,18 @@ LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:96:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:96:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:99:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:99:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n@@ -217,18 +217,18 @@ LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:105:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:105:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:108:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:108:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n "}, {"sha": "12c7e3d34ab9e14b0cc409929f1c0952057671ff", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:4:1\n+  --> $DIR/const_panic.rs:4:19\n    |\n LL | pub const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^^^^^----------------^\n+   | ------------------^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:7:1\n+  --> $DIR/const_panic.rs:7:19\n    |\n LL | pub const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^^^^^--------------^\n+   | ------------------^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:1\n+  --> $DIR/const_panic.rs:10:19\n    |\n LL | pub const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^^^^^----------------^\n+   | ------------------^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:10:19\n    |"}, {"sha": "9dddac49c92b80baf322dbcd2ff6322d09acaa30", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:5:1\n+  --> $DIR/const_panic_libcore.rs:5:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:8:1\n+  --> $DIR/const_panic_libcore.rs:8:15\n    |\n LL | const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^--------------^\n+   | --------------^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:11:1\n+  --> $DIR/const_panic_libcore.rs:11:15\n    |\n LL | const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore.rs:11:15\n    |"}, {"sha": "df04a03681127189606f0755e640362a047df49f", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,29 +1,29 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:9:1\n+  --> $DIR/const_panic_libcore_main.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:12:1\n+  --> $DIR/const_panic_libcore_main.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^--------------^\n+   | --------------^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:15:1\n+  --> $DIR/const_panic_libcore_main.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^----------------^\n+   | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |"}, {"sha": "0d4c0b98879cc4008ba4a79a193345ae026cdcd5", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,34 +1,34 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:6:1\n+  --> $DIR/const_raw_ptr_ops.rs:6:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:12:1\n+  --> $DIR/const_raw_ptr_ops.rs:12:28\n    |\n LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------^^^\n+   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                            |\n    |                            \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:16:1\n+  --> $DIR/const_raw_ptr_ops.rs:16:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:17:1\n+  --> $DIR/const_raw_ptr_ops.rs:17:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n "}, {"sha": "478e453fe0834f2a0e3d47d77fb34601bcf8bfc9", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:8:5\n+  --> $DIR/issue-43197.rs:8:20\n    |\n LL |     const X: u32 = 0-1;\n-   |     ^^^^^^^^^^^^^^^---^\n+   |     ---------------^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |\n@@ -13,10 +13,10 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:10:5\n+  --> $DIR/issue-43197.rs:10:24\n    |\n LL |     const Y: u32 = foo(0-1);\n-   |     ^^^^^^^^^^^^^^^^^^^---^^\n+   |     -------------------^^^--\n    |                        |\n    |                        attempt to subtract with overflow\n "}, {"sha": "5a59a8b2dffcd2c6459d9817af8c1890295491c3", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-49296.rs:18:1\n+  --> $DIR/issue-49296.rs:18:16\n    |\n LL | const X: u64 = *wat(42);\n-   | ^^^^^^^^^^^^^^^--------^\n+   | ---------------^^^^^^^^-\n    |                |\n    |                dangling pointer was dereferenced\n    |"}, {"sha": "da560046c547c246764bbf5e4aef0ae8ccdbd6e2", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814-2.rs:12:5\n+  --> $DIR/issue-50814-2.rs:12:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |     ^^^^^^^^^^^^^^^^^^^-----------------^\n+   |     -------------------^^^^^^^^^^^^^^^^^-\n    |                        |\n    |                        index out of bounds: the len is 3 but the index is 42\n    |"}, {"sha": "bc9443b26f5fd9489f859431722986143f4868c3", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:13:5\n+  --> $DIR/issue-50814.rs:13:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ^^^^^^^^^^^^^^^^---------------^\n+   |     ----------------^^^^^^^^^^^^^^^-\n    |                     |\n    |                     attempt to add with overflow\n    |"}, {"sha": "ca870c649f5b23f5cdc4456cc79ab64c4c988006", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -50,11 +50,15 @@ warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:14:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    attempt to divide by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^\n+   |                    |\n+   |                    attempt to divide by zero\n "}, {"sha": "bd262b69da81a73feb2e6671bdfa59cf3eb7f306", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err.rs:6:1\n+  --> $DIR/pub_const_err.rs:6:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n+   | -------------------^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "866d1753edb955dc1e9ed4c699cb67f43d5e718a", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n-  --> $DIR/pub_const_err_bin.rs:4:1\n+  --> $DIR/pub_const_err_bin.rs:4:20\n    |\n LL | pub const Z: u32 = 0 - 1;\n-   | ^^^^^^^^^^^^^^^^^^^-----^\n+   | -------------------^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "603efe449f143160fe88f5f52c2cd391c2589dd2", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,10 +1,10 @@\n warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n \n error: any use of this value will cause an error\n-  --> $DIR/unused-broken-const.rs:5:1\n+  --> $DIR/unused-broken-const.rs:5:18\n    |\n LL | const FOO: i32 = [][0];\n-   | ^^^^^^^^^^^^^^^^^-----^\n+   | -----------------^^^^^-\n    |                  |\n    |                  index out of bounds: the len is 0 but the index is 0\n    |"}, {"sha": "0fa82008711c9ad1befc144ad7e657705197aff5", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,322 +1,322 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:14:1\n+  --> $DIR/const-int-unchecked.rs:14:29\n    |\n LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shl\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:16:1\n+  --> $DIR/const-int-unchecked.rs:16:31\n    |\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:18:1\n+  --> $DIR/const-int-unchecked.rs:18:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:20:1\n+  --> $DIR/const-int-unchecked.rs:20:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:22:1\n+  --> $DIR/const-int-unchecked.rs:22:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:27:1\n+  --> $DIR/const-int-unchecked.rs:27:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:29:1\n+  --> $DIR/const-int-unchecked.rs:29:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:31:1\n+  --> $DIR/const-int-unchecked.rs:31:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:33:1\n+  --> $DIR/const-int-unchecked.rs:33:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:35:1\n+  --> $DIR/const-int-unchecked.rs:35:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:40:1\n+  --> $DIR/const-int-unchecked.rs:40:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 255 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:42:1\n+  --> $DIR/const-int-unchecked.rs:42:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 65535 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:44:1\n+  --> $DIR/const-int-unchecked.rs:44:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 4294967295 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:46:1\n+  --> $DIR/const-int-unchecked.rs:46:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 18446744073709551615 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:48:1\n+  --> $DIR/const-int-unchecked.rs:48:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:54:1\n+  --> $DIR/const-int-unchecked.rs:54:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        Overflowing shift by 250 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:56:1\n+  --> $DIR/const-int-unchecked.rs:56:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 65523 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:58:1\n+  --> $DIR/const-int-unchecked.rs:58:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 4294967271 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:60:1\n+  --> $DIR/const-int-unchecked.rs:60:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 18446744073709551586 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:62:1\n+  --> $DIR/const-int-unchecked.rs:62:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shl\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:69:1\n+  --> $DIR/const-int-unchecked.rs:69:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:71:1\n+  --> $DIR/const-int-unchecked.rs:71:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:73:1\n+  --> $DIR/const-int-unchecked.rs:73:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:75:1\n+  --> $DIR/const-int-unchecked.rs:75:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:77:1\n+  --> $DIR/const-int-unchecked.rs:77:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:82:1\n+  --> $DIR/const-int-unchecked.rs:82:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:84:1\n+  --> $DIR/const-int-unchecked.rs:84:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 16 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:86:1\n+  --> $DIR/const-int-unchecked.rs:86:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 32 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:88:1\n+  --> $DIR/const-int-unchecked.rs:88:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               Overflowing shift by 64 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:90:1\n+  --> $DIR/const-int-unchecked.rs:90:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 128 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:95:1\n+  --> $DIR/const-int-unchecked.rs:95:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 Overflowing shift by 255 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:97:1\n+  --> $DIR/const-int-unchecked.rs:97:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 65535 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:99:1\n+  --> $DIR/const-int-unchecked.rs:99:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 4294967295 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:101:1\n+  --> $DIR/const-int-unchecked.rs:101:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   Overflowing shift by 18446744073709551615 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:103:1\n+  --> $DIR/const-int-unchecked.rs:103:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:109:1\n+  --> $DIR/const-int-unchecked.rs:109:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        Overflowing shift by 250 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:111:1\n+  --> $DIR/const-int-unchecked.rs:111:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 65523 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:113:1\n+  --> $DIR/const-int-unchecked.rs:113:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 4294967271 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:115:1\n+  --> $DIR/const-int-unchecked.rs:115:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          Overflowing shift by 18446744073709551586 in unchecked_shr\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:117:1\n+  --> $DIR/const-int-unchecked.rs:117:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shr\n "}, {"sha": "ef4fa126dca329389991af9f342f2fd102f08374", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-len-underflow-separate-spans.rs:7:1\n+  --> $DIR/const-len-underflow-separate-spans.rs:7:20\n    |\n LL | const LEN: usize = ONE - TWO;\n-   | ^^^^^^^^^^^^^^^^^^^---------^\n+   | -------------------^^^^^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |"}, {"sha": "c90cdbcb26970487f013f293faa7ffe282989966", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-slice-oob.rs:4:1\n+  --> $DIR/const-slice-oob.rs:4:18\n    |\n LL | const BAR: u32 = FOO[5];\n-   | ^^^^^^^^^^^^^^^^^------^\n+   | -----------------^^^^^^-\n    |                  |\n    |                  index out of bounds: the len is 3 but the index is 5\n    |"}, {"sha": "ba640b90e7d79a4c2ce05e0ac8cdf7ed154fa490", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,11 +1,17 @@\n error: any use of this value will cause an error\n   --> $DIR/dangling-alloc-id-ice.rs:8:1\n    |\n-LL | / const FOO: &() = {\n-LL | |     let y = ();\n-LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n-LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+LL |    const FOO: &() = {\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     let y = ();\n+LL | ||     unsafe { Foo { y: &y }.long_live_the_unit }\n+LL | || };\n+   | ||  ^\n+   | ||__|\n+   | |___type validation failed: encountered dangling pointer in final constant\n+   | \n    |\n    = note: #[deny(const_err)] on by default\n "}, {"sha": "cedcbf819e2d82a1d7124c5adc5a108a5484bf65", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,11 +1,17 @@\n error: any use of this value will cause an error\n   --> $DIR/dangling_raw_ptr.rs:1:1\n    |\n-LL | / const FOO: *const u32 = {\n-LL | |     let x = 42;\n-LL | |     &x\n-LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+LL |    const FOO: *const u32 = {\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     let x = 42;\n+LL | ||     &x\n+LL | || };\n+   | ||  ^\n+   | ||__|\n+   | |___type validation failed: encountered dangling pointer in final constant\n+   | \n    |\n    = note: #[deny(const_err)] on by default\n "}, {"sha": "4b7f1fa82c26c23987e7402685663e9628b698c8", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n-  --> $DIR/E0396-fixed.rs:5:1\n+  --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^^\n+   | ---------------------------^^^^^^^^^---\n    |                            |\n    |                            a memory access tried to interpret some bytes as a pointer\n    |"}, {"sha": "378fbe6d5c430e394f0a699bdfdb55499c7c7bee", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e043950c8d8f8fa6df777a896286e0768f73b4a/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=8e043950c8d8f8fa6df777a896286e0768f73b4a", "patch": "@@ -5,10 +5,10 @@ LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/issue-43105.rs:3:1\n+  --> $DIR/issue-43105.rs:3:17\n    |\n LL | const NUM: u8 = xyz();\n-   | ^^^^^^^^^^^^^^^^-----^\n+   | ----------------^^^^^-\n    |                 |\n    |                 calling non-const function `xyz`\n    |"}]}