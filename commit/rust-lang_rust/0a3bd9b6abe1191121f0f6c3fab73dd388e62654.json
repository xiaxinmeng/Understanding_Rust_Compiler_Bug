{"sha": "0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhM2JkOWI2YWJlMTE5MTEyMWYwZjZjM2ZhYjczZGQzODhlNjI2NTQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-03T11:50:14Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-30T04:33:35Z"}, "message": "Use impl_header_lifetime_elision in libcore", "tree": {"sha": "1c531dafcd9e422d15113dc3a7f10246b7f5aac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c531dafcd9e422d15113dc3a7f10246b7f5aac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "html_url": "https://github.com/rust-lang/rust/commit/0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6310be458f4665f537419f033a764b0644c7e5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6310be458f4665f537419f033a764b0644c7e5ab", "html_url": "https://github.com/rust-lang/rust/commit/6310be458f4665f537419f033a764b0644c7e5ab"}], "stats": {"total": 297, "additions": 149, "deletions": 148}, "files": [{"sha": "84d4b217841805341aba1274a250655cf824a3c8", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -226,16 +226,16 @@ impl<T: ?Sized> BorrowMut<T> for T {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a T {\n+impl<T: ?Sized> Borrow<T> for &T {\n     fn borrow(&self) -> &T { &**self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Borrow<T> for &'a mut T {\n+impl<T: ?Sized> Borrow<T> for &mut T {\n     fn borrow(&self) -> &T { &**self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n+impl<T: ?Sized> BorrowMut<T> for &mut T {\n     fn borrow_mut(&mut self) -> &mut T { &mut **self }\n }"}, {"sha": "ec7d366c3f5ce90fbd24cb2d3be6af7a2d352feb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -1092,7 +1092,7 @@ impl<'b> BorrowRef<'b> {\n     }\n }\n \n-impl<'b> Drop for BorrowRef<'b> {\n+impl Drop for BorrowRef<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n@@ -1101,9 +1101,9 @@ impl<'b> Drop for BorrowRef<'b> {\n     }\n }\n \n-impl<'b> Clone for BorrowRef<'b> {\n+impl Clone for BorrowRef<'_> {\n     #[inline]\n-    fn clone(&self) -> BorrowRef<'b> {\n+    fn clone(&self) -> Self {\n         // Since this Ref exists, we know the borrow flag\n         // is a reading borrow.\n         let borrow = self.borrow.get();\n@@ -1127,7 +1127,7 @@ pub struct Ref<'b, T: ?Sized + 'b> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> Deref for Ref<'b, T> {\n+impl<T: ?Sized> Deref for Ref<'_, T> {\n     type Target = T;\n \n     #[inline]\n@@ -1219,7 +1219,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for Ref<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for Ref<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)\n     }\n@@ -1305,7 +1305,7 @@ struct BorrowRefMut<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }\n \n-impl<'b> Drop for BorrowRefMut<'b> {\n+impl Drop for BorrowRefMut<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n@@ -1356,7 +1356,7 @@ pub struct RefMut<'b, T: ?Sized + 'b> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> Deref for RefMut<'b, T> {\n+impl<T: ?Sized> Deref for RefMut<'_, T> {\n     type Target = T;\n \n     #[inline]\n@@ -1366,7 +1366,7 @@ impl<'b, T: ?Sized> Deref for RefMut<'b, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n+impl<T: ?Sized> DerefMut for RefMut<'_, T> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut T {\n         self.value\n@@ -1377,7 +1377,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)\n     }"}, {"sha": "46bb580dcddb1af2d8e80152be0a5ccca040b0ac", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -204,7 +204,7 @@ mod impls {\n \n     // Shared references can be cloned, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized> Clone for &'a T {\n+    impl<T: ?Sized> Clone for &T {\n         #[inline]\n         fn clone(&self) -> Self {\n             *self"}, {"sha": "33881de30527ed5123e4b7c2c521b1754a3ddef4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -1033,12 +1033,12 @@ mod impls {\n         fn gt(&self, other: & &'b B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Ord for &'a A where A: Ord {\n+    impl<A: ?Sized> Ord for &A where A: Ord {\n         #[inline]\n-        fn cmp(&self, other: & &'a A) -> Ordering { Ord::cmp(*self, *other) }\n+        fn cmp(&self, other: &Self) -> Ordering { Ord::cmp(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Eq for &'a A where A: Eq {}\n+    impl<A: ?Sized> Eq for &A where A: Eq {}\n \n     // &mut pointers\n \n@@ -1065,12 +1065,12 @@ mod impls {\n         fn gt(&self, other: &&'b mut B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Ord for &'a mut A where A: Ord {\n+    impl<A: ?Sized> Ord for &mut A where A: Ord {\n         #[inline]\n-        fn cmp(&self, other: &&'a mut A) -> Ordering { Ord::cmp(*self, *other) }\n+        fn cmp(&self, other: &Self) -> Ordering { Ord::cmp(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, A: ?Sized> Eq for &'a mut A where A: Eq {}\n+    impl<A: ?Sized> Eq for &mut A where A: Eq {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a A where A: PartialEq<B> {"}, {"sha": "b900990d0a7266a90a1abb983cb697ea7148c0c7", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -407,7 +407,7 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n+impl<T: ?Sized, U: ?Sized> AsRef<U> for &T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -416,7 +416,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n+impl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -433,7 +433,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U>\n+impl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T where T: AsMut<U>\n {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()"}, {"sha": "4bc5b36d82ba22f5d7a3500bfa889858d6b4fdce", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -28,7 +28,7 @@ impl<'a> PadAdapter<'a> {\n     }\n }\n \n-impl<'a> fmt::Write for PadAdapter<'a> {\n+impl fmt::Write for PadAdapter<'_> {\n     fn write_str(&mut self, mut s: &str) -> fmt::Result {\n         while !s.is_empty() {\n             if self.on_newline {"}, {"sha": "bd253e69db319af0323603f9ad4200b76c21567a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -208,7 +208,7 @@ pub trait Write {\n         // requiring a `Sized` bound.\n         struct Adapter<'a,T: ?Sized +'a>(&'a mut T);\n \n-        impl<'a, T: ?Sized> Write for Adapter<'a, T>\n+        impl<T: ?Sized> Write for Adapter<'_, T>\n             where T: Write\n         {\n             fn write_str(&mut self, s: &str) -> Result {\n@@ -229,7 +229,7 @@ pub trait Write {\n }\n \n #[stable(feature = \"fmt_write_blanket_impl\", since = \"1.4.0\")]\n-impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+impl<W: Write + ?Sized> Write for &mut W {\n     fn write_str(&mut self, s: &str) -> Result {\n         (**self).write_str(s)\n     }\n@@ -291,8 +291,8 @@ pub struct ArgumentV1<'a> {\n \n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n            issue = \"0\")]\n-impl<'a> Clone for ArgumentV1<'a> {\n-    fn clone(&self) -> ArgumentV1<'a> {\n+impl Clone for ArgumentV1<'_> {\n+    fn clone(&self) -> Self {\n         *self\n     }\n }\n@@ -436,14 +436,14 @@ pub struct Arguments<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Debug for Arguments<'a> {\n+impl Debug for Arguments<'_> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         Display::fmt(self, fmt)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Display for Arguments<'a> {\n+impl Display for Arguments<'_> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         write(fmt.buf, *self)\n     }\n@@ -1884,7 +1884,7 @@ impl<'a> Formatter<'a> {\n }\n \n #[stable(since = \"1.2.0\", feature = \"formatter_write\")]\n-impl<'a> Write for Formatter<'a> {\n+impl Write for Formatter<'_> {\n     fn write_str(&mut self, s: &str) -> Result {\n         self.buf.write_str(s)\n     }\n@@ -1911,11 +1911,11 @@ macro_rules! fmt_refs {\n     ($($tr:ident),*) => {\n         $(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T: ?Sized + $tr> $tr for &'a T {\n+        impl<T: ?Sized + $tr> $tr for &T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T: ?Sized + $tr> $tr for &'a mut T {\n+        impl<T: ?Sized + $tr> $tr for &mut T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n@@ -2039,14 +2039,14 @@ impl<T: ?Sized> Pointer for *mut T {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Pointer for &'a T {\n+impl<T: ?Sized> Pointer for &T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Pointer for &'a mut T {\n+impl<T: ?Sized> Pointer for &mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n@@ -2153,14 +2153,14 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized + Debug> Debug for Ref<'b, T> {\n+impl<T: ?Sized + Debug> Debug for Ref<'_, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'b, T: ?Sized + Debug> Debug for RefMut<'b, T> {\n+impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Debug::fmt(&*(self.deref()), f)\n     }"}, {"sha": "bbebadd452a269a8474c297fb9756afde65a5ba7", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -361,7 +361,7 @@ pub trait Hasher {\n }\n \n #[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]\n-impl<'a, H: Hasher + ?Sized> Hasher for &'a mut H {\n+impl<H: Hasher + ?Sized> Hasher for &mut H {\n     fn finish(&self) -> u64 {\n         (**self).finish()\n     }\n@@ -669,14 +669,14 @@ mod impls {\n \n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized + Hash> Hash for &'a T {\n+    impl<T: ?Sized + Hash> Hash for &T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized + Hash> Hash for &'a mut T {\n+    impl<T: ?Sized + Hash> Hash for &mut T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }"}, {"sha": "4ed4ddb5b656f92b83e26fd304828a723576cf1a", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -2557,7 +2557,7 @@ fn select_fold1<I, B, FProj, FCmp>(mut it: I,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n+impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;\n     fn next(&mut self) -> Option<I::Item> { (**self).next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }"}, {"sha": "f95f8e7dbcbb64343cd313b8cc31072368a190b0", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -724,7 +724,7 @@ pub trait ExactSizeIterator: Iterator {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {\n+impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for &mut I {\n     fn len(&self) -> usize {\n         (**self).len()\n     }\n@@ -974,7 +974,7 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n pub trait FusedIterator: Iterator {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n+impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n \n /// An iterator that reports an accurate length using size_hint.\n ///\n@@ -999,4 +999,4 @@ impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n pub unsafe trait TrustedLen : Iterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, I: TrustedLen + ?Sized> TrustedLen for &'a mut I {}\n+unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}"}, {"sha": "184ed19da952477062ec3f1ca514139518e1b71c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -87,6 +87,7 @@\n #![feature(doc_spotlight)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n+#![feature(impl_header_lifetime_elision)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "266c6913747f123544e31909c81a06e106b428b4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -584,9 +584,9 @@ impls! { PhantomData }\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n+    unsafe impl<T: Sync + ?Sized> Send for &T {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n+    unsafe impl<T: Send + ?Sized> Send for &mut T {}\n }\n \n /// Compiler-internal trait used to determine whether a type contains\n@@ -600,8 +600,8 @@ impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n unsafe impl<T: ?Sized> Freeze for *const T {}\n unsafe impl<T: ?Sized> Freeze for *mut T {}\n-unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n-unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n+unsafe impl<T: ?Sized> Freeze for &T {}\n+unsafe impl<T: ?Sized> Freeze for &mut T {}\n \n /// Types which can be safely moved after being pinned.\n ///\n@@ -689,6 +689,6 @@ mod copy_impls {\n \n     // Shared references can be copied, but mutable references *cannot*!\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, T: ?Sized> Copy for &'a T {}\n+    impl<T: ?Sized> Copy for &T {}\n \n }"}, {"sha": "91a3d77e8b2efa9363fee3ca4419a78871537a3e", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -83,14 +83,14 @@ pub trait Deref {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a T {\n+impl<T: ?Sized> Deref for &T {\n     type Target = T;\n \n     fn deref(&self) -> &T { *self }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a mut T {\n+impl<T: ?Sized> Deref for &mut T {\n     type Target = T;\n \n     fn deref(&self) -> &T { *self }\n@@ -174,6 +174,6 @@ pub trait DerefMut: Deref {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> DerefMut for &'a mut T {\n+impl<T: ?Sized> DerefMut for &mut T {\n     fn deref_mut(&mut self) -> &mut T { *self }\n }"}, {"sha": "c9591c3f57bb0fd74b3f34f274b8fe0e85e502e1", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -240,7 +240,7 @@ pub trait FnOnce<Args> {\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> Fn<A> for &'a F\n+    impl<A,F:?Sized> Fn<A> for &F\n         where F : Fn<A>\n     {\n         extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n@@ -249,7 +249,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a F\n+    impl<A,F:?Sized> FnMut<A> for &F\n         where F : Fn<A>\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n@@ -258,7 +258,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a F\n+    impl<A,F:?Sized> FnOnce<A> for &F\n         where F : Fn<A>\n     {\n         type Output = F::Output;\n@@ -269,7 +269,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a mut F\n+    impl<A,F:?Sized> FnMut<A> for &mut F\n         where F : FnMut<A>\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n@@ -278,7 +278,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a mut F\n+    impl<A,F:?Sized> FnOnce<A> for &mut F\n         where F : FnMut<A>\n     {\n         type Output = F::Output;"}, {"sha": "297089926b536ce5e93bb92c544b440c61bc64c8", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -124,7 +124,7 @@ pub trait Generator {\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<'a, T> Generator for &'a mut T\n+impl<T> Generator for &mut T\n     where T: Generator + ?Sized\n {\n     type Yield = T::Yield;"}, {"sha": "f7e5a89a7aae1108ca70e97e0856adda3568cad4", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -851,7 +851,7 @@ impl<'a, T: ?Sized + 'a> RangeBounds<T> for (Bound<&'a T>, Bound<&'a T>) {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeFrom<&'a T> {\n+impl<T> RangeBounds<T> for RangeFrom<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -861,7 +861,7 @@ impl<'a, T> RangeBounds<T> for RangeFrom<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeTo<&'a T> {\n+impl<T> RangeBounds<T> for RangeTo<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -871,7 +871,7 @@ impl<'a, T> RangeBounds<T> for RangeTo<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for Range<&'a T> {\n+impl<T> RangeBounds<T> for Range<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -881,7 +881,7 @@ impl<'a, T> RangeBounds<T> for Range<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeInclusive<&'a T> {\n+impl<T> RangeBounds<T> for RangeInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -891,7 +891,7 @@ impl<'a, T> RangeBounds<T> for RangeInclusive<&'a T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T> RangeBounds<T> for RangeToInclusive<&'a T> {\n+impl<T> RangeBounds<T> for RangeToInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }"}, {"sha": "0255f7a0885ead6d69c17ee72a4d8b12d8f26990", "filename": "src/libcore/option.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -1153,18 +1153,18 @@ impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n+impl<A> ExactSizeIterator for Iter<'_, A> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, A> FusedIterator for Iter<'a, A> {}\n+impl<A> FusedIterator for Iter<'_, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+unsafe impl<A> TrustedLen for Iter<'_, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> Clone for Iter<'a, A> {\n+impl<A> Clone for Iter<'_, A> {\n     #[inline]\n-    fn clone(&self) -> Iter<'a, A> {\n+    fn clone(&self) -> Self {\n         Iter { inner: self.inner.clone() }\n     }\n }\n@@ -1199,12 +1199,12 @@ impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n+impl<A> ExactSizeIterator for IterMut<'_, A> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, A> FusedIterator for IterMut<'a, A> {}\n+impl<A> FusedIterator for IterMut<'_, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n+unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n \n /// An iterator over the value in [`Some`] variant of an [`Option`].\n ///"}, {"sha": "f0efeb59e8d6e12225366c7ac19b1e6a6e6f28ab", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -133,7 +133,7 @@ impl<'a> PanicInfo<'a> {\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n-impl<'a> fmt::Display for PanicInfo<'a> {\n+impl fmt::Display for PanicInfo<'_> {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         formatter.write_str(\"panicked at \")?;\n         if let Some(message) = self.message {\n@@ -258,7 +258,7 @@ impl<'a> Location<'a> {\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n-impl<'a> fmt::Display for Location<'a> {\n+impl fmt::Display for Location<'_> {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(formatter, \"{}:{}:{}\", self.file, self.line, self.col)\n     }"}, {"sha": "3484664c24205c3968e967801bf187fc54158cdf", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -1098,18 +1098,18 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n+impl<T> ExactSizeIterator for Iter<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Iter<'a, T> {}\n+impl<T> FusedIterator for Iter<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n+unsafe impl<A> TrustedLen for Iter<'_, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n     #[inline]\n-    fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n+    fn clone(&self) -> Self { Iter { inner: self.inner } }\n }\n \n /// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n@@ -1143,13 +1143,13 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n+impl<T> ExactSizeIterator for IterMut<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+impl<T> FusedIterator for IterMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n+unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n \n /// An iterator over the value in a [`Ok`] variant of a [`Result`].\n ///"}, {"sha": "a51c641cf35adeb229b767a6f1cdd6f2a0cb2c25", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -2528,15 +2528,15 @@ impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n ////////////////////////////////////////////////////////////////////////////////\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Default for &'a [T] {\n+impl<T> Default for &[T] {\n     /// Creates an empty slice.\n-    fn default() -> &'a [T] { &[] }\n+    fn default() -> Self { &[] }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n-impl<'a, T> Default for &'a mut [T] {\n+impl<T> Default for &mut [T] {\n     /// Creates a mutable empty slice.\n-    fn default() -> &'a mut [T] { &mut [] }\n+    fn default() -> Self { &mut [] }\n }\n \n //\n@@ -2863,7 +2863,7 @@ pub struct Iter<'a, T: 'a> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n             .field(&self.as_slice())\n@@ -2872,9 +2872,9 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n+unsafe impl<T: Sync> Sync for Iter<'_, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n+unsafe impl<T: Sync> Send for Iter<'_, T> {}\n \n impl<'a, T> Iter<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -2910,12 +2910,12 @@ impl<'a, T> Iter<'a, T> {\n iterator!{struct Iter -> *const T, &'a T, const, /* no mut */}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n }\n \n #[stable(feature = \"slice_iter_as_ref\", since = \"1.13.0\")]\n-impl<'a, T> AsRef<[T]> for Iter<'a, T> {\n+impl<T> AsRef<[T]> for Iter<'_, T> {\n     fn as_ref(&self) -> &[T] {\n         self.as_slice()\n     }\n@@ -2955,7 +2955,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n             .field(&self.make_slice())\n@@ -2964,9 +2964,9 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n+unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n+unsafe impl<T: Send> Send for IterMut<'_, T> {}\n \n impl<'a, T> IterMut<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -3034,7 +3034,7 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for Split<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"Split\")\n             .field(\"v\", &self.v)\n@@ -3045,8 +3045,8 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n-    fn clone(&self) -> Split<'a, T, P> {\n+impl<T, P> Clone for Split<'_, T, P> where P: Clone + FnMut(&T) -> bool {\n+    fn clone(&self) -> Self {\n         Split {\n             v: self.v,\n             pred: self.pred.clone(),\n@@ -3108,7 +3108,7 @@ impl<'a, T, P> SplitIter for Split<'a, T, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n@@ -3125,7 +3125,7 @@ pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitMut\")\n             .field(\"v\", &self.v)\n@@ -3206,7 +3206,7 @@ impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, starting from the end of the slice.\n@@ -3222,7 +3222,7 @@ pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplit<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n             .field(\"v\", &self.inner.v)\n@@ -3263,7 +3263,7 @@ impl<'a, T, P> SplitIter for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`, starting from the end of the slice.\n@@ -3278,7 +3278,7 @@ pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n             .field(\"v\", &self.inner.v)\n@@ -3321,7 +3321,7 @@ impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n-impl<'a, T, P> FusedIterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n+impl<T, P> FusedIterator for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An private iterator over subslices separated by elements that\n /// match a predicate function, splitting at most a fixed number of\n@@ -3364,7 +3364,7 @@ pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitN<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitN\")\n             .field(\"inner\", &self.inner)\n@@ -3386,7 +3386,7 @@ pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitN<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitN\")\n             .field(\"inner\", &self.inner)\n@@ -3407,7 +3407,7 @@ pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for SplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SplitNMut\")\n             .field(\"inner\", &self.inner)\n@@ -3429,7 +3429,7 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+impl<T: fmt::Debug, P> fmt::Debug for RSplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitNMut\")\n             .field(\"inner\", &self.inner)\n@@ -3482,8 +3482,8 @@ pub struct Windows<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Windows<'a, T> {\n-    fn clone(&self) -> Windows<'a, T> {\n+impl<T> Clone for Windows<'_, T> {\n+    fn clone(&self) -> Self {\n         Windows {\n             v: self.v,\n             size: self.size,\n@@ -3560,13 +3560,13 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n+impl<T> ExactSizeIterator for Windows<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for Windows<'a, T> {}\n+unsafe impl<T> TrustedLen for Windows<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Windows<'a, T> {}\n+impl<T> FusedIterator for Windows<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n@@ -3595,8 +3595,8 @@ pub struct Chunks<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Chunks<'a, T> {\n-    fn clone(&self) -> Chunks<'a, T> {\n+impl<T> Clone for Chunks<'_, T> {\n+    fn clone(&self) -> Self {\n         Chunks {\n             v: self.v,\n             chunk_size: self.chunk_size,\n@@ -3682,13 +3682,13 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n+impl<T> ExactSizeIterator for Chunks<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for Chunks<'a, T> {}\n+unsafe impl<T> TrustedLen for Chunks<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for Chunks<'a, T> {}\n+impl<T> FusedIterator for Chunks<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n@@ -3801,13 +3801,13 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n+impl<T> ExactSizeIterator for ChunksMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksMut<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksMut<'_, T> {}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n+impl<T> FusedIterator for ChunksMut<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n@@ -3854,8 +3854,8 @@ impl<'a, T> ChunksExact<'a, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> Clone for ChunksExact<'a, T> {\n-    fn clone(&self) -> ChunksExact<'a, T> {\n+impl<T> Clone for ChunksExact<'_, T> {\n+    fn clone(&self) -> Self {\n         ChunksExact {\n             v: self.v,\n             rem: self.rem,\n@@ -3924,17 +3924,17 @@ impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ChunksExact<'a, T> {\n+impl<T> ExactSizeIterator for ChunksExact<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksExact<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksExact<'_, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ChunksExact<'a, T> {}\n+impl<T> FusedIterator for ChunksExact<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n@@ -4039,17 +4039,17 @@ impl<'a, T> DoubleEndedIterator for ChunksExactMut<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ChunksExactMut<'a, T> {\n+impl<T> ExactSizeIterator for ChunksExactMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ChunksExactMut<'a, T> {}\n+unsafe impl<T> TrustedLen for ChunksExactMut<'_, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ChunksExactMut<'a, T> {}\n+impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {"}, {"sha": "a2782dd8e2e430f7905c0049d335101bdcadf9b6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -617,7 +617,7 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Chars<'a> {}\n+impl FusedIterator for Chars<'_> {}\n \n impl<'a> Chars<'a> {\n     /// View the underlying data as a subslice of the original data.\n@@ -707,7 +707,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for CharIndices<'a> {}\n+impl FusedIterator for CharIndices<'_> {}\n \n impl<'a> CharIndices<'a> {\n     /// View the underlying data as a subslice of the original data.\n@@ -733,7 +733,7 @@ impl<'a> CharIndices<'a> {\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for Bytes<'a> {\n+impl Iterator for Bytes<'_> {\n     type Item = u8;\n \n     #[inline]\n@@ -794,7 +794,7 @@ impl<'a> Iterator for Bytes<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> DoubleEndedIterator for Bytes<'a> {\n+impl DoubleEndedIterator for Bytes<'_> {\n     #[inline]\n     fn next_back(&mut self) -> Option<u8> {\n         self.0.next_back()\n@@ -809,7 +809,7 @@ impl<'a> DoubleEndedIterator for Bytes<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> ExactSizeIterator for Bytes<'a> {\n+impl ExactSizeIterator for Bytes<'_> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.0.len()\n@@ -822,10 +822,10 @@ impl<'a> ExactSizeIterator for Bytes<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Bytes<'a> {}\n+impl FusedIterator for Bytes<'_> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a> TrustedLen for Bytes<'a> {}\n+unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n unsafe impl<'a> TrustedRandomAccess for Bytes<'a> {\n@@ -1342,7 +1342,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Lines<'a> {}\n+impl FusedIterator for Lines<'_> {}\n \n /// Created with the method [`lines_any`].\n ///\n@@ -1409,7 +1409,7 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n #[allow(deprecated)]\n-impl<'a> FusedIterator for LinesAny<'a> {}\n+impl FusedIterator for LinesAny<'_> {}\n \n /*\n Section: UTF-8 validation\n@@ -4033,15 +4033,15 @@ impl AsRef<[u8]> for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Default for &'a str {\n+impl Default for &str {\n     /// Creates an empty str\n-    fn default() -> &'a str { \"\" }\n+    fn default() -> Self { \"\" }\n }\n \n #[stable(feature = \"default_mut_str\", since = \"1.28.0\")]\n-impl<'a> Default for &'a mut str {\n+impl Default for &mut str {\n     /// Creates an empty mutable str\n-    fn default() -> &'a mut str { unsafe { from_utf8_unchecked_mut(&mut []) } }\n+    fn default() -> Self { unsafe { from_utf8_unchecked_mut(&mut []) } }\n }\n \n /// An iterator over the non-whitespace substrings of a string,\n@@ -4189,7 +4189,7 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for SplitWhitespace<'a> {}\n+impl FusedIterator for SplitWhitespace<'_> {}\n \n #[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n@@ -4215,7 +4215,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n }\n \n #[unstable(feature = \"split_ascii_whitespace\", issue = \"48656\")]\n-impl<'a> FusedIterator for SplitAsciiWhitespace<'a> {}\n+impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n@@ -4234,7 +4234,7 @@ pub struct EncodeUtf16<'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a> fmt::Debug for EncodeUtf16<'a> {\n+impl fmt::Debug for EncodeUtf16<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"EncodeUtf16 { .. }\")\n     }\n@@ -4273,4 +4273,4 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for EncodeUtf16<'a> {}\n+impl FusedIterator for EncodeUtf16<'_> {}"}, {"sha": "1c974533e10c826a60eef8e6c3ef852d7d85b2f0", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -491,7 +491,7 @@ impl<F> MultiCharEq for F where F: FnMut(char) -> bool {\n     fn matches(&mut self, c: char) -> bool { (*self)(c) }\n }\n \n-impl<'a> MultiCharEq for &'a [char] {\n+impl MultiCharEq for &[char] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n         self.iter().any(|&m| { m == c })\n@@ -666,7 +666,7 @@ impl<'a, 'b> Pattern<'a> for &'b [char] {\n pub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::Searcher)\n     where F: FnMut(char) -> bool;\n \n-impl<'a, F> fmt::Debug for CharPredicateSearcher<'a, F>\n+impl<F> fmt::Debug for CharPredicateSearcher<'_, F>\n     where F: FnMut(char) -> bool\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "2476c07cbd9ca307baa5b8eaa676c4601492684c", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3bd9b6abe1191121f0f6c3fab73dd388e62654/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0a3bd9b6abe1191121f0f6c3fab73dd388e62654", "patch": "@@ -229,7 +229,7 @@ fn test_iterator_step_by_nth_overflow() {\n \n     #[derive(Clone)]\n     struct Test(Bigger);\n-    impl<'a> Iterator for &'a mut Test {\n+    impl Iterator for &mut Test {\n         type Item = i32;\n         fn next(&mut self) -> Option<Self::Item> { Some(21) }\n         fn nth(&mut self, n: usize) -> Option<Self::Item> {"}]}