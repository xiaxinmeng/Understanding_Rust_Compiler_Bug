{"sha": "9ecbadcedb4971d29c34453b010899ec0e336e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2JhZGNlZGI0OTcxZDI5YzM0NDUzYjAxMDg5OWVjMGUzMzZlMmQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-16T20:45:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-16T20:45:34Z"}, "message": "Fix index-out-of-bounds panic in match checking", "tree": {"sha": "5abd0e080a30f024deb9dc8eb90db0ac12652e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abd0e080a30f024deb9dc8eb90db0ac12652e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecbadcedb4971d29c34453b010899ec0e336e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecbadcedb4971d29c34453b010899ec0e336e2d", "html_url": "https://github.com/rust-lang/rust/commit/9ecbadcedb4971d29c34453b010899ec0e336e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecbadcedb4971d29c34453b010899ec0e336e2d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7974e5fb921236fea74731d8edde518f08e73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7974e5fb921236fea74731d8edde518f08e73a", "html_url": "https://github.com/rust-lang/rust/commit/5d7974e5fb921236fea74731d8edde518f08e73a"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "42004282c736f1806f1a30d019bdaf01cdc732f2", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9ecbadcedb4971d29c34453b010899ec0e336e2d/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecbadcedb4971d29c34453b010899ec0e336e2d/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=9ecbadcedb4971d29c34453b010899ec0e336e2d", "patch": "@@ -362,7 +362,12 @@ impl PatStack {\n         cx: &MatchCheckCtx,\n         constructor: &Constructor,\n     ) -> MatchCheckResult<Option<PatStack>> {\n-        let result = match (self.head().as_pat(cx), constructor) {\n+        if self.is_empty() {\n+            return Ok(None);\n+        }\n+\n+        let head_pat = self.head().as_pat(cx);\n+        let result = match (head_pat, constructor) {\n             (Pat::Tuple { args: ref pat_ids, ellipsis }, Constructor::Tuple { arity: _ }) => {\n                 if ellipsis.is_some() {\n                     // If there are ellipsis here, we should add the correct number of\n@@ -531,7 +536,7 @@ impl Matrix {\n     }\n \n     fn heads(&self) -> Vec<PatIdOrWild> {\n-        self.0.iter().map(|p| p.head()).collect()\n+        self.0.iter().flat_map(|p| p.get_head()).collect()\n     }\n \n     /// Computes `D(self)` for each contained PatStack.\n@@ -1992,6 +1997,25 @@ mod tests {\n \n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn or_pattern_panic() {\n+        let content = r\"\n+            pub enum Category {\n+                Infinity,\n+                Zero,\n+            }\n+\n+            fn panic(a: Category, b: Category) {\n+                match (a, b) {\n+                    (Category::Zero | Category::Infinity, _) => {}\n+                    (_, Category::Zero | Category::Infinity) => {}\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n }\n \n #[cfg(test)]"}]}