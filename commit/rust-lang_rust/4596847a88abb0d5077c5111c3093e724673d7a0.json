{"sha": "4596847a88abb0d5077c5111c3093e724673d7a0", "node_id": "C_kwDOAAsO6NoAKDQ1OTY4NDdhODhhYmIwZDUwNzdjNTExMWMzMDkzZTcyNDY3M2Q3YTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T14:51:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T14:51:03Z"}, "message": "Auto merge of #13746 - feniljain:fix_extract_function, r=jonas-schievink\n\nfix: make make_body respect comments in extract_function\n\nPossible fix for #13621\n\n### Points to help in review:\n\n- Earlier we were only considering statements in a block expr and hence comments were being ignored, now we handle tokens hence making it aware of comments and then preserving them using `hacky_block_expr_with_comments`\n\nSeems like I am not able to attach output video, github is glitching for it :(", "tree": {"sha": "49d912b565c37f12688a839af7aa884478b47f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49d912b565c37f12688a839af7aa884478b47f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4596847a88abb0d5077c5111c3093e724673d7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4596847a88abb0d5077c5111c3093e724673d7a0", "html_url": "https://github.com/rust-lang/rust/commit/4596847a88abb0d5077c5111c3093e724673d7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4596847a88abb0d5077c5111c3093e724673d7a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ff8a5a9fd8d0af2793eaef091700139bba513d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ff8a5a9fd8d0af2793eaef091700139bba513d", "html_url": "https://github.com/rust-lang/rust/commit/15ff8a5a9fd8d0af2793eaef091700139bba513d"}, {"sha": "d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "html_url": "https://github.com/rust-lang/rust/commit/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "4ee9d4638bbd57deca9d5b6c766b4351dfd1281d", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4596847a88abb0d5077c5111c3093e724673d7a0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4596847a88abb0d5077c5111c3093e724673d7a0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=4596847a88abb0d5077c5111c3093e724673d7a0", "patch": "@@ -1799,7 +1799,6 @@ fn make_body(\n                 })\n                 .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n-\n             make::hacky_block_expr_with_comments(elements, tail_expr)\n         }\n     };\n@@ -1860,9 +1859,29 @@ fn with_default_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::B\n }\n \n fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr {\n-    let stmt_tail = block.tail_expr().map(|expr| make::expr_stmt(expr).into());\n-    let stmts = block.statements().chain(stmt_tail);\n-    make::block_expr(stmts, Some(tail_expr))\n+    let stmt_tail_opt: Option<ast::Stmt> =\n+        block.tail_expr().map(|expr| make::expr_stmt(expr).into());\n+\n+    let mut elements: Vec<SyntaxElement> = vec![];\n+\n+    block.statements().for_each(|stmt| {\n+        elements.push(syntax::NodeOrToken::Node(stmt.syntax().clone()));\n+    });\n+\n+    if let Some(stmt_list) = block.stmt_list() {\n+        stmt_list.syntax().children_with_tokens().for_each(|node_or_token| {\n+            match &node_or_token {\n+                syntax::NodeOrToken::Token(_) => elements.push(node_or_token),\n+                _ => (),\n+            };\n+        });\n+    }\n+\n+    if let Some(stmt_tail) = stmt_tail_opt {\n+        elements.push(syntax::NodeOrToken::Node(stmt_tail.syntax().clone()));\n+    }\n+\n+    make::hacky_block_expr_with_comments(elements, Some(tail_expr))\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n@@ -5744,6 +5763,46 @@ fn $0fun_name() -> Option<()> {\n     };\n     Some(a)\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn non_tail_expr_with_comment_of_tail_expr_loop() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+pub fn f() {\n+    loop {\n+        $0// A comment\n+        if true {\n+            continue;\n+        }$0\n+        if false {\n+            break;\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub fn f() {\n+    loop {\n+        if let ControlFlow::Break(_) = fun_name() {\n+            continue;\n+        }\n+        if false {\n+            break;\n+        }\n+    }\n+}\n+\n+fn $0fun_name() -> ControlFlow<()> {\n+    // A comment\n+    if true {\n+        return ControlFlow::Break(());\n+    }\n+    ControlFlow::Continue(())\n+}\n \"#,\n         );\n     }"}]}