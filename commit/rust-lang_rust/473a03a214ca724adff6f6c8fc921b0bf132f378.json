{"sha": "473a03a214ca724adff6f6c8fc921b0bf132f378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3M2EwM2EyMTRjYTcyNGFkZmY2ZjZjOGZjOTIxYjBiZjEzMmYzNzg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T14:35:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T14:35:31Z"}, "message": "Add 'simple' visiting to visit.rs", "tree": {"sha": "64e13c8a9213331feb2959fb4165e7c324ef24a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e13c8a9213331feb2959fb4165e7c324ef24a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473a03a214ca724adff6f6c8fc921b0bf132f378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473a03a214ca724adff6f6c8fc921b0bf132f378", "html_url": "https://github.com/rust-lang/rust/commit/473a03a214ca724adff6f6c8fc921b0bf132f378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473a03a214ca724adff6f6c8fc921b0bf132f378/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2509a3dcae822c3a7f4fcb5d2884f255e7bac737", "url": "https://api.github.com/repos/rust-lang/rust/commits/2509a3dcae822c3a7f4fcb5d2884f255e7bac737", "html_url": "https://github.com/rust-lang/rust/commit/2509a3dcae822c3a7f4fcb5d2884f255e7bac737"}], "stats": {"total": 109, "additions": 105, "deletions": 4}, "files": [{"sha": "b18134a485a151f2da59cb40cd31e593311d9f47", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 105, "deletions": 4, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/473a03a214ca724adff6f6c8fc921b0bf132f378/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473a03a214ca724adff6f6c8fc921b0bf132f378/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=473a03a214ca724adff6f6c8fc921b0bf132f378", "patch": "@@ -12,9 +12,8 @@ import codemap::span;\n // visit::visit_* to apply the default traversal algorithm (again, it can\n // override the context), or prevent deeper traversal by doing nothing.\n \n-// Lots of redundant indirection and refcounting. Our typesystem doesn't do\n-// circular types, so the visitor record can not hold functions that take\n-// visitors. A vt tag is used to break the cycle.\n+// Our typesystem doesn't do circular types, so the visitor record can not\n+// hold functions that take visitors. A vt tag is used to break the cycle.\n tag vt[E] { mk_vt(visitor[E]); }\n \n type visitor[E] =\n@@ -193,7 +192,6 @@ fn visit_ty_opt[E](&option::t[@ty] ot, &E e, &vt[E] v) {\n \n fn visit_constr[E](&path operator, &span sp, node_id id, &E e, &vt[E] v) {\n     // default\n-\n }\n \n fn visit_pat[E](&@pat p, &E e, &vt[E] v) {\n@@ -414,6 +412,109 @@ fn visit_arm[E](&arm a, &E e, &vt[E] v) {\n     v.visit_block(a.block, e, v);\n }\n \n+// Simpler, non-context passing interface. Always walks the whole tree, simply\n+// calls the given functions on the nodes.\n+\n+type simple_visitor =\n+    @rec(fn(&_mod, &span)  visit_mod,\n+         fn(&@view_item)  visit_view_item,\n+         fn(&@native_item)  visit_native_item,\n+         fn(&@item)  visit_item,\n+         fn(&@local)  visit_local,\n+         fn(&ast::blk)  visit_block,\n+         fn(&@stmt)  visit_stmt,\n+         fn(&arm)  visit_arm,\n+         fn(&@pat)  visit_pat,\n+         fn(&@decl)  visit_decl,\n+         fn(&@expr)  visit_expr,\n+         fn(&@ty)  visit_ty,\n+         // takes the components so that one function can be\n+         // generic over constr and ty_constr\n+         fn(&path, &span, node_id)  visit_constr,\n+         fn(&_fn, &ty_param[], &span, &fn_ident, node_id) visit_fn);\n+\n+fn default_simple_visitor() -> simple_visitor {\n+    ret @rec(visit_mod=fn(&_mod m, &span sp) {},\n+             visit_view_item=fn(&@view_item vi) {},\n+             visit_native_item=fn(&@native_item ni) {},\n+             visit_item=fn(&@item i) {},\n+             visit_local=fn(&@local l) {},\n+             visit_block=fn(&ast::blk b) {},\n+             visit_stmt=fn(&@stmt s) {},\n+             visit_arm=fn(&arm a) {},\n+             visit_pat=fn(&@pat p) {},\n+             visit_decl=fn(&@decl d) {},\n+             visit_expr=fn(&@expr e) {},\n+             visit_ty=fn(&@ty t) {},\n+             visit_constr=fn(&path p, &span sp, node_id id) {},\n+             visit_fn=fn(&_fn f, &ty_param[] tps, &span sp,\n+                         &fn_ident ident, node_id id) {});\n+}\n+\n+fn mk_simple_visitor(&simple_visitor v) -> vt[()] {\n+    fn v_mod(fn(&_mod, &span) f, &_mod m, &span sp, &() e, &vt[()] v) {\n+        f(m, sp); visit_mod(m, sp, e, v);\n+    }\n+    fn v_view_item(fn(&@view_item) f, &@view_item vi, &() e, &vt[()] v) {\n+        f(vi); visit_view_item(vi, e, v);\n+    }\n+    fn v_native_item(fn(&@native_item) f, &@native_item ni, &() e, &vt[()] v){\n+        f(ni); visit_native_item(ni, e, v);\n+    }\n+    fn v_item(fn(&@item) f, &@item i, &() e, &vt[()] v) {\n+        f(i); visit_item(i, e, v);\n+    }\n+    fn v_local(fn(&@local) f, &@local l, &() e, &vt[()] v) {\n+        f(l); visit_local(l, e, v);\n+    }\n+    fn v_block(fn(&ast::blk) f, &ast::blk bl, &() e, &vt[()] v) {\n+        f(bl); visit_block(bl, e, v);\n+    }\n+    fn v_stmt(fn(&@stmt) f, &@stmt st, &() e, &vt[()] v) {\n+        f(st); visit_stmt(st, e, v);\n+    }\n+    fn v_arm(fn(&arm) f, &arm a, &() e, &vt[()] v) {\n+        f(a); visit_arm(a, e, v);\n+    }\n+    fn v_pat(fn(&@pat) f, &@pat p, &() e, &vt[()] v) {\n+        f(p); visit_pat(p, e, v);\n+    }\n+    fn v_decl(fn(&@decl) f, &@decl d, &() e, &vt[()] v) {\n+        f(d); visit_decl(d, e, v);\n+    }\n+    fn v_expr(fn(&@expr) f, &@expr ex, &() e, &vt[()] v) {\n+        f(ex); visit_expr(ex, e, v);\n+    }\n+    fn v_ty(fn(&@ty) f, &@ty ty, &() e, &vt[()] v) {\n+        f(ty); visit_ty(ty, e, v);\n+    }\n+    fn v_constr(fn(&path, &span, node_id) f,\n+                &path pt, &span sp, node_id id, &() e, &vt[()] v) {\n+        f(pt, sp, id); visit_constr(pt, sp, id, e, v);\n+    }\n+    fn v_fn(fn(&_fn, &ty_param[], &span, &fn_ident, node_id) f,\n+            &_fn ff, &ty_param[] tps, &span sp, &fn_ident ident, node_id id,\n+            &() e, &vt[()] v) {\n+        f(ff, tps, sp, ident, id); visit_fn(ff, tps, sp, ident, id, e, v);\n+    }\n+    ret mk_vt(@rec(visit_mod=bind v_mod(v.visit_mod, _, _, _, _),\n+                   visit_view_item=\n+                       bind v_view_item(v.visit_view_item, _, _, _),\n+                   visit_native_item=\n+                       bind v_native_item(v.visit_native_item, _, _, _),\n+                   visit_item=bind v_item(v.visit_item, _, _, _),\n+                   visit_local=bind v_local(v.visit_local, _, _, _),\n+                   visit_block=bind v_block(v.visit_block, _, _, _),\n+                   visit_stmt=bind v_stmt(v.visit_stmt, _, _, _),\n+                   visit_arm=bind v_arm(v.visit_arm, _, _, _),\n+                   visit_pat=bind v_pat(v.visit_pat, _, _, _),\n+                   visit_decl=bind v_decl(v.visit_decl, _, _, _),\n+                   visit_expr=bind v_expr(v.visit_expr, _, _, _),\n+                   visit_ty=bind v_ty(v.visit_ty, _, _, _),\n+                   visit_constr=bind v_constr(v.visit_constr, _, _, _, _, _),\n+                   visit_fn=bind v_fn(v.visit_fn, _, _, _, _, _, _, _)));\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}