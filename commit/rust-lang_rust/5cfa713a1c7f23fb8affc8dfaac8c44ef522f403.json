{"sha": "5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmE3MTNhMWM3ZjIzZmI4YWZmYzhkZmFhYzhjNDRlZjUyMmY0MDM=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-29T21:58:43Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-05-06T02:03:45Z"}, "message": "Use `empty()` instead of a special const", "tree": {"sha": "e461fc0d1bffa45268a7914764b138cb17e9d3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e461fc0d1bffa45268a7914764b138cb17e9d3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "html_url": "https://github.com/rust-lang/rust/commit/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252b5444daf83a9f1b18e2dfe4b46830d2be4447", "url": "https://api.github.com/repos/rust-lang/rust/commits/252b5444daf83a9f1b18e2dfe4b46830d2be4447", "html_url": "https://github.com/rust-lang/rust/commit/252b5444daf83a9f1b18e2dfe4b46830d2be4447"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "8bb83c54da8a3681d92ff8b8410ea0951f4832ce", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "patch": "@@ -45,8 +45,6 @@ use std::collections::hash_map::Entry;\n bitflags! {\n     #[derive(RustcEncodable, RustcDecodable)]\n     flags ConstQualif: u8 {\n-        // Const rvalue which can be placed behind a reference.\n-        const PURE_CONST         = 0,\n         // Inner mutability (can not be placed behind a reference) or behind\n         // &mut in a non-global expression. Can be copied from static memory.\n         const MUTABLE_MEM        = 1 << 0,\n@@ -104,7 +102,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     {\n         let (old_mode, old_qualif) = (self.mode, self.qualif);\n         self.mode = mode;\n-        self.qualif = ConstQualif::PURE_CONST;\n+        self.qualif = ConstQualif::empty();\n         let r = f(self);\n         self.mode = old_mode;\n         self.qualif = old_qualif;\n@@ -128,7 +126,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             Entry::Occupied(entry) => return *entry.get(),\n             Entry::Vacant(entry) => {\n                 // Prevent infinite recursion on re-entry.\n-                entry.insert(ConstQualif::PURE_CONST);\n+                entry.insert(ConstQualif::empty());\n             }\n         }\n         self.with_mode(mode, |this| {\n@@ -273,7 +271,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, ex: &ast::Expr) {\n         let mut outer = self.qualif;\n-        self.qualif = ConstQualif::PURE_CONST;\n+        self.qualif = ConstQualif::empty();\n \n         let node_ty = ty::node_id_to_type(self.tcx, ex.id);\n         check_expr(self, ex, node_ty);"}, {"sha": "3fff15049930b6d6b80cbd56c7e8cccb548af858", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "patch": "@@ -850,9 +850,10 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         // Compute maximum lifetime of this rvalue. This is 'static if\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime.\n-        let re = match qualif & check_const::ConstQualif::NON_STATIC_BORROWS {\n-            check_const::ConstQualif::PURE_CONST => ty::ReStatic,\n-            _ => self.temporary_scope(id),\n+        let re = if qualif.intersects(check_const::ConstQualif::NON_STATIC_BORROWS) {\n+            self.temporary_scope(id)\n+        } else {\n+            ty::ReStatic\n         };\n         let ret = self.cat_rvalue(id, span, re, expr_ty);\n         debug!(\"cat_rvalue_node ret {}\", ret.repr(self.tcx()));"}, {"sha": "5298c9682b48c067ceae2c473833c4e7ed159395", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "patch": "@@ -849,7 +849,6 @@ impl<'tcx> ctxt<'tcx> {\n // recursing over the type itself.\n bitflags! {\n     flags TypeFlags: u32 {\n-        const NO_TYPE_FLAGS     = 0,\n         const HAS_PARAMS        = 1 << 0,\n         const HAS_SELF          = 1 << 1,\n         const HAS_TY_INFER      = 1 << 2,\n@@ -2925,7 +2924,7 @@ struct FlagComputation {\n \n impl FlagComputation {\n     fn new() -> FlagComputation {\n-        FlagComputation { flags: TypeFlags::NO_TYPE_FLAGS, depth: 0 }\n+        FlagComputation { flags: TypeFlags::empty(), depth: 0 }\n     }\n \n     fn for_sty(st: &sty) -> FlagComputation {"}, {"sha": "503bdf8dadb94635c654ec1d95a0b5b6f75d62f5", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "patch": "@@ -186,7 +186,7 @@ fn get_const_val(ccx: &CrateContext,\n                  ref_expr: &ast::Expr) -> ValueRef {\n     let expr = get_const_expr(ccx, def_id, ref_expr);\n     let empty_substs = ccx.tcx().mk_substs(Substs::trans_empty());\n-    get_const_expr_as_global(ccx, expr, check_const::ConstQualif::PURE_CONST, empty_substs)\n+    get_const_expr_as_global(ccx, expr, check_const::ConstQualif::empty(), empty_substs)\n }\n \n pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}, {"sha": "eb1c338ac8591fe0405af400791294877e882b61", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfa713a1c7f23fb8affc8dfaac8c44ef522f403/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5cfa713a1c7f23fb8affc8dfaac8c44ef522f403", "patch": "@@ -88,7 +88,6 @@ use std::slice;\n \n bitflags! {\n     flags Restrictions: u8 {\n-        const UNRESTRICTED                  = 0,\n         const RESTRICTION_STMT_EXPR         = 1 << 0,\n         const RESTRICTION_NO_STRUCT_LITERAL = 1 << 1,\n     }\n@@ -339,7 +338,7 @@ impl<'a> Parser<'a> {\n             buffer_start: 0,\n             buffer_end: 0,\n             tokens_consumed: 0,\n-            restrictions: Restrictions::UNRESTRICTED,\n+            restrictions: Restrictions::empty(),\n             quote_depth: 0,\n             obsolete_set: HashSet::new(),\n             mod_path_stack: Vec::new(),\n@@ -2991,7 +2990,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse an expression\n     pub fn parse_expr_nopanic(&mut self) -> PResult<P<Expr>> {\n-        return self.parse_expr_res(Restrictions::UNRESTRICTED);\n+        self.parse_expr_res(Restrictions::empty())\n     }\n \n     /// Parse an expression, subject to the given restrictions"}]}