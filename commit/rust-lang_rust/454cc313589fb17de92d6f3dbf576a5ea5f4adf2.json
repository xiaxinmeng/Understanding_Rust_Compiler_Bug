{"sha": "454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NGNjMzEzNTg5ZmIxN2RlOTJkNmYzZGJmNTc2YTVlYTVmNGFkZjI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-16T15:11:19Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-16T15:11:19Z"}, "message": "Merge #524\n\n524:  Implement array inference r=flodiebold a=h-michael\n\nrelated #394\n\nCo-authored-by: Hirokazu Hata <h.hata.ai.t@gmail.com>", "tree": {"sha": "e67129e4e514e140463d8f0f7bd7556793cac484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67129e4e514e140463d8f0f7bd7556793cac484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "html_url": "https://github.com/rust-lang/rust/commit/454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d75a0368f5048243d6561e42e77835f6f574b321", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75a0368f5048243d6561e42e77835f6f574b321", "html_url": "https://github.com/rust-lang/rust/commit/d75a0368f5048243d6561e42e77835f6f574b321"}, {"sha": "0aedd4fb2f28ec24902d26c7d8a24d6146263d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aedd4fb2f28ec24902d26c7d8a24d6146263d2f", "html_url": "https://github.com/rust-lang/rust/commit/0aedd4fb2f28ec24902d26c7d8a24d6146263d2f"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "6e98ebc697694d15764ab1c26962492993024bfb", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -197,6 +197,9 @@ pub enum Expr {\n     Tuple {\n         exprs: Vec<ExprId>,\n     },\n+    Array {\n+        exprs: Vec<ExprId>,\n+    },\n     Literal(Literal),\n }\n \n@@ -312,7 +315,7 @@ impl Expr {\n             | Expr::UnaryOp { expr, .. } => {\n                 f(*expr);\n             }\n-            Expr::Tuple { exprs } => {\n+            Expr::Tuple { exprs } | Expr::Array { exprs } => {\n                 for expr in exprs {\n                     f(*expr);\n                 }\n@@ -649,6 +652,10 @@ impl ExprCollector {\n                 let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n+            ast::ExprKind::ArrayExpr(e) => {\n+                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                self.alloc_expr(Expr::Array { exprs }, syntax_ptr)\n+            }\n             ast::ExprKind::Literal(e) => {\n                 let child = if let Some(child) = e.literal_expr() {\n                     child\n@@ -691,7 +698,6 @@ impl ExprCollector {\n             // TODO implement HIR for these:\n             ast::ExprKind::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::IndexExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::ExprKind::ArrayExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n         }\n     }"}, {"sha": "c7c0636017f9001e5ba9a21a51c6c4e8786c715d", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -181,11 +181,12 @@ pub enum Ty {\n     /// The pointee of a string slice. Written as `str`.\n     Str,\n \n-    // An array with the given length. Written as `[T; n]`.\n-    // Array(Ty, ty::Const),\n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(Arc<Ty>),\n \n+    // An array with the given length. Written as `[T; n]`.\n+    Array(Arc<Ty>),\n+\n     /// A raw pointer. Written as `*mut T` or `*const T`\n     RawPtr(Arc<Ty>, Mutability),\n \n@@ -276,7 +277,10 @@ impl Ty {\n                 let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n                 Ty::RawPtr(Arc::new(inner_ty), *mutability)\n             }\n-            TypeRef::Array(_inner) => Ty::Unknown, // TODO\n+            TypeRef::Array(inner) => {\n+                let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n+                Ty::Array(Arc::new(inner_ty))\n+            }\n             TypeRef::Slice(inner) => {\n                 let inner_ty = Ty::from_hir(db, module, impl_block, inner);\n                 Ty::Slice(Arc::new(inner_ty))\n@@ -352,7 +356,7 @@ impl Ty {\n     fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n         f(self);\n         match self {\n-            Ty::Slice(t) => Arc::make_mut(t).walk_mut(f),\n+            Ty::Slice(t) | Ty::Array(t) => Arc::make_mut(t).walk_mut(f),\n             Ty::RawPtr(t, _) => Arc::make_mut(t).walk_mut(f),\n             Ty::Ref(t, _) => Arc::make_mut(t).walk_mut(f),\n             Ty::Tuple(ts) => {\n@@ -400,7 +404,7 @@ impl fmt::Display for Ty {\n             Ty::Int(t) => write!(f, \"{}\", t.ty_to_string()),\n             Ty::Float(t) => write!(f, \"{}\", t.ty_to_string()),\n             Ty::Str => write!(f, \"str\"),\n-            Ty::Slice(t) => write!(f, \"[{}]\", t),\n+            Ty::Slice(t) | Ty::Array(t) => write!(f, \"[{}]\", t),\n             Ty::RawPtr(t, m) => write!(f, \"*{}{}\", m.as_keyword_for_ptr(), t),\n             Ty::Ref(t, m) => write!(f, \"&{}{}\", m.as_keyword_for_ref(), t),\n             Ty::Never => write!(f, \"!\"),\n@@ -1102,6 +1106,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 Ty::Tuple(Arc::from(ty_vec))\n             }\n+            Expr::Array { exprs } => {\n+                let elem_ty = match &expected.ty {\n+                    Ty::Slice(inner) | Ty::Array(inner) => Ty::clone(&inner),\n+                    _ => self.new_type_var(),\n+                };\n+\n+                for expr in exprs.iter() {\n+                    self.infer_expr(*expr, &Expectation::has_type(elem_ty.clone()));\n+                }\n+\n+                Ty::Array(Arc::new(elem_ty))\n+            }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => Ty::Bool,\n                 Literal::String(..) => Ty::Ref(Arc::new(Ty::Str), Mutability::Shared),"}, {"sha": "affd63a850670f7e05ded682164fe59962af52d0", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -334,6 +334,32 @@ fn test(x: &str, y: isize) {\n     );\n }\n \n+#[test]\n+fn infer_array() {\n+    check_inference(\n+        r#\"\n+fn test(x: &str, y: isize) {\n+    let a = [x];\n+    let b = [a, a];\n+    let c = [b, b];\n+\n+    let d = [y, 1, 2, 3];\n+    let d = [1, y, 2, 3];\n+    let e = [y];\n+    let f = [d, d];\n+    let g = [e, e];\n+\n+    let h = [1, 2];\n+    let i = [\"a\", \"b\"];\n+\n+    let b = [a, [\"b\"]];\n+    let x: [u8; 0] = [];\n+}\n+\"#,\n+        \"array.txt\",\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.source_file(file_id);"}, {"sha": "acdf74ba49ddb104da877d675922d4c29efa1028", "filename": "crates/ra_hir/src/ty/tests/data/array.txt", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Farray.txt", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Farray.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Farray.txt?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -0,0 +1,52 @@\n+[9; 10) 'x': &str\n+[18; 19) 'y': isize\n+[28; 293) '{     ... []; }': ()\n+[38; 39) 'a': [&str]\n+[42; 45) '[x]': [&str]\n+[43; 44) 'x': &str\n+[55; 56) 'b': [[&str]]\n+[59; 65) '[a, a]': [[&str]]\n+[60; 61) 'a': [&str]\n+[63; 64) 'a': [&str]\n+[75; 76) 'c': [[[&str]]]\n+[79; 85) '[b, b]': [[[&str]]]\n+[80; 81) 'b': [[&str]]\n+[83; 84) 'b': [[&str]]\n+[96; 97) 'd': [isize]\n+[100; 112) '[y, 1, 2, 3]': [isize]\n+[101; 102) 'y': isize\n+[104; 105) '1': isize\n+[107; 108) '2': isize\n+[110; 111) '3': isize\n+[122; 123) 'd': [isize]\n+[126; 138) '[1, y, 2, 3]': [isize]\n+[127; 128) '1': isize\n+[130; 131) 'y': isize\n+[133; 134) '2': isize\n+[136; 137) '3': isize\n+[148; 149) 'e': [isize]\n+[152; 155) '[y]': [isize]\n+[153; 154) 'y': isize\n+[165; 166) 'f': [[isize]]\n+[169; 175) '[d, d]': [[isize]]\n+[170; 171) 'd': [isize]\n+[173; 174) 'd': [isize]\n+[185; 186) 'g': [[isize]]\n+[189; 195) '[e, e]': [[isize]]\n+[190; 191) 'e': [isize]\n+[193; 194) 'e': [isize]\n+[206; 207) 'h': [i32]\n+[210; 216) '[1, 2]': [i32]\n+[211; 212) '1': i32\n+[214; 215) '2': i32\n+[226; 227) 'i': [&str]\n+[230; 240) '[\"a\", \"b\"]': [&str]\n+[231; 234) '\"a\"': &str\n+[236; 239) '\"b\"': &str\n+[251; 252) 'b': [[&str]]\n+[255; 265) '[a, [\"b\"]]': [[&str]]\n+[256; 257) 'a': [&str]\n+[259; 264) '[\"b\"]': [&str]\n+[260; 263) '\"b\"': &str\n+[275; 276) 'x': [u8]\n+[288; 290) '[]': [u8]"}, {"sha": "2d9603d904d69a7ced5788b093075cf469d482b4", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -67,7 +67,11 @@ impl AstNode for ArrayExpr {\n }\n \n \n-impl ArrayExpr {}\n+impl ArrayExpr {\n+    pub fn exprs(&self) -> impl Iterator<Item = &Expr> {\n+        super::children(self)\n+    }\n+}\n \n // ArrayType\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "2aaad46b1b5e031cd0d203eace9005fc5b0b0705", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/454cc313589fb17de92d6f3dbf576a5ea5f4adf2/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=454cc313589fb17de92d6f3dbf576a5ea5f4adf2", "patch": "@@ -360,7 +360,9 @@ Grammar(\n         \"TupleExpr\": (\n             collections: [[\"exprs\", \"Expr\"]]\n         ),\n-        \"ArrayExpr\": (),\n+        \"ArrayExpr\": (\n+            collections: [[\"exprs\", \"Expr\"]]\n+        ),\n         \"ParenExpr\": (options: [\"Expr\"]),\n         \"PathExpr\": (options: [\"Path\"]),\n         \"LambdaExpr\": ("}]}