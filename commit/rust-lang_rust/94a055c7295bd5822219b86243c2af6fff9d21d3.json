{"sha": "94a055c7295bd5822219b86243c2af6fff9d21d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YTA1NWM3Mjk1YmQ1ODIyMjE5Yjg2MjQzYzJhZjZmZmY5ZDIxZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-05T15:41:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-05T15:41:32Z"}, "message": "auto merge of #13333 : Ryman/rust/improve_incompatible_type_error, r=alexcrichton\n\nThis can be a frustrating error message, ideally we should print the signature mismatch, but hinting that it's a trait incompatibility helps tracking root cause. Also beefed up the testcases for this.\r\n\r\nIdeally we would print the signature mismatch in the error helper?", "tree": {"sha": "7cb3c7c52f4f725d31864b82671ca78bfc46bf35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb3c7c52f4f725d31864b82671ca78bfc46bf35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a055c7295bd5822219b86243c2af6fff9d21d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a055c7295bd5822219b86243c2af6fff9d21d3", "html_url": "https://github.com/rust-lang/rust/commit/94a055c7295bd5822219b86243c2af6fff9d21d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a055c7295bd5822219b86243c2af6fff9d21d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dcdc75c6cc5575ca5fc5d38bf0889a984e04c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcdc75c6cc5575ca5fc5d38bf0889a984e04c5a", "html_url": "https://github.com/rust-lang/rust/commit/2dcdc75c6cc5575ca5fc5d38bf0889a984e04c5a"}, {"sha": "28938d08a09c016cdb23eb2e56d803454a82918b", "url": "https://api.github.com/repos/rust-lang/rust/commits/28938d08a09c016cdb23eb2e56d803454a82918b", "html_url": "https://github.com/rust-lang/rust/commit/28938d08a09c016cdb23eb2e56d803454a82918b"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "9e0f3c9faa5ec93cce99c9a9b3c439a3b578b8db", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94a055c7295bd5822219b86243c2af6fff9d21d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a055c7295bd5822219b86243c2af6fff9d21d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=94a055c7295bd5822219b86243c2af6fff9d21d3", "patch": "@@ -923,7 +923,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n         result::Err(ref terr) => {\n             tcx.sess.span_err(\n                 impl_m_span,\n-                format!(\"method `{}` has an incompatible type: {}\",\n+                format!(\"method `{}` has an incompatible type for trait: {}\",\n                         token::get_ident(trait_m.ident),\n                         ty::type_err_to_str(tcx, terr)));\n             ty::note_and_explain_type_err(tcx, terr);"}, {"sha": "bb30715f75e598466db6233ed2d195a962a8af8a", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94a055c7295bd5822219b86243c2af6fff9d21d3/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a055c7295bd5822219b86243c2af6fff9d21d3/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=94a055c7295bd5822219b86243c2af6fff9d21d3", "patch": "@@ -13,21 +13,52 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n+struct Vec1 {\n+    x: f64\n+}\n+\n+// Expecting ref in input signature\n+impl Mul<f64, Vec1> for Vec1 {\n+    fn mul(&self, s: f64) -> Vec1 {\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr but found f64\n+        Vec1 {\n+            x: self.x * s\n+        }\n+    }\n+}\n+\n struct Vec2 {\n     x: f64,\n     y: f64\n }\n \n+// Wrong type parameter ordering\n impl Mul<Vec2, f64> for Vec2 {\n     fn mul(&self, s: f64) -> Vec2 {\n-    //~^ ERROR: method `mul` has an incompatible type: expected &-ptr but found f64\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr but found f64\n         Vec2 {\n             x: self.x * s,\n             y: self.y * s\n         }\n     }\n }\n \n+struct Vec3 {\n+    x: f64,\n+    y: f64,\n+    z: f64\n+}\n+\n+// Unexpected return type\n+impl Mul<f64, i32> for Vec3 {\n+    fn mul(&self, s: &f64) -> f64 {\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected i32 but found f64\n+        *s\n+    }\n+}\n+\n pub fn main() {\n+    Vec1 { x: 1.0 } * 2.0;\n     Vec2 { x: 1.0, y: 2.0 } * 2.0;\n+    Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n }"}]}