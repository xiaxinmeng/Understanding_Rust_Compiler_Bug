{"sha": "6943acd1a50b0c4d0d95e298c151aa796ae05269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NDNhY2QxYTUwYjBjNGQwZDk1ZTI5OGMxNTFhYTc5NmFlMDUyNjk=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-21T16:53:18Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-21T16:56:16Z"}, "message": "Reduce reliance on `to_str_radix`\n\nThis is in preparation to remove the implementations of ToStrRadix in integers, and to remove the associated logic from `std::num::strconv`.\n\nThe parts that still need to be liberated are:\n\n- `std::fmt::Formatter::runplural`\n- `num::{bigint, complex, rational}`", "tree": {"sha": "612d46e281e7e816b0ab1214190073652966968d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612d46e281e7e816b0ab1214190073652966968d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6943acd1a50b0c4d0d95e298c151aa796ae05269", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6943acd1a50b0c4d0d95e298c151aa796ae05269", "html_url": "https://github.com/rust-lang/rust/commit/6943acd1a50b0c4d0d95e298c151aa796ae05269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6943acd1a50b0c4d0d95e298c151aa796ae05269/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37327bfee6217e46921a294f1a321e2d71300ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37327bfee6217e46921a294f1a321e2d71300ca", "html_url": "https://github.com/rust-lang/rust/commit/e37327bfee6217e46921a294f1a321e2d71300ca"}], "stats": {"total": 152, "additions": 55, "deletions": 97}, "files": [{"sha": "79f33a88562737653dfcecbe990013d9869b97a6", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -22,13 +22,14 @@ let y: int = x.unwrap();\n \n **Int to string, in non-base-10**\n \n-Use [`ToStrRadix`](http://static.rust-lang.org/doc/master/std/num/trait.ToStrRadix.html).\n+Use the `format!` syntax extension.\n \n ~~~\n-use std::num::ToStrRadix;\n-\n let x: int = 42;\n-let y: ~str = x.to_str_radix(16);\n+let y: ~str = format!(\"{:t}\", x);   // binary\n+let y: ~str = format!(\"{:o}\", x);   // octal\n+let y: ~str = format!(\"{:x}\", x);   // lowercase hexadecimal\n+let y: ~str = format!(\"{:X}\", x);   // uppercase hexidecimal\n ~~~\n \n **String to int, in non-base-10**"}, {"sha": "09c21d54c87a0ce3cc9d1b1652d5ca32a47e49d0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -2024,7 +2024,7 @@ impl ops::Sub<TypeContents,TypeContents> for TypeContents {\n \n impl ToStr for TypeContents {\n     fn to_str(&self) -> ~str {\n-        format!(\"TypeContents({})\", self.bits.to_str_radix(2))\n+        format!(\"TypeContents({:t})\", self.bits)\n     }\n }\n "}, {"sha": "aa3e3a23182e0ea0d1daa44fdd45cb91d9760e46", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -70,8 +70,7 @@ impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         match *self {\n           Redirect(ref vid) => format!(\"Redirect({})\", vid.to_str()),\n-          Root(ref pt, rk) => format!(\"Root({}, {})\", pt.inf_str(cx),\n-                               rk.to_str_radix(10u))\n+          Root(ref pt, rk) => format!(\"Root({}, {})\", pt.inf_str(cx), rk)\n         }\n     }\n }"}, {"sha": "432e27257f355fe9f3e9ce5f250e9447059dab01", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -29,7 +29,6 @@\n use container::Container;\n use io::{Writer, IoResult};\n use iter::Iterator;\n-use num::ToStrRadix;\n use option::{Some, None};\n use result::Ok;\n use str::OwnedStr;\n@@ -281,7 +280,7 @@ impl Streaming for SipState {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n         for b in r.iter() {\n-            s.push_str((*b as uint).to_str_radix(16u));\n+            s.push_str(format!(\"{:x}\", *b));\n         }\n         s\n     }\n@@ -391,7 +390,7 @@ mod tests {\n         fn to_hex_str(r: &[u8, ..8]) -> ~str {\n             let mut s = ~\"\";\n             for b in r.iter() {\n-                s.push_str((*b as uint).to_str_radix(16u));\n+                s.push_str(format!(\"{:x}\", *b));\n             }\n             s\n         }"}, {"sha": "f09dc3da9bfe9d31c0edca2f133cb4de72c52fec", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -857,12 +857,12 @@ pub trait Writer {\n \n     /// Write the result of passing n through `int::to_str_bytes`.\n     fn write_int(&mut self, n: int) -> IoResult<()> {\n-        int::to_str_bytes(n, 10u, |bytes| self.write(bytes))\n+        write!(self, \"{:d}\", n)\n     }\n \n     /// Write the result of passing n through `uint::to_str_bytes`.\n     fn write_uint(&mut self, n: uint) -> IoResult<()> {\n-        uint::to_str_bytes(n, 10u, |bytes| self.write(bytes))\n+        write!(self, \"{:u}\", n)\n     }\n \n     /// Write a little-endian uint (number of bytes depends on system)."}, {"sha": "16af826eba80e35dc86e513de2060a73aa89fbc5", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -401,7 +401,7 @@ impl ToStr for $T {\n     /// Convert to a string in base 10.\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        self.to_str_radix(10)\n+        format!(\"{:d}\", *self)\n     }\n }\n "}, {"sha": "e4cac0960c09d8e5bf816dcc22f1400d95fe928b", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -245,7 +245,7 @@ impl ToStr for $T {\n     /// Convert to a string in base 10.\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        self.to_str_radix(10u)\n+        format!(\"{:u}\", *self)\n     }\n }\n "}, {"sha": "680ac11230021b8a377d54e20959f42d22a1fa27", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -60,19 +60,13 @@ impl Repr for bool {\n \n impl Repr for int {\n     fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        ::int::to_str_bytes(*self, 10u, |bits| {\n-            writer.write(bits)\n-        })\n+        write!(writer, \"{}\", *self)\n     }\n }\n \n macro_rules! int_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n     fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        ::$ty::to_str_bytes(*self, 10u, |bits| {\n-            writer.write(bits).and_then(|()| {\n-                writer.write(bytes!($suffix))\n-            })\n-        })\n+        write!(writer, \"{}{}\", *self, $suffix)\n     }\n }))\n "}, {"sha": "3b1386021d23209801f95dc779cdb7076b22bdf7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -2267,29 +2267,14 @@ pub fn print_literal(s: &mut State, lit: &ast::Lit) -> io::IoResult<()> {\n           word(&mut s.s, res)\n       }\n       ast::LitInt(i, t) => {\n-        if i < 0_i64 {\n-            word(&mut s.s,\n-                 ~\"-\" + (-i as u64).to_str_radix(10u)\n-                 + ast_util::int_ty_to_str(t))\n-        } else {\n-            word(&mut s.s,\n-                 (i as u64).to_str_radix(10u)\n-                 + ast_util::int_ty_to_str(t))\n-        }\n+        word(&mut s.s, format!(\"{}{}\", i, ast_util::int_ty_to_str(t)))\n       }\n       ast::LitUint(u, t) => {\n-        word(&mut s.s,\n-             u.to_str_radix(10u)\n-             + ast_util::uint_ty_to_str(t))\n+        word(&mut s.s, format!(\"{}{}\", u, ast_util::uint_ty_to_str(t)))\n       }\n       ast::LitIntUnsuffixed(i) => {\n-        if i < 0_i64 {\n-            word(&mut s.s, ~\"-\" + (-i as u64).to_str_radix(10u))\n-        } else {\n-            word(&mut s.s, (i as u64).to_str_radix(10u))\n-        }\n+        word(&mut s.s, format!(\"{}\", i))\n       }\n-\n       ast::LitFloat(ref f, t) => {\n         word(&mut s.s, f.get() + ast_util::float_ty_to_str(t))\n       }"}, {"sha": "948e79b4481052e583383dd465f631aee58349e8", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 37, "deletions": 57, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6943acd1a50b0c4d0d95e298c151aa796ae05269/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=6943acd1a50b0c4d0d95e298c151aa796ae05269", "patch": "@@ -12,7 +12,6 @@\n \n use std::{char, vec};\n use std::mem::replace;\n-use std::num::strconv::{SignNone,SignNeg,SignAll,int_to_str_bytes_common};\n \n #[deriving(Eq)]\n enum States {\n@@ -480,68 +479,49 @@ impl FormatOp {\n fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n     let mut s = match val {\n         Number(d) => {\n+            let mut s = match (op, flags.sign) {\n+                (FormatDigit, true)  => format!(\"{:+d}\", d).into_bytes(),\n+                (FormatDigit, false) => format!(\"{:d}\", d).into_bytes(),\n+                (FormatOctal, _)     => format!(\"{:o}\", d).into_bytes(),\n+                (FormatHex, _)       => format!(\"{:x}\", d).into_bytes(),\n+                (FormatHEX, _)       => format!(\"{:X}\", d).into_bytes(),\n+                (FormatString, _)    => return Err(~\"non-number on stack with %s\"),\n+            };\n+            if flags.precision > s.len() {\n+                let mut s_ = vec::with_capacity(flags.precision);\n+                let n = flags.precision - s.len();\n+                s_.grow(n, &('0' as u8));\n+                s_.push_all_move(s);\n+                s = s_;\n+            }\n+            assert!(!s.is_empty(), \"string conversion produced empty result\");\n             match op {\n-                FormatString => {\n-                    return Err(~\"non-number on stack with %s\")\n+                FormatDigit => {\n+                    if flags.space && !(s[0] == '-' as u8 || s[0] == '+' as u8) {\n+                        s.unshift(' ' as u8);\n+                    }\n                 }\n-                _ => {\n-                    let radix = match op {\n-                        FormatDigit => 10,\n-                        FormatOctal => 8,\n-                        FormatHex|FormatHEX => 16,\n-                        FormatString => unreachable!()\n-                    };\n-                    let mut s = ~[];\n-                    match op {\n-                        FormatDigit => {\n-                            let sign = if flags.sign { SignAll } else { SignNeg };\n-                            int_to_str_bytes_common(d, radix, sign, |c| {\n-                                s.push(c);\n-                            })\n-                        }\n-                        _ => {\n-                            int_to_str_bytes_common(d as uint, radix, SignNone, |c| {\n-                                s.push(c);\n-                            })\n-                        }\n-                    };\n-                    if flags.precision > s.len() {\n-                        let mut s_ = vec::with_capacity(flags.precision);\n-                        let n = flags.precision - s.len();\n-                        s_.grow(n, &('0' as u8));\n-                        s_.push_all_move(s);\n-                        s = s_;\n+                FormatOctal => {\n+                    if flags.alternate && s[0] != '0' as u8 {\n+                        s.unshift('0' as u8);\n                     }\n-                    assert!(!s.is_empty(), \"string conversion produced empty result\");\n-                    match op {\n-                        FormatDigit => {\n-                            if flags.space && !(s[0] == '-' as u8 || s[0] == '+' as u8) {\n-                                s.unshift(' ' as u8);\n-                            }\n-                        }\n-                        FormatOctal => {\n-                            if flags.alternate && s[0] != '0' as u8 {\n-                                s.unshift('0' as u8);\n-                            }\n-                        }\n-                        FormatHex => {\n-                            if flags.alternate {\n-                                let s_ = replace(&mut s, ~['0' as u8, 'x' as u8]);\n-                                s.push_all_move(s_);\n-                            }\n-                        }\n-                        FormatHEX => {\n-                            s = s.into_ascii().to_upper().into_bytes();\n-                            if flags.alternate {\n-                                let s_ = replace(&mut s, ~['0' as u8, 'X' as u8]);\n-                                s.push_all_move(s_);\n-                            }\n-                        }\n-                        FormatString => unreachable!()\n+                }\n+                FormatHex => {\n+                    if flags.alternate {\n+                        let s_ = replace(&mut s, ~['0' as u8, 'x' as u8]);\n+                        s.push_all_move(s_);\n+                    }\n+                }\n+                FormatHEX => {\n+                    s = s.into_ascii().to_upper().into_bytes();\n+                    if flags.alternate {\n+                        let s_ = replace(&mut s, ~['0' as u8, 'X' as u8]);\n+                        s.push_all_move(s_);\n                     }\n-                    s\n                 }\n+                FormatString => unreachable!()\n             }\n+            s\n         }\n         String(s) => {\n             match op {"}]}