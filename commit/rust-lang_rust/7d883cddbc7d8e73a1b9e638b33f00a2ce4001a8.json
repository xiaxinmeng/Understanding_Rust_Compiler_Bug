{"sha": "7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkODgzY2RkYmM3ZDhlNzNhMWI5ZTYzOGIzM2YwMGEyY2U0MDAxYTg=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-24T13:11:05Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-24T13:11:05Z"}, "message": "Extract diagnostics module and document some functions\n\nThis moves the lint building functions from `utils/mod.rs` to their own\n`utils/diagnostics.rs` file. Also adds documentation for three of them.", "tree": {"sha": "e2845ba1e56606e8ba74b785b8dc3e0b4e477dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2845ba1e56606e8ba74b785b8dc3e0b4e477dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxynfUACgkQtvoGpuDi\nZltQNBAAtOcuprGzQRfkg7gd2WkmB5y5pM0k/N+/mZbyW0Gdy/kaRswivl9drrOF\na9BzXzJ22qEEjoYw13zUcaV5qq5c22MVU/e4T9mP3r+J0kI0HNFCX6R+e8Lff3+a\nKARO9R3vvovvvHeNnbuHDODbc9nwGis0OKH9ZIaSmZxkKUfkXrdiIduvzrd3ooTg\nUB165WnHGbqa458wIBPXePeQzpzlXZ486NZHam9Ao9k0qBI5dG8rmiSguTsaFB/8\ntFCkYp4HXDc7bk74C7vq04t6Ql0DGi981LjdfFsm7VAjbebgtrYSwnbchg+fQnfe\nVvo3O7KLRMyjE4JVAJXtVRLeImuh0AnLwcUvq+6DSlv9C48HaavwuHUmghjTTM+N\nbA6mG5dYr5MmuqD3AOnnDOx+iYr7yN8xQZwpXSVqsZfRCAlEA6zIw9GHjbsbznKw\nQ3SdCcAMHHHdodv26uR1dw3J/d+ZXRJ7on6fFdRpqf+/OXT6dU7yVBJCElwBB0+m\n4m9MiQ08Muj0tRGM81mJnJh5AAVV+oMx8h7qZtpNBZstaYSsAkxhv8FF7g3NpUFR\ne7yYInzeiRpYx/YaTnM/mzetKeIFzF2xpn15aMciGxQCur2aRCXCbwtAs9IqEFt1\n6zRivhBOjlCncpujnT+jfvcg7U1ceObr1uO8b9xfrDNvJ6uLDow=\n=eGln\n-----END PGP SIGNATURE-----", "payload": "tree e2845ba1e56606e8ba74b785b8dc3e0b4e477dce\nparent ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0\nauthor Philipp Hansch <dev@phansch.net> 1551013865 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551013865 +0100\n\nExtract diagnostics module and document some functions\n\nThis moves the lint building functions from `utils/mod.rs` to their own\n`utils/diagnostics.rs` file. Also adds documentation for three of them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "html_url": "https://github.com/rust-lang/rust/commit/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "html_url": "https://github.com/rust-lang/rust/commit/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0"}], "stats": {"total": 407, "additions": 208, "deletions": 199}, "files": [{"sha": "e676a28fe65646d176d83ed6e0de021449ed1c1d", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "patch": "@@ -0,0 +1,205 @@\n+//! Clippy wrappers around rustc's diagnostic functions.\n+\n+use crate::reexport::*;\n+use rustc::lint::{LateContext, Lint, LintContext};\n+use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart, SuggestionStyle};\n+use std::env;\n+use syntax::errors::DiagnosticBuilder;\n+use syntax::source_map::Span;\n+\n+/// Wrapper around `DiagnosticBuilder` that adds a link to Clippy documentation for the emitted lint\n+pub struct DiagnosticWrapper<'a>(pub DiagnosticBuilder<'a>);\n+\n+impl<'a> Drop for DiagnosticWrapper<'a> {\n+    fn drop(&mut self) {\n+        self.0.emit();\n+    }\n+}\n+\n+impl<'a> DiagnosticWrapper<'a> {\n+    fn docs_link(&mut self, lint: &'static Lint) {\n+        if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n+            self.0.help(&format!(\n+                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n+                &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n+                    // extract just major + minor version and ignore patch versions\n+                    format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n+                }),\n+                lint.name_lower().replacen(\"clippy::\", \"\", 1)\n+            ));\n+        }\n+    }\n+}\n+\n+/// Emit a basic lint message with a `msg` and a `span`.\n+///\n+/// This is the most primitive of our lint emission methods and can\n+/// be a good way to get a new lint started.\n+///\n+/// Usually it's nicer to provide more context for lint messages.\n+/// Be sure the output is understandable when you use this method.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: usage of mem::forget on Drop type\n+///   --> $DIR/mem_forget.rs:17:5\n+///    |\n+/// 17 |     std::mem::forget(seven);\n+///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+/// ```\n+pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n+    DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n+}\n+\n+/// Same as `span_lint` but with an extra `help` message.\n+///\n+/// Use this if you want to provide some general help but\n+/// can't provide a specific machine applicable suggestion.\n+///\n+/// The `help` message is not attached to any `Span`.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: constant division of 0.0 with 0.0 will always result in NaN\n+///   --> $DIR/zero_div_zero.rs:6:25\n+///    |\n+/// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n+///    |                         ^^^^^^^^^^^^\n+///    |\n+///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+/// ```\n+pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    help: &str,\n+) {\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n+    db.0.help(help);\n+    db.docs_link(lint);\n+}\n+\n+/// Like `span_lint` but with a `note` section instead of a `help` message.\n+///\n+/// The `note` message is presented separately from the main lint message\n+/// and is attached to a specific span:\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+///   --> $DIR/drop_forget_ref.rs:10:5\n+///    |\n+/// 10 |     forget(&SomeStruct);\n+///    |     ^^^^^^^^^^^^^^^^^^^\n+///    |\n+///    = note: `-D clippy::forget-ref` implied by `-D warnings`\n+/// note: argument has type &SomeStruct\n+///   --> $DIR/drop_forget_ref.rs:10:12\n+///    |\n+/// 10 |     forget(&SomeStruct);\n+///    |            ^^^^^^^^^^^\n+/// ```\n+pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Span,\n+    note: &str,\n+) {\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n+    if note_span == span {\n+        db.0.note(note);\n+    } else {\n+        db.0.span_note(note_span, note);\n+    }\n+    db.docs_link(lint);\n+}\n+\n+pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    f: F,\n+) where\n+    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+{\n+    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n+    f(&mut db.0);\n+    db.docs_link(lint);\n+}\n+\n+pub fn span_lint_node(cx: &LateContext<'_, '_>, lint: &'static Lint, node: NodeId, sp: Span, msg: &str) {\n+    DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg)).docs_link(lint);\n+}\n+\n+pub fn span_lint_node_and_then(\n+    cx: &LateContext<'_, '_>,\n+    lint: &'static Lint,\n+    node: NodeId,\n+    sp: Span,\n+    msg: &str,\n+    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n+) {\n+    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg));\n+    f(&mut db.0);\n+    db.docs_link(lint);\n+}\n+\n+/// Add a span lint with a suggestion on how to fix it.\n+///\n+/// These suggestions can be parsed by rustfix to allow it to automatically fix your code.\n+/// In the example below, `help` is `\"try\"` and `sugg` is the suggested replacement `\".any(|x| x >\n+/// 2)\"`.\n+///\n+/// ```ignore\n+/// error: This `.fold` can be more succinctly expressed as `.any`\n+/// --> $DIR/methods.rs:390:13\n+///     |\n+/// 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+///     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+///     |\n+///     = note: `-D fold-any` implied by `-D warnings`\n+/// ```\n+pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+    span_lint_and_then(cx, lint, sp, msg, |db| {\n+        db.span_suggestion(sp, help, sugg, applicability);\n+    });\n+}\n+\n+/// Create a suggestion made from several `span \u2192 replacement`.\n+///\n+/// Note: in the JSON format (used by `compiletest_rs`), the help message will\n+/// appear once per\n+/// replacement. In human-readable format though, it only appears once before\n+/// the whole suggestion.\n+pub fn multispan_sugg<I>(db: &mut DiagnosticBuilder<'_>, help_msg: String, sugg: I)\n+where\n+    I: IntoIterator<Item = (Span, String)>,\n+{\n+    let sugg = CodeSuggestion {\n+        substitutions: vec![Substitution {\n+            parts: sugg\n+                .into_iter()\n+                .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                .collect(),\n+        }],\n+        msg: help_msg,\n+        style: SuggestionStyle::ShowCode,\n+        applicability: Applicability::Unspecified,\n+    };\n+    db.suggestions.push(sugg);\n+}"}, {"sha": "c5af70cae96862731874770e8e4e899908037de2", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 199, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7d883cddbc7d8e73a1b9e638b33f00a2ce4001a8", "patch": "@@ -17,14 +17,12 @@ use rustc::ty::{\n     Binder, Ty, TyCtxt,\n };\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart, SuggestionStyle};\n+use rustc_errors::Applicability;\n use std::borrow::Cow;\n-use std::env;\n use std::mem;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n-use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol;\n use syntax::symbol::{keywords, Symbol};\n@@ -35,13 +33,15 @@ pub mod author;\n pub mod comparisons;\n pub mod conf;\n pub mod constants;\n+mod diagnostics;\n mod hir_utils;\n pub mod inspector;\n pub mod internal_lints;\n pub mod paths;\n pub mod ptr;\n pub mod sugg;\n pub mod usage;\n+pub use self::diagnostics::*;\n pub use self::hir_utils::{SpanlessEq, SpanlessHash};\n \n pub mod higher;\n@@ -611,202 +611,6 @@ pub fn get_enclosing_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, node: NodeI\n     }\n }\n \n-pub struct DiagnosticWrapper<'a>(pub DiagnosticBuilder<'a>);\n-\n-impl<'a> Drop for DiagnosticWrapper<'a> {\n-    fn drop(&mut self) {\n-        self.0.emit();\n-    }\n-}\n-\n-impl<'a> DiagnosticWrapper<'a> {\n-    fn docs_link(&mut self, lint: &'static Lint) {\n-        if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n-            self.0.help(&format!(\n-                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n-                &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n-                    // extract just major + minor version and ignore patch versions\n-                    format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n-                }),\n-                lint.name_lower().replacen(\"clippy::\", \"\", 1)\n-            ));\n-        }\n-    }\n-}\n-\n-/// Emit a basic lint message with a `msg` and a `span`.\n-///\n-/// This is the most primitive of our lint emission methods and can\n-/// be a good way to get a new lint started.\n-///\n-/// Usually it's nicer to provide more context for lint messages.\n-/// Be sure the output is understandable when you use this method.\n-///\n-/// # Example\n-///\n-/// ```ignore\n-/// error: usage of mem::forget on Drop type\n-///   --> $DIR/mem_forget.rs:17:5\n-///    |\n-/// 17 |     std::mem::forget(seven);\n-///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n-/// ```\n-pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n-    DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n-}\n-\n-/// Same as `span_lint` but with an extra `help` message.\n-///\n-/// Use this if you want to provide some general help but\n-/// can't provide a specific machine applicable suggestion.\n-///\n-/// The `help` message is not attached to any `Span`.\n-///\n-/// # Example\n-///\n-/// ```ignore\n-/// error: constant division of 0.0 with 0.0 will always result in NaN\n-///   --> $DIR/zero_div_zero.rs:6:25\n-///    |\n-/// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n-///    |                         ^^^^^^^^^^^^\n-///    |\n-///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n-/// ```\n-pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    span: Span,\n-    msg: &str,\n-    help: &str,\n-) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    db.0.help(help);\n-    db.docs_link(lint);\n-}\n-\n-/// Like `span_lint` but with a `note` section instead of a `help` message.\n-///\n-/// The `note` message is presented separately from the main lint message\n-/// and is attached to a specific span:\n-///\n-/// # Example\n-///\n-/// ```ignore\n-/// error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-///   --> $DIR/drop_forget_ref.rs:10:5\n-///    |\n-/// 10 |     forget(&SomeStruct);\n-///    |     ^^^^^^^^^^^^^^^^^^^\n-///    |\n-///    = note: `-D clippy::forget-ref` implied by `-D warnings`\n-/// note: argument has type &SomeStruct\n-///   --> $DIR/drop_forget_ref.rs:10:12\n-///    |\n-/// 10 |     forget(&SomeStruct);\n-///    |            ^^^^^^^^^^^\n-/// ```\n-pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    span: Span,\n-    msg: &str,\n-    note_span: Span,\n-    note: &str,\n-) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    if note_span == span {\n-        db.0.note(note);\n-    } else {\n-        db.0.span_note(note_span, note);\n-    }\n-    db.docs_link(lint);\n-}\n-\n-pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    sp: Span,\n-    msg: &str,\n-    f: F,\n-) where\n-    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n-{\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n-}\n-\n-pub fn span_lint_node(cx: &LateContext<'_, '_>, lint: &'static Lint, node: NodeId, sp: Span, msg: &str) {\n-    DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg)).docs_link(lint);\n-}\n-\n-pub fn span_lint_node_and_then(\n-    cx: &LateContext<'_, '_>,\n-    lint: &'static Lint,\n-    node: NodeId,\n-    sp: Span,\n-    msg: &str,\n-    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n-) {\n-    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n-}\n-\n-/// Add a span lint with a suggestion on how to fix it.\n-///\n-/// These suggestions can be parsed by rustfix to allow it to automatically fix your code.\n-/// In the example below, `help` is `\"try\"` and `sugg` is the suggested replacement `\".any(|x| x >\n-/// 2)\"`.\n-///\n-/// ```ignore\n-/// error: This `.fold` can be more succinctly expressed as `.any`\n-/// --> $DIR/methods.rs:390:13\n-///     |\n-/// 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-///     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n-///     |\n-///     = note: `-D fold-any` implied by `-D warnings`\n-/// ```\n-pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    sp: Span,\n-    msg: &str,\n-    help: &str,\n-    sugg: String,\n-    applicability: Applicability,\n-) {\n-    span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion(sp, help, sugg, applicability);\n-    });\n-}\n-\n-/// Create a suggestion made from several `span \u2192 replacement`.\n-///\n-/// Note: in the JSON format (used by `compiletest_rs`), the help message will\n-/// appear once per\n-/// replacement. In human-readable format though, it only appears once before\n-/// the whole suggestion.\n-pub fn multispan_sugg<I>(db: &mut DiagnosticBuilder<'_>, help_msg: String, sugg: I)\n-where\n-    I: IntoIterator<Item = (Span, String)>,\n-{\n-    let sugg = CodeSuggestion {\n-        substitutions: vec![Substitution {\n-            parts: sugg\n-                .into_iter()\n-                .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                .collect(),\n-        }],\n-        msg: help_msg,\n-        style: SuggestionStyle::ShowCode,\n-        applicability: Applicability::Unspecified,\n-    };\n-    db.suggestions.push(sugg);\n-}\n-\n /// Return the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty(ty: &hir::Ty) -> &hir::Ty {\n     match ty.node {"}]}