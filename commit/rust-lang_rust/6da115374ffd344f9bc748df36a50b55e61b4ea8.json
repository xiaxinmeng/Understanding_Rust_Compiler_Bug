{"sha": "6da115374ffd344f9bc748df36a50b55e61b4ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTExNTM3NGZmZDM0NGY5YmM3NDhkZjM2YTUwYjU1ZTYxYjRlYTg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-25T05:34:59Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-27T01:13:22Z"}, "message": "Refactor away `get_trait_name`", "tree": {"sha": "d9f1b521abd969ff853fca98f7c791a4965a826d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f1b521abd969ff853fca98f7c791a4965a826d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da115374ffd344f9bc748df36a50b55e61b4ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da115374ffd344f9bc748df36a50b55e61b4ea8", "html_url": "https://github.com/rust-lang/rust/commit/6da115374ffd344f9bc748df36a50b55e61b4ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da115374ffd344f9bc748df36a50b55e61b4ea8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e0dd5ac1166426f4b1b91cc184ae3797842467", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e0dd5ac1166426f4b1b91cc184ae3797842467", "html_url": "https://github.com/rust-lang/rust/commit/82e0dd5ac1166426f4b1b91cc184ae3797842467"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "d4ef3d365d19e1492f134f9a463b9b743a15299d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6da115374ffd344f9bc748df36a50b55e61b4ea8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da115374ffd344f9bc748df36a50b55e61b4ea8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6da115374ffd344f9bc748df36a50b55e61b4ea8", "patch": "@@ -829,7 +829,7 @@ pub struct ModuleS<'a> {\n     globs: RefCell<Vec<&'a ImportDirective<'a>>>,\n \n     // Used to memoize the traits in this module for faster searches through all traits in scope.\n-    traits: RefCell<Option<Box<[&'a NameBinding<'a>]>>>,\n+    traits: RefCell<Option<Box<[(Name, &'a NameBinding<'a>)]>>>,\n \n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n@@ -1234,14 +1234,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         self.glob_map.insert(directive.id, new_set);\n     }\n \n-    fn get_trait_name(&self, did: DefId) -> Name {\n-        if let Some(node_id) = self.ast_map.as_local_node_id(did) {\n-            self.ast_map.expect_item(node_id).name\n-        } else {\n-            self.session.cstore.item_name(did)\n-        }\n-    }\n-\n     /// Resolves the given module path from the given root `module_`.\n     fn resolve_module_path_from_root(&mut self,\n                                      module_: Module<'a>,\n@@ -3146,20 +3138,19 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 let mut traits = module.traits.borrow_mut();\n                 if traits.is_none() {\n                     let mut collected_traits = Vec::new();\n-                    module.for_each_child(|_, ns, binding| {\n+                    module.for_each_child(|name, ns, binding| {\n                         if ns != TypeNS { return }\n                         if let Some(Def::Trait(_)) = binding.def() {\n-                            collected_traits.push(binding);\n+                            collected_traits.push((name, binding));\n                         }\n                     });\n                     *traits = Some(collected_traits.into_boxed_slice());\n                 }\n \n-                for binding in traits.as_ref().unwrap().iter() {\n+                for &(trait_name, binding) in traits.as_ref().unwrap().iter() {\n                     let trait_def_id = binding.def().unwrap().def_id();\n                     if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n                         add_trait_info(&mut found_traits, trait_def_id, name);\n-                        let trait_name = self.get_trait_name(trait_def_id);\n                         self.record_use(trait_name, TypeNS, binding);\n                     }\n                 }"}]}