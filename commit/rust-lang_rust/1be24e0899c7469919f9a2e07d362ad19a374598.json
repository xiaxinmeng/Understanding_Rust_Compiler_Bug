{"sha": "1be24e0899c7469919f9a2e07d362ad19a374598", "node_id": "C_kwDOAAsO6NoAKDFiZTI0ZTA4OTljNzQ2OTkxOWY5YTJlMDdkMzYyYWQxOWEzNzQ1OTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-11T17:06:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-11T19:28:36Z"}, "message": "internal: Improve parser recovery a bunch", "tree": {"sha": "0d837bef6b42370ff16a4f20fc1bdd3376672d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d837bef6b42370ff16a4f20fc1bdd3376672d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be24e0899c7469919f9a2e07d362ad19a374598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be24e0899c7469919f9a2e07d362ad19a374598", "html_url": "https://github.com/rust-lang/rust/commit/1be24e0899c7469919f9a2e07d362ad19a374598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be24e0899c7469919f9a2e07d362ad19a374598/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdf640fb3cf207531629bff7372fb4caf296e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdf640fb3cf207531629bff7372fb4caf296e94", "html_url": "https://github.com/rust-lang/rust/commit/5fdf640fb3cf207531629bff7372fb4caf296e94"}], "stats": {"total": 379, "additions": 247, "deletions": 132}, "files": [{"sha": "c3800f09b4f2e5238c3d20caf8db6062f4af3337", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -1173,6 +1173,7 @@ dependencies = [\n  \"limit\",\n  \"rustc-ap-rustc_lexer\",\n  \"sourcegen\",\n+ \"stdx\",\n ]\n \n [[package]]"}, {"sha": "7a3e8c3b05c911037963737f4d48b19aae9b0b03", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -1476,7 +1476,7 @@ macro_rules! m {\n /* parse error: expected identifier */\n /* parse error: expected SEMICOLON */\n /* parse error: expected SEMICOLON */\n-/* parse error: expected expression */\n+/* parse error: expected expression, item or let statement */\n fn f() {\n     K::(C(\"0\"));\n }"}, {"sha": "910917ac68a69aa4016de38e0c869683233819e1", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -831,7 +831,7 @@ macro_rules! rgb_color {\n /* parse error: expected R_ANGLE */\n /* parse error: expected SEMICOLON */\n /* parse error: expected SEMICOLON */\n-/* parse error: expected expression */\n+/* parse error: expected expression, item or let statement */\n pub fn new() {\n     let _ = 0as u32<<(8+8);\n }"}, {"sha": "6e962abd75477aa09bf20ea94f3f18d9afe4e2f1", "filename": "crates/parser/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2FCargo.toml?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -20,4 +20,5 @@ limit.workspace = true\n [dev-dependencies]\n expect-test = \"1.4.0\"\n \n+stdx.workspace = true\n sourcegen.workspace = true"}, {"sha": "4d6097b5ab17e46b9ff091fe02c83081ee21b393", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -68,6 +68,12 @@ pub(super) fn stmt(p: &mut Parser<'_>, semicolon: Semicolon) {\n         Err(m) => m,\n     };\n \n+    if !p.at_ts(EXPR_FIRST) {\n+        p.err_and_bump(\"expected expression, item or let statement\");\n+        m.abandon(p);\n+        return;\n+    }\n+\n     if let Some((cm, blocklike)) = expr_stmt(p, Some(m)) {\n         if !(p.at(T!['}']) || (semicolon != Semicolon::Required && p.at(EOF))) {\n             // test no_semi_after_block\n@@ -227,6 +233,12 @@ fn expr_bp(\n         attributes::outer_attrs(p);\n         m\n     });\n+\n+    if !p.at_ts(EXPR_FIRST) {\n+        p.err_recover(\"expected expression\", atom::EXPR_RECOVERY_SET);\n+        m.abandon(p);\n+        return None;\n+    }\n     let mut lhs = match lhs(p, r) {\n         Some((lhs, blocklike)) => {\n             let lhs = lhs.extend_to(p, m);\n@@ -551,6 +563,12 @@ fn cast_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker {\n     m.complete(p, CAST_EXPR)\n }\n \n+// test_err arg_list_recovery\n+// fn main() {\n+//     foo(bar::);\n+//     foo(bar:);\n+//     foo(bar+);\n+// }\n fn arg_list(p: &mut Parser<'_>) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n@@ -563,8 +581,15 @@ fn arg_list(p: &mut Parser<'_>) {\n         if !expr(p) {\n             break;\n         }\n-        if !p.at(T![')']) && !p.expect(T![,]) {\n-            break;\n+        if !p.at(T![,]) {\n+            if p.at_ts(EXPR_FIRST) {\n+                p.error(\"expected `,`\");\n+                continue;\n+            } else {\n+                break;\n+            }\n+        } else {\n+            p.bump(T![,]);\n         }\n     }\n     p.eat(T![')']);"}, {"sha": "c3c5d474cb3369c4d832fe8e499869b9adecee74", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -40,26 +40,28 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T!['{'],\n         T!['['],\n         T![|],\n-        T![move],\n+        T![async],\n         T![box],\n+        T![break],\n+        T![const],\n+        T![continue],\n+        T![do],\n+        T![for],\n         T![if],\n-        T![while],\n+        T![let],\n+        T![loop],\n         T![match],\n-        T![unsafe],\n+        T![move],\n         T![return],\n-        T![yield],\n-        T![do],\n-        T![break],\n-        T![continue],\n-        T![async],\n+        T![static],\n         T![try],\n-        T![const],\n-        T![loop],\n-        T![for],\n+        T![unsafe],\n+        T![while],\n+        T![yield],\n         LIFETIME_IDENT,\n     ]));\n \n-const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![let]]);\n+pub(super) const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![')'], T![']']]);\n \n pub(super) fn atom_expr(\n     p: &mut Parser<'_>,\n@@ -157,7 +159,7 @@ pub(super) fn atom_expr(\n         T![for] => for_expr(p, None),\n \n         _ => {\n-            p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n+            p.err_and_bump(\"expected expression\");\n             return None;\n         }\n     };"}, {"sha": "1064ae9970c99cd36b0893d180dec8ceaff02e13", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -67,6 +67,10 @@ fn path_for_qualifier(\n     }\n }\n \n+const EXPR_PATH_SEGMENT_RECOVERY_SET: TokenSet =\n+    items::ITEM_RECOVERY_SET.union(TokenSet::new(&[T![')'], T![,], T![let]]));\n+const TYPE_PATH_SEGMENT_RECOVERY_SET: TokenSet = types::TYPE_RECOVERY_SET;\n+\n fn path_segment(p: &mut Parser<'_>, mode: Mode, first: bool) {\n     let m = p.start();\n     // test qual_paths\n@@ -102,7 +106,12 @@ fn path_segment(p: &mut Parser<'_>, mode: Mode, first: bool) {\n                 m.complete(p, NAME_REF);\n             }\n             _ => {\n-                p.err_recover(\"expected identifier\", items::ITEM_RECOVERY_SET);\n+                let recover_set = match mode {\n+                    Mode::Use => items::ITEM_RECOVERY_SET,\n+                    Mode::Type => TYPE_PATH_SEGMENT_RECOVERY_SET,\n+                    Mode::Expr => EXPR_PATH_SEGMENT_RECOVERY_SET,\n+                };\n+                p.err_recover(\"expected identifier\", recover_set);\n                 if empty {\n                     // test_err empty_segment\n                     // use crate::;"}, {"sha": "7d0b156c5a06ae9cc61fe753bf4823e26f404e0e", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -17,8 +17,9 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(TokenSet::new(&[\n     T![Self],\n ]));\n \n-const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n+pub(super) const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n     T![')'],\n+    T![>],\n     T![,],\n     // test_err struct_field_recover\n     // struct S { f pub g: () }"}, {"sha": "2fec765bd7871f2c2edc9ce06e54e660c3ce29a1", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -15,6 +15,7 @@ use crate::{LexedStr, TopEntryPoint};\n #[test]\n fn lex_ok() {\n     for case in TestCase::list(\"lexer/ok\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let actual = lex(&case.text);\n         expect_file![case.rast].assert_eq(&actual)\n     }\n@@ -23,6 +24,7 @@ fn lex_ok() {\n #[test]\n fn lex_err() {\n     for case in TestCase::list(\"lexer/err\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let actual = lex(&case.text);\n         expect_file![case.rast].assert_eq(&actual)\n     }\n@@ -46,6 +48,7 @@ fn lex(text: &str) -> String {\n #[test]\n fn parse_ok() {\n     for case in TestCase::list(\"parser/ok\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual);\n@@ -55,6 +58,7 @@ fn parse_ok() {\n #[test]\n fn parse_inline_ok() {\n     for case in TestCase::list(\"parser/inline/ok\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual);\n@@ -64,6 +68,7 @@ fn parse_inline_ok() {\n #[test]\n fn parse_err() {\n     for case in TestCase::list(\"parser/err\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual)\n@@ -73,6 +78,7 @@ fn parse_err() {\n #[test]\n fn parse_inline_err() {\n     for case in TestCase::list(\"parser/inline/err\") {\n+        let _guard = stdx::panic_context::enter(format!(\"{:?}\", case.rs));\n         let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{actual}\", case.rs.display());\n         expect_file![case.rast].assert_eq(&actual)"}, {"sha": "49dd9e293b8feb1f75ca48333920828ba31b6c40", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -65,7 +65,7 @@ fn macro_stmt() {\n             MACRO_STMTS\n               ERROR\n                 SHEBANG \"#!/usr/bin/rust\"\n-            error 0: expected expression\n+            error 0: expected expression, item or let statement\n         \"##]],\n     );\n     check("}, {"sha": "36a025dc0a62f62287de68e91d194c75cd57cdbe", "filename": "crates/parser/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -145,27 +145,27 @@ SOURCE_FILE\n error 16: expected expression\n error 17: expected R_BRACK\n error 17: expected SEMICOLON\n-error 17: expected expression\n+error 17: expected expression, item or let statement\n error 25: expected a name\n error 26: expected `;`, `{`, or `(`\n error 30: expected pattern\n error 31: expected SEMICOLON\n error 53: expected expression\n error 54: expected SEMICOLON\n-error 54: expected expression\n+error 54: expected expression, item or let statement\n error 60: expected type\n error 60: expected `{`\n-error 60: expected expression\n+error 60: expected expression, item or let statement\n error 65: expected pattern\n error 65: expected SEMICOLON\n-error 65: expected expression\n+error 65: expected expression, item or let statement\n error 92: expected expression\n error 93: expected SEMICOLON\n-error 93: expected expression\n-error 95: expected expression\n-error 96: expected expression\n+error 93: expected expression, item or let statement\n+error 95: expected expression, item or let statement\n+error 96: expected expression, item or let statement\n error 103: expected a name\n error 104: expected `{`\n error 108: expected pattern\n error 108: expected SEMICOLON\n-error 108: expected expression\n+error 108: expected expression, item or let statement"}, {"sha": "a2cf225af801ac100a1823ab77f5148240ec2235", "filename": "crates/parser/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 92, "deletions": 104, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -180,63 +180,9 @@ SOURCE_FILE\n         ERROR\n           PLUS \"+\"\n         WHITESPACE \" \"\n-        TUPLE_EXPR\n-          L_PAREN \"(\"\n-          CLOSURE_EXPR\n-            FOR_KW \"for\"\n-            GENERIC_PARAM_LIST\n-              L_ANGLE \"<\"\n-              LIFETIME_PARAM\n-                LIFETIME\n-                  LIFETIME_IDENT \"'a\"\n-              R_ANGLE \">\"\n-          WHITESPACE \" \"\n-          BIN_EXPR\n-            BIN_EXPR\n-              BIN_EXPR\n-                BIN_EXPR\n-                  PATH_EXPR\n-                    PATH\n-                      PATH_SEGMENT\n-                        NAME_REF\n-                          IDENT \"Trait\"\n-                  L_ANGLE \"<\"\n-                  ERROR\n-                    LIFETIME_IDENT \"'a\"\n-                R_ANGLE \">\"\n-                ERROR\n-                  R_PAREN \")\"\n-              WHITESPACE \" \"\n-              PLUS \"+\"\n-              WHITESPACE \" \"\n-              PAREN_EXPR\n-                L_PAREN \"(\"\n-                PATH_EXPR\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Copy\"\n-                R_PAREN \")\"\n-            R_ANGLE \">\"\n-            ERROR\n-              SEMICOLON \";\"\n-          WHITESPACE \"\\n    \"\n-          LET_EXPR\n-            LET_KW \"let\"\n-            WHITESPACE \" \"\n-            WILDCARD_PAT\n-              UNDERSCORE \"_\"\n-            ERROR\n-              COLON \":\"\n-          WHITESPACE \" \"\n+        EXPR_STMT\n           BIN_EXPR\n             BIN_EXPR\n-              PATH_EXPR\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"Box\"\n-              L_ANGLE \"<\"\n               TUPLE_EXPR\n                 L_PAREN \"(\"\n                 CLOSURE_EXPR\n@@ -250,78 +196,120 @@ SOURCE_FILE\n                 WHITESPACE \" \"\n                 BIN_EXPR\n                   BIN_EXPR\n-                    BIN_EXPR\n-                      BIN_EXPR\n-                        PATH_EXPR\n-                          PATH\n-                            PATH_SEGMENT\n-                              NAME_REF\n-                                IDENT \"Trait\"\n-                        L_ANGLE \"<\"\n-                        ERROR\n-                          LIFETIME_IDENT \"'a\"\n-                      R_ANGLE \">\"\n-                      ERROR\n-                        R_PAREN \")\"\n-                    WHITESPACE \" \"\n-                    PLUS \"+\"\n-                    WHITESPACE \" \"\n-                    PAREN_EXPR\n-                      L_PAREN \"(\"\n-                      PATH_EXPR\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"Copy\"\n-                      R_PAREN \")\"\n-                  WHITESPACE \" \"\n-                  PLUS \"+\"\n-                  WHITESPACE \" \"\n-                  PAREN_EXPR\n-                    L_PAREN \"(\"\n+                    PATH_EXPR\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Trait\"\n+                    L_ANGLE \"<\"\n                     ERROR\n-                      QUESTION \"?\"\n+                      LIFETIME_IDENT \"'a\"\n+                  R_ANGLE \">\"\n+                R_PAREN \")\"\n+              WHITESPACE \" \"\n+              PLUS \"+\"\n+              WHITESPACE \" \"\n+              PAREN_EXPR\n+                L_PAREN \"(\"\n                 PATH_EXPR\n                   PATH\n                     PATH_SEGMENT\n                       NAME_REF\n-                        IDENT \"Sized\"\n+                        IDENT \"Copy\"\n                 R_PAREN \")\"\n             R_ANGLE \">\"\n             ERROR\n               SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          COLON \":\"\n+          WHITESPACE \" \"\n+          DYN_TRAIT_TYPE\n+            TYPE_BOUND_LIST\n+              TYPE_BOUND\n+                PATH_TYPE\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Box\"\n+                      GENERIC_ARG_LIST\n+                        L_ANGLE \"<\"\n+                        TYPE_ARG\n+                          PAREN_TYPE\n+                            L_PAREN \"(\"\n+                            FOR_TYPE\n+                              FOR_KW \"for\"\n+                              GENERIC_PARAM_LIST\n+                                L_ANGLE \"<\"\n+                                LIFETIME_PARAM\n+                                  LIFETIME\n+                                    LIFETIME_IDENT \"'a\"\n+                                R_ANGLE \">\"\n+                              WHITESPACE \" \"\n+                              PATH_TYPE\n+                                PATH\n+                                  PATH_SEGMENT\n+                                    NAME_REF\n+                                      IDENT \"Trait\"\n+                                    GENERIC_ARG_LIST\n+                                      L_ANGLE \"<\"\n+                                      LIFETIME_ARG\n+                                        LIFETIME\n+                                          LIFETIME_IDENT \"'a\"\n+                                      R_ANGLE \">\"\n+                            R_PAREN \")\"\n+              WHITESPACE \" \"\n+              PLUS \"+\"\n+              WHITESPACE \" \"\n+              TYPE_BOUND\n+                L_PAREN \"(\"\n+                PATH_TYPE\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Copy\"\n+                R_PAREN \")\"\n+              WHITESPACE \" \"\n+              PLUS \"+\"\n+              WHITESPACE \" \"\n+              TYPE_BOUND\n+                L_PAREN \"(\"\n+                QUESTION \"?\"\n+                PATH_TYPE\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Sized\"\n+                R_PAREN \")\"\n+        ERROR\n+          R_ANGLE \">\"\n+        SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n error 88: expected COMMA\n error 88: expected R_ANGLE\n error 121: expected SEMICOLON\n-error 121: expected expression\n+error 121: expected expression, item or let statement\n error 140: expected type\n error 141: expected R_PAREN\n error 141: expected COMMA\n error 141: expected R_ANGLE\n error 141: expected SEMICOLON\n error 146: expected SEMICOLON\n-error 146: expected expression\n-error 148: expected expression\n+error 146: expected expression, item or let statement\n+error 148: expected expression, item or let statement\n error 158: expected `|`\n error 158: expected COMMA\n error 165: expected expression\n error 168: expected expression\n error 179: expected expression\n-error 180: expected COMMA\n-error 190: expected EQ\n-error 190: expected expression\n-error 191: expected COMMA\n-error 204: expected `|`\n-error 204: expected COMMA\n-error 211: expected expression\n-error 214: expected expression\n-error 228: expected expression\n-error 229: expected R_PAREN\n-error 229: expected COMMA\n-error 236: expected expression\n-error 237: expected COMMA\n-error 237: expected expression\n-error 237: expected R_PAREN\n+error 180: expected SEMICOLON\n+error 215: expected COMMA\n+error 215: expected R_ANGLE\n+error 235: expected SEMICOLON\n+error 235: expected expression, item or let statement"}, {"sha": "6e065f8f801d62a0412e10ccd28fe07dbb0e69c1", "filename": "crates/parser/test_data/parser/inline/err/0015_arg_list_recovery.rast", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -0,0 +1,77 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"main\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CALL_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"foo\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"bar\"\n+                  COLON2 \"::\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CALL_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"foo\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"bar\"\n+              ERROR\n+                COLON \":\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CALL_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"foo\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              BIN_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"bar\"\n+                PLUS \"+\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+error 25: expected identifier\n+error 39: expected `,`\n+error 39: expected expression\n+error 55: expected expression"}, {"sha": "0e7ac9cc3075533cb4836f00fafd6a4230ae066a", "filename": "crates/parser/test_data/parser/inline/err/0015_arg_list_recovery.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be24e0899c7469919f9a2e07d362ad19a374598/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rs?ref=1be24e0899c7469919f9a2e07d362ad19a374598", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    foo(bar::);\n+    foo(bar:);\n+    foo(bar+);\n+}"}]}