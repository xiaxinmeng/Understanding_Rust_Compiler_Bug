{"sha": "602592675ce86aeca465c4ac748cee2bff291443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMjU5MjY3NWNlODZhZWNhNDY1YzRhYzc0OGNlZTJiZmYyOTE0NDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T13:56:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T13:56:29Z"}, "message": "auto merge of #16838 : nick29581/rust/dst-bug-4, r=pnkfelix,nikomatsakis\n\nDon't double free embedded, unsized slices.\r\n\r\nMerge/rebase error from DST. Thanks to @eddyb for finding.\r\n\r\nCloses #16826 (I hope)\r\n\r\nr?", "tree": {"sha": "0e2e1f2654731a9c53b864211820d98f7ed4c853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2e1f2654731a9c53b864211820d98f7ed4c853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602592675ce86aeca465c4ac748cee2bff291443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602592675ce86aeca465c4ac748cee2bff291443", "html_url": "https://github.com/rust-lang/rust/commit/602592675ce86aeca465c4ac748cee2bff291443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602592675ce86aeca465c4ac748cee2bff291443/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a7ab40e84d80990ceaf7755e30a575367e5c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7ab40e84d80990ceaf7755e30a575367e5c32", "html_url": "https://github.com/rust-lang/rust/commit/f6a7ab40e84d80990ceaf7755e30a575367e5c32"}, {"sha": "415d7e8ae9065d76855f5685939c362dd6be2544", "url": "https://api.github.com/repos/rust-lang/rust/commits/415d7e8ae9065d76855f5685939c362dd6be2544", "html_url": "https://github.com/rust-lang/rust/commit/415d7e8ae9065d76855f5685939c362dd6be2544"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "51cd9a115cd7c4d8d5f1ea8b52b43212c7b1a6f7", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/602592675ce86aeca465c4ac748cee2bff291443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602592675ce86aeca465c4ac748cee2bff291443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=602592675ce86aeca465c4ac748cee2bff291443", "patch": "@@ -403,11 +403,11 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n         ty::ty_uniq(content_ty) => {\n             match ty::get(content_ty).sty {\n                 ty::ty_vec(ty, None) => {\n-                    tvec::make_drop_glue_unboxed(bcx, v0, ty)\n+                    tvec::make_drop_glue_unboxed(bcx, v0, ty, true)\n                 }\n                 ty::ty_str => {\n                     let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n-                    tvec::make_drop_glue_unboxed(bcx, v0, unit_ty)\n+                    tvec::make_drop_glue_unboxed(bcx, v0, unit_ty, true)\n                 }\n                 ty::ty_trait(..) => {\n                     let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n@@ -507,7 +507,7 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                  None);\n             bcx\n         }\n-        ty::ty_vec(ty, None) => tvec::make_drop_glue_unboxed(bcx, v0, ty),\n+        ty::ty_vec(ty, None) => tvec::make_drop_glue_unboxed(bcx, v0, ty, false),\n         _ => {\n             assert!(ty::type_is_sized(bcx.tcx(), t));\n             if ty::type_needs_drop(bcx.tcx(), t) &&"}, {"sha": "a6ba758d5f810cf5b0a3e86a29f596541baa879d", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/602592675ce86aeca465c4ac748cee2bff291443/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602592675ce86aeca465c4ac748cee2bff291443/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=602592675ce86aeca465c4ac748cee2bff291443", "patch": "@@ -54,25 +54,31 @@ pub fn pointer_add_byte(bcx: &Block, ptr: ValueRef, bytes: ValueRef) -> ValueRef\n pub fn make_drop_glue_unboxed<'a>(\n                               bcx: &'a Block<'a>,\n                               vptr: ValueRef,\n-                              unit_ty: ty::t)\n+                              unit_ty: ty::t,\n+                              should_deallocate: bool)\n                               -> &'a Block<'a> {\n     let not_null = IsNotNull(bcx, vptr);\n     with_cond(bcx, not_null, |bcx| {\n         let tcx = bcx.tcx();\n         let _icx = push_ctxt(\"tvec::make_drop_glue_unboxed\");\n \n-        let len = get_len(bcx, vptr);\n         let dataptr = get_dataptr(bcx, vptr);\n         let bcx = if ty::type_needs_drop(tcx, unit_ty) {\n+            let len = get_len(bcx, vptr);\n             iter_vec_raw(bcx, dataptr, unit_ty, len, glue::drop_ty)\n         } else {\n             bcx\n         };\n \n-        let not_null = IsNotNull(bcx, dataptr);\n-        with_cond(bcx, not_null, |bcx| {\n-            glue::trans_exchange_free(bcx, dataptr, 0, 8)\n-        })\n+        if should_deallocate {\n+            let not_null = IsNotNull(bcx, dataptr);\n+            with_cond(bcx, not_null, |bcx| {\n+                // FIXME: #13994: the old `Box<[T]>` will not support sized deallocation\n+                glue::trans_exchange_free(bcx, dataptr, 0, 8)\n+            })\n+        } else {\n+            bcx\n+        }\n     })\n }\n "}]}