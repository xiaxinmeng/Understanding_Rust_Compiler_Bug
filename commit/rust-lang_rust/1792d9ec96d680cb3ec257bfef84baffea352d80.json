{"sha": "1792d9ec96d680cb3ec257bfef84baffea352d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTJkOWVjOTZkNjgwY2IzZWMyNTdiZmVmODRiYWZmZWEzNTJkODA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T09:52:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T09:52:08Z"}, "message": "Use string stored in codemap for pretty-printing comments and literals\n\nCloses #1665", "tree": {"sha": "94cb1c1a6d65adaaceb4b0a6934a42b46dd71ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94cb1c1a6d65adaaceb4b0a6934a42b46dd71ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1792d9ec96d680cb3ec257bfef84baffea352d80", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1792d9ec96d680cb3ec257bfef84baffea352d80", "html_url": "https://github.com/rust-lang/rust/commit/1792d9ec96d680cb3ec257bfef84baffea352d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1792d9ec96d680cb3ec257bfef84baffea352d80/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "html_url": "https://github.com/rust-lang/rust/commit/ec4d05de3b71a6286b24f9223731b7bdcfc097f8"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "e7eafae197a5ccab537f4186491a19c6ea684239", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1792d9ec96d680cb3ec257bfef84baffea352d80/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1792d9ec96d680cb3ec257bfef84baffea352d80/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=1792d9ec96d680cb3ec257bfef84baffea352d80", "patch": "@@ -22,14 +22,13 @@ enum pp_mode { ppm_normal, ppm_expanded, ppm_typed, ppm_identified, }\n \n fn default_configuration(sess: session, argv0: str, input: str) ->\n    ast::crate_cfg {\n-    let libc =\n-        alt sess.targ_cfg.os {\n-          session::os_win32 { \"msvcrt.dll\" }\n-          session::os_macos { \"libc.dylib\" }\n-          session::os_linux { \"libc.so.6\" }\n-          session::os_freebsd { \"libc.so.7\" }\n-          _ { \"libc.so\" }\n-        };\n+    let libc = alt sess.targ_cfg.os {\n+      session::os_win32 { \"msvcrt.dll\" }\n+      session::os_macos { \"libc.dylib\" }\n+      session::os_linux { \"libc.so.6\" }\n+      session::os_freebsd { \"libc.so.7\" }\n+      _ { \"libc.so\" }\n+    };\n \n     let mk = attr::mk_name_value_item_str;\n \n@@ -77,26 +76,13 @@ fn parse_cfgspecs(cfgspecs: [str]) -> ast::crate_cfg {\n fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n \n fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n-    -> {crate: @ast::crate, src: @str} {\n-    let src = get_input_str(sess, input);\n-    let crate = if !input_is_stdin(input) {\n+    -> @ast::crate {\n+    if !input_is_stdin(input) {\n         parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n     } else {\n+        let src = @str::unsafe_from_bytes(io::stdin().read_whole_stream());\n         parser::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n-    };\n-    {crate: crate, src: src}\n-}\n-\n-fn get_input_str(sess: session, infile: str) -> @str {\n-    let stream = if !input_is_stdin(infile) {\n-        alt io::file_reader(infile) {\n-          result::ok(reader) { reader }\n-          result::err(e) {\n-            sess.fatal(e)\n-          }\n-        }\n-    } else { io::stdin() };\n-    @str::unsafe_from_bytes(stream.read_whole_stream())\n+    }\n }\n \n fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n@@ -141,11 +127,11 @@ enum compile_upto {\n fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                 input: str, upto: compile_upto,\n                 outputs: option::t<output_filenames>)\n-    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>, src: @str} {\n+    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>} {\n     let time_passes = sess.opts.time_passes;\n-    let {crate, src} =\n-        time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n-    if upto == cu_parse { ret {crate: crate, tcx: none, src: src}; }\n+    let crate = time(time_passes, \"parsing\",\n+                     bind parse_input(sess, cfg, input));\n+    if upto == cu_parse { ret {crate: crate, tcx: none}; }\n \n     sess.building_library = session::building_library(\n         sess.opts.crate_type, crate, sess.opts.test);\n@@ -160,7 +146,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n-    if upto == cu_expand { ret {crate: crate, tcx: none, src: src}; }\n+    if upto == cu_expand { ret {crate: crate, tcx: none}; }\n     if sess.opts.libcore {\n         crate = inject_libcore_reference(sess, crate);\n     }\n@@ -183,7 +169,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));\n \n-    if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n+    if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx)}; }\n \n     time(time_passes, \"block-use checking\",\n          bind middle::block_use::check_crate(ty_cx, crate));\n@@ -206,7 +192,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     lint::check_crate(ty_cx, crate, sess.opts.lint_opts, time_passes);\n \n-    if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n+    if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx)}; }\n     let outputs = option::get(outputs);\n \n     let (llmod, link_meta) =\n@@ -222,12 +208,12 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         sess.opts.output_type != link::output_type_exe ||\n             sess.opts.static && sess.building_library;\n \n-    if stop_after_codegen { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n+    if stop_after_codegen { ret {crate: crate, tcx: some(ty_cx)}; }\n \n     time(time_passes, \"Linking\",\n          bind link::link_binary(sess, outputs.obj_filename,\n                                 outputs.out_filename, link_meta));\n-    ret {crate: crate, tcx: some(ty_cx), src: src};\n+    ret {crate: crate, tcx: some(ty_cx)};\n }\n \n fn compile_input(sess: session, cfg: ast::crate_cfg, input: str,\n@@ -286,7 +272,7 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       ppm_typed { cu_typeck }\n       _ { cu_parse }\n     };\n-    let {crate, tcx, src} = compile_upto(sess, cfg, input, upto, none);\n+    let {crate, tcx} = compile_upto(sess, cfg, input, upto, none);\n \n     let ann: pprust::pp_ann = pprust::no_ann();\n     alt ppm {\n@@ -299,6 +285,7 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       }\n       ppm_expanded | ppm_normal {}\n     }\n+    let src = codemap::get_filemap(sess.codemap, input).src;\n     pprust::print_crate(sess.codemap, sess.span_diagnostic, crate, input,\n                         io::string_reader(*src), io::stdout(), ann);\n }"}, {"sha": "3c7d036d1f2ddb373017ab4763cf0f7ded4bc49c", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1792d9ec96d680cb3ec257bfef84baffea352d80/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1792d9ec96d680cb3ec257bfef84baffea352d80/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=1792d9ec96d680cb3ec257bfef84baffea352d80", "patch": "@@ -131,6 +131,7 @@ fn get_filemap(cm: codemap, filename: str) -> filemap {\n     //      (or expected function, found _|_)\n     fail; // (\"asking for \" + filename + \" which we don't know about\");\n }\n+\n //\n // Local Variables:\n // mode: rust"}]}