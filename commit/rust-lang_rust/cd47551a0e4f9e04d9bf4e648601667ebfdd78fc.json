{"sha": "cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDc1NTFhMGU0ZjllMDRkOWJmNGU2NDg2MDE2NjdlYmZkZDc4ZmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T03:09:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-02T03:09:07Z"}, "message": "Rollup merge of #66926 - RalfJung:miri-stop, r=oli-obk\n\nadd reusable MachineStop variant to Miri engine error enum\n\nReplace the Miri-tool-specific `Exit` error variant with something dynamically typed that all clients of the Miri engine can use.\n\nr? @oli-obk\nCc https://github.com/rust-lang/rust/issues/66902", "tree": {"sha": "83d09d793be00ebbe835ca8d70dc3bd2ab11d589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d09d793be00ebbe835ca8d70dc3bd2ab11d589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5IBTCRBK7hj4Ov3rIwAAdHIIACfwjaR3d9zQXWPPsN56uWpQ\nyoy0O3x8v3wJ5R54JU689U0U1zkMW7bptBQKFqLZ80YoSqm/Nr7hJeUWouqEzLo4\nw7WglHVx4xdyWtHk6R67k8ojhOTnAwCKdosxRY2sonQQvJPA4woWtqUtzwENyxdl\nSVKGUlhHjctW1/brpfgMt7q+6s3q09VBHidY8qSYD9Xe+/AA89ukR+CUe3kn7uAz\npt/+sSI407p5YakDAMHZ/+HETNJmfP5sIe0IwIGEWkdKOYDlsmOMK/mYsumF9hvu\nfNbKVITnZxpUGez5RAukDykK9D42jdp3F8z2U05C60vhQKq+gLwCLIecAV8FyP0=\n=tV2Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 83d09d793be00ebbe835ca8d70dc3bd2ab11d589\nparent 427e3690f5b2aac03f0bff21d630ccf2028a6371\nparent 4b81dd43e071fb46c13d09f1c3851bd33e39376c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575256147 +0100\ncommitter GitHub <noreply@github.com> 1575256147 +0100\n\nRollup merge of #66926 - RalfJung:miri-stop, r=oli-obk\n\nadd reusable MachineStop variant to Miri engine error enum\n\nReplace the Miri-tool-specific `Exit` error variant with something dynamically typed that all clients of the Miri engine can use.\n\nr? @oli-obk\nCc https://github.com/rust-lang/rust/issues/66902\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "html_url": "https://github.com/rust-lang/rust/commit/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427e3690f5b2aac03f0bff21d630ccf2028a6371", "url": "https://api.github.com/repos/rust-lang/rust/commits/427e3690f5b2aac03f0bff21d630ccf2028a6371", "html_url": "https://github.com/rust-lang/rust/commit/427e3690f5b2aac03f0bff21d630ccf2028a6371"}, {"sha": "4b81dd43e071fb46c13d09f1c3851bd33e39376c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b81dd43e071fb46c13d09f1c3851bd33e39376c", "html_url": "https://github.com/rust-lang/rust/commit/4b81dd43e071fb46c13d09f1c3851bd33e39376c"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "557310650faeb4ceb0fdc15c670ce54c5ec79109", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "patch": "@@ -14,7 +14,7 @@ use rustc_target::spec::abi::Abi;\n use syntax_pos::{Pos, Span};\n use syntax::symbol::Symbol;\n use hir::GeneratorKind;\n-use std::{fmt, env};\n+use std::{fmt, env, any::Any};\n \n use rustc_error_codes::*;\n \n@@ -44,14 +44,14 @@ CloneTypeFoldableImpls! {\n pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub error: crate::mir::interpret::InterpError<'tcx>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct FrameInfo<'tcx> {\n     /// This span is in the caller.\n     pub call_site: Span,\n@@ -138,6 +138,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         lint_root: Option<hir::HirId>,\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         let must_error = match self.error {\n+            InterpError::MachineStop(_) => bug!(\"CTFE does not stop\"),\n             err_inval!(Layout(LayoutError::Unknown(_))) |\n             err_inval!(TooGeneric) =>\n                 return Err(ErrorHandled::TooGeneric),\n@@ -189,7 +190,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n /// macros for this.\n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n pub struct InterpErrorInfo<'tcx> {\n     pub kind: InterpError<'tcx>,\n     backtrace: Option<Box<Backtrace>>,\n@@ -331,7 +332,6 @@ impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n /// Error information for when the program we executed turned out not to actually be a valid\n /// program. This cannot happen in stand-alone Miri, but it can happen during CTFE/ConstProp\n /// where we work on generic code or execution does not have all information available.\n-#[derive(Clone, HashStable)]\n pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n@@ -361,7 +361,6 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n }\n \n /// Error information for when the program caused Undefined Behavior.\n-#[derive(Clone, HashStable)]\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n@@ -394,7 +393,6 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n ///\n /// Currently, we also use this as fall-back error kind for errors that have not been\n /// categorized yet.\n-#[derive(Clone, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n@@ -571,7 +569,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n \n /// Error information for when the program exhausted the resources granted to it\n /// by the interpreter.\n-#[derive(Clone, HashStable)]\n pub enum ResourceExhaustionInfo {\n     /// The stack grew too big.\n     StackFrameLimitReached,\n@@ -592,7 +589,6 @@ impl fmt::Debug for ResourceExhaustionInfo {\n     }\n }\n \n-#[derive(Clone, HashStable)]\n pub enum InterpError<'tcx> {\n     /// The program panicked.\n     Panic(PanicInfo<u64>),\n@@ -601,14 +597,14 @@ pub enum InterpError<'tcx> {\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n     Unsupported(UnsupportedOpInfo<'tcx>),\n-    /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n+    /// The program was invalid (ill-typed, bad MIR, not sufficiently monomorphized, ...).\n     InvalidProgram(InvalidProgramInfo<'tcx>),\n     /// The program exhausted the interpreter's resources (stack/heap too big,\n-    /// execution takes too long, ..).\n+    /// execution takes too long, ...).\n     ResourceExhaustion(ResourceExhaustionInfo),\n-    /// Not actually an interpreter error -- used to signal that execution has exited\n-    /// with the given status code.  Used by Miri, but not by CTFE.\n-    Exit(i32),\n+    /// Stop execution for a machine-controlled reason. This is never raised by\n+    /// the core engine itself.\n+    MachineStop(Box<dyn Any + Send>),\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n@@ -634,8 +630,8 @@ impl fmt::Debug for InterpError<'_> {\n                 write!(f, \"{:?}\", msg),\n             Panic(ref msg) =>\n                 write!(f, \"{:?}\", msg),\n-            Exit(code) =>\n-                write!(f, \"exited with status code {}\", code),\n+            MachineStop(_) =>\n+                write!(f, \"machine caused execution to stop\"),\n         }\n     }\n }"}, {"sha": "67958af3460fc3d7e18420469255d1cbd77aa293", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47551a0e4f9e04d9bf4e648601667ebfdd78fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cd47551a0e4f9e04d9bf4e648601667ebfdd78fc", "patch": "@@ -377,7 +377,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     InterpError::*\n                 };\n                 match error.kind {\n-                    Exit(_) => bug!(\"the CTFE program cannot exit\"),\n+                    MachineStop(_) => bug!(\"ConstProp does not stop\"),\n \n                     // Some error shouldn't come up because creating them causes\n                     // an allocation, which we should avoid. When that happens,"}]}