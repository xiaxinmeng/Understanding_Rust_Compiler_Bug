{"sha": "c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "node_id": "C_kwDOAAsO6NoAKGMzOGI4YThjNjIxZTBjOTQ2YWYxYjc0ZjU3YmI4Y2MwMjhlMDA2MGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T18:07:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T18:07:11Z"}, "message": "Auto merge of #94579 - tmiasko:target-features, r=nagisa\n\nAlways include global target features in function attributes\n\nThis ensures that information about target features configured with\n`-C target-feature=...` or detected with `-C target-cpu=native` is\nretained for subsequent consumers of LLVM bitcode.\n\nThis is crucial for linker plugin LTO, since this information is not\nconveyed to the plugin otherwise.\n\n<details><summary>Additional test case demonstrating the issue</summary>\n\n```rust\nextern crate core;\n\n#[inline]\n#[target_feature(enable = \"aes\")]\nunsafe fn f(a: u128, b: u128) -> u128 {\n    use core::arch::x86_64::*;\n    use core::mem::transmute;\n    transmute(_mm_aesenc_si128(transmute(a), transmute(b)))\n}\n\npub fn g(a: u128, b: u128) -> u128 {\n    unsafe { f(a, b) }\n}\n\nfn main() {\n    let mut args = std::env::args();\n    let _ = args.next().unwrap();\n    let a: u128 = args.next().unwrap().parse().unwrap();\n    let b: u128 = args.next().unwrap().parse().unwrap();\n    println!(\"{}\", g(a, b));\n}\n```\n\n```console\n$ rustc --edition=2021 a.rs -Clinker-plugin-lto -Clink-arg=-fuse-ld=lld  -Ctarget-feature=+aes -O\n...\n  = note: LLVM ERROR: Cannot select: intrinsic %llvm.x86.aesni.aesenc\n```\n\n</details>\n\nr? `@nagisa`", "tree": {"sha": "e3d56978b77d614acf53f6723a009eac346fce4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d56978b77d614acf53f6723a009eac346fce4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "html_url": "https://github.com/rust-lang/rust/commit/c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64180f67f148c0d13f30a8137dc4b8cc2b28757", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64180f67f148c0d13f30a8137dc4b8cc2b28757", "html_url": "https://github.com/rust-lang/rust/commit/a64180f67f148c0d13f30a8137dc4b8cc2b28757"}, {"sha": "095d818e0c9c2428e11287e918c38bb6c487e6ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/095d818e0c9c2428e11287e918c38bb6c487e6ed", "html_url": "https://github.com/rust-lang/rust/commit/095d818e0c9c2428e11287e918c38bb6c487e6ed"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "101da0012cb4b0d8fe33d2401db69cf8ef03082a", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -1,6 +1,7 @@\n //! Set and unset common attributes on LLVM values.\n \n use rustc_codegen_ssa::traits::*;\n+use rustc_data_structures::small_str::SmallStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -377,13 +378,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         }\n     }\n \n-    if !function_features.is_empty() {\n-        let global_features = cx.tcx.global_backend_features(()).iter().map(|s| &s[..]);\n-        let val = global_features\n-            .chain(function_features.iter().map(|s| &s[..]))\n-            .intersperse(\",\")\n-            .collect::<String>();\n-        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"target-features\", &val));\n+    let global_features = cx.tcx.global_backend_features(()).iter().map(|s| s.as_str());\n+    let function_features = function_features.iter().map(|s| s.as_str());\n+    let target_features =\n+        global_features.chain(function_features).intersperse(\",\").collect::<SmallStr<1024>>();\n+    if !target_features.is_empty() {\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"target-features\", &target_features));\n     }\n \n     attributes::apply_to_llfn(llfn, Function, &to_add);"}, {"sha": "b82e97172614b0df6e0e29ad160973c73b07722f", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -20,7 +20,7 @@ stable_deref_trait = \"1.0.0\"\n rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.1.0\"\n-smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.6.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n measureme = \"10.0.0\""}, {"sha": "1a3fe652521567d839b359fdffa81ae0fd70c9b2", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -80,6 +80,7 @@ pub mod obligation_forest;\n pub mod owning_ref;\n pub mod sip128;\n pub mod small_c_str;\n+pub mod small_str;\n pub mod snapshot_map;\n pub mod stable_map;\n pub mod svh;"}, {"sha": "3a8ab8ff9911e4a34d2b9d01027dec1d328c7b01", "filename": "compiler/rustc_data_structures/src/small_c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -62,6 +62,7 @@ impl SmallCStr {\n impl Deref for SmallCStr {\n     type Target = ffi::CStr;\n \n+    #[inline]\n     fn deref(&self) -> &ffi::CStr {\n         self.as_c_str()\n     }"}, {"sha": "800acb1b03e5ae2a5b624cbca155052adebe0da1", "filename": "compiler/rustc_data_structures/src/small_str.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -0,0 +1,68 @@\n+use smallvec::SmallVec;\n+\n+#[cfg(test)]\n+mod tests;\n+\n+/// Like SmallVec but for strings.\n+#[derive(Default)]\n+pub struct SmallStr<const N: usize>(SmallVec<[u8; N]>);\n+\n+impl<const N: usize> SmallStr<N> {\n+    #[inline]\n+    pub fn new() -> Self {\n+        SmallStr(SmallVec::default())\n+    }\n+\n+    #[inline]\n+    pub fn push_str(&mut self, s: &str) {\n+        self.0.extend_from_slice(s.as_bytes());\n+    }\n+\n+    #[inline]\n+    pub fn empty(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+\n+    #[inline]\n+    pub fn spilled(&self) -> bool {\n+        self.0.spilled()\n+    }\n+\n+    #[inline]\n+    pub fn as_str(&self) -> &str {\n+        unsafe { std::str::from_utf8_unchecked(self.0.as_slice()) }\n+    }\n+}\n+\n+impl<const N: usize> std::ops::Deref for SmallStr<N> {\n+    type Target = str;\n+\n+    #[inline]\n+    fn deref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+impl<const N: usize, A: AsRef<str>> FromIterator<A> for SmallStr<N> {\n+    #[inline]\n+    fn from_iter<T>(iter: T) -> Self\n+    where\n+        T: IntoIterator<Item = A>,\n+    {\n+        let mut s = SmallStr::default();\n+        s.extend(iter);\n+        s\n+    }\n+}\n+\n+impl<const N: usize, A: AsRef<str>> Extend<A> for SmallStr<N> {\n+    #[inline]\n+    fn extend<T>(&mut self, iter: T)\n+    where\n+        T: IntoIterator<Item = A>,\n+    {\n+        for a in iter.into_iter() {\n+            self.push_str(a.as_ref());\n+        }\n+    }\n+}"}, {"sha": "7635a9b7204dbe6dbb636156eda35aa7dad04c18", "filename": "compiler/rustc_data_structures/src/small_str/tests.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -0,0 +1,20 @@\n+use super::*;\n+\n+#[test]\n+fn empty() {\n+    let s = SmallStr::<1>::new();\n+    assert!(s.empty());\n+    assert_eq!(\"\", s.as_str());\n+    assert!(!s.spilled());\n+}\n+\n+#[test]\n+fn from_iter() {\n+    let s = [\"aa\", \"bb\", \"cc\"].iter().collect::<SmallStr<6>>();\n+    assert_eq!(\"aabbcc\", s.as_str());\n+    assert!(!s.spilled());\n+\n+    let s = [\"aa\", \"bb\", \"cc\", \"dd\"].iter().collect::<SmallStr<6>>();\n+    assert_eq!(\"aabbccdd\", s.as_str());\n+    assert!(s.spilled());\n+}"}, {"sha": "4be77e36e760bdf0a160bd2fb7f7fd6582165220", "filename": "src/test/codegen/target-feature-overrides.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b8a8c621e0c946af1b74f57bb8cc028e0060d/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs?ref=c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "patch": "@@ -29,7 +29,7 @@ pub unsafe fn apple() -> u32 {\n     peach()\n }\n \n-// target features same as global (not reflected or overriden in IR)\n+// target features same as global\n #[no_mangle]\n pub unsafe fn banana() -> u32 {\n // CHECK-LABEL: @banana()\n@@ -43,5 +43,5 @@ pub unsafe fn banana() -> u32 {\n // COMPAT-SAME: \"target-features\"=\"+avx2,+avx,+avx\"\n // INCOMPAT-SAME: \"target-features\"=\"-avx2,-avx,+avx\"\n // CHECK: attributes [[BANANAATTRS]]\n-// CHECK-NOT: target-features\n-// CHECK-SAME: }\n+// COMPAT-SAME: \"target-features\"=\"+avx2,+avx\"\n+// INCOMPAT-SAME: \"target-features\"=\"-avx2,-avx\""}]}