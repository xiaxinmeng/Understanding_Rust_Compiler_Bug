{"sha": "5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOGIzNzU2M2U2ZDgyODcyYTE4YWZhZjRkOWNhMjVhNGViZWZhYzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-29T12:49:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-29T12:51:23Z"}, "message": "Cleanup editing API", "tree": {"sha": "accb6a6100600ef9473dd2cbeeb2b3baa7229c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accb6a6100600ef9473dd2cbeeb2b3baa7229c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "html_url": "https://github.com/rust-lang/rust/commit/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53ff214aa9fe30eeedb64f78cc89561060c0083", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53ff214aa9fe30eeedb64f78cc89561060c0083", "html_url": "https://github.com/rust-lang/rust/commit/b53ff214aa9fe30eeedb64f78cc89561060c0083"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "a74ac42d5d229431d0a6dd2a29f44c841231efe1", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "patch": "@@ -157,7 +157,7 @@ impl<'a> QualifyPaths<'a> {\n \n pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     let syntax = node.syntax();\n-    let result = ra_syntax::algo::replace_descendants(syntax, &|element| match element {\n+    let result = ra_syntax::algo::replace_descendants(syntax, |element| match element {\n         ra_syntax::SyntaxElement::Node(n) => {\n             let replacement = transformer.get_substitution(&n)?;\n             Some(replacement.into())"}, {"sha": "5a079de2709d8b130e3f9b3ef6c11e503cc5962d", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "patch": "@@ -52,7 +52,7 @@ fn expand_macro_recur(\n         }\n     }\n \n-    Some(replace_descendants(&expanded, &|n| replaces.get(n).cloned()))\n+    Some(replace_descendants(&expanded, |n| replaces.get(n).cloned()))\n }\n \n // FIXME: It would also be cool to share logic here and in the mbe tests,"}, {"sha": "2aaf0215fa6b2ab464c261a2d4fd4169d5a234b9", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "patch": "@@ -570,7 +570,7 @@ mod tests {\n         let token_tree = insert_children(\n             &rbrace.parent().unwrap(),\n             InsertPosition::Last,\n-            &mut std::iter::once(space),\n+            std::iter::once(space),\n         );\n \n         // Token Tree now is :"}, {"sha": "b87c7084e6f1d3e6bd39d969cd27baa17f946e03", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "patch": "@@ -142,6 +142,15 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n /// This is a type-unsafe low-level editing API, if you need to use it,\n /// prefer to create a type-safe abstraction on top of it instead.\n pub fn insert_children(\n+    parent: &SyntaxNode,\n+    position: InsertPosition<SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n+) -> SyntaxNode {\n+    let mut to_insert = to_insert.into_iter();\n+    _insert_children(parent, position, &mut to_insert)\n+}\n+\n+fn _insert_children(\n     parent: &SyntaxNode,\n     position: InsertPosition<SyntaxElement>,\n     to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n@@ -176,6 +185,15 @@ pub fn insert_children(\n /// This is a type-unsafe low-level editing API, if you need to use it,\n /// prefer to create a type-safe abstraction on top of it instead.\n pub fn replace_children(\n+    parent: &SyntaxNode,\n+    to_delete: RangeInclusive<SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n+) -> SyntaxNode {\n+    let mut to_insert = to_insert.into_iter();\n+    _replace_children(parent, to_delete, &mut to_insert)\n+}\n+\n+fn _replace_children(\n     parent: &SyntaxNode,\n     to_delete: RangeInclusive<SyntaxElement>,\n     to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n@@ -202,14 +220,21 @@ pub fn replace_children(\n /// to create a type-safe abstraction on top of it instead.\n pub fn replace_descendants(\n     parent: &SyntaxNode,\n-    map: &impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+    map: impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+) -> SyntaxNode {\n+    _replace_descendants(parent, &map)\n+}\n+\n+fn _replace_descendants(\n+    parent: &SyntaxNode,\n+    map: &dyn Fn(&SyntaxElement) -> Option<SyntaxElement>,\n ) -> SyntaxNode {\n     //  FIXME: this could be made much faster.\n     let new_children = parent.children_with_tokens().map(|it| go(map, it)).collect::<Vec<_>>();\n     return with_children(parent, new_children);\n \n     fn go(\n-        map: &impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+        map: &dyn Fn(&SyntaxElement) -> Option<SyntaxElement>,\n         element: SyntaxElement,\n     ) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n         if let Some(replacement) = map(&element) {\n@@ -221,7 +246,7 @@ pub fn replace_descendants(\n         match element {\n             NodeOrToken::Token(it) => NodeOrToken::Token(it.green().clone()),\n             NodeOrToken::Node(it) => {\n-                NodeOrToken::Node(replace_descendants(&it, map).green().clone())\n+                NodeOrToken::Node(_replace_descendants(&it, map).green().clone())\n             }\n         }\n     }"}, {"sha": "d2630e9e99c168489c3b2f67691372c7c934bd24", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b37563e6d82872a18afaf4d9ca25a4ebefac0/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=5f8b37563e6d82872a18afaf4d9ca25a4ebefac0", "patch": "@@ -276,7 +276,7 @@ pub fn replace_descendants<N: AstNode, D: AstNode>(\n         .into_iter()\n         .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n         .collect::<FxHashMap<SyntaxElement, _>>();\n-    let new_syntax = algo::replace_descendants(parent.syntax(), &|n| map.get(n).cloned());\n+    let new_syntax = algo::replace_descendants(parent.syntax(), |n| map.get(n).cloned());\n     N::cast(new_syntax).unwrap()\n }\n \n@@ -331,7 +331,7 @@ impl IndentLevel {\n                 )\n             })\n             .collect();\n-        algo::replace_descendants(&node, &|n| replacements.get(n).cloned())\n+        algo::replace_descendants(&node, |n| replacements.get(n).cloned())\n     }\n \n     pub fn decrease_indent<N: AstNode>(self, node: N) -> N {\n@@ -359,7 +359,7 @@ impl IndentLevel {\n                 )\n             })\n             .collect();\n-        algo::replace_descendants(&node, &|n| replacements.get(n).cloned())\n+        algo::replace_descendants(&node, |n| replacements.get(n).cloned())\n     }\n }\n \n@@ -389,7 +389,7 @@ fn insert_children<N: AstNode>(\n     position: InsertPosition<SyntaxElement>,\n     to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax = algo::insert_children(parent.syntax(), position, &mut to_insert.into_iter());\n+    let new_syntax = algo::insert_children(parent.syntax(), position, to_insert);\n     N::cast(new_syntax).unwrap()\n }\n \n@@ -404,8 +404,7 @@ fn replace_children<N: AstNode>(\n     to_replace: RangeInclusive<SyntaxElement>,\n     to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax =\n-        algo::replace_children(parent.syntax(), to_replace, &mut to_insert.into_iter());\n+    let new_syntax = algo::replace_children(parent.syntax(), to_replace, to_insert);\n     N::cast(new_syntax).unwrap()\n }\n "}]}