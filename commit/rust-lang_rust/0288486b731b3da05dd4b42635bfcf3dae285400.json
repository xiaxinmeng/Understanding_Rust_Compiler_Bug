{"sha": "0288486b731b3da05dd4b42635bfcf3dae285400", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODg0ODZiNzMxYjNkYTA1ZGQ0YjQyNjM1YmZjZjNkYWUyODU0MDA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T13:16:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T13:16:25Z"}, "message": "use target byte order", "tree": {"sha": "2e60df846dd353f5ead245b4d416875d544223bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e60df846dd353f5ead245b4d416875d544223bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0288486b731b3da05dd4b42635bfcf3dae285400", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXa+EpAAoJEFbW7qD8Z6xGaF0QAIDt9WU82W2KSXykAZ6vIZfe\nG7ZvaHYNCmAEw8bCflK2d1Pm04OWn2hSJa6Bpj9EIeqy9LbBJjY+iRbVOGS0vwQ6\nCDdI2TRSA60k25sN4pqsFJoy2uXdYLJhbF/g0bFyGNTj9+Db9RtDM1RwG4K1MQDv\nPMBVIst7u5zyZAYlx5oOnj++1DcsyCEATay4YYSAiw2oLcIam586gBq8wgx843Gm\nq/4V/2LPrXC0TAn5hZFd0ioGf0aYM4toDxEFHxfB7V+22UE12JktH7TJsD2snKDq\nDYIr4of7DfrFDVrtccWxpp4ccwZdTReEJIhFtnWWdqatiNVHdZef/4T1mQYlMrEw\n15VYf2J6jVmWM+7Dk41CNrCCVb91XJN20TcA334QP6vatSoMxIni0DQ1sOC0rX7y\np4Vn0UG68l1cgLTMt2Npb4hjy40ReZwQKljTkn05sXgrEbDvrB5yE/+J/bVQK4LI\n+6cJmkJJDnAOQ+xuJS5W+UkGNVxtaUCT1mM45CWWgPy8a7UF66rRcljzDYjia7OS\nY7m/sxSCiI+RNDn8f/qvaVmBL5YxGCf58nuoJwkFo73oPTJl6JE8M7w3URKC+v4W\nGxr4uJRXlEEzEK1O3Da7W1KhU0p8O71RRISvFBXiVOSPiQa1uIUgFJroGHns+V5Z\nGt3CIY7c7371tn7FdNLI\n=cTfl\n-----END PGP SIGNATURE-----", "payload": "tree 2e60df846dd353f5ead245b4d416875d544223bd\nparent 86040c0d295d84a0875e44a296372e745e1314c3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466687785 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466687785 +0200\n\nuse target byte order"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0288486b731b3da05dd4b42635bfcf3dae285400", "html_url": "https://github.com/rust-lang/rust/commit/0288486b731b3da05dd4b42635bfcf3dae285400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0288486b731b3da05dd4b42635bfcf3dae285400/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86040c0d295d84a0875e44a296372e745e1314c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/86040c0d295d84a0875e44a296372e745e1314c3", "html_url": "https://github.com/rust-lang/rust/commit/86040c0d295d84a0875e44a296372e745e1314c3"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "d537e9fc91ecb8c13c8ff70037cb15cd68c64766", "filename": "src/memory.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0288486b731b3da05dd4b42635bfcf3dae285400/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0288486b731b3da05dd4b42635bfcf3dae285400/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0288486b731b3da05dd4b42635bfcf3dae285400", "patch": "@@ -1,12 +1,12 @@\n-use byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};\n+use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian, self};\n use std::collections::Bound::{Included, Excluded};\n use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n use std::{fmt, iter, mem, ptr};\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::BareFnTy;\n use rustc::ty::subst::Substs;\n-use rustc::ty::layout::TargetDataLayout;\n+use rustc::ty::layout::{self, TargetDataLayout};\n \n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n@@ -159,6 +159,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn pointer_size(&self) -> usize {\n         self.layout.pointer_size.bytes() as usize\n     }\n+\n+    pub fn endianess(&self) -> layout::Endian {\n+        self.layout.endian\n+    }\n }\n \n /// Allocation accessors\n@@ -340,7 +344,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n         let offset = self.get_bytes_unchecked(ptr, size)?\n-            .read_uint::<NativeEndian>(size).unwrap() as usize;\n+            .read_target_uint(size, self.endianess()).unwrap() as usize;\n         let alloc = self.get(ptr.alloc_id)?;\n         match alloc.relocations.get(&ptr.offset) {\n             Some(&alloc_id) => Ok(Pointer { alloc_id: alloc_id, offset: offset }),\n@@ -387,19 +391,21 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, i64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_int::<NativeEndian>(size).unwrap())\n+        self.get_bytes(ptr, size).map(|mut b| b.read_target_int(size, self.endianess()).unwrap())\n     }\n \n     pub fn write_int(&mut self, ptr: Pointer, n: i64, size: usize) -> EvalResult<'tcx, ()> {\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_int::<NativeEndian>(n, size).unwrap())\n+        let endianess = self.endianess();\n+        self.get_bytes_mut(ptr, size).map(|mut b| b.write_target_int(n, size, endianess).unwrap())\n     }\n \n     pub fn read_uint(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, u64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_uint::<NativeEndian>(size).unwrap())\n+        self.get_bytes(ptr, size).map(|mut b| b.read_target_uint(size, self.endianess()).unwrap())\n     }\n \n     pub fn write_uint(&mut self, ptr: Pointer, n: u64, size: usize) -> EvalResult<'tcx, ()> {\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_uint::<NativeEndian>(n, size).unwrap())\n+        let endianess = self.endianess();\n+        self.get_bytes_mut(ptr, size).map(|mut b| b.write_target_uint(n, size, endianess).unwrap())\n     }\n \n     pub fn read_isize(&self, ptr: Pointer) -> EvalResult<'tcx, i64> {\n@@ -585,3 +591,43 @@ impl UndefMask {\n fn bit_index(bits: usize) -> (usize, usize) {\n     (bits / BLOCK_SIZE, bits % BLOCK_SIZE)\n }\n+\n+trait ReadBytesExt2 {\n+    fn read_target_uint(&mut self, nbytes: usize, endian: layout::Endian) -> Result<u64, byteorder::Error>;\n+    fn read_target_int(&mut self, nbytes: usize, endian: layout::Endian) -> Result<i64, byteorder::Error>;\n+}\n+\n+impl<T: ReadBytesExt> ReadBytesExt2 for T {\n+    fn read_target_uint(&mut self, nbytes: usize, endian: layout::Endian) -> Result<u64, byteorder::Error> {\n+        match endian {\n+            layout::Endian::Little => ReadBytesExt::read_uint::<LittleEndian>(self, nbytes),\n+            layout::Endian::Big => ReadBytesExt::read_uint::<BigEndian>(self, nbytes),\n+        }\n+    }\n+    fn read_target_int(&mut self, nbytes: usize, endian: layout::Endian) -> Result<i64, byteorder::Error> {\n+        match endian {\n+            layout::Endian::Little => ReadBytesExt::read_int::<LittleEndian>(self, nbytes),\n+            layout::Endian::Big => ReadBytesExt::read_int::<BigEndian>(self, nbytes),\n+        }\n+    }\n+}\n+\n+trait WriteBytesExt2 {\n+    fn write_target_uint(&mut self, data: u64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error>;\n+    fn write_target_int(&mut self, data: i64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error>;\n+}\n+\n+impl<T: WriteBytesExt> WriteBytesExt2 for T {\n+    fn write_target_uint(&mut self, data: u64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error> {\n+        match endian {\n+            layout::Endian::Little => WriteBytesExt::write_uint::<LittleEndian>(self, data, nbytes),\n+            layout::Endian::Big => WriteBytesExt::write_uint::<BigEndian>(self, data, nbytes),\n+        }\n+    }\n+    fn write_target_int(&mut self, data: i64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error> {\n+        match endian {\n+            layout::Endian::Little => WriteBytesExt::write_int::<LittleEndian>(self, data, nbytes),\n+            layout::Endian::Big => WriteBytesExt::write_int::<BigEndian>(self, data, nbytes),\n+        }\n+    }\n+}"}]}