{"sha": "7cee7eee723f52d2307e9c92a1fc5fa53f860619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZWU3ZWVlNzIzZjUyZDIzMDdlOWM5MmExZmM1ZmE1M2Y4NjA2MTk=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-08-25T11:33:58Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-20T05:31:30Z"}, "message": "Require that marker impls are empty, but allow them to overlap", "tree": {"sha": "3ba069fa16d90a4c213fd7f1dba40a52ff1cc6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba069fa16d90a4c213fd7f1dba40a52ff1cc6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cee7eee723f52d2307e9c92a1fc5fa53f860619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cee7eee723f52d2307e9c92a1fc5fa53f860619", "html_url": "https://github.com/rust-lang/rust/commit/7cee7eee723f52d2307e9c92a1fc5fa53f860619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cee7eee723f52d2307e9c92a1fc5fa53f860619/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6149a83c0bae2976328ec9e433eb0803048c3a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6149a83c0bae2976328ec9e433eb0803048c3a1d", "html_url": "https://github.com/rust-lang/rust/commit/6149a83c0bae2976328ec9e433eb0803048c3a1d"}], "stats": {"total": 196, "additions": 181, "deletions": 15}, "files": [{"sha": "4ecd504b31d52b52044589e55fa66428f47dc411", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -2652,23 +2652,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             as Box<dyn Iterator<Item = AssociatedItem> + 'a>\n     }\n \n-    /// Returns true if the impls are the same polarity and are implementing\n-    /// a trait which contains no items\n+    /// Returns true if the impls are the same polarity and the trait either\n+    /// has no items or is annotated #[marker] and prevents item overrides.\n     pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n-        if !self.features().overlapping_marker_traits {\n-            return false;\n+        if self.features().overlapping_marker_traits {\n+            let trait1_is_empty = self.impl_trait_ref(def_id1)\n+                .map_or(false, |trait_ref| {\n+                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+                });\n+            let trait2_is_empty = self.impl_trait_ref(def_id2)\n+                .map_or(false, |trait_ref| {\n+                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+                });\n+            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n+                && trait1_is_empty\n+                && trait2_is_empty\n+        } else if self.features().marker_trait_attr {\n+            let is_marker_impl = |def_id: DefId| -> bool {\n+                let trait_ref = self.impl_trait_ref(def_id);\n+                trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)\n+            };\n+            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n+                && is_marker_impl(def_id1)\n+                && is_marker_impl(def_id2)\n+        } else {\n+            false\n         }\n-        let trait1_is_empty = self.impl_trait_ref(def_id1)\n-            .map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-        let trait2_is_empty = self.impl_trait_ref(def_id2)\n-            .map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-        self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n-            && trait1_is_empty\n-            && trait2_is_empty\n     }\n \n     // Returns `ty::VariantDef` if `def` refers to a struct,"}, {"sha": "ecb7a8ea8b62ed4066c50c58ae369f7d017ab2e1", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -46,6 +46,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n         }\n \n         enforce_trait_manually_implementable(tcx, impl_def_id, trait_ref.def_id);\n+        enforce_empty_impls_for_marker_traits(tcx, impl_def_id, trait_ref.def_id);\n     }\n }\n \n@@ -99,6 +100,25 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n         .emit();\n }\n \n+/// We allow impls of marker traits to overlap, so they can't override impls\n+/// as that could make it ambiguous which associated item to use.\n+fn enforce_empty_impls_for_marker_traits(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) {\n+    if !tcx.trait_def(trait_def_id).is_marker {\n+        return;\n+    }\n+\n+    if tcx.associated_item_def_ids(trait_def_id).is_empty() {\n+        return;\n+    }\n+\n+    let span = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+    struct_span_err!(tcx.sess,\n+                     span,\n+                     E0715,\n+                     \"impls for marker traits cannot contain items\")\n+        .emit();\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     use self::builtin::coerce_unsized_info;\n     use self::inherent_impls::{crate_inherent_impls, inherent_impls};"}, {"sha": "f51d1b19f064a067110cbe23bc72303bcc05c45e", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -4833,4 +4833,5 @@ register_diagnostics! {\n     E0641, // cannot cast to/from a pointer with an unknown kind\n     E0645, // trait aliases not finished\n     E0698, // type inside generator must be known in this context\n+    E0715, // impls for marker traits cannot contain items\n }"}, {"sha": "e1081032c059a47103c6deccfcbe157516c2ef82", "filename": "src/test/run-pass/overlap-permitted-for-annotated-marker-traits.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits with #[marker]. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`.\n+\n+#![feature(marker_trait_attr)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    // Debug && Display:\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+\n+    // Debug && !Display:\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}, {"sha": "a3b4fd6aebacfd2cd6c3815e3a8c0dbc68fa2515", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits with #[marker]. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`. This test just\n+// checks that we don't consider **all** types to be `MyMarker`.\n+\n+#![feature(marker_trait_attr)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait Marker {}\n+\n+impl<T: Debug> Marker for T {}\n+impl<T: Display> Marker for T {}\n+\n+fn is_marker<T: Marker>() { }\n+\n+struct NotDebugOrDisplay;\n+\n+fn main() {\n+    // Debug && Display:\n+    is_marker::<i32>();\n+\n+    // Debug && !Display:\n+    is_marker::<Vec<i32>>();\n+\n+    // !Debug && !Display\n+    is_marker::<NotDebugOrDisplay>(); //~ ERROR\n+}"}, {"sha": "a4c4f0629ddd0597dca3604c88c690e5b61815dd", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n+  --> $DIR/overlap-marker-trait.rs:37:5\n+   |\n+LL |     is_marker::<NotDebugOrDisplay>(); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |\n+note: required by `is_marker`\n+  --> $DIR/overlap-marker-trait.rs:25:1\n+   |\n+LL | fn is_marker<T: Marker>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4a9252b38f27ecae365fa43a7bac38a2abeaeae0", "filename": "src/test/ui/marker_trait_attr/override-item-on-marker-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+trait Marker {\n+    const N: usize = 0;\n+    fn do_something() {}\n+}\n+\n+struct OverrideConst;\n+impl Marker for OverrideConst {\n+//~^ ERROR impls for marker traits cannot contain items\n+    const N: usize = 1;\n+}\n+\n+struct OverrideFn;\n+impl Marker for OverrideFn {\n+//~^ ERROR impls for marker traits cannot contain items\n+    fn do_something() {\n+        println!(\"Hello world!\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43af997511eea940690115bf2df618f338ef4ac0", "filename": "src/test/ui/marker_trait_attr/override-item-on-marker-trait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cee7eee723f52d2307e9c92a1fc5fa53f860619/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr?ref=7cee7eee723f52d2307e9c92a1fc5fa53f860619", "patch": "@@ -0,0 +1,15 @@\n+error[E0715]: impls for marker traits cannot contain items\n+  --> $DIR/override-item-on-marker-trait.rs:20:1\n+   |\n+LL | impl Marker for OverrideConst {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0715]: impls for marker traits cannot contain items\n+  --> $DIR/override-item-on-marker-trait.rs:26:1\n+   |\n+LL | impl Marker for OverrideFn {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0715`."}]}