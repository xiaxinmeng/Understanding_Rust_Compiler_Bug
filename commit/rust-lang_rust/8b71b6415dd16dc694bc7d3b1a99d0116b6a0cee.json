{"sha": "8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzFiNjQxNWRkMTZkYzY5NGJjN2QzYjFhOTlkMDExNmI2YTBjZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T16:41:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T16:41:45Z"}, "message": "auto merge of #11333 : cmr/rust/triage2, r=alexcrichton", "tree": {"sha": "36a072b3674753d32ee7f96e1e1c25e7993e4000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a072b3674753d32ee7f96e1e1c25e7993e4000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "html_url": "https://github.com/rust-lang/rust/commit/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bae091e5171c90803e9c40fb01a76d1b0b6f4321", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae091e5171c90803e9c40fb01a76d1b0b6f4321", "html_url": "https://github.com/rust-lang/rust/commit/bae091e5171c90803e9c40fb01a76d1b0b6f4321"}, {"sha": "2097570f4ca354d2f0d18c52659c472cda4fab08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2097570f4ca354d2f0d18c52659c472cda4fab08", "html_url": "https://github.com/rust-lang/rust/commit/2097570f4ca354d2f0d18c52659c472cda4fab08"}], "stats": {"total": 139, "additions": 95, "deletions": 44}, "files": [{"sha": "fb14deabf241b90519c11c2c80000776447b2f50", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -32,40 +32,6 @@ def unpack_snapshot(triple, dl_path):\n   tar.close()\n   shutil.rmtree(download_unpack_base)\n \n-def determine_curr_snapshot(triple):\n-  i = 0\n-  platform = get_platform(triple)\n-\n-  found_file = False\n-  found_snap = False\n-  hsh = None\n-  date = None\n-  rev = None\n-\n-  f = open(snapshotfile)\n-  for line in f.readlines():\n-    i += 1\n-    parsed = parse_line(i, line)\n-    if (not parsed): continue\n-\n-    if found_snap and parsed[\"type\"] == \"file\":\n-      if parsed[\"platform\"] == platform:\n-        hsh = parsed[\"hash\"]\n-        found_file = True\n-        break;\n-    elif parsed[\"type\"] == \"snapshot\":\n-      date = parsed[\"date\"]\n-      rev = parsed[\"rev\"]\n-      found_snap = True\n-\n-  if not found_snap:\n-    raise Exception(\"no snapshot entries in file\")\n-\n-  if not found_file:\n-    raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n-                    (platform, rev))\n-\n-  return full_snapshot_name(date, rev, platform, hsh)\n \n # Main\n "}, {"sha": "8aeee7e22ebe461745afed1d49f88b07bbf6cab3", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -194,3 +194,41 @@ def in_tar_name(fn):\n     shutil.move(file0, file1)\n \n     return file1\n+\n+def determine_curr_snapshot_info(triple):\n+  i = 0\n+  platform = get_platform(triple)\n+\n+  found_file = False\n+  found_snap = False\n+  hsh = None\n+  date = None\n+  rev = None\n+\n+  f = open(snapshotfile)\n+  for line in f.readlines():\n+    i += 1\n+    parsed = parse_line(i, line)\n+    if (not parsed): continue\n+\n+    if found_snap and parsed[\"type\"] == \"file\":\n+      if parsed[\"platform\"] == platform:\n+        hsh = parsed[\"hash\"]\n+        found_file = True\n+        break;\n+    elif parsed[\"type\"] == \"snapshot\":\n+      date = parsed[\"date\"]\n+      rev = parsed[\"rev\"]\n+      found_snap = True\n+\n+  if not found_snap:\n+    raise Exception(\"no snapshot entries in file\")\n+\n+  if not found_file:\n+    raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n+                    (platform, rev))\n+\n+  return (date, rev, platform, hsh)\n+\n+def determine_curr_snapshot(triple):\n+  return full_snapshot_name(*determine_curr_snapshot_info(triple))"}, {"sha": "3364ddcb678072ca92d4a3dd1df0e135b6c8b808", "filename": "src/etc/tidy.py", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -3,6 +3,7 @@\n \n import sys, fileinput, subprocess, re\n from licenseck import *\n+import snapshot\n \n err=0\n cols=100\n@@ -51,7 +52,19 @@ def do_license_check(name, contents):\n                 report_err(\"TODO is deprecated; use FIXME\")\n             match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n             if match:\n-                report_warn(match.group(1))\n+                m = match.group(1)\n+                if \"snap\" in m.lower():\n+                    report_warn(match.group(1))\n+            match = re.match(r'^.*//\\s*SNAP\\s+(\\w+)', line)\n+            if match:\n+                hsh = match.group(1)\n+                a, b, c, phash = snapshot.determine_curr_snapshot_info()\n+                if not phash.startswith(hsh):\n+                    report_err(\"Snapshot out of date: \" + line)\n+            else:\n+                if \"SNAP\" in line:\n+                    report_warn(\"Unmatched SNAP line: \" + line)\n+\n         if (line.find('\\t') != -1 and\n             fileinput.filename().find(\"Makefile\") == -1):\n             report_err(\"tab character\")"}, {"sha": "78baa4f7ec8bf36f28b6dc078b44e9c16055ecd4", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -1522,6 +1522,9 @@ mod tests {\n             optmulti(\"l\")\n         ];\n \n+        // short and verbose should always be in the same order. if they\n+        // aren't the test will fail (and in mysterious ways)\n+\n         let verbose = ~[\n             groups::reqopt(\"b\", \"banana\", \"Desc\", \"VAL\"),\n             groups::optopt(\"a\", \"apple\", \"Desc\", \"VAL\"),\n@@ -1533,7 +1536,6 @@ mod tests {\n         let sample_args = ~[~\"--kiwi\", ~\"15\", ~\"--apple\", ~\"1\", ~\"k\",\n                             ~\"-p\", ~\"16\", ~\"l\", ~\"35\"];\n \n-        // FIXME #4681: sort options here?\n         assert!(getopts(sample_args, short)\n             == groups::getopts(sample_args, verbose));\n     }"}, {"sha": "b9d2c320cce835cf40cb5edf55a813e36d630092", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -673,7 +673,6 @@ fn specialize(cx: &MatchCheckCtxt,\n \n                     DefFn(..) |\n                     DefStruct(..) => {\n-                        // FIXME #4731: Is this right? --pcw\n                         let new_args;\n                         match args {\n                             Some(args) => new_args = args,"}, {"sha": "adc10c456e35009b785ea8b8a4fcfba37f56c2cd", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -577,6 +577,7 @@ mod tests {\n     #[test] #[should_fail]\n     fn test_ascii_fail_char_slice() { '\u03bb'.to_ascii(); }\n \n+    #[test]\n     fn test_opt() {\n         assert_eq!(65u8.to_ascii_opt(), Some(Ascii { chr: 65u8 }));\n         assert_eq!(255u8.to_ascii_opt(), None);"}, {"sha": "8994f6b461a7d1b5e601ef697d0bdb82f10d2a69", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -99,9 +99,8 @@ impl Writer for UdpStream {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use io::net::ip::{Ipv4Addr, SocketAddr};\n+    use io::net::ip::{SocketAddr};\n     use io::*;\n-    use io::test::*;\n     use prelude::*;\n \n     iotest!(fn bind_error() {"}, {"sha": "492059ebb706acdba8aea77f76a2ad60beb113d7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -163,6 +163,7 @@ pub mod sync;\n \n /* Runtime and platform support */\n \n+#[unstable]\n pub mod libc;\n pub mod c_str;\n pub mod os;\n@@ -172,9 +173,8 @@ pub mod rand;\n pub mod run;\n pub mod cast;\n pub mod fmt;\n-pub mod repr;\n pub mod cleanup;\n-pub mod reflect;\n+#[deprecated]\n pub mod condition;\n pub mod logging;\n pub mod util;\n@@ -183,7 +183,13 @@ pub mod mem;\n \n /* Unsupported interfaces */\n \n+#[unstable]\n+pub mod repr;\n+#[unstable]\n+pub mod reflect;\n+\n // Private APIs\n+#[unstable]\n pub mod unstable;\n \n \n@@ -195,6 +201,7 @@ mod cmath;\n \n // FIXME #7809: This shouldn't be pub, and it should be reexported under 'unstable'\n // but name resolution doesn't work without it being pub.\n+#[unstable]\n pub mod rt;\n \n // A curious inner-module that's not exported that contains the binding"}, {"sha": "37596b3501542c0deacbc2c66929d32cab0fdd3c", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -54,7 +54,6 @@ mod test {\n     use unstable::run_in_bare_thread;\n     use super::*;\n     use rt::task::Task;\n-    use rt::local_ptr;\n \n     #[test]\n     fn thread_local_task_smoke_test() {"}, {"sha": "b9c0be9276dab4a48a18c227f5ecab571c023507", "filename": "src/test/compile-fail/struct-pattern-match-useless.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+    y: int,\n+}\n+\n+pub fn main() {\n+    let a = Foo { x: 1, y: 2 };\n+    match a {\n+        Foo { x: x, y: y } => (),\n+        Foo { .. } => () //~ ERROR unreachable pattern\n+    }\n+\n+}"}, {"sha": "de50bb3bfed9b1abe8bba0b117837e9e5559d686", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -65,7 +65,7 @@ impl TyVisitor for MyVisitor {\n     fn visit_estr_uniq(&mut self) -> bool { true }\n     fn visit_estr_slice(&mut self) -> bool { true }\n     fn visit_estr_fixed(&mut self,\n-                        _sz: uint, _sz: uint,\n+                        _sz: uint, _sz2: uint,\n                         _align: uint) -> bool { true }\n \n     fn visit_box(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool { true }"}, {"sha": "6033554d0cbeeef5001f5db809d911ea039a0738", "filename": "src/test/run-pass/struct-pattern-matching.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs?ref=8b71b6415dd16dc694bc7d3b1a99d0116b6a0cee", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,4 +18,8 @@ pub fn main() {\n     match a {\n         Foo { x: x, y: y } => println!(\"yes, {}, {}\", x, y)\n     }\n+\n+    match a {\n+        Foo { .. } => ()\n+    }\n }"}]}