{"sha": "77723d24a831f9a062e210cc964e4849c23df116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzIzZDI0YTgzMWY5YTA2MmUyMTBjYzk2NGU0ODQ5YzIzZGYxMTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-26T08:20:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-01T21:47:55Z"}, "message": "Implement an iterator for walking types rather than the old callback code.", "tree": {"sha": "4ae41db2e27b272ae54d774b42f1a55707fb4d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ae41db2e27b272ae54d774b42f1a55707fb4d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77723d24a831f9a062e210cc964e4849c23df116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77723d24a831f9a062e210cc964e4849c23df116", "html_url": "https://github.com/rust-lang/rust/commit/77723d24a831f9a062e210cc964e4849c23df116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77723d24a831f9a062e210cc964e4849c23df116/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "html_url": "https://github.com/rust-lang/rust/commit/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4"}], "stats": {"total": 266, "additions": 218, "deletions": 48}, "files": [{"sha": "3d99a880f68de87bfdb90c65464ebbe1e06afa04", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=77723d24a831f9a062e210cc964e4849c23df116", "patch": "@@ -98,6 +98,7 @@ pub mod middle {\n     pub mod traits;\n     pub mod ty;\n     pub mod ty_fold;\n+    pub mod ty_walk;\n     pub mod weak_lang_items;\n }\n "}, {"sha": "c84217d956ffaae098052ad69bce8734beed55a8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 51, "deletions": 46, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=77723d24a831f9a062e210cc964e4849c23df116", "patch": "@@ -59,6 +59,7 @@ use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n use middle::ty_fold::{mod, TypeFoldable, TypeFolder};\n+use middle::ty_walk::TypeWalker;\n use util::ppaux::{note_and_explain_region, bound_region_ptr_to_string};\n use util::ppaux::{trait_store_to_string, ty_to_string};\n use util::ppaux::{Repr, UserString};\n@@ -2806,55 +2807,59 @@ pub fn mk_param_from_def<'tcx>(cx: &ctxt<'tcx>, def: &TypeParameterDef) -> Ty<'t\n \n pub fn mk_open<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> { mk_t(cx, ty_open(ty)) }\n \n-pub fn walk_ty<'tcx, F>(ty: Ty<'tcx>, mut f: F) where\n-    F: FnMut(Ty<'tcx>),\n+impl<'tcx> TyS<'tcx> {\n+    /// Iterator that walks `self` and any types reachable from\n+    /// `self`, in depth-first order. Note that just walks the types\n+    /// that appear in `self`, it does not descend into the fields of\n+    /// structs or variants. For example:\n+    ///\n+    /// ```notrust\n+    /// int => { int }\n+    /// Foo<Bar<int>> => { Foo<Bar<int>>, Bar<int>, int }\n+    /// [int] => { [int], int }\n+    /// ```\n+    pub fn walk(&'tcx self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self)\n+    }\n+\n+    /// Iterator that walks types reachable from `self`, in\n+    /// depth-first order. Note that this is a shallow walk. For\n+    /// example:\n+    ///\n+    /// ```notrust\n+    /// int => { }\n+    /// Foo<Bar<int>> => { Bar<int>, int }\n+    /// [int] => { int }\n+    /// ```\n+    pub fn walk_children(&'tcx self) -> TypeWalker<'tcx> {\n+        // Walks type reachable from `self` but not `self\n+        let mut walker = self.walk();\n+        let r = walker.next();\n+        assert_eq!(r, Some(self));\n+        walker\n+    }\n+}\n+\n+pub fn walk_ty<'tcx, F>(ty_root: Ty<'tcx>, mut f: F)\n+    where F: FnMut(Ty<'tcx>),\n {\n-    maybe_walk_ty(ty, |ty| { f(ty); true });\n+    for ty in ty_root.walk() {\n+        f(ty);\n+    }\n }\n \n-pub fn maybe_walk_ty<'tcx, F>(ty: Ty<'tcx>, mut f: F) where F: FnMut(Ty<'tcx>) -> bool {\n-    // FIXME(#19596) This is a workaround, but there should be a better way to do this\n-    fn maybe_walk_ty_<'tcx, F>(ty: Ty<'tcx>, f: &mut F) where F: FnMut(Ty<'tcx>) -> bool {\n-        if !(*f)(ty) {\n-            return;\n-        }\n-        match ty.sty {\n-            ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n-            ty_str | ty_infer(_) | ty_param(_) | ty_err => {}\n-            ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty_(ty, f),\n-            ty_ptr(ref tm) | ty_rptr(_, ref tm) => {\n-                maybe_walk_ty_(tm.ty, f);\n-            }\n-            ty_trait(box TyTrait { ref principal, .. }) => {\n-                for subty in principal.0.substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_projection(ProjectionTy { ref trait_ref, .. }) => {\n-                for subty in trait_ref.substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_enum(_, ref substs) |\n-            ty_struct(_, ref substs) |\n-            ty_unboxed_closure(_, _, ref substs) => {\n-                for subty in substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_tup(ref ts) => { for tt in ts.iter() { maybe_walk_ty_(*tt, f); } }\n-            ty_bare_fn(_, ref ft) => {\n-                for a in ft.sig.0.inputs.iter() { maybe_walk_ty_(*a, f); }\n-                if let ty::FnConverging(output) = ft.sig.0.output {\n-                    maybe_walk_ty_(output, f);\n-                }\n-            }\n-            ty_closure(ref ft) => {\n-                for a in ft.sig.0.inputs.iter() { maybe_walk_ty_(*a, f); }\n-                if let ty::FnConverging(output) = ft.sig.0.output {\n-                    maybe_walk_ty_(output, f);\n-                }\n-            }\n+/// Walks `ty` and any types appearing within `ty`, invoking the\n+/// callback `f` on each type. If the callback returns false, then the\n+/// children of the current type are ignored.\n+///\n+/// Note: prefer `ty.walk()` where possible.\n+pub fn maybe_walk_ty<'tcx,F>(ty_root: Ty<'tcx>, mut f: F)\n+    where F : FnMut(Ty<'tcx>) -> bool\n+{\n+    let mut walker = ty_root.walk();\n+    while let Some(ty) = walker.next() {\n+        if !f(ty) {\n+            walker.skip_current_subtree();\n         }\n     }\n "}, {"sha": "406ebf4bc38a40288f08ac3e234b653e9a0dd6b4", "filename": "src/librustc/middle/ty_walk.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=77723d24a831f9a062e210cc964e4849c23df116", "patch": "@@ -0,0 +1,112 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! An iterator over the type substructure.\n+\n+use middle::ty::{mod, Ty};\n+use std::iter::Iterator;\n+\n+pub struct TypeWalker<'tcx> {\n+    stack: Vec<Ty<'tcx>>,\n+    last_subtree: uint,\n+}\n+\n+impl<'tcx> TypeWalker<'tcx> {\n+    pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n+        TypeWalker { stack: vec!(ty), last_subtree: 1, }\n+    }\n+\n+    fn push_subtypes(&mut self, parent_ty: Ty<'tcx>) {\n+        match parent_ty.sty {\n+            ty::ty_bool | ty::ty_char | ty::ty_int(_) | ty::ty_uint(_) | ty::ty_float(_) |\n+            ty::ty_str | ty::ty_infer(_) | ty::ty_param(_) | ty::ty_err => {\n+            }\n+            ty::ty_uniq(ty) | ty::ty_vec(ty, _) | ty::ty_open(ty) => {\n+                self.stack.push(ty);\n+            }\n+            ty::ty_ptr(ref mt) | ty::ty_rptr(_, ref mt) => {\n+                self.stack.push(mt.ty);\n+            }\n+            ty::ty_projection(ref data) => {\n+                self.push_reversed(data.trait_ref.substs.types.as_slice());\n+            }\n+            ty::ty_trait(box ty::TyTrait { ref principal, .. }) => {\n+                self.push_reversed(principal.substs().types.as_slice());\n+            }\n+            ty::ty_enum(_, ref substs) |\n+            ty::ty_struct(_, ref substs) |\n+            ty::ty_unboxed_closure(_, _, ref substs) => {\n+                self.push_reversed(substs.types.as_slice());\n+            }\n+            ty::ty_tup(ref ts) => {\n+                self.push_reversed(ts.as_slice());\n+            }\n+            ty::ty_bare_fn(_, ref ft) => {\n+                self.push_sig_subtypes(&ft.sig);\n+            }\n+            ty::ty_closure(ref ft) => {\n+                self.push_sig_subtypes(&ft.sig);\n+            }\n+        }\n+    }\n+\n+    fn push_sig_subtypes(&mut self, sig: &ty::PolyFnSig<'tcx>) {\n+        match sig.0.output {\n+            ty::FnConverging(output) => { self.stack.push(output); }\n+            ty::FnDiverging => { }\n+        }\n+        self.push_reversed(sig.0.inputs.as_slice());\n+    }\n+\n+    fn push_reversed(&mut self, tys: &[Ty<'tcx>]) {\n+        // We push slices on the stack in reverse order so as to\n+        // maintain a pre-order traversal. As of the time of this\n+        // writing, the fact that the traversal is pre-order is not\n+        // known to be significant to any code, but it seems like the\n+        // natural order one would expect (basically, the order of the\n+        // types as they are written).\n+        for &ty in tys.iter().rev() {\n+            self.stack.push(ty);\n+        }\n+    }\n+\n+    /// Skips the subtree of types corresponding to the last type\n+    /// returned by `next()`.\n+    ///\n+    /// Example: Imagine you are walking `Foo<Bar<int>, uint>`.\n+    ///\n+    /// ```rust\n+    /// let mut iter: TypeWalker = ...;\n+    /// iter.next(); // yields Foo\n+    /// iter.next(); // yields Bar<int>\n+    /// iter.skip_current_subtree(); // skips int\n+    /// iter.next(); // yields uint\n+    /// ```\n+    pub fn skip_current_subtree(&mut self) {\n+        self.stack.truncate(self.last_subtree);\n+    }\n+}\n+\n+impl<'tcx> Iterator<Ty<'tcx>> for TypeWalker<'tcx> {\n+    fn next(&mut self) -> Option<Ty<'tcx>> {\n+        debug!(\"next(): stack={}\", self.stack);\n+        match self.stack.pop() {\n+            None => {\n+                return None;\n+            }\n+            Some(ty) => {\n+                self.last_subtree = self.stack.len();\n+                self.push_subtypes(ty);\n+                debug!(\"next: stack={}\", self.stack);\n+                Some(ty)\n+            }\n+        }\n+    }\n+}"}, {"sha": "eddcc75006899bf74bfda8acc8cd238ae283bd1b", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77723d24a831f9a062e210cc964e4849c23df116/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=77723d24a831f9a062e210cc964e4849c23df116", "patch": "@@ -34,8 +34,6 @@ use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n use syntax::parse::token;\n \n-use arena::TypedArena;\n-\n struct Env<'a, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'tcx>,\n }\n@@ -831,3 +829,57 @@ fn subst_region_renumber_region() {\n         assert_eq!(t_substituted, t_expected);\n     })\n }\n+\n+#[test]\n+fn walk_ty() {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let tcx = env.infcx.tcx;\n+        let int_ty = tcx.types.int;\n+        let uint_ty = tcx.types.uint;\n+        let tup1_ty = ty::mk_tup(tcx, vec!(int_ty, uint_ty, int_ty, uint_ty));\n+        let tup2_ty = ty::mk_tup(tcx, vec!(tup1_ty, tup1_ty, uint_ty));\n+        let uniq_ty = ty::mk_uniq(tcx, tup2_ty);\n+        let walked: Vec<_> = uniq_ty.walk().collect();\n+        assert_eq!(vec!(uniq_ty,\n+                        tup2_ty,\n+                        tup1_ty, int_ty, uint_ty, int_ty, uint_ty,\n+                        tup1_ty, int_ty, uint_ty, int_ty, uint_ty,\n+                        uint_ty),\n+                   walked);\n+    })\n+}\n+\n+#[test]\n+fn walk_ty_skip_subtree() {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let tcx = env.infcx.tcx;\n+        let int_ty = tcx.types.int;\n+        let uint_ty = tcx.types.uint;\n+        let tup1_ty = ty::mk_tup(tcx, vec!(int_ty, uint_ty, int_ty, uint_ty));\n+        let tup2_ty = ty::mk_tup(tcx, vec!(tup1_ty, tup1_ty, uint_ty));\n+        let uniq_ty = ty::mk_uniq(tcx, tup2_ty);\n+\n+        // types we expect to see (in order), plus a boolean saying\n+        // whether to skip the subtree.\n+        let mut expected = vec!((uniq_ty, false),\n+                                (tup2_ty, false),\n+                                (tup1_ty, false),\n+                                (int_ty, false),\n+                                (uint_ty, false),\n+                                (int_ty, false),\n+                                (uint_ty, false),\n+                                (tup1_ty, true), // skip the int/uint/int/uint\n+                                (uint_ty, false));\n+        expected.reverse();\n+\n+        let mut walker = uniq_ty.walk();\n+        while let Some(t) = walker.next() {\n+            debug!(\"walked to {}\", t);\n+            let (expected_ty, skip) = expected.pop().unwrap();\n+            assert_eq!(t, expected_ty);\n+            if skip { walker.skip_current_subtree(); }\n+        }\n+\n+        assert!(expected.is_empty());\n+    })\n+}"}]}