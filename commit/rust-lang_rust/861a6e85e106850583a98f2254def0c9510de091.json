{"sha": "861a6e85e106850583a98f2254def0c9510de091", "node_id": "C_kwDOAAsO6NoAKDg2MWE2ZTg1ZTEwNjg1MDU4M2E5OGYyMjU0ZGVmMGM5NTEwZGUwOTE", "commit": {"author": {"name": "Dean Li", "email": "deantvv@gmail.com", "date": "2021-11-28T07:19:01Z"}, "committer": {"name": "Dean Li", "email": "deantvv@gmail.com", "date": "2021-11-28T07:19:01Z"}, "message": "Add spectral_norm example from packed_simd", "tree": {"sha": "2506476c728ca9ea177239abfe31728ea9eae745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2506476c728ca9ea177239abfe31728ea9eae745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861a6e85e106850583a98f2254def0c9510de091", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTKggUpOUDuAEGPK8FQnAIWPIGlLAUCYaMtlgAKCRBQnAIWPIGl\nLI0BAQDEMeqtlCKB/gr0L8XeWxHNLtX/k2QbzoBRYz0WlOrNIwEA1GQESqpv6+8S\nXX0AngxjvZxzCZIUJJsdYPnkQ4+8xAI=\n=czOP\n-----END PGP SIGNATURE-----", "payload": "tree 2506476c728ca9ea177239abfe31728ea9eae745\nparent b2dac7124b2aa3951c7f564015d66f0fff6488aa\nauthor Dean Li <deantvv@gmail.com> 1638083941 +0800\ncommitter Dean Li <deantvv@gmail.com> 1638083941 +0800\n\nAdd spectral_norm example from packed_simd\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861a6e85e106850583a98f2254def0c9510de091", "html_url": "https://github.com/rust-lang/rust/commit/861a6e85e106850583a98f2254def0c9510de091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861a6e85e106850583a98f2254def0c9510de091/comments", "author": {"login": "deantvv", "id": 79362869, "node_id": "MDQ6VXNlcjc5MzYyODY5", "avatar_url": "https://avatars.githubusercontent.com/u/79362869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deantvv", "html_url": "https://github.com/deantvv", "followers_url": "https://api.github.com/users/deantvv/followers", "following_url": "https://api.github.com/users/deantvv/following{/other_user}", "gists_url": "https://api.github.com/users/deantvv/gists{/gist_id}", "starred_url": "https://api.github.com/users/deantvv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deantvv/subscriptions", "organizations_url": "https://api.github.com/users/deantvv/orgs", "repos_url": "https://api.github.com/users/deantvv/repos", "events_url": "https://api.github.com/users/deantvv/events{/privacy}", "received_events_url": "https://api.github.com/users/deantvv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "deantvv", "id": 79362869, "node_id": "MDQ6VXNlcjc5MzYyODY5", "avatar_url": "https://avatars.githubusercontent.com/u/79362869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deantvv", "html_url": "https://github.com/deantvv", "followers_url": "https://api.github.com/users/deantvv/followers", "following_url": "https://api.github.com/users/deantvv/following{/other_user}", "gists_url": "https://api.github.com/users/deantvv/gists{/gist_id}", "starred_url": "https://api.github.com/users/deantvv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deantvv/subscriptions", "organizations_url": "https://api.github.com/users/deantvv/orgs", "repos_url": "https://api.github.com/users/deantvv/repos", "events_url": "https://api.github.com/users/deantvv/events{/privacy}", "received_events_url": "https://api.github.com/users/deantvv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2dac7124b2aa3951c7f564015d66f0fff6488aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dac7124b2aa3951c7f564015d66f0fff6488aa", "html_url": "https://github.com/rust-lang/rust/commit/b2dac7124b2aa3951c7f564015d66f0fff6488aa"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "c515dad4deabd455396d7d17ed4a30859ce1252b", "filename": "crates/core_simd/examples/spectral_norm.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/861a6e85e106850583a98f2254def0c9510de091/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a6e85e106850583a98f2254def0c9510de091/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs?ref=861a6e85e106850583a98f2254def0c9510de091", "patch": "@@ -0,0 +1,77 @@\n+#![feature(portable_simd)]\n+\n+use core_simd::simd::*;\n+\n+fn a(i: usize, j: usize) -> f64 {\n+    ((i + j) * (i + j + 1) / 2 + i + 1) as f64\n+}\n+\n+fn mult_av(v: &[f64], out: &mut [f64]) {\n+    assert!(v.len() == out.len());\n+    assert!(v.len() % 2 == 0);\n+\n+    for (i, out) in out.iter_mut().enumerate() {\n+        let mut sum = f64x2::splat(0.0);\n+\n+        let mut j = 0;\n+        while j < v.len() {\n+            let b = f64x2::from_slice(&v[j..]);\n+            let a = f64x2::from_array([a(i, j), a(i, j + 1)]);\n+            sum += b / a;\n+            j += 2\n+        }\n+        *out = sum.horizontal_sum();\n+    }\n+}\n+\n+fn mult_atv(v: &[f64], out: &mut [f64]) {\n+    assert!(v.len() == out.len());\n+    assert!(v.len() % 2 == 0);\n+\n+    for (i, out) in out.iter_mut().enumerate() {\n+        let mut sum = f64x2::splat(0.0);\n+\n+        let mut j = 0;\n+        while j < v.len() {\n+            let b = f64x2::from_slice(&v[j..]);\n+            let a = f64x2::from_array([a(j, i), a(j + 1, i)]);\n+            sum += b / a;\n+            j += 2\n+        }\n+        *out = sum.horizontal_sum();\n+    }\n+}\n+\n+fn mult_atav(v: &[f64], out: &mut [f64], tmp: &mut [f64]) {\n+    mult_av(v, tmp);\n+    mult_atv(tmp, out);\n+}\n+\n+pub fn spectral_norm(n: usize) -> f64 {\n+    assert!(n % 2 == 0, \"only even lengths are accepted\");\n+\n+    let mut u = vec![1.0; n];\n+    let mut v = u.clone();\n+    let mut tmp = u.clone();\n+\n+    for _ in 0..10 {\n+        mult_atav(&u, &mut v, &mut tmp);\n+        mult_atav(&v, &mut u, &mut tmp);\n+    }\n+    (dot(&u, &v) / dot(&v, &v)).sqrt()\n+}\n+\n+fn dot(x: &[f64], y: &[f64]) -> f64 {\n+    // This is auto-vectorized:\n+    x.iter().zip(y).map(|(&x, &y)| x * y).sum()\n+}\n+\n+#[cfg(test)]\n+#[test]\n+fn test() {\n+    assert_eq!(&format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n+}\n+\n+fn main() {\n+    // Empty main to make cargo happy\n+}"}]}