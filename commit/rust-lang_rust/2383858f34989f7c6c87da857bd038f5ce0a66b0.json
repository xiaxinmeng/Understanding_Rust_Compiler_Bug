{"sha": "2383858f34989f7c6c87da857bd038f5ce0a66b0", "node_id": "C_kwDOAAsO6NoAKDIzODM4NThmMzQ5ODlmN2M2Yzg3ZGE4NTdiZDAzOGY1Y2UwYTY2YjA", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-16T02:14:17Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T00:18:24Z"}, "message": "When finding a match expr with a single arm that requires more, suggest it\n\nGiven\n\n```rust\nmatch Some(42) {\n    Some(0) => {}\n}\n```\n\nsuggest\n\n```rust\nmatch Some(42) {\n    Some(0) => {}\n    None | Some(_) => todo!(),\n}\n```", "tree": {"sha": "fae94544bea7a6888068b41bb51c1983aeceb813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae94544bea7a6888068b41bb51c1983aeceb813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2383858f34989f7c6c87da857bd038f5ce0a66b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2383858f34989f7c6c87da857bd038f5ce0a66b0", "html_url": "https://github.com/rust-lang/rust/commit/2383858f34989f7c6c87da857bd038f5ce0a66b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2383858f34989f7c6c87da857bd038f5ce0a66b0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a3830f245d84672db133208c73756eb8778964", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a3830f245d84672db133208c73756eb8778964", "html_url": "https://github.com/rust-lang/rust/commit/02a3830f245d84672db133208c73756eb8778964"}], "stats": {"total": 964, "additions": 805, "deletions": 159}, "files": [{"sha": "f1c2ec08c3cc505d14e59b04b0726c975023b874", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -589,6 +589,21 @@ fn non_exhaustive_match<'p, 'tcx>(\n                 ),\n             ));\n         }\n+        [only] => {\n+            let pre_indentation = if let (Some(snippet), true) = (\n+                sm.indentation_before(only.span),\n+                sm.is_multiline(sp.shrink_to_hi().with_hi(only.span.lo())),\n+            ) {\n+                format!(\"\\n{}\", snippet)\n+            } else {\n+                \" \".to_string()\n+            };\n+            let comma = if matches!(only.body.kind, hir::ExprKind::Block(..)) { \"\" } else { \",\" };\n+            suggestion = Some((\n+                only.span.shrink_to_hi(),\n+                format!(\"{}{}{} => todo!()\", comma, pre_indentation, pattern),\n+            ));\n+        }\n         _ => {}\n     }\n "}, {"sha": "5e66d1318fb0a4022a75fb2d0de34fa18eae9021", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-88331.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -8,7 +8,11 @@ LL |     move |i| match msg_type {\n    |                    ^^^^^^^^ patterns `Opcode(0_u8)` and `Opcode(2_u8..=u8::MAX)` not covered\n    |\n    = note: the matched value is of type `Opcode`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Opcode::OP1 => unimplemented!(),\n+LL ~         Opcode(0_u8) | Opcode(2_u8..=u8::MAX) => todo!(),\n+   |\n \n error[E0004]: non-exhaustive patterns: `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n   --> $DIR/issue-88331.rs:27:20\n@@ -20,7 +24,11 @@ LL |     move |i| match msg_type {\n    |                    ^^^^^^^^ patterns `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n    |\n    = note: the matched value is of type `Opcode2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Opcode2::OP2=> unimplemented!(),\n+LL ~         Opcode2(Opcode(0_u8)) | Opcode2(Opcode(2_u8..=u8::MAX)) => todo!(),\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e5fdbc3d5fbab9fc93b2ef2fb394877741fd87d", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -11,7 +11,10 @@ LL |     let _b = || { match l1 { L1::A => () } };\n    |                         ^^ pattern `B` not covered\n    |\n    = note: the matched value is of type `L1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     let _b = || { match l1 { L1::A => (), B => todo!() } };\n+   |                                         ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/non-exhaustive-match.rs:37:25"}, {"sha": "67f6abdbc54ec12bb12bb76ce102f3934c07da72", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -12,7 +12,11 @@ LL |       match x {\n    |             ^ pattern `HastaLaVistaBaby` not covered\n    |\n    = note: the matched value is of type `Terminator`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Terminator::TalkToMyHand => {}\n+LL +         HastaLaVistaBaby => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "945afffee373381fec7f7cab8c88227dd3ead6e1", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -7,7 +7,11 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         0..=usize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n@@ -18,7 +22,11 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         isize::MIN..=isize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1cf267cf99a91dd6fe0bbc82aa378c84d4051a32", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 340, "deletions": 68, "changes": 408, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     m!(0f32, f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n@@ -14,7 +18,11 @@ LL |     m!(0f32, ..f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n@@ -23,7 +31,11 @@ LL |     m!('a', ..core::char::MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         '\\u{10ffff}' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n@@ -32,7 +44,11 @@ LL |     m!('a', ..ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'\\u{0}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n@@ -41,7 +57,11 @@ LL |     m!('a', ALMOST_MIN..);\n    |        ^^^ pattern `'\\u{0}'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         '\\u{0}' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n@@ -50,7 +70,11 @@ LL |     m!('a', ..=ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         '\\u{10ffff}' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n@@ -59,7 +83,11 @@ LL |     m!('a', ..=VAL | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         'b' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n@@ -68,7 +96,11 @@ LL |     m!('a', ..VAL_1 | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = note: the matched value is of type `char`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         'b' => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n@@ -77,7 +109,11 @@ LL |         m!(0, ..u8::MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n@@ -86,7 +122,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `254_u8..=u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         254_u8..=u8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n@@ -95,7 +135,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n@@ -104,7 +148,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n@@ -113,7 +161,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n@@ -122,7 +174,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n@@ -131,7 +187,11 @@ LL |         m!(0, ..u16::MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n@@ -140,7 +200,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `65534_u16..=u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         65534_u16..=u16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n@@ -149,7 +213,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u16 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n@@ -158,7 +226,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n@@ -167,7 +239,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u16 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n@@ -176,7 +252,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u16 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n@@ -185,7 +265,11 @@ LL |         m!(0, ..u32::MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n@@ -194,7 +278,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `4294967294_u32..=u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         4294967294_u32..=u32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n@@ -203,7 +291,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u32 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n@@ -212,7 +304,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n@@ -221,7 +317,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u32 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n@@ -230,7 +330,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u32 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n@@ -239,7 +343,11 @@ LL |         m!(0, ..u64::MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n@@ -248,7 +356,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         18446744073709551614_u64..=u64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n@@ -257,7 +369,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u64 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n@@ -266,7 +382,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n@@ -275,7 +395,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u64 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n@@ -284,7 +408,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u64 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n@@ -293,7 +421,11 @@ LL |         m!(0, ..u128::MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n@@ -302,7 +434,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         340282366920938463463374607431768211454_u128..=u128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n@@ -311,7 +447,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u128 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n@@ -320,7 +460,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n@@ -329,7 +473,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u128 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n@@ -338,7 +486,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_u128 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n@@ -347,7 +499,11 @@ LL |         m!(0, ..i8::MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n@@ -356,7 +512,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `126_i8..=i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         126_i8..=i8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n@@ -365,7 +525,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i8::MIN` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n@@ -374,7 +538,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n@@ -383,7 +551,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n@@ -392,7 +564,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n@@ -401,7 +577,11 @@ LL |         m!(0, ..i16::MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n@@ -410,7 +590,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `32766_i16..=i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         32766_i16..=i16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i16::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n@@ -419,7 +603,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i16::MIN` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i16::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n@@ -428,7 +616,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i16::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n@@ -437,7 +629,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i16 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n@@ -446,7 +642,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n    = note: the matched value is of type `i16`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i16 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n@@ -455,7 +655,11 @@ LL |         m!(0, ..i32::MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n@@ -464,7 +668,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `2147483646_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         2147483646_i32..=i32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i32::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n@@ -473,7 +681,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i32::MIN` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i32::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n@@ -482,7 +694,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i32::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n@@ -491,7 +707,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i32 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n@@ -500,7 +720,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i32 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n@@ -509,7 +733,11 @@ LL |         m!(0, ..i64::MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n@@ -518,7 +746,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         9223372036854775806_i64..=i64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i64::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n@@ -527,7 +759,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i64::MIN` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i64::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n@@ -536,7 +772,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i64::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n@@ -545,7 +785,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i64 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n@@ -554,7 +798,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n    = note: the matched value is of type `i64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i64 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n@@ -563,7 +811,11 @@ LL |         m!(0, ..i128::MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n@@ -572,7 +824,11 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         170141183460469231731687303715884105726_i128..=i128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i128::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n@@ -581,7 +837,11 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i128::MIN` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i128::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n@@ -590,7 +850,11 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n@@ -599,7 +863,11 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i128 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n@@ -608,7 +876,11 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n    = note: the matched value is of type `i128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         43_i128 => todo!() }\n+   |\n \n error: aborting due to 68 previous errors\n "}, {"sha": "24e37d0851a1903a6b1c8d6d5d5723ae7fe270a7", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -11,7 +11,10 @@ LL |     match l { L::A => () };\n    |           ^ pattern `B` not covered\n    |\n    = note: the matched value is of type `L`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     match l { L::A => (), B => todo!() };\n+   |                         ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/match_non_exhaustive.rs:28:11"}, {"sha": "c99a6fd2533df9d0d04764754c1ab499fd5daf84", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2_u8..=u8::MAX, _)` not covered\n    |\n    = note: the matched value is of type `(u8, u8)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (0 | 1, 2 | 3) => {}\n+LL +         (2_u8..=u8::MAX, _) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `((4_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:9:11\n@@ -14,7 +18,11 @@ LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4_u8..=u8::MAX))` not covered\n    |\n    = note: the matched value is of type `((u8,),)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ((0 | 1,) | (2 | 3,),) => {}\n+LL +         ((4_u8..=u8::MAX)) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `(Some(2_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:13:11\n@@ -23,7 +31,11 @@ LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2_u8..=u8::MAX))` not covered\n    |\n    = note: the matched value is of type `(Option<u8>,)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (None | Some(0 | 1),) => {}\n+LL +         (Some(2_u8..=u8::MAX)) => todo!()\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c38e3088d2e51c5ff0498256e40ec561306bf30b", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -19,7 +19,11 @@ LL |     match 0 {\n    |           ^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         0 | (1 | 2) => {}\n+LL +         i32::MIN..=-1_i32 | 3_i32..=i32::MAX => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a93d6bd57b60ddaad8cdfc1dcaa7b8d73ca6daa5", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -33,7 +33,11 @@ LL |     B,\n    |     - not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::A => {}\n+LL +         B | _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:25:11"}, {"sha": "7235ef3fd9054a5bdded145e896e353a6b8a6431", "filename": "src/test/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -155,7 +155,11 @@ LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n   --> $DIR/empty-match.rs:88:24\n@@ -167,7 +171,11 @@ LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n    = note: the matched value is of type `NonEmptyStruct1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyStruct1 => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n   --> $DIR/empty-match.rs:89:24\n@@ -179,7 +187,11 @@ LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n    = note: the matched value is of type `NonEmptyStruct2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyStruct2(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/empty-match.rs:90:24\n@@ -193,7 +205,11 @@ LL |       match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = note: the matched value is of type `NonEmptyUnion1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyUnion1 { .. } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/empty-match.rs:91:24\n@@ -208,7 +224,11 @@ LL |       match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = note: the matched value is of type `NonEmptyUnion2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyUnion2 { .. } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n@@ -223,7 +243,11 @@ LL |       match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             Foo(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n@@ -240,7 +264,11 @@ LL |       match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             Foo(_) | Bar => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n@@ -254,7 +282,11 @@ LL |       match_guarded_arm!(NonEmptyEnum5::V1);\n    |                          ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum5`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             _ => todo!()\n+   |\n \n error: aborting due to 22 previous errors\n "}, {"sha": "7235ef3fd9054a5bdded145e896e353a6b8a6431", "filename": "src/test/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -155,7 +155,11 @@ LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n   --> $DIR/empty-match.rs:88:24\n@@ -167,7 +171,11 @@ LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n    = note: the matched value is of type `NonEmptyStruct1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyStruct1 => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n   --> $DIR/empty-match.rs:89:24\n@@ -179,7 +187,11 @@ LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n    = note: the matched value is of type `NonEmptyStruct2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyStruct2(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/empty-match.rs:90:24\n@@ -193,7 +205,11 @@ LL |       match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = note: the matched value is of type `NonEmptyUnion1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyUnion1 { .. } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/empty-match.rs:91:24\n@@ -208,7 +224,11 @@ LL |       match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = note: the matched value is of type `NonEmptyUnion2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             NonEmptyUnion2 { .. } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n@@ -223,7 +243,11 @@ LL |       match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             Foo(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n@@ -240,7 +264,11 @@ LL |       match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             Foo(_) | Bar => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n@@ -254,7 +282,11 @@ LL |       match_guarded_arm!(NonEmptyEnum5::V1);\n    |                          ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = note: the matched value is of type `NonEmptyEnum5`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             _ if false => {}\n+LL +             _ => todo!()\n+   |\n \n error: aborting due to 22 previous errors\n "}, {"sha": "bbeac5959f0592b1ceef297c7c6cdfb53aace75e", "filename": "src/test/ui/pattern/usefulness/floats.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match 0.0 {\n    |           ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f64`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       0.0..=1.0 => {}\n+LL +       _ => todo!()\n+   |\n \n error: unreachable pattern\n   --> $DIR/floats.rs:16:7"}, {"sha": "8734d0f04ac4451ecc0ad4e8ca50fe1af4732b11", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     m!(0u8, 0..255);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:48:8\n@@ -14,7 +18,11 @@ LL |     m!(0u8, 0..=254);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/exhaustiveness.rs:49:8\n@@ -23,7 +31,11 @@ LL |     m!(0u8, 1..=255);\n    |        ^^^ pattern `0_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `42_u8` not covered\n   --> $DIR/exhaustiveness.rs:50:8\n@@ -32,7 +44,11 @@ LL |     m!(0u8, 0..42 | 43..=255);\n    |        ^^^ pattern `42_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         42_u8 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:51:8\n@@ -41,7 +57,11 @@ LL |     m!(0i8, -128..127);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:52:8\n@@ -50,7 +70,11 @@ LL |     m!(0i8, -128..=126);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/exhaustiveness.rs:53:8\n@@ -59,7 +83,11 @@ LL |     m!(0i8, -127..=127);\n    |        ^^^ pattern `i8::MIN` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         i8::MIN => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_i8` not covered\n   --> $DIR/exhaustiveness.rs:54:11\n@@ -77,7 +105,11 @@ LL |     m!(0u128, 0..=ALMOST_MAX);\n    |        ^^^^^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         u128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n   --> $DIR/exhaustiveness.rs:60:8\n@@ -86,7 +118,11 @@ LL |     m!(0u128, 0..=4);\n    |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         5_u128..=u128::MAX => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/exhaustiveness.rs:61:8\n@@ -95,7 +131,11 @@ LL |     m!(0u128, 1..=u128::MAX);\n    |        ^^^^^ pattern `0_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         0_u128 => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n   --> $DIR/exhaustiveness.rs:69:11"}, {"sha": "574c9849dbbf9c903a04721ce8679ab1ca2679c3", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -7,7 +7,11 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         0 ..= usize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:17:11\n@@ -18,7 +22,11 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         isize::MIN ..= isize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:22:8\n@@ -29,7 +37,11 @@ LL |     m!(0usize, 0..=usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:24:8\n@@ -40,7 +52,11 @@ LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:26:8\n@@ -51,7 +67,11 @@ LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:28:8\n@@ -60,7 +80,11 @@ LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n    = note: the matched value is of type `(usize, bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         (_, _) => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:31:8\n@@ -71,7 +95,11 @@ LL |     m!(0isize, isize::MIN..=isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:33:8\n@@ -82,7 +110,11 @@ LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:35:8\n@@ -93,7 +125,11 @@ LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         _ => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:37:8\n@@ -102,7 +138,11 @@ LL |     m!((0isize, true), (isize::MIN..5, true)\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n    = note: the matched value is of type `(isize, bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         match $s { $($t)+ => {}\n+LL ~         (_, _) => todo!() }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:41:11"}, {"sha": "efef39c636f332dfe03d445fd9bb500f5647dd22", "filename": "src/test/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -7,7 +7,11 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         0..=usize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/precise_pointer_matching-message.rs:11:11\n@@ -18,7 +22,11 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         isize::MIN..=isize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e3c4d3ff785e8975a9af83d1ec22f9bd8097561d", "filename": "src/test/ui/pattern/usefulness/issue-30240.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = note: the matched value is of type `&str`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         \"hello\" => {}\n+LL +         &_ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/issue-30240.rs:6:11"}, {"sha": "87ae74c2040dbf596134fcc45e2aa592ef7121b0", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match (A, ()) {\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, ())`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (A, _) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n@@ -14,7 +18,11 @@ LL |     match (A, A) {\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, Enum)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (_, A) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n@@ -23,7 +31,11 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ((A, ()), _) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n@@ -32,7 +44,11 @@ LL |     match ((A, ()), A) {\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), Enum)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ((A, ()), _) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n@@ -41,7 +57,11 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ((A, _), _) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:31:11\n@@ -53,7 +73,11 @@ LL |     match S(A, ()) {\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n    |\n    = note: the matched value is of type `S`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         S(A, _) => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:35:11\n@@ -65,7 +89,11 @@ LL |     match (Sd { x: A, y: () }) {\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n    |\n    = note: the matched value is of type `Sd`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Sd { x: A, y: _ } => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11"}, {"sha": "e69f1dcc25381eb485cde3536bbdfd421f2d8d8a", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |         box NodeKind::Element(ed) => match ed.kind {\n    |                                            ^^^^^^^ pattern `box _` not covered\n    |\n    = note: the matched value is of type `Box<ElementKind>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~             box ElementKind::HTMLImageElement(ref d) if d.image.is_some() => { true }\n+LL +             box _ => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6e450a72d75ccec48a8208afa8d8e16fd8329ca6", "filename": "src/test/ui/pattern/usefulness/issue-40221.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -11,7 +11,11 @@ LL |       match proto {\n    |             ^^^^^ pattern `C(QA)` not covered\n    |\n    = note: the matched value is of type `P`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         P::C(PC::Q) => (),\n+LL ~         C(QA) => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8612607fa8bb031f31db8f45ede0b3d02f2fcaa3", "filename": "src/test/ui/pattern/usefulness/issue-50900.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -8,7 +8,11 @@ LL |     match Tag::ExifIFDPointer {\n    |           ^^^^^^^^^^^^^^^^^^^ pattern `Tag(Exif, _)` not covered\n    |\n    = note: the matched value is of type `Tag`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Tag::ExifIFDPointer => {}\n+LL +         Tag(Exif, _) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4913e6e9c9f6c7c3aa069064c184b1bdd24c25fe", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match buf {\n    |           ^^^ patterns `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..=u8::MAX, _, _, _]` not covered\n    |\n    = note: the matched value is of type `&[u8; 4]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         b\"AAAA\" => {}\n+LL +         &[0_u8..=64_u8, _, _, _] | &[66_u8..=u8::MAX, _, _, _] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n@@ -14,7 +18,11 @@ LL |     match buf {\n    |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         b\"AAAA\" => {}\n+LL +         _ => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "63fcd2a963870cf5daa20b337cad97161e77deb1", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,10 @@ LL |     match 0 { 1 => () }\n    |           ^ patterns `i32::MIN..=0_i32` and `2_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     match 0 { 1 => (), i32::MIN..=0_i32 | 2_i32..=i32::MAX => todo!() }\n+   |                      ++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n@@ -14,7 +17,10 @@ LL |     match 0 { 0 if false => () }\n    |           ^ pattern `_` not covered\n    |\n    = note: the matched value is of type `i32`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     match 0 { 0 if false => (), _ => todo!() }\n+   |                               ++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "275b0d3ec24b70670357aec260d25ae5b1059c7b", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -20,7 +20,11 @@ LL |       match e1 {\n    |             ^^ patterns `B` and `C` not covered\n    |\n    = note: the matched value is of type `E`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         E::A => {}\n+LL +         B | C => todo!()\n+   |\n \n error[E0005]: refutable pattern in local binding: `B` and `C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:36:9\n@@ -73,7 +77,11 @@ LL |       match e {\n    |             ^ patterns `&B` and `&C` not covered\n    |\n    = note: the matched value is of type `&E`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         E::A => {}\n+LL +         &B | &C => todo!()\n+   |\n \n error[E0005]: refutable pattern in local binding: `&B` and `&C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:44:9\n@@ -126,7 +134,11 @@ LL |       match e {\n    |             ^ patterns `&&mut &B` and `&&mut &C` not covered\n    |\n    = note: the matched value is of type `&&mut &E`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         E::A => {}\n+LL +         &&mut &B | &&mut &C => todo!()\n+   |\n \n error[E0005]: refutable pattern in local binding: `&&mut &B` and `&&mut &C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:9\n@@ -174,7 +186,11 @@ LL |       match e {\n    |             ^ pattern `None` not covered\n    |\n    = note: the matched value is of type `Opt`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Opt::Some(ref _x) => {}\n+LL +         None => todo!()\n+   |\n \n error[E0005]: refutable pattern in local binding: `None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:69:9"}, {"sha": "14370915b850d30c5db682c7c89636e21cb95b9c", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -11,7 +11,10 @@ LL |     match x { T::B => { } }\n    |           ^ pattern `A` not covered\n    |\n    = note: the matched value is of type `T`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     match x { T::B => { } A => todo!() }\n+   |                           ++++++++++++\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:8:11\n@@ -20,7 +23,11 @@ LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n    = note: the matched value is of type `bool`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       true => {}\n+LL +       false => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n   --> $DIR/non-exhaustive-match.rs:11:11\n@@ -34,7 +41,11 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = note: the matched value is of type `Option<i32>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       None => {}\n+LL +       Some(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n   --> $DIR/non-exhaustive-match.rs:14:11\n@@ -43,7 +54,11 @@ LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n    |\n    = note: the matched value is of type `(i32, i32, i32)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       (_, _, 4) => {}\n+LL +       (_, _, i32::MIN..=3_i32) | (_, _, 5_i32..=i32::MAX) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n   --> $DIR/non-exhaustive-match.rs:18:11\n@@ -67,7 +82,11 @@ LL |     match T::A {\n    |           ^^^^ pattern `B` not covered\n    |\n    = note: the matched value is of type `T`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       T::A => {}\n+LL +       B => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n   --> $DIR/non-exhaustive-match.rs:33:11"}, {"sha": "2cf0b320e15f713ae8ec513eecadd24c313e6916", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -46,7 +46,11 @@ LL |       match Direction::North {\n    |             ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n    |\n    = note: the matched value is of type `Direction`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Direction::North => (),\n+LL +         East | South | West => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:46:11\n@@ -60,7 +64,11 @@ LL |       match ExcessiveEnum::First {\n    |             ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n    |\n    = note: the matched value is of type `ExcessiveEnum`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ExcessiveEnum::First => (),\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:54:11\n@@ -95,7 +103,11 @@ LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered\n    |\n    = note: the matched value is of type `((), bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         ((), true) => (),\n+LL +         ((), false) => todo!()\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "1f6d305b344485ad22485142efc6650bbdd9e30d", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, _]` not covered\n    |\n    = note: the matched value is of type `&[bool; 2]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [true, .., true] => {}\n+LL +         &[false, _] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:12:11\n@@ -14,7 +18,11 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool; 3]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [true, .., true] => {}\n+LL +         &[false, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:16:11\n@@ -23,7 +31,11 @@ LL |     match s10 {\n    |           ^^^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool; 10]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [true, .., true] => {}\n+LL +         &[false, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:25:11\n@@ -59,7 +71,11 @@ LL |     match s {\n    |           ^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [] => {}\n+LL +         &[_, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:46:11\n@@ -122,7 +138,11 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         &[true] => {}\n+LL +         &[] | &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:89:11\n@@ -131,7 +151,11 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         CONST => {}\n+LL +         &[] | &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:93:11\n@@ -176,7 +200,11 @@ LL |     match s1 {\n    |           ^^ pattern `&[false]` not covered\n    |\n    = note: the matched value is of type `&[bool; 1]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         CONST1 => {}\n+LL +         &[false] => todo!()\n+   |\n \n error: aborting due to 20 previous errors\n "}, {"sha": "5897bb4177a7a5902e1f9acb605df26387804baa", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -10,7 +10,11 @@ LL |     Stable2,\n    |     ------- not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::Stable => {}\n+LL +         Stable2 | _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/stable-gated-patterns.rs:13:11"}, {"sha": "b83865d90c7458cd7085296ac55a8b5ade33e849", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match data {\n    |           ^^^^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         b\"\" => 1,\n+LL ~         &[_, ..] => todo!(),\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n   --> $DIR/type_polymorphic_byte_str_literals.rs:23:11"}, {"sha": "df5b2000728f3c44163938f5a86442e416ae6fcc", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -5,7 +5,11 @@ LL |     match sl {\n    |           ^^ pattern `&[]` not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [first, remainder @ ..] => {}\n+LL ~         &[] => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0811753cb0d2aaae5b3b29fe039042af35d7e318", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2383858f34989f7c6c87da857bd038f5ce0a66b0/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=2383858f34989f7c6c87da857bd038f5ce0a66b0", "patch": "@@ -10,7 +10,11 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = note: the matched value is of type `Result<u32, &Void>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Ok(n) => n,\n+LL ~         Err(_) => todo!(),\n+   |\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n@@ -65,7 +69,11 @@ LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[Void]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         &[] => (),\n+LL ~         &[_, ..] => todo!(),\n+   |\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:32:19\n@@ -79,7 +87,11 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = note: the matched value is of type `Result<u32, Void>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Ok(x) => x,\n+LL ~         Err(_) => todo!(),\n+   |\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:37:9"}]}