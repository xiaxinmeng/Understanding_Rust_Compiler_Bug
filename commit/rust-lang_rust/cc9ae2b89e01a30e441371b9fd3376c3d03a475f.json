{"sha": "cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "node_id": "C_kwDOAAsO6NoAKGNjOWFlMmI4OWUwMWEzMGU0NDEzNzFiOWZkMzM3NmMzZDAzYTQ3NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T15:35:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T15:35:10Z"}, "message": "Auto merge of #12149 - jonas-schievink:literally-just-a-literal, r=jonas-schievink\n\nfix: split float literal tokens at `.` to fix parsing of tuple field accesses\n\nThis introduces an `ast::FloatLiteral` node, changes the `FLOAT_LITERAL` token to `FLOAT_LITERAL_PART`, and splits any float literal at the `.` character, into a `FLOAT_LITERAL_PART`, and optional `DOT` and trailing `FLOAT_LITERAL_PART` token. The tokens are reassembled when passing them to a macro as a `tt::Literal`.\n\n~~A slight regression is introduced in how float literals are highlighted: the `.` is now highlighted as an operator. I've tried to fix this but couldn't figure out how to highlight the whole `ast::FloatLiteral` node as a unit.~~ This is fixed\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/1109\nFixes https://github.com/rust-lang/rust-analyzer/issues/10492\nFixes https://github.com/rust-lang/rust-analyzer/issues/12107\nFixes https://github.com/rust-lang/rust-analyzer/issues/10560\nFixes https://github.com/rust-lang/rust-analyzer/issues/11487", "tree": {"sha": "9c47f9e5a08d498f92ce51ec1b8a34066a48ef59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c47f9e5a08d498f92ce51ec1b8a34066a48ef59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "html_url": "https://github.com/rust-lang/rust/commit/cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dfd1cb572d8d4fd951237361e43ecddd9c9a852", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfd1cb572d8d4fd951237361e43ecddd9c9a852", "html_url": "https://github.com/rust-lang/rust/commit/7dfd1cb572d8d4fd951237361e43ecddd9c9a852"}, {"sha": "d974a0b8894209a041fb06c3c8713d7e8b91cbb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d974a0b8894209a041fb06c3c8713d7e8b91cbb7", "html_url": "https://github.com/rust-lang/rust/commit/d974a0b8894209a041fb06c3c8713d7e8b91cbb7"}], "stats": {"total": 625, "additions": 503, "deletions": 122}, "files": [{"sha": "84662aa27782d166eaf645dabad1b7d42872ee62", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -972,7 +972,7 @@ impl From<ast::LiteralKind> for Literal {\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n+                let ty = lit.suffix().and_then(|s| BuiltinFloat::from_suffix(&s));\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "687c54974823b9e32719fd33714681dedfa92444", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -4,10 +4,7 @@ use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n use mbe::{parse_exprs_with_sep, parse_to_token_tree};\n-use syntax::{\n-    ast::{self, AstToken},\n-    SmolStr,\n-};\n+use syntax::{ast, SmolStr};\n \n use crate::{db::AstDatabase, name, quote, ExpandError, ExpandResult, MacroCallId, MacroCallLoc};\n \n@@ -358,14 +355,7 @@ fn unreachable_expand(\n }\n \n fn unquote_str(lit: &tt::Literal) -> Option<String> {\n-    let lit = ast::make::tokens::literal(&lit.to_string());\n-    let token = ast::String::cast(lit)?;\n-    token.value().map(|it| it.into_owned())\n-}\n-\n-fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n-    let lit = ast::make::tokens::literal(&lit.to_string());\n-    let token = ast::ByteString::cast(lit)?;\n+    let token = ast::make::literal(&lit.to_string()).as_string()?;\n     token.value().map(|it| it.into_owned())\n }\n \n@@ -442,12 +432,16 @@ fn concat_bytes_expand(\n     for (i, t) in tt.token_trees.iter().enumerate() {\n         match t {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let token = ast::make::tokens::literal(&lit.to_string());\n-                match token.kind() {\n-                    syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n-                    syntax::SyntaxKind::BYTE_STRING => {\n-                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n-                        components.into_iter().for_each(|x| bytes.push(x.to_string()));\n+                let lit = ast::make::literal(&lit.to_string());\n+                match lit.kind() {\n+                    ast::LiteralKind::ByteString(s) => {\n+                        s.value()\n+                            .unwrap_or_default()\n+                            .into_iter()\n+                            .for_each(|x| bytes.push(x.to_string()));\n+                    }\n+                    ast::LiteralKind::Byte(_) => {\n+                        bytes.push(lit.to_string());\n                     }\n                     _ => {\n                         err.get_or_insert(mbe::ExpandError::UnexpectedToken.into());\n@@ -481,10 +475,10 @@ fn concat_bytes_expand_subtree(\n     for (ti, tt) in tree.token_trees.iter().enumerate() {\n         match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let lit = ast::make::tokens::literal(&lit.to_string());\n+                let lit = ast::make::literal(&lit.to_string());\n                 match lit.kind() {\n-                    syntax::SyntaxKind::BYTE | syntax::SyntaxKind::INT_NUMBER => {\n-                        bytes.push(lit.text().to_string())\n+                    ast::LiteralKind::IntNumber(_) | ast::LiteralKind::Byte(_) => {\n+                        bytes.push(lit.to_string());\n                     }\n                     _ => {\n                         return Err(mbe::ExpandError::UnexpectedToken.into());"}, {"sha": "4b8a7e782de6b5ec45389b2150dac904f2e39070", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -2733,3 +2733,14 @@ fn f() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn nested_tuple_index() {\n+    check_no_mismatches(\n+        r#\"\n+fn main() {\n+    let fld: i32 = ((0,),).0.0;\n+}\n+\"#,\n+    );\n+}"}, {"sha": "c660e8f8fa3267bbb328a58caaf329484d79de9e", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -785,4 +785,24 @@ fn main() {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn tuple_index_completion() {\n+        check(\n+            r#\"\n+struct I;\n+impl I {\n+    fn i_method(&self) {}\n+}\n+struct S((), I);\n+\n+fn f(s: S) {\n+    s.1.$0\n+}\n+\"#,\n+            expect![[r#\"\n+                me i_method() fn(&self)\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "cc2a4437000d344363d3dcc2aeb27e070c092109", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -5,7 +5,7 @@ mod format_like;\n use hir::{Documentation, HasAttrs};\n use ide_db::{imports::insert_use::ImportScope, ty_filter::TryEnum, SnippetCap};\n use syntax::{\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstNode, LiteralKind},\n     SyntaxKind::{EXPR_STMT, STMT_LIST},\n     TextRange, TextSize,\n };\n@@ -191,7 +191,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     if let ast::Expr::Literal(literal) = dot_receiver.clone() {\n-        if let Some(literal_text) = ast::String::cast(literal.token()) {\n+        if let LiteralKind::String(literal_text) = literal.kind() {\n             add_format_like_completions(acc, ctx, &dot_receiver, cap, &literal_text);\n         }\n     }"}, {"sha": "c1db8ce4a6cd8892d33f2a5b2777dd7efaa3ec0b", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -230,7 +230,7 @@ pub(crate) fn determine_location(\n                 let receiver = find_in_original_file(it.expr(), original_file);\n                 let receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) = &receiver {\n                     match l.kind() {\n-                        ast::LiteralKind::FloatNumber { .. } => l.token().text().ends_with('.'),\n+                        ast::LiteralKind::FloatNumber { .. } => l.to_string().ends_with('.'),\n                         _ => false,\n                     }\n                 } else {"}, {"sha": "bafbf6d9cc886c8e5f4d1ee429077d3ac76f3070", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -30,7 +30,15 @@ pub(super) fn token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Optio\n         INT_NUMBER if token.ancestors().nth(1).map(|it| it.kind()) == Some(FIELD_EXPR) => {\n             SymbolKind::Field.into()\n         }\n-        INT_NUMBER | FLOAT_NUMBER => HlTag::NumericLiteral.into(),\n+        INT_NUMBER | FLOAT_NUMBER_PART | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1\n+        | FLOAT_NUMBER_START_2 => HlTag::NumericLiteral.into(),\n+        DOT if matches!(\n+            token.prev_token().map(|n| n.kind()),\n+            Some(FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2)\n+        ) =>\n+        {\n+            HlTag::NumericLiteral.into()\n+        }\n         BYTE => HlTag::ByteLiteral.into(),\n         CHAR => HlTag::CharLiteral.into(),\n         IDENT if token.parent().and_then(ast::TokenTree::cast).is_some() => {"}, {"sha": "d7d6c79e3d34ac078baf5477c08159ca603f6ffe", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -119,13 +119,13 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234</span><span class=\"numeric_literal\">.</span><span class=\"numeric_literal\">56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "79fd1250e0e302893e1e291003bd04f59f59cff5", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -260,6 +260,31 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 IDENT => make_leaf!(Ident),\n                 UNDERSCORE => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n+                FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2 => {\n+                    // Reassemble a split-up float token.\n+                    let mut range = range;\n+                    let mut text = token.to_text(conv).to_string();\n+                    if kind == FLOAT_NUMBER_START_1 || kind == FLOAT_NUMBER_START_2 {\n+                        let (dot, dot_range) = conv.bump().unwrap();\n+                        text += &*dot.to_text(conv);\n+                        range = TextRange::new(range.start(), dot_range.end());\n+\n+                        if kind == FLOAT_NUMBER_START_2 {\n+                            let (tail, tail_range) = conv.bump().unwrap();\n+                            text += &*tail.to_text(conv);\n+                            range = TextRange::new(range.start(), tail_range.end());\n+                        }\n+                    }\n+\n+                    result.push(\n+                        tt::Leaf::from(tt::Literal {\n+                            id: conv.id_alloc().alloc(range, synth_id),\n+                            text: text.into(),\n+                        })\n+                        .into(),\n+                    );\n+                    continue;\n+                }\n                 k if k.is_literal() => make_leaf!(Literal),\n                 LIFETIME_IDENT => {\n                     let char_unit = TextSize::of('\\'');"}, {"sha": "958f6433206a22d60305fee447d6ab7ddbe81828", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -35,15 +35,13 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer) -> parser::Input {\n                         let is_negated = lit.text.starts_with('-');\n                         let inner_text = &lit.text[if is_negated { 1 } else { 0 }..];\n \n-                        let kind = parser::LexedStr::single_token(inner_text)\n-                            .map(|(kind, _error)| kind)\n-                            .filter(|kind| {\n-                                kind.is_literal()\n-                                    && (!is_negated || matches!(kind, FLOAT_NUMBER | INT_NUMBER))\n-                            })\n-                            .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &lit));\n-\n-                        res.push(kind);\n+                        let lexed_str = parser::LexedStr::new(inner_text);\n+                        if lexed_str.is_empty() {\n+                            panic!(\"failed to convert literal: {:?}\", lit);\n+                        }\n+                        for i in 0..lexed_str.len() {\n+                            res.push(lexed_str.kind(i));\n+                        }\n                     }\n                     tt::Leaf::Ident(ident) => match ident.text.as_ref() {\n                         \"_\" => res.push(T![_]),"}, {"sha": "92f3302538743e67fb632bbd23a604d6f3ff019e", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -39,6 +39,7 @@ mod generic_params;\n mod types;\n \n use crate::{\n+    grammar::expressions::FLOAT_LITERAL_FIRST,\n     parser::{CompletedMarker, Marker, Parser},\n     SyntaxKind::{self, *},\n     TokenSet, T,\n@@ -318,9 +319,15 @@ fn name_ref(p: &mut Parser) {\n }\n \n fn name_ref_or_index(p: &mut Parser) {\n-    assert!(p.at(IDENT) || p.at(INT_NUMBER));\n+    assert!(\n+        p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST)\n+    );\n     let m = p.start();\n-    p.bump_any();\n+    if p.at_ts(FLOAT_LITERAL_FIRST) {\n+        p.bump_remap(FLOAT_NUMBER_PART);\n+    } else {\n+        p.bump_any();\n+    }\n     m.complete(p, NAME_REF);\n }\n "}, {"sha": "290083b343495a3e2e2597027d0012424692da9e", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -3,7 +3,7 @@ mod atom;\n use super::*;\n \n pub(crate) use self::atom::{block_expr, match_arm_list};\n-pub(super) use self::atom::{literal, LITERAL_FIRST};\n+pub(super) use self::atom::{literal, FLOAT_LITERAL_FIRST, LITERAL_FIRST};\n \n #[derive(PartialEq, Eq)]\n pub(super) enum Semicolon {\n@@ -452,6 +452,9 @@ fn index_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo();\n //     y.bar::<T>(1, 2,);\n+//\n+//     0e0.sin();\n+//     0e0f32.sin();\n // }\n fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])));\n@@ -469,17 +472,16 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo;\n //     x.0.bar;\n+//     x.0. bar;\n+//     x.0.1;\n //     x.0();\n // }\n fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n-    if p.at(IDENT) || p.at(INT_NUMBER) {\n+    if p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST) {\n         name_ref_or_index(p);\n-    } else if p.at(FLOAT_NUMBER) {\n-        // FIXME: How to recover and instead parse INT + T![.]?\n-        p.bump_any();\n     } else {\n         p.error(\"expected field name or number\");\n     }"}, {"sha": "5ab148ff288080f46fe2daf027b95d3ccf988321", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -17,22 +17,58 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n     T![false],\n     INT_NUMBER,\n-    FLOAT_NUMBER,\n+    FLOAT_NUMBER_START_0,\n+    FLOAT_NUMBER_START_1,\n+    FLOAT_NUMBER_START_2,\n     BYTE,\n     CHAR,\n     STRING,\n     BYTE_STRING,\n ]);\n \n+pub(crate) const FLOAT_LITERAL_FIRST: TokenSet =\n+    TokenSet::new(&[FLOAT_NUMBER_START_0, FLOAT_NUMBER_START_1, FLOAT_NUMBER_START_2]);\n+\n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {\n         return None;\n     }\n     let m = p.start();\n-    p.bump_any();\n+    if p.at_ts(FLOAT_LITERAL_FIRST) {\n+        float_literal(p);\n+    } else {\n+        // Everything else is just one token.\n+        p.bump_any();\n+    }\n     Some(m.complete(p, LITERAL))\n }\n \n+// test float_literal\n+// fn f() {\n+//     0.0;\n+//     1.;\n+//     0e0;\n+//     0e0f32;\n+//     1.23f64;\n+// }\n+pub(crate) fn float_literal(p: &mut Parser) {\n+    // Floats can be up to 3 tokens. The first token indicates how many there are.\n+    let f = p.start();\n+    if p.at(FLOAT_NUMBER_START_0) {\n+        p.bump(FLOAT_NUMBER_START_0);\n+    } else if p.at(FLOAT_NUMBER_START_1) {\n+        p.bump(FLOAT_NUMBER_START_1);\n+        p.bump(DOT);\n+    } else if p.at(FLOAT_NUMBER_START_2) {\n+        p.bump(FLOAT_NUMBER_START_2);\n+        p.bump(DOT);\n+        p.bump(FLOAT_NUMBER_PART);\n+    } else {\n+        unreachable!();\n+    }\n+    f.complete(p, FLOAT_LITERAL);\n+}\n+\n // E.g. for after the break in `if break {}`, this should not match\n pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&["}, {"sha": "c16bd8d0c7afa8766b12f3b6ec66e0a80fb2ca55", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -140,7 +140,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n }\n \n fn is_literal_pat_start(p: &Parser) -> bool {\n-    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n+    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER_PART)\n         || p.at_ts(expressions::LITERAL_FIRST)\n }\n "}, {"sha": "9887960871f8b39ef2435f3e2afdc703950c7567", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -177,7 +177,7 @@ impl<'a> Converter<'a> {\n \n                 rustc_lexer::TokenKind::RawIdent => IDENT,\n                 rustc_lexer::TokenKind::Literal { kind, .. } => {\n-                    self.extend_literal(token_text.len(), kind);\n+                    self.extend_literal(token_text, kind);\n                     return;\n                 }\n \n@@ -223,7 +223,7 @@ impl<'a> Converter<'a> {\n         self.push(syntax_kind, token_text.len(), err);\n     }\n \n-    fn extend_literal(&mut self, len: usize, kind: &rustc_lexer::LiteralKind) {\n+    fn extend_literal(&mut self, token_text: &str, kind: &rustc_lexer::LiteralKind) {\n         let mut err = \"\";\n \n         let syntax_kind = match *kind {\n@@ -237,7 +237,27 @@ impl<'a> Converter<'a> {\n                 if empty_exponent {\n                     err = \"Missing digits after the exponent symbol\";\n                 }\n-                FLOAT_NUMBER\n+\n+                // In order to correctly parse nested tuple accesses like `tup.0.0`, where the `0.0`\n+                // is lexed as a float, we split floats that contain a `.` into 3 tokens.\n+                // To ensure that later stages can always reconstruct the token correctly, the first\n+                // token in the sequence indicates the number of following tokens that are part of\n+                // the float literal.\n+                if let Some((before, after)) = token_text.split_once('.') {\n+                    let err = if err.is_empty() { None } else { Some(err) };\n+\n+                    assert!(!before.is_empty());\n+                    let tok =\n+                        if after.is_empty() { FLOAT_NUMBER_START_1 } else { FLOAT_NUMBER_START_2 };\n+                    self.push(tok, before.len(), None);\n+                    self.push(DOT, 1, None);\n+                    if !after.is_empty() {\n+                        self.push(FLOAT_NUMBER_PART, after.len(), err);\n+                    }\n+                    return;\n+                }\n+\n+                FLOAT_NUMBER_START_0\n             }\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n@@ -295,6 +315,6 @@ impl<'a> Converter<'a> {\n         };\n \n         let err = if err.is_empty() { None } else { Some(err) };\n-        self.push(syntax_kind, len, err);\n+        self.push(syntax_kind, token_text.len(), err);\n     }\n }"}, {"sha": "5ddcd6ad6a42ade1460bc3e11b3a7f349a06b074", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -110,7 +110,10 @@ pub enum SyntaxKind {\n     RAW_KW,\n     MACRO_RULES_KW,\n     INT_NUMBER,\n-    FLOAT_NUMBER,\n+    FLOAT_NUMBER_START_0,\n+    FLOAT_NUMBER_START_1,\n+    FLOAT_NUMBER_START_2,\n+    FLOAT_NUMBER_PART,\n     CHAR,\n     BYTE,\n     STRING,\n@@ -227,6 +230,7 @@ pub enum SyntaxKind {\n     PATH,\n     PATH_SEGMENT,\n     LITERAL,\n+    FLOAT_LITERAL,\n     RENAME,\n     VISIBILITY,\n     WHERE_CLAUSE,\n@@ -286,7 +290,8 @@ impl SyntaxKind {\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n+            INT_NUMBER | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2\n+            | FLOAT_NUMBER_PART | CHAR | BYTE | STRING | BYTE_STRING => true,\n             _ => false,\n         }\n     }\n@@ -386,5 +391,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number_part] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_PART } ; [float_number_start_0] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_0 } ; [float_number_start_1] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_1 } ; [float_number_start_2] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_2 } ; }\n pub use T;"}, {"sha": "73de4cac24358ecfbdc7098ffd94a8f54756348b", "filename": "crates/parser/test_data/lexer/err/empty_exponent.rast", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -1,14 +1,14 @@\n-FLOAT_NUMBER \"0e\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"0e\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0E\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"0E\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n INT_NUMBER \"42\"\n DOT \".\"\n@@ -30,19 +30,35 @@ DOT \".\"\n IDENT \"E\"\n MINUS \"-\"\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42.2e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42.2e+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2e-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_2 \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\""}, {"sha": "428bdf8a1f9a6f6e5fc5712da7e65c5e6f04a602", "filename": "crates/parser/test_data/lexer/ok/numbers.rast", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -4,7 +4,8 @@ INT_NUMBER \"00\"\n WHITESPACE \" \"\n INT_NUMBER \"0_\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0.\"\n+FLOAT_NUMBER_START_1 \"0\"\n+DOT \".\"\n WHITESPACE \" \"\n INT_NUMBER \"0z\"\n WHITESPACE \"\\n\"\n@@ -20,11 +21,13 @@ INT_NUMBER \"001279\"\n WHITESPACE \" \"\n INT_NUMBER \"0_1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0.1279\"\n+FLOAT_NUMBER_START_2 \"0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0e1279\"\n+FLOAT_NUMBER_START_0 \"0e1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0E1279\"\n+FLOAT_NUMBER_START_0 \"0E1279\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n@@ -37,21 +40,27 @@ IDENT \"foo\"\n L_PAREN \"(\"\n R_PAREN \")\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0e+1\"\n+FLOAT_NUMBER_START_0 \"0e+1\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n IDENT \"e\"\n PLUS \"+\"\n INT_NUMBER \"1\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0.0E-2\"\n+FLOAT_NUMBER_START_2 \"0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"0E-2\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0___0.10000____0000e+111__\"\n+FLOAT_NUMBER_START_2 \"0___0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"10000____0000e+111__\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"1i64\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"92.0f32\"\n+FLOAT_NUMBER_START_2 \"92\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"0f32\"\n WHITESPACE \" \"\n INT_NUMBER \"11__s\"\n WHITESPACE \"\\n\""}, {"sha": "70cd030da1ec1aae7d015b4eb34e8e43fd8efff9", "filename": "crates/parser/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -32,7 +32,9 @@ SOURCE_FILE\n               INT_NUMBER \"1\"\n               COMMA \",\"\n               WHITESPACE \" \"\n-              FLOAT_NUMBER \"2.0\"\n+              FLOAT_NUMBER_START_2 \"2\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n         WHITESPACE \"\\n    \"\n         R_CURLY \"}\"\n   WHITESPACE \" \""}, {"sha": "a1efb3a9fb29dae92eb080049ce29f4747cd936b", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -40,6 +40,39 @@ SOURCE_FILE\n               IDENT \"bar\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          FIELD_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                FLOAT_NUMBER_PART \"0\"\n+            DOT \".\"\n+            WHITESPACE \" \"\n+            NAME_REF\n+              IDENT \"bar\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          FIELD_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                FLOAT_NUMBER_PART \"0\"\n+            DOT \".\"\n+            NAME_REF\n+              FLOAT_NUMBER_PART \"1\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n         EXPR_STMT\n           CALL_EXPR\n             FIELD_EXPR"}, {"sha": "551b1ecaf021132c115b643511113952d7ce6a71", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -1,5 +1,7 @@\n fn foo() {\n     x.foo;\n     x.0.bar;\n+    x.0. bar;\n+    x.0.1;\n     x.0();\n }"}, {"sha": "b3236976b984deecf88662f14ac35d27e018e15b", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -57,7 +57,10 @@ SOURCE_FILE\n           EQ \"=\"\n           WHITESPACE \" \"\n           LITERAL\n-            FLOAT_NUMBER \"2.0\"\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_2 \"2\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         LET_STMT"}, {"sha": "69f1055b7e36009724f273ec853c5edc67729ae1", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -58,6 +58,32 @@ SOURCE_FILE\n               COMMA \",\"\n               R_PAREN \")\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            LITERAL\n+              FLOAT_LITERAL\n+                FLOAT_NUMBER_START_0 \"0e0\"\n+            DOT \".\"\n+            NAME_REF\n+              IDENT \"sin\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            LITERAL\n+              FLOAT_LITERAL\n+                FLOAT_NUMBER_START_0 \"0e0f32\"\n+            DOT \".\"\n+            NAME_REF\n+              IDENT \"sin\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "3e5d464e238fdf72b4ab2a108278e8659f28b815", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -1,4 +1,7 @@\n fn foo() {\n     x.foo();\n     y.bar::<T>(1, 2,);\n+\n+    0e0.sin();\n+    0e0f32.sin();\n }"}, {"sha": "df4fb6eb417ba0ceb9b79ba9a86d584cfb6b4861", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rast", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -0,0 +1,51 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_2 \"0\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_1 \"1\"\n+              DOT \".\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_0 \"0e0\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_0 \"0e0f32\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_START_2 \"1\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"23f64\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "0d51ec1252fa8d2814d249ffa6ff16960843e24b", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -0,0 +1,7 @@\n+fn f() {\n+    0.0;\n+    1.;\n+    0e0;\n+    0e0f32;\n+    1.23f64;\n+}"}, {"sha": "b2f66e2f1e7c3260ede7397fd66d986349f4943d", "filename": "crates/parser/test_data/parser/ok/0056_neq_in_type.rast", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -19,7 +19,10 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_NUMBER \"1.0f32\"\n+                  FLOAT_LITERAL\n+                    FLOAT_NUMBER_START_2 \"1\"\n+                    DOT \".\"\n+                    FLOAT_NUMBER_PART \"0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\"\n@@ -40,7 +43,10 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_NUMBER \"1.0f32\"\n+                  FLOAT_LITERAL\n+                    FLOAT_NUMBER_START_2 \"1\"\n+                    DOT \".\"\n+                    FLOAT_NUMBER_PART \"0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\""}, {"sha": "85270dee6244bd1ef18d9f633b08ccf97e9d9bde", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -365,13 +365,20 @@ MacroExpr =\n \n Literal =\n   Attr* value:(\n-    'int_number' | 'float_number'\n+    'int_number' | FloatLiteral\n   | 'string' | 'raw_string'\n   | 'byte_string' | 'raw_byte_string'\n   | 'true' | 'false'\n   | 'char' | 'byte'\n   )\n \n+FloatLiteral =\n+  'float_number_start_0'?\n+  'float_number_start_1'?\n+  'float_number_start_2'?\n+  '.'?\n+  'float_number_part'?\n+\n PathExpr =\n   Attr* Path\n "}, {"sha": "11d81d47783fbd85de2594fb7d7dbec533253206", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -8,7 +8,7 @@ use crate::{\n         operators::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp},\n         support, AstChildren, AstNode,\n     },\n-    AstToken,\n+    AstToken, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, T,\n };\n@@ -282,30 +282,32 @@ pub enum LiteralKind {\n     String(ast::String),\n     ByteString(ast::ByteString),\n     IntNumber(ast::IntNumber),\n-    FloatNumber(ast::FloatNumber),\n+    FloatNumber(ast::FloatLiteral),\n     Char(ast::Char),\n     Byte(ast::Byte),\n     Bool(bool),\n }\n \n impl ast::Literal {\n-    pub fn token(&self) -> SyntaxToken {\n+    pub fn value(&self) -> SyntaxElement {\n         self.syntax()\n             .children_with_tokens()\n             .find(|e| e.kind() != ATTR && !e.kind().is_trivia())\n-            .and_then(|e| e.into_token())\n             .unwrap()\n     }\n-\n     pub fn kind(&self) -> LiteralKind {\n-        let token = self.token();\n+        let token = match self.value() {\n+            rowan::NodeOrToken::Node(node) => {\n+                return LiteralKind::FloatNumber(\n+                    ast::FloatLiteral::cast(node).expect(\"unreachable\"),\n+                );\n+            }\n+            rowan::NodeOrToken::Token(token) => token,\n+        };\n \n         if let Some(t) = ast::IntNumber::cast(token.clone()) {\n             return LiteralKind::IntNumber(t);\n         }\n-        if let Some(t) = ast::FloatNumber::cast(token.clone()) {\n-            return LiteralKind::FloatNumber(t);\n-        }\n         if let Some(t) = ast::String::cast(token.clone()) {\n             return LiteralKind::String(t);\n         }\n@@ -325,6 +327,26 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n+\n+    pub fn as_string(&self) -> Option<ast::String> {\n+        match self.kind() {\n+            LiteralKind::String(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_byte_string(&self) -> Option<ast::ByteString> {\n+        match self.kind() {\n+            LiteralKind::ByteString(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl ast::FloatLiteral {\n+    pub fn suffix(&self) -> Option<String> {\n+        ast::FloatNumberPart::cast(self.syntax().last_token()?)?.suffix().map(|s| s.to_string())\n+    }\n }\n \n pub enum BlockModifier {\n@@ -364,7 +386,7 @@ impl ast::BlockExpr {\n fn test_literal_with_attr() {\n     let parse = ast::SourceFile::parse(r#\"const _: &str = { #[attr] \"Hello\" };\"#);\n     let lit = parse.tree().syntax().descendants().find_map(ast::Literal::cast).unwrap();\n-    assert_eq!(lit.token().text(), r#\"\"Hello\"\"#);\n+    assert_eq!(lit.value().to_string(), r#\"\"Hello\"\"#);\n }\n \n impl ast::RecordExprField {"}, {"sha": "9d5af8e63ca85d1264e278405675e3c4e96d5419", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -1085,6 +1085,26 @@ impl UnderscoreExpr {\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatLiteral {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl FloatLiteral {\n+    pub fn float_number_start_0_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_0])\n+    }\n+    pub fn float_number_start_1_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_1])\n+    }\n+    pub fn float_number_start_2_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_2])\n+    }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n+    pub fn float_number_part_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_part])\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2719,6 +2739,17 @@ impl AstNode for UnderscoreExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for FloatLiteral {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_LITERAL }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for StmtList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STMT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4608,6 +4639,11 @@ impl std::fmt::Display for UnderscoreExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for FloatLiteral {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for StmtList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "1e1a55e3269368efe9462ae51d16bbc62f299201", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -112,16 +112,16 @@ impl AstToken for IntNumber {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatNumber {\n+pub struct FloatNumberPart {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for FloatNumber {\n+impl std::fmt::Display for FloatNumberPart {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for FloatNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n+impl AstToken for FloatNumberPart {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER_PART }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "846f4f3c71a04467aafcc42c3cc6bdc359dd6bb7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -799,6 +799,11 @@ pub fn struct_(\n     ))\n }\n \n+pub fn literal(text: &str) -> ast::Literal {\n+    assert_eq!(text.trim(), text);\n+    ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text))\n+}\n+\n #[track_caller]\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n@@ -827,7 +832,7 @@ pub fn token(kind: SyntaxKind) -> SyntaxToken {\n pub mod tokens {\n     use once_cell::sync::Lazy;\n \n-    use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n         SourceFile::parse(\n@@ -858,12 +863,6 @@ pub mod tokens {\n         sf.syntax().first_child_or_token().unwrap().into_token().unwrap()\n     }\n \n-    pub fn literal(text: &str) -> SyntaxToken {\n-        assert_eq!(text.trim(), text);\n-        let lit: ast::Literal = super::ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text));\n-        lit.syntax().first_child_or_token().unwrap().into_token().unwrap()\n-    }\n-\n     pub fn single_newline() -> SyntaxToken {\n         let res = SOURCE_FILE\n             .tree()"}, {"sha": "5b19b5ed2c2860af5379f059df8df8e0bb7da20c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -555,7 +555,9 @@ impl ast::FieldExpr {\n         self.syntax\n             .children_with_tokens()\n             // FIXME: Accepting floats here to reject them in validation later\n-            .find(|c| c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER)\n+            .find(|c| {\n+                c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER_PART\n+            })\n             .as_ref()\n             .and_then(SyntaxElement::as_token)\n             .cloned()"}, {"sha": "5f2e7231d9302d44909738b4e75f780a2d707fb7", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -321,7 +321,7 @@ impl ast::IntNumber {\n     }\n }\n \n-impl ast::FloatNumber {\n+impl ast::FloatNumberPart {\n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n         let mut indices = text.char_indices();\n@@ -355,14 +355,24 @@ impl Radix {\n \n #[cfg(test)]\n mod tests {\n-    use crate::ast::{self, make, FloatNumber, IntNumber};\n+    use crate::ast::{self, make};\n \n     fn check_float_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(FloatNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+        let suffix = match make::literal(lit).kind() {\n+            ast::LiteralKind::FloatNumber(f) => f.suffix(),\n+            // `1f32` lexes as an INT_NUMBER\n+            ast::LiteralKind::IntNumber(i) => i.suffix().map(|s| s.to_string()),\n+            e => unreachable!(\"{e:?}\"),\n+        };\n+        assert_eq!(suffix.as_deref(), expected.into());\n     }\n \n     fn check_int_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(IntNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+        let i = match make::literal(lit).kind() {\n+            ast::LiteralKind::IntNumber(i) => i,\n+            _ => unreachable!(),\n+        };\n+        assert_eq!(i.suffix(), expected.into());\n     }\n \n     #[test]\n@@ -390,12 +400,11 @@ mod tests {\n     }\n \n     fn check_string_value<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(\n-            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{}\\\"\", lit)) }\n-                .value()\n-                .as_deref(),\n-            expected.into()\n-        );\n+        let s = match make::literal(&format!(\"\\\"{}\\\"\", lit)).kind() {\n+            ast::LiteralKind::String(s) => s,\n+            _ => unreachable!(),\n+        };\n+        assert_eq!(s.value().as_deref(), expected.into());\n     }\n \n     #[test]"}, {"sha": "f5a78e4119dcd88c0233a82b4febbe4c00fe7735", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -71,7 +71,17 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n-    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n+    literals: &[\n+        \"INT_NUMBER\",\n+        \"FLOAT_NUMBER_START_0\",\n+        \"FLOAT_NUMBER_START_1\",\n+        \"FLOAT_NUMBER_START_2\",\n+        \"FLOAT_NUMBER_PART\",\n+        \"CHAR\",\n+        \"BYTE\",\n+        \"STRING\",\n+        \"BYTE_STRING\",\n+    ],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\",\n@@ -183,6 +193,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"PATH\",\n         \"PATH_SEGMENT\",\n         \"LITERAL\",\n+        \"FLOAT_LITERAL\",\n         \"RENAME\",\n         \"VISIBILITY\",\n         \"WHERE_CLAUSE\","}, {"sha": "33bf2c0cbad2196507ae8bd5476fa77f05567065", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -462,6 +462,10 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n             [lifetime_ident] => { $crate::SyntaxKind::LIFETIME_IDENT };\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n+            [float_number_part] => { $crate::SyntaxKind::FLOAT_NUMBER_PART };\n+            [float_number_start_0] => { $crate::SyntaxKind::FLOAT_NUMBER_START_0 };\n+            [float_number_start_1] => { $crate::SyntaxKind::FLOAT_NUMBER_START_1 };\n+            [float_number_start_2] => { $crate::SyntaxKind::FLOAT_NUMBER_START_2 };\n         }\n         pub use T;\n     };\n@@ -585,7 +589,7 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumberPart Char Byte Ident\"\n             .split_ascii_whitespace()\n             .map(|it| it.to_string())\n             .collect::<Vec<_>>(),"}, {"sha": "3edca3eb8f9d6e89954522cc9ef47fdc435aa5e3", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ae2b89e01a30e441371b9fd3376c3d03a475f/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=cc9ae2b89e01a30e441371b9fd3376c3d03a475f", "patch": "@@ -119,8 +119,15 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         text.rfind(end_delimiter).and_then(|end| text.get(prefix_len..end))\n     }\n \n-    let token = literal.token();\n-    let text = token.text();\n+    let token = literal.value();\n+    let text;\n+    let text = match &token {\n+        rowan::NodeOrToken::Node(node) => {\n+            text = node.text().to_string();\n+            &*text\n+        }\n+        rowan::NodeOrToken::Token(token) => token.text(),\n+    };\n \n     // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {"}]}