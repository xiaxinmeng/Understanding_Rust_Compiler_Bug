{"sha": "b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "node_id": "C_kwDOAAsO6NoAKGI5Njg0MmQ3ZDdiNmZiYjg1MDk0NzFmYjMwZGZhYThmNTg3N2ZjYjI", "commit": {"author": {"name": "Allen Hsu", "email": "allen@thelookoutway.com", "date": "2022-07-13T11:25:19Z"}, "committer": {"name": "Allen Hsu", "email": "allen.hsusp+git@gmail.com", "date": "2022-08-02T12:00:04Z"}, "message": "Split unfixable lints.", "tree": {"sha": "e8795e46443c862335e0fe45a4e27a3c75b68ca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8795e46443c862335e0fe45a4e27a3c75b68ca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "html_url": "https://github.com/rust-lang/rust/commit/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/comments", "author": {"login": "aldhsu", "id": 6347283, "node_id": "MDQ6VXNlcjYzNDcyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6347283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldhsu", "html_url": "https://github.com/aldhsu", "followers_url": "https://api.github.com/users/aldhsu/followers", "following_url": "https://api.github.com/users/aldhsu/following{/other_user}", "gists_url": "https://api.github.com/users/aldhsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldhsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldhsu/subscriptions", "organizations_url": "https://api.github.com/users/aldhsu/orgs", "repos_url": "https://api.github.com/users/aldhsu/repos", "events_url": "https://api.github.com/users/aldhsu/events{/privacy}", "received_events_url": "https://api.github.com/users/aldhsu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "171d082433904096a7c563d937c860d52ba9b25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/171d082433904096a7c563d937c860d52ba9b25f", "html_url": "https://github.com/rust-lang/rust/commit/171d082433904096a7c563d937c860d52ba9b25f"}], "stats": {"total": 620, "additions": 370, "deletions": 250}, "files": [{"sha": "610f1f14563da053c8f032fce0354feef8ae6899", "filename": "tests/compile-test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -394,7 +394,6 @@ const RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS: &[&str] = &[\n     \"single_component_path_imports_nested_first.rs\",\n     \"string_add.rs\",\n     \"toplevel_ref_arg_non_rustfix.rs\",\n-    \"trait_duplication_in_bounds.rs\",\n     \"unit_arg.rs\",\n     \"unnecessary_clone.rs\",\n     \"unnecessary_lazy_eval_unfixable.rs\","}, {"sha": "b4e6bf0ea1c2bb9d99fbf6fb035d227ac7253e91", "filename": "tests/ui/trait_duplication_in_bounds.fixed", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -0,0 +1,112 @@\n+// run-rustfix\n+#![deny(clippy::trait_duplication_in_bounds)]\n+#![allow(unused)]\n+\n+fn bad_foo<T: Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+    unimplemented!();\n+}\n+\n+fn bad_bar<T, U>(arg0: T, arg1: U)\n+where\n+    T: Clone + Copy,\n+    U: Clone + Copy,\n+{\n+    unimplemented!();\n+}\n+\n+fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {\n+    unimplemented!();\n+}\n+\n+fn good_foo<T, U>(arg0: T, arg1: U)\n+where\n+    T: Clone + Copy,\n+    U: Clone + Copy,\n+{\n+    unimplemented!();\n+}\n+\n+trait GoodSelfTraitBound: Clone + Copy {\n+    fn f();\n+}\n+\n+trait GoodSelfWhereClause {\n+    fn f()\n+    where\n+        Self: Clone + Copy;\n+}\n+\n+trait BadSelfTraitBound: Clone {\n+    fn f();\n+}\n+\n+trait BadSelfWhereClause {\n+    fn f()\n+    where\n+        Self: Clone;\n+}\n+\n+trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {\n+    fn f();\n+}\n+\n+trait GoodWhereClause<T, U> {\n+    fn f()\n+    where\n+        T: Clone + Copy,\n+        U: Clone + Copy;\n+}\n+\n+trait BadTraitBound<T: Clone + Copy, U: Clone + Copy> {\n+    fn f();\n+}\n+\n+trait BadWhereClause<T, U> {\n+    fn f()\n+    where\n+        T: Clone + Copy,\n+        U: Clone + Copy;\n+}\n+\n+struct GoodStructBound<T: Clone + Copy, U: Clone + Copy> {\n+    t: T,\n+    u: U,\n+}\n+\n+impl<T: Clone + Copy, U: Clone + Copy> GoodTraitBound<T, U> for GoodStructBound<T, U> {\n+    // this should not warn\n+    fn f() {}\n+}\n+\n+struct GoodStructWhereClause;\n+\n+impl<T, U> GoodTraitBound<T, U> for GoodStructWhereClause\n+where\n+    T: Clone + Copy,\n+    U: Clone + Copy,\n+{\n+    // this should not warn\n+    fn f() {}\n+}\n+\n+fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}\n+\n+trait GenericTrait<T> {}\n+\n+fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n+    unimplemented!();\n+}\n+\n+fn bad_generic<T: GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+    unimplemented!();\n+}\n+\n+mod foo {\n+    pub trait Clone {}\n+}\n+\n+fn qualified_path<T: Clone + foo::Clone>(arg0: T) {\n+    unimplemented!();\n+}\n+\n+fn main() {}"}, {"sha": "7f2e96a22e6648eb27aaf1178eec55ff2c86cab5", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 59, "deletions": 159, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -1,212 +1,112 @@\n+// run-rustfix\n #![deny(clippy::trait_duplication_in_bounds)]\n #![allow(unused)]\n \n-use std::collections::BTreeMap;\n-use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n+fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+    unimplemented!();\n+}\n \n-fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+fn bad_bar<T, U>(arg0: T, arg1: U)\n where\n-    T: Clone,\n-    T: Default,\n+    T: Clone + Clone + Clone + Copy,\n+    U: Clone + Copy,\n {\n     unimplemented!();\n }\n \n-fn good_bar<T: Clone + Default>(arg: T) {\n+fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {\n     unimplemented!();\n }\n \n-fn good_foo<T>(arg: T)\n+fn good_foo<T, U>(arg0: T, arg1: U)\n where\n-    T: Clone + Default,\n+    T: Clone + Copy,\n+    U: Clone + Copy,\n {\n     unimplemented!();\n }\n \n-fn good_foobar<T: Default>(arg: T)\n-where\n-    T: Clone,\n-{\n-    unimplemented!();\n+trait GoodSelfTraitBound: Clone + Copy {\n+    fn f();\n }\n \n-trait T: Default {\n+trait GoodSelfWhereClause {\n     fn f()\n     where\n-        Self: Default;\n+        Self: Clone + Copy;\n }\n \n-trait U: Default {\n+trait BadSelfTraitBound: Clone + Clone + Clone {\n+    fn f();\n+}\n+\n+trait BadSelfWhereClause {\n     fn f()\n     where\n-        Self: Clone;\n+        Self: Clone + Clone + Clone;\n+}\n+\n+trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {\n+    fn f();\n }\n \n-trait ZZ: Default {\n-    fn g();\n-    fn h();\n+trait GoodWhereClause<T, U> {\n     fn f()\n     where\n-        Self: Default + Clone;\n+        T: Clone + Copy,\n+        U: Clone + Copy;\n }\n \n-trait BadTrait: Default + Clone {\n+trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n+    fn f();\n+}\n+\n+trait BadWhereClause<T, U> {\n     fn f()\n     where\n-        Self: Default + Clone;\n-    fn g()\n-    where\n-        Self: Default;\n-    fn h()\n-    where\n-        Self: Copy;\n+        T: Clone + Clone + Clone + Copy,\n+        U: Clone + Copy;\n }\n \n-#[derive(Default, Clone)]\n-struct Life;\n+struct GoodStructBound<T: Clone + Copy, U: Clone + Copy> {\n+    t: T,\n+    u: U,\n+}\n \n-impl T for Life {\n+impl<T: Clone + Copy, U: Clone + Copy> GoodTraitBound<T, U> for GoodStructBound<T, U> {\n     // this should not warn\n     fn f() {}\n }\n \n-impl U for Life {\n+struct GoodStructWhereClause;\n+\n+impl<T, U> GoodTraitBound<T, U> for GoodStructWhereClause\n+where\n+    T: Clone + Copy,\n+    U: Clone + Copy,\n+{\n     // this should not warn\n     fn f() {}\n }\n \n-// should not warn\n-trait Iter: Iterator {\n-    fn into_group_btreemap<K, V>(self) -> BTreeMap<K, Vec<V>>\n-    where\n-        Self: Iterator<Item = (K, V)> + Sized,\n-        K: Ord + Eq,\n-    {\n-        unimplemented!();\n-    }\n-}\n+fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}\n \n-struct Foo;\n+trait GenericTrait<T> {}\n \n-trait FooIter: Iterator<Item = Foo> {\n-    fn bar()\n-    where\n-        Self: Iterator<Item = Foo>,\n-    {\n-    }\n+fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n+    unimplemented!();\n }\n \n-// This should not lint\n-fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n-\n-mod repeated_where_clauses_or_trait_bounds {\n-    fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n-        unimplemented!();\n-    }\n-\n-    fn bad_bar<T, U>(arg0: T, arg1: U)\n-    where\n-        T: Clone + Clone + Clone + Copy,\n-        U: Clone + Copy,\n-    {\n-        unimplemented!();\n-    }\n-\n-    fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {\n-        unimplemented!();\n-    }\n-\n-    fn good_foo<T, U>(arg0: T, arg1: U)\n-    where\n-        T: Clone + Copy,\n-        U: Clone + Copy,\n-    {\n-        unimplemented!();\n-    }\n-\n-    trait GoodSelfTraitBound: Clone + Copy {\n-        fn f();\n-    }\n-\n-    trait GoodSelfWhereClause {\n-        fn f()\n-        where\n-            Self: Clone + Copy;\n-    }\n-\n-    trait BadSelfTraitBound: Clone + Clone + Clone {\n-        fn f();\n-    }\n-\n-    trait BadSelfWhereClause {\n-        fn f()\n-        where\n-            Self: Clone + Clone + Clone;\n-    }\n-\n-    trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {\n-        fn f();\n-    }\n-\n-    trait GoodWhereClause<T, U> {\n-        fn f()\n-        where\n-            T: Clone + Copy,\n-            U: Clone + Copy;\n-    }\n-\n-    trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n-        fn f();\n-    }\n-\n-    trait BadWhereClause<T, U> {\n-        fn f()\n-        where\n-            T: Clone + Clone + Clone + Copy,\n-            U: Clone + Copy;\n-    }\n-\n-    struct GoodStructBound<T: Clone + Copy, U: Clone + Copy> {\n-        t: T,\n-        u: U,\n-    }\n-\n-    impl<T: Clone + Copy, U: Clone + Copy> GoodTraitBound<T, U> for GoodStructBound<T, U> {\n-        // this should not warn\n-        fn f() {}\n-    }\n-\n-    struct GoodStructWhereClause;\n-\n-    impl<T, U> GoodTraitBound<T, U> for GoodStructWhereClause\n-    where\n-        T: Clone + Copy,\n-        U: Clone + Copy,\n-    {\n-        // this should not warn\n-        fn f() {}\n-    }\n-\n-    fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}\n-\n-    trait GenericTrait<T> {}\n-\n-    // This should not warn but currently does see #8757\n-    fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n-        unimplemented!();\n-    }\n-\n-    fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n-        unimplemented!();\n-    }\n+fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+    unimplemented!();\n+}\n \n-    mod foo {\n-        pub trait Clone {}\n-    }\n+mod foo {\n+    pub trait Clone {}\n+}\n \n-    fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n-        unimplemented!();\n-    }\n+fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n+    unimplemented!();\n }\n \n fn main() {}"}, {"sha": "86c593811a74f77b2eae2c3bde518d81ab14ced5", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 27, "deletions": 90, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -1,119 +1,56 @@\n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:7:15\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:5:15\n    |\n-LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |               ^^^^^\n+LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n    |\n note: the lint level is defined here\n-  --> $DIR/trait_duplication_in_bounds.rs:1:9\n+  --> $DIR/trait_duplication_in_bounds.rs:2:9\n    |\n LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:7:23\n-   |\n-LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |                       ^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:36:15\n-   |\n-LL |         Self: Default;\n-   |               ^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:50:15\n-   |\n-LL |         Self: Default + Clone;\n-   |               ^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:56:15\n-   |\n-LL |         Self: Default + Clone;\n-   |               ^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:56:25\n-   |\n-LL |         Self: Default + Clone;\n-   |                         ^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:59:15\n-   |\n-LL |         Self: Default;\n-   |               ^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:94:15\n-   |\n-LL |         Self: Iterator<Item = Foo>,\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:103:19\n-   |\n-LL |     fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:109:12\n+  --> $DIR/trait_duplication_in_bounds.rs:11:8\n    |\n-LL |         T: Clone + Clone + Clone + Copy,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+LL |     T: Clone + Clone + Clone + Copy,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:137:30\n+  --> $DIR/trait_duplication_in_bounds.rs:39:26\n    |\n-LL |     trait BadSelfTraitBound: Clone + Clone + Clone {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n+LL | trait BadSelfTraitBound: Clone + Clone + Clone {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:144:19\n+  --> $DIR/trait_duplication_in_bounds.rs:46:15\n    |\n-LL |             Self: Clone + Clone + Clone;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n+LL |         Self: Clone + Clone + Clone;\n+   |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:158:28\n+  --> $DIR/trait_duplication_in_bounds.rs:60:24\n    |\n-LL |     trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:165:16\n+  --> $DIR/trait_duplication_in_bounds.rs:67:12\n    |\n-LL |             T: Clone + Clone + Clone + Copy,\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+LL |         T: Clone + Clone + Clone + Copy,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:199:23\n+  --> $DIR/trait_duplication_in_bounds.rs:100:19\n    |\n-LL |     fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u32> + GenericTrait<u64>`\n+LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u32> + GenericTrait<u64>`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:207:26\n+  --> $DIR/trait_duplication_in_bounds.rs:108:22\n    |\n-LL |     fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + foo::Clone`\n+LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + foo::Clone`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "a21d4c5d637daec8678ce052656d1d86bff631aa", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -0,0 +1,101 @@\n+#![deny(clippy::trait_duplication_in_bounds)]\n+\n+use std::collections::BTreeMap;\n+use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n+\n+fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+where\n+    T: Clone,\n+    T: Default,\n+{\n+    unimplemented!();\n+}\n+\n+fn good_bar<T: Clone + Default>(arg: T) {\n+    unimplemented!();\n+}\n+\n+fn good_foo<T>(arg: T)\n+where\n+    T: Clone + Default,\n+{\n+    unimplemented!();\n+}\n+\n+fn good_foobar<T: Default>(arg: T)\n+where\n+    T: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+trait T: Default {\n+    fn f()\n+    where\n+        Self: Default;\n+}\n+\n+trait U: Default {\n+    fn f()\n+    where\n+        Self: Clone;\n+}\n+\n+trait ZZ: Default {\n+    fn g();\n+    fn h();\n+    fn f()\n+    where\n+        Self: Default + Clone;\n+}\n+\n+trait BadTrait: Default + Clone {\n+    fn f()\n+    where\n+        Self: Default + Clone;\n+    fn g()\n+    where\n+        Self: Default;\n+    fn h()\n+    where\n+        Self: Copy;\n+}\n+\n+#[derive(Default, Clone)]\n+struct Life;\n+\n+impl T for Life {\n+    // this should not warn\n+    fn f() {}\n+}\n+\n+impl U for Life {\n+    // this should not warn\n+    fn f() {}\n+}\n+\n+// should not warn\n+trait Iter: Iterator {\n+    fn into_group_btreemap<K, V>(self) -> BTreeMap<K, Vec<V>>\n+    where\n+        Self: Iterator<Item = (K, V)> + Sized,\n+        K: Ord + Eq,\n+    {\n+        unimplemented!();\n+    }\n+}\n+\n+struct Foo;\n+\n+trait FooIter: Iterator<Item = Foo> {\n+    fn bar()\n+    where\n+        Self: Iterator<Item = Foo>,\n+    {\n+    }\n+}\n+\n+// This should not lint\n+fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n+\n+fn main() {}"}, {"sha": "fbd9abb005f1f1fdf069c3c96691c12964ff5d24", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "patch": "@@ -0,0 +1,71 @@\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n+   |\n+LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+   |               ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:1:9\n+   |\n+LL | #![deny(clippy::trait_duplication_in_bounds)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n+   |\n+LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+   |                       ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:35:15\n+   |\n+LL |         Self: Default;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:49:15\n+   |\n+LL |         Self: Default + Clone;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:15\n+   |\n+LL |         Self: Default + Clone;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:25\n+   |\n+LL |         Self: Default + Clone;\n+   |                         ^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:58:15\n+   |\n+LL |         Self: Default;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:93:15\n+   |\n+LL |         Self: Iterator<Item = Foo>,\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: aborting due to 8 previous errors\n+"}]}