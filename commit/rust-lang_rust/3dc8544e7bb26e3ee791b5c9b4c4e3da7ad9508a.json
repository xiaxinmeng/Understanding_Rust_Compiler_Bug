{"sha": "3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYzg1NDRlN2JiMjZlM2VlNzkxYjVjOWI0YzRlM2RhN2FkOTUwOGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-13T15:11:50Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-16T14:40:16Z"}, "message": "Update code to new invalid_codeblock_attributes lint name", "tree": {"sha": "f6eadf13bb9d9e3e34ecafa555169df8bce6af29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6eadf13bb9d9e3e34ecafa555169df8bce6af29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "html_url": "https://github.com/rust-lang/rust/commit/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70e6e10c50998ea7ffa1e0e11aa5129b7468405", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70e6e10c50998ea7ffa1e0e11aa5129b7468405", "html_url": "https://github.com/rust-lang/rust/commit/d70e6e10c50998ea7ffa1e0e11aa5129b7468405"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1aea0f34a2b1128df933da27c7b0a212a896ed94", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "patch": "@@ -726,7 +726,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-            .arg(\"-Dinvalid_codeblock_attribute\");\n+            .arg(\"-Dinvalid_codeblock_attributes\");\n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n         }\n@@ -1162,7 +1162,7 @@ impl<'a> Builder<'a> {\n             // fixed via better support from Cargo.\n             cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n \n-            rustdocflags.arg(\"-Dinvalid_codeblock_attribute\");\n+            rustdocflags.arg(\"-Dinvalid_codeblock_attributes\");\n         }\n \n         if let Mode::Rustc | Mode::Codegen = mode {"}, {"sha": "48ca2b446abb3e4bf21715ad68a6c21fc7a43ae1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "patch": "@@ -315,7 +315,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n     let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n-    let invalid_codeblock_attribute_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n@@ -325,12 +325,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         missing_doc_example.to_owned(),\n         private_doc_tests.to_owned(),\n         no_crate_level_docs.to_owned(),\n-        invalid_codeblock_attribute_name.to_owned(),\n+        invalid_codeblock_attributes_name.to_owned(),\n     ];\n \n     let (lint_opts, lint_caps) = init_lints(allowed_lints, lint_opts, |lint| {\n         if lint.name == intra_link_resolution_failure_name\n-            || lint.name == invalid_codeblock_attribute_name\n+            || lint.name == invalid_codeblock_attributes_name\n         {\n             None\n         } else {"}, {"sha": "e8ea71997109ad31ec7c78047e201176b7775d5c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3dc8544e7bb26e3ee791b5c9b4c4e3da7ad9508a", "patch": "@@ -45,14 +45,14 @@ pub struct TestOptions {\n pub fn run(options: Options) -> Result<(), String> {\n     let input = config::Input::File(options.input.clone());\n \n-    let invalid_codeblock_attribute_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n-    let allowed_lints = vec![invalid_codeblock_attribute_name.to_owned()];\n+    let allowed_lints = vec![invalid_codeblock_attributes_name.to_owned()];\n \n     let (lint_opts, lint_caps) = init_lints(allowed_lints, options.lint_opts.clone(), |lint| {\n-        if lint.name == invalid_codeblock_attribute_name {\n+        if lint.name == invalid_codeblock_attributes_name {\n             None\n         } else {\n             Some((lint.name_lower(), lint::Allow))"}]}