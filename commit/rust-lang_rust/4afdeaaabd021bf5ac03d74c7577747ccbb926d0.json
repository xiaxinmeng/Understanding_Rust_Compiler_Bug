{"sha": "4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmRlYWFhYmQwMjFiZjVhYzAzZDc0Yzc1Nzc3NDdjY2JiOTI2ZDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T20:39:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-28T19:45:02Z"}, "message": "Mmap the incremental data instead of reading it.", "tree": {"sha": "c8c992d102a9c9691b6d09a5e819f200c0d987af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c992d102a9c9691b6d09a5e819f200c0d987af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "html_url": "https://github.com/rust-lang/rust/commit/4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cccdc9b321e6565b3e62e8b52aec53d106ef2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05cccdc9b321e6565b3e62e8b52aec53d106ef2f", "html_url": "https://github.com/rust-lang/rust/commit/05cccdc9b321e6565b3e62e8b52aec53d106ef2f"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "501f6bdb9cffe00927da97bacf9cf2116040e01f", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "patch": "@@ -14,6 +14,7 @@ use std::fs;\n use std::io::{self, Read};\n use std::path::Path;\n \n+use rustc_data_structures::memmap::Mmap;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_serialize::Encoder;\n \n@@ -54,14 +55,15 @@ pub fn read_file(\n     report_incremental_info: bool,\n     path: &Path,\n     nightly_build: bool,\n-) -> io::Result<Option<(Vec<u8>, usize)>> {\n-    let data = match fs::read(path) {\n-        Ok(data) => data,\n+) -> io::Result<Option<(Mmap, usize)>> {\n+    let file = match fs::File::open(path) {\n+        Ok(file) => file,\n         Err(err) if err.kind() == io::ErrorKind::NotFound => return Ok(None),\n         Err(err) => return Err(err),\n     };\n+    let mmap = unsafe { Mmap::map(file) }?;\n \n-    let mut file = io::Cursor::new(data);\n+    let mut file = io::Cursor::new(&*mmap);\n \n     // Check FILE_MAGIC\n     {\n@@ -103,7 +105,7 @@ pub fn read_file(\n     }\n \n     let post_header_start_pos = file.position() as usize;\n-    Ok(Some((file.into_inner(), post_header_start_pos)))\n+    Ok(Some((mmap, post_header_start_pos)))\n }\n \n fn report_format_mismatch(report_incremental_info: bool, file: &Path, message: &str) {"}, {"sha": "4d38556e5d2145aa4ee34f275b88b6f4a739d368", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "patch": "@@ -1,6 +1,7 @@\n //! Code to save/load the dep-graph from files.\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n@@ -48,7 +49,7 @@ fn load_data(\n     report_incremental_info: bool,\n     path: &Path,\n     nightly_build: bool,\n-) -> LoadResult<(Vec<u8>, usize)> {\n+) -> LoadResult<(Mmap, usize)> {\n     match file_format::read_file(report_incremental_info, path, nightly_build) {\n         Ok(Some(data_and_pos)) => LoadResult::Ok { data: data_and_pos },\n         Ok(None) => {"}, {"sha": "08990cb7baf98cf0a79511425c4d04dbba86017a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "patch": "@@ -27,6 +27,7 @@ use crate::ty::{\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -71,7 +72,7 @@ use std::sync::Arc;\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n-    fn new(sess: &'tcx Session, data: Vec<u8>, start_pos: usize) -> Self\n+    fn new(sess: &'tcx Session, data: Mmap, start_pos: usize) -> Self\n     where\n         Self: Sized;\n "}, {"sha": "e696df85b888f5f653b6a97953b01e49a1e9ad22", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afdeaaabd021bf5ac03d74c7577747ccbb926d0/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=4afdeaaabd021bf5ac03d74c7577747ccbb926d0", "patch": "@@ -1,5 +1,6 @@\n use crate::QueryCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, LOCAL_CRATE};\n@@ -42,7 +43,7 @@ const TAG_EXPN_DATA: u8 = 1;\n /// any side effects that have been emitted during a query.\n pub struct OnDiskCache<'sess> {\n     // The complete cache data in serialized form.\n-    serialized_data: Vec<u8>,\n+    serialized_data: Option<Mmap>,\n \n     // Collects all `QuerySideEffects` created during the current compilation\n     // session.\n@@ -182,7 +183,8 @@ impl EncodedSourceFileId {\n }\n \n impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n-    fn new(sess: &'sess Session, data: Vec<u8>, start_pos: usize) -> Self {\n+    /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n+    fn new(sess: &'sess Session, data: Mmap, start_pos: usize) -> Self {\n         debug_assert!(sess.opts.incremental.is_some());\n \n         // Wrap in a scope so we can borrow `data`.\n@@ -204,7 +206,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n         };\n \n         Self {\n-            serialized_data: data,\n+            serialized_data: Some(data),\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n             file_index_to_file: Default::default(),\n             cnum_map: OnceCell::new(),\n@@ -225,7 +227,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n \n     fn new_empty(source_map: &'sess SourceMap) -> Self {\n         Self {\n-            serialized_data: Vec::new(),\n+            serialized_data: None,\n             file_index_to_stable_id: Default::default(),\n             file_index_to_file: Default::default(),\n             cnum_map: OnceCell::new(),\n@@ -577,7 +579,10 @@ impl<'sess> OnDiskCache<'sess> {\n \n         let mut decoder = CacheDecoder {\n             tcx,\n-            opaque: opaque::Decoder::new(&self.serialized_data[..], pos.to_usize()),\n+            opaque: opaque::Decoder::new(\n+                self.serialized_data.as_deref().unwrap_or(&[]),\n+                pos.to_usize(),\n+            ),\n             source_map: self.source_map,\n             cnum_map,\n             file_index_to_file: &self.file_index_to_file,"}]}