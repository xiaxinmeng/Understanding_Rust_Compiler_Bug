{"sha": "e62a54334445cd806bfc7bb9a7a41b63413fbedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MmE1NDMzNDQ0NWNkODA2YmZjN2JiOWE3YTQxYjYzNDEzZmJlZGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-07T02:29:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-07T21:49:36Z"}, "message": "Account for `if (let pat = expr) {}`\n\nPartially address #82827.", "tree": {"sha": "1d3eb2c3b93edfb94e1624ed5f75334574d6b697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3eb2c3b93edfb94e1624ed5f75334574d6b697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62a54334445cd806bfc7bb9a7a41b63413fbedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62a54334445cd806bfc7bb9a7a41b63413fbedc", "html_url": "https://github.com/rust-lang/rust/commit/e62a54334445cd806bfc7bb9a7a41b63413fbedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62a54334445cd806bfc7bb9a7a41b63413fbedc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c77a1fa3ca574f2a40056f64d498db8efe0d8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c77a1fa3ca574f2a40056f64d498db8efe0d8a8", "html_url": "https://github.com/rust-lang/rust/commit/1c77a1fa3ca574f2a40056f64d498db8efe0d8a8"}], "stats": {"total": 439, "additions": 212, "deletions": 227}, "files": [{"sha": "4691451b6a9ce9c1fa5a412152b05b5620240290", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -1139,6 +1139,14 @@ impl Expr {\n         }\n     }\n \n+    pub fn peel_parens(&self) -> &Expr {\n+        let mut expr = self;\n+        while let ExprKind::Paren(inner) = &expr.kind {\n+            expr = &inner;\n+        }\n+        expr\n+    }\n+\n     /// Attempts to reparse as `Ty` (for diagnostic purposes).\n     pub fn to_ty(&self) -> Option<P<Ty>> {\n         let kind = match &self.kind {"}, {"sha": "63fc4e0ceda4e12dc4a541cd548b3319f43d858d", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -97,6 +97,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     ExprKind::Let(ref pat, ref scrutinee) => {\n                         self.lower_expr_if_let(e.span, pat, scrutinee, then, else_opt.as_deref())\n                     }\n+                    ExprKind::Paren(ref paren) => match paren.peel_parens().kind {\n+                        ExprKind::Let(ref pat, ref scrutinee) => {\n+                            // A user has written `if (let Some(x) = foo) {`, we want to avoid\n+                            // confusing them with mentions of nightly features.\n+                            // If this logic is changed, you will also likely need to touch\n+                            // `unused::UnusedParens::check_expr`.\n+                            self.if_let_expr_with_parens(cond, &paren.peel_parens());\n+                            self.lower_expr_if_let(\n+                                e.span,\n+                                pat,\n+                                scrutinee,\n+                                then,\n+                                else_opt.as_deref(),\n+                            )\n+                        }\n+                        _ => self.lower_expr_if(cond, then, else_opt.as_deref()),\n+                    },\n                     _ => self.lower_expr_if(cond, then, else_opt.as_deref()),\n                 },\n                 ExprKind::While(ref cond, ref body, opt_label) => self\n@@ -346,6 +363,32 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::ExprKind::Call(f, self.lower_exprs(&real_args))\n     }\n \n+    fn if_let_expr_with_parens(&mut self, cond: &Expr, paren: &Expr) {\n+        let start = cond.span.until(paren.span);\n+        let end = paren.span.shrink_to_hi().until(cond.span.shrink_to_hi());\n+        let mut err = self.sess.struct_span_err(\n+            vec![start, end],\n+            \"invalid parentheses around `let` expression in `if let`\",\n+        );\n+        if self.sess.opts.unstable_features.is_nightly_build() {\n+            err.note(\n+                \"only supported directly without parentheses in conditions of `if`- and \\\n+                 `while`-expressions, as well as in `let` chains within parentheses\",\n+            );\n+        } else {\n+            err.note(\"variable declaration using `let` is a statement, not a condition\");\n+        }\n+        err.multipart_suggestion(\n+            \"`if let` needs to be written without parentheses\",\n+            vec![(start, String::new()), (end, String::new())],\n+            rustc_errors::Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+        // Ideally, we'd remove the feature gating of a `let` expression since we are already\n+        // complaining about it here, but `feature_gate::check_crate` has already run by now:\n+        // self.sess.parse_sess.gated_spans.ungate_last(sym::let_chains, paren.span);\n+    }\n+\n     /// Emit an error and lower `ast::ExprKind::Let(pat, scrutinee)` into:\n     /// ```rust\n     /// match scrutinee { pats => true, _ => false }\n@@ -356,8 +399,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         if self.sess.opts.unstable_features.is_nightly_build() {\n             self.sess\n                 .struct_span_err(span, \"`let` expressions are not supported here\")\n-                .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-                .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+                .note(\n+                    \"only supported directly without parentheses in conditions of `if`- and \\\n+                     `while`-expressions, as well as in `let` chains within parentheses\",\n+                )\n                 .emit();\n         } else {\n             self.sess"}, {"sha": "e222f82f20a9196dc2f1a0273227e40fca2ede44", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -602,7 +602,7 @@ trait UnusedDelimLint {\n         use rustc_ast::ExprKind::*;\n         let (value, ctx, followed_by_block, left_pos, right_pos) = match e.kind {\n             // Do not lint `unused_braces` in `if let` expressions.\n-            If(ref cond, ref block, ..)\n+            If(ref cond, ref block, _)\n                 if !matches!(cond.kind, Let(_, _)) || Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX =>\n             {\n                 let left = e.span.lo() + rustc_span::BytePos(2);\n@@ -816,8 +816,33 @@ impl UnusedParens {\n \n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if let ExprKind::Let(ref pat, ..) | ExprKind::ForLoop(ref pat, ..) = e.kind {\n-            self.check_unused_parens_pat(cx, pat, false, false);\n+        match e.kind {\n+            ExprKind::Let(ref pat, _) | ExprKind::ForLoop(ref pat, ..) => {\n+                self.check_unused_parens_pat(cx, pat, false, false);\n+            }\n+            // We ignore parens in cases like `if (((let Some(0) = Some(1))))` because we already\n+            // handle a hard error for them during AST lowering in `lower_expr_mut`, but we still\n+            // want to complain about things like `if let 42 = (42)`.\n+            ExprKind::If(ref cond, ref block, ref else_)\n+                if matches!(cond.peel_parens().kind, ExprKind::Let(..)) =>\n+            {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    cond.peel_parens(),\n+                    UnusedDelimsCtx::LetScrutineeExpr,\n+                    true,\n+                    None,\n+                    None,\n+                );\n+                for stmt in &block.stmts {\n+                    <Self as UnusedDelimLint>::check_stmt(self, cx, stmt);\n+                }\n+                if let Some(e) = else_ {\n+                    <Self as UnusedDelimLint>::check_expr(self, cx, e);\n+                }\n+                return;\n+            }\n+            _ => {}\n         }\n \n         <Self as UnusedDelimLint>::check_expr(self, cx, e)"}, {"sha": "666b1e785bf6b62103720e220519c99e7845d961", "filename": "src/test/ui/pattern/issue-82290.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -4,8 +4,7 @@ error: `let` expressions are not supported here\n LL |     if true && let x = 1 {\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-82290.rs:1:12"}, {"sha": "24443a0be847961d1c8e123575f83237ddf1eaca", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -175,143 +175,127 @@ error: `let` expressions are not supported here\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: aborting due to 35 previous errors\n "}, {"sha": "1adce5e01506d315779168c5d9819cd6801bcfba", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 56, "deletions": 112, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -15,503 +15,447 @@ error: `let` expressions are not supported here\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:36:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:38:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:46:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:50:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:51:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:52:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:53:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:56:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:59:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:61:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:63:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:67:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:71:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:78:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:86:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:92:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:96:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:99:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:100:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:102:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:110:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:114:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:115:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:116:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:117:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:120:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:123:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:125:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:127:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:131:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:135:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:142:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:150:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:156:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:170:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:172:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:173:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:175:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:183:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:187:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:188:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:189:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:192:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:194:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:195:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:196:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:198:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:202:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:202:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:207:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:218:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:222:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:226:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:236:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:20:12"}, {"sha": "0b38b5f47efef8f519d91c8ffbee8c7134387266", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -13,11 +13,11 @@ fn _if() {\n \n     if (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n \n     if (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n \n     if true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n@@ -126,7 +126,7 @@ fn _macros() {\n     //~| ERROR `let` expressions are not supported here\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n     //~| ERROR `let` expressions are not supported here\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are experimental [E0658]"}, {"sha": "67f20462381c9a813a19bd029d8125c570ba4c36", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 53, "deletions": 73, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a54334445cd806bfc7bb9a7a41b63413fbedc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=e62a54334445cd806bfc7bb9a7a41b63413fbedc", "patch": "@@ -295,293 +295,273 @@ LL |     use_expr!((let 0 = 1));\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:14:9\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:14:8\n    |\n LL |     if (let 0 = 1) {}\n-   |         ^^^^^^^^^\n+   |        ^         ^\n+   |\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n+help: `if let` needs to be written without parentheses\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+LL |     if let 0 = 1 {}\n+   |       --       --\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:18:11\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:18:8\n    |\n LL |     if (((let 0 = 1))) {}\n-   |           ^^^^^^^^^\n+   |        ^^^         ^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n+help: `if let` needs to be written without parentheses\n+   |\n+LL |     if let 0 = 1 {}\n+   |       --       --\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:22:16\n    |\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:26:8\n    |\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:30:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:38:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:38:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:8\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:21\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                     ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:56:8\n    |\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:64:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:68:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:72:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:76:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:80:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:84:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:88:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:88:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:11\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:24\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:106:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:123:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:123:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:127:16\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:127:15\n    |\n LL |     use_expr!((let 0 = 1));\n-   |                ^^^^^^^^^\n+   |               ^         ^\n+   |\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n+help: `if let` needs to be written without parentheses\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+LL |     use_expr!(let 0 = 1);\n+   |              --       --\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:127:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: aborting due to 65 previous errors\n "}]}