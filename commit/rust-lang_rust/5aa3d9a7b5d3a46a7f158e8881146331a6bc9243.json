{"sha": "5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTNkOWE3YjVkM2E0NmE3ZjE1OGU4ODgxMTQ2MzMxYTZiYzkyNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T23:39:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T23:39:01Z"}, "message": "Auto merge of #63395 - Centril:rollup-kt805cj, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #63162 (Miri tests: use xargo to build separate libstd)\n - #63289 (Don't recommend `extern crate` syntax)\n - #63373 (gitignore: add comment explaining policy)\n - #63374 (move of packed fields might or might not occur when they actually are sufficiently aligned)\n - #63381 (reduce visibility)\n - #63387 (Test interaction between `async { ... }` and `?`, `return`, and `break`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0235c6e12166debd6990519714e3c3291041570c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0235c6e12166debd6990519714e3c3291041570c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "html_url": "https://github.com/rust-lang/rust/commit/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1a551e144335e0d60a637d12f410cf65849876", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1a551e144335e0d60a637d12f410cf65849876", "html_url": "https://github.com/rust-lang/rust/commit/2d1a551e144335e0d60a637d12f410cf65849876"}, {"sha": "87fb0ad4850ad710bb53440a12186006b498e785", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fb0ad4850ad710bb53440a12186006b498e785", "html_url": "https://github.com/rust-lang/rust/commit/87fb0ad4850ad710bb53440a12186006b498e785"}], "stats": {"total": 423, "additions": 270, "deletions": 153}, "files": [{"sha": "a0b491f42789a827f7f0e629eeaa0c3ae4a73a92", "filename": ".gitignore", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1,3 +1,7 @@\n+# This file should only ignore things that are generated during a build,\n+# generated by common IDEs, and optional files controlled by the user\n+# that affect the build (such as config.toml).\n+# FIXME: This needs cleanup.\n *~\n .#*\n .DS_Store\n@@ -14,20 +18,16 @@ __pycache__/\n .valgrindrc\n .vscode\n .favorites.json\n-/*-*-*-*/\n-/*-*-*/\n /Makefile\n-/build\n+/build/\n /config.toml\n /dist/\n /dl/\n-/doc\n+/doc/\n /inst/\n /llvm/\n /mingw-build/\n-/nd/\n /obj/\n-/rt/\n /rustllvm/\n /src/libcore/unicode/DerivedCoreProperties.txt\n /src/libcore/unicode/DerivedNormalizationProps.txt\n@@ -37,11 +37,7 @@ __pycache__/\n /src/libcore/unicode/SpecialCasing.txt\n /src/libcore/unicode/UnicodeData.txt\n /src/libcore/unicode/downloaded\n-/stage[0-9]+/\n-/target\n-target/\n-/test/\n-/tmp/\n+/target/\n tags\n tags.*\n TAGS\n@@ -50,17 +46,6 @@ TAGS.*\n \\#*\\#\n config.mk\n config.stamp\n-keywords.md\n-lexer.ml\n Session.vim\n-src/etc/dl\n-tmp.*.rs\n-version.md\n-version.ml\n-version.texi\n .cargo\n-!src/vendor/**\n-/src/target/\n-\n no_llvm_build\n-"}, {"sha": "cb9f388a8e47b22d28663ce8507a3c62d254e5ad", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -368,10 +368,6 @@\n # When creating source tarballs whether or not to create a source tarball.\n #dist-src = false\n \n-# Whether to also run the Miri tests suite when running tests.\n-# As a side-effect also generates MIR for all libraries.\n-#test-miri = false\n-\n # After building or testing extended tools (e.g. clippy and rustfmt), append the\n # result (broken, compiling, testing) into this JSON file.\n #save-toolstates = \"/path/to/toolstates.json\""}, {"sha": "f1b36f5858037b7f12fadf37c070c68ff886af21", "filename": "src/.gitignore", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2d1a551e144335e0d60a637d12f410cf65849876/src%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2d1a551e144335e0d60a637d12f410cf65849876/src%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2F.gitignore?ref=2d1a551e144335e0d60a637d12f410cf65849876", "patch": "@@ -1,46 +0,0 @@\n-*.a\n-*.aux\n-*.bc\n-*.boot\n-*.bz2\n-*.cmi\n-*.cmo\n-*.cmx\n-*.cp\n-*.cps\n-*.d\n-*.dSYM\n-*.def\n-*.diff\n-*.dll\n-*.dylib\n-*.elc\n-*.epub\n-*.exe\n-*.fn\n-*.html\n-*.kdev4\n-*.ky\n-*.ll\n-*.llvm\n-*.log\n-*.o\n-*.orig\n-*.out\n-*.patch\n-*.pdb\n-*.pdf\n-*.pg\n-*.pot\n-*.pyc\n-*.rej\n-*.rlib\n-*.rustc\n-*.so\n-*.swo\n-*.swp\n-*.tmp\n-*.toc\n-*.tp\n-*.vr\n-*.x86"}, {"sha": "54b689fb062a53ee9a02a8d3b26cf37a72e277f5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -143,8 +143,11 @@ fn main() {\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n-        // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(&sysroot);\n+        // actually downloaded, so we just always pass the `--sysroot` option,\n+        // unless one is already set.\n+        if !args.iter().any(|arg| arg == \"--sysroot\") {\n+            cmd.arg(\"--sysroot\").arg(&sysroot);\n+        }\n \n         cmd.arg(\"-Zexternal-macro-backtrace\");\n \n@@ -285,20 +288,6 @@ fn main() {\n             }\n         }\n \n-        // When running miri tests, we need to generate MIR for all libraries\n-        if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") {\n-            // The flags here should be kept in sync with `add_miri_default_args`\n-            // in miri's `src/lib.rs`.\n-            cmd.arg(\"-Zalways-encode-mir\");\n-            cmd.arg(\"--cfg=miri\");\n-            // These options are preferred by miri, to be able to perform better validation,\n-            // but the bootstrap compiler might not understand them.\n-            if stage != \"0\" {\n-                cmd.arg(\"-Zmir-emit-retag\");\n-                cmd.arg(\"-Zmir-opt-level=0\");\n-            }\n-        }\n-\n         if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {\n             cmd.arg(\"--remap-path-prefix\").arg(&map);\n         }"}, {"sha": "e54c9360baeceeac8163e0ec67db44a4f487ffa6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -543,15 +543,6 @@ impl<'a> Builder<'a> {\n             parent: Cell::new(None),\n         };\n \n-        if kind == Kind::Dist {\n-            assert!(\n-                !builder.config.test_miri,\n-                \"Do not distribute with miri enabled.\\n\\\n-                The distributed libraries would include all MIR (increasing binary size).\n-                The distributed MIR would include validation statements.\"\n-            );\n-        }\n-\n         builder\n     }\n \n@@ -981,7 +972,6 @@ impl<'a> Builder<'a> {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n                 },\n             )\n-            .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir());\n \n         if let Some(host_linker) = self.linker(compiler.host) {"}, {"sha": "a5bfafdfdb4dcf5b45e91b75dd25827b9fdab22f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -128,7 +128,6 @@ pub struct Config {\n     pub low_priority: bool,\n     pub channel: String,\n     pub verbose_tests: bool,\n-    pub test_miri: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n     pub missing_tools: bool,\n@@ -315,7 +314,6 @@ struct Rust {\n     debug: Option<bool>,\n     dist_src: Option<bool>,\n     verbose_tests: Option<bool>,\n-    test_miri: Option<bool>,\n     incremental: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n@@ -375,7 +373,6 @@ impl Config {\n         config.codegen_tests = true;\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n-        config.test_miri = false;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n         config.deny_warnings = true;\n@@ -557,7 +554,6 @@ impl Config {\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.verbose_tests, rust.verbose_tests);\n-            set(&mut config.test_miri, rust.test_miri);\n             // in the case \"false\" is set explicitly, do not overwrite the command line args\n             if let Some(true) = rust.incremental {\n                 config.incremental = true;"}, {"sha": "346f0cb2039c08ccbd8d17826cc7af7c24f84a75", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -36,7 +36,6 @@ def v(*args):\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")\n o(\"parallel-compiler\", \"rust.parallel-compiler\", \"build a multi-threaded rustc\")\n-o(\"test-miri\", \"rust.test-miri\", \"run miri's test suite\")\n o(\"verbose-tests\", \"rust.verbose-tests\", \"enable verbose output when running tests\")\n o(\"ccache\", \"llvm.ccache\", \"invoke gcc/clang via ccache to reuse object files between builds\")\n o(\"sccache\", None, \"invoke gcc/clang via sccache to reuse object files between builds\")"}, {"sha": "b72aa78f3de191c330134764a625d3d251915177", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -540,9 +540,7 @@ impl Build {\n             Mode::Rustc => \"-rustc\",\n             Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n-            Mode::ToolStd => \"-tools\",\n-            Mode::ToolTest => \"-tools\",\n-            Mode::ToolRustc => \"-tools\",\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "c2c134bfd1d7da7d1a7225e448a62810e9873d74", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 78, "deletions": 14, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -363,11 +363,9 @@ pub struct Miri {\n impl Step for Miri {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let test_miri = run.builder.config.test_miri;\n-        run.path(\"src/tools/miri\").default_condition(test_miri)\n+        run.path(\"src/tools/miri\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -389,26 +387,92 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = tool::prepare_tool_cargo(builder,\n-                                                 compiler,\n-                                                 Mode::ToolRustc,\n-                                                 host,\n-                                                 \"test\",\n-                                                 \"src/tools/miri\",\n-                                                 SourceType::Submodule,\n-                                                 &[]);\n+            // # Run `cargo miri setup`.\n+            // As a side-effect, this will install xargo.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"run\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n+            cargo\n+                .arg(\"--bin\")\n+                .arg(\"cargo-miri\")\n+                .arg(\"--\")\n+                .arg(\"miri\")\n+                .arg(\"setup\");\n+\n+            // Tell `cargo miri` not to worry about the sysroot mismatch (we built with\n+            // stage1 but run with stage2).\n+            cargo.env(\"MIRI_SKIP_SYSROOT_CHECK\", \"1\");\n+            // Tell `cargo miri setup` where to find the sources.\n+            cargo.env(\"XARGO_RUST_SRC\", builder.src.join(\"src\"));\n+            // Debug things.\n+            cargo.env(\"RUST_BACKTRACE\", \"1\");\n+            // Configure `cargo install` path, and let cargo-miri know that that's where\n+            // xargo ends up.\n+            cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out); // cargo adds a `bin/`\n+            cargo.env(\"XARGO\", builder.out.join(\"bin\").join(\"xargo\"));\n+\n+            if !try_run(builder, &mut cargo) {\n+                return;\n+            }\n+\n+            // # Determine where Miri put its sysroot.\n+            // To this end, we run `cargo miri setup --env` and capture the output.\n+            // (We do this separately from the above so that when the setup actually\n+            // happens we get some output.)\n+            // We re-use the `cargo` from above.\n+            cargo.arg(\"--env\");\n+\n+            // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n+            let miri_sysroot = if builder.config.dry_run {\n+                String::new()\n+            } else {\n+                builder.verbose(&format!(\"running: {:?}\", cargo));\n+                let out = cargo.output()\n+                    .expect(\"We already ran `cargo miri setup` before and that worked\");\n+                assert!(out.status.success(), \"`cargo miri setup` returned with non-0 exit code\");\n+                // Output is \"MIRI_SYSROOT=<str>\\n\".\n+                let stdout = String::from_utf8(out.stdout)\n+                    .expect(\"`cargo miri setup` stdout is not valid UTF-8\");\n+                let stdout = stdout.trim();\n+                builder.verbose(&format!(\"`cargo miri setup --env` returned: {:?}\", stdout));\n+                let sysroot = stdout.splitn(2, '=')\n+                    .nth(1).expect(\"`cargo miri setup` stdout did not contain '='\");\n+                sysroot.to_owned()\n+            };\n+\n+            // # Run `cargo test`.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"test\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n \n             // miri tests need to know about the stage sysroot\n-            cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n+            cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI_PATH\", miri);\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo) {\n-                builder.save_toolstate(\"miri\", ToolState::TestPass);\n+            if !try_run(builder, &mut cargo) {\n+                return;\n             }\n+\n+            // # Done!\n+            builder.save_toolstate(\"miri\", ToolState::TestPass);\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n         }"}, {"sha": "687856cca6b62cc2b860afb59964d8c0d8d95e00", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -254,7 +254,7 @@ jobs:\n       x86_64-msvc-tools:\n         MSYS_BITS: 64\n         SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json\n \n       # 32/64-bit MinGW builds.\n       #"}, {"sha": "f11ae7a34cb91fcd45c4f6af30f5e6e9f0c1c6eb", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -23,6 +23,5 @@ COPY x86_64-gnu-tools/repo.sh /tmp/\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\\n-  --enable-test-miri \\\n   --save-toolstates=/tmp/toolstates.json\n ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json linux"}, {"sha": "271ddcc4662cf0b53105336f7ac270dd4369d4a2", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -188,7 +188,8 @@\n //! you do not accidentally use `self`/`this` in a way that is in conflict with pinning.\n //!\n //! Moreover, if your type is `#[repr(packed)]`, the compiler will automatically\n-//! move fields around to be able to drop them. As a consequence, you cannot use\n+//! move fields around to be able to drop them. It might even do\n+//! that for fields that happen to be sufficiently aligned. As a consequence, you cannot use\n //! pinning with a `#[repr(packed)]` type.\n //!\n //! # Projections and Structural Pinning"}, {"sha": "e7feccf5069575d54f1b3771ded34d8f35588f39", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -4084,7 +4084,7 @@ impl<'a> Resolver<'a> {\n                                 )),\n                             )\n                         } else if !ident.is_reserved() {\n-                            (format!(\"maybe a missing `extern crate {};`?\", ident), None)\n+                            (format!(\"maybe a missing crate `{}`?\", ident), None)\n                         } else {\n                             // the parser will already have complained about the keyword being used\n                             return PathResult::NonModule(PartialRes::new(Res::Err));"}, {"sha": "4e29c77c89e42f7000a2d36c857a37998663779c", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -125,12 +125,12 @@ impl StableSourceFileId {\n \n #[derive(Default)]\n pub(super) struct SourceMapFiles {\n-    pub(super) source_files: Vec<Lrc<SourceFile>>,\n+    source_files: Vec<Lrc<SourceFile>>,\n     stable_id_to_source_file: FxHashMap<StableSourceFileId, Lrc<SourceFile>>\n }\n \n pub struct SourceMap {\n-    pub(super) files: Lock<SourceMapFiles>,\n+    files: Lock<SourceMapFiles>,\n     file_loader: Box<dyn FileLoader + Sync + Send>,\n     // This is used to apply the file path remapping as specified via\n     // --remap-path-prefix to all SourceFiles allocated within this SourceMap."}, {"sha": "6a766ede0ed87acc18faa1de25e1611b0524100b", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -0,0 +1,67 @@\n+// Test that `async { .. }` blocks:\n+// 1. do not allow `break` expressions.\n+// 2. get targeted by `return` and not the parent function.\n+// 3. get targeted by `?` and not the parent function.\n+//\n+// edition:2018\n+// ignore-tidy-linelength\n+\n+#![feature(async_await)]\n+\n+fn main() {}\n+\n+use core::future::Future;\n+\n+fn return_targets_async_block_not_fn() -> u8 {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        return 0u8;\n+    };\n+    let _: &dyn Future<Output = ()> = &block;\n+    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+}\n+\n+async fn return_targets_async_block_not_async_fn() -> u8 {\n+    //~^ ERROR type mismatch resolving\n+    let block = async {\n+        return 0u8;\n+    };\n+    let _: &dyn Future<Output = ()> = &block;\n+    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+}\n+\n+fn no_break_in_async_block() {\n+    async {\n+        break 0u8; //~ ERROR `break` inside of a closure\n+        // FIXME: This diagnostic is pretty bad.\n+    };\n+}\n+\n+fn no_break_in_async_block_even_with_outer_loop() {\n+    loop {\n+        async {\n+            break 0u8; //~ ERROR `break` inside of a closure\n+        };\n+    }\n+}\n+\n+struct MyErr;\n+fn err() -> Result<u8, MyErr> { Err(MyErr) }\n+\n+fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        err()?;\n+        Ok(())\n+    };\n+    let _: &dyn Future<Output = Result<(), MyErr>> = &block;\n+}\n+\n+fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        err()?;\n+        Ok(())\n+    };\n+    let _: &dyn Future<Output = Result<(), MyErr>> = &block;\n+}"}, {"sha": "96927ac9632d61d7977b99025e065a0c41840abf", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -0,0 +1,79 @@\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n+   |\n+LL |         break 0u8;\n+   |         ^^^^^^^^^ cannot break inside of a closure\n+\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/async-block-control-flow-static-semantics.rs:43:13\n+   |\n+LL |             break 0u8;\n+   |             ^^^^^^^^^ cannot break inside of a closure\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n+   |\n+LL | fn return_targets_async_block_not_fn() -> u8 {\n+   |    ---------------------------------      ^^ expected u8, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:20:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:29:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:24:55\n+   |\n+LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n+   |                                                       ^^ expected (), found u8\n+   |\n+   = note: expected type `()`\n+              found type `u8`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:51:44\n+   |\n+LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `std::result::Result<u8, MyErr>`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:60:50\n+   |\n+LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `std::result::Result<u8, MyErr>`\n+              found type `()`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0267, E0271, E0308.\n+For more information about an error, try `rustc --explain E0267`."}, {"sha": "afb031c2252343033751903a847bd37d079aa1d6", "filename": "src/test/ui/error-codes/E0432.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Ferror-codes%2FE0432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Ferror-codes%2FE0432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0432.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `something`\n   --> $DIR/E0432.rs:1:5\n    |\n LL | use something::Foo;\n-   |     ^^^^^^^^^ maybe a missing `extern crate something;`?\n+   |     ^^^^^^^^^ maybe a missing crate `something`?\n \n error: aborting due to previous error\n "}, {"sha": "a59f4c952bb083bba92e37ea9b30d41e6b87e83e", "filename": "src/test/ui/extern-prelude-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,13 +2,13 @@ error[E0432]: unresolved import `extern_prelude`\n   --> $DIR/extern-prelude-fail.rs:7:9\n    |\n LL |     use extern_prelude::S;\n-   |         ^^^^^^^^^^^^^^ maybe a missing `extern crate extern_prelude;`?\n+   |         ^^^^^^^^^^^^^^ maybe a missing crate `extern_prelude`?\n \n-error[E0433]: failed to resolve: maybe a missing `extern crate extern_prelude;`?\n+error[E0433]: failed to resolve: maybe a missing crate `extern_prelude`?\n   --> $DIR/extern-prelude-fail.rs:8:15\n    |\n LL |     let s = ::extern_prelude::S;\n-   |               ^^^^^^^^^^^^^^ maybe a missing `extern crate extern_prelude;`?\n+   |               ^^^^^^^^^^^^^^ maybe a missing crate `extern_prelude`?\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2f4c220ee9505d7b2978c4df5fd50f1ae2860b2a", "filename": "src/test/ui/feature-gates/feature-gate-extern_absolute_paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_absolute_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_absolute_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_absolute_paths.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,13 +2,13 @@ error[E0432]: unresolved import `core`\n   --> $DIR/feature-gate-extern_absolute_paths.rs:1:5\n    |\n LL | use core::default;\n-   |     ^^^^ maybe a missing `extern crate core;`?\n+   |     ^^^^ maybe a missing crate `core`?\n \n-error[E0433]: failed to resolve: maybe a missing `extern crate core;`?\n+error[E0433]: failed to resolve: maybe a missing crate `core`?\n   --> $DIR/feature-gate-extern_absolute_paths.rs:4:19\n    |\n LL |     let _: u8 = ::core::default::Default();\n-   |                   ^^^^ maybe a missing `extern crate core;`?\n+   |                   ^^^^ maybe a missing crate `core`?\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7bb413be59ff3666cab5df8873a73181bbc96b10", "filename": "src/test/ui/import3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimport3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimport3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimport3.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `main`\n   --> $DIR/import3.rs:2:5\n    |\n LL | use main::bar;\n-   |     ^^^^ maybe a missing `extern crate main;`?\n+   |     ^^^^ maybe a missing crate `main`?\n \n error: aborting due to previous error\n "}, {"sha": "bbec2aae825928ea4ef8e7ac3176c421efcf0aa3", "filename": "src/test/ui/imports/issue-53269.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Fissue-53269.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Fissue-53269.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-53269.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `nonexistent_module`\n   --> $DIR/issue-53269.rs:6:9\n    |\n LL |     use nonexistent_module::mac;\n-   |         ^^^^^^^^^^^^^^^^^^ maybe a missing `extern crate nonexistent_module;`?\n+   |         ^^^^^^^^^^^^^^^^^^ maybe a missing crate `nonexistent_module`?\n \n error[E0659]: `mac` is ambiguous (`macro_rules` vs non-`macro_rules` from other module)\n   --> $DIR/issue-53269.rs:8:5"}, {"sha": "aa103ba01e34e52ff11883c071f4bf87438add59", "filename": "src/test/ui/imports/issue-55457.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -11,7 +11,7 @@ error[E0432]: unresolved import `non_existent`\n   --> $DIR/issue-55457.rs:2:5\n    |\n LL | use non_existent::non_existent;\n-   |     ^^^^^^^^^^^^ maybe a missing `extern crate non_existent;`?\n+   |     ^^^^^^^^^^^^ maybe a missing crate `non_existent`?\n \n error: cannot determine resolution for the derive macro `NonExistent`\n   --> $DIR/issue-55457.rs:5:10"}, {"sha": "e8c827a6179bba067bd24450ec92c240a919f257", "filename": "src/test/ui/imports/unresolved-imports-used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -8,7 +8,7 @@ error[E0432]: unresolved import `foo`\n   --> $DIR/unresolved-imports-used.rs:10:5\n    |\n LL | use foo::bar;\n-   |     ^^^ maybe a missing `extern crate foo;`?\n+   |     ^^^ maybe a missing crate `foo`?\n \n error[E0603]: function `quz` is private\n   --> $DIR/unresolved-imports-used.rs:8:10"}, {"sha": "5cd76d21f91cf6a245442fa4bca5e9c77afaf054", "filename": "src/test/ui/issues/issue-1697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1697.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1,6 +1,6 @@\n // Testing that we don't fail abnormally after hitting the errors\n \n use unresolved::*; //~ ERROR unresolved import `unresolved` [E0432]\n-                   //~^ maybe a missing `extern crate unresolved;`?\n+                   //~^ maybe a missing crate `unresolved`?\n \n fn main() {}"}, {"sha": "a76fd30991493249b5829e96a5a682fa2df71e45", "filename": "src/test/ui/issues/issue-1697.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-1697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-1697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1697.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `unresolved`\n   --> $DIR/issue-1697.rs:3:5\n    |\n LL | use unresolved::*;\n-   |     ^^^^^^^^^^ maybe a missing `extern crate unresolved;`?\n+   |     ^^^^^^^^^^ maybe a missing crate `unresolved`?\n \n error: aborting due to previous error\n "}, {"sha": "d3bf404c99a974b95673befcdb3f5e72c296fd4c", "filename": "src/test/ui/issues/issue-33464.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-33464.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-33464.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33464.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,19 +2,19 @@ error[E0432]: unresolved import `abc`\n   --> $DIR/issue-33464.rs:3:5\n    |\n LL | use abc::one_el;\n-   |     ^^^ maybe a missing `extern crate abc;`?\n+   |     ^^^ maybe a missing crate `abc`?\n \n error[E0432]: unresolved import `abc`\n   --> $DIR/issue-33464.rs:5:5\n    |\n LL | use abc::{a, bbb, cccccc};\n-   |     ^^^ maybe a missing `extern crate abc;`?\n+   |     ^^^ maybe a missing crate `abc`?\n \n error[E0432]: unresolved import `a_very_long_name`\n   --> $DIR/issue-33464.rs:7:5\n    |\n LL | use a_very_long_name::{el, el2};\n-   |     ^^^^^^^^^^^^^^^^ maybe a missing `extern crate a_very_long_name;`?\n+   |     ^^^^^^^^^^^^^^^^ maybe a missing crate `a_very_long_name`?\n \n error: aborting due to 3 previous errors\n "}, {"sha": "caf9d5d6d627755a1c5a95319061630ee56f2da2", "filename": "src/test/ui/issues/issue-36881.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-36881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-36881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36881.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `issue_36881_aux`\n   --> $DIR/issue-36881.rs:5:9\n    |\n LL |     use issue_36881_aux::Foo;\n-   |         ^^^^^^^^^^^^^^^ maybe a missing `extern crate issue_36881_aux;`?\n+   |         ^^^^^^^^^^^^^^^ maybe a missing crate `issue_36881_aux`?\n \n error: aborting due to previous error\n "}, {"sha": "6ef5359f9801e483a083043b1bfc614e9eed3c7f", "filename": "src/test/ui/issues/issue-37887.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `libc`\n   --> $DIR/issue-37887.rs:3:9\n    |\n LL |     use libc::*;\n-   |         ^^^^ maybe a missing `extern crate libc;`?\n+   |         ^^^^ maybe a missing crate `libc`?\n \n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/issue-37887.rs:2:5"}, {"sha": "711fa4dd405bc0c4def9e9f4671e36f1316c5d06", "filename": "src/test/ui/macros/meta-item-absolute-path.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: maybe a missing `extern crate Absolute;`?\n+error[E0433]: failed to resolve: maybe a missing crate `Absolute`?\n   --> $DIR/meta-item-absolute-path.rs:1:12\n    |\n LL | #[derive(::Absolute)]\n-   |            ^^^^^^^^ maybe a missing `extern crate Absolute;`?\n+   |            ^^^^^^^^ maybe a missing crate `Absolute`?\n \n error: aborting due to previous error\n "}, {"sha": "a8c269378c2ee6840126cf3e71efd96ecfa410fc", "filename": "src/test/ui/privacy/restricted/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -47,6 +47,6 @@ fn main() {\n }\n \n mod pathological {\n-    pub(in bad::path) mod m1 {} //~ ERROR failed to resolve: maybe a missing `extern crate bad;`?\n+    pub(in bad::path) mod m1 {} //~ ERROR failed to resolve: maybe a missing crate `bad`?\n     pub(in foo) mod m2 {} //~ ERROR visibilities can only be restricted to ancestor modules\n }"}, {"sha": "a23973d0853f137f22d999a5706de5f3689363b5", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: maybe a missing `extern crate bad;`?\n+error[E0433]: failed to resolve: maybe a missing crate `bad`?\n   --> $DIR/test.rs:50:12\n    |\n LL |     pub(in bad::path) mod m1 {}\n-   |            ^^^ maybe a missing `extern crate bad;`?\n+   |            ^^^ maybe a missing crate `bad`?\n \n error: visibilities can only be restricted to ancestor modules\n   --> $DIR/test.rs:51:12"}, {"sha": "b65c3dfb90b4277911aecee662633ecccdf81809", "filename": "src/test/ui/unresolved/unresolved-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.rs?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1,5 +1,5 @@\n use foo::bar; //~ ERROR unresolved import `foo` [E0432]\n-              //~^ maybe a missing `extern crate foo;`?\n+              //~^ maybe a missing crate `foo`?\n \n use bar::Baz as x; //~ ERROR unresolved import `bar::Baz` [E0432]\n                    //~| no `Baz` in `bar`"}, {"sha": "d4bfea57809b04b072b4b4dcca88360fba386b0e", "filename": "src/test/ui/unresolved/unresolved-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-import.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `foo`\n   --> $DIR/unresolved-import.rs:1:5\n    |\n LL | use foo::bar;\n-   |     ^^^ maybe a missing `extern crate foo;`?\n+   |     ^^^ maybe a missing crate `foo`?\n \n error[E0432]: unresolved import `bar::Baz`\n   --> $DIR/unresolved-import.rs:4:5"}, {"sha": "e30e5c3ceb162dd513a1199efbcd3c260c7d09fc", "filename": "src/test/ui/use/use-mod/use-mod-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa3d9a7b5d3a46a7f158e8881146331a6bc9243/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -14,7 +14,7 @@ error[E0432]: unresolved import `foo`\n   --> $DIR/use-mod-4.rs:1:5\n    |\n LL | use foo::self;\n-   |     ^^^ maybe a missing `extern crate foo;`?\n+   |     ^^^ maybe a missing crate `foo`?\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b12ebfc3de853abf6b4260c44a71cd51323803c5", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=5aa3d9a7b5d3a46a7f158e8881146331a6bc9243", "patch": "@@ -1 +1 @@\n-Subproject commit 39a524f694e42cfb178639d490d3fdbbaf8569dc\n+Subproject commit b12ebfc3de853abf6b4260c44a71cd51323803c5"}]}