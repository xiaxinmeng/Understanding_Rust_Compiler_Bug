{"sha": "3127a9c60f267c862d2b0f1250c28f38891b94aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjdhOWM2MGYyNjdjODYyZDJiMGYxMjUwYzI4ZjM4ODkxYjk0YWE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-08T16:18:03Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:43:54Z"}, "message": "Prepare mir::Constant for ty::Const only supporting valtrees", "tree": {"sha": "2985fdcfe65cc2360239543f4b0c4f6730e0f9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2985fdcfe65cc2360239543f4b0c4f6730e0f9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3127a9c60f267c862d2b0f1250c28f38891b94aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3127a9c60f267c862d2b0f1250c28f38891b94aa", "html_url": "https://github.com/rust-lang/rust/commit/3127a9c60f267c862d2b0f1250c28f38891b94aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3127a9c60f267c862d2b0f1250c28f38891b94aa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ecde6f5db72c0a99824ec91f57411442026141d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ecde6f5db72c0a99824ec91f57411442026141d", "html_url": "https://github.com/rust-lang/rust/commit/3ecde6f5db72c0a99824ec91f57411442026141d"}], "stats": {"total": 518, "additions": 367, "deletions": 151}, "files": [{"sha": "23ad5267c569ce804ef245f012a03eb2434a7c51", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n };\n-use rustc_middle::ty::{Const, ConstKind};\n+use rustc_middle::ty::ConstKind;\n \n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n@@ -39,7 +39,10 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let const_ = fx.monomorphize(constant.literal);\n+        let const_ = match fx.monomorphize(constant.literal) {\n+            ConstantSource::Ty(ct) => ct,\n+            ConstantSource::Val(..) => continue,\n+        };\n         match const_.val {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(def, ref substs, promoted) => {\n@@ -113,19 +116,17 @@ pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = fx.monomorphize(constant.literal);\n+    let const_ = match fx.monomorphize(constant.literal) {\n+        ConstantSource::Ty(ct) => ct,\n+        ConstantSource::Val(val, ty) => return codegen_const_value(fx, val, ty),\n+    };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(\n-                fx,\n-                def.did,\n-                fx.layout_of(fx.monomorphize(&constant.literal.ty)),\n-            )\n-            .to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(def, ref substs, promoted) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n@@ -422,11 +423,14 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n pub(crate) fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, '_, 'tcx>,\n     operand: &Operand<'tcx>,\n-) -> Option<&'tcx Const<'tcx>> {\n+) -> Option<ConstValue<'tcx>> {\n     match operand {\n         Operand::Copy(_) | Operand::Move(_) => None,\n-        Operand::Constant(const_) => {\n-            Some(fx.monomorphize(const_.literal).eval(fx.tcx, ParamEnv::reveal_all()))\n-        }\n+        Operand::Constant(const_) => match const_.literal {\n+            ConstantSource::Ty(const_) => {\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n+            }\n+            ConstantSource::Val(val, _) => Some(val),\n+        },\n     }\n }"}, {"sha": "83c91f789cd25eb219e10431cc1bf44905e32d2c", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         llvm.x86.sse2.cmp.ps | llvm.x86.sse2.cmp.pd, (c x, c y, o kind) {\n             let kind_const = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n+            let flt_cc = match kind_const.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n@@ -84,7 +84,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.psrli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };\n@@ -94,7 +94,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.pslli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };"}, {"sha": "d17136080fea3212375348c3a902798dff676861", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -85,8 +85,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 use rustc_middle::mir::interpret::*;\n                 let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n \n-                let idx_bytes = match idx_const.val {\n-                    ty::ConstKind::Value(ConstValue::ByRef { alloc, offset }) => {\n+                let idx_bytes = match idx_const {\n+                    ConstValue::ByRef { alloc, offset } => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()\n@@ -130,7 +130,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n@@ -159,7 +159,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 return;\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));"}, {"sha": "04225ddd36ffb1bed8b274083845edda2455718f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -860,7 +860,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n                 mir::InlineAsmOperand::SymFn { ref value } => {\n                     let literal = self.monomorphize(value.literal);\n-                    if let ty::FnDef(def_id, substs) = *literal.ty.kind() {\n+                    if let ty::FnDef(def_id, substs) = *literal.ty().kind() {\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             bx.tcx(),\n                             ty::ParamEnv::reveal_all(),"}, {"sha": "d73e2325a8b731266a407f169b0d25e9b7ac2764", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -24,7 +24,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &self,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n-        match self.monomorphize(constant.literal).val {\n+        let ct = self.monomorphize(constant.literal);\n+        let ct = match ct {\n+            mir::ConstantSource::Ty(ct) => ct,\n+            mir::ConstantSource::Val(val, _) => return Ok(val),\n+        };\n+        match ct.val {\n             ty::ConstKind::Unevaluated(def, substs, promoted) => self\n                 .cx\n                 .tcx()"}, {"sha": "cddcc7d576ac4b4cc21a0cca1ed6e004fb8841cd", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -47,7 +47,25 @@ pub enum ConstValue<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ConstValue<'_>, 32);\n \n+impl From<Scalar> for ConstValue<'tcx> {\n+    fn from(s: Scalar) -> Self {\n+        Self::Scalar(s)\n+    }\n+}\n+\n impl<'tcx> ConstValue<'tcx> {\n+    pub fn lift<'lifted>(self, tcx: TyCtxt<'lifted>) -> Option<ConstValue<'lifted>> {\n+        Some(match self {\n+            ConstValue::Scalar(s) => ConstValue::Scalar(s),\n+            ConstValue::Slice { data, start, end } => {\n+                ConstValue::Slice { data: tcx.lift(data)?, start, end }\n+            }\n+            ConstValue::ByRef { alloc, offset } => {\n+                ConstValue::ByRef { alloc: tcx.lift(alloc)?, offset }\n+            }\n+        })\n+    }\n+\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar> {\n         match *self {"}, {"sha": "20ba82a8e86cfa46e45aa0823b17346df6f63f63", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 124, "deletions": 9, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -11,12 +11,12 @@ use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n-use crate::ty::{AdtDef, InstanceDef, Region, UserTypeAnnotationIndex};\n+use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{Size, VariantIdx};\n \n use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n@@ -30,6 +30,7 @@ use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::borrow::Cow;\n+use std::convert::TryInto;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{ControlFlow, Index, IndexMut};\n use std::slice;\n@@ -2032,7 +2033,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span,\n             user_ty: None,\n-            literal: ty::Const::zero_sized(tcx, ty),\n+            literal: ConstantSource::Ty(ty::Const::zero_sized(tcx, ty)),\n         })\n     }\n \n@@ -2063,7 +2064,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span,\n             user_ty: None,\n-            literal: ty::Const::from_scalar(tcx, val, ty),\n+            literal: ConstantSource::Val(val.into(), ty),\n         })\n     }\n \n@@ -2405,12 +2406,21 @@ pub struct Constant<'tcx> {\n     /// Needed for NLL to impose user-given type constraints.\n     pub user_ty: Option<UserTypeAnnotationIndex>,\n \n-    pub literal: &'tcx ty::Const<'tcx>,\n+    pub literal: ConstantSource<'tcx>,\n+}\n+\n+#[derive(Clone, Copy, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n+pub enum ConstantSource<'tcx> {\n+    /// This constant came from the type system\n+    Ty(&'tcx ty::Const<'tcx>),\n+    /// This constant cannot go back into the type system, as it represents\n+    /// something the type system cannot handle (e.g. pointers).\n+    Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n }\n \n impl Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n-        match self.literal.val.try_to_scalar() {\n+        match self.literal.const_for_ty()?.val.try_to_scalar() {\n             Some(Scalar::Ptr(ptr)) => match tcx.global_alloc(ptr.alloc_id) {\n                 GlobalAlloc::Static(def_id) => {\n                     assert!(!tcx.is_thread_local_static(def_id));\n@@ -2422,7 +2432,92 @@ impl Constant<'tcx> {\n         }\n     }\n     pub fn ty(&self) -> Ty<'tcx> {\n-        self.literal.ty\n+        self.literal.ty()\n+    }\n+}\n+\n+impl From<&'tcx ty::Const<'tcx>> for ConstantSource<'tcx> {\n+    fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n+        Self::Ty(ct)\n+    }\n+}\n+\n+impl ConstantSource<'tcx> {\n+    /// Returns `None` if the constant is not trivially safe for use in the type system.\n+    pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {\n+        match self {\n+            ConstantSource::Ty(c) => Some(c),\n+            ConstantSource::Val(..) => None,\n+        }\n+    }\n+\n+    pub fn ty(&self) -> Ty<'tcx> {\n+        match self {\n+            ConstantSource::Ty(c) => c.ty,\n+            ConstantSource::Val(_, ty) => ty,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {\n+        match self {\n+            ConstantSource::Ty(c) => c.val.try_to_value(),\n+            ConstantSource::Val(val, _) => Some(val),\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn try_to_scalar(self) -> Option<Scalar> {\n+        self.try_to_value()?.try_to_scalar()\n+    }\n+\n+    #[inline]\n+    pub fn try_to_scalar_int(self) -> Option<ScalarInt> {\n+        self.try_to_value()?.try_to_scalar()?.to_int().ok()\n+    }\n+\n+    #[inline]\n+    pub fn try_to_bits(self, size: Size) -> Option<u128> {\n+        self.try_to_scalar_int()?.to_bits(size).ok()\n+    }\n+\n+    #[inline]\n+    pub fn try_to_bool(self) -> Option<bool> {\n+        self.try_to_scalar_int()?.try_into().ok()\n+    }\n+\n+    #[inline]\n+    pub fn try_eval_bits(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Option<u128> {\n+        match self {\n+            Self::Ty(ct) => ct.try_eval_bits(tcx, param_env, ty),\n+            Self::Val(val, t) => {\n+                assert_eq!(*t, ty);\n+                let size =\n+                    tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n+                val.try_to_bits(size)\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Option<bool> {\n+        match self {\n+            Self::Ty(ct) => ct.try_eval_bool(tcx, param_env),\n+            Self::Val(val, _) => val.try_to_bool(),\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Option<u64> {\n+        match self {\n+            Self::Ty(ct) => ct.try_eval_usize(tcx, param_env),\n+            Self::Val(val, _) => val.try_to_machine_usize(tcx),\n+        }\n     }\n }\n \n@@ -2609,11 +2704,14 @@ impl<'tcx> Debug for Constant<'tcx> {\n \n impl<'tcx> Display for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n-        match self.literal.ty.kind() {\n+        match self.ty().kind() {\n             ty::FnDef(..) => {}\n             _ => write!(fmt, \"const \")?,\n         }\n-        pretty_print_const(self.literal, fmt, true)\n+        match self.literal {\n+            ConstantSource::Ty(c) => pretty_print_const(c, fmt, true),\n+            ConstantSource::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n+        }\n     }\n }\n \n@@ -2632,6 +2730,23 @@ fn pretty_print_const(\n     })\n }\n \n+fn pretty_print_const_value(\n+    val: interpret::ConstValue<'tcx>,\n+    ty: Ty<'tcx>,\n+    fmt: &mut Formatter<'_>,\n+    print_types: bool,\n+) -> fmt::Result {\n+    use crate::ty::print::PrettyPrinter;\n+    ty::tls::with(|tcx| {\n+        let val = val.lift(tcx).unwrap();\n+        let ty = tcx.lift(ty).unwrap();\n+        let mut cx = FmtPrinter::new(tcx, fmt, Namespace::ValueNS);\n+        cx.print_alloc_ids = true;\n+        cx.pretty_print_const_value(val, ty, print_types)?;\n+        Ok(())\n+    })\n+}\n+\n impl<'tcx> graph::DirectedGraph for Body<'tcx> {\n     type Node = BasicBlock;\n }"}, {"sha": "6e8191459769829af787e8ba4324832168c314da", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> Operand<'tcx> {\n     {\n         match self {\n             &Operand::Copy(ref l) | &Operand::Move(ref l) => l.ty(local_decls, tcx).ty,\n-            &Operand::Constant(ref c) => c.literal.ty,\n+            &Operand::Constant(ref c) => c.literal.ty(),\n         }\n     }\n }"}, {"sha": "4ad69a2cb98da201f1b2adb2f088fe6d8b6adf50", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -343,5 +343,22 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.literal.visit_with(visitor)\n+        // FIXME: should this be visiting the `user_ty`, too?\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ConstantSource<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        match self {\n+            ConstantSource::Ty(c) => ConstantSource::Ty(c.fold_with(folder)),\n+            ConstantSource::Val(v, t) => ConstantSource::Val(v, t.fold_with(folder)),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match *self {\n+            ConstantSource::Ty(c) => c.visit_with(visitor),\n+            ConstantSource::Val(_, t) => t.visit_with(visitor),\n+        }\n     }\n }"}, {"sha": "9015e7718647b668b47bbbc4eba91d5f529b4d74", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -871,7 +871,10 @@ macro_rules! make_mir_visitor {\n \n                 self.visit_span(span);\n                 drop(user_ty); // no visit method for this\n-                self.visit_const(literal, location);\n+                match literal {\n+                    ConstantSource::Ty(ct) => self.visit_const(ct, location),\n+                    ConstantSource::Val(_, t) => self.visit_ty(t, TyContext::Location(location)),\n+                }\n             }\n \n             fn super_span(&mut self, _span: & $($mutability)? Span) {"}, {"sha": "bc15b3972c9fce14e6122d077ad2a8458c6eb2e0", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -81,12 +81,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let terminator = self.body[location.block].terminator();\n         debug!(\"add_moved_or_invoked_closure_note: terminator={:?}\", terminator);\n         if let TerminatorKind::Call {\n-            func: Operand::Constant(box Constant { literal: ty::Const { ty: const_ty, .. }, .. }),\n+            func: Operand::Constant(box Constant { literal, .. }),\n             args,\n             ..\n         } = &terminator.kind\n         {\n-            if let ty::FnDef(id, _) = *const_ty.kind() {\n+            if let ty::FnDef(id, _) = *literal.ty().kind() {\n                 debug!(\"add_moved_or_invoked_closure_note: id={:?}\", id);\n                 if self.infcx.tcx.parent(id) == self.infcx.tcx.lang_items().fn_once_trait() {\n                     let closure = match args.first() {"}, {"sha": "d744db064b6c5c632ea7c00091b7e3d7327c50b3", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -282,7 +282,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        let ty = self.sanitize_type(constant, constant.literal.ty);\n+        let ty = self.sanitize_type(constant, constant.literal.ty());\n \n         self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {\n             let live_region_vid =\n@@ -296,7 +296,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n \n         if let Some(annotation_index) = constant.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n-                constant.literal.ty,\n+                constant.literal.ty(),\n                 ty::Variance::Invariant,\n                 &UserTypeProjection { base: annotation_index, projs: vec![] },\n                 location.to_locations(),\n@@ -308,13 +308,22 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     constant,\n                     \"bad constant user type {:?} vs {:?}: {:?}\",\n                     annotation,\n-                    constant.literal.ty,\n+                    constant.literal.ty(),\n                     terr,\n                 );\n             }\n         } else {\n             let tcx = self.tcx();\n-            if let ty::ConstKind::Unevaluated(def, substs, promoted) = constant.literal.val {\n+            let maybe_uneval = match constant.literal {\n+                ConstantSource::Ty(ct) => match ct.val {\n+                    ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                        Some((def, substs, promoted))\n+                    }\n+                    _ => None,\n+                },\n+                _ => None,\n+            };\n+            if let Some((def, substs, promoted)) = maybe_uneval {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,\n@@ -349,7 +358,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         location.to_locations(),\n                         ConstraintCategory::Boring,\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                            constant.literal.ty,\n+                            constant.literal.ty(),\n                             def.did,\n                             UserSubsts { substs, user_self_ty: None },\n                         )),\n@@ -367,7 +376,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 let unnormalized_ty = tcx.type_of(static_def_id);\n                 let locations = location.to_locations();\n                 let normalized_ty = self.cx.normalize(unnormalized_ty, locations);\n-                let literal_ty = constant.literal.ty.builtin_deref(true).unwrap().ty;\n+                let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;\n \n                 if let Err(terr) = self.cx.eq_types(\n                     normalized_ty,\n@@ -379,7 +388,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            if let ty::FnDef(def_id, substs) = *constant.literal.ty.kind() {\n+            if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {\n                 let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     instantiated_predicates,"}, {"sha": "149a9f81ea0d9a9bf8b353a6cec7f02a0111403d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -689,7 +689,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let span = const_.span;\n             let const_ =\n                 self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal);\n-            self.const_to_op(const_, None).map_err(|err| {\n+            self.mir_const_to_op(&const_, None).map_err(|err| {\n                 // If there was an error, set the span of the current frame to this constant.\n                 // Avoiding doing this when evaluation succeeds.\n                 self.frame_mut().loc = Err(span);"}, {"sha": "69ab2abaf27065ae12250d288ca642f0fd958d5e", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -532,7 +532,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all\n                 //   checked yet.\n                 // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n-                self.const_to_op(val, layout)?\n+\n+                self.mir_const_to_op(&val, layout)?\n             }\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n@@ -556,28 +557,45 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         val: &ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        let tag_scalar = |scalar| -> InterpResult<'tcx, _> {\n-            Ok(match scalar {\n-                Scalar::Ptr(ptr) => Scalar::Ptr(self.global_base_pointer(ptr)?),\n-                Scalar::Int(int) => Scalar::Int(int),\n-            })\n-        };\n-        // Early-return cases.\n-        let val_val = match val.val {\n+        match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def, substs)?;\n-                return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());\n+                Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into())\n             }\n             ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n-            ty::ConstKind::Value(val_val) => val_val,\n-        };\n+            ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),\n+        }\n+    }\n+\n+    crate fn mir_const_to_op(\n+        &self,\n+        val: &mir::ConstantSource<'tcx>,\n+        layout: Option<TyAndLayout<'tcx>>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        match val {\n+            mir::ConstantSource::Ty(ct) => self.const_to_op(ct, layout),\n+            mir::ConstantSource::Val(val, ty) => self.const_val_to_op(*val, ty, None),\n+        }\n+    }\n+\n+    crate fn const_val_to_op(\n+        &self,\n+        val_val: ConstValue<'tcx>,\n+        ty: Ty<'tcx>,\n+        layout: Option<TyAndLayout<'tcx>>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         // Other cases need layout.\n-        let layout =\n-            from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(val.ty))?;\n+        let tag_scalar = |scalar| -> InterpResult<'tcx, _> {\n+            Ok(match scalar {\n+                Scalar::Ptr(ptr) => Scalar::Ptr(self.global_base_pointer(ptr)?),\n+                Scalar::Int(int) => Scalar::Int(int),\n+            })\n+        };\n+        let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;\n         let op = match val_val {\n             ConstValue::ByRef { alloc, offset } => {\n                 let id = self.tcx.create_memory_alloc(alloc);"}, {"sha": "911224d8c1f445be9440f326bc5833feb1455d1f", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -684,7 +684,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 for op in operands {\n                     match *op {\n                         mir::InlineAsmOperand::SymFn { ref value } => {\n-                            let fn_ty = self.monomorphize(value.literal.ty);\n+                            let fn_ty = self.monomorphize(value.literal.ty());\n                             visit_fn_use(self.tcx, fn_ty, false, source, &mut self.output);\n                         }\n                         mir::InlineAsmOperand::SymStatic { def_id } => {"}, {"sha": "796d024771d7f4bc0de6d7eb52f0bae03c800ac6", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -421,7 +421,7 @@ impl CloneShimBuilder<'tcx> {\n         let func = Operand::Constant(box Constant {\n             span: self.span,\n             user_ty: None,\n-            literal: ty::Const::zero_sized(tcx, func_ty),\n+            literal: ty::Const::zero_sized(tcx, func_ty).into(),\n         });\n \n         let ref_loc = self.make_place(\n@@ -478,7 +478,7 @@ impl CloneShimBuilder<'tcx> {\n         box Constant {\n             span: self.span,\n             user_ty: None,\n-            literal: ty::Const::from_usize(self.tcx, value),\n+            literal: ty::Const::from_usize(self.tcx, value).into(),\n         }\n     }\n \n@@ -509,7 +509,7 @@ impl CloneShimBuilder<'tcx> {\n                 Rvalue::Use(Operand::Constant(box Constant {\n                     span: self.span,\n                     user_ty: None,\n-                    literal: len,\n+                    literal: len.into(),\n                 })),\n             ))),\n         ];\n@@ -768,7 +768,7 @@ fn build_call_shim<'tcx>(\n                 Operand::Constant(box Constant {\n                     span,\n                     user_ty: None,\n-                    literal: ty::Const::zero_sized(tcx, ty),\n+                    literal: ty::Const::zero_sized(tcx, ty).into(),\n                 }),\n                 rcvr.into_iter().collect::<Vec<_>>(),\n             )"}, {"sha": "748f65cba2260b21f6de9ba07c6891aaee10138f", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -246,25 +246,27 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let ty::ConstKind::Unevaluated(def, _, promoted) = constant.literal.val {\n-        assert!(promoted.is_none());\n-        // Don't peek inside trait associated constants.\n-        if cx.tcx.trait_of_item(def.did).is_none() {\n-            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n-                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n-            } else {\n-                cx.tcx.at(constant.span).mir_const_qualif(def.did)\n-            };\n-\n-            if !Q::in_qualifs(&qualifs) {\n-                return false;\n-            }\n+    if let Some(ct) = constant.literal.const_for_ty() {\n+        if let ty::ConstKind::Unevaluated(def, _, promoted) = ct.val {\n+            assert!(promoted.is_none());\n+            // Don't peek inside trait associated constants.\n+            if cx.tcx.trait_of_item(def.did).is_none() {\n+                let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n+                    cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n+                } else {\n+                    cx.tcx.at(constant.span).mir_const_qualif(def.did)\n+                };\n+\n+                if !Q::in_qualifs(&qualifs) {\n+                    return false;\n+                }\n \n-            // Just in case the type is more specific than\n-            // the definition, e.g., impl associated const\n-            // with type parameters, take it into account.\n+                // Just in case the type is more specific than\n+                // the definition, e.g., impl associated const\n+                // with type parameters, take it into account.\n+            }\n         }\n     }\n     // Otherwise use the qualifs of the type.\n-    Q::in_any_value_of_ty(cx, constant.literal.ty)\n+    Q::in_any_value_of_ty(cx, constant.literal.ty())\n }"}, {"sha": "0d5c8953bc6c935dacaed617a0a4cde1e24ca0a6", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -13,9 +13,9 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, Local, LocalDecl, LocalKind,\n-    Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n-    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, ConstantSource, Local,\n+    LocalDecl, LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope,\n+    SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -482,18 +482,21 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        match self.ecx.const_to_op(c.literal, None) {\n+        match self.ecx.mir_const_to_op(&c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n-                    let lint_only = match c.literal.val {\n-                        // Promoteds must lint and not error as the user didn't ask for them\n-                        ConstKind::Unevaluated(_, _, Some(_)) => true,\n-                        // Out of backwards compatibility we cannot report hard errors in unused\n-                        // generic functions using associated constants of the generic parameters.\n-                        _ => c.literal.needs_subst(),\n+                    let lint_only = match c.literal {\n+                        ConstantSource::Ty(ct) => match ct.val {\n+                            // Promoteds must lint and not error as the user didn't ask for them\n+                            ConstKind::Unevaluated(_, _, Some(_)) => true,\n+                            // Out of backwards compatibility we cannot report hard errors in unused\n+                            // generic functions using associated constants of the generic parameters.\n+                            _ => c.literal.needs_subst(),\n+                        },\n+                        ConstantSource::Val(_, ty) => ty.needs_subst(),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n@@ -803,7 +806,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ty::Const::from_scalar(self.tcx, scalar, ty),\n+            literal: ty::Const::from_scalar(self.tcx, scalar, ty).into(),\n         }))\n     }\n \n@@ -814,9 +817,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) {\n         if let Rvalue::Use(Operand::Constant(c)) = rval {\n-            if !matches!(c.literal.val, ConstKind::Unevaluated(..)) {\n-                trace!(\"skipping replace of Rvalue::Use({:?} because it is already a const\", c);\n-                return;\n+            match c.literal {\n+                ConstantSource::Ty(c) if matches!(c.val, ConstKind::Unevaluated(..)) => {}\n+                _ => {\n+                    trace!(\"skipping replace of Rvalue::Use({:?} because it is already a const\", c);\n+                    return;\n+                }\n             }\n         }\n \n@@ -883,13 +889,17 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                                 *rval = Rvalue::Use(Operand::Constant(Box::new(Constant {\n                                     span: source_info.span,\n                                     user_ty: None,\n-                                    literal: self.ecx.tcx.mk_const(ty::Const {\n-                                        ty,\n-                                        val: ty::ConstKind::Value(ConstValue::ByRef {\n-                                            alloc,\n-                                            offset: Size::ZERO,\n-                                        }),\n-                                    }),\n+                                    literal: self\n+                                        .ecx\n+                                        .tcx\n+                                        .mk_const(ty::Const {\n+                                            ty,\n+                                            val: ty::ConstKind::Value(ConstValue::ByRef {\n+                                                alloc,\n+                                                offset: Size::ZERO,\n+                                            }),\n+                                        })\n+                                        .into(),\n                                 })));\n                             }\n                         }"}, {"sha": "c0fcfb620ff769f774de6d555c91786d7b548404", "filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -471,7 +471,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ty::Const::from_bool(self.tcx, val),\n+            literal: ty::Const::from_bool(self.tcx, val).into(),\n         })))\n     }\n "}, {"sha": "c85e9b9b932d4ad7c13b64b5380f46231f0900c9", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -989,7 +989,7 @@ fn insert_panic_block<'tcx>(\n         cond: Operand::Constant(box Constant {\n             span: body.span,\n             user_ty: None,\n-            literal: ty::Const::from_bool(tcx, false),\n+            literal: ty::Const::from_bool(tcx, false).into(),\n         }),\n         expected: true,\n         msg: message,"}, {"sha": "dd06daecd5dc2cfae9cd10c38f2b1fa85950a850", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -416,7 +416,7 @@ impl Inliner<'tcx> {\n \n                 TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n                     if let ty::FnDef(def_id, substs) =\n-                        *callsite.callee.subst_mir(self.tcx, &f.literal.ty).kind()\n+                        *callsite.callee.subst_mir(self.tcx, &f.literal.ty()).kind()\n                     {\n                         let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n                         if let Ok(Some(instance)) =\n@@ -637,8 +637,11 @@ impl Inliner<'tcx> {\n                 // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n                 // because we are calling `subst_and_normalize_erasing_regions`.\n                 caller_body.required_consts.extend(\n-                    callee_body.required_consts.iter().copied().filter(|&constant| {\n-                        matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n+                    callee_body.required_consts.iter().copied().filter(|&ct| {\n+                        match ct.literal.const_for_ty() {\n+                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_, _, _)),\n+                            None => true,\n+                        }\n                     }),\n                 );\n             }"}, {"sha": "7aaf0224164c690a73868830376bb211da4cba04", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -79,7 +79,7 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n \n     fn try_eval_bool(&self, a: &Operand<'_>) -> Option<bool> {\n         let a = a.constant()?;\n-        if a.literal.ty.is_bool() { a.literal.val.try_to_bool() } else { None }\n+        if a.literal.ty().is_bool() { a.literal.try_to_bool() } else { None }\n     }\n \n     /// Transform \"&(*a)\" ==> \"a\".\n@@ -110,12 +110,13 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n     fn combine_len(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         if let Rvalue::Len(ref place) = *rvalue {\n             let place_ty = place.ty(self.local_decls, self.tcx).ty;\n-            if let ty::Array(_, len) = place_ty.kind() {\n+            if let ty::Array(_, len) = *place_ty.kind() {\n                 if !self.should_combine(source_info, rvalue) {\n                     return;\n                 }\n \n-                let constant = Constant { span: source_info.span, literal: len, user_ty: None };\n+                let constant =\n+                    Constant { span: source_info.span, literal: len.into(), user_ty: None };\n                 *rvalue = Rvalue::Use(Operand::Constant(box constant));\n             }\n         }"}, {"sha": "e6ee474285ec1a862ade146a615813a46e45c4ab", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                                     Rvalue::Use(Operand::Constant(box Constant {\n                                         span: terminator.source_info.span,\n                                         user_ty: None,\n-                                        literal: ty::Const::zero_sized(tcx, tcx.types.unit),\n+                                        literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n                                     })),\n                                 )),\n                             });"}, {"sha": "d04a7011ab0647ad96a2f38c220b04639a0f47e0", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -93,8 +93,8 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                         StatementKind::Assign(box (lhs_f, Rvalue::Use(Operand::Constant(f_c)))),\n                         StatementKind::Assign(box (lhs_s, Rvalue::Use(Operand::Constant(s_c)))),\n                     ) if lhs_f == lhs_s\n-                        && f_c.literal.ty.is_bool()\n-                        && s_c.literal.ty.is_bool()\n+                        && f_c.literal.ty().is_bool()\n+                        && s_c.literal.ty().is_bool()\n                         && f_c.literal.try_eval_bool(tcx, param_env).is_some()\n                         && s_c.literal.try_eval_bool(tcx, param_env).is_some() => {}\n "}, {"sha": "7db790cf32b63bd3aea0a3d941f4415c4a91a3ed", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -921,7 +921,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         let unit = Rvalue::Use(Operand::Constant(box Constant {\n                             span: statement.source_info.span,\n                             user_ty: None,\n-                            literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit),\n+                            literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit).into(),\n                         }));\n                         mem::replace(rhs, unit)\n                     },\n@@ -998,20 +998,22 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Operand::Constant(Box::new(Constant {\n                     span,\n                     user_ty: None,\n-                    literal: tcx.mk_const(ty::Const {\n-                        ty,\n-                        val: ty::ConstKind::Unevaluated(\n-                            def,\n-                            InternalSubsts::for_item(tcx, def.did, |param, _| {\n-                                if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                                    tcx.lifetimes.re_erased.into()\n-                                } else {\n-                                    tcx.mk_param_from_def(param)\n-                                }\n-                            }),\n-                            Some(promoted_id),\n-                        ),\n-                    }),\n+                    literal: tcx\n+                        .mk_const(ty::Const {\n+                            ty,\n+                            val: ty::ConstKind::Unevaluated(\n+                                def,\n+                                InternalSubsts::for_item(tcx, def.did, |param, _| {\n+                                    if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                                        tcx.lifetimes.re_erased.into()\n+                                    } else {\n+                                        tcx.mk_param_from_def(param)\n+                                    }\n+                                }),\n+                                Some(promoted_id),\n+                            ),\n+                        })\n+                        .into(),\n                 }))\n             };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n@@ -1250,8 +1252,8 @@ crate fn is_const_fn_in_array_repeat_expression<'tcx>(\n         if let Some(Terminator { kind: TerminatorKind::Call { func, destination, .. }, .. }) =\n             &block.terminator\n         {\n-            if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n-                if let ty::FnDef(def_id, _) = *ty.kind() {\n+            if let Operand::Constant(box Constant { literal, .. }) = func {\n+                if let ty::FnDef(def_id, _) = *literal.ty().kind() {\n                     if let Some((destination_place, _)) = destination {\n                         if destination_place == place {\n                             if is_const_fn(ccx.tcx, def_id) {"}, {"sha": "2b518bd3a4813ca69680f590bbf75abd53ea7f81", "filename": "compiler/rustc_mir/src/transform/required_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -14,10 +14,10 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n-        let const_kind = constant.literal.val;\n-\n-        if let ConstKind::Unevaluated(_, _, _) = const_kind {\n-            self.required_consts.push(*constant);\n+        if let Some(ct) = constant.literal.const_for_ty() {\n+            if let ConstKind::Unevaluated(_, _, _) = ct.val {\n+                self.required_consts.push(*constant);\n+            }\n         }\n     }\n }"}, {"sha": "a6b8f20f6d4498f13eb26e271f29a196d4b9ea84", "filename": "compiler/rustc_mir/src/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -205,7 +205,7 @@ impl PeekCall {\n         if let mir::TerminatorKind::Call { func: Operand::Constant(func), args, .. } =\n             &terminator.kind\n         {\n-            if let ty::FnDef(def_id, substs) = *func.literal.ty.kind() {\n+            if let ty::FnDef(def_id, substs) = *func.literal.ty().kind() {\n                 let sig = tcx.fn_sig(def_id);\n                 let name = tcx.item_name(def_id);\n                 if sig.abi() != Abi::RustIntrinsic || name != sym::rustc_peek {"}, {"sha": "9f473f3bae534df547064fbcb224edd2653250c3", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -205,12 +205,12 @@ fn find_branch_value_info<'tcx>(\n     match (left, right) {\n         (Constant(branch_value), Copy(to_switch_on) | Move(to_switch_on))\n         | (Copy(to_switch_on) | Move(to_switch_on), Constant(branch_value)) => {\n-            let branch_value_ty = branch_value.literal.ty;\n+            let branch_value_ty = branch_value.literal.ty();\n             // we only want to apply this optimization if we are matching on integrals (and chars), as it is not possible to switch on floats\n             if !branch_value_ty.is_integral() && !branch_value_ty.is_char() {\n                 return None;\n             };\n-            let branch_value_scalar = branch_value.literal.val.try_to_scalar()?;\n+            let branch_value_scalar = branch_value.literal.try_to_scalar()?;\n             Some((branch_value_scalar, branch_value_ty, *to_switch_on))\n         }\n         _ => None,"}, {"sha": "e9190d7ebef8b6238271fbe8d8f1ef1d84b32d39", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -1035,7 +1035,7 @@ where\n         Operand::Constant(box Constant {\n             span: self.source_info.span,\n             user_ty: None,\n-            literal: ty::Const::from_usize(self.tcx(), val.into()),\n+            literal: ty::Const::from_usize(self.tcx(), val.into()).into(),\n         })\n     }\n "}, {"sha": "ddda98d16162312d55c0f83f13bb65bc24bcf916", "filename": "compiler/rustc_mir/src/util/find_self_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -17,8 +17,8 @@ pub fn find_self_call<'tcx>(\n         &body[block].terminator\n     {\n         debug!(\"find_self_call: func={:?}\", func);\n-        if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n-            if let ty::FnDef(def_id, substs) = *ty.kind() {\n+        if let Operand::Constant(box Constant { literal, .. }) = func {\n+            if let ty::FnDef(def_id, substs) = *literal.ty().kind() {\n                 if let Some(ty::AssocItem { fn_has_self_parameter: true, .. }) =\n                     tcx.opt_associated_item(def_id)\n                 {"}, {"sha": "8e38a87a8f4d8619a451b6bb33ddd6dc64162745", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -439,7 +439,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n-        match literal.ty.kind() {\n+        match literal.ty().kind() {\n             ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n             // Unit type\n             ty::Tuple(tys) if tys.is_empty() => {}\n@@ -449,7 +449,12 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                 if let Some(user_ty) = user_ty {\n                     self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n                 }\n-                self.push(&format!(\"+ literal: {:?}\", literal));\n+                match literal {\n+                    ConstantSource::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n+                    ConstantSource::Val(val, ty) => {\n+                        self.push(&format!(\"+ literal: {:?}, {}\", val, ty))\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "e562e52f8410fe59f366f26a4bc81732cc2662ba", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> CFG<'tcx> {\n             Rvalue::Use(Operand::Constant(box Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::zero_sized(tcx, tcx.types.unit),\n+                literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n             })),\n         );\n     }"}, {"sha": "c8f9993def37f4ac4b9757061b63e07b277be659", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -11,7 +11,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     crate fn as_constant(&mut self, expr: &Expr<'_, 'tcx>) -> Constant<'tcx> {\n         let this = self;\n         let Expr { ty, temp_lifetime: _, span, ref kind } = *expr;\n-        match kind {\n+        match *kind {\n             ExprKind::Scope { region_scope: _, lint_level: _, value } => this.as_constant(value),\n             ExprKind::Literal { literal, user_ty, const_id: _ } => {\n                 let user_ty = user_ty.map(|user_ty| {\n@@ -22,11 +22,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 });\n                 assert_eq!(literal.ty, ty);\n-                Constant { span, user_ty, literal }\n+                Constant { span, user_ty, literal: literal.into() }\n             }\n-            ExprKind::StaticRef { literal, .. } => Constant { span, user_ty: None, literal },\n+            ExprKind::StaticRef { literal, .. } => Constant { span, user_ty: None, literal: literal.into() },\n             ExprKind::ConstBlock { value } => {\n-                Constant { span: span, user_ty: None, literal: value }\n+                Constant { span: span, user_ty: None, literal: value.into() }\n             }\n             _ => span_bug!(span, \"expression is not a valid constant {:?}\", kind),\n         }"}, {"sha": "65531b6081889370fb4011b1e67ce9ea8779f079", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(Rvalue::Use(Operand::Constant(box Constant {\n                     span: expr_span,\n                     user_ty: None,\n-                    literal: ty::Const::zero_sized(this.tcx, this.tcx.types.unit),\n+                    literal: ty::Const::zero_sized(this.tcx, this.tcx.types.unit).into(),\n                 })))\n             }\n             ExprKind::Yield { .. }"}, {"sha": "1dc6506e30d363e1a816babc1b0a9b5713c8d729", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, true),\n+                        literal: ty::Const::from_bool(this.tcx, true).into(),\n                     },\n                 );\n \n@@ -157,7 +157,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, false),\n+                        literal: ty::Const::from_bool(this.tcx, false).into(),\n                     },\n                 );\n "}, {"sha": "7f26c0e5d7616af5fd172d37fa6ebb4d143287b3", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Need to experiment.\n                     user_ty: None,\n \n-                    literal: method,\n+                    literal: method.into(),\n                 }),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),"}, {"sha": "a1126d1c3d529a93270d9116274160f1960ccba4", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -30,6 +30,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         span: Span,\n         literal: &'tcx ty::Const<'tcx>,\n     ) -> Operand<'tcx> {\n+        let literal = literal.into();\n         let constant = box Constant { span, user_ty: None, literal };\n         Operand::Constant(constant)\n     }\n@@ -57,7 +58,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::from_usize(self.tcx, value),\n+                literal: ty::Const::from_usize(self.tcx, value).into(),\n             },\n         );\n         temp"}, {"sha": "5ace45e4c7ced0e9fb1abf3d65bfee5102c00dac", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127a9c60f267c862d2b0f1250c28f38891b94aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=3127a9c60f267c862d2b0f1250c28f38891b94aa", "patch": "@@ -377,7 +377,10 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let local = self.place_to_local(span, p)?;\n                 Ok(self.locals[local])\n             }\n-            mir::Operand::Constant(ct) => Ok(self.add_node(Node::Leaf(ct.literal), span)),\n+            mir::Operand::Constant(ct) => match ct.literal {\n+                mir::ConstantSource::Ty(ct) => Ok(self.add_node(Node::Leaf(ct), span)),\n+                mir::ConstantSource::Val(..) => self.error(Some(span), \"unsupported constant\")?,\n+            },\n         }\n     }\n "}]}