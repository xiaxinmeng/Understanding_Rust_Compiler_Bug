{"sha": "36f173f0a93dc3ead3d8be5f160c28cba0637494", "node_id": "C_kwDOAAsO6NoAKDM2ZjE3M2YwYTkzZGMzZWFkM2Q4YmU1ZjE2MGMyOGNiYTA2Mzc0OTQ", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:37Z"}, "message": "Rollup merge of #89466 - Mark-Simulacrum:query-macros, r=oli-obk\n\nFix bug with query modifier parsing\n\nThe previous macro_rules! parsers failed when an additional modifier was added\nwith ambiguity errors. The error is pretty unclear as to what exactly the cause\nhere is, but this change simplifies the argument parsing code such that the\nerror is avoided.\n\nExtracted from other work, and somewhat duplicates 0358edeb5 from #85830, but\nthis approach seems a little simpler to me. Not technically currently necessary but seems\nlike a good cleanup.", "tree": {"sha": "f977ca5d80de0ee27550401c1e69bd0b87f993d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f977ca5d80de0ee27550401c1e69bd0b87f993d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f173f0a93dc3ead3d8be5f160c28cba0637494", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9C1CRBK7hj4Ov3rIwAA4EQIAAGOBvmELRgAaOJsuOTBqzEG\nVCypYahsIA8FI6QAGx41m1edWf+hSqipA5ifk5bfBqciXdWZjGdB0zMtFFPMcEHT\n6yclYEZ5Qsyo40+3ZBjV9guJxE/9ENA3YkOuo3/cFKEpOtAu3J2zfUllv598cDub\newu8HBsIS2W79I8LX0Gqj8DHQVhEl5+S9PHYma3QY0wFRbZJb0gV8Oam/9HCe9yz\nSwbCvASZzNWBJrRGRPmLRdTQoNLTGM51WK2/UPHaZntuMYaAgRU9ZpG4gGrmna1X\nP0A4W4MB79U6INZXheYn9HyKqFpHh+8A2qI4M5Vq0N67EpcZtgOR1qPSKohQo3s=\n=h5Ev\n-----END PGP SIGNATURE-----\n", "payload": "tree f977ca5d80de0ee27550401c1e69bd0b87f993d8\nparent a19537d43d777f2088dbaf65233b713b1ef29d30\nparent e2d3e09b9cb60f148e99d16e9af650f81275e5f1\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407157 -0700\ncommitter GitHub <noreply@github.com> 1633407157 -0700\n\nRollup merge of #89466 - Mark-Simulacrum:query-macros, r=oli-obk\n\nFix bug with query modifier parsing\n\nThe previous macro_rules! parsers failed when an additional modifier was added\nwith ambiguity errors. The error is pretty unclear as to what exactly the cause\nhere is, but this change simplifies the argument parsing code such that the\nerror is avoided.\n\nExtracted from other work, and somewhat duplicates 0358edeb5 from #85830, but\nthis approach seems a little simpler to me. Not technically currently necessary but seems\nlike a good cleanup.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f173f0a93dc3ead3d8be5f160c28cba0637494", "html_url": "https://github.com/rust-lang/rust/commit/36f173f0a93dc3ead3d8be5f160c28cba0637494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f173f0a93dc3ead3d8be5f160c28cba0637494/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19537d43d777f2088dbaf65233b713b1ef29d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19537d43d777f2088dbaf65233b713b1ef29d30", "html_url": "https://github.com/rust-lang/rust/commit/a19537d43d777f2088dbaf65233b713b1ef29d30"}, {"sha": "e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "html_url": "https://github.com/rust-lang/rust/commit/e2d3e09b9cb60f148e99d16e9af650f81275e5f1"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "005017185c148458dd62271b689b4083209f35ba", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=36f173f0a93dc3ead3d8be5f160c28cba0637494", "patch": "@@ -455,28 +455,28 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n         // Pass on the fatal_cycle modifier\n         if let Some(fatal_cycle) = &modifiers.fatal_cycle {\n-            attributes.push(quote! { #fatal_cycle });\n+            attributes.push(quote! { (#fatal_cycle) });\n         };\n         // Pass on the storage modifier\n         if let Some(ref ty) = modifiers.storage {\n             let span = ty.span();\n-            attributes.push(quote_spanned! {span=> storage(#ty) });\n+            attributes.push(quote_spanned! {span=> (storage #ty) });\n         };\n         // Pass on the cycle_delay_bug modifier\n         if let Some(cycle_delay_bug) = &modifiers.cycle_delay_bug {\n-            attributes.push(quote! { #cycle_delay_bug });\n+            attributes.push(quote! { (#cycle_delay_bug) });\n         };\n         // Pass on the no_hash modifier\n         if let Some(no_hash) = &modifiers.no_hash {\n-            attributes.push(quote! { #no_hash });\n+            attributes.push(quote! { (#no_hash) });\n         };\n         // Pass on the anon modifier\n         if let Some(anon) = &modifiers.anon {\n-            attributes.push(quote! { #anon });\n+            attributes.push(quote! { (#anon) });\n         };\n         // Pass on the eval_always modifier\n         if let Some(eval_always) = &modifiers.eval_always {\n-            attributes.push(quote! { #eval_always });\n+            attributes.push(quote! { (#eval_always) });\n         };\n \n         // This uses the span of the query definition for the commas,"}, {"sha": "07d42902be5dd379803e95a051528df461895371", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=36f173f0a93dc3ead3d8be5f160c28cba0637494", "patch": "@@ -140,11 +140,11 @@ macro_rules! is_eval_always_attr {\n }\n \n macro_rules! contains_anon_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_anon_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n macro_rules! contains_eval_always_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_eval_always_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n \n #[allow(non_upper_case_globals)]"}, {"sha": "e5fd38252da53174b27516ae4d0931809e9626f4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=36f173f0a93dc3ead3d8be5f160c28cba0637494", "patch": "@@ -111,11 +111,11 @@ macro_rules! query_storage {\n     ([][$K:ty, $V:ty]) => {\n         <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n-    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+    ([(storage $ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         <$ty as CacheSelector<$K, $V>>::Cache\n     };\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        query_storage!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        query_storage!([$($modifiers)*][$($args)*])\n     };\n }\n "}, {"sha": "818b798ab55e730f3dd7eadc00425d8d0939eedd", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f173f0a93dc3ead3d8be5f160c28cba0637494/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=36f173f0a93dc3ead3d8be5f160c28cba0637494", "patch": "@@ -253,53 +253,53 @@ macro_rules! handle_cycle_error {\n         $error.emit();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([fatal_cycle $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(fatal_cycle) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.emit();\n         $tcx.sess.abort_if_errors();\n         unreachable!()\n     }};\n-    ([cycle_delay_bug $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(cycle_delay_bug) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.delay_as_bug();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        handle_cycle_error!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        handle_cycle_error!([$($modifiers)*][$($args)*])\n     };\n }\n \n macro_rules! is_anon {\n     ([]) => {{\n         false\n     }};\n-    ([anon $($rest:tt)*]) => {{\n+    ([(anon) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_anon!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_anon!([$($modifiers)*])\n     };\n }\n \n macro_rules! is_eval_always {\n     ([]) => {{\n         false\n     }};\n-    ([eval_always $($rest:tt)*]) => {{\n+    ([(eval_always) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_eval_always!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_eval_always!([$($modifiers)*])\n     };\n }\n \n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n     }};\n-    ([no_hash $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n+    ([(no_hash) $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n         None\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        hash_result!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        hash_result!([$($modifiers)*][$($args)*])\n     };\n }\n "}]}