{"sha": "2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTFiYmFjNWQwNDI3M2IyMTcxNzBmNGFkNWVlYmUwMmZmY2IxYWY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-11-29T13:09:28Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-11-29T13:09:28Z"}, "message": "Rename conversion util; remove duplicate util in librustc_codegen_llvm.", "tree": {"sha": "3142e916e0e715ecb4f39c20265ee5fc47f64227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3142e916e0e715ecb4f39c20265ee5fc47f64227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "html_url": "https://github.com/rust-lang/rust/commit/2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bca7a993d740291568c57eeef797b175c591cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bca7a993d740291568c57eeef797b175c591cf", "html_url": "https://github.com/rust-lang/rust/commit/e9bca7a993d740291568c57eeef797b175c591cf"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "4eb920324bd003070634fae5c4d5a2ce6fe2940e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "patch": "@@ -23,7 +23,7 @@ use llvm_util;\n use ModuleLlvm;\n use rustc_codegen_ssa::{ModuleCodegen, CompiledModule};\n use rustc::util::common::time_ext;\n-use rustc_fs_util::{path2cstr, link_or_copy};\n+use rustc_fs_util::{path_to_c_string, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n use errors::{self, Handler, FatalError};\n use type_::Type;\n@@ -80,7 +80,7 @@ pub fn write_output_file(\n         output: &Path,\n         file_type: llvm::FileType) -> Result<(), FatalError> {\n     unsafe {\n-        let output_c = path2cstr(output);\n+        let output_c = path_to_c_string(output);\n         let result = llvm::LLVMRustWriteOutputFile(target, pm, m, output_c.as_ptr(), file_type);\n         if result.into_result().is_err() {\n             let msg = format!(\"could not write output to {}\", output.display());\n@@ -211,7 +211,7 @@ pub(crate) fn save_temp_bitcode(\n         let ext = format!(\"{}.bc\", name);\n         let cgu = Some(&module.name[..]);\n         let path = cgcx.output_filenames.temp_path_ext(&ext, cgu);\n-        let cstr = path2cstr(&path);\n+        let cstr = path_to_c_string(&path);\n         let llmod = module.module_llvm.llmod();\n         llvm::LLVMWriteBitcodeToFile(llmod, cstr.as_ptr());\n     }\n@@ -324,7 +324,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n \n     if config.emit_no_opt_bc {\n         let out = cgcx.output_filenames.temp_path_ext(\"no-opt.bc\", module_name);\n-        let out = path2cstr(&out);\n+        let out = path_to_c_string(&out);\n         llvm::LLVMWriteBitcodeToFile(llmod, out.as_ptr());\n     }\n \n@@ -530,7 +530,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             || -> Result<(), FatalError> {\n             if config.emit_ir {\n                 let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n-                let out = path2cstr(&out);\n+                let out = path_to_c_string(&out);\n \n                 extern \"C\" fn demangle_callback(input_ptr: *const c_char,\n                                                 input_len: size_t,"}, {"sha": "47e92fbe87d31bb8b3b9739f937c280aff262ae1", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "patch": "@@ -39,7 +39,7 @@ use rustc::ty::layout::{self, Align, HasDataLayout, Integer, IntegerExt, LayoutO\n                         PrimitiveExt, Size, TyLayout};\n use rustc::session::config;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_fs_util::path2cstr;\n+use rustc_fs_util::path_to_c_string;\n use rustc_data_structures::small_c_str::SmallCStr;\n \n use libc::{c_uint, c_longlong};\n@@ -892,7 +892,7 @@ pub fn compile_unit_metadata(tcx: TyCtxt,\n     };\n \n     fn path_to_mdstring(llcx: &'ll llvm::Context, path: &Path) -> &'ll Value {\n-        let path_str = path2cstr(path);\n+        let path_str = path_to_c_string(path);\n         unsafe {\n             llvm::LLVMMDStringInContext(llcx,\n                                         path_str.as_ptr(),"}, {"sha": "d5c73fecf814a80cf7c0b947d364dece00d57732", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "patch": "@@ -10,10 +10,10 @@\n \n //! A wrapper around LLVM's archive (.a) code\n \n-use std::ffi::CString;\n use std::path::Path;\n use std::slice;\n use std::str;\n+use rustc_fs_util::path_to_c_string;\n \n pub struct ArchiveRO {\n     pub raw: &'static mut super::Archive,\n@@ -38,24 +38,12 @@ impl ArchiveRO {\n     /// raised.\n     pub fn open(dst: &Path) -> Result<ArchiveRO, String> {\n         return unsafe {\n-            let s = path2cstr(dst);\n+            let s = path_to_c_string(dst);\n             let ar = super::LLVMRustOpenArchive(s.as_ptr()).ok_or_else(|| {\n                 super::last_error().unwrap_or_else(|| \"failed to open archive\".to_owned())\n             })?;\n             Ok(ArchiveRO { raw: ar })\n         };\n-\n-        #[cfg(unix)]\n-        fn path2cstr(p: &Path) -> CString {\n-            use std::os::unix::prelude::*;\n-            use std::ffi::OsStr;\n-            let p: &OsStr = p.as_ref();\n-            CString::new(p.as_bytes()).unwrap()\n-        }\n-        #[cfg(windows)]\n-        fn path2cstr(p: &Path) -> CString {\n-            CString::new(p.to_str().unwrap()).unwrap()\n-        }\n     }\n \n     pub fn iter(&self) -> Iter {"}, {"sha": "5605f64c2e72c2d62304c2d3f61a256da0543520", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::owning_ref::OwningRef;\n use std::path::Path;\n use std::ptr;\n use std::slice;\n-use rustc_fs_util::path2cstr;\n+use rustc_fs_util::path_to_c_string;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -57,7 +57,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n                           filename: &Path)\n                           -> Result<MetadataRef, String> {\n         unsafe {\n-            let buf = path2cstr(filename);\n+            let buf = path_to_c_string(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n                 .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n             let of = ObjectFile::new(mb)"}, {"sha": "1b0ff4f861c7be6c65cde0c1a143160db0328e9d", "filename": "src/librustc_fs_util/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_fs_util%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91bbac5d04273b217170f4ad5eebe02ffcb1af/src%2Flibrustc_fs_util%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2Flib.rs?ref=2a91bbac5d04273b217170f4ad5eebe02ffcb1af", "patch": "@@ -116,13 +116,13 @@ pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(p: P,\n }\n \n #[cfg(unix)]\n-pub fn path2cstr(p: &Path) -> CString {\n-    use std::os::unix::prelude::*;\n+pub fn path_to_c_string(p: &Path) -> CString {\n+    use std::os::unix::ffi::OsStrExt;\n     use std::ffi::OsStr;\n     let p: &OsStr = p.as_ref();\n     CString::new(p.as_bytes()).unwrap()\n }\n #[cfg(windows)]\n-pub fn path2cstr(p: &Path) -> CString {\n+pub fn path_to_c_string(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }"}]}