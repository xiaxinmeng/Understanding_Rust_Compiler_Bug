{"sha": "c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzU0ZTk4MzljZWZiYWY4MGQzYTI2MzA0YmMzZTRhZGFjZmFiYjA=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-11-20T14:58:31Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:41:30Z"}, "message": "Remove inline attributes that hadn't been profiled, unexport Cache since it no longer needs to be public", "tree": {"sha": "7043be5abeeb879ad7b35677b143276b3a67facb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7043be5abeeb879ad7b35677b143276b3a67facb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "html_url": "https://github.com/rust-lang/rust/commit/c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6354e9839cefbaf80d3a26304bc3e4adacfabb0/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245abc49be638e79781e6c3d633aba7a171d80d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/245abc49be638e79781e6c3d633aba7a171d80d4", "html_url": "https://github.com/rust-lang/rust/commit/245abc49be638e79781e6c3d633aba7a171d80d4"}], "stats": {"total": 18, "additions": 1, "deletions": 17}, "files": [{"sha": "fcab65cdfdd9f9f460a86b3aa8f8e4952c6b363a", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6354e9839cefbaf80d3a26304bc3e4adacfabb0/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6354e9839cefbaf80d3a26304bc3e4adacfabb0/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "patch": "@@ -78,13 +78,11 @@ impl Cache {\n         }\n     }\n \n-    #[inline]\n     pub fn invalidate_predecessors(&mut self) {\n         // FIXME: consider being more fine-grained\n         self.predecessors = None;\n     }\n \n-    #[inline]\n     pub fn ensure_predecessors(&mut self, body: &Body<'_>) {\n         if self.predecessors.is_none() {\n             let mut result = IndexVec::from_elem(vec![], body.basic_blocks());\n@@ -100,29 +98,24 @@ impl Cache {\n         }\n     }\n \n-    #[inline]\n     /// This will recompute the predecessors cache if it is not available\n     fn predecessors(&mut self, body: &Body<'_>) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         self.ensure_predecessors(body);\n         self.predecessors.as_ref().unwrap()\n     }\n \n-    #[inline]\n     fn predecessors_for(&mut self, bb: BasicBlock, body: &Body<'_>) -> &[BasicBlock] {\n         &self.predecessors(body)[bb]\n     }\n \n-    #[inline]\n     fn unwrap_predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n         &self.predecessors.as_ref().unwrap()[bb]\n     }\n \n-    #[inline]\n     impl_predecessor_locations!((pub) predecessor_locations mut);\n \n     impl_predecessor_locations!(() unwrap_predecessor_locations);\n \n-    #[inline]\n     pub fn basic_blocks_mut<'a, 'tcx>(\n         &mut self,\n         body: &'a mut Body<'tcx>\n@@ -195,7 +188,6 @@ impl BodyCache<'tcx> {\n impl<'tcx> Index<BasicBlock> for BodyCache<'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n-    #[inline]\n     fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> {\n         &self.body[index]\n     }\n@@ -238,32 +230,26 @@ impl ReadOnlyBodyCache<'a, 'tcx> {\n         }\n     }\n \n-    #[inline]\n     pub fn predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         self.cache.predecessors.as_ref().unwrap()\n     }\n \n-    #[inline]\n     pub fn predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n         self.cache.unwrap_predecessors_for(bb)\n     }\n \n-    #[inline]\n     pub fn predecessor_locations(&self, loc: Location) -> impl Iterator<Item = Location> + '_ {\n         self.cache.unwrap_predecessor_locations(loc, self.body)\n     }\n \n-    #[inline]\n     pub fn body(&self) -> &'a Body<'tcx> {\n         self.body\n     }\n \n-    #[inline]\n     pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         &self.body.basic_blocks\n     }\n \n-    #[inline]\n     pub fn dominators(&self) -> Dominators<BasicBlock> {\n         dominators(self)\n     }\n@@ -325,7 +311,6 @@ impl Deref for ReadOnlyBodyCache<'a, 'tcx> {\n impl Index<BasicBlock> for ReadOnlyBodyCache<'a, 'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n-    #[inline]\n     fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> {\n         &self.body[index]\n     }"}, {"sha": "cc25ad0e22529e3a57d5afa7f97c5b4198c8e7d4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6354e9839cefbaf80d3a26304bc3e4adacfabb0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6354e9839cefbaf80d3a26304bc3e4adacfabb0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "patch": "@@ -38,8 +38,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n-// FIXME(nashenas88) Cache only exported for use in librustc_mir/transform/check_unsafety.rs\n-pub use crate::mir::cache::{BodyCache, Cache, ReadOnlyBodyCache};\n+pub use crate::mir::cache::{BodyCache, ReadOnlyBodyCache};\n pub use crate::read_only;\n \n pub mod cache;"}]}