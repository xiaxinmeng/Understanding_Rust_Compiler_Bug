{"sha": "2d37f38f872859b2b096772765a7987199c852c4", "node_id": "C_kwDOAAsO6NoAKDJkMzdmMzhmODcyODU5YjJiMDk2NzcyNzY1YTc5ODcxOTljODUyYzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T13:49:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T13:49:22Z"}, "message": "Auto merge of #95024 - koehlma:rustdoc-private-items, r=GuillaumeGomez,camelid,jsha\n\nrustdoc: add \ud83d\udd12 to items with restricted visibility\n\nThis change marks items with restricted visibility with \ud83d\udd12 when building with `--document-private-items`:\n\n<img width=\"278\" alt=\"Screen Shot 2022-03-20 at 23 50 24\" src=\"https://user-images.githubusercontent.com/509209/159189513-9e4b09bb-6785-41a5-bfe2-df02f83f8641.png\">\n\nThere also appears a \u201cRestricted Visibility\u201d tooltip when hovering over the emoji.\n\n---\n\nThe original PR for reference:\n\nThis change makes private items slightly transparent (similar to `unstable` items in rustc):\n\n<img width=\"272\" alt=\"Screen Shot 2022-03-16 at 22 17 43\" src=\"https://user-images.githubusercontent.com/509209/158692627-a1f6f5ec-e043-4aa2-9352-8d2b15c31c08.png\">\n\nI found myself using `--document-private-items` a lot recently because I find the documentation of private internals quite helpful when working on a larger project. However, not being able to distinguish private from public items (see #87785) when looking at the documentation makes this somewhat cumbersome.\n\nThis PR addresses the third suggestion of issue #87785 by marking private items typographically. It seems to me that the other suggestions are more involved but this is at least a first step.\n\nA private item is also made slightly transparent in the path displayed in the header of a page:\n\n<img width=\"467\" alt=\"Screen Shot 2022-03-16 at 22 19 51\" src=\"https://user-images.githubusercontent.com/509209/158692885-0bbd3417-3c0b-486f-b8ab-99c05c6fa7ca.png\">\n\nI am looking forward to feedback and suggestions.", "tree": {"sha": "679ac5a7f9c8878e37e3da89f580aa7ef4f10263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679ac5a7f9c8878e37e3da89f580aa7ef4f10263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d37f38f872859b2b096772765a7987199c852c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d37f38f872859b2b096772765a7987199c852c4", "html_url": "https://github.com/rust-lang/rust/commit/2d37f38f872859b2b096772765a7987199c852c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d37f38f872859b2b096772765a7987199c852c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4524e5b4a9c5656fef69f532f96eb9959a1803", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4524e5b4a9c5656fef69f532f96eb9959a1803", "html_url": "https://github.com/rust-lang/rust/commit/0e4524e5b4a9c5656fef69f532f96eb9959a1803"}, {"sha": "1c523ba772490088ed4b5cd9345a8f46d2f7bf42", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c523ba772490088ed4b5cd9345a8f46d2f7bf42", "html_url": "https://github.com/rust-lang/rust/commit/1c523ba772490088ed4b5cd9345a8f46d2f7bf42"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "efeb2e0d463afb3f77f194bb7a4e0e4efa748044", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -376,17 +376,26 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 let stab = myitem.stability_class(cx.tcx());\n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n+                let visibility_emoji = match myitem.visibility {\n+                    clean::Visibility::Restricted(_) => {\n+                        \"<span title=\\\"Restricted Visibility\\\">&nbsp;\ud83d\udd12</span> \"\n+                    }\n+                    _ => \"\",\n+                };\n+\n                 let doc_value = myitem.doc_value().unwrap_or_default();\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}module-item\\\">\\\n-                         <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n-                             {unsafety_flag}\\\n-                             {stab_tags}\\\n+                            <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n+                            {visibility_emoji}\\\n+                            {unsafety_flag}\\\n+                            {stab_tags}\\\n                      </div>\\\n                      <div class=\\\"item-right docblock-short\\\">{docs}</div>\",\n                     name = myitem.name.unwrap(),\n+                    visibility_emoji = visibility_emoji,\n                     stab_tags = extra_info_tags(myitem, item, cx.tcx()),\n                     docs = MarkdownSummaryLine(&doc_value, &myitem.links(cx)).into_string(),\n                     class = myitem.type_(),"}, {"sha": "c573e1b77f901c8e547360cbb19178c9ee6b64d1", "filename": "src/test/rustdoc/visibility.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -4,42 +4,68 @@\n \n #![crate_name = \"foo\"]\n \n+// @!has 'foo/index.html' '//a[@href=\"struct.FooPublic.html\"]/..' 'FooPublic \ud83d\udd12'\n // @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n pub struct FooPublic;\n+// @has 'foo/index.html' '//a[@href=\"struct.FooJustCrate.html\"]/..' 'FooJustCrate \ud83d\udd12'\n // @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n crate struct FooJustCrate;\n+// @has 'foo/index.html' '//a[@href=\"struct.FooPubCrate.html\"]/..' 'FooPubCrate \ud83d\udd12'\n // @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n pub(crate) struct FooPubCrate;\n+// @has 'foo/index.html' '//a[@href=\"struct.FooSelf.html\"]/..' 'FooSelf \ud83d\udd12'\n // @has 'foo/struct.FooSelf.html' '//pre' 'pub(crate) struct FooSelf'\n pub(self) struct FooSelf;\n+// @has 'foo/index.html' '//a[@href=\"struct.FooInSelf.html\"]/..' 'FooInSelf \ud83d\udd12'\n // @has 'foo/struct.FooInSelf.html' '//pre' 'pub(crate) struct FooInSelf'\n pub(in self) struct FooInSelf;\n+// @has 'foo/index.html' '//a[@href=\"struct.FooPriv.html\"]/..' 'FooPriv \ud83d\udd12'\n // @has 'foo/struct.FooPriv.html' '//pre' 'pub(crate) struct FooPriv'\n struct FooPriv;\n \n+// @!has 'foo/index.html' '//a[@href=\"pub_mod/index.html\"]/..' 'pub_mod \ud83d\udd12'\n+pub mod pub_mod {}\n+\n+// @has 'foo/index.html' '//a[@href=\"pub_crate_mod/index.html\"]/..' 'pub_crate_mod \ud83d\udd12'\n+pub(crate) mod pub_crate_mod {}\n+\n+// @has 'foo/index.html' '//a[@href=\"a/index.html\"]/..' 'a \ud83d\udd12'\n mod a {\n+    // @has 'foo/a/index.html' '//a[@href=\"struct.FooASuper.html\"]/..' 'FooASuper \ud83d\udd12'\n     // @has 'foo/a/struct.FooASuper.html' '//pre' 'pub(crate) struct FooASuper'\n     pub(super) struct FooASuper;\n+    // @has 'foo/a/index.html' '//a[@href=\"struct.FooAInSuper.html\"]/..' 'FooAInSuper \ud83d\udd12'\n     // @has 'foo/a/struct.FooAInSuper.html' '//pre' 'pub(crate) struct FooAInSuper'\n     pub(in super) struct FooAInSuper;\n+    // @has 'foo/a/index.html' '//a[@href=\"struct.FooAInA.html\"]/..' 'FooAInA \ud83d\udd12'\n     // @has 'foo/a/struct.FooAInA.html' '//pre' 'struct FooAInA'\n     // @!has 'foo/a/struct.FooAInA.html' '//pre' 'pub'\n     pub(in a) struct FooAInA;\n+    // @has 'foo/a/index.html' '//a[@href=\"struct.FooAPriv.html\"]/..' 'FooAPriv \ud83d\udd12'\n     // @has 'foo/a/struct.FooAPriv.html' '//pre' 'struct FooAPriv'\n     // @!has 'foo/a/struct.FooAPriv.html' '//pre' 'pub'\n     struct FooAPriv;\n \n+    // @has 'foo/a/index.html' '//a[@href=\"b/index.html\"]/..' 'b \ud83d\udd12'\n     mod b {\n+        // @has 'foo/a/b/index.html' '//a[@href=\"struct.FooBSuper.html\"]/..' 'FooBSuper \ud83d\udd12'\n         // @has 'foo/a/b/struct.FooBSuper.html' '//pre' 'pub(super) struct FooBSuper'\n         pub(super) struct FooBSuper;\n+        // @has 'foo/a/b/index.html' '//a[@href=\"struct.FooBInSuperSuper.html\"]/..' 'FooBInSuperSuper \ud83d\udd12'\n         // @has 'foo/a/b/struct.FooBInSuperSuper.html' '//pre' 'pub(crate) struct FooBInSuperSuper'\n         pub(in super::super) struct FooBInSuperSuper;\n+        // @has 'foo/a/b/index.html' '//a[@href=\"struct.FooBInAB.html\"]/..' 'FooBInAB \ud83d\udd12'\n         // @has 'foo/a/b/struct.FooBInAB.html' '//pre' 'struct FooBInAB'\n         // @!has 'foo/a/b/struct.FooBInAB.html' '//pre' 'pub'\n         pub(in a::b) struct FooBInAB;\n+        // @has 'foo/a/b/index.html' '//a[@href=\"struct.FooBPriv.html\"]/..' 'FooBPriv \ud83d\udd12'\n         // @has 'foo/a/b/struct.FooBPriv.html' '//pre' 'struct FooBPriv'\n         // @!has 'foo/a/b/struct.FooBPriv.html' '//pre' 'pub'\n         struct FooBPriv;\n+\n+        // @!has 'foo/a/b/index.html' '//a[@href=\"struct.FooBPub.html\"]/..' 'FooBPub \ud83d\udd12'\n+        // @has 'foo/a/b/struct.FooBPub.html' '//pre' 'pub struct FooBPub'\n+        pub struct FooBPub;\n     }\n }\n \n@@ -53,13 +79,18 @@ mod a {\n //\n // @has 'foo/trait.PubTrait.html' '//pre' 'fn function();'\n // @!has 'foo/trait.PubTrait.html' '//pre' 'pub fn function();'\n+//\n+// @!has 'foo/index.html' '//a[@href=\"trait.PubTrait.html\"]/..' 'PubTrait \ud83d\udd12'\n \n pub trait PubTrait {\n     type Type;\n     const CONST: usize;\n     fn function();\n }\n \n+// @has 'foo/index.html' '//a[@href=\"trait.PrivTrait.html\"]/..' 'PrivTrait \ud83d\udd12'\n+trait PrivTrait {}\n+\n // @has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'type Type'\n // @!has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'pub type Type'\n //"}]}