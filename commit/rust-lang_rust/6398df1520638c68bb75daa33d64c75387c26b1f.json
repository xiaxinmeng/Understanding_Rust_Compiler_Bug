{"sha": "6398df1520638c68bb75daa33d64c75387c26b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOThkZjE1MjA2MzhjNjhiYjc1ZGFhMzNkNjRjNzUzODdjMjZiMWY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:03Z"}, "message": "Rollup merge of #56101 - frewsxcv:frewsxcv-dyn, r=steveklabnik\n\nIncorporate `dyn` into more comments and docs.\n\nr? @rust-lang/docs", "tree": {"sha": "1408ff0aafcbd3ef385353f2ee61048b6dd242d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1408ff0aafcbd3ef385353f2ee61048b6dd242d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6398df1520638c68bb75daa33d64c75387c26b1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sgvCRBK7hj4Ov3rIwAAdHIIAH3HdF66Kw4ErApvzSZ9CEOF\nWkUGI74aL8/Uu/vqJfXN2jowa3BGFjJT1HanfbaC6OaXMRURdFWhmEV1xog4h8g8\nyol2VtIAH04ljqPbxy0a/M7PQlnX6idMFMmklXTFAt7nyuLZY+umb4ZmhgmqzFTm\n54rUQRXC9T3wD2Weefma8SUq8h0ZZyRk3EZAFCKUNedMpVdDfV6HD4v8KxR8fbfR\nVy/WHqwweFQJ+cwdurTSYlUx028W4LiNYNTIYHiAubGH7ZywLDQ7gZYPSXTgWD5a\nvRsUrt+hg0GAm/TK+5puOY1xytm3qiMLRYmjYWKftmUlNDaY1ilgAI6gP8iu0d4=\n=Xzx/\n-----END PGP SIGNATURE-----\n", "payload": "tree 1408ff0aafcbd3ef385353f2ee61048b6dd242d2\nparent 45e5a856a6551ae1b77fe8c5585e80f886b44b6e\nparent ebb1a48b415c1b586bb652d58f3d2078d87f44dd\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161903 +0100\ncommitter GitHub <noreply@github.com> 1543161903 +0100\n\nRollup merge of #56101 - frewsxcv:frewsxcv-dyn, r=steveklabnik\n\nIncorporate `dyn` into more comments and docs.\n\nr? @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6398df1520638c68bb75daa33d64c75387c26b1f", "html_url": "https://github.com/rust-lang/rust/commit/6398df1520638c68bb75daa33d64c75387c26b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6398df1520638c68bb75daa33d64c75387c26b1f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e5a856a6551ae1b77fe8c5585e80f886b44b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e5a856a6551ae1b77fe8c5585e80f886b44b6e", "html_url": "https://github.com/rust-lang/rust/commit/45e5a856a6551ae1b77fe8c5585e80f886b44b6e"}, {"sha": "ebb1a48b415c1b586bb652d58f3d2078d87f44dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb1a48b415c1b586bb652d58f3d2078d87f44dd", "html_url": "https://github.com/rust-lang/rust/commit/ebb1a48b415c1b586bb652d58f3d2078d87f44dd"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "c3a84bf778d03de1d67ed15c09a352006845c47a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -489,7 +489,7 @@ impl Box<dyn Any> {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(value: Box<Any>) {\n+    /// fn print_if_string(value: Box<dyn Any>) {\n     ///     if let Ok(string) = value.downcast::<String>() {\n     ///         println!(\"String ({}): {}\", string.len(), string);\n     ///     }\n@@ -523,7 +523,7 @@ impl Box<dyn Any + Send> {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(value: Box<Any + Send>) {\n+    /// fn print_if_string(value: Box<dyn Any + Send>) {\n     ///     if let Ok(string) = value.downcast::<String>() {\n     ///         println!(\"String ({}): {}\", string.len(), string);\n     ///     }\n@@ -618,18 +618,18 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n \n /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n /// closure objects. The idea is that where one would normally store a\n-/// `Box<FnOnce()>` in a data structure, you should use\n-/// `Box<FnBox()>`. The two traits behave essentially the same, except\n+/// `Box<dyn FnOnce()>` in a data structure, you should use\n+/// `Box<dyn FnBox()>`. The two traits behave essentially the same, except\n /// that a `FnBox` closure can only be called if it is boxed. (Note\n-/// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n+/// that `FnBox` may be deprecated in the future if `Box<dyn FnOnce()>`\n /// closures become directly usable.)\n ///\n /// # Examples\n ///\n /// Here is a snippet of code which creates a hashmap full of boxed\n /// once closures and then removes them one by one, calling each\n /// closure as it is removed. Note that the type of the closures\n-/// stored in the map is `Box<FnBox() -> i32>` and not `Box<FnOnce()\n+/// stored in the map is `Box<dyn FnBox() -> i32>` and not `Box<dyn FnOnce()\n /// -> i32>`.\n ///\n /// ```\n@@ -638,8 +638,8 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n /// use std::boxed::FnBox;\n /// use std::collections::HashMap;\n ///\n-/// fn make_map() -> HashMap<i32, Box<FnBox() -> i32>> {\n-///     let mut map: HashMap<i32, Box<FnBox() -> i32>> = HashMap::new();\n+/// fn make_map() -> HashMap<i32, Box<dyn FnBox() -> i32>> {\n+///     let mut map: HashMap<i32, Box<dyn FnBox() -> i32>> = HashMap::new();\n ///     map.insert(1, Box::new(|| 22));\n ///     map.insert(2, Box::new(|| 44));\n ///     map"}, {"sha": "3ca6de191de2d03542adadca579931e4c1dbdd39", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -633,15 +633,15 @@ impl<T: Clone> Rc<T> {\n impl Rc<dyn Any> {\n     #[inline]\n     #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n-    /// Attempt to downcast the `Rc<Any>` to a concrete type.\n+    /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::any::Any;\n     /// use std::rc::Rc;\n     ///\n-    /// fn print_if_string(value: Rc<Any>) {\n+    /// fn print_if_string(value: Rc<dyn Any>) {\n     ///     if let Ok(string) = value.downcast::<String>() {\n     ///         println!(\"String ({}): {}\", string.len(), string);\n     ///     }"}, {"sha": "3d4bccb4f9d654ebc049cb95588cda36fc245b09", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -21,7 +21,7 @@\n /// The representation of a trait object like `&SomeTrait`.\n ///\n /// This struct has the same layout as types like `&SomeTrait` and\n-/// `Box<AnotherTrait>`.\n+/// `Box<dyn AnotherTrait>`.\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "af1255c438a95043e4c6a94e1ceb919ba10ac061", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -2200,7 +2200,7 @@ pub enum CastKind {\n     /// \"Unsize\" -- convert a thin-or-fat pointer to a fat pointer.\n     /// codegen must figure out the details once full monomorphization\n     /// is known. For example, this could be used to cast from a\n-    /// `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<Trait>`\n+    /// `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<dyn Trait>`\n     /// (presuming `T: Trait`).\n     Unsize,\n }"}, {"sha": "83521c5f7240682064d1c73e9dd6c45da8a8fe35", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -48,7 +48,7 @@ use ty::subst::Substs;\n ///    stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n ///    the underlying conversions from `[i32; 4]` to `[i32]`.\n ///\n-/// 3. Coercing a `Box<T>` to `Box<Trait>` is an interesting special case.  In\n+/// 3. Coercing a `Box<T>` to `Box<dyn Trait>` is an interesting special case.  In\n ///    that case, we have the pointer we need coming in, so there are no\n ///    autoderefs, and no autoref. Instead we just do the `Unsize` transformation.\n ///    At some point, of course, `Box` should move out of the compiler, in which"}, {"sha": "51b197d7b990bbe58eca1e3cede8ec1caa65bbbc", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Same as applying struct_tail on `source` and `target`, but only\n     /// keeps going as long as the two types are instances of the same\n     /// structure definitions.\n-    /// For `(Foo<Foo<T>>, Foo<Trait>)`, the result will be `(Foo<T>, Trait)`,\n+    /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,\n     /// whereas struct_tail produces `T`, and `Trait`, respectively.\n     pub fn struct_lockstep_tails(self,\n                                  source: Ty<'tcx>,"}, {"sha": "d70fcf60fdf35009d18041a06e31864e3ceeeb03", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx: 'a> VirtualIndex {\n /// The vtables are cached instead of created on every call.\n ///\n /// The `trait_ref` encodes the erased self type. Hence if we are\n-/// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n+/// making an object `Foo<dyn Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`.\n pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     cx: &Cx,"}, {"sha": "92678dd5cede0db6910594d8fc817e043003686a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -256,7 +256,7 @@ fn initial_buffer_size(file: &File) -> usize {\n /// use std::fs;\n /// use std::net::SocketAddr;\n ///\n-/// fn main() -> Result<(), Box<std::error::Error + 'static>> {\n+/// fn main() -> Result<(), Box<dyn std::error::Error + 'static>> {\n ///     let foo: SocketAddr = String::from_utf8_lossy(&fs::read(\"address.txt\")?).parse()?;\n ///     Ok(())\n /// }\n@@ -298,7 +298,7 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// use std::fs;\n /// use std::net::SocketAddr;\n ///\n-/// fn main() -> Result<(), Box<std::error::Error + 'static>> {\n+/// fn main() -> Result<(), Box<dyn std::error::Error + 'static>> {\n ///     let foo: SocketAddr = fs::read_to_string(\"address.txt\")?.parse()?;\n ///     Ok(())\n /// }"}, {"sha": "5d8a664b93daddb5dcb678bca114a65bb3bd6388", "filename": "src/test/run-pass/string-box-error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398df1520638c68bb75daa33d64c75387c26b1f/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-box-error.rs?ref=6398df1520638c68bb75daa33d64c75387c26b1f", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Ensure that both `Box<Error + Send + Sync>` and `Box<Error>` can be obtained from `String`.\n+// Ensure that both `Box<dyn Error + Send + Sync>` and `Box<dyn Error>` can be\n+// obtained from `String`.\n \n use std::error::Error;\n "}]}