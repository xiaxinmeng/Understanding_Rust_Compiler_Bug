{"sha": "3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWM2MzdkYjRiYTgzNWE3YTc5YTg0NTY2ZGFlNGExYjFlNGExYWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-20T03:11:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T03:11:11Z"}, "message": "Rollup merge of #78111 - SNCPlay42:not-always-self, r=lcnr\n\nTrait predicate ambiguities are not always in `Self`\n\nWhen reporting ambiguities in trait predicates, the compiler incorrectly assumed the ambiguity was always in the type the trait should be implemented on, and never the generic parameters of the trait. This caused silly suggestions for predicates like `<KnownType as Trait<_>>`, such as giving explicit types to completely unrelated variables that happened to be of type `KnownType`.\n\nThis also reverts #73027, which worked around this issue in some cases and does not appear to be necessary any more.\n\nfixes #77982\nfixes #78055", "tree": {"sha": "7dc771caed099ece562d3b4b6f650ff7b81b6d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc771caed099ece562d3b4b6f650ff7b81b6d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjlVQCRBK7hj4Ov3rIwAAdHIIAJ9B6h/nZxv1BYNuYBNz4ujC\nO0KuSu+BqPskCeNOo5GkLPxZechUQqaARQSyacQSlakCvguYbNY+E+nqEUu1DTNE\nod5cSQdZgtsT2RZhTTRZIwbwKcxqhdc0ZKfb/vMTtNt01eExYfhOiPBvPZvPcFJj\nMY8ERql7kUSdtT+NOc3JWBzzh3bVBTc0KFAQlAjsKYOLtneiRq38Itqs152aw+8h\n0vyQQsV+VW27E4+j4smoBME6kVgx28VqLNJKOSbfaAI1wqF8otIyL3pcOPBEk/YF\nUn7YCEQfJFuGRONvFMRlfFD/NyyV4zUborLIUyAcczoRzlGkJfZHkAdKKNaOCaE=\n=RquK\n-----END PGP SIGNATURE-----\n", "payload": "tree 7dc771caed099ece562d3b4b6f650ff7b81b6d8c\nparent aebeec7e5aa58a6538e434f4fcc7b861b2123ab4\nparent c146e8c54fa0b99defd1ba77ad4d6505c491f4f3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603163471 +0900\ncommitter GitHub <noreply@github.com> 1603163471 +0900\n\nRollup merge of #78111 - SNCPlay42:not-always-self, r=lcnr\n\nTrait predicate ambiguities are not always in `Self`\n\nWhen reporting ambiguities in trait predicates, the compiler incorrectly assumed the ambiguity was always in the type the trait should be implemented on, and never the generic parameters of the trait. This caused silly suggestions for predicates like `<KnownType as Trait<_>>`, such as giving explicit types to completely unrelated variables that happened to be of type `KnownType`.\n\nThis also reverts #73027, which worked around this issue in some cases and does not appear to be necessary any more.\n\nfixes #77982\nfixes #78055\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "html_url": "https://github.com/rust-lang/rust/commit/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aebeec7e5aa58a6538e434f4fcc7b861b2123ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebeec7e5aa58a6538e434f4fcc7b861b2123ab4", "html_url": "https://github.com/rust-lang/rust/commit/aebeec7e5aa58a6538e434f4fcc7b861b2123ab4"}, {"sha": "c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "html_url": "https://github.com/rust-lang/rust/commit/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3"}], "stats": {"total": 185, "additions": 123, "deletions": 62}, "files": [{"sha": "21023a06bb2d90a7e3932d1a24738d215db63d42", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -91,17 +91,6 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n         if let (None, Some(ty)) =\n             (self.found_local_pattern, self.node_ty_contains_target(local.hir_id))\n         {\n-            // FIXME: There's a trade-off here - we can either check that our target span\n-            // is contained in `local.span` or not. If we choose to check containment\n-            // we can avoid some spurious suggestions (see #72690), but we lose\n-            // the ability to report on things like:\n-            //\n-            // ```\n-            // let x = vec![];\n-            // ```\n-            //\n-            // because the target span will be in the macro expansion of `vec![]`.\n-            // At present we choose not to check containment.\n             self.found_local_pattern = Some(&*local.pat);\n             self.found_node_ty = Some(ty);\n         }\n@@ -113,10 +102,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n             if let (None, Some(ty)) =\n                 (self.found_arg_pattern, self.node_ty_contains_target(param.hir_id))\n             {\n-                if self.target_span.contains(param.pat.span) {\n-                    self.found_arg_pattern = Some(&*param.pat);\n-                    self.found_node_ty = Some(ty);\n-                }\n+                self.found_arg_pattern = Some(&*param.pat);\n+                self.found_node_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);"}, {"sha": "f8bd3ab96e254733666043631f3402f7a7388f7c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -1462,9 +1462,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let bound_predicate = predicate.bound_atom();\n         let mut err = match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(data, _) => {\n-                let self_ty = data.trait_ref.self_ty();\n                 let trait_ref = bound_predicate.rebind(data.trait_ref);\n-                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind(), trait_ref);\n+                debug!(\"trait_ref {:?}\", trait_ref);\n \n                 if predicate.references_error() {\n                     return;\n@@ -1479,6 +1478,17 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // known, since we don't dispatch based on region\n                 // relationships.\n \n+                // Pick the first substitution that still contains inference variables as the one\n+                // we're going to emit an error for. If there are none (see above), fall back to\n+                // the substitution for `Self`.\n+                let subst = {\n+                    let substs = data.trait_ref.substs;\n+                    substs\n+                        .iter()\n+                        .find(|s| s.has_infer_types_or_consts())\n+                        .unwrap_or_else(|| substs[0])\n+                };\n+\n                 // This is kind of a hack: it frequently happens that some earlier\n                 // error prevents types from being fully inferred, and then we get\n                 // a bunch of uninteresting errors saying something like \"<generic\n@@ -1495,21 +1505,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.emit_inference_failure_err(\n-                        body_id,\n-                        span,\n-                        self_ty.into(),\n-                        ErrorCode::E0282,\n-                    )\n-                    .emit();\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0282).emit();\n                     return;\n                 }\n-                let mut err = self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    self_ty.into(),\n-                    ErrorCode::E0283,\n-                );\n+                let mut err =\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283);\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());"}, {"sha": "2005bd4dd5ca7e7d67e4535238f9409c49d70ee7", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:5\n+  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n    |\n LL |     with_closure(|x: u32, y| {});\n-   |     ^^^^^^^^^^^^ cannot infer type for type parameter `B` declared on the function `with_closure`\n+   |                           ^ consider giving this closure parameter a type\n \n error: aborting due to previous error\n "}, {"sha": "a68369616d8b62a32b84bfc9a0e5b2994eae5bc8", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -14,7 +14,7 @@ pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR type annotations needed\n+    let ex = |x| { //~ ERROR type annotations needed\n+        let_(add(x,x), |y| {\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "12b2eb48e7eaa2987d341590f80595f040d88ba6", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -1,13 +1,8 @@\n-error[E0282]: type annotations needed for the closure `fn(Expr<'_, _>) -> Expr<'_, _>`\n-  --> $DIR/issue-23046.rs:18:9\n+error[E0282]: type annotations needed for `Expr<'_, VAR>`\n+  --> $DIR/issue-23046.rs:17:15\n    |\n-LL |         let_(add(x,x), |y| {\n-   |         ^^^^ cannot infer type for type parameter `VAR` declared on the function `let_`\n-   |\n-help: give this closure an explicit return type without `_` placeholders\n-   |\n-LL |             let_(add(x, x), |x|-> Expr<'_, _> { x })})};\n-   |                                ^^^^^^^^^^^^^^^^   ^\n+LL |     let ex = |x| {\n+   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n \n error: aborting due to previous error\n "}, {"sha": "3443cca5f327058695df5f7bde8e9d57eb726164", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -13,19 +13,21 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^ consider giving this closure parameter a type\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:15:17\n    |\n LL |     let _ = \"x\".as_ref();\n-   |                 ^^^^^^ cannot infer type for type `str`\n+   |         -       ^^^^^^ cannot infer type for type parameter `T` declared on the trait `AsRef`\n+   |         |\n+   |         consider giving this pattern the explicit type `&T`, where the type parameter `T` is specified\n    |\n    = note: cannot satisfy `str: AsRef<_>`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:19:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -34,7 +36,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:25:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -43,41 +45,34 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:33:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:41:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:55:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n-...\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`"}, {"sha": "03d4fe23cc5bcff87004cfeed8144971e3320d70", "filename": "src/test/ui/traits/issue-77982.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -0,0 +1,40 @@\n+use std::collections::HashMap;\n+\n+fn what() {\n+    let descr = String::new();\n+    let mut opts = HashMap::<String, ()>::new();\n+    let opt = String::new();\n+\n+    opts.get(opt.as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn main() {\n+    let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+    //~^ ERROR type annotations needed\n+}\n+\n+trait Foo<'a, T: ?Sized> {\n+    fn foo(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+trait Bar<'a, T: ?Sized> {\n+    fn bar(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+impl Foo<'static, u32> for () {}\n+impl<'a> Foo<'a, i16> for () {}\n+\n+impl<'a> Bar<'static, u32> for &'a () {}\n+impl<'a> Bar<'a, i16> for &'a () {}\n+\n+fn foo() {\n+    let _ = ().foo(); //~ ERROR type annotations needed\n+}\n+\n+fn bar() {\n+    let _ = (&()).bar(); //~ ERROR type annotations needed\n+}"}, {"sha": "d788f1871ffac83233b8cd186a5706baeb621bac", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=3f1c637db4ba835a7a79a84566dae4a1b1e4a1ac", "patch": "@@ -0,0 +1,44 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:8:10\n+   |\n+LL |     opts.get(opt.as_ref());\n+   |          ^^^ ------------ this method call resolves to `&T`\n+   |          |\n+   |          cannot infer type for type parameter `Q` declared on the associated function `get`\n+   |\n+   = note: cannot satisfy `String: Borrow<_>`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:12:44\n+   |\n+LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+   |                                            ^^^^^^^^^ ----------- this method call resolves to `T`\n+   |                                            |\n+   |                                            cannot infer type for type parameter `T` declared on the trait `From`\n+   |\n+   = note: cannot satisfy `u32: From<_>`\n+   = note: required by `from`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:35:16\n+   |\n+LL |     let _ = ().foo();\n+   |         -      ^^^ cannot infer type for type parameter `T` declared on the trait `Foo`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `(): Foo<'_, _>`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:39:19\n+   |\n+LL |     let _ = (&()).bar();\n+   |         -         ^^^ cannot infer type for type parameter `T` declared on the trait `Bar`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `&(): Bar<'_, _>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}]}