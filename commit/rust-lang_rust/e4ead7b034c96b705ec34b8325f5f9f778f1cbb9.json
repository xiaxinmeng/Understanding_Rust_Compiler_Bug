{"sha": "e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZWFkN2IwMzRjOTZiNzA1ZWMzNGI4MzI1ZjVmOWY3NzhmMWNiYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-12T12:21:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-12T12:21:57Z"}, "message": "auto merge of #18860 : aturon/rust/reexports-in-stab-summary, r=brson\n\nPreviously, the stability summary page attempted to associate impl\r\nblocks with the module in which they were defined, rather than the\r\nmodule defining the type they apply to (which is usually, but not\r\nalways, the same). Unfortunately, due to the basic architecture of\r\nrustdoc, this meant that impls from re-exports were not being counted.\r\n\r\nThis commit makes the stability summary work the same way that rustdoc's\r\nrendered output does: all methods are counted alongside the type they\r\napply to, no matter where the methods are defined.\r\n\r\nIn addition, for trait impl blocks only the stability of the overall\r\nblock is counted; the stability of the methods within is not\r\ncounted (since that stability level is part of the trait definition).\r\n\r\nFixes #18812", "tree": {"sha": "51670a2fa1f3e80a6f19281837b5591bcf9d3dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51670a2fa1f3e80a6f19281837b5591bcf9d3dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "html_url": "https://github.com/rust-lang/rust/commit/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea23e562743510b54bf310ffa5b7ce4367bf3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea23e562743510b54bf310ffa5b7ce4367bf3a3", "html_url": "https://github.com/rust-lang/rust/commit/7ea23e562743510b54bf310ffa5b7ce4367bf3a3"}, {"sha": "5f09a50e8f5fe8cbf4ce8fed5bfd49b9e12b9aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f09a50e8f5fe8cbf4ce8fed5bfd49b9e12b9aa1", "html_url": "https://github.com/rust-lang/rust/commit/5f09a50e8f5fe8cbf4ce8fed5bfd49b9e12b9aa1"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "264b20ddac12186707d24b8c4882a4a17e988173", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "patch": "@@ -114,19 +114,19 @@ pub enum ExternalLocation {\n \n /// Metadata about an implementor of a trait.\n pub struct Implementor {\n-    def_id: ast::DefId,\n-    generics: clean::Generics,\n-    trait_: clean::Type,\n-    for_: clean::Type,\n-    stability: Option<clean::Stability>,\n+    pub def_id: ast::DefId,\n+    pub generics: clean::Generics,\n+    pub trait_: clean::Type,\n+    pub for_: clean::Type,\n+    pub stability: Option<clean::Stability>,\n }\n \n /// Metadata about implementations for a type.\n #[deriving(Clone)]\n pub struct Impl {\n-    impl_: clean::Impl,\n-    dox: Option<String>,\n-    stability: Option<clean::Stability>,\n+    pub impl_: clean::Impl,\n+    pub dox: Option<String>,\n+    pub stability: Option<clean::Stability>,\n }\n \n /// This cache is used to store information about the `clean::Crate` being\n@@ -254,11 +254,6 @@ pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) ->\n \n     try!(mkdir(&cx.dst));\n \n-    // Crawl the crate, building a summary of the stability levels.  NOTE: this\n-    // summary *must* be computed with the original `krate`; the folding below\n-    // removes the impls from their modules.\n-    let summary = stability_summary::build(&krate);\n-\n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n     let default: &[_] = &[];\n@@ -372,6 +367,9 @@ pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) ->\n     try!(write_shared(&cx, &krate, &*cache, index));\n     let krate = try!(render_sources(&mut cx, krate));\n \n+    // Crawl the crate, building a summary of the stability levels.\n+    let summary = stability_summary::build(&krate);\n+\n     // And finally render the whole crate's documentation\n     cx.krate(krate, summary)\n }"}, {"sha": "9b59a258ce1910706aaed95eff53a3bd927bb6fb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "patch": "@@ -16,7 +16,7 @@\n #![crate_type = \"rlib\"]\n \n #![allow(unknown_features)]\n-#![feature(globs, struct_variant, macro_rules, phase, slicing_syntax)]\n+#![feature(globs, struct_variant, macro_rules, phase, slicing_syntax, tuple_indexing)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "37eb7308191093008088588960bdb3931012df9f", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "patch": "@@ -22,7 +22,9 @@ use syntax::ast::Public;\n \n use clean::{Crate, Item, ModuleItem, Module, StructItem, Struct, EnumItem, Enum};\n use clean::{ImplItem, Impl, Trait, TraitItem, TraitMethod, ProvidedMethod, RequiredMethod};\n-use clean::{TypeTraitItem, ViewItemItem, PrimitiveItem};\n+use clean::{TypeTraitItem, ViewItemItem, PrimitiveItem, Stability};\n+\n+use html::render::cache_key;\n \n #[deriving(Zero, Encodable, Decodable, PartialEq, Eq)]\n /// The counts for each stability level.\n@@ -88,12 +90,8 @@ fn visible(item: &Item) -> bool {\n     }\n }\n \n-// Produce the summary for an arbitrary item. If the item is a module, include a\n-// module summary. The counts for items with nested items (e.g. modules, traits,\n-// impls) include all children counts.\n-fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n-    // count this item\n-    let item_counts = match item.stability {\n+fn count_stability(stab: Option<&Stability>) -> Counts {\n+    match stab {\n         None             => Counts { unmarked: 1,     .. Zero::zero() },\n         Some(ref stab) => match stab.level {\n             Deprecated   => Counts { deprecated: 1,   .. Zero::zero() },\n@@ -103,7 +101,31 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n             Frozen       => Counts { frozen: 1,       .. Zero::zero() },\n             Locked       => Counts { locked: 1,       .. Zero::zero() },\n         }\n-    };\n+    }\n+}\n+\n+fn summarize_methods(item: &Item) -> Counts {\n+    match cache_key.get().unwrap().impls.get(&item.def_id) {\n+        Some(v) => {\n+            v.iter().map(|i| {\n+                let mut count = count_stability(i.stability.as_ref());\n+                if i.impl_.trait_.is_none() {\n+                    count = count +\n+                        i.impl_.items.iter().map(|ti| summarize_item(ti).0).sum();\n+                }\n+                count\n+            }).sum()\n+        }\n+        None    => Zero::zero()\n+    }\n+}\n+\n+\n+// Produce the summary for an arbitrary item. If the item is a module, include a\n+// module summary. The counts for items with nested items (e.g. modules, traits,\n+// impls) include all children counts.\n+fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n+    let item_counts = count_stability(item.stability.as_ref()) + summarize_methods(item);\n \n     // Count this item's children, if any. Note that a trait impl is\n     // considered to have no children."}]}