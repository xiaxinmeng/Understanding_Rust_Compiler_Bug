{"sha": "7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMmE4ODdjODM4NzU0YzBmYTM5MmM2OTBmZjgzMjFkNWRmZWIwYmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T12:45:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T12:45:32Z"}, "message": "Use either SimpleJIT or faerie, but not both", "tree": {"sha": "c3fb19b4e586749516e2fc324a8e131bce88d1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3fb19b4e586749516e2fc324a8e131bce88d1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "html_url": "https://github.com/rust-lang/rust/commit/7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7031afb1ba7c89e21b2889056fee76edd21b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7031afb1ba7c89e21b2889056fee76edd21b16", "html_url": "https://github.com/rust-lang/rust/commit/bd7031afb1ba7c89e21b2889056fee76edd21b16"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "55fcc277a9a2ef806bbed8109ab92985d988cf97", "filename": "src/abi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "patch": "@@ -336,7 +336,8 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n                 .unwrap()\n                 .contains(crate::analyze::Flags::NOT_SSA)\n             {\n-                fx.bcx.declare_var(mir_var(local), fx.cton_type(ty).unwrap());\n+                fx.bcx\n+                    .declare_var(mir_var(local), fx.cton_type(ty).unwrap());\n                 match get_pass_mode(fx.tcx, fx.self_sig().abi, ty, false) {\n                     PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n                     PassMode::ByVal(_) => fx.bcx.def_var(mir_var(local), ebb_param),\n@@ -401,7 +402,8 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n             });\n             CPlace::from_stack_slot(fx, stack_slot, ty)\n         } else {\n-            fx.bcx.declare_var(mir_var(local), fx.cton_type(ty).unwrap());\n+            fx.bcx\n+                .declare_var(mir_var(local), fx.cton_type(ty).unwrap());\n             CPlace::Var(local, layout)\n         };\n "}, {"sha": "1cf5abd873d9a83d7753496d8b67deb807a20c03", "filename": "src/lib.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "patch": "@@ -60,8 +60,8 @@ mod analyze;\n mod base;\n mod common;\n mod constant;\n-mod pretty_clif;\n mod metadata;\n+mod pretty_clif;\n \n mod prelude {\n     pub use std::any::Any;\n@@ -222,22 +222,31 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let isa = cranelift::codegen::isa::lookup(target_lexicon::Triple::host())\n             .unwrap()\n             .finish(flags);\n-        let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n-        let mut faerie_module: Module<FaerieBackend> = Module::new(\n-            FaerieBuilder::new(\n-                isa,\n-                \"some_file.o\".to_string(),\n-                FaerieTrapCollection::Disabled,\n-                FaerieBuilder::default_libcall_names(),\n-            ).unwrap(),\n-        );\n+        let (mut jit_module, mut faerie_module): (\n+            Option<Module<SimpleJITBackend>>,\n+            Option<Module<FaerieBackend>>,\n+        ) = if std::env::var(\"SHOULD_RUN\").is_ok() {\n+            (Some(Module::new(SimpleJITBuilder::new())), None)\n+        } else {\n+            (\n+                None,\n+                Some(Module::new(\n+                    FaerieBuilder::new(\n+                        isa,\n+                        \"some_file.o\".to_string(),\n+                        FaerieTrapCollection::Disabled,\n+                        FaerieBuilder::default_libcall_names(),\n+                    ).unwrap(),\n+                )),\n+            )\n+        };\n \n         let defined_functions = {\n             use std::io::Write;\n             let mut cx = CodegenCx {\n                 tcx,\n-                jit: Some((ConstantCx::default(), &mut jit_module)),\n-                faerie: Some((ConstantCx::default(), &mut faerie_module)),\n+                jit: jit_module.as_mut().map(|m| (ConstantCx::default(), m)),\n+                faerie: faerie_module.as_mut().map(|m| (ConstantCx::default(), m)),\n                 defined_functions: Vec::new(),\n \n                 context: Context::new(),\n@@ -294,7 +303,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n-        if std::env::var(\"SHOULD_RUN\").is_ok() {\n+        if let Some(mut jit_module) = jit_module {\n             tcx.sess.warn(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n             let start_wrapper = tcx.lang_items().start_fn().expect(\"no start lang item\");\n \n@@ -320,14 +329,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             jit_module.finish();\n             ::std::process::exit(0);\n         } else if should_codegen(tcx.sess) {\n-            jit_module.finalize_all();\n-            faerie_module.finalize_all();\n+            faerie_module.as_mut().map(|m| m.finalize_all());\n \n             tcx.sess.warn(\"Finalized everything\");\n         }\n \n         Box::new(OngoingCodegen {\n-            product: faerie_module.finish(),\n+            product: faerie_module.unwrap().finish(),\n             metadata: metadata.raw_data,\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n             crate_hash: tcx.crate_hash(LOCAL_CRATE),\n@@ -348,7 +356,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut artifact = ongoing_codegen.product.artifact;\n         let metadata = ongoing_codegen.metadata;\n \n-        let metadata_name = \".rustc.clif_metadata\".to_string() + &ongoing_codegen.crate_hash.to_string();\n+        let metadata_name =\n+            \".rustc.clif_metadata\".to_string() + &ongoing_codegen.crate_hash.to_string();\n         artifact\n             .declare_with(\n                 &metadata_name,\n@@ -373,7 +382,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     let mut builder = ar::Builder::new(file);\n                     builder\n                         .append(\n-                            &ar::Header::new(metadata_name.as_bytes().to_vec(), metadata.len() as u64),\n+                            &ar::Header::new(\n+                                metadata_name.as_bytes().to_vec(),\n+                                metadata.len() as u64,\n+                            ),\n                             ::std::io::Cursor::new(metadata.clone()),\n                         ).unwrap();\n                     if should_codegen(sess) {"}, {"sha": "29bb1c8e32571d5fbd219999423dfb98fd856a17", "filename": "src/metadata.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2a887c838754c0fa392c690ff8321d5dfeb0bb/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=7f2a887c838754c0fa392c690ff8321d5dfeb0bb", "patch": "@@ -1,7 +1,7 @@\n-use std::path::Path;\n-use std::fs::File;\n-use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc::middle::cstore::MetadataLoader;\n+use rustc_data_structures::owning_ref::{self, OwningRef};\n+use std::fs::File;\n+use std::path::Path;\n \n pub struct CraneliftMetadataLoader;\n \n@@ -15,7 +15,11 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         // Iterate over all entries in the archive:\n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier().starts_with(b\".rustc.clif_metadata\") {\n+            if entry\n+                .header()\n+                .identifier()\n+                .starts_with(b\".rustc.clif_metadata\")\n+            {\n                 let mut buf = Vec::new();\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();"}]}