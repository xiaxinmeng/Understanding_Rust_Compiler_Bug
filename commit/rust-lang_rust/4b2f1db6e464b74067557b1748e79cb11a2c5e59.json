{"sha": "4b2f1db6e464b74067557b1748e79cb11a2c5e59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMmYxZGI2ZTQ2NGI3NDA2NzU1N2IxNzQ4ZTc5Y2IxMWEyYzVlNTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-29T20:59:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:34Z"}, "message": "Tweak `Self: Sized` restriction diagnostic output", "tree": {"sha": "d9d34329b189d8e00b5c184df655b8f2806dc023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d34329b189d8e00b5c184df655b8f2806dc023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2f1db6e464b74067557b1748e79cb11a2c5e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f1db6e464b74067557b1748e79cb11a2c5e59", "html_url": "https://github.com/rust-lang/rust/commit/4b2f1db6e464b74067557b1748e79cb11a2c5e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f1db6e464b74067557b1748e79cb11a2c5e59/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "html_url": "https://github.com/rust-lang/rust/commit/d137b7ac1173e3bbed6a3d4dfb02c741b64077db"}], "stats": {"total": 129, "additions": 68, "deletions": 61}, "files": [{"sha": "f15fa779534e0c9dd8b316eefeed85b20549d109", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -1046,11 +1046,22 @@ pub fn report_object_safety_error(\n \n     let mut reported_violations = FxHashSet::default();\n     for violation in violations {\n+        if let ObjectSafetyViolation::SizedSelf(sp) = &violation {\n+            if !sp.is_empty() {\n+                // Do not report `SizedSelf` without spans pointing at `SizedSelf` obligations\n+                // with a `Span`.\n+                reported_violations.insert(ObjectSafetyViolation::SizedSelf(vec![].into()));\n+            }\n+        }\n         if reported_violations.insert(violation.clone()) {\n-            match violation.span() {\n-                Some(span) => err.span_label(span, violation.error_msg()),\n-                None => err.note(&violation.error_msg()),\n-            };\n+            let spans = violation.spans();\n+            if spans.is_empty() {\n+                err.note(&violation.error_msg());\n+            } else {\n+                for span in spans {\n+                    err.span_label(span, violation.error_msg());\n+                }\n+            }\n         }\n     }\n "}, {"sha": "8ceefb0abf03880aee08e3b468fbac2a1faffa0b", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -18,15 +18,16 @@ use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use smallvec::SmallVec;\n use syntax::ast;\n \n use std::borrow::Cow;\n use std::iter::{self};\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n     /// `Self: Sized` declared on the trait.\n-    SizedSelf(Span),\n+    SizedSelf(SmallVec<[Span; 1]>),\n \n     /// Supertrait reference references `Self` an in illegal location\n     /// (e.g., `trait Foo : Bar<Self>`).\n@@ -75,18 +76,18 @@ impl ObjectSafetyViolation {\n         }\n     }\n \n-    pub fn span(&self) -> Option<Span> {\n+    pub fn spans(&self) -> SmallVec<[Span; 1]> {\n         // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n         // diagnostics use a `note` instead of a `span_label`.\n-        match *self {\n+        match self {\n+            ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n-            | ObjectSafetyViolation::SizedSelf(span)\n             | ObjectSafetyViolation::Method(_, _, span)\n-                if span != DUMMY_SP =>\n+                if *span != DUMMY_SP =>\n             {\n-                Some(span)\n+                vec![*span].into()\n             }\n-            _ => None,\n+            _ => vec![].into(),\n         }\n     }\n }\n@@ -189,10 +190,14 @@ fn object_safety_violations_for_trait(\n                         tcx.def_path_str(trait_def_id)\n                     ),\n                 );\n-                match violation.span() {\n-                    Some(span) => err.span_label(span, violation.error_msg()),\n-                    None => err.note(&violation.error_msg()),\n-                };\n+                let spans = violation.spans();\n+                if spans.is_empty() {\n+                    err.note(&violation.error_msg());\n+                } else {\n+                    for span in spans {\n+                        err.span_label(span, violation.error_msg());\n+                    }\n+                }\n                 err.emit();\n                 false\n             } else {\n@@ -203,8 +208,9 @@ fn object_safety_violations_for_trait(\n \n     // Check the trait itself.\n     if trait_has_sized_self(tcx, trait_def_id) {\n-        let span = get_sized_bound(tcx, trait_def_id);\n-        violations.push(ObjectSafetyViolation::SizedSelf(span));\n+        // We don't want to include the requirement from `Sized` itself to be `Sized` in the list.\n+        let spans = get_sized_bounds(tcx, trait_def_id);\n+        violations.push(ObjectSafetyViolation::SizedSelf(spans));\n     }\n     if predicates_reference_self(tcx, trait_def_id, false) {\n         violations.push(ObjectSafetyViolation::SupertraitSelf);\n@@ -224,25 +230,26 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n-fn get_sized_bound(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Span {\n+fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]> {\n     tcx.hir()\n         .get_if_local(trait_def_id)\n         .and_then(|node| match node {\n-            hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., bounds, _), .. }) => bounds\n-                .iter()\n-                .filter_map(|b| match b {\n-                    hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n-                        if Some(trait_ref.trait_ref.trait_def_id())\n-                            == tcx.lang_items().sized_trait() =>\n-                    {\n-                        Some(trait_ref.span)\n-                    }\n-                    _ => None,\n-                })\n-                .next(),\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., bounds, _), .. }) => Some(\n+                bounds\n+                    .iter()\n+                    .filter_map(|b| match b {\n+                        hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n+                            if trait_has_sized_self(tcx, trait_ref.trait_ref.trait_def_id()) =>\n+                        {\n+                            Some(trait_ref.span)\n+                        }\n+                        _ => None,\n+                    })\n+                    .collect::<SmallVec<[Span; 1]>>(),\n+            ),\n             _ => None,\n         })\n-        .unwrap_or(DUMMY_SP)\n+        .unwrap_or_else(SmallVec::new)\n }\n \n fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_only: bool) -> bool {"}, {"sha": "237c22d3bf09af04f17fae47557c563a849ac616", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -6,8 +6,6 @@ LL | trait NonObjectSafe1: Sized {}\n ...\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n    |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n@@ -44,8 +42,6 @@ LL | trait NonObjectSafe1: Sized {}\n ...\n LL | impl Trait for dyn NonObjectSafe1 {}\n    |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "1cb2d8c7302a08f2a1c609ca5496e8b6e54808fa", "filename": "src/test/ui/issues/issue-20692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -1,4 +1,4 @@\n-trait Array: Sized {}\n+trait Array: Sized + Copy {}\n \n fn f<T: Array>(x: &T) {\n     let _ = x"}, {"sha": "62efdfb2e91bf5d6373386177d80d608ce24be0e", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -1,24 +1,25 @@\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n-LL | trait Array: Sized {}\n-   |              ----- the trait cannot require that `Self : Sized`\n+LL | trait Array: Sized + Copy {}\n+   |              -----   ---- the trait cannot require that `Self : Sized`\n+   |              |\n+   |              the trait cannot require that `Self : Sized`\n ...\n LL |     &dyn Array;\n    |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n-LL | trait Array: Sized {}\n-   |              ----- the trait cannot require that `Self : Sized`\n+LL | trait Array: Sized + Copy {}\n+   |              -----   ---- the trait cannot require that `Self : Sized`\n+   |              |\n+   |              the trait cannot require that `Self : Sized`\n ...\n LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Array>` for `&T`\n    = note: required by cast to type `&dyn Array`\n "}, {"sha": "a0ecca3020e15b6fc1478ac5e364a5c890b2ba7e", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -12,18 +12,21 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n+LL | trait Foo : Copy {\n+   |             ---- the trait cannot require that `Self : Sized`\n+...\n LL |     let z = &x as &dyn Foo;\n    |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL | trait Foo : Copy {\n+   |             ---- the trait cannot require that `Self : Sized`\n+...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<{integer}>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "5694150ed7cc56cb441d757660ac542f5dfa72a4", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -12,10 +12,12 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL | trait Foo : Copy {\n+   |             ---- the trait cannot require that `Self : Sized`\n+...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<i32>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "473c8f8e6faaf74c149ad61479a30fcf44c52dcc", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -6,8 +6,6 @@ LL | trait Bar : Sized {\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error: aborting due to previous error\n "}, {"sha": "217e2aa00da16523f97ade5ddf5ccbb726385367", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -7,7 +7,6 @@ LL | trait Bar : Sized {\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "91fa144032fc96f91ade73db22c2ef08ce5ce687", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -18,8 +18,6 @@ LL | trait A: Sized {\n    |          ----- the trait cannot require that `Self : Sized`\n LL |     fn f(a: A) -> A;\n    |             ^ the trait `A` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error: associated item referring to unboxed trait object for its own trait\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:13"}, {"sha": "461ad97f2f0ac6f859e78de959207ef81d5976d0", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -7,7 +7,6 @@ LL | trait Trait: Sized {}\n LL |     let t_box: Box<dyn Trait> = Box::new(S);\n    |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<dyn Trait>`\n \n@@ -20,7 +19,6 @@ LL | trait Trait: Sized {}\n LL |     takes_box(Box::new(S));\n    |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<(dyn Trait + 'static)>`\n \n@@ -33,7 +31,6 @@ LL | trait Trait: Sized {}\n LL |     Box::new(S) as Box<dyn Trait>;\n    |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<dyn Trait>`\n "}, {"sha": "6fc57369b4e7375dfa5ad99c3b3269ff2e83aab2", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -7,7 +7,6 @@ LL | trait Trait: Sized {}\n LL |     let t: &dyn Trait = &S;\n    |                         ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n@@ -20,7 +19,6 @@ LL | trait Trait: Sized {}\n LL |     takes_trait(&S);\n    |                 ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n@@ -33,7 +31,6 @@ LL | trait Trait: Sized {}\n LL |     &S as &dyn Trait;\n    |     ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n "}, {"sha": "36c60aefa6bb55cd67fcb495b1cc43ab8c1cc756", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f1db6e464b74067557b1748e79cb11a2c5e59/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=4b2f1db6e464b74067557b1748e79cb11a2c5e59", "patch": "@@ -21,7 +21,6 @@ LL | trait Trait: Sized {}\n LL |         Some(()) => &S,\n    |                     ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n@@ -34,7 +33,6 @@ LL | trait Trait: Sized {}\n LL |     let t: &dyn Trait = match opt() {\n    |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&R`\n    = note: required by cast to type `&dyn Trait`\n "}]}