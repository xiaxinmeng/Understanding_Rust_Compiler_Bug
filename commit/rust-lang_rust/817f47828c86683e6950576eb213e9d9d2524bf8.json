{"sha": "817f47828c86683e6950576eb213e9d9d2524bf8", "node_id": "C_kwDOAAsO6NoAKDgxN2Y0NzgyOGM4NjY4M2U2OTUwNTc2ZWIyMTNlOWQ5ZDI1MjRiZjg", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:15:54Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:15:54Z"}, "message": "support ref params as well", "tree": {"sha": "4c4e78ca954878dd723f41acc586e7a6ec2a4829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4e78ca954878dd723f41acc586e7a6ec2a4829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817f47828c86683e6950576eb213e9d9d2524bf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHU8UoACgkQeO9fUvOM\nSb1tHAv/Z4eie70FoZU199BPT568M79yNQiHiCpzfZjJw3rKB3pd44gmpfjDusnT\nMdpnVCtrkie+Ik12bck2lhk/ybva1lZ4r3RSPucjBZzDWLDz9o9ihTQ8VtgbeJJn\nbABlrCo+UyGiC8YwH+izvnIg5R21ZHTyQWx115gCvsAOBFPIk1W/149HCI6Ny47L\nR5wKRCwPigQymXhkXSQNvjbh34oUnO2nT3dxXKi1j76BqjVbLyJADPYmYl+ON/io\nHanTZKI4UXyRyVLKPpI5Fv5y4/M1+x79gVpKzS2UEpSbvT0/9zqqJxHkXF9zawGW\naBm6rQFP80mBGqCU3scfwiqxr8mmuNPFC7xFxJR3mLiNfBu6v/QVRyz/2yFRbkBB\nf16pbtQb/MoYKtnUlGlk73UusdhHL/hDg3evZ07qW6HY0QfwVDx0HVlCK5AwtMIC\nodhKUabZzZOZHfa1wS7MF38BKu/O0C2HUk2raIxeG/AUlfivFuSK0Q/xXewag7Nk\niB4GfQq1\n=SDLf\n-----END PGP SIGNATURE-----", "payload": "tree 4c4e78ca954878dd723f41acc586e7a6ec2a4829\nparent 056e18fcbd6ac681b968d50534f2b7de21008316\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641345354 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1641345354 +0000\n\nsupport ref params as well\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817f47828c86683e6950576eb213e9d9d2524bf8", "html_url": "https://github.com/rust-lang/rust/commit/817f47828c86683e6950576eb213e9d9d2524bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817f47828c86683e6950576eb213e9d9d2524bf8/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056e18fcbd6ac681b968d50534f2b7de21008316", "url": "https://api.github.com/repos/rust-lang/rust/commits/056e18fcbd6ac681b968d50534f2b7de21008316", "html_url": "https://github.com/rust-lang/rust/commit/056e18fcbd6ac681b968d50534f2b7de21008316"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "fb48c0b4f12da237ac35ed1e4252f2e601a96397", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 109, "deletions": 4, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/817f47828c86683e6950576eb213e9d9d2524bf8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f47828c86683e6950576eb213e9d9d2524bf8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=817f47828c86683e6950576eb213e9d9d2524bf8", "patch": "@@ -52,10 +52,10 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         }\n     }\n \n-    let is_mutable_reference = if let Some(receiver_type) = get_receiver_type(&ctx, &to_extract) {\n-        receiver_type.is_mutable_reference()\n+    let ref_kind: RefKind = if let Some(receiver_type) = get_receiver_type(&ctx, &to_extract) {\n+        if receiver_type.is_mutable_reference() { RefKind::MutRef } else { RefKind::Ref }\n     } else {\n-        false\n+        RefKind::None\n     };\n \n     let anchor = Anchor::from(&to_extract)?;\n@@ -83,7 +83,11 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => to_extract.syntax().text_range(),\n             };\n \n-            let reference_modifier = if is_mutable_reference { \"&mut \" } else { \"\" };\n+            let reference_modifier = match ref_kind {\n+                RefKind::MutRef => \"&mut \",\n+                RefKind::Ref => \"&\",\n+                RefKind::None => \"\"\n+            };\n \n             match anchor {\n                 Anchor::Before(_) | Anchor::Replace(_) => {\n@@ -172,6 +176,13 @@ fn get_receiver(expression: ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n+#[derive(Debug)]\n+enum RefKind {\n+    Ref,\n+    MutRef,\n+    None\n+}\n+\n #[derive(Debug)]\n enum Anchor {\n     Before(SyntaxNode),\n@@ -983,6 +994,100 @@ struct S {\n fn foo(f: &mut Y) {\n     let $0var_name = &mut f.field.field.vec;\n     var_name.push(0);\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_reference_parameter() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+struct X;\n+\n+impl X {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: &S) {\n+    $0s.sub$0.do_thing();\n+}\"#,\n+            r#\"\n+struct X;\n+\n+impl X {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: &S) {\n+    let $0x = &s.sub;\n+    x.do_thing();\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_reference_parameter_deep_nesting() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+struct Z;\n+impl Z {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct Y {\n+    field: Z\n+}\n+\n+struct X {\n+    field: Y\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: &S) {\n+    $0s.sub.field.field$0.do_thing();\n+}\"#,\n+            r#\"\n+struct Z;\n+impl Z {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct Y {\n+    field: Z\n+}\n+\n+struct X {\n+    field: Y\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: &S) {\n+    let $0z = &s.sub.field.field;\n+    z.do_thing();\n }\"#,\n         );\n     }"}]}