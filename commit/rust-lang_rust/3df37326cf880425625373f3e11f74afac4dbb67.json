{"sha": "3df37326cf880425625373f3e11f74afac4dbb67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjM3MzI2Y2Y4ODA0MjU2MjUzNzNmM2UxMWY3NGFmYWM0ZGJiNjc=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-18T06:52:14Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:12:29Z"}, "message": "Add methods .move_from() and .copy_from() to vec\n\nAdd method .move_from() to MutableVector, which consumes another vector\nand moves elements into the receiver.\n\nAdd new trait MutableCloneableVector with one method .copy_from(), which\nclones elements from another vector into the receiver.", "tree": {"sha": "c4f81a8bf7a85f2fba173e31ae349106adf86ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f81a8bf7a85f2fba173e31ae349106adf86ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df37326cf880425625373f3e11f74afac4dbb67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df37326cf880425625373f3e11f74afac4dbb67", "html_url": "https://github.com/rust-lang/rust/commit/3df37326cf880425625373f3e11f74afac4dbb67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df37326cf880425625373f3e11f74afac4dbb67/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524a92c72ff05613aa5bbd0d806910222741ae2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/524a92c72ff05613aa5bbd0d806910222741ae2a", "html_url": "https://github.com/rust-lang/rust/commit/524a92c72ff05613aa5bbd0d806910222741ae2a"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "b707530ebce0710d7af70983dc27a866b8fe11e8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3df37326cf880425625373f3e11f74afac4dbb67/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df37326cf880425625373f3e11f74afac4dbb67/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3df37326cf880425625373f3e11f74afac4dbb67", "patch": "@@ -15,6 +15,7 @@\n use cast::transmute;\n use cast;\n use container::{Container, Mutable};\n+use cmp;\n use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use iterator::{FromIterator, Iterator, IteratorUtil};\n@@ -2059,6 +2060,21 @@ pub trait MutableVector<'self, T> {\n     fn mut_iter(self) -> VecMutIterator<'self, T>;\n     fn mut_rev_iter(self) -> VecMutRevIterator<'self, T>;\n \n+    /**\n+     * Consumes `src` and moves as many elements as it can into `self`\n+     * from the range [start,end).\n+     *\n+     * Returns the number of elements copied (the shorter of self.len()\n+     * and end - start).\n+     *\n+     * # Arguments\n+     *\n+     * * src - A mutable vector of `T`\n+     * * start - The index into `src` to start copying from\n+     * * end - The index into `str` to stop copying from\n+     */\n+    fn move_from(self, src: ~[T], start: uint, end: uint) -> uint;\n+\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T;\n     unsafe fn unsafe_set(&self, index: uint, val: T);\n }\n@@ -2087,6 +2103,14 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n+    #[inline]\n+    fn move_from(self, mut src: ~[T], start: uint, end: uint) -> uint {\n+        for self.mut_iter().zip(src.mut_slice(start, end).mut_iter()).advance |(a, b)| {\n+            util::swap(a, b);\n+        }\n+        cmp::min(self.len(), end-start)\n+    }\n+\n     #[inline]\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T {\n         let pair_ptr: &(*mut T, uint) = transmute(self);\n@@ -2100,6 +2124,23 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n }\n \n+/// Trait for ~[T] where T is Cloneable\n+pub trait MutableCloneableVector<T> {\n+    /// Copies as many elements from `src` as it can into `self`\n+    /// (the shorter of self.len() and src.len()). Returns the number of elements copied.\n+    fn copy_from(self, &[T]) -> uint;\n+}\n+\n+impl<'self, T:Clone> MutableCloneableVector<T> for &'self mut [T] {\n+    #[inline]\n+    fn copy_from(self, src: &[T]) -> uint {\n+        for self.mut_iter().zip(src.iter()).advance |(a, b)| {\n+            *a = b.clone();\n+        }\n+        cmp::min(self.len(), src.len())\n+    }\n+}\n+\n /**\n * Constructs a vector from an unsafe pointer to a buffer\n *\n@@ -3895,6 +3936,38 @@ mod tests {\n         assert_eq!(xs, [5, 5, 5, 5, 5])\n     }\n \n+    #[test]\n+    fn test_move_from() {\n+        let mut a = [1,2,3,4,5];\n+        let b = ~[6,7,8];\n+        assert_eq!(a.move_from(b, 0, 3), 3);\n+        assert_eq!(a, [6,7,8,4,5]);\n+        let mut a = [7,2,8,1];\n+        let b = ~[3,1,4,1,5,9];\n+        assert_eq!(a.move_from(b, 0, 6), 4);\n+        assert_eq!(a, [3,1,4,1]);\n+        let mut a = [1,2,3,4];\n+        let b = ~[5,6,7,8,9,0];\n+        assert_eq!(a.move_from(b, 2, 3), 1);\n+        assert_eq!(a, [7,2,3,4]);\n+        let mut a = [1,2,3,4,5];\n+        let b = ~[5,6,7,8,9,0];\n+        assert_eq!(a.mut_slice(2,4).move_from(b,1,6), 2);\n+        assert_eq!(a, [1,2,6,7,5]);\n+    }\n+\n+    #[test]\n+    fn test_copy_from() {\n+        let mut a = [1,2,3,4,5];\n+        let b = [6,7,8];\n+        assert_eq!(a.copy_from(b), 3);\n+        assert_eq!(a, [6,7,8,4,5]);\n+        let mut c = [7,2,8,1];\n+        let d = [3,1,4,1,5,9];\n+        assert_eq!(c.copy_from(d), 4);\n+        assert_eq!(c, [3,1,4,1]);\n+    }\n+\n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1,2,3,4,5];"}]}