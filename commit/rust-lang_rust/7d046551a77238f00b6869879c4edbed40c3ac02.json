{"sha": "7d046551a77238f00b6869879c4edbed40c3ac02", "node_id": "C_kwDOAAsO6NoAKDdkMDQ2NTUxYTc3MjM4ZjAwYjY4Njk4NzljNGVkYmVkNDBjM2FjMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-21T04:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-21T04:44:29Z"}, "message": "Rollup merge of #110555 - compiler-errors:subst-missing-trait-items, r=cjgillot\n\nSubstitute missing trait items suggestion correctly\n\nProperly substitute missing item suggestions, so that when they reference generics from their parent trait they actually have the right time for the impl.\n\nAlso, some other minor tweaks like using `/* Type */` to signify a GAT's type is actually missing, and fixing generic arg suggestions for GATs in general.", "tree": {"sha": "07f95f1e7fab09d9734e0d0feb199566e6c4628b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f95f1e7fab09d9734e0d0feb199566e6c4628b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d046551a77238f00b6869879c4edbed40c3ac02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQhStCRBK7hj4Ov3rIwAAefkIAKwXoogNZyF3A9W6fAOzPXfW\nfIqRXvu64U9xATQ9514J5wId+kRIA1ZiK0xiDCO2heCDMmtFtQV6Uj/3qcfAZyBZ\nGjXbzCD+YK60S/ia0oeXt6b0VujBVFFRLMEUE0jR3TKzFFceIz+Fx5N4dubY2eUM\nN5D6BGgOgawMYntJHPLfzR7xNjK4M7YIf17XZNF1+Bsc7IYmK32kQwxxz57oQ+cA\n0cMxxFo4+LqFrHNf5nj4Gfj4SHDnB3wv2vhZI5SrwTRMuKwk84v+GHedlo+UoBaR\nQALTAmeWEPp3pP+Lbelw7AT7tyEb3KCwGrtVc41fJ7fTJkSeNSczqlC2g1ek/NY=\n=rpEh\n-----END PGP SIGNATURE-----\n", "payload": "tree 07f95f1e7fab09d9734e0d0feb199566e6c4628b\nparent f2321ecce5d3ce9adedeb376f76492657478f5d1\nparent f362f6e9e6cb5d55bbac6a94353209c3e3a2ebb5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682052269 +0200\ncommitter GitHub <noreply@github.com> 1682052269 +0200\n\nRollup merge of #110555 - compiler-errors:subst-missing-trait-items, r=cjgillot\n\nSubstitute missing trait items suggestion correctly\n\nProperly substitute missing item suggestions, so that when they reference generics from their parent trait they actually have the right time for the impl.\n\nAlso, some other minor tweaks like using `/* Type */` to signify a GAT's type is actually missing, and fixing generic arg suggestions for GATs in general.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d046551a77238f00b6869879c4edbed40c3ac02", "html_url": "https://github.com/rust-lang/rust/commit/7d046551a77238f00b6869879c4edbed40c3ac02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d046551a77238f00b6869879c4edbed40c3ac02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2321ecce5d3ce9adedeb376f76492657478f5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2321ecce5d3ce9adedeb376f76492657478f5d1", "html_url": "https://github.com/rust-lang/rust/commit/f2321ecce5d3ce9adedeb376f76492657478f5d1"}, {"sha": "f362f6e9e6cb5d55bbac6a94353209c3e3a2ebb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f362f6e9e6cb5d55bbac6a94353209c3e3a2ebb5", "html_url": "https://github.com/rust-lang/rust/commit/f362f6e9e6cb5d55bbac6a94353209c3e3a2ebb5"}], "stats": {"total": 162, "additions": 100, "deletions": 62}, "files": [{"sha": "51ec5dd7a285fb3d60a651ef3f911f15c114d38c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -863,7 +863,7 @@ fn check_impl_items_against_trait<'tcx>(\n         if !missing_items.is_empty() {\n             let full_impl_span =\n                 tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(impl_id));\n-            missing_items_err(tcx, tcx.def_span(impl_id), &missing_items, full_impl_span);\n+            missing_items_err(tcx, impl_id, &missing_items, full_impl_span);\n         }\n \n         if let Some(missing_items) = must_implement_one_of {"}, {"sha": "4b3f3cf169dc0e9f473eea5d61c4674034534fd9", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -198,7 +198,7 @@ fn report_forbidden_specialization(tcx: TyCtxt<'_>, impl_item: DefId, parent_imp\n \n fn missing_items_err(\n     tcx: TyCtxt<'_>,\n-    impl_span: Span,\n+    impl_def_id: LocalDefId,\n     missing_items: &[ty::AssocItem],\n     full_impl_span: Span,\n ) {\n@@ -211,6 +211,7 @@ fn missing_items_err(\n         .collect::<Vec<_>>()\n         .join(\"`, `\");\n \n+    let impl_span = tcx.def_span(impl_def_id);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         impl_span,\n@@ -229,7 +230,11 @@ fn missing_items_err(\n         tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n \n     for &trait_item in missing_items {\n-        let snippet = suggestion_signature(trait_item, tcx);\n+        let snippet = suggestion_signature(\n+            tcx,\n+            trait_item,\n+            tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity(),\n+        );\n         let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n         let msg = format!(\"implement the missing item: `{snippet}`\");\n         let appl = Applicability::HasPlaceholders;\n@@ -301,11 +306,11 @@ fn default_body_is_unstable(\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n ) -> (String, String) {\n     let mut types: FxHashMap<Ty<'tcx>, Vec<DefId>> = FxHashMap::default();\n     let mut projections = vec![];\n-    for (predicate, _) in predicates.predicates {\n+    for (predicate, _) in predicates {\n         debug!(\"predicate {:?}\", predicate);\n         let bound_predicate = predicate.kind();\n         match bound_predicate.skip_binder() {\n@@ -367,7 +372,7 @@ fn fn_sig_suggestion<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sig: ty::FnSig<'tcx>,\n     ident: Ident,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n     assoc: ty::AssocItem,\n ) -> String {\n     let args = sig\n@@ -436,7 +441,17 @@ pub fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n /// Return placeholder code for the given associated item.\n /// Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a\n /// structured suggestion.\n-fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n+fn suggestion_signature<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    assoc: ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> String {\n+    let substs = ty::InternalSubsts::identity_for_item(tcx, assoc.def_id).rebase_onto(\n+        tcx,\n+        assoc.container_id(tcx),\n+        impl_trait_ref.with_self_ty(tcx, tcx.types.self_param).substs,\n+    );\n+\n     match assoc.kind {\n         ty::AssocKind::Fn => {\n             // We skip the binder here because the binder would deanonymize all\n@@ -445,16 +460,22 @@ fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             // regions just fine, showing `fn(&MyType)`.\n             fn_sig_suggestion(\n                 tcx,\n-                tcx.fn_sig(assoc.def_id).subst_identity().skip_binder(),\n+                tcx.fn_sig(assoc.def_id).subst(tcx, substs).skip_binder(),\n                 assoc.ident(tcx),\n-                tcx.predicates_of(assoc.def_id),\n+                tcx.predicates_of(assoc.def_id).instantiate_own(tcx, substs),\n                 assoc,\n             )\n         }\n-        ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.name),\n+        ty::AssocKind::Type => {\n+            let (generics, where_clauses) = bounds_from_generic_predicates(\n+                tcx,\n+                tcx.predicates_of(assoc.def_id).instantiate_own(tcx, substs),\n+            );\n+            format!(\"type {}{generics} = /* Type */{where_clauses};\", assoc.name)\n+        }\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id).subst_identity();\n-            let val = ty_kind_suggestion(ty).unwrap_or(\"value\");\n+            let val = ty_kind_suggestion(ty).unwrap_or(\"todo!()\");\n             format!(\"const {}: {} = {};\", assoc.name, ty, val)\n         }\n     }"}, {"sha": "6bdb9ded4827649aeaac5c81a29d4b9c8bf01c79", "filename": "tests/ui/async-await/issue-74047.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-74047.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -4,8 +4,8 @@ error[E0046]: not all trait items implemented, missing: `Error`, `try_from`\n LL | impl TryFrom<OtherStream> for MyStream {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n    |\n-   = help: implement the missing item: `type Error = Type;`\n-   = help: implement the missing item: `fn try_from(_: T) -> Result<Self, <Self as TryFrom<T>>::Error> { todo!() }`\n+   = help: implement the missing item: `type Error = /* Type */;`\n+   = help: implement the missing item: `fn try_from(_: OtherStream) -> Result<Self, <Self as TryFrom<OtherStream>>::Error> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "5b10aab4b3f8df974e497bbcd19e33e141d4c019", "filename": "tests/ui/generic-associated-types/auxiliary/missing-item-sugg.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -0,0 +1,5 @@\n+pub trait Foo {\n+    type Gat<T>\n+    where\n+        T: std::fmt::Display;\n+}"}, {"sha": "35d573d818846f78e1a3eb5e94424e7b24622b9c", "filename": "tests/ui/generic-associated-types/missing-item-sugg.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:missing-item-sugg.rs\n+\n+extern crate missing_item_sugg;\n+\n+struct Local;\n+impl missing_item_sugg::Foo for Local {\n+    //~^ ERROR not all trait items implemented, missing: `Gat`\n+}\n+//~^ HELP implement the missing item: `type Gat<T> = /* Type */ where T: std::fmt::Display;`\n+\n+fn main() {}"}, {"sha": "378115f6d38938130b866a87c24bc5e6e65e5cd8", "filename": "tests/ui/generic-associated-types/missing-item-sugg.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -0,0 +1,11 @@\n+error[E0046]: not all trait items implemented, missing: `Gat`\n+  --> $DIR/missing-item-sugg.rs:6:1\n+   |\n+LL | impl missing_item_sugg::Foo for Local {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Gat` in implementation\n+   |\n+   = help: implement the missing item: `type Gat<T> = /* Type */ where T: std::fmt::Display;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "e849f5d0490d7504fcfd4a7ed5a066e07adda225", "filename": "tests/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3344.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> Option<std::cmp::Ordering> { todo!() }`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Thing) -> Option<std::cmp::Ordering> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "835c9b2aa4840b90de27d3afd97f7bc5be5b23d3", "filename": "tests/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -5,7 +5,7 @@ LL | impl m1::X for X {\n    | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5` in implementation\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n-   = help: implement the missing item: `type Type = Type;`\n+   = help: implement the missing item: `type Type = /* Type */;`\n    = help: implement the missing item: `fn method(&self, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method2(self: Box<Self>, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method3(_: &Self, _: String) -> <Self as m1::X>::Type { todo!() }`"}, {"sha": "cd854e61f2f4711689dfe1bd6f6f931dc6a4255f", "filename": "tests/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23729.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Item`\n LL |         impl Iterator for Recurrence {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n-   = help: implement the missing item: `type Item = Type;`\n+   = help: implement the missing item: `type Item = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "83a9e8c9b9876039f8df73b64f0d0b46119b9217", "filename": "tests/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23827.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Output`\n LL | impl<C: Component> FnOnce<(C,)> for Prototype {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n-   = help: implement the missing item: `type Output = Type;`\n+   = help: implement the missing item: `type Output = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "cf666e8b4a7a648e9ada29fd3dc4c32d562b2f7d", "filename": "tests/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24356.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Target`\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n-   = help: implement the missing item: `type Target = Type;`\n+   = help: implement the missing item: `type Target = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "b026035a6a1689ad4dabffaa10e2cdbc9a243261", "filename": "tests/ui/suggestions/auxiliary/missing-assoc-fn-applicable-suggestions.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -0,0 +1,16 @@\n+pub trait TraitB {\n+    type Item;\n+}\n+\n+pub trait TraitA<A> {\n+    type Type;\n+\n+    fn bar<T>(_: T) -> Self;\n+\n+    fn baz<T>(_: T) -> Self\n+    where\n+        T: TraitB,\n+        <T as TraitB>::Item: Copy;\n+\n+    const A: usize;\n+}"}, {"sha": "a0cb39a3f8a25104b49a96e33b9f22a5d9fe89e6", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.fixed", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2321ecce5d3ce9adedeb376f76492657478f5d1/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2321ecce5d3ce9adedeb376f76492657478f5d1/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed?ref=f2321ecce5d3ce9adedeb376f76492657478f5d1", "patch": "@@ -1,21 +0,0 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n-\n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n-\n-struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n-fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }\n-fn bar<T>(_: T) -> Self { todo!() }\n-type Type = Type;\n-}\n-\n-fn main() {}"}, {"sha": "11e0c9a3a72afd493fc2a1f5a562fad24468dcfd", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -1,18 +1,15 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n+// aux-build:missing-assoc-fn-applicable-suggestions.rs\n \n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n+extern crate missing_assoc_fn_applicable_suggestions;\n+use missing_assoc_fn_applicable_suggestions::TraitA;\n \n struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+impl TraitA<()> for S {\n+    //~^ ERROR not all trait items implemented\n }\n+//~^ HELP implement the missing item: `type Type = /* Type */;`\n+//~| HELP implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+//~| HELP implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+//~| HELP implement the missing item: `const A: usize = 42;`\n \n fn main() {}"}, {"sha": "4c2d2776d3d8102ef00159f9de8ddbd7f30dcab8", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -1,15 +1,13 @@\n-error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`\n-  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:15:1\n+error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`, `A`\n+  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:7:1\n    |\n-LL |     type Type;\n-   |     --------- `Type` from trait\n-LL |     fn bar<T>(_: T) -> Self;\n-   |     ------------------------ `bar` from trait\n-LL |     fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-   |     ------------------------------------------------------------------- `baz` from trait\n-...\n LL | impl TraitA<()> for S {\n-   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz` in implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz`, `A` in implementation\n+   |\n+   = help: implement the missing item: `type Type = /* Type */;`\n+   = help: implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+   = help: implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+   = help: implement the missing item: `const A: usize = 42;`\n \n error: aborting due to previous error\n "}, {"sha": "77fa956287816b0db6ac9d82b69aebc245f6f2e2", "filename": "tests/ui/suggestions/missing-assoc-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d046551a77238f00b6869879c4edbed40c3ac02/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=7d046551a77238f00b6869879c4edbed40c3ac02", "patch": "@@ -28,7 +28,7 @@ error[E0046]: not all trait items implemented, missing: `from_iter`\n LL | impl FromIterator<()> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `from_iter` in implementation\n    |\n-   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = A { todo!() }`\n+   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = () { todo!() }`\n \n error: aborting due to 3 previous errors\n "}]}