{"sha": "f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTFjMjk4OGQ0MGJiZGViYzVjOWE2M2NlNGJmYjg4M2EyZmJjYTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T14:34:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source for Trait", "tree": {"sha": "6afe8341929ac7a4e6c69d0d99022cff6a13a859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afe8341929ac7a4e6c69d0d99022cff6a13a859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "html_url": "https://github.com/rust-lang/rust/commit/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6213b516ab5c9be62c499ba0ea9eb399d68389", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6213b516ab5c9be62c499ba0ea9eb399d68389", "html_url": "https://github.com/rust-lang/rust/commit/5e6213b516ab5c9be62c499ba0ea9eb399d68389"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "046f53a8c70b5759b687460cfaccea9adbfe6959", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -110,7 +110,7 @@ fn resolve_target_trait_def(\n         impl_block.target_trait().map(AstNode::syntax).and_then(ast::PathType::cast)?.path()?;\n \n     match analyzer.resolve_path(db, &ast_path) {\n-        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).1),\n+        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).ast),\n         _ => None,\n     }\n }"}, {"sha": "0a750b590042dc426472fe2906cf74294cc1dbe7", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -528,6 +528,13 @@ pub struct EnumVariant {\n     pub(crate) id: EnumVariantId,\n }\n \n+impl HasSource for EnumVariant {\n+    type Ast = TreeArc<ast::EnumVariant>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::EnumVariant>> {\n+        self.source_impl(db)\n+    }\n+}\n+\n impl EnumVariant {\n     pub fn source(\n         &self,\n@@ -886,12 +893,16 @@ pub struct Trait {\n     pub(crate) id: TraitId,\n }\n \n+impl HasSource for Trait {\n+    type Ast = TreeArc<ast::TraitDef>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::TraitDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Trait {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::TraitDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::TraitDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {"}, {"sha": "0cb0c0db85f27f599358513219733b898e114d34", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -83,7 +83,7 @@ pub(crate) fn documentation_query(\n         DocDef::Const(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Function(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n-        DocDef::Trait(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Trait(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::TypeAlias(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::MacroDef(it) => docs_from_ast(&*it.source(db).1),\n     }"}, {"sha": "08d711754183a4560b489145d7f9f9b938b9b86a", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -79,7 +79,7 @@ impl GenericParams {\n                     name: Name::self_type(),\n                     default: None,\n                 });\n-                generics.fill(&*it.source(db).1, start + 1);\n+                generics.fill(&*it.source(db).ast, start + 1);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1, start),"}, {"sha": "86dceb2e05434072cf6aa34b600f6f47b45b4338", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -22,12 +22,12 @@ impl TraitData {\n         db: &(impl DefDatabase + AstDatabase),\n         tr: Trait,\n     ) -> Arc<TraitData> {\n-        let (file_id, node) = tr.source(db);\n-        let name = node.name().map(|n| n.as_name());\n+        let src = tr.source(db);\n+        let name = src.ast.name().map(|n| n.as_name());\n         let module = tr.module(db);\n-        let ctx = LocationCtx::new(db, module, file_id);\n-        let auto = node.is_auto();\n-        let items = if let Some(item_list) = node.item_list() {\n+        let ctx = LocationCtx::new(db, module, src.file_id);\n+        let auto = src.ast.is_auto();\n+        let items = if let Some(item_list) = src.ast.item_list() {\n             item_list\n                 .impl_items()\n                 .map(|item_node| match item_node.kind() {"}, {"sha": "2e3e3863a5e7608d98e63479f8d8296d200a1948", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -214,24 +214,8 @@ impl NavigationTarget {\n             hir::ModuleDef::Union(it) => NavigationTarget::from_adt_def(db, it.into()),\n             hir::ModuleDef::Const(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::Static(it) => NavigationTarget::from_def_source(db, it),\n-            hir::ModuleDef::EnumVariant(var) => {\n-                let src = var.source(db);\n-                NavigationTarget::from_named(\n-                    src.file_id.original_file(db),\n-                    &*src.ast,\n-                    src.ast.doc_comment_text(),\n-                    src.ast.short_label(),\n-                )\n-            }\n-            hir::ModuleDef::Trait(e) => {\n-                let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n+            hir::ModuleDef::EnumVariant(it) => NavigationTarget::from_def_source(db, it),\n+            hir::ModuleDef::Trait(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::TypeAlias(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(..) => {\n                 return None;"}, {"sha": "c4004435cc41fb7eb34f429c75154cb6205d6f0b", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "patch": "@@ -124,16 +124,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                     hir::ModuleDef::Struct(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Union(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Enum(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::EnumVariant(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n+                    hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Trait(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                    }\n+                    hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::BuiltinType(_) => {\n                         // FIXME: hover for builtin Type ?"}]}