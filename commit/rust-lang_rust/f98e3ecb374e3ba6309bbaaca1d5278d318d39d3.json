{"sha": "f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OGUzZWNiMzc0ZTNiYTYzMDliYmFhY2ExZDUyNzhkMzE4ZDM5ZDM=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-30T15:12:55Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-03-30T15:12:55Z"}, "message": "Merge pull request #813 from oli-obk/fix/non_expressive_names\n\nFix/non expressive names", "tree": {"sha": "8c930b558602a5dd454d2fedb802821d29725040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c930b558602a5dd454d2fedb802821d29725040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "html_url": "https://github.com/rust-lang/rust/commit/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e878ab40aa855058961d12dbb0f279d65b99cb8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e878ab40aa855058961d12dbb0f279d65b99cb8d", "html_url": "https://github.com/rust-lang/rust/commit/e878ab40aa855058961d12dbb0f279d65b99cb8d"}, {"sha": "f03d93e05e5e2149a2ae0fd05666da7d18edc993", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03d93e05e5e2149a2ae0fd05666da7d18edc993", "html_url": "https://github.com/rust-lang/rust/commit/f03d93e05e5e2149a2ae0fd05666da7d18edc993"}], "stats": {"total": 152, "additions": 86, "deletions": 66}, "files": [{"sha": "32118b11c4e2dac84880747dd83d752de1f2ddf2", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 70, "deletions": 66, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "patch": "@@ -41,15 +41,25 @@ impl LintPass for NonExpressiveNames {\n     }\n }\n \n+struct ExistingName {\n+    interned: InternedString,\n+    span: Span,\n+    len: usize,\n+    whitelist: &'static[&'static str],\n+}\n+\n struct SimilarNamesLocalVisitor<'a, 'b: 'a> {\n-    names: Vec<(InternedString, Span, usize)>,\n+    names: Vec<ExistingName>,\n     cx: &'a EarlyContext<'b>,\n     lint: &'a NonExpressiveNames,\n     single_char_names: Vec<char>,\n }\n \n-const WHITELIST: &'static [&'static str] = &[\n-    \"lhs\", \"rhs\",\n+// this list contains lists of names that are allowed to be similar\n+// the assumption is that no name is ever contained in multiple lists.\n+const WHITELIST: &'static [&'static [&'static str]] = &[\n+    &[\"parsed\", \"parser\"],\n+    &[\"lhs\", \"rhs\"],\n ];\n \n struct SimilarNamesNameVisitor<'a, 'b: 'a, 'c: 'b>(&'a mut SimilarNamesLocalVisitor<'b, 'c>);\n@@ -63,21 +73,27 @@ impl<'v, 'a, 'b, 'c> visit::Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c>\n     }\n }\n \n-fn whitelisted(interned_name: &str) -> bool {\n+fn get_whitelist(interned_name: &str) -> Option<&'static[&'static str]> {\n     for &allow in WHITELIST {\n-        if interned_name == allow {\n-            return true;\n+        if whitelisted(interned_name, allow) {\n+            return Some(allow);\n         }\n-        if interned_name.len() <= allow.len() {\n-            continue;\n-        }\n-        // allow_*\n-        let allow_start = allow.chars().chain(Some('_'));\n+    }\n+    None\n+}\n+\n+fn whitelisted(interned_name: &str, list: &[&str]) -> bool {\n+    if list.iter().any(|&name| interned_name == name) {\n+        return true;\n+    }\n+    for name in list {\n+        // name_*\n+        let allow_start = name.chars().chain(Some('_'));\n         if interned_name.chars().zip(allow_start).all(|(l, r)| l == r) {\n             return true;\n         }\n-        // *_allow\n-        let allow_end = Some('_').into_iter().chain(allow.chars());\n+        // *_name\n+        let allow_end = Some('_').into_iter().chain(name.chars());\n         if interned_name.chars().rev().zip(allow_end.rev()).all(|(l, r)| l == r) {\n             return true;\n         }\n@@ -110,83 +126,66 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n         }\n         let count = interned_name.chars().count();\n         if count < 3 {\n-            if count != 1 {\n-                return;\n+            if count == 1 {\n+                let c = interned_name.chars().next().expect(\"already checked\");\n+                self.check_short_name(c, span);\n             }\n-            let c = interned_name.chars().next().expect(\"already checked\");\n-            self.check_short_name(c, span);\n-            return;\n-        }\n-        if whitelisted(&interned_name) {\n             return;\n         }\n-        for &(ref existing_name, sp, existing_len) in &self.0.names {\n+        for existing_name in &self.0.names {\n+            if whitelisted(&interned_name, existing_name.whitelist) {\n+                continue;\n+            }\n             let mut split_at = None;\n-            if existing_len > count {\n-                if existing_len - count != 1 {\n-                    continue;\n-                }\n-                if levenstein_not_1(&interned_name, &existing_name) {\n+            if existing_name.len > count {\n+                if existing_name.len - count != 1 || levenstein_not_1(&interned_name, &existing_name.interned) {\n                     continue;\n                 }\n-            } else if existing_len < count {\n-                if count - existing_len != 1 {\n-                    continue;\n-                }\n-                if levenstein_not_1(&existing_name, &interned_name) {\n+            } else if existing_name.len < count {\n+                if count - existing_name.len != 1 || levenstein_not_1(&existing_name.interned, &interned_name) {\n                     continue;\n                 }\n             } else {\n                 let mut interned_chars = interned_name.chars();\n-                let mut existing_chars = existing_name.chars();\n+                let mut existing_chars = existing_name.interned.chars();\n+                let first_i = interned_chars.next().expect(\"we know we have at least one char\");\n+                let first_e = existing_chars.next().expect(\"we know we have at least one char\");\n+                let eq_or_numeric = |a: char, b: char| a == b || a.is_numeric() && b.is_numeric();\n \n-                if interned_chars.next() != existing_chars.next() {\n-                    let i = interned_chars.next().expect(\"we know we have more than 1 char\");\n-                    let e = existing_chars.next().expect(\"we know we have more than 1 char\");\n-                    if i == e {\n-                        if i == '_' {\n-                            // allowed similarity x_foo, y_foo\n-                            // or too many chars differ (x_foo, y_boo)\n+                if eq_or_numeric(first_i, first_e) {\n+                    let last_i = interned_chars.next_back().expect(\"we know we have at least two chars\");\n+                    let last_e = existing_chars.next_back().expect(\"we know we have at least two chars\");\n+                    if eq_or_numeric(last_i, last_e) {\n+                        if interned_chars.zip(existing_chars).filter(|&(i, e)| !eq_or_numeric(i, e)).count() != 1 {\n                             continue;\n-                        } else if interned_chars.ne(existing_chars) {\n-                            // too many chars differ\n-                            continue\n                         }\n                     } else {\n-                        // too many chars differ\n-                        continue;\n-                    }\n-                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n-                } else if interned_chars.next_back() == existing_chars.next_back() {\n-                    if interned_chars.zip(existing_chars).filter(|&(i, e)| i != e).count() != 1 {\n-                        // too many chars differ, or none differ (aka shadowing)\n-                        continue;\n-                    }\n-                } else {\n-                    let i = interned_chars.next_back().expect(\"we know we have more than 2 chars\");\n-                    let e = existing_chars.next_back().expect(\"we know we have more than 2 chars\");\n-                    if i == e {\n-                        if i == '_' {\n-                            // allowed similarity foo_x, foo_x\n-                            // or too many chars differ (foo_x, boo_x)\n+                        let second_last_i = interned_chars.next_back().expect(\"we know we have at least three chars\");\n+                        let second_last_e = existing_chars.next_back().expect(\"we know we have at least three chars\");\n+                        if !eq_or_numeric(second_last_i, second_last_e) || second_last_i == '_' || !interned_chars.zip(existing_chars).all(|(i, e)| eq_or_numeric(i, e)) {\n+                            // allowed similarity foo_x, foo_y\n+                            // or too many chars differ (foo_x, boo_y) or (foox, booy)\n                             continue;\n-                        } else if interned_chars.ne(existing_chars) {\n-                            // too many chars differ\n-                            continue\n                         }\n-                    } else {\n-                        // too many chars differ\n+                        split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n+                    }\n+                } else {\n+                    let second_i = interned_chars.next().expect(\"we know we have at least two chars\");\n+                    let second_e = existing_chars.next().expect(\"we know we have at least two chars\");\n+                    if !eq_or_numeric(second_i, second_e) || second_i == '_' || !interned_chars.zip(existing_chars).all(|(i, e)| eq_or_numeric(i, e)) {\n+                        // allowed similarity x_foo, y_foo\n+                        // or too many chars differ (x_foo, y_boo) or (xfoo, yboo)\n                         continue;\n                     }\n-                    split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n+                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n                 }\n             }\n             span_lint_and_then(self.0.cx,\n                                SIMILAR_NAMES,\n                                span,\n                                \"binding's name is too similar to existing binding\",\n                                |diag| {\n-                                   diag.span_note(sp, \"existing binding defined here\");\n+                                   diag.span_note(existing_name.span, \"existing binding defined here\");\n                                    if let Some(split) = split_at {\n                                        diag.span_help(span, &format!(\"separate the discriminating character \\\n                                                                       by an underscore like: `{}_{}`\",\n@@ -196,7 +195,12 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                                });\n             return;\n         }\n-        self.0.names.push((interned_name, span, count));\n+        self.0.names.push(ExistingName {\n+            whitelist: get_whitelist(&interned_name).unwrap_or(&[]),\n+            interned: interned_name,\n+            span: span,\n+            len: count,\n+        });\n     }\n }\n "}, {"sha": "aab88f742a6cd915a08f7b35405011dbe637adb1", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98e3ecb374e3ba6309bbaaca1d5278d318d39d3/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=f98e3ecb374e3ba6309bbaaca1d5278d318d39d3", "patch": "@@ -10,6 +10,8 @@\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n #![allow(unused)]\n \n fn main() {\n@@ -67,6 +69,20 @@ fn main() {\n         (cheese2, 2) => panic!(),\n         _ => println!(\"\"),\n     }\n+    let ipv4: i32;\n+    let ipv6: i32;\n+    let abcd1: i32;\n+    let abdc2: i32;\n+    let xyz1abc: i32; //~ NOTE: existing binding defined here\n+    let xyz2abc: i32;\n+    let xyzeabc: i32; //~ ERROR: name is too similar\n+    //~| HELP: for further information visit\n+\n+    let parser: i32; //~ NOTE: existing binding defined here\n+    let parsed: i32;\n+    let parsee: i32; //~ ERROR: name is too similar\n+    //~| HELP: for further information visit\n+    //~| HELP: separate the discriminating character by an underscore like: `parse_e`\n }\n \n #[derive(Clone, Debug)]"}]}