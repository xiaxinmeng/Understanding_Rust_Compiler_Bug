{"sha": "21f751a0e5da5dd488612e25abfc545c259050e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjc1MWEwZTVkYTVkZDQ4ODYxMmUyNWFiZmM1NDVjMjU5MDUwZTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:34:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:37:26Z"}, "message": "Simplify", "tree": {"sha": "0ad1b22fcc5b26456ecc92f473fb2306922fd6aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad1b22fcc5b26456ecc92f473fb2306922fd6aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f751a0e5da5dd488612e25abfc545c259050e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f751a0e5da5dd488612e25abfc545c259050e7", "html_url": "https://github.com/rust-lang/rust/commit/21f751a0e5da5dd488612e25abfc545c259050e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f751a0e5da5dd488612e25abfc545c259050e7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30748161f0b4699ba9bc699a38ac9fc2fae49461", "url": "https://api.github.com/repos/rust-lang/rust/commits/30748161f0b4699ba9bc699a38ac9fc2fae49461", "html_url": "https://github.com/rust-lang/rust/commit/30748161f0b4699ba9bc699a38ac9fc2fae49461"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "d65536bbc1bf3145c790517851ed51dddbcfe5ec", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=21f751a0e5da5dd488612e25abfc545c259050e7", "patch": "@@ -61,7 +61,9 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, parse_fixture, parse_single_fixture, CURSOR_MARKER};\n+use test_utils::{\n+    extract_offset, parse_fixture, parse_single_fixture, FixtureEntry, CURSOR_MARKER,\n+};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -112,7 +114,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n     let fixture = parse_single_fixture(ra_fixture);\n \n     let crate_graph = if let Some(entry) = fixture {\n-        let meta = match ParsedMeta::from(&entry.meta) {\n+        let meta = match ParsedMeta::from(&entry) {\n             ParsedMeta::File(it) => it,\n         };\n \n@@ -165,7 +167,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     let mut file_position = None;\n \n     for entry in fixture.iter() {\n-        let meta = match ParsedMeta::from(&entry.meta) {\n+        let meta = match ParsedMeta::from(entry) {\n             ParsedMeta::File(it) => it,\n         };\n         assert!(meta.path.starts_with(&source_root_prefix));\n@@ -243,8 +245,8 @@ struct FileMeta {\n     env: Env,\n }\n \n-impl From<&test_utils::FileMeta> for ParsedMeta {\n-    fn from(f: &test_utils::FileMeta) -> Self {\n+impl From<&FixtureEntry> for ParsedMeta {\n+    fn from(f: &FixtureEntry) -> Self {\n         Self::File(FileMeta {\n             path: f.path.to_owned(),\n             krate: f.crate_name.to_owned(),"}, {"sha": "d480fcf62554090322d1c76e3b86ba4ba8e0e441", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=21f751a0e5da5dd488612e25abfc545c259050e7", "patch": "@@ -25,7 +25,7 @@ impl MockFileData {\n     fn path(&self) -> &str {\n         match self {\n             MockFileData::Plain { path, .. } => path.as_str(),\n-            MockFileData::Fixture(f) => f.meta.path.as_str(),\n+            MockFileData::Fixture(f) => f.path.as_str(),\n         }\n     }\n \n@@ -38,25 +38,23 @@ impl MockFileData {\n \n     fn cfg_options(&self) -> CfgOptions {\n         match self {\n-            MockFileData::Fixture(f) => f.meta.cfg.clone(),\n+            MockFileData::Fixture(f) => f.cfg.clone(),\n             _ => CfgOptions::default(),\n         }\n     }\n \n     fn edition(&self) -> Edition {\n         match self {\n-            MockFileData::Fixture(f) => f\n-                .meta\n-                .edition\n-                .as_ref()\n-                .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n+            MockFileData::Fixture(f) => {\n+                f.edition.as_ref().map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap())\n+            }\n             _ => Edition::Edition2018,\n         }\n     }\n \n     fn env(&self) -> Env {\n         match self {\n-            MockFileData::Fixture(f) => Env::from(f.meta.env.iter()),\n+            MockFileData::Fixture(f) => Env::from(f.env.iter()),\n             _ => Env::default(),\n         }\n     }"}, {"sha": "59565bf3d89844253e807bb27c86cdd34c42a065", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=21f751a0e5da5dd488612e25abfc545c259050e7", "patch": "@@ -69,7 +69,7 @@ impl<'a> Project<'a> {\n         let mut paths = vec![];\n \n         for entry in parse_fixture(self.fixture) {\n-            let path = tmp_dir.path().join(&entry.meta.path['/'.len_utf8()..]);\n+            let path = tmp_dir.path().join(&entry.path['/'.len_utf8()..]);\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n             paths.push((path, entry.text));"}, {"sha": "bda826d501573c59c90faf4068d83bc7926ab1c7", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=21f751a0e5da5dd488612e25abfc545c259050e7", "patch": "@@ -4,13 +4,8 @@ use stdx::split1;\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct FixtureEntry {\n-    pub meta: FileMeta,\n-    pub text: String,\n-}\n-\n-#[derive(Debug, Eq, PartialEq)]\n-pub struct FileMeta {\n     pub path: String,\n+    pub text: String,\n     pub crate_name: Option<String>,\n     pub deps: Vec<String>,\n     pub cfg: CfgOptions,\n@@ -71,7 +66,7 @@ The offending line: {:?}\"#,\n         if line.starts_with(\"//-\") {\n             let meta = line[\"//-\".len()..].trim().to_string();\n             let meta = parse_meta(&meta);\n-            res.push(FixtureEntry { meta, text: String::new() })\n+            res.push(meta)\n         } else if let Some(entry) = res.last_mut() {\n             entry.text.push_str(line);\n             entry.text.push('\\n');\n@@ -81,7 +76,7 @@ The offending line: {:?}\"#,\n }\n \n //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-fn parse_meta(meta: &str) -> FileMeta {\n+fn parse_meta(meta: &str) -> FixtureEntry {\n     let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n     let path = components[0].to_string();\n@@ -117,7 +112,7 @@ fn parse_meta(meta: &str) -> FileMeta {\n         }\n     }\n \n-    FileMeta { path, crate_name: krate, deps, edition, cfg, env }\n+    FixtureEntry { path, text: String::new(), crate_name: krate, deps, edition, cfg, env }\n }\n \n /// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n@@ -209,12 +204,10 @@ fn parse_fixture_gets_full_meta() {\n     );\n     assert_eq!(1, parsed.len());\n \n-    let parsed = &parsed[0];\n-    assert_eq!(\"mod m;\\n\\n\", parsed.text);\n+    let meta = &parsed[0];\n+    assert_eq!(\"mod m;\\n\\n\", meta.text);\n \n-    let meta = &parsed.meta;\n-    assert_eq!(\"foo\", meta.crate_name().unwrap());\n-    assert_eq!(\"/lib.rs\", meta.path());\n-    assert!(meta.cfg_options().is_some());\n-    assert_eq!(2, meta.env().count());\n+    assert_eq!(\"foo\", meta.crate_name.as_ref().unwrap());\n+    assert_eq!(\"/lib.rs\", meta.path);\n+    assert_eq!(2, meta.env.len());\n }"}, {"sha": "0fdd1a36b784f776c122298a1c6f8c5bd8b626e9", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f751a0e5da5dd488612e25abfc545c259050e7/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=21f751a0e5da5dd488612e25abfc545c259050e7", "patch": "@@ -22,7 +22,7 @@ pub use difference::Changeset as __Changeset;\n pub use ra_cfg::CfgOptions;\n pub use rustc_hash::FxHashMap;\n \n-pub use crate::fixture::{parse_fixture, parse_single_fixture, FileMeta, FixtureEntry};\n+pub use crate::fixture::{parse_fixture, parse_single_fixture, FixtureEntry};\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n "}]}