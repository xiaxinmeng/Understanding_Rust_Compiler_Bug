{"sha": "d461e6d6cbd0c716f8b7e951285507451611df59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjFlNmQ2Y2JkMGM3MTZmOGI3ZTk1MTI4NTUwNzQ1MTYxMWRmNTk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T04:30:20Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-17T23:59:07Z"}, "message": "Use named fields for `ast::ItemKind::Impl`", "tree": {"sha": "149c6ec17312a0a1a50745a30e549b86caf0d1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149c6ec17312a0a1a50745a30e549b86caf0d1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d461e6d6cbd0c716f8b7e951285507451611df59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d461e6d6cbd0c716f8b7e951285507451611df59", "html_url": "https://github.com/rust-lang/rust/commit/d461e6d6cbd0c716f8b7e951285507451611df59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d461e6d6cbd0c716f8b7e951285507451611df59/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689fca01c5a1eac2d240bf08aa728171a28f2285", "url": "https://api.github.com/repos/rust-lang/rust/commits/689fca01c5a1eac2d240bf08aa728171a28f2285", "html_url": "https://github.com/rust-lang/rust/commit/689fca01c5a1eac2d240bf08aa728171a28f2285"}], "stats": {"total": 224, "additions": 130, "deletions": 94}, "files": [{"sha": "8b4f0c6bde2b53a8c303baba74a553c73723bca8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -821,7 +821,7 @@ impl<'hir> Map<'hir> {\n                     | ItemKind::Struct(..)\n                     | ItemKind::Union(..)\n                     | ItemKind::Trait(..)\n-                    | ItemKind::Impl(..) => true,\n+                    | ItemKind::Impl { .. } => true,\n                     _ => false,\n                 },\n                 Node::ForeignItem(fi) => match fi.kind {"}, {"sha": "648c4f7e46aad703d81a5819a8bf2077d52cc649", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -67,14 +67,15 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         if let Some(hir_id) = item_hir_id {\n             self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n                 let this = &mut ItemLowerer { lctx: this };\n-                if let ItemKind::Impl(.., ref opt_trait_ref, _, _) = item.kind {\n-                    if opt_trait_ref.as_ref().map(|tr| tr.constness.is_some()).unwrap_or(false) {\n+                if let ItemKind::Impl { ref of_trait, .. } = item.kind {\n+                    if of_trait.as_ref().map(|tr| tr.constness.is_some()).unwrap_or(false) {\n+                        this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n                         this.lctx\n                             .diagnostic()\n                             .span_err(item.span, \"const trait impls are not yet implemented\");\n                     }\n \n-                    this.with_trait_impl_ref(opt_trait_ref, |this| visit::walk_item(this, item));\n+                    this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n                 } else {\n                     visit::walk_item(this, item);\n                 }\n@@ -173,7 +174,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 vec\n             }\n             ItemKind::MacroDef(..) => SmallVec::new(),\n-            ItemKind::Fn(..) | ItemKind::Impl(.., None, _, _) => smallvec![i.id],\n+            ItemKind::Fn(..) | ItemKind::Impl { of_trait: None, .. } => smallvec![i.id],\n             ItemKind::Static(ref ty, ..) => {\n                 let mut ids = smallvec![i.id];\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n@@ -361,15 +362,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n-            ItemKind::Impl(\n+            ItemKind::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n-                ref ast_generics,\n-                ref trait_ref,\n-                ref ty,\n-                ref impl_items,\n-            ) => {\n+                generics: ref ast_generics,\n+                of_trait: ref trait_ref,\n+                self_ty: ref ty,\n+                items: ref impl_items,\n+            } => {\n                 let def_id = self.resolver.definitions().local_def_id(id);\n \n                 // Lower the \"impl header\" first. This ordering is important"}, {"sha": "23701459025ae3dd8b12fcb967135ed613f3f6db", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -612,9 +612,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            ItemKind::Impl(unsafety, polarity, _, _, Some(..), ref ty, ref impl_items) => {\n+            ItemKind::Impl {\n+                unsafety,\n+                polarity,\n+                defaultness: _,\n+                generics: _,\n+                of_trait: Some(_),\n+                ref self_ty,\n+                ref items,\n+            } => {\n                 self.invalid_visibility(&item.vis, None);\n-                if let TyKind::Err = ty.kind {\n+                if let TyKind::Err = self_ty.kind {\n                     self.err_handler()\n                         .struct_span_err(item.span, \"`impl Trait for .. {}` is an obsolete syntax\")\n                         .help(\"use `auto trait Trait {}` instead\")\n@@ -629,15 +637,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     )\n                     .emit();\n                 }\n-                for impl_item in impl_items {\n+                for impl_item in items {\n                     self.invalid_visibility(&impl_item.vis, None);\n                     if let AssocItemKind::Fn(ref sig, _) = impl_item.kind {\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }\n                 }\n             }\n-            ItemKind::Impl(unsafety, polarity, defaultness, _, None, _, _) => {\n+            ItemKind::Impl {\n+                unsafety,\n+                polarity,\n+                defaultness,\n+                generics: _,\n+                of_trait: None,\n+                self_ty: _,\n+                items: _,\n+            } => {\n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),"}, {"sha": "71cd66ddef409a517e49e188db621a442524de61", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -339,7 +339,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl(_, polarity, defaultness, ..) => {\n+            ast::ItemKind::Impl { polarity, defaultness, .. } => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "d346dbc8b4ee71a91aa6908c83b7338b09c54bef", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -705,15 +705,15 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             Ident::invalid(),\n             a,\n-            ast::ItemKind::Impl(\n+            ast::ItemKind::Impl {\n                 unsafety,\n-                ast::ImplPolarity::Positive,\n-                ast::Defaultness::Final,\n-                trait_generics,\n-                opt_trait_ref,\n-                self_type,\n-                methods.into_iter().chain(associated_types).collect(),\n-            ),\n+                polarity: ast::ImplPolarity::Positive,\n+                defaultness: ast::Defaultness::Final,\n+                generics: trait_generics,\n+                of_trait: opt_trait_ref,\n+                self_ty: self_type,\n+                items: methods.into_iter().chain(associated_types).collect(),\n+            },\n         )\n     }\n "}, {"sha": "9aa7623dc9f77cd1e3f856869b7b5aeee471792f", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -156,15 +156,15 @@ fn inject_impl_of_structural_trait(\n         span,\n         ast::Ident::invalid(),\n         attrs,\n-        ItemKind::Impl(\n-            ast::Unsafety::Normal,\n-            ast::ImplPolarity::Positive,\n-            ast::Defaultness::Final,\n+        ItemKind::Impl {\n+            unsafety: ast::Unsafety::Normal,\n+            polarity: ast::ImplPolarity::Positive,\n+            defaultness: ast::Defaultness::Final,\n             generics,\n-            Some(trait_ref),\n-            self_type,\n-            Vec::new(),\n-        ),\n+            of_trait: Some(trait_ref),\n+            self_ty: self_type,\n+            items: Vec::new(),\n+        },\n     );\n \n     push(Annotatable::Item(newitem));"}, {"sha": "a15f69d7d51eb2cf160a61e08333ecc26fc3fb09", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -251,7 +251,7 @@ impl EarlyLintPass for UnsafeCode {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n \n-            ast::ItemKind::Impl(ast::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Impl { unsafety: ast::Unsafety::Unsafe, .. } => {\n                 self.report_unsafe(cx, it.span, \"implementation of an `unsafe` trait\")\n             }\n "}, {"sha": "91aeccbb5e334457e44b6ce9e0ed4cfabdc79e52", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -221,7 +221,7 @@ declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n \n impl EarlyLintPass for LintPassImpl {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(_, _, _, _, Some(lint_pass), _, _) = &item.kind {\n+        if let ItemKind::Impl { of_trait: Some(lint_pass), .. } = &item.kind {\n             if let Some(last) = lint_pass.path.segments.last() {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();"}, {"sha": "1921a6c8506891d7da017a1abad514b0b6709522", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -634,15 +634,15 @@ impl<'a> Parser<'a> {\n                 let constness = constness.map(|c| c.node);\n                 let trait_ref = TraitRef { path, constness, ref_id: ty_first.id };\n \n-                ItemKind::Impl(\n+                ItemKind::Impl {\n                     unsafety,\n                     polarity,\n                     defaultness,\n                     generics,\n-                    Some(trait_ref),\n-                    ty_second,\n-                    impl_items,\n-                )\n+                    of_trait: Some(trait_ref),\n+                    self_ty: ty_second,\n+                    items: impl_items,\n+                }\n             }\n             None => {\n                 // Reject `impl const Type {}` here\n@@ -653,15 +653,15 @@ impl<'a> Parser<'a> {\n                 }\n \n                 // impl Type\n-                ItemKind::Impl(\n+                ItemKind::Impl {\n                     unsafety,\n                     polarity,\n                     defaultness,\n                     generics,\n-                    None,\n-                    ty_first,\n-                    impl_items,\n-                )\n+                    of_trait: None,\n+                    self_ty: ty_first,\n+                    items: impl_items,\n+                }\n             }\n         };\n "}, {"sha": "40a89ef06745874dd99f89b16278d92355f9763f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -815,7 +815,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items do not add names to modules.\n-            ItemKind::Impl(..) | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n+            ItemKind::Impl { .. } | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n \n             ItemKind::MacroDef(..) | ItemKind::Mac(_) => unreachable!(),\n         }"}, {"sha": "696ba0e994c7dbd095481e2c47cdd8c60befc9a1", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -104,7 +104,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into, the better\n         let def_data = match &i.kind {\n-            ItemKind::Impl(..) => DefPathData::Impl,\n+            ItemKind::Impl { .. } => DefPathData::Impl,\n             ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n                 return visit::walk_item(self, i);\n             }"}, {"sha": "08cd9c4d1d53a54e424a7b46dd8c448b552fbf93", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -797,14 +797,14 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 self.resolve_adt(item, generics);\n             }\n \n-            ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) => {\n-                self.resolve_implementation(\n-                    generics,\n-                    opt_trait_ref,\n-                    &self_type,\n-                    item.id,\n-                    impl_items,\n-                )\n+            ItemKind::Impl {\n+                ref generics,\n+                ref of_trait,\n+                ref self_ty,\n+                items: ref impl_items,\n+                ..\n+            } => {\n+                self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n             ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {"}, {"sha": "d252fc542c325ca4bc1553a5695cf48b85617e51", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -1300,8 +1300,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.process_struct(item, def, ty_params)\n             }\n             Enum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            Impl(.., ref ty_params, ref trait_ref, ref typ, ref impl_items) => {\n-                self.process_impl(item, ty_params, trait_ref, &typ, impl_items)\n+            Impl { ref generics, ref of_trait, ref self_ty, ref items, .. } => {\n+                self.process_impl(item, generics, of_trait, &self_ty, items)\n             }\n             Trait(_, _, ref generics, ref trait_refs, ref methods) => {\n                 self.process_trait(item, generics, trait_refs, methods)"}, {"sha": "5412533fce7d8ab07dbcb45ea88fce5ab033778c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -305,8 +305,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ItemKind::Impl(.., ref trait_ref, ref typ, ref impls) => {\n-                if let ast::TyKind::Path(None, ref path) = typ.kind {\n+            ast::ItemKind::Impl { ref of_trait, ref self_ty, ref items, .. } => {\n+                if let ast::TyKind::Path(None, ref path) = self_ty.kind {\n                     // Common case impl for a struct or something basic.\n                     if generated_code(path.span) {\n                         return None;\n@@ -317,29 +317,29 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     let impl_id = self.next_impl_id();\n                     let span = self.span_from_span(sub_span);\n \n-                    let type_data = self.lookup_def_id(typ.id);\n+                    let type_data = self.lookup_def_id(self_ty.id);\n                     type_data.map(|type_data| {\n                         Data::RelationData(\n                             Relation {\n                                 kind: RelationKind::Impl { id: impl_id },\n                                 span: span.clone(),\n                                 from: id_from_def_id(type_data),\n-                                to: trait_ref\n+                                to: of_trait\n                                     .as_ref()\n                                     .and_then(|t| self.lookup_def_id(t.ref_id))\n                                     .map(id_from_def_id)\n                                     .unwrap_or_else(|| null_id()),\n                             },\n                             Impl {\n                                 id: impl_id,\n-                                kind: match *trait_ref {\n+                                kind: match *of_trait {\n                                     Some(_) => ImplKind::Direct,\n                                     None => ImplKind::Inherent,\n                                 },\n                                 span: span,\n                                 value: String::new(),\n                                 parent: None,\n-                                children: impls\n+                                children: items\n                                     .iter()\n                                     .map(|i| id_from_node_id(i.id, self))\n                                     .collect(),"}, {"sha": "779d3f55018d56f88980ead8dac6f8cbe25fa11f", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -482,15 +482,15 @@ impl Sig for ast::Item {\n \n                 Ok(sig)\n             }\n-            ast::ItemKind::Impl(\n+            ast::ItemKind::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n                 ref generics,\n-                ref opt_trait,\n-                ref ty,\n-                _,\n-            ) => {\n+                ref of_trait,\n+                ref self_ty,\n+                items: _,\n+            } => {\n                 let mut text = String::new();\n                 if let ast::Defaultness::Default = defaultness {\n                     text.push_str(\"default \");\n@@ -505,7 +505,7 @@ impl Sig for ast::Item {\n \n                 text.push(' ');\n \n-                let trait_sig = if let Some(ref t) = *opt_trait {\n+                let trait_sig = if let Some(ref t) = *of_trait {\n                     if polarity == ast::ImplPolarity::Negative {\n                         text.push('!');\n                     }\n@@ -517,7 +517,7 @@ impl Sig for ast::Item {\n                     text_sig(String::new())\n                 };\n \n-                let ty_sig = ty.make(offset + text.len(), id, scx)?;\n+                let ty_sig = self_ty.make(offset + text.len(), id, scx)?;\n                 text.push_str(&ty_sig.text);\n \n                 text.push_str(\" {}\");"}, {"sha": "a5a4eb1583bedc10cb14aff332471431e2930b49", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -2614,15 +2614,18 @@ pub enum ItemKind {\n     /// An implementation.\n     ///\n     /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.\n-    Impl(\n-        Unsafety,\n-        ImplPolarity,\n-        Defaultness,\n-        Generics,\n-        Option<TraitRef>, // (optional) trait this impl implements\n-        P<Ty>,            // self\n-        Vec<AssocItem>,\n-    ),\n+    Impl {\n+        unsafety: Unsafety,\n+        polarity: ImplPolarity,\n+        defaultness: Defaultness,\n+        generics: Generics,\n+\n+        /// The trait being implemented, if any.\n+        of_trait: Option<TraitRef>,\n+\n+        self_ty: P<Ty>,\n+        items: Vec<AssocItem>,\n+    },\n     /// A macro invocation.\n     ///\n     /// E.g., `foo!(..)`.\n@@ -2649,7 +2652,7 @@ impl ItemKind {\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Mac(..) | ItemKind::MacroDef(..) | ItemKind::Impl(..) => \"item\",\n+            ItemKind::Mac(..) | ItemKind::MacroDef(..) | ItemKind::Impl { .. } => \"item\",\n         }\n     }\n }"}, {"sha": "750d054e8a0f2d4891709681bb960be492545b91", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -918,10 +918,18 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_variant_data(variant_data);\n             vis.visit_generics(generics);\n         }\n-        ItemKind::Impl(_unsafety, _polarity, _defaultness, generics, trait_ref, ty, items) => {\n+        ItemKind::Impl {\n+            unsafety: _,\n+            polarity: _,\n+            defaultness: _,\n+            generics,\n+            of_trait,\n+            self_ty,\n+            items,\n+        } => {\n             vis.visit_generics(generics);\n-            visit_opt(trait_ref, |trait_ref| vis.visit_trait_ref(trait_ref));\n-            vis.visit_ty(ty);\n+            visit_opt(of_trait, |trait_ref| vis.visit_trait_ref(trait_ref));\n+            vis.visit_ty(self_ty);\n             items.flat_map_in_place(|item| vis.flat_map_impl_item(item));\n         }\n         ItemKind::Trait(_is_auto, _unsafety, generics, bounds, items) => {"}, {"sha": "bc67980c454c0c4093e868a882d8c9d1ba345bc3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -1226,15 +1226,15 @@ impl<'a> State<'a> {\n                 self.head(visibility_qualified(&item.vis, \"union\"));\n                 self.print_struct(struct_def, generics, item.ident, item.span, true);\n             }\n-            ast::ItemKind::Impl(\n+            ast::ItemKind::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n                 ref generics,\n-                ref opt_trait,\n-                ref ty,\n-                ref impl_items,\n-            ) => {\n+                ref of_trait,\n+                ref self_ty,\n+                ref items,\n+            } => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_defaultness(defaultness);\n@@ -1250,19 +1250,19 @@ impl<'a> State<'a> {\n                     self.s.word(\"!\");\n                 }\n \n-                if let Some(ref t) = *opt_trait {\n+                if let Some(ref t) = *of_trait {\n                     self.print_trait_ref(t);\n                     self.s.space();\n                     self.word_space(\"for\");\n                 }\n \n-                self.print_type(ty);\n+                self.print_type(self_ty);\n                 self.print_where_clause(&generics.where_clause);\n \n                 self.s.space();\n                 self.bopen();\n                 self.print_inner_attributes(&item.attrs);\n-                for impl_item in impl_items {\n+                for impl_item in items {\n                     self.print_assoc_item(impl_item);\n                 }\n                 self.bclose(item.span);"}, {"sha": "d03a9dfc167588b0f83930e2a0c108e0fff781d1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d461e6d6cbd0c716f8b7e951285507451611df59/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d461e6d6cbd0c716f8b7e951285507451611df59", "patch": "@@ -308,11 +308,19 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n         }\n-        ItemKind::Impl(_, _, _, ref generics, ref opt_trait_reference, ref typ, ref impl_items) => {\n+        ItemKind::Impl {\n+            unsafety: _,\n+            polarity: _,\n+            defaultness: _,\n+            ref generics,\n+            ref of_trait,\n+            ref self_ty,\n+            ref items,\n+        } => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n-            visitor.visit_ty(typ);\n-            walk_list!(visitor, visit_impl_item, impl_items);\n+            walk_list!(visitor, visit_trait_ref, of_trait);\n+            visitor.visit_ty(self_ty);\n+            walk_list!(visitor, visit_impl_item, items);\n         }\n         ItemKind::Struct(ref struct_definition, ref generics)\n         | ItemKind::Union(ref struct_definition, ref generics) => {"}]}