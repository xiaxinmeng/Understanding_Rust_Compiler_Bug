{"sha": "6519b0a0097594fe00673cc42fc2d0ec83d738aa", "node_id": "C_kwDOAAsO6NoAKDY1MTliMGEwMDk3NTk0ZmUwMDY3M2NjNDJmYzJkMGVjODNkNzM4YWE", "commit": {"author": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T14:58:43Z"}, "committer": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T14:58:43Z"}, "message": "Suggest union literals, suggest union fields within an empty union literal", "tree": {"sha": "02fcc0dcd970fab0e4f17d36538507371734fb56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02fcc0dcd970fab0e4f17d36538507371734fb56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6519b0a0097594fe00673cc42fc2d0ec83d738aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6519b0a0097594fe00673cc42fc2d0ec83d738aa", "html_url": "https://github.com/rust-lang/rust/commit/6519b0a0097594fe00673cc42fc2d0ec83d738aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6519b0a0097594fe00673cc42fc2d0ec83d738aa/comments", "author": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27c0ef1cf41ad381ac4168bb291442b68a4932b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27c0ef1cf41ad381ac4168bb291442b68a4932b", "html_url": "https://github.com/rust-lang/rust/commit/f27c0ef1cf41ad381ac4168bb291442b68a4932b"}], "stats": {"total": 176, "additions": 166, "deletions": 10}, "files": [{"sha": "91e6b84294e529a1c3d92d5f6a8df9df43e68deb", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=6519b0a0097594fe00673cc42fc2d0ec83d738aa", "patch": "@@ -35,6 +35,7 @@ use crate::{\n         render_field, render_resolution, render_tuple_field,\n         struct_literal::render_struct_literal,\n         type_alias::{render_type_alias, render_type_alias_with_eq},\n+        union_literal::render_union_literal,\n         RenderContext,\n     },\n     CompletionContext, CompletionItem, CompletionItemKind,\n@@ -234,6 +235,17 @@ impl Completions {\n         self.add_opt(item);\n     }\n \n+    pub(crate) fn add_union_literal(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        un: hir::Union,\n+        path: Option<hir::ModPath>,\n+        local_name: Option<hir::Name>,\n+    ) {\n+        let item = render_union_literal(RenderContext::new(ctx, false), un, path, local_name);\n+        self.add_opt(item);\n+    }\n+\n     pub(crate) fn add_tuple_field(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "37175c43e90f47b020f83ba10d51508d81204212", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=6519b0a0097594fe00673cc42fc2d0ec83d738aa", "patch": "@@ -14,12 +14,31 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n             | ImmediateLocation::RecordExprUpdate(record_expr),\n         ) => {\n             let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n+\n             let default_trait = ctx.famous_defs().core_default_Default();\n-            let impl_default_trait = default_trait.zip(ty).map_or(false, |(default_trait, ty)| {\n-                ty.original.impls_trait(ctx.db, default_trait, &[])\n-            });\n+            let impl_default_trait =\n+                default_trait.zip(ty.as_ref()).map_or(false, |(default_trait, ty)| {\n+                    ty.original.impls_trait(ctx.db, default_trait, &[])\n+                });\n \n-            let missing_fields = ctx.sema.record_literal_missing_fields(record_expr);\n+            let missing_fields = match ty.and_then(|t| t.adjusted().as_adt()) {\n+                Some(hir::Adt::Union(un)) => {\n+                    // ctx.sema.record_literal_missing_fields will always return\n+                    // an empty Vec on a union literal. This is normally\n+                    // reasonable, but here we'd like to present the full list\n+                    // of fields if the literal is empty.\n+                    let were_fields_specified = record_expr\n+                        .record_expr_field_list()\n+                        .and_then(|fl| fl.fields().next())\n+                        .is_some();\n+\n+                    match were_fields_specified {\n+                        false => un.fields(ctx.db).into_iter().map(|f| (f, f.ty(ctx.db))).collect(),\n+                        true => vec![],\n+                    }\n+                }\n+                _ => ctx.sema.record_literal_missing_fields(record_expr),\n+            };\n             if impl_default_trait && !missing_fields.is_empty() && ctx.path_qual().is_none() {\n                 let completion_text = \"..Default::default()\";\n                 let mut item =\n@@ -62,14 +81,26 @@ pub(crate) fn complete_record_literal(\n         return None;\n     }\n \n-    if let hir::Adt::Struct(strukt) = ctx.expected_type.as_ref()?.as_adt()? {\n-        if ctx.path_qual().is_none() {\n-            let module = if let Some(module) = ctx.module { module } else { strukt.module(ctx.db) };\n-            let path = module.find_use_path(ctx.db, hir::ModuleDef::from(strukt));\n+    match ctx.expected_type.as_ref()?.as_adt()? {\n+        hir::Adt::Struct(strukt) => {\n+            if ctx.path_qual().is_none() {\n+                let module =\n+                    if let Some(module) = ctx.module { module } else { strukt.module(ctx.db) };\n+                let path = module.find_use_path(ctx.db, hir::ModuleDef::from(strukt));\n \n-            acc.add_struct_literal(ctx, strukt, path, None);\n+                acc.add_struct_literal(ctx, strukt, path, None);\n+            }\n         }\n-    }\n+        hir::Adt::Union(un) => {\n+            if ctx.path_qual().is_none() {\n+                let module = if let Some(module) = ctx.module { module } else { un.module(ctx.db) };\n+                let path = module.find_use_path(ctx.db, hir::ModuleDef::from(un));\n+\n+                acc.add_union_literal(ctx, un, path, None);\n+            }\n+        }\n+        _ => {}\n+    };\n \n     Some(())\n }"}, {"sha": "0ed51aa958a7736a6da5f6d2dcd38420c06546b0", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=6519b0a0097594fe00673cc42fc2d0ec83d738aa", "patch": "@@ -9,6 +9,7 @@ pub(crate) mod pattern;\n pub(crate) mod type_alias;\n pub(crate) mod struct_literal;\n pub(crate) mod compound;\n+pub(crate) mod union_literal;\n \n mod builder_ext;\n "}, {"sha": "80499e102b4824460727a488ae6636ef7e01ebce", "filename": "crates/ide_completion/src/render/union_literal.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Funion_literal.rs?ref=6519b0a0097594fe00673cc42fc2d0ec83d738aa", "patch": "@@ -0,0 +1,76 @@\n+//! Renderer for `union` literals.\n+\n+use hir::{HirDisplay, Name, StructKind};\n+use itertools::Itertools;\n+\n+use crate::{\n+    render::{\n+        compound::{format_literal_label, visible_fields},\n+        RenderContext,\n+    },\n+    CompletionItem, CompletionItemKind,\n+};\n+\n+pub(crate) fn render_union_literal(\n+    ctx: RenderContext,\n+    un: hir::Union,\n+    path: Option<hir::ModPath>,\n+    local_name: Option<Name>,\n+) -> Option<CompletionItem> {\n+    let name = local_name.unwrap_or_else(|| un.name(ctx.db())).to_smol_str();\n+\n+    let qualified_name = match path {\n+        Some(p) => p.to_string(),\n+        None => name.to_string(),\n+    };\n+\n+    let mut item = CompletionItem::new(\n+        CompletionItemKind::Snippet,\n+        ctx.source_range(),\n+        format_literal_label(&name, StructKind::Record),\n+    );\n+\n+    let fields = un.fields(ctx.db());\n+    let (fields, fields_omitted) = visible_fields(&ctx, &fields, un)?;\n+\n+    if fields.is_empty() {\n+        return None;\n+    }\n+\n+    let literal = if ctx.snippet_cap().is_some() {\n+        format!(\n+            \"{} {{ ${{1|{}|}}: ${{2:()}} }}$0\",\n+            qualified_name,\n+            fields.iter().map(|field| field.name(ctx.db())).format(\",\")\n+        )\n+    } else {\n+        format!(\n+            \"{} {{ {} }}\",\n+            qualified_name,\n+            fields\n+                .iter()\n+                .format_with(\", \", |field, f| { f(&format_args!(\"{}: ()\", field.name(ctx.db()))) })\n+        )\n+    };\n+\n+    let detail = format!(\n+        \"{} {{ {}{} }}\",\n+        qualified_name,\n+        fields.iter().format_with(\", \", |field, f| {\n+            f(&format_args!(\"{}: {}\", field.name(ctx.db()), field.ty(ctx.db()).display(ctx.db())))\n+        }),\n+        if fields_omitted { \", ..\" } else { \"\" }\n+    );\n+\n+    item.set_documentation(ctx.docs(un))\n+        .set_deprecated(ctx.is_deprecated(un))\n+        .detail(&detail)\n+        .set_relevance(ctx.completion_relevance());\n+\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n+        None => item.insert_text(literal),\n+    };\n+\n+    Some(item.build())\n+}"}, {"sha": "5e9367960f7e72ab499eacaefeb3b8e24f3efa6c", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6519b0a0097594fe00673cc42fc2d0ec83d738aa/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=6519b0a0097594fe00673cc42fc2d0ec83d738aa", "patch": "@@ -204,3 +204,39 @@ fn main() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn empty_union_literal() {\n+    check(\n+        r#\"\n+union Union { foo: u32, bar: f32 }\n+\n+fn foo() {\n+    let other = Union {\n+        $0\n+    };\n+}\n+        \"#,\n+        expect![[r#\"\n+            fd foo u32\n+            fd bar f32\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn dont_suggest_additional_union_fields() {\n+    check(\n+        r#\"\n+union Union { foo: u32, bar: f32 }\n+\n+fn foo() {\n+    let other = Union {\n+        foo: 1,\n+        $0\n+    };\n+}\n+        \"#,\n+        expect![[r#\"\"#]],\n+    )\n+}"}]}