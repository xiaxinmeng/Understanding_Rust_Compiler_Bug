{"sha": "4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NDZjNjVkOWI2OTcxZWM4MDY4NGVmNWMyOTlhYjU2Y2IxZDE2ZDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T16:07:55Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T18:12:16Z"}, "message": "Rollup merge of #57011 - QuietMisdreavus:static-root-path, r=GuillaumeGomez\n\nrustdoc: add new CLI flag to load static files from a different location\n\nThis PR adds a new CLI flag to rustdoc, `--static-root-path`, which controls how rustdoc links pages to the CSS/JS/font static files bundled with the output. By default, these files are linked with a series of `../` which is calculated per-page to link it to the documentation root - i.e. a relative link to the directory given by `-o`. This is causing problems for docs.rs, because even though docs.rs has saved one copy of these files and is dispatching them dynamically, browsers have no way of knowing that these are the same files and can cache them. This can allow it to link these files as, for example, `/rustdoc.css` instead of `../../rustdoc.css`, creating a single location that the files are loaded from.\n\nI made sure to only change links for the *static* files, those that don't change between crates. Files like the search index, aliases, the source files listing, etc, are still linked with relative links.\n\nr? @GuillaumeGomez\n\ncc @onur", "tree": {"sha": "0a353b0fcafe99f1f9632be02c4bbe6aa42b01f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a353b0fcafe99f1f9632be02c4bbe6aa42b01f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwefoEACgkQ/vbIBR0O\nATx8DxAAgX/DKx/gyzYrLulA9OKJ2AOEH5gkAMLOVPznXDekrSo3Nw7ZUEjSXOLg\nVC7RKbtnCAHKuELU2nT4Qkd4s89zoM2g8caLVu9QN4sMp66fyhjXmcmxh+x4FVO7\n2JnTZeFdI7wReXqhifSOFyPhjIygCX0cudUzrPcDeOKN6Rz/6X9/c0zZ5egXc3h0\nbkPrkjfFhQhm4HVcRKTzYhLKoQxyLuDcOSbpqZ5yIto0DmxzbeczrUTsX3JZiS9o\nCRpBGccSKImSfJE/D2jN0S1OXc9OEffQNVIe4qW5x1qp1P5S2NWunD71y2S2eShk\nq+Vxa7ZARAOsLpymAonFkbuO1oY9spHvpj5jMjaA73DNCT0W9eOWtxffeJgNOFyo\ncjhy0OM7n02nAmKA4C937WFgkmnUoC7UkLzLYiBTMGCJhJPt6ionzxO/mnQRBidp\nc4ncmLimV3x1bx7JUwsI22kKEE3c5AimOX6dIkq1U6TCDzmA3ORagX+OVNNs8I0c\nsBD5b5m5+1MrpfBD4yjY2MUqXCVE68QMahM5M9YZh9SPdzYMqRW4OhWSJ/ChsKqM\no2K2IagYTb/7COkY9wqqHUmZIVnjq+GQmkAJEw1nwHbcIVP4GncTj+gIeUyfqhew\nEjm1Br1DPM15ELNtJUS+bKb0db2XTk2AkrFM39xp8QL2hiOOLF0=\n=XiA6\n-----END PGP SIGNATURE-----", "payload": "tree 0a353b0fcafe99f1f9632be02c4bbe6aa42b01f1\nparent 5ba6a3438b990f7ede56491d77ee722651a6b3d7\nparent 8dc8d7ac512b831705da9bf7ef4601fdc6adcb25\nauthor kennytm <kennytm@gmail.com> 1545494875 +0800\ncommitter kennytm <kennytm@gmail.com> 1545502336 +0800\n\nRollup merge of #57011 - QuietMisdreavus:static-root-path, r=GuillaumeGomez\n\nrustdoc: add new CLI flag to load static files from a different location\n\nThis PR adds a new CLI flag to rustdoc, `--static-root-path`, which controls how rustdoc links pages to the CSS/JS/font static files bundled with the output. By default, these files are linked with a series of `../` which is calculated per-page to link it to the documentation root - i.e. a relative link to the directory given by `-o`. This is causing problems for docs.rs, because even though docs.rs has saved one copy of these files and is dispatching them dynamically, browsers have no way of knowing that these are the same files and can cache them. This can allow it to link these files as, for example, `/rustdoc.css` instead of `../../rustdoc.css`, creating a single location that the files are loaded from.\n\nI made sure to only change links for the *static* files, those that don't change between crates. Files like the search index, aliases, the source files listing, etc, are still linked with relative links.\n\nr? @GuillaumeGomez\n\ncc @onur\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "html_url": "https://github.com/rust-lang/rust/commit/4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba6a3438b990f7ede56491d77ee722651a6b3d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba6a3438b990f7ede56491d77ee722651a6b3d7", "html_url": "https://github.com/rust-lang/rust/commit/5ba6a3438b990f7ede56491d77ee722651a6b3d7"}, {"sha": "8dc8d7ac512b831705da9bf7ef4601fdc6adcb25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc8d7ac512b831705da9bf7ef4601fdc6adcb25", "html_url": "https://github.com/rust-lang/rust/commit/8dc8d7ac512b831705da9bf7ef4601fdc6adcb25"}], "stats": {"total": 129, "additions": 107, "deletions": 22}, "files": [{"sha": "905b06465340a7845e4b445adc67b0cb94fbc475", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -402,3 +402,18 @@ Using `index-page` option enables `enable-index-page` option as well.\n ### `--enable-index-page`: generate a default index page for docs\n \n This feature allows the generation of a default index-page which lists the generated crates.\n+\n+### `--static-root-path`: control how static files are loaded in HTML output\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --static-root-path '/cache/'\n+```\n+\n+This flag controls how rustdoc links to its static files on HTML pages. If you're hosting a lot of\n+crates' docs generated by the same version of rustdoc, you can use this flag to cache rustdoc's CSS,\n+JavaScript, and font files in a single location, rather than duplicating it once per \"doc root\"\n+(grouping of crate docs generated into the same output directory, like with `cargo doc`). Per-crate\n+files like the search index will still load from the documentation root, but anything that gets\n+renamed with `--resource-suffix` will load from the given path."}, {"sha": "f9a46fe362e3c6c4a43b472e2664f1f083fd9e88", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -181,6 +181,9 @@ pub struct RenderOptions {\n     /// A file to use as the index page at the root of the output directory. Overrides\n     /// `enable_index_page` to be true if set.\n     pub index_page: Option<PathBuf>,\n+    /// An optional path to use as the location of static files. If not set, uses combinations of\n+    /// `../` to reach the documentation root.\n+    pub static_root_path: Option<String>,\n \n     // Options specific to reading standalone Markdown files\n \n@@ -433,6 +436,7 @@ impl Options {\n         let markdown_playground_url = matches.opt_str(\"markdown-playground-url\");\n         let crate_version = matches.opt_str(\"crate-version\");\n         let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n+        let static_root_path = matches.opt_str(\"static-root-path\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -471,6 +475,7 @@ impl Options {\n                 enable_minification,\n                 enable_index_page,\n                 index_page,\n+                static_root_path,\n                 markdown_no_toc,\n                 markdown_css,\n                 markdown_playground_url,"}, {"sha": "d8a57bc93fd6c1e1c3ce8d8c5966b05450313456", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -26,16 +26,20 @@ pub struct Page<'a> {\n     pub title: &'a str,\n     pub css_class: &'a str,\n     pub root_path: &'a str,\n+    pub static_root_path: Option<&'a str>,\n     pub description: &'a str,\n     pub keywords: &'a str,\n     pub resource_suffix: &'a str,\n+    pub extra_scripts: &'a [&'a str],\n+    pub static_extra_scripts: &'a [&'a str],\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n     dst: &mut dyn io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n-    css_file_extension: bool, themes: &[PathBuf], extra_scripts: &[&str])\n+    css_file_extension: bool, themes: &[PathBuf])\n     -> io::Result<()>\n {\n+    let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n     write!(dst,\n \"<!DOCTYPE html>\\\n <html lang=\\\"en\\\">\\\n@@ -46,20 +50,20 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     <meta name=\\\"description\\\" content=\\\"{description}\\\">\\\n     <meta name=\\\"keywords\\\" content=\\\"{keywords}\\\">\\\n     <title>{title}</title>\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}normalize{suffix}.css\\\">\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}rustdoc{suffix}.css\\\" \\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}normalize{suffix}.css\\\">\\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}rustdoc{suffix}.css\\\" \\\n           id=\\\"mainThemeStyle\\\">\\\n     {themes}\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}dark{suffix}.css\\\">\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}light{suffix}.css\\\" \\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}dark{suffix}.css\\\">\\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}light{suffix}.css\\\" \\\n           id=\\\"themeStyle\\\">\\\n-    <script src=\\\"{root_path}storage{suffix}.js\\\"></script>\\\n-    <noscript><link rel=\\\"stylesheet\\\" href=\\\"{root_path}noscript{suffix}.css\\\"></noscript>\\\n+    <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n+    <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n     {favicon}\\\n     {in_header}\\\n     <style type=\\\"text/css\\\">\\\n-    #crate-search{{background-image:url(\\\"{root_path}down-arrow{suffix}.svg\\\");}}\\\n+    #crate-search{{background-image:url(\\\"{static_root_path}down-arrow{suffix}.svg\\\");}}\\\n     </style>\\\n </head>\\\n <body class=\\\"rustdoc {css_class}\\\">\\\n@@ -77,11 +81,13 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     </nav>\\\n     <div class=\\\"theme-picker\\\">\\\n         <button id=\\\"theme-picker\\\" aria-label=\\\"Pick another theme!\\\">\\\n-            <img src=\\\"{root_path}brush{suffix}.svg\\\" width=\\\"18\\\" alt=\\\"Pick another theme!\\\">\\\n+            <img src=\\\"{static_root_path}brush{suffix}.svg\\\" \\\n+                 width=\\\"18\\\" \\\n+                 alt=\\\"Pick another theme!\\\">\\\n         </button>\\\n         <div id=\\\"theme-choices\\\"></div>\\\n     </div>\\\n-    <script src=\\\"{root_path}theme{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}theme{suffix}.js\\\"></script>\\\n     <nav class=\\\"sub\\\">\\\n         <form class=\\\"search-form js-only\\\">\\\n             <div class=\\\"search-container\\\">\\\n@@ -96,7 +102,9 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                            type=\\\"search\\\">\\\n                 </div>\\\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n-                    <img src=\\\"{root_path}wheel{suffix}.svg\\\" width=\\\"18\\\" alt=\\\"Change settings\\\">\\\n+                    <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n+                         width=\\\"18\\\" \\\n+                         alt=\\\"Change settings\\\">\\\n                 </a>\\\n             </div>\\\n         </form>\\\n@@ -157,19 +165,23 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n         window.currentCrate = \\\"{krate}\\\";\\\n     </script>\\\n     <script src=\\\"{root_path}aliases.js\\\"></script>\\\n-    <script src=\\\"{root_path}main{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n+    {static_extra_scripts}\\\n     {extra_scripts}\\\n     <script defer src=\\\"{root_path}search-index.js\\\"></script>\\\n </body>\\\n </html>\",\n     css_extension = if css_file_extension {\n-        format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}theme{suffix}.css\\\">\",\n-                root_path = page.root_path,\n+        format!(\"<link rel=\\\"stylesheet\\\" \\\n+                       type=\\\"text/css\\\" \\\n+                       href=\\\"{static_root_path}theme{suffix}.css\\\">\",\n+                static_root_path = static_root_path,\n                 suffix=page.resource_suffix)\n     } else {\n         String::new()\n     },\n     content   = *t,\n+    static_root_path = static_root_path,\n     root_path = page.root_path,\n     css_class = page.css_class,\n     logo      = if layout.logo.is_empty() {\n@@ -197,12 +209,17 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                    .filter_map(|t| t.file_stem())\n                    .filter_map(|t| t.to_str())\n                    .map(|t| format!(r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}{}{}.css\">\"#,\n-                                    page.root_path,\n+                                    static_root_path,\n                                     t,\n                                     page.resource_suffix))\n                    .collect::<String>(),\n     suffix=page.resource_suffix,\n-    extra_scripts=extra_scripts.iter().map(|e| {\n+    static_extra_scripts=page.static_extra_scripts.iter().map(|e| {\n+        format!(\"<script src=\\\"{static_root_path}{extra_script}.js\\\"></script>\",\n+                static_root_path=static_root_path,\n+                extra_script=e)\n+    }).collect::<String>(),\n+    extra_scripts=page.extra_scripts.iter().map(|e| {\n         format!(\"<script src=\\\"{root_path}{extra_script}.js\\\"></script>\",\n                 root_path=page.root_path,\n                 extra_script=e)"}, {"sha": "e47ec9ec2f051b9dc008e72e5aab0811030d4e28", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -140,6 +140,9 @@ struct SharedContext {\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n     /// \"light-v2.css\").\n     pub resource_suffix: String,\n+    /// Optional path string to be used to load static files on output pages. If not set, uses\n+    /// combinations of `../` to reach the documentation root.\n+    pub static_root_path: Option<String>,\n }\n \n impl SharedContext {\n@@ -506,6 +509,7 @@ pub fn run(mut krate: clean::Crate,\n         extension_css,\n         extern_html_root_urls,\n         resource_suffix,\n+        static_root_path,\n         ..\n     } = options;\n \n@@ -533,6 +537,7 @@ pub fn run(mut krate: clean::Crate,\n         sort_modules_alphabetically,\n         themes,\n         resource_suffix,\n+        static_root_path,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -1080,9 +1085,12 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 title: \"Index of crates\",\n                 css_class: \"mod\",\n                 root_path: \"./\",\n+                static_root_path: cx.shared.static_root_path.deref(),\n                 description: \"List of crates\",\n                 keywords: BASIC_KEYWORDS,\n                 resource_suffix: &cx.shared.resource_suffix,\n+                extra_scripts: &[],\n+                static_extra_scripts: &[],\n             };\n             krates.push(krate.name.clone());\n             krates.sort();\n@@ -1101,7 +1109,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n             try_err!(layout::render(&mut w, &cx.shared.layout,\n                                     &page, &(\"\"), &content,\n                                     cx.shared.css_file_extension.is_some(),\n-                                    &cx.shared.themes, &[]), &dst);\n+                                    &cx.shared.themes), &dst);\n             try_err!(w.flush(), &dst);\n         }\n     }\n@@ -1366,15 +1374,17 @@ impl<'a> SourceCollector<'a> {\n             title: &title,\n             css_class: \"source\",\n             root_path: &root_path,\n+            static_root_path: self.scx.static_root_path.deref(),\n             description: &desc,\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &self.scx.resource_suffix,\n+            extra_scripts: &[\"source-files\"],\n+            static_extra_scripts: &[&format!(\"source-script{}\", self.scx.resource_suffix)],\n         };\n         layout::render(&mut w, &self.scx.layout,\n                        &page, &(\"\"), &Source(contents),\n                        self.scx.css_file_extension.is_some(),\n-                       &self.scx.themes, &[\"source-files\",\n-                                           &format!(\"source-script{}\", page.resource_suffix)])?;\n+                       &self.scx.themes)?;\n         w.flush()?;\n         self.scx.local_sources.insert(p.clone(), href);\n         Ok(())\n@@ -1956,9 +1966,12 @@ impl Context {\n             title: \"List of all items in this crate\",\n             css_class: \"mod\",\n             root_path: \"../\",\n+            static_root_path: self.shared.static_root_path.deref(),\n             description: \"List of all items in this crate\",\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &self.shared.resource_suffix,\n+            extra_scripts: &[],\n+            static_extra_scripts: &[],\n         };\n         let sidebar = if let Some(ref version) = cache().crate_version {\n             format!(\"<p class='location'>Crate {}</p>\\\n@@ -1973,7 +1986,7 @@ impl Context {\n         try_err!(layout::render(&mut w, &self.shared.layout,\n                                 &page, &sidebar, &all,\n                                 self.shared.css_file_extension.is_some(),\n-                                &self.shared.themes, &[]),\n+                                &self.shared.themes),\n                  &final_file);\n \n         // Generating settings page.\n@@ -1993,7 +2006,7 @@ impl Context {\n         try_err!(layout::render(&mut w, &layout,\n                                 &page, &sidebar, &settings,\n                                 self.shared.css_file_extension.is_some(),\n-                                &themes, &[]),\n+                                &themes),\n                  &settings_file);\n \n         Ok(())\n@@ -2035,10 +2048,13 @@ impl Context {\n         let page = layout::Page {\n             css_class: tyname,\n             root_path: &self.root_path(),\n+            static_root_path: self.shared.static_root_path.deref(),\n             title: &title,\n             description: &desc,\n             keywords: &keywords,\n             resource_suffix: &self.shared.resource_suffix,\n+            extra_scripts: &[],\n+            static_extra_scripts: &[],\n         };\n \n         {\n@@ -2051,7 +2067,7 @@ impl Context {\n                            &Sidebar{ cx: self, item: it },\n                            &Item{ cx: self, item: it },\n                            self.shared.css_file_extension.is_some(),\n-                           &self.shared.themes, &[])?;\n+                           &self.shared.themes)?;\n         } else {\n             let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {"}, {"sha": "4f59f67e94f98e2e2a965d589d4508c375d44742", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -25,6 +25,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n+#![feature(inner_deref)]\n \n #![recursion_limit=\"256\"]\n \n@@ -338,6 +339,13 @@ fn opts() -> Vec<RustcOptGroup> {\n                        \"enable-index-page\",\n                        \"To enable generation of the index page\")\n         }),\n+        unstable(\"static-root-path\", |o| {\n+            o.optopt(\"\",\n+                     \"static-root-path\",\n+                     \"Path string to force loading static files from in output pages. \\\n+                      If not set, uses combinations of '../' to reach the documentation root.\",\n+                     \"PATH\")\n+        }),\n     ]\n }\n "}, {"sha": "7df3fee3365834264c6ec89e1508326c855e450b", "filename": "src/test/rustdoc/static-root-path.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4446c65d9b6971ec80684ef5c299ab56cb1d16d8/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=4446c65d9b6971ec80684ef5c299ab56cb1d16d8", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z unstable-options --static-root-path /cache/\n+\n+// @has static_root_path/struct.SomeStruct.html\n+// @matches - '\"/cache/main\\.js\"'\n+// @!matches - '\"\\.\\./main\\.js\"'\n+// @matches - '\"\\.\\./search-index\\.js\"'\n+// @!matches - '\"/cache/search-index\\.js\"'\n+pub struct SomeStruct;\n+\n+// @has src/static_root_path/static-root-path.rs.html\n+// @matches - '\"/cache/source-script\\.js\"'\n+// @!matches - '\"\\.\\./\\.\\./source-script\\.js\"'\n+// @matches - '\"\\.\\./\\.\\./source-files.js\"'\n+// @!matches - '\"/cache/source-files\\.js\"'"}]}