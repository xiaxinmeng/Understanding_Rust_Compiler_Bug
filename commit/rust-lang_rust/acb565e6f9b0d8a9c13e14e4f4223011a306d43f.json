{"sha": "acb565e6f9b0d8a9c13e14e4f4223011a306d43f", "node_id": "C_kwDOAAsO6NoAKGFjYjU2NWU2ZjliMGQ4YTljMTNlMTRlNGY0MjIzMDExYTMwNmQ0M2Y", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-01T13:30:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T13:30:30Z"}, "message": "Merge #10414\n\n10414: internal: Add some profiling calls to name resolution r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "253377422290ebe98f200bd07d557f30b48388f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253377422290ebe98f200bd07d557f30b48388f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb565e6f9b0d8a9c13e14e4f4223011a306d43f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVw12CRBK7hj4Ov3rIwAAJmgIAD91b6wvoIeEOIVsI6EFFzIw\nWjWCgcf9aeLvAPTaZOGvYtFlkM6BMhFL2F1OcVJNkYodmq6ahddHz2R6vZHybWm6\nN0hl/lRJDFZqNiOB512MhVlgufcdsfIb4ibe4QP9TEJla6lSNI/pxDBrbIq46QkJ\n9ps581XD01iAzt+rn7GnFsd0YlOr496rfejw1XnF7jC+ADFJKBp3EI9hzuuZBHkM\nCGlBdwNU/Agy4OGKMQ4Nihko/cKGwg8ZPXzv2Fo93HbhioRUaqD4Nq5LI1NtCpim\nx+Ii24xj+mPeBYiROMWJT67ZZ5nR/zBxVbSnS67mIJE9vkzKlyUInG2LpM12A7o=\n=mQdB\n-----END PGP SIGNATURE-----\n", "payload": "tree 253377422290ebe98f200bd07d557f30b48388f2\nparent 0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49\nparent 033f87c2f0b46840168b1b3c7754a99e62b4a4ba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633095030 +0000\ncommitter GitHub <noreply@github.com> 1633095030 +0000\n\nMerge #10414\n\n10414: internal: Add some profiling calls to name resolution r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb565e6f9b0d8a9c13e14e4f4223011a306d43f", "html_url": "https://github.com/rust-lang/rust/commit/acb565e6f9b0d8a9c13e14e4f4223011a306d43f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb565e6f9b0d8a9c13e14e4f4223011a306d43f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49", "url": "https://api.github.com/repos/rust-lang/rust/commits/0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49", "html_url": "https://github.com/rust-lang/rust/commit/0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49"}, {"sha": "033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "html_url": "https://github.com/rust-lang/rust/commit/033f87c2f0b46840168b1b3c7754a99e62b4a4ba"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "dbd4378968cc9c0135861486d682e2318fd29eb4", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/acb565e6f9b0d8a9c13e14e4f4223011a306d43f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb565e6f9b0d8a9c13e14e4f4223011a306d43f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=acb565e6f9b0d8a9c13e14e4f4223011a306d43f", "patch": "@@ -275,6 +275,8 @@ struct DefCollector<'a> {\n \n impl DefCollector<'_> {\n     fn seed_with_top_level(&mut self) {\n+        let _p = profile::span(\"seed_with_top_level\");\n+\n         let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n         let item_tree = self.db.file_item_tree(file_id.into());\n         let module_id = self.def_map.root;\n@@ -346,15 +348,20 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    fn collect(&mut self) {\n+    fn resolution_loop(&mut self) {\n+        let _p = profile::span(\"DefCollector::resolution_loop\");\n+\n         // main name resolution fixed-point loop.\n         let mut i = 0;\n         'outer: loop {\n             loop {\n                 self.db.unwind_if_cancelled();\n-                loop {\n-                    if self.resolve_imports() == ReachedFixedPoint::Yes {\n-                        break;\n+                {\n+                    let _p = profile::span(\"resolve_imports loop\");\n+                    loop {\n+                        if self.resolve_imports() == ReachedFixedPoint::Yes {\n+                            break;\n+                        }\n                     }\n                 }\n                 if self.resolve_macros() == ReachedFixedPoint::Yes {\n@@ -372,6 +379,12 @@ impl DefCollector<'_> {\n                 break;\n             }\n         }\n+    }\n+\n+    fn collect(&mut self) {\n+        let _p = profile::span(\"DefCollector::collect\");\n+\n+        self.resolution_loop();\n \n         // Resolve all indeterminate resolved imports again\n         // As some of the macros will expand newly import shadowing partial resolved imports\n@@ -723,6 +736,7 @@ impl DefCollector<'_> {\n     }\n \n     fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {\n+        let _p = profile::span(\"resolve_import\").detail(|| format!(\"{}\", import.path));\n         tracing::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let name = import\n@@ -790,6 +804,8 @@ impl DefCollector<'_> {\n     }\n \n     fn record_resolved_import(&mut self, directive: &ImportDirective) {\n+        let _p = profile::span(\"record_resolved_import\");\n+\n         let module_id = directive.module_id;\n         let import = &directive.import;\n         let mut def = directive.status.namespaces();\n@@ -1244,6 +1260,8 @@ impl DefCollector<'_> {\n     fn finish(mut self) -> DefMap {\n         // Emit diagnostics for all remaining unexpanded macros.\n \n+        let _p = profile::span(\"DefCollector::finish\");\n+\n         for directive in &self.unresolved_macros {\n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {"}]}