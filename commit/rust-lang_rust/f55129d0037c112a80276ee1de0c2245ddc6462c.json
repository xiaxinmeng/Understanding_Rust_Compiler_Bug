{"sha": "f55129d0037c112a80276ee1de0c2245ddc6462c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTEyOWQwMDM3YzExMmE4MDI3NmVlMWRlMGMyMjQ1ZGRjNjQ2MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-01T03:24:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-01T03:24:02Z"}, "message": "Auto merge of #54675 - alexcrichton:defaultlibs, r=varkor\n\nrust: Add a `-C default-linker-libraries` option\n\nThis commit adds a new codegen option for the compiler which disables\nrustc's passing of `-nodefaultlibs` by default on relevant platforms.\nSometimes Rust is linked with C code which fails to link with\n`-nodefaultlibs` and is unnecessarily onerous to get linking correctly\nwith `-nodefaultlibs`.\n\nAn example of this is that when you compile C code with sanitizers and\nthen pass `-fsanitize=address` to the linker, it's incompatible with\n`-nodefaultlibs` also being passed to the linker.\n\nIn these situations it's easiest to turn off Rust's default passing of\n`-nodefaultlibs`, which was more ideological to start with than\nanything! Preserving the default is somewhat important but having this\nbe opt-in shouldn't cause any breakage.\n\nCloses #54237", "tree": {"sha": "0f6e69b8b1138ac7735b80f035a185175f5b4b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6e69b8b1138ac7735b80f035a185175f5b4b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55129d0037c112a80276ee1de0c2245ddc6462c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55129d0037c112a80276ee1de0c2245ddc6462c", "html_url": "https://github.com/rust-lang/rust/commit/f55129d0037c112a80276ee1de0c2245ddc6462c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55129d0037c112a80276ee1de0c2245ddc6462c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03379648df3e1671506918f2eb31deff7e463cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/03379648df3e1671506918f2eb31deff7e463cc8", "html_url": "https://github.com/rust-lang/rust/commit/03379648df3e1671506918f2eb31deff7e463cc8"}, {"sha": "6f4b378e840209561f0ea1c013f9725b584a53e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4b378e840209561f0ea1c013f9725b584a53e8", "html_url": "https://github.com/rust-lang/rust/commit/6f4b378e840209561f0ea1c013f9725b584a53e8"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "5ca2bfebbeb27a84fd899409820f1409f0572eda", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f55129d0037c112a80276ee1de0c2245ddc6462c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55129d0037c112a80276ee1de0c2245ddc6462c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f55129d0037c112a80276ee1de0c2245ddc6462c", "patch": "@@ -1135,6 +1135,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"enable incremental compilation\"),\n+    default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+          \"allow the linker to link its default libraries\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,"}, {"sha": "9fac343b846e445086fc519fb5f972703542bcc7", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f55129d0037c112a80276ee1de0c2245ddc6462c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55129d0037c112a80276ee1de0c2245ddc6462c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=f55129d0037c112a80276ee1de0c2245ddc6462c", "patch": "@@ -1138,12 +1138,16 @@ fn link_args(cmd: &mut dyn Linker,\n     // Pass debuginfo flags down to the linker.\n     cmd.debuginfo();\n \n-    // We want to prevent the compiler from accidentally leaking in any system\n-    // libraries, so we explicitly ask gcc to not link to any libraries by\n-    // default. Note that this does not happen for windows because windows pulls\n-    // in some large number of libraries and I couldn't quite figure out which\n-    // subset we wanted.\n-    if t.options.no_default_libraries {\n+    // We want to, by default, prevent the compiler from accidentally leaking in\n+    // any system libraries, so we may explicitly ask linkers to not link to any\n+    // libraries by default. Note that this does not happen for windows because\n+    // windows pulls in some large number of libraries and I couldn't quite\n+    // figure out which subset we wanted.\n+    //\n+    // This is all naturally configurable via the standard methods as well.\n+    if !sess.opts.cg.default_linker_libraries.unwrap_or(false) &&\n+        t.options.no_default_libraries\n+    {\n         cmd.no_default_libraries();\n     }\n "}]}