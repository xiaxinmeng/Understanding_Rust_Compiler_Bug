{"sha": "4583272bf5054e84c4c59ba3b9334a52cfcf5208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODMyNzJiZjUwNTRlODRjNGM1OWJhM2I5MzM0YTUyY2ZjZjUyMDg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-04T11:25:25Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-07T12:44:06Z"}, "message": "Updates to tests reflecting array-move restrictions.\n\nNote that the change to the error message in\nborrowck-use-in-index-lvalue.rs, where we report that `*w` is\nuninitialized rather than `w`, was unintended fallout from the\nimplementation strategy used here.\n\nThe change appears harmless to me, but I welcome advice on how to\nbring back the old message, which was slightly cleaner (i.e. less\nunintelligible).\n\n----\n\ndrive-by: revise compile-fail/borrowck-vec-pattern-move-tail to make\nit really clear that there is a conflict that must be signaled.\n\n(A hypothetical future version of Rust might be able to accept the\nprior version of the code, since the previously updated index was not\nactually aliased.)", "tree": {"sha": "a32a2498ebb5496df0ad6be9c5475c3fd2ab0081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a32a2498ebb5496df0ad6be9c5475c3fd2ab0081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4583272bf5054e84c4c59ba3b9334a52cfcf5208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4583272bf5054e84c4c59ba3b9334a52cfcf5208", "html_url": "https://github.com/rust-lang/rust/commit/4583272bf5054e84c4c59ba3b9334a52cfcf5208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4583272bf5054e84c4c59ba3b9334a52cfcf5208/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128ac9dfcbb096c8bbc373f554a0c97ca3e9e030", "url": "https://api.github.com/repos/rust-lang/rust/commits/128ac9dfcbb096c8bbc373f554a0c97ca3e9e030", "html_url": "https://github.com/rust-lang/rust/commit/128ac9dfcbb096c8bbc373f554a0c97ca3e9e030"}], "stats": {"total": 85, "additions": 5, "deletions": 80}, "files": [{"sha": "3fb42b38e842c91056a874cc9d7df25780cd179e", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/128ac9dfcbb096c8bbc373f554a0c97ca3e9e030/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128ac9dfcbb096c8bbc373f554a0c97ca3e9e030/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=128ac9dfcbb096c8bbc373f554a0c97ca3e9e030", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn f() {\n-    let mut a = [box 0, box 1];\n-    drop(a[0]);\n-    a[1] = box 2;\n-    drop(a[0]); //~ ERROR use of moved value: `a[..]`\n-}\n-\n-fn main() {\n-    f();\n-}\n-"}, {"sha": "7291bcd2ce1264fb984e5eb9723729ce420d2967", "filename": "src/test/compile-fail/borrowck-use-in-index-lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs?ref=4583272bf5054e84c4c59ba3b9334a52cfcf5208", "patch": "@@ -10,10 +10,10 @@\n \n fn test() {\n     let w: &mut [isize];\n-    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n+    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `*w`\n \n     let mut w: &mut [isize];\n-    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n+    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `*w`\n }\n \n fn main() { test(); }"}, {"sha": "242a38440034ccaca016addea210f249a000de09", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=4583272bf5054e84c4c59ba3b9334a52cfcf5208", "patch": "@@ -14,6 +14,8 @@ fn main() {\n         [1, 2, tail..] => tail,\n         _ => unreachable!()\n     };\n-    a[0] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed\n+    println!(\"t[0]: {}\", t[0]);\n+    a[2] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed\n+    println!(\"t[0]: {}\", t[0]);\n     t[0];\n }"}, {"sha": "426d5fa29a02000aa657a87354dde4af4339e028", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4583272bf5054e84c4c59ba3b9334a52cfcf5208/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=4583272bf5054e84c4c59ba3b9334a52cfcf5208", "patch": "@@ -33,15 +33,6 @@ pub fn test_move_array_into_recv(a: [D; 3], recv: &mut [D; 3]) {\n     *recv = a;\n }\n \n-#[rustc_move_fragments]\n-pub fn test_extract_array_elem(a: [D; 3], i: usize) -> D {\n-    //~^ ERROR                 parent_of_fragments: `$(local a)`\n-    //~| ERROR                  assigned_leaf_path: `$(local i)`\n-    //~| ERROR                     moved_leaf_path: `$(local a).[]`\n-    //~| ERROR                    unmoved_fragment: `$(allbutone $(local a).[])`\n-    a[i]\n-}\n-\n #[rustc_move_fragments]\n pub fn test_overwrite_array_elem(mut a: [D; 3], i: usize, d: D) {\n     //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n@@ -53,48 +44,4 @@ pub fn test_overwrite_array_elem(mut a: [D; 3], i: usize, d: D) {\n     a[i] = d;\n }\n \n-// FIXME (pnkfelix): Both test_move_array_then_overwrite_elem1 and\n-// test_move_array_then_overwrite_elem2 illustrate a behavior that\n-// we need to make illegal if we want to get rid of drop-flags.\n-// See RFC PR 320 for more discussion.\n-\n-#[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem1(mut a: [D; 3], i: usize, recv: &mut [D; 3], d: D) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n-    //~| ERROR                 parent_of_fragments: `$(local recv)`\n-    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n-    //~| ERROR                  assigned_leaf_path: `$(local i)`\n-    //~| ERROR                  assigned_leaf_path: `$(local d)`\n-    //~| ERROR                     moved_leaf_path: `$(local d)`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n-    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n-\n-    // This test covers the case where the array contents have been all moved away, but\n-    // we still need to deal with new initializing writes into the array.\n-    *recv = a;\n-    a[i] = d;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem2(mut a: [D; 3], i: usize, j: usize,\n-                                            recv: &mut [D; 3], d1: D, d2: D) {\n-    //~^^ ERROR                parent_of_fragments: `$(local mut a)`\n-    //~| ERROR                 parent_of_fragments: `$(local recv)`\n-    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n-    //~| ERROR                  assigned_leaf_path: `$(local i)`\n-    //~| ERROR                  assigned_leaf_path: `$(local j)`\n-    //~| ERROR                  assigned_leaf_path: `$(local d1)`\n-    //~| ERROR                  assigned_leaf_path: `$(local d2)`\n-    //~| ERROR                     moved_leaf_path: `$(local d1)`\n-    //~| ERROR                     moved_leaf_path: `$(local d2)`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n-    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n-\n-    // This test covers the case where the array contents have been all moved away, but\n-    // we still need to deal with new initializing writes into the array.\n-    *recv = a;\n-    a[i] = d1;\n-    a[j] = d2;\n-}\n-\n pub fn main() { }"}]}