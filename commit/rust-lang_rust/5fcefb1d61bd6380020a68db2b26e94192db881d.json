{"sha": "5fcefb1d61bd6380020a68db2b26e94192db881d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmY2VmYjFkNjFiZDYzODAwMjBhNjhkYjJiMjZlOTQxOTJkYjg4MWQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-11T19:32:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-11T19:32:05Z"}, "message": "Rollup merge of #87061 - FabianWolff:issue-87051, r=oli-obk\n\nDo not suggest adding a semicolon after `?`\n\nFixes #87051. I have only modified `report_return_mismatched_types()`, i.e. my changes only affect suggestions to add `;` for return type mismatches, but this never makes sense after `?`, because the function cannot return `()` if `?` is used (it has to return a `Result` or an `Option`), and a semicolon won't help if the expected and actual `Err` types differ, even if the expected one is `()`.", "tree": {"sha": "acff12d179cd4cfae3724599e623b07beed99310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acff12d179cd4cfae3724599e623b07beed99310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fcefb1d61bd6380020a68db2b26e94192db881d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg60c1CRBK7hj4Ov3rIwAAObUIAE51OYYTjDEwvnJBNQhpbOev\nZmgOPORGHgDLXCEXYSJysnB3mcCdBh6KBr9SnEFHS3o95Rfbz0S7mFU3VvwdLCaX\n7JDW8e4pocy2abH5FdXu54R7FfwUuZcTL8Qop0+jD85uwqCkLOs6lV5sapRh/8zs\n/ur0i1341SIvheKfabCnvr0ThhkcSkjwaItw2sk7CVDx/3OFjrK6xw0MEGn3McND\nVwd7s9VSdkDj6cZKVGYooljlBhRA2q5MIMIvcyMgdY8UcRv+6o24er30FXbnxBIL\nfPsNLb/fF61YW2Vh3SiCQWVg0hY7N4j7WQg4n9l8M82gWDo753QfXMwEPAffGBE=\n=Bm7F\n-----END PGP SIGNATURE-----\n", "payload": "tree acff12d179cd4cfae3724599e623b07beed99310\nparent f3d5fde0702dbcfbb97a6a3145eda8a3c5ff4d5f\nparent 9946ff227d3b1ec7ee5de9ef9b2f81ee4547df34\nauthor Yuki Okushi <jtitor@2k36.org> 1626031925 +0900\ncommitter GitHub <noreply@github.com> 1626031925 +0900\n\nRollup merge of #87061 - FabianWolff:issue-87051, r=oli-obk\n\nDo not suggest adding a semicolon after `?`\n\nFixes #87051. I have only modified `report_return_mismatched_types()`, i.e. my changes only affect suggestions to add `;` for return type mismatches, but this never makes sense after `?`, because the function cannot return `()` if `?` is used (it has to return a `Result` or an `Option`), and a semicolon won't help if the expected and actual `Err` types differ, even if the expected one is `()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcefb1d61bd6380020a68db2b26e94192db881d", "html_url": "https://github.com/rust-lang/rust/commit/5fcefb1d61bd6380020a68db2b26e94192db881d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fcefb1d61bd6380020a68db2b26e94192db881d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d5fde0702dbcfbb97a6a3145eda8a3c5ff4d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d5fde0702dbcfbb97a6a3145eda8a3c5ff4d5f", "html_url": "https://github.com/rust-lang/rust/commit/f3d5fde0702dbcfbb97a6a3145eda8a3c5ff4d5f"}, {"sha": "9946ff227d3b1ec7ee5de9ef9b2f81ee4547df34", "url": "https://api.github.com/repos/rust-lang/rust/commits/9946ff227d3b1ec7ee5de9ef9b2f81ee4547df34", "html_url": "https://github.com/rust-lang/rust/commit/9946ff227d3b1ec7ee5de9ef9b2f81ee4547df34"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "9e89804b74713bd8fdda10a1af3d4e3d2741ae95", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fcefb1d61bd6380020a68db2b26e94192db881d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcefb1d61bd6380020a68db2b26e94192db881d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5fcefb1d61bd6380020a68db2b26e94192db881d", "patch": "@@ -1456,11 +1456,15 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 expected.is_unit(),\n                 pointing_at_return_type,\n             ) {\n-                // If the block is from an external macro, then do not suggest\n-                // adding a semicolon, because there's nowhere to put it.\n-                // See issue #81943.\n+                // If the block is from an external macro or try (`?`) desugaring, then\n+                // do not suggest adding a semicolon, because there's nowhere to put it.\n+                // See issues #81943 and #87051.\n                 if cond_expr.span.desugaring_kind().is_none()\n                     && !in_external_macro(fcx.tcx.sess, cond_expr.span)\n+                    && !matches!(\n+                        cond_expr.kind,\n+                        hir::ExprKind::Match(.., hir::MatchSource::TryDesugar)\n+                    )\n                 {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n                     if expr.can_have_side_effects() {"}, {"sha": "f882a159f98340f2c6e9159a77d299d36ba7132d", "filename": "src/test/ui/suggestions/try-operator-dont-suggest-semicolon.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5fcefb1d61bd6380020a68db2b26e94192db881d/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcefb1d61bd6380020a68db2b26e94192db881d/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs?ref=5fcefb1d61bd6380020a68db2b26e94192db881d", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for #87051, where a double semicolon was erroneously\n+// suggested after a `?` operator.\n+\n+fn main() -> Result<(), ()> {\n+    a(|| {\n+        b()\n+        //~^ ERROR: mismatched types [E0308]\n+        //~| NOTE: expected `()`, found `i32`\n+        //~| HELP: consider using a semicolon here\n+    })?;\n+\n+    // Here, we do want to suggest a semicolon:\n+    let x = Ok(42);\n+    if true {\n+    //~^ NOTE: expected this to be `()`\n+        x?\n+        //~^ ERROR: mismatched types [E0308]\n+        //~| NOTE: expected `()`, found integer\n+        //~| HELP: consider using a semicolon here\n+    }\n+    //~^ HELP: consider using a semicolon here\n+\n+    Ok(())\n+}\n+\n+fn a<F>(f: F) -> Result<(), ()> where F: FnMut() { Ok(()) }\n+fn b() -> i32 { 42 }"}, {"sha": "4f7e18742e22e84ea67a1202c88066536bc51ea8", "filename": "src/test/ui/suggestions/try-operator-dont-suggest-semicolon.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5fcefb1d61bd6380020a68db2b26e94192db881d/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fcefb1d61bd6380020a68db2b26e94192db881d/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr?ref=5fcefb1d61bd6380020a68db2b26e94192db881d", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/try-operator-dont-suggest-semicolon.rs:6:9\n+   |\n+LL |         b()\n+   |         ^^^- help: consider using a semicolon here: `;`\n+   |         |\n+   |         expected `()`, found `i32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/try-operator-dont-suggest-semicolon.rs:16:9\n+   |\n+LL | /     if true {\n+LL | |\n+LL | |         x?\n+   | |         ^^ expected `()`, found integer\n+LL | |\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |         x?;\n+   |           ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}