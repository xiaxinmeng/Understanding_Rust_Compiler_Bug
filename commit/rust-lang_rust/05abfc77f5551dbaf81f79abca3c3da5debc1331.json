{"sha": "05abfc77f5551dbaf81f79abca3c3da5debc1331", "node_id": "C_kwDOAAsO6NoAKDA1YWJmYzc3ZjU1NTFkYmFmODFmNzlhYmNhM2MzZGE1ZGViYzEzMzE", "commit": {"author": {"name": "Heinenen", "email": "th.m.heinen@gmail.com", "date": "2021-12-22T15:29:26Z"}, "committer": {"name": "me", "email": "th.m.heinen@gmail.com", "date": "2021-12-23T11:56:38Z"}, "message": "hide type inlay hints", "tree": {"sha": "d7cda637631ce29b5bbeda9ac668a1b0a8f1b224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7cda637631ce29b5bbeda9ac668a1b0a8f1b224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05abfc77f5551dbaf81f79abca3c3da5debc1331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05abfc77f5551dbaf81f79abca3c3da5debc1331", "html_url": "https://github.com/rust-lang/rust/commit/05abfc77f5551dbaf81f79abca3c3da5debc1331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05abfc77f5551dbaf81f79abca3c3da5debc1331/comments", "author": {"login": "Heinenen", "id": 37484430, "node_id": "MDQ6VXNlcjM3NDg0NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/37484430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Heinenen", "html_url": "https://github.com/Heinenen", "followers_url": "https://api.github.com/users/Heinenen/followers", "following_url": "https://api.github.com/users/Heinenen/following{/other_user}", "gists_url": "https://api.github.com/users/Heinenen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Heinenen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Heinenen/subscriptions", "organizations_url": "https://api.github.com/users/Heinenen/orgs", "repos_url": "https://api.github.com/users/Heinenen/repos", "events_url": "https://api.github.com/users/Heinenen/events{/privacy}", "received_events_url": "https://api.github.com/users/Heinenen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Heinenen", "id": 37484430, "node_id": "MDQ6VXNlcjM3NDg0NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/37484430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Heinenen", "html_url": "https://github.com/Heinenen", "followers_url": "https://api.github.com/users/Heinenen/followers", "following_url": "https://api.github.com/users/Heinenen/following{/other_user}", "gists_url": "https://api.github.com/users/Heinenen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Heinenen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Heinenen/subscriptions", "organizations_url": "https://api.github.com/users/Heinenen/orgs", "repos_url": "https://api.github.com/users/Heinenen/repos", "events_url": "https://api.github.com/users/Heinenen/events{/privacy}", "received_events_url": "https://api.github.com/users/Heinenen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7dfe93fc3336804c68ff550d8da5bbd027f5434", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dfe93fc3336804c68ff550d8da5bbd027f5434", "html_url": "https://github.com/rust-lang/rust/commit/d7dfe93fc3336804c68ff550d8da5bbd027f5434"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "cc304cb10a60c875447f98581389cf7ec9fbac99", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05abfc77f5551dbaf81f79abca3c3da5debc1331/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05abfc77f5551dbaf81f79abca3c3da5debc1331/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=05abfc77f5551dbaf81f79abca3c3da5debc1331", "patch": "@@ -265,12 +265,15 @@ fn is_named_constructor(\n     };\n     let path = expr.path()?;\n \n-    // If it exists, use qualifying segment as the constructor name.\n-    // If not, use the last segment.\n-    let qual_seg = match path.qualifier() {\n-        Some(qual) => qual.segment(),\n-        None => path.segment(),\n+    let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n+    let callable_kind = callable.map(|it| it.kind());\n+    let qual_seg = match callable_kind {\n+        Some(hir::CallableKind::Function(_) | hir::CallableKind::TupleEnumVariant(_)) => {\n+            path.qualifier()?.segment()\n+        }\n+        _ => path.segment(),\n     }?;\n+\n     let ctor_name = match qual_seg.kind()? {\n         ast::PathSegmentKind::Name(name_ref) => {\n             match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n@@ -1348,6 +1351,13 @@ fn main() {\n //- minicore: try, option\n use core::ops::ControlFlow;\n \n+mod x {\n+    pub mod y { pub struct Foo; }\n+    pub struct Foo;\n+    pub enum AnotherEnum {\n+        Variant()\n+    };\n+}\n struct Struct;\n struct TupleStruct();\n \n@@ -1378,6 +1388,8 @@ fn times2(value: i32) -> i32 {\n fn main() {\n     let enumb = Enum::Variant(0);\n \n+    let strukt = x::Foo;\n+    let strukt = x::y::Foo;\n     let strukt = Struct;\n     let strukt = Struct::new();\n "}]}