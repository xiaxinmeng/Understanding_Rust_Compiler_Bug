{"sha": "849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTY0NGI1YmM2YjFmZTgzNmQ5NmJlZDYxYjU1Y2JhOTJlNWI1ZTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T22:39:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T23:51:25Z"}, "message": "core: rename hashmap test functions", "tree": {"sha": "e0db4bdc69511803f0ea1ffd87af4e75d22b98b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0db4bdc69511803f0ea1ffd87af4e75d22b98b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "html_url": "https://github.com/rust-lang/rust/commit/849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849644b5bc6b1fe836d96bed61b55cba92e5b5e1/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "html_url": "https://github.com/rust-lang/rust/commit/fed5df8f2edbdd78573a54bb5baec71c0056fc9b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b8906e126a8d84396acd6d4f943dd126f0772d90", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/849644b5bc6b1fe836d96bed61b55cba92e5b5e1/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849644b5bc6b1fe836d96bed61b55cba92e5b5e1/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=849644b5bc6b1fe836d96bed61b55cba92e5b5e1", "patch": "@@ -518,7 +518,7 @@ mod test_map {\n     use uint;\n \n     #[test]\n-    pub fn inserts() {\n+    pub fn test_insert() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 4);\n@@ -527,7 +527,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn overwrite() {\n+    pub fn test_insert_overwrite() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert *m.get(&1) == 2;\n@@ -536,7 +536,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn conflicts() {\n+    pub fn test_insert_conflicts() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert m.insert(5, 3);\n@@ -547,7 +547,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn conflict_remove() {\n+    pub fn test_conflict_remove() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert m.insert(5, 3);\n@@ -558,7 +558,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn empty() {\n+    pub fn test_is_empty() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert !m.is_empty();\n@@ -567,23 +567,23 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn pops() {\n+    pub fn test_pop() {\n         let mut m = LinearMap::new();\n         m.insert(1, 2);\n         assert m.pop(&1) == Some(2);\n         assert m.pop(&1) == None;\n     }\n \n     #[test]\n-    pub fn swaps() {\n+    pub fn test_swap() {\n         let mut m = LinearMap::new();\n         assert m.swap(1, 2) == None;\n         assert m.swap(1, 3) == Some(2);\n         assert m.swap(1, 4) == Some(3);\n     }\n \n     #[test]\n-    pub fn consumes() {\n+    pub fn test_consume() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 3);\n@@ -598,7 +598,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn iterate() {\n+    pub fn test_iterate() {\n         let mut m = linear::linear_map_with_capacity(4);\n         for uint::range(0, 32) |i| {\n             assert m.insert(i, i*2);\n@@ -612,7 +612,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn find() {\n+    pub fn test_find() {\n         let mut m = LinearMap::new();\n         assert m.find(&1).is_none();\n         m.insert(1, 2);"}]}