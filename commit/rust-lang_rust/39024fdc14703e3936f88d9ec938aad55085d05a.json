{"sha": "39024fdc14703e3936f88d9ec938aad55085d05a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDI0ZmRjMTQ3MDNlMzkzNmY4OGQ5ZWM5MzhhYWQ1NTA4NWQwNWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T20:27:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T20:27:36Z"}, "message": "Parser test boilerplate", "tree": {"sha": "4ba144bf632ecdf9ad3eb15920f9817afc4d204c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba144bf632ecdf9ad3eb15920f9817afc4d204c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39024fdc14703e3936f88d9ec938aad55085d05a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39024fdc14703e3936f88d9ec938aad55085d05a", "html_url": "https://github.com/rust-lang/rust/commit/39024fdc14703e3936f88d9ec938aad55085d05a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39024fdc14703e3936f88d9ec938aad55085d05a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e42f26965483e96b4bb8113a04075c6a9d68ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e42f26965483e96b4bb8113a04075c6a9d68ec6", "html_url": "https://github.com/rust-lang/rust/commit/8e42f26965483e96b4bb8113a04075c6a9d68ec6"}], "stats": {"total": 102, "additions": 95, "deletions": 7}, "files": [{"sha": "439c4ef9c81fd6bda9f513bd35e082148f32d704", "filename": "grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -1,5 +1,5 @@\n Grammar(\n-    syntax_kinds: [\n+    tokens: [\n         \"ERROR\",\n         \"IDENT\",\n         \"UNDERSCORE\",\n@@ -51,5 +51,8 @@ Grammar(\n         \"COMMENT\",\n         \"DOC_COMMENT\",\n         \"SHEBANG\",\n+    ],\n+    nodes: [\n+        \"FILE\"\n     ]\n )\n\\ No newline at end of file"}, {"sha": "f5a66d9f254755488a9651c447d6e633f0e8422f", "filename": "src/bin/gen.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgen.rs?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -17,7 +17,8 @@ fn main() {\n \n #[derive(Deserialize)]\n struct Grammar {\n-    syntax_kinds: Vec<String>,\n+    tokens: Vec<String>,\n+    nodes: Vec<String>,\n }\n \n impl Grammar {\n@@ -31,7 +32,12 @@ impl Grammar {\n         acc.push_str(\"// Generated from grammar.ron\\n\");\n         acc.push_str(\"use tree::{SyntaxKind, SyntaxInfo};\\n\");\n         acc.push_str(\"\\n\");\n-        for (idx, kind) in self.syntax_kinds.iter().enumerate() {\n+\n+        let syntax_kinds: Vec<&String> =\n+            self.tokens.iter().chain(self.nodes.iter())\n+                .collect();\n+\n+        for (idx, kind) in syntax_kinds.iter().enumerate() {\n             let sname = scream(kind);\n             write!(\n                 acc,\n@@ -40,8 +46,8 @@ impl Grammar {\n             ).unwrap();\n         }\n         acc.push_str(\"\\n\");\n-        write!(acc, \"static INFOS: [SyntaxInfo; {}] = [\\n\", self.syntax_kinds.len()).unwrap();\n-        for kind in self.syntax_kinds.iter() {\n+        write!(acc, \"static INFOS: [SyntaxInfo; {}] = [\\n\", syntax_kinds.len()).unwrap();\n+        for kind in syntax_kinds.iter() {\n             let sname = scream(kind);\n             write!(\n                 acc,"}, {"sha": "0685e3f2caf1941ba6854b7c463e9920b5677132", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -6,5 +6,5 @@ mod lexer;\n \n pub mod syntax_kinds;\n pub use text::{TextUnit, TextRange};\n-pub use tree::{SyntaxKind, Token};\n+pub use tree::{SyntaxKind, Token, FileBuilder, File, Node};\n pub use lexer::{next_token, tokenize};"}, {"sha": "b83f48dd8ce875cf9b5217423b81fe3266d6132a", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -52,8 +52,9 @@ pub const THIN_ARROW: SyntaxKind = SyntaxKind(47);\n pub const COMMENT: SyntaxKind = SyntaxKind(48);\n pub const DOC_COMMENT: SyntaxKind = SyntaxKind(49);\n pub const SHEBANG: SyntaxKind = SyntaxKind(50);\n+pub const FILE: SyntaxKind = SyntaxKind(51);\n \n-static INFOS: [SyntaxInfo; 51] = [\n+static INFOS: [SyntaxInfo; 52] = [\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -105,6 +106,7 @@ static INFOS: [SyntaxInfo; 51] = [\n     SyntaxInfo { name: \"COMMENT\" },\n     SyntaxInfo { name: \"DOC_COMMENT\" },\n     SyntaxInfo { name: \"SHEBANG\" },\n+    SyntaxInfo { name: \"FILE\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/data/parser/0000_empty.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fdata%2Fparser%2F0000_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fdata%2Fparser%2F0000_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0000_empty.rs?ref=39024fdc14703e3936f88d9ec938aad55085d05a"}, {"sha": "843ea118d051925a567888d4c26a1853f7e40dda", "filename": "tests/data/parser/0000_empty.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fdata%2Fparser%2F0000_empty.txt", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fdata%2Fparser%2F0000_empty.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0000_empty.txt?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -0,0 +1 @@\n+FILE@[0; 0)\n\\ No newline at end of file"}, {"sha": "f61b6830b67433de486db43209f13dae4e177c60", "filename": "tests/parser.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39024fdc14703e3936f88d9ec938aad55085d05a/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=39024fdc14703e3936f88d9ec938aad55085d05a", "patch": "@@ -0,0 +1,76 @@\n+extern crate file;\n+#[macro_use(assert_diff)]\n+extern crate difference;\n+extern crate libsyntax2;\n+\n+use std::path::{PathBuf, Path};\n+use std::fs::read_dir;\n+use std::fmt::Write;\n+\n+use libsyntax2::{tokenize, Token, Node, File, FileBuilder};\n+\n+#[test]\n+fn parser_tests() {\n+    for test_case in parser_test_cases() {\n+        parser_test_case(&test_case);\n+    }\n+}\n+\n+fn parser_test_dir() -> PathBuf {\n+    let dir = env!(\"CARGO_MANIFEST_DIR\");\n+    PathBuf::from(dir).join(\"tests/data/parser\")\n+}\n+\n+fn parser_test_cases() -> Vec<PathBuf> {\n+    let mut acc = Vec::new();\n+    let dir = parser_test_dir();\n+    for file in read_dir(&dir).unwrap() {\n+        let file = file.unwrap();\n+        let path = file.path();\n+        if path.extension().unwrap_or_default() == \"rs\" {\n+            acc.push(path);\n+        }\n+    }\n+    acc.sort();\n+    acc\n+}\n+\n+fn parser_test_case(path: &Path) {\n+    let actual = {\n+        let text = file::get_text(path).unwrap();\n+        let tokens = tokenize(&text);\n+        let file = parse(text, &tokens);\n+        dump_tree(&file)\n+    };\n+    let expected = file::get_text(&path.with_extension(\"txt\")).unwrap();\n+    let expected = expected.as_str();\n+    let actual = actual.as_str();\n+    if expected == actual {\n+        return\n+    }\n+    if expected.trim() == actual.trim() {\n+        panic!(\"Whitespace difference!\")\n+    }\n+    assert_diff!(expected, actual, \"\\n\", 0)\n+}\n+\n+fn dump_tree(file: &File) -> String {\n+    let mut result = String::new();\n+    go(file.root(), &mut result, 0);\n+    return result;\n+\n+    fn go(node: Node, buff: &mut String, level: usize) {\n+        buff.push_str(&String::from(\"  \").repeat(level));\n+        write!(buff, \"{:?}\\n\", node);\n+        for child in node.children() {\n+            go(child, buff, level + 1)\n+        }\n+    }\n+}\n+\n+fn parse(text: String, tokens: &[Token]) -> File {\n+    let mut builder = FileBuilder::new(text);\n+    builder.start_internal(libsyntax2::syntax_kinds::FILE);\n+    builder.finish_internal();\n+    builder.finish()\n+}\n\\ No newline at end of file"}]}