{"sha": "919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTk3NWQwYTVjOTBhMjViZjA5YTBhN2MyN2ZiNzE1NmQ2YWEyYWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T13:59:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:23Z"}, "message": "Address nits.", "tree": {"sha": "fec98d60c3ddd7ca8b696505675efd28c4bdf698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec98d60c3ddd7ca8b696505675efd28c4bdf698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "html_url": "https://github.com/rust-lang/rust/commit/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518ec1259a967142fcfbf7cb6dd2d4a3dd5610cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/518ec1259a967142fcfbf7cb6dd2d4a3dd5610cf", "html_url": "https://github.com/rust-lang/rust/commit/518ec1259a967142fcfbf7cb6dd2d4a3dd5610cf"}], "stats": {"total": 120, "additions": 75, "deletions": 45}, "files": [{"sha": "7ec221fcfa9037c7a591cf9410eb156ecead367c", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -14,7 +14,6 @@ use middle::ty::{mod, AsPredicate, RegionEscape, Ty, ToPolyTraitRef};\n use std::collections::HashSet;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::default::Default;\n-use std::rc::Rc;\n use syntax::ast;\n use util::common::ErrorReported;\n use util::ppaux::Repr;\n@@ -102,26 +101,30 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         }\n     }\n \n-    pub fn normalize_associated_type<'a>(&mut self,\n+    /// \"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\n+    /// creating a fresh type variable `$0` as well as a projection\n+    /// predicate `<SomeType as SomeTrait>::X == $0`. When the\n+    /// inference engine runs, it will attempt to find an impl of\n+    /// `SomeTrait` or a where clause that lets us unify `$0` with\n+    /// something concrete. If this fails, we'll unify `$0` with\n+    /// `projection_ty` again.\n+    pub fn normalize_projection_type<'a>(&mut self,\n                                          infcx: &InferCtxt<'a,'tcx>,\n-                                         trait_ref: Rc<ty::TraitRef<'tcx>>,\n-                                         item_name: ast::Name,\n+                                         projection_ty: ty::ProjectionTy<'tcx>,\n                                          cause: ObligationCause<'tcx>)\n                                          -> Ty<'tcx>\n     {\n-        debug!(\"normalize_associated_type(trait_ref={}, item_name={})\",\n-               trait_ref.repr(infcx.tcx),\n-               item_name.repr(infcx.tcx));\n+        debug!(\"normalize_associated_type(projection_ty={})\",\n+               projection_ty.repr(infcx.tcx));\n \n-        assert!(!trait_ref.has_escaping_regions());\n+        assert!(!projection_ty.has_escaping_regions());\n \n         // FIXME(#20304) -- cache\n \n         let ty_var = infcx.next_ty_var();\n         let projection =\n             ty::Binder(ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy { trait_ref: trait_ref,\n-                                                  item_name: item_name },\n+                projection_ty: projection_ty,\n                 ty: ty_var\n             });\n         let obligation = Obligation::new(cause, projection.as_predicate());"}, {"sha": "d4fa0c98ad5d14d348e222d85983999bd931cfdd", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -117,7 +117,10 @@ pub enum ObligationCauseCode<'tcx> {\n \n #[deriving(Clone)]\n pub struct DerivedObligationCause<'tcx> {\n-    /// Resolving this trait led to the current obligation\n+    /// The trait reference of the parent obligation that led to the\n+    /// current obligation. Note that only trait obligations lead to\n+    /// derived obligations, so we just store the trait reference here\n+    /// directly.\n     parent_trait_ref: ty::PolyTraitRef<'tcx>,\n \n     /// The parent trait had this cause"}, {"sha": "435babf168e86d79abd53f6218469c67e5d7e4a6", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -20,7 +20,6 @@ use super::VtableImplData;\n use middle::infer;\n use middle::subst::Subst;\n use middle::ty::{mod, AsPredicate, ToPolyTraitRef, Ty};\n-use std::fmt;\n use util::ppaux::Repr;\n \n pub type PolyProjectionObligation<'tcx> =\n@@ -34,10 +33,17 @@ pub type ProjectionTyObligation<'tcx> =\n \n /// When attempting to resolve `<T as TraitRef>::Name == U`...\n pub enum ProjectionError<'tcx> {\n+    /// ...we could not find any helpful information on what `Name`\n+    /// might be. This could occur, for example, if there is a where\n+    /// clause `T : TraitRef` but not `T : TraitRef<Name=V>`. When\n+    /// normalizing, this case is where we opt to normalize back to\n+    /// the projection type `<T as TraitRef>::Name`.\n     NoCandidate,\n+\n+    /// ...we found multiple sources of information and couldn't resolve the ambiguity.\n     TooManyCandidates,\n \n-    ///\n+    /// ...`<T as TraitRef::Name>` ws resolved to some type `V` that failed to unify with `U`\n     MismatchedTypes(MismatchedProjectionTypes<'tcx>),\n \n     /// ...an error occurred matching `T : TraitRef`\n@@ -380,12 +386,6 @@ fn confirm_candidate<'cx,'tcx>(\n     Ok(projected_ty)\n }\n \n-impl<'tcx> Repr<'tcx> for super::MismatchedProjectionTypes<'tcx> {\n-    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        self.err.repr(tcx)\n-    }\n-}\n-\n impl<'tcx> Repr<'tcx> for ProjectionError<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         match *self {\n@@ -401,12 +401,6 @@ impl<'tcx> Repr<'tcx> for ProjectionError<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Show for super::MismatchedProjectionTypes<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"MismatchedProjectionTypes(..)\")\n-    }\n-}\n-\n impl<'tcx> Repr<'tcx> for ProjectionTyCandidate<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         match *self {"}, {"sha": "ce5337a58e10c102bab3fde612f46eb4659cb613", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -150,8 +150,15 @@ enum SelectionCandidate<'tcx> {\n }\n \n struct SelectionCandidateSet<'tcx> {\n+    // a list of candidates that definitely apply to the current\n+    // obligation (meaning: types unify).\n     vec: Vec<SelectionCandidate<'tcx>>,\n-    ambiguous: bool\n+\n+    // if this is true, then there were candidates that might or might\n+    // not have applied, but we couldn't tell. This occurs when some\n+    // of the input types are type variables, in which case there are\n+    // various \"builtin\" rules that might or might not trigger.\n+    ambiguous: bool,\n }\n \n enum BuiltinBoundConditions<'tcx> {"}, {"sha": "109810fc7eec3efacb5bea0a141b1087fafe8544", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -385,9 +385,16 @@ impl<'tcx> fmt::Show for super::FulfillmentErrorCode<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for ty::type_err<'tcx> {\n+impl<'tcx> Repr<'tcx> for super::MismatchedProjectionTypes<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        ty::type_err_to_str(tcx, self)\n+        self.err.repr(tcx)\n     }\n }\n \n+impl<'tcx> fmt::Show for super::MismatchedProjectionTypes<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"MismatchedProjectionTypes(..)\")\n+    }\n+}\n+\n+"}, {"sha": "ab39c761a3861ce644a2598acc31248a20bef5c6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -1791,7 +1791,8 @@ pub enum Predicate<'tcx> {\n     /// where T : 'a\n     TypeOutlives(PolyTypeOutlivesPredicate<'tcx>),\n \n-    ///\n+    /// where <T as TraitRef>::Name == X, approximately.\n+    /// See `ProjectionPredicate` struct for details.\n     Projection(PolyProjectionPredicate<'tcx>),\n }\n \n@@ -1857,9 +1858,14 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     }\n }\n \n+/// Represents the projection of an associated type. In explicit UFCS\n+/// form this would be written `<T as Trait<..>>::N`.\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ProjectionTy<'tcx> {\n+    /// The trait reference `T as Trait<..>`.\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+\n+    /// The name `N` of the associated type.\n     pub item_name: ast::Name,\n }\n \n@@ -2179,6 +2185,12 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n /// - `generics`: the set of type parameters and their bounds\n /// - `ty`: the base types, which may reference the parameters defined\n ///   in `generics`\n+///\n+/// Note that TypeSchemes are also sometimes called \"polytypes\" (and\n+/// in fact this struct used to carry that name, so you may find some\n+/// stray references in a comment or something). We try to reserve the\n+/// \"poly\" prefix to refer to higher-ranked things, as in\n+/// `PolyTraitRef`.\n #[deriving(Clone, Show)]\n pub struct TypeScheme<'tcx> {\n     pub generics: Generics<'tcx>,\n@@ -4680,6 +4692,12 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n     }\n }\n \n+impl<'tcx> Repr<'tcx> for ty::type_err<'tcx> {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        ty::type_err_to_str(tcx, self)\n+    }\n+}\n+\n /// Explains the source of a type err in a short, human readable way. This is meant to be placed\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related"}, {"sha": "587a85cfcbac4cd7e9d93960aad02260ce026397", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -244,7 +244,6 @@ pub fn opt_ast_region_to_region<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n fn ast_path_substs_for_ty<'tcx,AC,RS>(\n     this: &AC,\n     rscope: &RS,\n-    decl_def_id: ast::DefId,\n     decl_generics: &ty::Generics<'tcx>,\n     path: &ast::Path)\n     -> Substs<'tcx>\n@@ -280,7 +279,6 @@ fn ast_path_substs_for_ty<'tcx,AC,RS>(\n     create_substs_for_ast_path(this,\n                                rscope,\n                                path.span,\n-                               decl_def_id,\n                                decl_generics,\n                                None,\n                                types,\n@@ -291,7 +289,6 @@ fn create_substs_for_ast_path<'tcx,AC,RS>(\n     this: &AC,\n     rscope: &RS,\n     span: Span,\n-    _decl_def_id: ast::DefId,\n     decl_generics: &ty::Generics<'tcx>,\n     self_ty: Option<Ty<'tcx>>,\n     types: Vec<Ty<'tcx>>,\n@@ -621,7 +618,6 @@ fn ast_path_to_trait_ref<'a,'tcx,AC,RS>(\n     let substs = create_substs_for_ast_path(this,\n                                             &shifted_rscope,\n                                             path.span,\n-                                            trait_def_id,\n                                             &trait_def.generics,\n                                             self_ty,\n                                             types,\n@@ -705,7 +701,6 @@ pub fn ast_path_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n \n     let substs = ast_path_substs_for_ty(this,\n                                         rscope,\n-                                        did,\n                                         &generics,\n                                         path);\n     let ty = decl_ty.subst(tcx, &substs);\n@@ -747,7 +742,7 @@ pub fn ast_path_to_ty_relaxed<'tcx,AC,RS>(\n         Substs::new(VecPerParamSpace::params_from_type(type_params),\n                     VecPerParamSpace::params_from_type(region_params))\n     } else {\n-        ast_path_substs_for_ty(this, rscope, did, &generics, path)\n+        ast_path_substs_for_ty(this, rscope, &generics, path)\n     };\n \n     let ty = decl_ty.subst(tcx, &substs);"}, {"sha": "081959a4efa4a9f8e64255d4355bfd4a26887867", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -80,11 +80,9 @@ impl<'a,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'tcx> {\n                         self.span,\n                         self.body_id,\n                         ObligationCauseCode::MiscObligation);\n-                let trait_ref = data.trait_ref.clone();\n                 self.fulfillment_cx\n-                    .normalize_associated_type(self.infcx,\n-                                               trait_ref,\n-                                               data.item_name,\n+                    .normalize_projection_type(self.infcx,\n+                                               data.clone(),\n                                                cause)\n             }\n             _ => {"}, {"sha": "12ecfe6c2981c0b6075ecaa0fe2cea0019c59151", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -1758,9 +1758,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                  traits::ObligationCauseCode::MiscObligation);\n         self.inh.fulfillment_cx\n             .borrow_mut()\n-            .normalize_associated_type(self.infcx(),\n-                                       trait_ref,\n-                                       item_name,\n+            .normalize_projection_type(self.infcx(),\n+                                       ty::ProjectionTy {\n+                                           trait_ref: trait_ref,\n+                                           item_name: item_name,\n+                                       },\n                                        cause)\n     }\n "}, {"sha": "17b2a0751fe297665062595ad17cdfcbf7286aa5", "filename": "src/test/auxiliary/associated-types-cc-lib.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Helper for test issue-18048, which tests associated types in a\n+// cross-crate scenario.\n+\n #![crate_type=\"lib\"]\n #![feature(associated_types)]\n ", "previous_filename": "src/test/auxiliary/issue-18048-lib.rs"}, {"sha": "c0cf917aa41174dc8a07f44ea1013263c9a4f636", "filename": "src/test/run-pass/associated-types-cc.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-18048-lib.rs\n+// aux-build:associated-types-cc-lib.rs\n \n // Test that we are able to reference cross-crate traits that employ\n // associated types.\n \n #![feature(associated_types)]\n \n-extern crate \"issue-18048-lib\" as bar;\n+extern crate \"associated-types-cc-lib\" as bar;\n \n use bar::Bar;\n ", "previous_filename": "src/test/run-pass/issue-18048.rs"}, {"sha": "57724ba91b02f317e9a3e05ef067d7596f4143be", "filename": "src/test/run-pass/issue-19081.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19081.rs?ref=919975d0a5c90a25bf09a0a7c27fb7156d6aa2ad", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty -- currently pretty prints as `Hash<<Self as Hasher...` which fails to parse\n+// ignore-pretty -- FIXME(#17362) pretty prints as `Hash<<Self as Hasher...` which fails to parse\n \n #![feature(associated_types)]\n "}]}