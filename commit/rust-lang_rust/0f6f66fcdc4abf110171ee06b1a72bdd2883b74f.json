{"sha": "0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNmY2NmZjZGM0YWJmMTEwMTcxZWUwNmIxYTcyYmRkMjg4M2I3NGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-26T05:07:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-26T05:07:02Z"}, "message": "Auto merge of #66561 - TimoFreiberg:trait-name-report, r=estebank\n\nAdd version mismatch help message for unimplemented trait\n\nImproves issue #22750\n\nThe error reporting for E0277 (the trait `X` is not implemented for `Foo`)\nnow checks whether `Foo` implements a trait with the same path as `X`,\nwhich probably means that the programmer wanted to actually use only one\nversion of the trait `X` instead of the two.\n\nStill open:\n* the same diagnostic should be added for [the trait method case](https://github.com/rust-lang/rust/issues/22750#issuecomment-372077056)\n* Showing the real crate versions would be nice, but rustc currently doesn't have that information [according to Esteban](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/diagnostics.20for.20crate.20version.20mismatch/near/180572989)", "tree": {"sha": "e36f93d606f1cd8d914a723c68d9c8b6ab73e6b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e36f93d606f1cd8d914a723c68d9c8b6ab73e6b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "html_url": "https://github.com/rust-lang/rust/commit/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2626f3d3d5c3007745176aa0fe22781b9ec2bb06", "url": "https://api.github.com/repos/rust-lang/rust/commits/2626f3d3d5c3007745176aa0fe22781b9ec2bb06", "html_url": "https://github.com/rust-lang/rust/commit/2626f3d3d5c3007745176aa0fe22781b9ec2bb06"}, {"sha": "2a0292f9aa96e32ca44ec7dc599c668fd735dbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0292f9aa96e32ca44ec7dc599c668fd735dbe8", "html_url": "https://github.com/rust-lang/rust/commit/2a0292f9aa96e32ca44ec7dc599c668fd735dbe8"}], "stats": {"total": 183, "additions": 176, "deletions": 7}, "files": [{"sha": "f8efa0b9de204de2148a0c0e920450e4b70f75e4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "patch": "@@ -38,6 +38,7 @@ use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind, MultiSpan};\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n use rustc_error_codes::*;\n \n@@ -799,6 +800,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n+                        self.note_version_mismatch(&mut err, &trait_ref);\n \n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n@@ -1050,6 +1052,43 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n+    /// with the same path as `trait_ref`, a help message about\n+    /// a probable version mismatch is added to `err`\n+    fn note_version_mismatch(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+    ) {\n+        let get_trait_impl = |trait_def_id| {\n+            let mut trait_impl = None;\n+            self.tcx.for_each_relevant_impl(trait_def_id, trait_ref.self_ty(), |impl_def_id| {\n+                if trait_impl.is_none() {\n+                    trait_impl = Some(impl_def_id);\n+                }\n+            });\n+            trait_impl\n+        };\n+        let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n+        let all_traits = self.tcx.all_traits(LOCAL_CRATE);\n+        let traits_with_same_path: std::collections::BTreeSet<_> = all_traits\n+            .iter()\n+            .filter(|trait_def_id| **trait_def_id != trait_ref.def_id())\n+            .filter(|trait_def_id| self.tcx.def_path_str(**trait_def_id) == required_trait_path)\n+            .collect();\n+        for trait_with_same_path in traits_with_same_path {\n+            if let Some(impl_def_id) = get_trait_impl(*trait_with_same_path) {\n+                let impl_span = self.tcx.def_span(impl_def_id);\n+                err.span_help(impl_span, \"trait impl with same name found\");\n+                let trait_crate = self.tcx.crate_name(trait_with_same_path.krate);\n+                let crate_msg = format!(\n+                    \"Perhaps two different versions of crate `{}` are being used?\",\n+                    trait_crate\n+                );\n+                err.note(&crate_msg);\n+            }\n+        }\n+    }\n     fn suggest_restricting_param_bound(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "6aa010258ebd5c6b15a24f30f1caa7ad6aed5dcf", "filename": "src/test/ui/traits/auxiliary/crate_a1.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs?ref=0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "patch": "@@ -1,11 +1,9 @@\n-pub struct Foo;\n+pub trait Bar {}\n \n-pub trait Bar{}\n+pub fn try_foo(x: impl Bar) {}\n \n-pub fn bar() -> Box<Bar> {\n-    unimplemented!()\n+pub struct ImplementsTraitForUsize<T> {\n+    _marker: std::marker::PhantomData<T>,\n }\n \n-\n-pub fn try_foo(x: Foo){}\n-pub fn try_bar(x: Box<Bar>){}\n+impl Bar for ImplementsTraitForUsize<usize> {}"}, {"sha": "d6057db5e63f1644a544d4f8a023ea1270effb90", "filename": "src/test/ui/traits/auxiliary/crate_a2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs?ref=0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "patch": "@@ -0,0 +1,13 @@\n+pub struct Foo;\n+\n+pub trait Bar {}\n+\n+impl Bar for Foo {}\n+\n+pub struct DoesNotImplementTrait;\n+\n+pub struct ImplementsWrongTraitConditionally<T> {\n+    _marker: std::marker::PhantomData<T>,\n+}\n+\n+impl Bar for ImplementsWrongTraitConditionally<isize> {}"}, {"sha": "af720ecfdc063fe43291b8676c4d2726a187a4dd", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs?ref=0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "patch": "@@ -0,0 +1,55 @@\n+// aux-build:crate_a1.rs\n+// aux-build:crate_a2.rs\n+\n+// Issue 22750\n+// This tests the extra help message reported when a trait bound\n+// is not met but the struct implements a trait with the same path.\n+\n+fn main() {\n+    let foo = {\n+        extern crate crate_a2 as a;\n+        a::Foo\n+    };\n+\n+    let implements_no_traits = {\n+        extern crate crate_a2 as a;\n+        a::DoesNotImplementTrait\n+    };\n+\n+    let other_variant_implements_mismatched_trait = {\n+        extern crate crate_a2 as a;\n+        a::ImplementsWrongTraitConditionally { _marker: std::marker::PhantomData::<isize> }\n+    };\n+\n+    let other_variant_implements_correct_trait = {\n+        extern crate crate_a1 as a;\n+        a::ImplementsTraitForUsize { _marker: std::marker::PhantomData::<isize> }\n+    };\n+\n+    {\n+        extern crate crate_a1 as a;\n+        a::try_foo(foo);\n+        //~^ ERROR E0277\n+        //~| trait impl with same name found\n+        //~| Perhaps two different versions of crate `crate_a2`\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `implements_no_traits` has no impl for `Foo`\n+        a::try_foo(implements_no_traits);\n+        //~^ ERROR E0277\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `other_variant_implements_mismatched_trait`\n+        // does not have an impl for its `<isize>` variant,\n+        // only for its `<usize>` variant.\n+        a::try_foo(other_variant_implements_mismatched_trait);\n+        //~^ ERROR E0277\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `ImplementsTraitForUsize` only has\n+        // impls for the correct trait where the path is not misleading.\n+        a::try_foo(other_variant_implements_correct_trait);\n+        //~^ ERROR E0277\n+        //~| the following implementations were found:\n+    }\n+}"}, {"sha": "8fd0bd13e54b385743bf66ce00d02f0901e32ffc", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr?ref=0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "patch": "@@ -0,0 +1,64 @@\n+error[E0277]: the trait bound `main::a::Foo: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:31:20\n+   |\n+LL |         a::try_foo(foo);\n+   |                    ^^^ the trait `main::a::Bar` is not implemented for `main::a::Foo`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+help: trait impl with same name found\n+  --> $DIR/auxiliary/crate_a2.rs:5:1\n+   |\n+LL | impl Bar for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^\n+   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+\n+error[E0277]: the trait bound `main::a::DoesNotImplementTrait: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:38:20\n+   |\n+LL |         a::try_foo(implements_no_traits);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::DoesNotImplementTrait`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+\n+error[E0277]: the trait bound `main::a::ImplementsWrongTraitConditionally<isize>: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:45:20\n+   |\n+LL |         a::try_foo(other_variant_implements_mismatched_trait);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::ImplementsWrongTraitConditionally<isize>`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+help: trait impl with same name found\n+  --> $DIR/auxiliary/crate_a2.rs:13:1\n+   |\n+LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+\n+error[E0277]: the trait bound `main::a::ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:51:20\n+   |\n+LL |         a::try_foo(other_variant_implements_correct_trait);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::ImplementsTraitForUsize<isize>`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+   = help: the following implementations were found:\n+             <main::a::ImplementsTraitForUsize<usize> as main::a::Bar>\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}