{"sha": "d4686c60669591ea9ae6e4391fc7a6628ce8062a", "node_id": "C_kwDOAAsO6NoAKGQ0Njg2YzYwNjY5NTkxZWE5YWU2ZTQzOTFmYzdhNjYyOGNlODA2MmE", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-01-05T17:05:58Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-02-17T13:12:49Z"}, "message": "Use verbatim paths for `process::Command` if necessary", "tree": {"sha": "8ab067e705c53a1516a18b2e4d46b9e9bcdbd596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab067e705c53a1516a18b2e4d46b9e9bcdbd596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4686c60669591ea9ae6e4391fc7a6628ce8062a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmIOSdEACgkQcTRy8vRW\nJ95ysg/9GGCK/xMOQ88QdbWZu+eswLn0S8KPp+ttt0fpgBCEcpUE3YV+McHsuNiH\n6cHv9/iCmx3xVAXSr8h92VxvwVaUQJ0fhY/Iq7JYoSNBUsKYdZLCBQgx5Eh0lzvb\nGtQ7FDDzLv+QtD+TjvywXKGYNcTM5lnLqoJSpdb6/otdjGvv9ZkIOSGzpqwdNORc\nsSx5IBhlshm+fsX1n8QqXu9nDiig1ZPIT4uz6YCAZ4QiuhdOyWEXZh9P1xqlWzSQ\nqWQxRtAJmgYoY9ZPv8Szk6Z4JE/rrWeAb6P+VWRiYD6Itxz1L+gHT2AvTfX/L5RL\nCKyIpN6LF+8Ds8X3o3lECZzZNZWZH2UwTCPkARY2X2QNEN0fvQP31mSAnQLKMvsW\nVGRxAAYQpCFBYqI6zi7vsUPxFm7D+1TcG9HvKrJWMZbwkEWJRO4YWGqt2RoZ4GJ0\n9+leD3LQdxpmXn0r0f0pZEOfT0dtf/O03WeU4ubc4WyFBbdhQTY3jKeJfFV5TdXR\n33qyYxSyRmtymuzVSu9jp0kceEsarbQQYGFP5DBxMgAs8P6LSJc6U4Y1kHbCvzdd\nHn1JLyH4m29qFo5FQmqXdb2s7d9AlPkElH0jImLjkWJzZdaFtdrd0YxIl/+wf1R+\npNHGoIvSvFvloq+ILGLK3niGJEEKQWvt3RLv6mgCo3QX9KRPKtA=\n=AOG6\n-----END PGP SIGNATURE-----", "payload": "tree 8ab067e705c53a1516a18b2e4d46b9e9bcdbd596\nparent 582b6964a8868c9714881d9821d08415a8f4f13b\nauthor Chris Denton <christophersdenton@gmail.com> 1641402358 +0000\ncommitter Chris Denton <christophersdenton@gmail.com> 1645103569 +0000\n\nUse verbatim paths for `process::Command` if necessary\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4686c60669591ea9ae6e4391fc7a6628ce8062a", "html_url": "https://github.com/rust-lang/rust/commit/d4686c60669591ea9ae6e4391fc7a6628ce8062a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4686c60669591ea9ae6e4391fc7a6628ce8062a/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582b6964a8868c9714881d9821d08415a8f4f13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/582b6964a8868c9714881d9821d08415a8f4f13b", "html_url": "https://github.com/rust-lang/rust/commit/582b6964a8868c9714881d9821d08415a8f4f13b"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "e3fd04fe20f7cb3d280326417cfa39074fcaa11c", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4686c60669591ea9ae6e4391fc7a6628ce8062a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4686c60669591ea9ae6e4391fc7a6628ce8062a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=d4686c60669591ea9ae6e4391fc7a6628ce8062a", "patch": "@@ -19,12 +19,12 @@ use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::c::NonZeroDWORD;\n+use crate::sys::cvt;\n use crate::sys::fs::{File, OpenOptions};\n use crate::sys::handle::Handle;\n use crate::sys::path;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n-use crate::sys::{cvt, to_u16s};\n use crate::sys_common::mutex::StaticMutex;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n use crate::sys_common::{AsInner, IntoInner};\n@@ -269,8 +269,13 @@ impl Command {\n             None\n         };\n         let program = resolve_exe(&self.program, || env::var_os(\"PATH\"), child_paths)?;\n+        let is_batch_file = program\n+            .extension()\n+            .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n+            .unwrap_or(false);\n+        let program = path::maybe_verbatim(&program)?;\n         let mut cmd_str =\n-            make_command_line(program.as_os_str(), &self.args, self.force_quotes_enabled)?;\n+            make_command_line(&program, &self.args, self.force_quotes_enabled, is_batch_file)?;\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n@@ -309,7 +314,6 @@ impl Command {\n         si.hStdOutput = stdout.as_raw_handle();\n         si.hStdError = stderr.as_raw_handle();\n \n-        let program = to_u16s(&program)?;\n         unsafe {\n             cvt(c::CreateProcessW(\n                 program.as_ptr(),\n@@ -730,7 +734,12 @@ enum Quote {\n \n // Produces a wide string *without terminating null*; returns an error if\n // `prog` or any of the `args` contain a nul.\n-fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Result<Vec<u16>> {\n+fn make_command_line(\n+    prog: &[u16],\n+    args: &[Arg],\n+    force_quotes: bool,\n+    is_batch_file: bool,\n+) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n@@ -739,17 +748,18 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n     // need to add an extra pair of quotes surrounding the whole command line\n     // so they are properly passed on to the script.\n     // See issue #91991.\n-    let is_batch_file = Path::new(prog)\n-        .extension()\n-        .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n-        .unwrap_or(false);\n     if is_batch_file {\n         cmd.push(b'\"' as u16);\n     }\n \n-    // Always quote the program name so CreateProcess doesn't interpret args as\n-    // part of the name if the binary wasn't found first time.\n-    append_arg(&mut cmd, prog, Quote::Always)?;\n+    // Always quote the program name so CreateProcess to avoid ambiguity when\n+    // the child process parses its arguments.\n+    // Note that quotes aren't escaped here because they can't be used in arg0.\n+    // But that's ok because file paths can't contain quotes.\n+    cmd.push(b'\"' as u16);\n+    cmd.extend_from_slice(prog.strip_suffix(&[0]).unwrap_or(prog));\n+    cmd.push(b'\"' as u16);\n+\n     for arg in args {\n         cmd.push(' ' as u16);\n         let (arg, quote) = match arg {"}, {"sha": "a199bb8b5678a66b66c5e0bbe0ba5f70bad81789", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4686c60669591ea9ae6e4391fc7a6628ce8062a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4686c60669591ea9ae6e4391fc7a6628ce8062a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=d4686c60669591ea9ae6e4391fc7a6628ce8062a", "patch": "@@ -3,11 +3,12 @@ use super::Arg;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n use crate::process::Command;\n+use crate::sys::to_u16s;\n \n #[test]\n fn test_raw_args() {\n     let command_line = &make_command_line(\n-        OsStr::new(\"quoted exe\"),\n+        &to_u16s(\"quoted exe\").unwrap(),\n         &[\n             Arg::Regular(OsString::from(\"quote me\")),\n             Arg::Raw(OsString::from(\"quote me *not*\")),\n@@ -16,6 +17,7 @@ fn test_raw_args() {\n             Arg::Regular(OsString::from(\"optional-quotes\")),\n         ],\n         false,\n+        false,\n     )\n     .unwrap();\n     assert_eq!(\n@@ -28,9 +30,10 @@ fn test_raw_args() {\n fn test_make_command_line() {\n     fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {\n         let command_line = &make_command_line(\n-            OsStr::new(prog),\n+            &to_u16s(prog).unwrap(),\n             &args.iter().map(|a| Arg::Regular(OsString::from(a))).collect::<Vec<_>>(),\n             force_quotes,\n+            false,\n         )\n         .unwrap();\n         String::from_utf16(command_line).unwrap()"}]}