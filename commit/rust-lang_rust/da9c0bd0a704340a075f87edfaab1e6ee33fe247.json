{"sha": "da9c0bd0a704340a075f87edfaab1e6ee33fe247", "node_id": "C_kwDOAAsO6NoAKGRhOWMwYmQwYTcwNDM0MGEwNzVmODdlZGZhYWIxZTZlZTMzZmUyNDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T14:33:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T14:33:30Z"}, "message": "Auto merge of #14442 - DropDemBits:structured-snippet-api, r=Veykril\n\ninternal: Implement Structured API for snippets\n\nFixes #11638 (including moving the cursor before the generated type parameter)\n\nAdds `add_tabstop_{before,after}` for inserting tabstop snippets before & after nodes, and `add_placeholder_snippet` for wrapping nodes inside placeholder nodes.\n\nCurrently, the snippets are inserted into the syntax tree in `SourceChange::commit` so that snippet bits won't interfere with syntax lookups before completing a `SourceChange`.\n\nIt would be preferable if snippet rendering was deferred to after so that rendering can work directly with text ranges, but have left that for a future PR (it would also make it easier to finely specify which text edits have snippets in them).\n\nAnother possible snippet variation to support would be a group of placeholders (i.e. placeholders with the same tabstop number) so that a generated item and its uses can be renamed right as it's generated, which is something that is technically supported by the current snippet hack in VSCode, though it's not clear if that's a thing that is officially supported.", "tree": {"sha": "192e9e5348e0048cb029927aa5fab55efbe3d01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192e9e5348e0048cb029927aa5fab55efbe3d01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9c0bd0a704340a075f87edfaab1e6ee33fe247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9c0bd0a704340a075f87edfaab1e6ee33fe247", "html_url": "https://github.com/rust-lang/rust/commit/da9c0bd0a704340a075f87edfaab1e6ee33fe247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9c0bd0a704340a075f87edfaab1e6ee33fe247/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25124a84de3e586bc07588943fc53835e03763b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/25124a84de3e586bc07588943fc53835e03763b8", "html_url": "https://github.com/rust-lang/rust/commit/25124a84de3e586bc07588943fc53835e03763b8"}, {"sha": "369f4774ddf2511912f70584acbe523bb8b6b6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/369f4774ddf2511912f70584acbe523bb8b6b6f0", "html_url": "https://github.com/rust-lang/rust/commit/369f4774ddf2511912f70584acbe523bb8b6b6f0"}], "stats": {"total": 141, "additions": 128, "deletions": 13}, "files": [{"sha": "b0d35c02d67bac16be2505cc1711a852f25ca6f7", "filename": "crates/ide-assists/src/handlers/introduce_named_generic.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs?ref=da9c0bd0a704340a075f87edfaab1e6ee33fe247", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode},\n+    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, HasGenericParams},\n     ted,\n };\n \n@@ -14,7 +14,7 @@ use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n // ```\n // ->\n // ```\n-// fn foo<B: Bar>(bar: B) {}\n+// fn foo<$0B: Bar>(bar: B) {}\n // ```\n pub(crate) fn introduce_named_generic(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let impl_trait_type = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n@@ -39,7 +39,15 @@ pub(crate) fn introduce_named_generic(acc: &mut Assists, ctx: &AssistContext<'_>\n             let new_ty = make::ty(&type_param_name).clone_for_update();\n \n             ted::replace(impl_trait_type.syntax(), new_ty.syntax());\n-            fn_.get_or_create_generic_param_list().add_generic_param(type_param.into())\n+            fn_.get_or_create_generic_param_list().add_generic_param(type_param.into());\n+\n+            if let Some(cap) = ctx.config.snippet_cap {\n+                if let Some(generic_param) =\n+                    fn_.generic_param_list().and_then(|it| it.generic_params().last())\n+                {\n+                    edit.add_tabstop_before(cap, generic_param);\n+                }\n+            }\n         },\n     )\n }\n@@ -55,7 +63,7 @@ mod tests {\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo<G>(bar: $0impl Bar) {}\"#,\n-            r#\"fn foo<G, B: Bar>(bar: B) {}\"#,\n+            r#\"fn foo<G, $0B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -64,7 +72,7 @@ mod tests {\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo(bar: $0impl Bar) {}\"#,\n-            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n+            r#\"fn foo<$0B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -73,7 +81,7 @@ mod tests {\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\"#,\n-            r#\"fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\"#,\n+            r#\"fn foo<G, $0B: Bar>(foo: impl Foo, bar: B) {}\"#,\n         );\n     }\n \n@@ -82,7 +90,7 @@ mod tests {\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo<>(bar: $0impl Bar) {}\"#,\n-            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n+            r#\"fn foo<$0B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -95,7 +103,7 @@ fn foo<\n >(bar: $0impl Bar) {}\n \"#,\n             r#\"\n-fn foo<B: Bar\n+fn foo<$0B: Bar\n >(bar: B) {}\n \"#,\n         );\n@@ -108,7 +116,7 @@ fn foo<B: Bar\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo<B>(bar: $0impl Bar) {}\"#,\n-            r#\"fn foo<B, B: Bar>(bar: B) {}\"#,\n+            r#\"fn foo<B, $0B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -127,7 +135,7 @@ fn foo<\n fn foo<\n     G: Foo,\n     F,\n-    H, B: Bar,\n+    H, $0B: Bar,\n >(bar: B) {}\n \"#,\n         );\n@@ -138,7 +146,7 @@ fn foo<\n         check_assist(\n             introduce_named_generic,\n             r#\"fn foo(bar: $0impl Foo + Bar) {}\"#,\n-            r#\"fn foo<F: Foo + Bar>(bar: F) {}\"#,\n+            r#\"fn foo<$0F: Foo + Bar>(bar: F) {}\"#,\n         );\n     }\n }"}, {"sha": "e2c71d2565c4f232820baed26cc6de201ed4cb67", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=da9c0bd0a704340a075f87edfaab1e6ee33fe247", "patch": "@@ -1596,7 +1596,7 @@ fn doctest_introduce_named_generic() {\n fn foo(bar: $0impl Bar) {}\n \"#####,\n         r#####\"\n-fn foo<B: Bar>(bar: B) {}\n+fn foo<$0B: Bar>(bar: B) {}\n \"#####,\n     )\n }"}, {"sha": "04e62a8e9166e2746862012a6812d6a3c65f5076", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c0bd0a704340a075f87edfaab1e6ee33fe247/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=da9c0bd0a704340a075f87edfaab1e6ee33fe247", "patch": "@@ -7,7 +7,7 @@ use std::{collections::hash_map::Entry, iter, mem};\n \n use base_db::{AnchoredPathBuf, FileId};\n use stdx::{hash::NoHashHashMap, never};\n-use syntax::{algo, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n+use syntax::{algo, ast, ted, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n use text_edit::{TextEdit, TextEditBuilder};\n \n use crate::SnippetCap;\n@@ -99,13 +99,21 @@ pub struct SourceChangeBuilder {\n \n     /// Maps the original, immutable `SyntaxNode` to a `clone_for_update` twin.\n     pub mutated_tree: Option<TreeMutator>,\n+    /// Keeps track of where to place snippets\n+    pub snippet_builder: Option<SnippetBuilder>,\n }\n \n pub struct TreeMutator {\n     immutable: SyntaxNode,\n     mutable_clone: SyntaxNode,\n }\n \n+#[derive(Default)]\n+pub struct SnippetBuilder {\n+    /// Where to place snippets at\n+    places: Vec<PlaceSnippet>,\n+}\n+\n impl TreeMutator {\n     pub fn new(immutable: &SyntaxNode) -> TreeMutator {\n         let immutable = immutable.ancestors().last().unwrap();\n@@ -131,6 +139,7 @@ impl SourceChangeBuilder {\n             source_change: SourceChange::default(),\n             trigger_signature_help: false,\n             mutated_tree: None,\n+            snippet_builder: None,\n         }\n     }\n \n@@ -140,6 +149,17 @@ impl SourceChangeBuilder {\n     }\n \n     fn commit(&mut self) {\n+        // Render snippets first so that they get bundled into the tree diff\n+        if let Some(mut snippets) = self.snippet_builder.take() {\n+            // Last snippet always has stop index 0\n+            let last_stop = snippets.places.pop().unwrap();\n+            last_stop.place(0);\n+\n+            for (index, stop) in snippets.places.into_iter().enumerate() {\n+                stop.place(index + 1)\n+            }\n+        }\n+\n         if let Some(tm) = self.mutated_tree.take() {\n             algo::diff(&tm.immutable, &tm.mutable_clone).into_text_edit(&mut self.edit)\n         }\n@@ -214,6 +234,30 @@ impl SourceChangeBuilder {\n         self.trigger_signature_help = true;\n     }\n \n+    /// Adds a tabstop snippet to place the cursor before `node`\n+    pub fn add_tabstop_before(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+        self.add_snippet(PlaceSnippet::Before(node.syntax().clone()));\n+    }\n+\n+    /// Adds a tabstop snippet to place the cursor after `node`\n+    pub fn add_tabstop_after(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+        self.add_snippet(PlaceSnippet::After(node.syntax().clone()));\n+    }\n+\n+    /// Adds a snippet to move the cursor selected over `node`\n+    pub fn add_placeholder_snippet(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+        self.add_snippet(PlaceSnippet::Over(node.syntax().clone()))\n+    }\n+\n+    fn add_snippet(&mut self, snippet: PlaceSnippet) {\n+        let snippet_builder = self.snippet_builder.get_or_insert(SnippetBuilder { places: vec![] });\n+        snippet_builder.places.push(snippet);\n+        self.source_change.is_snippet = true;\n+    }\n+\n     pub fn finish(mut self) -> SourceChange {\n         self.commit();\n         mem::take(&mut self.source_change)\n@@ -236,3 +280,66 @@ impl From<FileSystemEdit> for SourceChange {\n         }\n     }\n }\n+\n+enum PlaceSnippet {\n+    /// Place a tabstop before a node\n+    Before(SyntaxNode),\n+    /// Place a tabstop before a node\n+    After(SyntaxNode),\n+    /// Place a placeholder snippet in place of the node\n+    Over(SyntaxNode),\n+}\n+\n+impl PlaceSnippet {\n+    /// Places the snippet before or over a node with the given tab stop index\n+    fn place(self, order: usize) {\n+        // ensure the target node is still attached\n+        match &self {\n+            PlaceSnippet::Before(node) | PlaceSnippet::After(node) | PlaceSnippet::Over(node) => {\n+                // node should still be in the tree, but if it isn't\n+                // then it's okay to just ignore this place\n+                if stdx::never!(node.parent().is_none()) {\n+                    return;\n+                }\n+            }\n+        }\n+\n+        match self {\n+            PlaceSnippet::Before(node) => {\n+                ted::insert_raw(ted::Position::before(&node), Self::make_tab_stop(order));\n+            }\n+            PlaceSnippet::After(node) => {\n+                ted::insert_raw(ted::Position::after(&node), Self::make_tab_stop(order));\n+            }\n+            PlaceSnippet::Over(node) => {\n+                let position = ted::Position::before(&node);\n+                node.detach();\n+\n+                let snippet = ast::SourceFile::parse(&format!(\"${{{order}:_}}\"))\n+                    .syntax_node()\n+                    .clone_for_update();\n+\n+                let placeholder =\n+                    snippet.descendants().find_map(ast::UnderscoreExpr::cast).unwrap();\n+                ted::replace(placeholder.syntax(), node);\n+\n+                ted::insert_raw(position, snippet);\n+            }\n+        }\n+    }\n+\n+    fn make_tab_stop(order: usize) -> SyntaxNode {\n+        let stop = ast::SourceFile::parse(&format!(\"stop!(${order})\"))\n+            .syntax_node()\n+            .descendants()\n+            .find_map(ast::TokenTree::cast)\n+            .unwrap()\n+            .syntax()\n+            .clone_for_update();\n+\n+        stop.first_token().unwrap().detach();\n+        stop.last_token().unwrap().detach();\n+\n+        stop\n+    }\n+}"}]}