{"sha": "c3a998e82a50b66e8f6f97170cd9117fadf03618", "node_id": "C_kwDOAAsO6NoAKGMzYTk5OGU4MmE1MGI2NmU4ZjZmOTcxNzBjZDkxMTdmYWRmMDM2MTg", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T17:20:05Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T17:20:05Z"}, "message": "Do not suggest `let_else` if no bindings would be introduced", "tree": {"sha": "04ee408aeb8adb5eaad60d378f45b5eb38d102be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ee408aeb8adb5eaad60d378f45b5eb38d102be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a998e82a50b66e8f6f97170cd9117fadf03618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a998e82a50b66e8f6f97170cd9117fadf03618", "html_url": "https://github.com/rust-lang/rust/commit/c3a998e82a50b66e8f6f97170cd9117fadf03618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a998e82a50b66e8f6f97170cd9117fadf03618/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d92752b8aac53e033541d04fc7d9677d8bca227", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d92752b8aac53e033541d04fc7d9677d8bca227", "html_url": "https://github.com/rust-lang/rust/commit/0d92752b8aac53e033541d04fc7d9677d8bca227"}], "stats": {"total": 46, "additions": 1, "deletions": 45}, "files": [{"sha": "c94da838680e075cc4c2c049fe6bf3886b229ce4", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -330,7 +330,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                     ],\n                     Applicability::HasPlaceholders,\n                 );\n-                if cx.tcx.sess.is_nightly_build() {\n+                if !bindings.is_empty() && cx.tcx.sess.is_nightly_build() {\n                     err.span_suggestion_verbose(\n                         semi_span.shrink_to_lo(),\n                         &format!("}, {"sha": "6e61dbbd8eee3906a3bb8b50131dff54d2f410b2", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -11,10 +11,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     A = { if let 0 = 0 { todo!() } 0 },\n    |           ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     A = { let 0 = 0 else { todo!() }; 0 },\n-   |                     ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1b3b6e06c3df611e98de7a42ec2d342ac19fb1b6", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -11,10 +11,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     let x: [i32; { if let 0 = 0 { todo!() } 0 }] = [];\n    |                    ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let x: [i32; { let 0 = 0 else { todo!() }; 0 }] = [];\n-   |                              ++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "bc8edfa7af9f488dacfabc9dffe769609f0ce517", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -11,10 +11,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                  ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL | const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n-   |                            ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:8:23\n@@ -29,10 +25,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | static Y: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                   ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL | static Y: i32 = { let 0 = 0 else { todo!() }; 0 };\n-   |                             ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:13:26\n@@ -47,10 +39,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n-   |                                ++++++++++++++++\n \n error[E0005]: refutable pattern in local binding: `i32::MIN..=-1_i32` and `1_i32..=i32::MAX` not covered\n   --> $DIR/const-match-check.rs:19:26\n@@ -65,10 +53,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     const X: i32 = { let 0 = 0 else { todo!() }; 0 };\n-   |                                ++++++++++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "95b22ac059482fa52a97051b5ca6050321410f74", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -11,10 +11,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     if let (0 | (1 | 2)) = 0 { todo!() }\n    |     ++                       ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let (0 | (1 | 2)) = 0 else { todo!() };\n-   |                           ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n   --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:3:11"}, {"sha": "0f06c31c468b148035cb1d88313079cd27b00bba", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -46,10 +46,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let E::A = e else { todo!() };\n-   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `&B` and `&C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:11\n@@ -99,10 +95,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let E::A = e else { todo!() };\n-   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `&&mut &B` and `&&mut &C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:66:11\n@@ -152,10 +144,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let E::A = e else { todo!() };\n-   |                  ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:92:11"}, {"sha": "d1dacc822e942e49856d95c4bad4d01e48c3a99e", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a998e82a50b66e8f6f97170cd9117fadf03618/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr?ref=c3a998e82a50b66e8f6f97170cd9117fadf03618", "patch": "@@ -19,10 +19,6 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     if let (1, (Some(1), 2..=3)) = (1, (None, 2)) { todo!() }\n    |     ++                                            ~~~~~~~~~~~\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n-   |\n-LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2)) else { todo!() };\n-   |                                                ++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}]}