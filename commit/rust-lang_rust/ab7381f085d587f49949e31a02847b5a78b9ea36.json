{"sha": "ab7381f085d587f49949e31a02847b5a78b9ea36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzM4MWYwODVkNTg3ZjQ5OTQ5ZTMxYTAyODQ3YjVhNzhiOWVhMzY=", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-02-18T17:25:35Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-02-23T23:50:30Z"}, "message": "Move `declare_clippy_lint` back into clippy_lints", "tree": {"sha": "50bc1da1361279a423f14fd4ee2ff79d6638874a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50bc1da1361279a423f14fd4ee2ff79d6638874a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7381f085d587f49949e31a02847b5a78b9ea36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7381f085d587f49949e31a02847b5a78b9ea36", "html_url": "https://github.com/rust-lang/rust/commit/ab7381f085d587f49949e31a02847b5a78b9ea36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7381f085d587f49949e31a02847b5a78b9ea36/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7869b82a282c93a84794686b4e8ba1c4d15bfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7869b82a282c93a84794686b4e8ba1c4d15bfe2", "html_url": "https://github.com/rust-lang/rust/commit/c7869b82a282c93a84794686b4e8ba1c4d15bfe2"}], "stats": {"total": 236, "additions": 112, "deletions": 124}, "files": [{"sha": "01d1fc9211a94fc2576f26786df87e64485824df", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -186,17 +186,11 @@ fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint>\n     let path_buf = path.with_file_name(filename);\n     let mut rel_path = path_buf\n         .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n-        .map(PathBuf::from)\n-        .or_else(|_| {\n-            path_buf\n-                .strip_prefix(clippy_project_root().join(\"clippy_utils/src\"))\n-                .map(|c| Path::new(\"utils\").join(c))\n-        })\n-        .expect(\"only files in `clippy_lints/src` or `clippy_utils/src` should be looked at\");\n+        .expect(\"only files in `clippy_lints/src` should be looked at\");\n     // If the lints are stored in mod.rs, we get the module name from\n     // the containing directory:\n     if filename == \"mod\" {\n-        rel_path = rel_path.parent().unwrap().to_path_buf();\n+        rel_path = rel_path.parent().unwrap();\n     }\n \n     let module = rel_path\n@@ -219,15 +213,13 @@ fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n     lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n }\n \n-/// Collects all .rs files in the `clippy_lints/src` and `clippy_utils/src` directories\n+/// Collects all .rs files in the `clippy_lints/src` directory\n fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n     // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n-    let clippy_lints_path = clippy_project_root().join(\"clippy_lints/src\");\n-    let clippy_utils_path = clippy_project_root().join(\"clippy_utils/src\");\n-    WalkDir::new(clippy_lints_path)\n+    let path = clippy_project_root().join(\"clippy_lints/src\");\n+    WalkDir::new(path)\n         .into_iter()\n-        .chain(WalkDir::new(clippy_utils_path).into_iter())\n         .filter_map(Result::ok)\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }"}, {"sha": "c8502e9cc74e7caa309bce96c7f487ed24650bf6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -46,9 +46,103 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n use rustc_session::Session;\n \n+/// Macro used to declare a Clippy lint.\n+///\n+/// Every lint declaration consists of 4 parts:\n+///\n+/// 1. The documentation, which is used for the website\n+/// 2. The `LINT_NAME`. See [lint naming][lint_naming] on lint naming conventions.\n+/// 3. The `lint_level`, which is a mapping from *one* of our lint groups to `Allow`, `Warn` or\n+///    `Deny`. The lint level here has nothing to do with what lint groups the lint is a part of.\n+/// 4. The `description` that contains a short explanation on what's wrong with code where the\n+///    lint is triggered.\n+///\n+/// Currently the categories `style`, `correctness`, `complexity` and `perf` are enabled by default.\n+/// As said in the README.md of this repository, if the lint level mapping changes, please update\n+/// README.md.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(rustc_private)]\n+/// extern crate rustc_session;\n+/// use rustc_session::declare_tool_lint;\n+/// use clippy_lints::declare_clippy_lint;\n+///\n+/// declare_clippy_lint! {\n+///     /// **What it does:** Checks for ... (describe what the lint matches).\n+///     ///\n+///     /// **Why is this bad?** Supply the reason for linting the code.\n+///     ///\n+///     /// **Known problems:** None. (Or describe where it could go wrong.)\n+///     ///\n+///     /// **Example:**\n+///     ///\n+///     /// ```rust\n+///     /// // Bad\n+///     /// Insert a short example of code that triggers the lint\n+///     ///\n+///     /// // Good\n+///     /// Insert a short example of improved code that doesn't trigger the lint\n+///     /// ```\n+///     pub LINT_NAME,\n+///     pedantic,\n+///     \"description\"\n+/// }\n+/// ```\n+/// [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n #[macro_export]\n macro_rules! declare_clippy_lint {\n-    ( $($x:tt)* ) => { clippy_utils::declare_clippy_lint!($($x)*); }\n+    { $(#[$attr:meta])* pub $name:tt, style, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, correctness, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Deny, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, complexity, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, perf, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, pedantic, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, restriction, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, cargo, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, nursery, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, internal, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n+        }\n+    };\n+    { $(#[$attr:meta])* pub $name:tt, internal_warn, $description:tt } => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n+        }\n+    };\n }\n \n #[macro_export]"}, {"sha": "bf54e39769cb0724e86e9549c081ee9f0165ddb0", "filename": "clippy_lints/src/utils.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7869b82a282c93a84794686b4e8ba1c4d15bfe2/clippy_lints%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7869b82a282c93a84794686b4e8ba1c4d15bfe2/clippy_lints%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils.rs?ref=c7869b82a282c93a84794686b4e8ba1c4d15bfe2", "patch": "@@ -1 +0,0 @@\n-pub use clippy_utils::*;"}, {"sha": "ca60d335262b3bda975431d92c0f7ecc987dde10", "filename": "clippy_lints/src/utils/author.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::{declare_clippy_lint, get_attr};\n+use crate::utils::get_attr;\n use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;", "previous_filename": "clippy_utils/src/author.rs"}, {"sha": "9bec24be9e4ebc7e89da87cd09837b517733c0ce", "filename": "clippy_lints/src/utils/inspector.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -1,6 +1,6 @@\n //! checks for attributes\n \n-use crate::{declare_clippy_lint, get_attr};\n+use crate::utils::get_attr;\n use rustc_ast::ast::{Attribute, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};", "previous_filename": "clippy_utils/src/inspector.rs"}, {"sha": "d8c602fab22c2d095f94adeba358fe7c903e5bbc", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::{\n-    declare_clippy_lint, is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths,\n-    run_lints, snippet, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+use crate::utils::{\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, run_lints, snippet,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};", "previous_filename": "clippy_utils/src/internal_lints.rs"}, {"sha": "68ab8161e20e6b61d161a475b6a513c43f51920c", "filename": "clippy_lints/src/utils/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -0,0 +1,6 @@\n+pub mod author;\n+pub mod inspector;\n+#[cfg(feature = \"internal-lints\")]\n+pub mod internal_lints;\n+\n+pub use clippy_utils::*;"}, {"sha": "5e0f0f084cbeb64915a55f0d68f6f269557557e4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -30,7 +30,6 @@ pub mod sym_helper;\n #[allow(clippy::module_name_repetitions)]\n pub mod ast_utils;\n pub mod attrs;\n-pub mod author;\n pub mod camel_case;\n pub mod comparisons;\n pub mod conf;\n@@ -39,9 +38,6 @@ mod diagnostics;\n pub mod eager_or_lazy;\n pub mod higher;\n mod hir_utils;\n-pub mod inspector;\n-#[cfg(feature = \"internal-lints\")]\n-pub mod internal_lints;\n pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;\n@@ -90,105 +86,6 @@ use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n-/// Macro used to declare a Clippy lint.\n-///\n-/// Every lint declaration consists of 4 parts:\n-///\n-/// 1. The documentation, which is used for the website\n-/// 2. The `LINT_NAME`. See [lint naming][lint_naming] on lint naming conventions.\n-/// 3. The `lint_level`, which is a mapping from *one* of our lint groups to `Allow`, `Warn` or\n-///    `Deny`. The lint level here has nothing to do with what lint groups the lint is a part of.\n-/// 4. The `description` that contains a short explanation on what's wrong with code where the\n-///    lint is triggered.\n-///\n-/// Currently the categories `style`, `correctness`, `complexity` and `perf` are enabled by default.\n-/// As said in the README.md of this repository, if the lint level mapping changes, please update\n-/// README.md.\n-///\n-/// # Example\n-///\n-/// ```\n-/// #![feature(rustc_private)]\n-/// extern crate rustc_session;\n-/// use rustc_session::declare_tool_lint;\n-/// use clippy_utils::declare_clippy_lint;\n-///\n-/// declare_clippy_lint! {\n-///     /// **What it does:** Checks for ... (describe what the lint matches).\n-///     ///\n-///     /// **Why is this bad?** Supply the reason for linting the code.\n-///     ///\n-///     /// **Known problems:** None. (Or describe where it could go wrong.)\n-///     ///\n-///     /// **Example:**\n-///     ///\n-///     /// ```rust\n-///     /// // Bad\n-///     /// Insert a short example of code that triggers the lint\n-///     ///\n-///     /// // Good\n-///     /// Insert a short example of improved code that doesn't trigger the lint\n-///     /// ```\n-///     pub LINT_NAME,\n-///     pedantic,\n-///     \"description\"\n-/// }\n-/// ```\n-/// [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n-#[macro_export]\n-macro_rules! declare_clippy_lint {\n-    { $(#[$attr:meta])* pub $name:tt, style, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, correctness, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Deny, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, complexity, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, perf, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, pedantic, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, restriction, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, cargo, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, nursery, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, internal, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n-        }\n-    };\n-    { $(#[$attr:meta])* pub $name:tt, internal_warn, $description:tt } => {\n-        declare_tool_lint! {\n-            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n-        }\n-    };\n-}\n-\n pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n     if let Ok(version) = RustcVersion::parse(msrv) {\n         return Some(version);"}, {"sha": "a1b8e2ee162cf67eb3722946e1884415b768149c", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7381f085d587f49949e31a02847b5a78b9ea36/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7381f085d587f49949e31a02847b5a78b9ea36/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=ab7381f085d587f49949e31a02847b5a78b9ea36", "patch": "@@ -1,4 +1,4 @@\n-thread 'rustc' panicked at 'Would you like some help with that?', clippy_utils/src/internal_lints.rs\n+thread 'rustc' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints.rs\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}]}