{"sha": "848a6215914e7396172e7a3895bbdbbd6a6e3247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OGE2MjE1OTE0ZTczOTYxNzJlN2EzODk1YmJkYmJkNmE2ZTMyNDc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-07-12T18:32:23Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-07-12T18:32:23Z"}, "message": "Use the write function in some more places", "tree": {"sha": "d8d3bdbb1fbf4cbecf494a4cebf5bf86d2225bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d3bdbb1fbf4cbecf494a4cebf5bf86d2225bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848a6215914e7396172e7a3895bbdbbd6a6e3247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848a6215914e7396172e7a3895bbdbbd6a6e3247", "html_url": "https://github.com/rust-lang/rust/commit/848a6215914e7396172e7a3895bbdbbd6a6e3247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848a6215914e7396172e7a3895bbdbbd6a6e3247/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e328be73d44c1d027de1abc1aab6819fda78c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e328be73d44c1d027de1abc1aab6819fda78c54", "html_url": "https://github.com/rust-lang/rust/commit/8e328be73d44c1d027de1abc1aab6819fda78c54"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b58d3ed4ae5cdbabd319cdadcc4559684d67a9b8", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/848a6215914e7396172e7a3895bbdbbd6a6e3247/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848a6215914e7396172e7a3895bbdbbd6a6e3247/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=848a6215914e7396172e7a3895bbdbbd6a6e3247", "patch": "@@ -79,7 +79,7 @@ use crate::ptr;\n /// // a `MaybeUninit<T>` may be invalid, and hence this is not UB:\n /// let mut x = MaybeUninit::<&i32>::uninit();\n /// // Set it to a valid value.\n-/// unsafe { x.as_mut_ptr().write(&0); }\n+/// x.write(&0);\n /// // Extract the initialized data -- this is only allowed *after* properly\n /// // initializing `x`!\n /// let x = unsafe { x.assume_init() };\n@@ -135,7 +135,7 @@ use crate::ptr;\n ///     // this loop, we have a memory leak, but there is no memory safety\n ///     // issue.\n ///     for elem in &mut data[..] {\n-///         *elem = MaybeUninit::new(vec![42]);\n+///         elem.write(vec![42]);\n ///     }\n ///\n ///     // Everything is initialized. Transmute the array to the\n@@ -161,7 +161,7 @@ use crate::ptr;\n /// let mut data_len: usize = 0;\n ///\n /// for elem in &mut data[0..500] {\n-///     *elem = MaybeUninit::new(String::from(\"hello\"));\n+///     elem.write(String::from(\"hello\"));\n ///     data_len += 1;\n /// }\n ///\n@@ -543,7 +543,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n-    /// unsafe { x.as_mut_ptr().write(vec![0, 1, 2]); }\n+    /// x.write(vec![0, 1, 2]);\n     /// // Create a reference into the `MaybeUninit<Vec<u32>>`.\n     /// // This is okay because we initialized it.\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n@@ -602,7 +602,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<bool>::uninit();\n-    /// unsafe { x.as_mut_ptr().write(true); }\n+    /// x.write(true);\n     /// let x_init = unsafe { x.assume_init() };\n     /// assert_eq!(x_init, true);\n     /// ```\n@@ -751,7 +751,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// // Initialize `x`:\n-    /// unsafe { x.as_mut_ptr().write(vec![1, 2, 3]); }\n+    /// x.write(vec![1, 2, 3]);\n     /// // Now that our `MaybeUninit<_>` is known to be initialized, it is okay to\n     /// // create a shared reference to it:\n     /// let x: &Vec<u32> = unsafe {"}]}