{"sha": "191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "node_id": "C_kwDOAAsO6NoAKDE5MWM5ODM5ZjBiYWQxYzJiZmVjMTdkNTViYWNiOTRkMmU4M2YxYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T17:17:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T17:17:32Z"}, "message": "Auto merge of #9690 - royrustdev:boxed_void, r=flip1995\n\nadd `from_raw_with_void_ptr` lint\n\nThis PR `fixes #9679`\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`\n\n---\n\nchangelog:  [`from_raw_with_void_ptr`]: added new lint", "tree": {"sha": "ccb6b90b4b4bf7ffb156856745706b5c53e0bbc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb6b90b4b4bf7ffb156856745706b5c53e0bbc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "html_url": "https://github.com/rust-lang/rust/commit/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "628a79d6b67cc2acd2019f6c3c8e5adbc4384c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/628a79d6b67cc2acd2019f6c3c8e5adbc4384c9c", "html_url": "https://github.com/rust-lang/rust/commit/628a79d6b67cc2acd2019f6c3c8e5adbc4384c9c"}, {"sha": "b083a39190721829a72779021011da8483dc0df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b083a39190721829a72779021011da8483dc0df8", "html_url": "https://github.com/rust-lang/rust/commit/b083a39190721829a72779021011da8483dc0df8"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "cb5a4d4a5778b747afafcb9cfe5a518624800a0e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -3903,6 +3903,7 @@ Released 2018-09-13\n [`format_push_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n+[`from_raw_with_void_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_raw_with_void_ptr\n [`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_first`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_first"}, {"sha": "63c3c5f601df3c0d8f1c8021e1189059b4bce8ea", "filename": "clippy_lints/src/from_raw_with_void_ptr.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -0,0 +1,57 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::path_def_id;\n+use clippy_utils::ty::is_c_void;\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::RawPtr;\n+use rustc_middle::ty::TypeAndMut;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks if we're passing a `c_void` raw pointer to `Box::from_raw(_)`\n+    ///\n+    /// ### Why is this bad?\n+    /// However, it is easy to run into the pitfall of calling from_raw with the c_void pointer.\n+    /// Note that the definition of, say, Box::from_raw is:\n+    ///\n+    /// `pub unsafe fn from_raw(raw: *mut T) -> Box<T>`\n+    ///\n+    /// meaning that if you pass a *mut c_void you will get a Box<c_void>.\n+    /// Per the safety requirements in the documentation, for this to be safe,\n+    /// c_void would need to have the same memory layout as the original type, which is often not the case.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::ffi::c_void;\n+    /// let ptr = Box::into_raw(Box::new(42usize)) as *mut c_void;\n+    /// let _ = unsafe { Box::from_raw(ptr) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::ffi::c_void;\n+    /// # let ptr = Box::into_raw(Box::new(42usize)) as *mut c_void;\n+    /// let _ = unsafe { Box::from_raw(ptr as *mut usize) };\n+    /// ```\n+    ///\n+    #[clippy::version = \"1.66.0\"]\n+    pub FROM_RAW_WITH_VOID_PTR,\n+    suspicious,\n+    \"creating a `Box` from a raw void pointer\"\n+}\n+declare_lint_pass!(FromRawWithVoidPtr => [FROM_RAW_WITH_VOID_PTR]);\n+\n+impl LateLintPass<'_> for FromRawWithVoidPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Call(box_from_raw, [arg]) = expr.kind\n+        && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = box_from_raw.kind\n+        && seg.ident.name == sym!(from_raw)\n+        // FIXME: This lint is also applicable to other types, like `Rc`, `Arc` and `Weak`.\n+        && path_def_id(cx, ty).map_or(false, |id| Some(id) == cx.tcx.lang_items().owned_box())\n+        && let arg_kind = cx.typeck_results().expr_ty(arg).kind()\n+        && let RawPtr(TypeAndMut { ty, .. }) = arg_kind\n+        && is_c_void(cx, *ty) {\n+            span_lint_and_help(cx, FROM_RAW_WITH_VOID_PTR, expr.span, \"creating a `Box` from a raw void pointer\", Some(arg.span), \"cast this to a pointer of the actual type\");\n+        }\n+    }\n+}"}, {"sha": "34fded26cfcfcff469c05672df638cf3224a3009", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -81,6 +81,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n     LintId::of(from_over_into::FROM_OVER_INTO),\n+    LintId::of(from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR),\n     LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),"}, {"sha": "6eaf17709a88836fac87ccfaab3b2e838c45cc5d", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -173,6 +173,7 @@ store.register_lints(&[\n     formatting::SUSPICIOUS_ELSE_FORMATTING,\n     formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n     from_over_into::FROM_OVER_INTO,\n+    from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR,\n     from_str_radix_10::FROM_STR_RADIX_10,\n     functions::DOUBLE_MUST_USE,\n     functions::MUST_USE_CANDIDATE,"}, {"sha": "61af098c59a04b76c40762679a64c30346d07b80", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -21,6 +21,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+    LintId::of(from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR),\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::NO_EFFECT_REPLACE),"}, {"sha": "28248d01b6436fe72aa72611cc23ec9cb73f3612", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -230,6 +230,7 @@ mod format_impl;\n mod format_push_string;\n mod formatting;\n mod from_over_into;\n+mod from_raw_with_void_ptr;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n@@ -918,6 +919,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(implicit_saturating_add::ImplicitSaturatingAdd));\n     store.register_early_pass(|| Box::new(partial_pub_fields::PartialPubFields));\n     store.register_late_pass(|_| Box::new(missing_trait_methods::MissingTraitMethods));\n+    store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "d9c34a6c04981d1026dc6e98371868f02aa50272", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -179,6 +179,7 @@ docs! {\n     \"format_push_string\",\n     \"from_iter_instead_of_collect\",\n     \"from_over_into\",\n+    \"from_raw_with_void_ptr\",\n     \"from_str_radix_10\",\n     \"future_not_send\",\n     \"get_first\","}, {"sha": "755fff23955d668ed4b80cd66a339ee24bd3d139", "filename": "src/docs/from_raw_with_void_ptr.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs%2Ffrom_raw_with_void_ptr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/src%2Fdocs%2Ffrom_raw_with_void_ptr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Ffrom_raw_with_void_ptr.txt?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -0,0 +1,22 @@\n+### What it does\n+Checks if we're passing a `c_void` raw pointer to `Box::from_raw(_)`\n+\n+### Why is this bad?\n+However, it is easy to run into the pitfall of calling from_raw with the c_void pointer.\n+Note that the definition of, say, Box::from_raw is:\n+\n+`pub unsafe fn from_raw(raw: *mut T) -> Box<T>`\n+\n+meaning that if you pass a *mut c_void you will get a Box<c_void>.\n+Per the safety requirements in the documentation, for this to be safe,\n+c_void would need to have the same memory layout as the original type, which is often not the case.\n+\n+### Example\n+```\n+let ptr = Box::into_raw(Box::new(42usize)) as *mut c_void;\n+let _ = unsafe { Box::from_raw(ptr) };\n+```\n+Use instead:\n+```\n+let _ = unsafe { Box::from_raw(ptr as *mut usize) };\n+```"}, {"sha": "de5a8d60092b64c1b8c79758bebf59d67babb1ea", "filename": "tests/ui/from_raw_with_void_ptr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/tests%2Fui%2Ffrom_raw_with_void_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/tests%2Fui%2Ffrom_raw_with_void_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_raw_with_void_ptr.rs?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::from_raw_with_void_ptr)]\n+\n+use std::ffi::c_void;\n+\n+fn main() {\n+    // must lint\n+    let ptr = Box::into_raw(Box::new(42usize)) as *mut c_void;\n+    let _ = unsafe { Box::from_raw(ptr) };\n+\n+    // shouldn't be linted\n+    let _ = unsafe { Box::from_raw(ptr as *mut usize) };\n+\n+    // shouldn't be linted\n+    let should_not_lint_ptr = Box::into_raw(Box::new(12u8)) as *mut u8;\n+    let _ = unsafe { Box::from_raw(should_not_lint_ptr as *mut u8) };\n+}"}, {"sha": "9e8e3e445465eeedf5aeab1dc5f054d63f48db7c", "filename": "tests/ui/from_raw_with_void_ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191c9839f0bad1c2bfec17d55bacb94d2e83f1a1/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr?ref=191c9839f0bad1c2bfec17d55bacb94d2e83f1a1", "patch": "@@ -0,0 +1,15 @@\n+error: creating a `Box` from a raw void pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:8:22\n+   |\n+LL |     let _ = unsafe { Box::from_raw(ptr) };\n+   |                      ^^^^^^^^^^^^^^^^^^\n+   |\n+help: cast this to a pointer of the actual type\n+  --> $DIR/from_raw_with_void_ptr.rs:8:36\n+   |\n+LL |     let _ = unsafe { Box::from_raw(ptr) };\n+   |                                    ^^^\n+   = note: `-D clippy::from-raw-with-void-ptr` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}