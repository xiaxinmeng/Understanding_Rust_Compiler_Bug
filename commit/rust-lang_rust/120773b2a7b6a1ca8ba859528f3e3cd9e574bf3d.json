{"sha": "120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDc3M2IyYTdiNmExY2E4YmE4NTk1MjhmM2UzY2Q5ZTU3NGJmM2Q=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-10T00:23:13Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-11T18:42:49Z"}, "message": "Change the interface of placement new to take a tydesc as part of Issue #2831.", "tree": {"sha": "2e36c29b5326b0338da02c0c323f42e6b8b9030c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e36c29b5326b0338da02c0c323f42e6b8b9030c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "html_url": "https://github.com/rust-lang/rust/commit/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7897b3ef3a75852f0494d45887c45587317ed8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7897b3ef3a75852f0494d45887c45587317ed8c", "html_url": "https://github.com/rust-lang/rust/commit/a7897b3ef3a75852f0494d45887c45587317ed8c"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "7f3e49de5510160e3e64aa6e9edd5eaf5e963de5", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -10,8 +10,8 @@ export log_str;\n export lock_and_signal, condition, methods;\n \n enum type_desc = {\n-    size: libc::size_t,\n-    align: libc::size_t\n+    size: uint,\n+    align: uint\n     // Remaining fields not listed\n };\n "}, {"sha": "65fcd0a59ca03d97682a72826d8f8bbcb106f92f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -31,11 +31,11 @@ impl arena for arena {\n         head = chunk(uint::next_power_of_two(new_min_chunk_size + 1u));\n         self.chunks = @cons(head, self.chunks);\n \n-        ret self.alloc(n_bytes, align);\n+        ret self.alloc_inner(n_bytes, align);\n     }\n \n     #[inline(always)]\n-    fn alloc(n_bytes: uint, align: uint) -> *() {\n+    fn alloc_inner(n_bytes: uint, align: uint) -> *() {\n         let alignm1 = align - 1u;\n         let mut head = list::head(self.chunks);\n \n@@ -52,5 +52,13 @@ impl arena for arena {\n             ret unsafe::reinterpret_cast(p);\n         }\n     }\n+\n+    #[inline(always)]\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n "}, {"sha": "823795d9155c2741655629484b9ca9a39a83c487", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -3693,9 +3693,9 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             ret trans_assign_op(bcx, e, op, dst, src);\n           }\n           ast::expr_new(pool, alloc_id, val) {\n-            // First, call pool->alloc(sz, align) to get back a void*.  Then,\n-            // cast this memory to the required type and evaluate value into\n-            // it.\n+            // First, call pool->alloc(tydesc) to get back a void*.\n+            // Then, cast this memory to the required type and evaluate value\n+            // into it.\n             let ccx = bcx.ccx();\n \n             // Allocate space for the ptr that will be returned from\n@@ -3706,24 +3706,21 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             #debug[\"ptr_ty = %s\", ppaux::ty_to_str(tcx, ptr_ty)];\n             #debug[\"ptr_ptr_val = %s\", val_str(ccx.tn, ptr_ptr_val)];\n \n-            let void_ty = ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx),\n-                                           mutbl: ast::m_imm});\n-            let voidval = {\n-                let llvoid_ty = type_of(ccx, void_ty);\n-                PointerCast(bcx, ptr_ptr_val, T_ptr(llvoid_ty))\n-            };\n-\n+            let void_ty = ty::mk_nil_ptr(tcx);\n+            let llvoid_ty = type_of(ccx, void_ty);\n+            let voidval = PointerCast(bcx, ptr_ptr_val, T_ptr(llvoid_ty));\n             #debug[\"voidval = %s\", val_str(ccx.tn, voidval)];\n \n-            let llval_ty = type_of(ccx, expr_ty(bcx, val));\n-            let args =\n-                ~[llsize_of(ccx, llval_ty), llalign_of(ccx, llval_ty)];\n+            let static_ti = get_tydesc(ccx, expr_ty(bcx, val));\n+            lazily_emit_all_tydesc_glue(ccx, static_ti);\n+            let lltydesc = PointerCast(bcx, static_ti.tydesc, llvoid_ty);\n+\n             let origin = bcx.ccx().maps.method_map.get(alloc_id);\n             let bcx = trans_call_inner(\n                 bcx, e.info(), node_id_type(bcx, alloc_id), void_ty,\n                 |bcx| impl::trans_method_callee(bcx, alloc_id,\n                                                  pool, origin),\n-                arg_vals(args),\n+                arg_vals(~[lltydesc]),\n                 save_in(voidval));\n \n             #debug[\"dest = %s\", dest_str(ccx, dest)];"}, {"sha": "504023687dd6ddf46f8b92feb57a62b980250d39", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -1631,17 +1631,15 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           some(entry) {\n             fcx.ccx.method_map.insert(alloc_id, entry);\n \n-            // Check that the alloc() method has the expected type, which\n-            // should be fn(sz: uint, align: uint) -> *().\n+            // Check that the alloc() method has the expected\n+            // type, which should be fn(tydesc: *()) -> *().\n             let expected_ty = {\n-                let ty_uint = ty::mk_uint(tcx);\n                 let ty_nilp = ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx),\n                                               mutbl: ast::m_imm});\n-                let m = ast::expl(ty::default_arg_mode_for_ty(ty_uint));\n+                let m = ast::expl(ty::default_arg_mode_for_ty(ty_nilp));\n                 ty::mk_fn(tcx, {purity: ast::impure_fn,\n                                 proto: ast::proto_any,\n-                                inputs: ~[{mode: m, ty: ty_uint},\n-                                         {mode: m, ty: ty_uint}],\n+                                inputs: ~[{mode: m, ty: ty_nilp}],\n                                 output: ty_nilp,\n                                 ret_style: ast::return_val,\n                                 constraints: ~[]})"}, {"sha": "2126a6bddc6b201d020d7b49a0b9fcbbcf3c175e", "filename": "src/test/compile-fail/placement-new-bad-method-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -11,5 +11,5 @@ impl methods for malloc_pool {\n fn main() {\n     let p = &malloc_pool(());\n     let x = new(*p) 4u;\n-    //~^ ERROR mismatched types: expected `fn(uint, uint) -> *()`\n+    //~^ ERROR mismatched types: expected `fn(*()) -> *()`\n }"}, {"sha": "85363c432e0d995acc1b50b857c571cdc9c1e8e2", "filename": "src/test/run-pass/placement-new-leaky.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -3,11 +3,17 @@ import libc, unsafe;\n enum malloc_pool = ();\n \n impl methods for malloc_pool {\n-    fn alloc(sz: uint, align: uint) -> *() {\n+    fn alloc_inner(sz: uint, align: uint) -> *() {\n         unsafe {\n             unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t))\n         }\n     }\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n \n fn main() {"}, {"sha": "cdd8033a1d191901364e0d2eafe6d0b8835a8b91", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=120773b2a7b6a1ca8ba859528f3e3cd9e574bf3d", "patch": "@@ -16,9 +16,15 @@ type ccx = {\n };\n \n impl arena for arena {\n-    fn alloc(sz: uint, _align: uint) -> *() unsafe {\n+    fn alloc_inner(sz: uint, _align: uint) -> *() unsafe {\n         ret unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t));\n     }\n+    fn alloc(tydesc: *()) -> *() {\n+        unsafe {\n+            let tydesc = tydesc as *sys::type_desc;\n+            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+        }\n+    }\n }\n \n fn h(bcx : &bcx) -> &bcx {"}]}