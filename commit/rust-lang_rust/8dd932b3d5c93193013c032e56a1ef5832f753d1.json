{"sha": "8dd932b3d5c93193013c032e56a1ef5832f753d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZDkzMmIzZDVjOTMxOTMwMTNjMDMyZTU2YTFlZjU4MzJmNzUzZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T18:46:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T18:46:34Z"}, "message": "auto merge of #4814 : brson/rust/check, r=nikomatsakis\n\nr? @nikomatsakis The third commit here is the one that makes the test suite remember which steps have completed successfully.", "tree": {"sha": "212ef08bc913fc176cd133b3ad6b669fb7fe5946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212ef08bc913fc176cd133b3ad6b669fb7fe5946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd932b3d5c93193013c032e56a1ef5832f753d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd932b3d5c93193013c032e56a1ef5832f753d1", "html_url": "https://github.com/rust-lang/rust/commit/8dd932b3d5c93193013c032e56a1ef5832f753d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd932b3d5c93193013c032e56a1ef5832f753d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a610a7d9506764141997fef746d528ed529bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a610a7d9506764141997fef746d528ed529bfc", "html_url": "https://github.com/rust-lang/rust/commit/37a610a7d9506764141997fef746d528ed529bfc"}, {"sha": "b72069f6f1e8af3b235be379050102bf653ddb42", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72069f6f1e8af3b235be379050102bf653ddb42", "html_url": "https://github.com/rust-lang/rust/commit/b72069f6f1e8af3b235be379050102bf653ddb42"}], "stats": {"total": 1037, "additions": 346, "deletions": 691}, "files": [{"sha": "531b3ce1efe06f2294caedd7b1d7ea2e19b1d6ec", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dd932b3d5c93193013c032e56a1ef5832f753d1/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8dd932b3d5c93193013c032e56a1ef5832f753d1/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8dd932b3d5c93193013c032e56a1ef5832f753d1", "patch": "@@ -624,7 +624,7 @@ do\n     make_dir $h/test/doc-tutorial-macros\n     make_dir $h/test/doc-tutorial-borrowed-ptr\n     make_dir $h/test/doc-tutorial-tasks\n-    make_dir $h/test/doc-ref\n+    make_dir $h/test/doc-rust\n done\n \n # Configure submodules"}, {"sha": "57c14b0afc8a2e3a8525d197f5e3a224e321aeae", "filename": "mk/clean.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dd932b3d5c93193013c032e56a1ef5832f753d1/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8dd932b3d5c93193013c032e56a1ef5832f753d1/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=8dd932b3d5c93193013c032e56a1ef5832f753d1", "patch": "@@ -48,7 +48,7 @@ clean-misc:\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n \t$(Q)rm -Rf $(DOCS)\n \t$(Q)rm -Rf $(GENERATED)\n-\t$(Q)rm -f tmp/*.log tmp/*.rc tmp/*.rs\n+\t$(Q)rm -f tmp/*.log tmp/*.rc tmp/*.rs tmp/*.ok\n \t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz dist\n \t$(Q)rm -Rf $(foreach ext, \\\n                  html aux cp fn ky log pdf pg toc tp vr cps, \\"}, {"sha": "2c1b19486af4b4a316bc7faf671314648a608b2b", "filename": "mk/tests.mk", "status": "modified", "additions": 344, "deletions": 689, "changes": 1033, "blob_url": "https://github.com/rust-lang/rust/blob/8dd932b3d5c93193013c032e56a1ef5832f753d1/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8dd932b3d5c93193013c032e56a1ef5832f753d1/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8dd932b3d5c93193013c032e56a1ef5832f753d1", "patch": "@@ -8,36 +8,20 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+\n ######################################################################\n-# Testing variables\n+# Test variables\n ######################################################################\n \n-RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n-RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n-RPASS_FULL_RC := $(wildcard $(S)src/test/run-pass-fulldeps/*.rc)\n-RPASS_FULL_RS := $(wildcard $(S)src/test/run-pass-fulldeps/*.rs)\n-RFAIL_RC := $(wildcard $(S)src/test/run-fail/*.rc)\n-RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n-CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n-CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n-BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n-PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n+# The names of crates that must be tested\n+TEST_CRATES = core std syntax rustc rustdoc rusti cargo\n \n-# perf tests are the same as bench tests only they run under\n-# a performance monitor.\n-PERF_RS := $(wildcard $(S)src/test/bench/*.rs)\n+# Markdown files under doc/ that should have their code extracted and run\n+DOC_TEST_NAMES = tutorial tutorial-ffi tutorial-macros tutorial-borrowed-ptr tutorial-tasks rust\n \n-RPASS_TESTS := $(RPASS_RC) $(RPASS_RS)\n-RPASS_FULL_TESTS := $(RPASS_FULL_RC) $(RPASS_FULL_RS)\n-RFAIL_TESTS := $(RFAIL_RC) $(RFAIL_RS)\n-CFAIL_TESTS := $(CFAIL_RC) $(CFAIL_RS)\n-BENCH_TESTS := $(BENCH_RS)\n-PERF_TESTS := $(PERF_RS)\n-PRETTY_TESTS := $(PRETTY_RS)\n-\n-FT := run_pass_stage2\n-FT_LIB := $(call CFG_LIB_NAME,$(FT))\n-FT_DRIVER := $(FT)_driver\n+######################################################################\n+# Environment configuration\n+######################################################################\n \n # The arguments to all test runners\n ifdef TESTNAME\n@@ -78,11 +62,31 @@ ifeq ($(MAKECMDGOALS),perf)\n   export RUST_BENCH\n endif\n \n+TEST_LOG_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n+TEST_OK_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).ok\n \n ######################################################################\n # Main test targets\n ######################################################################\n \n+check: cleantestlibs cleantmptestlogs tidy all check-stage2\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+\n+check-notidy: cleantestlibs cleantmptestlogs all check-stage2\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+\n+check-full: cleantestlibs cleantmptestlogs tidy \\\n+            all check-stage1 check-stage2 check-stage3\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+\n+check-test: cleantestlibs cleantmptestlogs all check-stage2-rfail\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+\n+check-lite: cleantestlibs cleantmptestlogs \\\n+\tcheck-stage2-core check-stage2-std check-stage2-rpass \\\n+\tcheck-stage2-rfail check-stage2-cfail\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+\n .PHONY: cleantmptestlogs cleantestlibs\n \n cleantmptestlogs:\n@@ -102,25 +106,11 @@ cleantestlibs:\n          -name '*.err'        \\\n          | xargs rm -rf\n \n-check: cleantestlibs cleantmptestlogs tidy all check-stage2\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-check-notidy: cleantestlibs cleantmptestlogs all check-stage2\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-check-full: cleantestlibs cleantmptestlogs tidy \\\n-            all check-stage1 check-stage2 check-stage3\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-check-test: cleantestlibs cleantmptestlogs all check-stage2-rfail\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n-check-lite: cleantestlibs cleantmptestlogs rustc-stage2 \\\n-\tcheck-stage2-core check-stage2-std check-stage2-rpass \\\n-\tcheck-stage2-rfail check-stage2-cfail\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n+######################################################################\n+# Tidy\n+######################################################################\n \n-# Run the tidy script in multiple parts to avoid huge 'echo' commands\n ifdef CFG_NOTIDY\n tidy:\n else\n@@ -151,6 +141,7 @@ ALL_HS := $(filter-out $(S)src/rt/vg/valgrind.h \\\n                        $(S)src/rt/linenoise/utf8.h \\\n \t,$(ALL_HS))\n \n+# Run the tidy script in multiple parts to avoid huge 'echo' commands\n tidy:\n \t\t@$(call E, check: formatting)\n \t\t$(Q)find $(S)src -name '*.r[sc]' \\\n@@ -165,286 +156,190 @@ tidy:\n \n endif\n \n+\n ######################################################################\n-# Extracting tests for docs\n+# Sets of tests\n ######################################################################\n \n-EXTRACT_TESTS := \"$(CFG_PYTHON)\" $(S)src/etc/extract-tests.py\n-\n-define DEF_DOC_TEST_HOST\n-\n-doc-tutorial-extract$(1):\n-\t@$$(call E, extract: tutorial tests)\n-\t$$(Q)rm -f $(1)/test/doc-tutorial/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial.md $(1)/test/doc-tutorial\n-\n-doc-tutorial-ffi-extract$(1):\n-\t@$$(call E, extract: tutorial-ffi tests)\n-\t$$(Q)rm -f $(1)/test/doc-tutorial-ffi/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial-ffi.md $(1)/test/doc-tutorial-ffi\n-\n-doc-tutorial-macros-extract$(1):\n-\t@$$(call E, extract: tutorial-macros tests)\n-\t$$(Q)rm -f $(1)/test/doc-tutorial-macros/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial-macros.md $(1)/test/doc-tutorial-macros\n-\n-doc-tutorial-borrowed-ptr-extract$(1):\n-\t@$$(call E, extract: tutorial-borrowed-ptr tests)\n-\t$$(Q)rm -f $(1)/test/doc-tutorial-borrowed-ptr/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial-borrowed-ptr.md $(1)/test/doc-tutorial-borrowed-ptr\n-\n-doc-tutorial-tasks-extract$(1):\n-\t@$$(call E, extract: tutorial-tasks tests)\n-\t$$(Q)rm -f $(1)/test/doc-tutorial-tasks/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial-tasks.md $(1)/test/doc-tutorial-tasks\n-\n-doc-ref-extract$(1):\n-\t@$$(call E, extract: ref tests)\n-\t$$(Q)rm -f $(1)/test/doc-ref/*.rs\n-\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/rust.md $(1)/test/doc-ref\n+define DEF_TEST_SETS\n+\n+check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec\t\t\t\\\n+        check-stage$(1)-T-$(2)-H-$(3)-crates-exec                      \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n+\n+check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n+\t$$(foreach crate,$$(TEST_CRATES), \\\n+           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n+\n+check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n+        $$(foreach docname,$$(DOC_TEST_NAMES), \\\n+           check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n+\n+check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-bench-exec\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-exec\n \n endef\n \n $(foreach host,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_DOC_TEST_HOST,$(host))))\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach stage,$(STAGES), \\\n+    $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n+\n \n ######################################################################\n-# Rules for the test runners\n+# Crate testing\n ######################################################################\n \n-define TEST_STAGEN\n-\n-# All the per-stage build rules you might want to call from the\n-# command line.\n-#\n-# $(1) is the stage number\n-# $(2) is the target triple to test\n-# $(3) is the host triple to test\n-\n-# Prerequisites for compiletest tests\n-TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/compiletest$$(X) \\\n-\t$$(SREQ$(1)_T_$(2)_H_$(3))\n-\n-# Prerequisites for compiletest tests that have deps on librustc, etc\n-FULL_TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/compiletest$$(X) \\\n-\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3))\n-\n-check-stage$(1)-T-$(2)-H-$(3):     \t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rustc\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-core          \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-std\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-syntax\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-bench\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty        \\\n-    check-stage$(1)-T-$(2)-H-$(3)-rustdoc       \\\n-    check-stage$(1)-T-$(2)-H-$(3)-rusti       \\\n-    check-stage$(1)-T-$(2)-H-$(3)-cargo       \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc       \\\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc: \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial  \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi  \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-macros  \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-borrowed-ptr  \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-tasks  \\\n-    check-stage$(1)-T-$(2)-H-$(3)-doc-ref\n-\n-check-stage$(1)-T-$(2)-H-$(3)-core:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-core-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-std:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-std-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-syntax:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-syntax-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rustc:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rustc-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-cfail:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rfail:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rpass:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rpass-full:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-bench:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-bench-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-perf:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-perf-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty:\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full\t\\\n-    check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail\t\\\n-    check-stage$(1)-T-$(2)-H-$(3)-pretty-bench\t\\\n-    check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass:\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full:\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail:\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-bench:\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-bench-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rustdoc:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-rusti:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rusti-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-cargo:\t\t\t\t\\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cargo-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-macros: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-macros-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-borrowed-ptr: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-borrowed-ptr-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-tasks: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-tasks-dummy\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-ref: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-ref-dummy\n-\n-# Rules for the core library test runner\n+define TEST_RUNNER\n \n $(3)/test/coretest.stage$(1)-$(2)$$(X):\t\t\t\\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS)\t\\\n-        $$(SREQ$(1)_T_$(2)_H_$(3))\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-check-stage$(1)-T-$(2)-H-$(3)-core-dummy:\t\t\t\\\n-\t\t$(3)/test/coretest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-core.log\n-\n-# Rules for the standard library test runner\n-\n $(3)/test/stdtest.stage$(1)-$(2)$$(X):\t\t\t\\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n-        $$(SREQ$(1)_T_$(2)_H_$(3))\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-check-stage$(1)-T-$(2)-H-$(3)-std-dummy:\t\t\t\\\n-\t\t$(3)/test/stdtest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-std.log\n-\n-# Rules for the libsyntax test runner\n-\n $(3)/test/syntaxtest.stage$(1)-$(2)$$(X):\t\t\t\\\n \t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n-        $$(SREQ$(1)_T_$(2)_H_$(3))\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-check-stage$(1)-T-$(2)-H-$(3)-syntax-dummy:\t\t\t\\\n-\t\t$(3)/test/syntaxtest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-syntax.log\n-\n-# Rules for the rustc test runner\n-\n $(3)/test/rustctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n-\t\t$$(COMPILER_CRATE)\t\t\t\t\t\t\t\t\t\\\n-\t\t$$(COMPILER_INPUTS)\t\t\t\t\t\t\t\t\t\\\n-\t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\t\t\\\n+\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM) \\\n                 $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-check-stage$(1)-T-$(2)-H-$(3)-rustc-dummy:\t\t\\\n-\t\t$(3)/test/rustctest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)   \\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rustc.log\n+$(3)/test/cargotest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+\t\t$$(CARGO_LIB) $$(CARGO_INPUTS)\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-# Rules for the rustdoc test runner\n+$(3)/test/rustitest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+\t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n $(3)/test/rustdoctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB)  \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)   \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-check-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy:\t\t\\\n-\t\t$(3)/test/rustdoctest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rustdoc.log\n+endef\n \n-# Rules for the rusti test runner\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(foreach stage,$(STAGES), \\\n+   $(eval $(call TEST_RUNNER,$(stage),$(target),$(host))))))))\n \n-$(3)/test/rustitest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n-\t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB)  \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)   \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+define DEF_TEST_CRATE_RULES\n+check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n-check-stage$(1)-T-$(2)-H-$(3)-rusti-dummy:\t\t\\\n-\t\t$(3)/test/rustitest.stage$(1)-$(2)$$(X)\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rusti.log\n+\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n+\t&& touch $$@\n+endef\n \n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach crate, $(TEST_CRATES), \\\n+    $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate)))))))\n \n-# Rules for the cargo test runner\n \n-$(3)/test/cargotest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n-\t\t$$(CARGO_LIB) $$(CARGO_INPUTS)\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB)  \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)   \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+######################################################################\n+# Rules for the compiletest tests (rpass, rfail, etc.)\n+######################################################################\n \n-check-stage$(1)-T-$(2)-H-$(3)-cargo-dummy:\t\t\\\n-\t\t$(3)/test/cargotest.stage$(1)-$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n-\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-cargo.log\n+RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n+RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n+RPASS_FULL_RC := $(wildcard $(S)src/test/run-pass-fulldeps/*.rc)\n+RPASS_FULL_RS := $(wildcard $(S)src/test/run-pass-fulldeps/*.rs)\n+RFAIL_RC := $(wildcard $(S)src/test/run-fail/*.rc)\n+RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n+CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n+CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n+BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n+PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n+\n+# perf tests are the same as bench tests only they run under\n+# a performance monitor.\n+PERF_RS := $(wildcard $(S)src/test/bench/*.rs)\n+\n+RPASS_TESTS := $(RPASS_RC) $(RPASS_RS)\n+RPASS_FULL_TESTS := $(RPASS_FULL_RC) $(RPASS_FULL_RS)\n+RFAIL_TESTS := $(RFAIL_RC) $(RFAIL_RS)\n+CFAIL_TESTS := $(CFAIL_RC) $(CFAIL_RS)\n+BENCH_TESTS := $(BENCH_RS)\n+PERF_TESTS := $(PERF_RS)\n+PRETTY_TESTS := $(PRETTY_RS)\n+\n+CTEST_SRC_BASE_rpass = run-pass\n+CTEST_BUILD_BASE_rpass = run-pass\n+CTEST_MODE_rpass = run-pass\n+CTEST_RUNTOOL_rpass = $(CTEST_RUNTOOL)\n+\n+CTEST_SRC_BASE_rpass-full = run-pass-full\n+CTEST_BUILD_BASE_rpass-full = run-pass-full\n+CTEST_MODE_rpass-full = run-pass\n+CTEST_RUNTOOL_rpass-full = $(CTEST_RUNTOOL)\n+\n+CTEST_SRC_BASE_rfail = run-fail\n+CTEST_BUILD_BASE_rfail = run-fail\n+CTEST_MODE_rfail = run-fail\n+CTEST_RUNTOOL_rfail = $(CTEST_RUNTOOL)\n+\n+CTEST_SRC_BASE_cfail = compile-fail\n+CTEST_BUILD_BASE_cfail = compile-fail\n+CTEST_MODE_cfail = compile-fail\n+CTEST_RUNTOOL_cfail = $(CTEST_RUNTOOL)\n+\n+CTEST_SRC_BASE_bench = bench\n+CTEST_BUILD_BASE_bench = bench\n+CTEST_MODE_bench = run-pass\n+CTEST_RUNTOOL_bench = $(CTEST_RUNTOOL)\n+\n+CTEST_SRC_BASE_perf = bench\n+CTEST_BUILD_BASE_perf = perf\n+CTEST_MODE_perf = run-pass\n+CTEST_RUNTOOL_perf = $(CTEST_PERF_RUNTOOL)\n+\n+define DEF_CTEST_VARS\n+\n+# All the per-stage build rules you might want to call from the\n+# command line.\n+#\n+# $(1) is the stage number\n+# $(2) is the target triple to test\n+# $(3) is the host triple to test\n+\n+# Prerequisites for compiletest tests\n+TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n+\t$$(HBIN$(1)_H_$(3))/compiletest$$(X) \\\n+\t$$(SREQ$(1)_T_$(2)_H_$(3))\n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n@@ -457,262 +352,227 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n         $$(CTEST_TESTARGS)\n \n-CFAIL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/compile-fail/\t\\\n-        --build-base $(3)/test/compile-fail/\t\\\n-        --mode compile-fail\n+CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n+CTEST_DEPS_rpass_full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3))\n+CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n+CTEST_DEPS_cfail_$(1)-T-$(2)-H-$(3) = $$(CFAIL_TESTS)\n+CTEST_DEPS_bench_$(1)-T-$(2)-H-$(3) = $$(BENCH_TESTS)\n+CTEST_DEPS_perf_$(1)-T-$(2)-H-$(3) = $$(PERF_TESTS)\n \n-RFAIL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-fail/\t\t\\\n-        --build-base $(3)/test/run-fail/\t\t\\\n-        --mode run-fail\t\t\t\t\t\t\t\\\n-        $$(CTEST_RUNTOOL)\n+endef\n \n-RPASS_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-pass/\t\t\\\n-        --build-base $(3)/test/run-pass/\t\t\\\n-        --mode run-pass\t\t\t\t\t\\\n-        $$(CTEST_RUNTOOL)\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(foreach stage,$(STAGES), \\\n+   $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n \n-RPASS_FULL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-pass-fulldeps/\t\t\\\n-        --build-base $(3)/test/run-pass-fulldeps/\t\t\\\n-        --mode run-pass\t\t\t\t\t\\\n-        $$(CTEST_RUNTOOL)\n+define DEF_RUN_COMPILETEST\n \n-BENCH_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/bench/\t\t\t\\\n-        --build-base $(3)/test/bench/\t\t\t\\\n-        --mode run-pass\t\t\t\t\t\\\n-        $$(CTEST_RUNTOOL)\n+CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n+        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n+        --src-base $$(S)src/test/$$(CTEST_SRC_BASE_$(4))/ \\\n+        --build-base $(3)/test/$$(CTEST_BUILD_BASE_$(4))/ \\\n+        --mode $$(CTEST_MODE_$(4)) \\\n+\t$$(CTEST_RUNTOOL_$(4))\n \n-PERF_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/bench/\t\t\t\\\n-        --build-base $(3)/test/perf/\t\t\t\\\n-        --mode run-pass\t\t\t\t\t\t\t\\\n-        $$(CTEST_PERF_RUNTOOL)\n+check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n-PRETTY_RPASS_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-pass/\t\t\\\n-        --build-base $(3)/test/run-pass/\t\t\\\n-        --mode pretty\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n+                $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n+\t@$$(call E, run $(4): $$<)\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+\t\t$$(CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n+\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n+                && touch $$@\n \n-PRETTY_RPASS_FULL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-pass-fulldeps/\t\t\\\n-        --build-base $(3)/test/run-pass-fulldeps/\t\t\\\n-        --mode pretty\n+endef\n \n-PRETTY_RFAIL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/run-fail/\t\t\\\n-        --build-base $(3)/test/run-fail/\t\t\\\n-        --mode pretty\n+CTEST_NAMES = rpass rpass-full rfail cfail bench perf\n \n-PRETTY_BENCH_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(foreach stage,$(STAGES), \\\n+   $(eval $(foreach name,$(CTEST_NAMES), \\\n+   $(eval $(call DEF_RUN_COMPILETEST,$(stage),$(target),$(host),$(name))))))))))\n+\n+PRETTY_NAMES = pretty-rpass pretty-rpass-full pretty-rfail pretty-bench pretty-pretty\n+PRETTY_DEPS_pretty-rpass = $(RPASS_TESTS)\n+PRETTY_DEPS_pretty-rpass-full = $(RPASS_FULL_TESTS)\n+PRETTY_DEPS_pretty-rfail = $(RFAIL_TESTS)\n+PRETTY_DEPS_pretty-bench = $(BENCH_TESTS)\n+PRETTY_DEPS_pretty-pretty = $(PRETTY_TESTS)\n+PRETTY_DIRNAME_pretty-rpass = run-pass\n+PRETTY_DIRNAME_pretty-rpass-full = run-pass-full\n+PRETTY_DIRNAME_pretty-rfail = run-fail\n+PRETTY_DIRNAME_pretty-bench = bench\n+PRETTY_DIRNAME_pretty-pretty = pretty\n+\n+define DEF_RUN_PRETTY_TEST\n+\n+PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4) :=\t\t\t\\\n \t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/bench/\t\t\t\\\n-        --build-base $(3)/test/bench/\t\t\t\\\n+        --src-base $$(S)src/test/$$(PRETTY_DIRNAME_$(4))/ \\\n+        --build-base $(3)/test/$$(PRETTY_DIRNAME_$(4))/ \\\n         --mode pretty\n \n-PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $$(S)src/test/pretty/\t\t\\\n-        --build-base $(3)/test/pretty/\t\t\t\\\n-        --mode pretty\n+check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n-DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-tutorial/\t\t\\\n-        --build-base $(3)/test/doc-tutorial/\t\t\\\n-        --mode run-pass\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n+\t        $$(PRETTY_DEPS_$(4))\n+\t@$$(call E, run pretty-rpass: $$<)\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+\t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n+\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n+                && touch $$@\n \n-DOC_TUTORIAL_FFI_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-tutorial-ffi/\t\t\\\n-        --build-base $(3)/test/doc-tutorial-ffi/\t\\\n-        --mode run-pass\n+endef\n \n-DOC_TUTORIAL_MACROS_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-tutorial-macros/\t\\\n-        --build-base $(3)/test/doc-tutorial-macros/\t\\\n-        --mode run-pass\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach pretty-name,$(PRETTY_NAMES), \\\n+    $(eval $(call DEF_RUN_PRETTY_TEST,$(stage),$(target),$(host),$(pretty-name)))))))\n \n-DOC_TUTORIAL_BORROWED_PTR_ARGS$(1)-T-$(2)-H-$(3) :=\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-tutorial-borrowed-ptr/\t\\\n-        --build-base $(3)/test/doc-tutorial-borrowed-ptr/ \\\n-        --mode run-pass\n+define DEF_RUN_DOC_TEST\n \n-DOC_TUTORIAL_TASKS_ARGS$(1)-T-$(2)-H-$(3) :=\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-tutorial-tasks/\t\\\n-        --build-base $(3)/test/doc-tutorial-tasks/ \\\n+DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n+        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n+        --src-base $(3)/test/doc-$(4)/\t\\\n+        --build-base $(3)/test/doc-$(4)/\t\\\n         --mode run-pass\n \n-DOC_REF_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n-        --src-base $(3)/test/doc-ref/\t\t\t\\\n-        --build-base $(3)/test/doc-ref/\t\t\t\\\n-        --mode run-pass\n+check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n-check-stage$(1)-T-$(2)-H-$(3)-cfail-dummy:\t\t\\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(CFAIL_TESTS)\n-\t@$$(call E, run cfail: $$<)\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n+                doc-$(4)-extract$(3)\n+\t@$$(call E, run doc-$(4): $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(CFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-cfail.log\n+                $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n+\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),doc-$(4)) \\\n+                && touch $$@\n \n-check-stage$(1)-T-$(2)-H-$(3)-rfail-dummy:\t\t\\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t\t$$(RFAIL_TESTS)\n-\t@$$(call E, run rfail: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(RFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rfail.log\n+endef\n \n-check-stage$(1)-T-$(2)-H-$(3)-rpass-dummy:\t\t\\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(RPASS_TESTS)\n-\t@$$(call E, run rpass-full: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(RPASS_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rpass.log\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach stage,$(STAGES), \\\n+   $(foreach docname,$(DOC_TEST_NAMES), \\\n+    $(eval $(call DEF_RUN_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n \n-check-stage$(1)-T-$(2)-H-$(3)-rpass-full-dummy:\t\t\\\n-\t\t$$(FULL_TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(RPASS_FULL_TESTS)\n-\t@$$(call E, run rpass: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(RPASS_FULL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rpass-full.log\n \n-check-stage$(1)-T-$(2)-H-$(3)-bench-dummy:\t\t\\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t\t$$(BENCH_TESTS)\n-\t@$$(call E, run bench: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(BENCH_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-bench.log\n+######################################################################\n+# Extracting tests for docs\n+######################################################################\n \n-check-stage$(1)-T-$(2)-H-$(3)-perf-dummy:\t\t\\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(BENCH_TESTS)\n-\t@$$(call E, perf: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PERF_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-perf.log\n+EXTRACT_TESTS := \"$(CFG_PYTHON)\" $(S)src/etc/extract-tests.py\n \n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-dummy:\t\\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(RPASS_TESTS)\n-\t@$$(call E, run pretty-rpass: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_RPASS_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass.log\n+define DEF_DOC_TEST_HOST\n \n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-dummy:\t\\\n-\t        $$(FULL_TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(RPASS_FULL_TESTS)\n-\t@$$(call E, run pretty-rpass-full: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_RPASS_FULL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full.log\n+doc-$(2)-extract$(1):\n+\t@$$(call E, extract: $(2) tests)\n+\t$$(Q)rm -f $(1)/test/doc-$(2)/*.rs\n+\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/$(2).md $(1)/test/doc-$(2)\n \n-check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-dummy:\t\\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(RFAIL_TESTS)\n-\t@$$(call E, run pretty-rfail: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_RFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail.log\n+endef\n \n-check-stage$(1)-T-$(2)-H-$(3)-pretty-bench-dummy:\t\\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(BENCH_TESTS)\n-\t@$$(call E, run pretty-bench: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_BENCH_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-bench.log\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach docname,$(DOC_TEST_NAMES), \\\n+  $(eval $(call DEF_DOC_TEST_HOST,$(host),$(docname)))))\n \n-check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-dummy:\t\\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-\t        $$(PRETTY_TESTS)\n-\t@$$(call E, run pretty-pretty: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty.log\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-dummy:       \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-tutorial-extract$(3)\n-\t@$$(call E, run doc-tutorial: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial.log\n+######################################################################\n+# Shortcut rules\n+######################################################################\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi-dummy:       \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-tutorial-ffi-extract$(3)\n-\t@$$(call E, run doc-tutorial-ffi: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_FFI_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi.log\n+TEST_GROUPS = \\\n+\tcrates \\\n+\t$(foreach crate,$(TEST_CRATES),$(crate)) \\\n+\trpass \\\n+\trpass-full \\\n+\trfail \\\n+\tcfail \\\n+\tbench \\\n+\tperf \\\n+\tdoc \\\n+\t$(foreach docname,$(DOC_TEST_NAMES),$(docname)) \\\n+\tpretty \\\n+\tpretty-rpass \\\n+\tpretty-rpass-full \\\n+\tpretty-rfail \\\n+\tpretty-bench \\\n+\tpretty-pretty \\\n+\t$(NULL)\n+\n+define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST\n+check-stage$(1)-T-$(2)-H-$(3): check-stage$(1)-T-$(2)-H-$(3)-exec\n+endef\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-macros-dummy:       \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-tutorial-macros-extract$(3)\n-\t@$$(call E, run doc-tutorial-macros: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_MACROS_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-macros.log\n+$(foreach stage,$(STAGES), \\\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+   $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-borrowed-ptr-dummy:       \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-tutorial-borrowed-ptr-extract$(3)\n-\t@$$(call E, run doc-tutorial-borrowed-ptr: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_BORROWED_PTR_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-borrowed-ptr.log\n+define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n+check-stage$(1)-T-$(2)-H-$(3)-$(4): check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec\n+endef\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-tasks-dummy:       \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-tutorial-tasks-extract$(3)\n-\t@$$(call E, run doc-tutorial-tasks: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_TASKS_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-tasks.log\n+$(foreach stage,$(STAGES), \\\n+ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+   $(foreach group,$(TEST_GROUPS), \\\n+    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-ref-dummy:            \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n-                doc-ref-extract$(3)\n-\t@$$(call E, run doc-ref: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_REF_ARGS$(1)-T-$(2)-H-$(3)) \\\n-\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-ref.log\n+define DEF_CHECK_FOR_STAGE\n+check-stage$(1): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)\n+check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+                           check-stage$(1)-H-$$(target))\n+endef\n+\n+$(foreach stage,$(STAGES), \\\n+ $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n \n+define DEF_CHECK_FOR_STAGE_AND_GROUP\n+check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-$(2)\n+check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+                               check-stage$(1)-H-$$(target)-$(2))\n endef\n \n-# Instantiate the template for stage 0, 1, 2, 3\n+$(foreach stage,$(STAGES), \\\n+ $(foreach group,$(TEST_GROUPS), \\\n+  $(eval $(call DEF_CHECK_FOR_STAGE_AND_GROUP,$(stage),$(group)))))\n+\n+\n+define DEF_CHECK_FOR_STAGE_AND_HOSTS\n+check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+                           check-stage$(1)-T-$$(target)-H-$(2))\n+endef\n+\n+$(foreach stage,$(STAGES), \\\n+ $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n+\n+define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n+check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+                                check-stage$(1)-T-$$(target)-H-$(2)-$(3))\n+endef\n+\n+$(foreach stage,$(STAGES), \\\n+ $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach group,$(TEST_GROUPS), \\\n+   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call TEST_STAGEN,$(stage),$(target),$(host))))))))\n \n ######################################################################\n-# Fast-test rules\n+# check-fast rules\n ######################################################################\n \n+FT := run_pass_stage2\n+FT_LIB := $(call CFG_LIB_NAME,$(FT))\n+FT_DRIVER := $(FT)_driver\n+\n GENERATED += tmp/$(FT).rc tmp/$(FT_DRIVER).rs\n \n tmp/$(FT).rc tmp/$(FT_DRIVER).rs: \\\n@@ -746,9 +606,6 @@ $(3)/test/$$(FT_DRIVER)-$(2).out: \\\n \t--logfile tmp/$$(FT_DRIVER)-$(2).log\n \n check-fast-T-$(2)-H-$(3):     \t\t\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-rustc\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-core\t\t\\\n-\tcheck-stage2-T-$(2)-H-$(3)-std\t\t\\\n \t$(3)/test/$$(FT_DRIVER)-$(2).out\n \n endef\n@@ -757,99 +614,7 @@ $(foreach host,$(CFG_TARGET_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FAST_FOR_T_H,,$(target),$(host))))))\n \n-######################################################################\n-# Shortcut rules\n-######################################################################\n-\n-define DEF_CHECK_FOR_STAGE_H\n-\n-check-stage$(1)-H-$(2):\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2))\n-check-stage$(1)-H-$(2)-perf:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-perf)\n-check-stage$(1)-H-$(2)-rustc:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rustc)\n-check-stage$(1)-H-$(2)-core:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-core)\n-check-stage$(1)-H-$(2)-std:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-std)\n-check-stage$(1)-H-$(2)-syntax:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-syntax)\n-check-stage$(1)-H-$(2)-rpass:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rpass)\n-check-stage$(1)-H-$(2)-rpass-full:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rpass-full)\n-check-stage$(1)-H-$(2)-rfail:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rfail)\n-check-stage$(1)-H-$(2)-cfail:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-cfail)\n-check-stage$(1)-H-$(2)-bench:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-bench)\n-check-stage$(1)-H-$(2)-pretty:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty)\n-check-stage$(1)-H-$(2)-pretty-rpass:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty-rpass)\n-check-stage$(1)-H-$(2)-pretty-rpass-full:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty-rpass-full)\n-check-stage$(1)-H-$(2)-pretty-rfail:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty-rfail)\n-check-stage$(1)-H-$(2)-pretty-bench:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty-bench)\n-check-stage$(1)-H-$(2)-pretty-pretty:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-pretty-pretty)\n-check-stage$(1)-H-$(2)-rustdoc:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rustdoc)\n-check-stage$(1)-H-$(2)-rusti:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-rusti)\n-check-stage$(1)-H-$(2)-cargo:\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-cargo)\n-check-stage$(1)-H-$(2)-doc:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc)\n-check-stage$(1)-H-$(2)-doc-tutorial:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial)\n-check-stage$(1)-H-$(2)-doc-tutorial-ffi:\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial-ffi)\n-check-stage$(1)-H-$(2)-doc-tutorial-macros:\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial-macros)\n-check-stage$(1)-H-$(2)-doc-tutorial-borrowed-ptr:\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial-borrowed-ptr)\n-check-stage$(1)-H-$(2)-doc-tutorial-tasks:\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial-tasks)\n-check-stage$(1)-H-$(2)-doc-ref:\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-T-$$(target)-H-$(2)-doc-ref)\n-\n-endef\n-\n-$(foreach stage,$(STAGES),\t\t\t\t\t\\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n-  $(eval $(call DEF_CHECK_FOR_STAGE_H,$(stage),$(target))))))\n+check-fast: tidy check-fast-H-$(CFG_HOST_TRIPLE)\n \n define DEF_CHECK_FAST_FOR_H\n \n@@ -860,113 +625,3 @@ endef\n $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n  $(eval $(call DEF_CHECK_FAST_FOR_H,$(target))))\n \n-define DEF_CHECK_ALL_FOR_STAGE\n-\n-check-stage$(1)-H-all: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target))\n-check-stage$(1)-H-all-perf: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-perf)\n-check-stage$(1)-H-all-rustc: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rustc)\n-check-stage$(1)-H-all-core: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-core)\n-check-stage$(1)-H-all-std: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-std)\n-check-stage$(1)-H-all-syntax: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-syntax)\n-check-stage$(1)-H-all-rpass: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rpass)\n-check-stage$(1)-H-all-rpass-full: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rpass-full)\n-check-stage$(1)-H-all-rfail: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rfail)\n-check-stage$(1)-H-all-cfail: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-cfail)\n-check-stage$(1)-H-all-bench: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-bench)\n-check-stage$(1)-H-all-pretty: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty)\n-check-stage$(1)-H-all-pretty-rpass: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty-rpass)\n-check-stage$(1)-H-all-pretty-rpass-full: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty-rpass-full)\n-check-stage$(1)-H-all-pretty-rfail: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty-rfail)\n-check-stage$(1)-H-all-pretty-bench: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty-bench)\n-check-stage$(1)-H-all-pretty-pretty: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-pretty-pretty)\n-check-stage$(1)-H-all-rustdoc: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rustdoc)\n-check-stage$(1)-H-all-rusti: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rusti)\n-check-stage$(1)-H-all-cargo: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-cargo)\n-check-stage$(1)-H-all-doc-tutorial: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-doc-tutorial)\n-check-stage$(1)-H-all-doc-ref: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-doc-ref)\n-\n-endef\n-\n-$(foreach stage,$(STAGES),\t\t\t\t\t\t\\\n- $(eval $(call DEF_CHECK_ALL_FOR_STAGE,$(stage))))\n-\n-define DEF_CHECK_FOR_STAGE\n-\n-check-stage$(1): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)\n-check-stage$(1)-perf: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-perf\n-check-stage$(1)-rustc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rustc\n-check-stage$(1)-core: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-core\n-check-stage$(1)-std: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-std\n-check-stage$(1)-syntax: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-syntax\n-check-stage$(1)-rpass: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rpass\n-check-stage$(1)-rpass-full: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rpass-full\n-check-stage$(1)-rfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rfail\n-check-stage$(1)-cfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-cfail\n-check-stage$(1)-bench: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-bench\n-check-stage$(1)-pretty: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty\n-check-stage$(1)-pretty-rpass: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rpass\n-check-stage$(1)-pretty-rpass-full: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rpass-full\n-check-stage$(1)-pretty-rfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rfail\n-check-stage$(1)-pretty-bench: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-bench\n-check-stage$(1)-pretty-pretty: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-pretty\n-check-stage$(1)-rustdoc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rustdoc\n-check-stage$(1)-rusti: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rusti\n-check-stage$(1)-cargo: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-cargo\n-check-stage$(1)-doc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc\n-check-stage$(1)-doc-tutorial: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial\n-check-stage$(1)-doc-tutorial-ffi: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-ffi\n-check-stage$(1)-doc-tutorial-macros: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-macros\n-check-stage$(1)-doc-tutorial-borrowed-ptr: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-borrowed-ptr\n-check-stage$(1)-doc-tutorial-tasks: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-tasks\n-check-stage$(1)-doc-ref: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-ref\n-\n-endef\n-\n-$(foreach stage,$(STAGES),\t\t\t\t\t\t\\\n- $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n-\n-check-fast: tidy check-fast-H-$(CFG_HOST_TRIPLE)"}]}