{"sha": "2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMWE0YjM3NDhkNDYzMmIwNTE5MDk3ZWU5OTMxMzZjM2Q1ZGM2ZWQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:33Z"}, "message": "Rollup merge of #66305 - elichai:2019-11-array_ffi, r=eddyb\n\nAdd by-value arrays to `improper_ctypes` lint\n\nHi,\nC doesn't have a notion of passing arrays by value, only by reference/pointer.\nRust currently will pass it correctly by reference by it looks very misleading, and can confuse the borrow checker to think a move had occurred.\n\nFixes #58905 and fixes #24578.\n\nWe could also improve the borrow checker here but I think it's kinda a waste of work if we instead just tell the user it's an invalid FFI call.\n\n(My first PR to `rustc` so if I missed some test or formatting guideline please tell me :) )", "tree": {"sha": "2a2a0b65fe7e719116e18db8fb5f204f6c804928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2a0b65fe7e719116e18db8fb5f204f6c804928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqBCRBK7hj4Ov3rIwAAdHIIAH/E1U0ZIs82T6K9xYCMxXI/\n26RPU3frsc4BbEeHXe+4oB4FOhsfeO0ZfKhZ2SSYpXC5Vi1Uby0vLyXbRSFd5yC6\nT6QkFhCEemDillmZdRTLaLyz53o1aAxCTLatVDb2kjI0qTZ8XBIZcYBgW8U4/UwK\nk6l5ky1XseYCkYlUdlYvD2aSNJbcxrAuTYaYqiSVuN+4+CIkLUlK5k93yI/yvTts\nAb7+3GH163vZOCcGfjZkGdN00CDw6guKQYgQny70XrjOlFbcWYJvhDHdw+3yVvP/\nhrT8C5hyrLKDVUQftENWmlgPfb5Meo0xGxscr4xZTrhxwu1FAHXYr8D4ydlDz4A=\n=edTm\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a2a0b65fe7e719116e18db8fb5f204f6c804928\nparent b92b7052b711c2097565816797347e1652be08fa\nparent b3666b64738980579f05eec0cfae43f917f74a29\nauthor Tyler Mandry <tmandry@gmail.com> 1574890113 -0600\ncommitter GitHub <noreply@github.com> 1574890113 -0600\n\nRollup merge of #66305 - elichai:2019-11-array_ffi, r=eddyb\n\nAdd by-value arrays to `improper_ctypes` lint\n\nHi,\nC doesn't have a notion of passing arrays by value, only by reference/pointer.\nRust currently will pass it correctly by reference by it looks very misleading, and can confuse the borrow checker to think a move had occurred.\n\nFixes #58905 and fixes #24578.\n\nWe could also improve the borrow checker here but I think it's kinda a waste of work if we instead just tell the user it's an invalid FFI call.\n\n(My first PR to `rustc` so if I missed some test or formatting guideline please tell me :) )\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "html_url": "https://github.com/rust-lang/rust/commit/2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92b7052b711c2097565816797347e1652be08fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92b7052b711c2097565816797347e1652be08fa", "html_url": "https://github.com/rust-lang/rust/commit/b92b7052b711c2097565816797347e1652be08fa"}, {"sha": "b3666b64738980579f05eec0cfae43f917f74a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3666b64738980579f05eec0cfae43f917f74a29", "html_url": "https://github.com/rust-lang/rust/commit/b3666b64738980579f05eec0cfae43f917f74a29"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "34241b845be04882c8c9e1415831a4299eac3702", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "patch": "@@ -591,6 +591,23 @@ fn is_repr_nullable_ptr<'tcx>(\n }\n \n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n+\n+    /// Check if the type is array and emit an unsafe type lint.\n+    fn check_for_array_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+        if let ty::Array(..) = ty.kind {\n+            self.emit_ffi_unsafe_type_lint(\n+                ty,\n+                sp,\n+                \"passing raw arrays by value is not FFI-safe\",\n+                Some(\"consider passing a pointer to the array\"),\n+            );\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+\n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self,\n@@ -825,7 +842,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::Ref(_, ty, _) => self.check_type_for_ffi(cache, ty),\n \n-            ty::Array(ty, _) => self.check_type_for_ffi(cache, ty),\n+            ty::Array(inner_ty, _) => self.check_type_for_ffi(cache, inner_ty),\n \n             ty::FnPtr(sig) => {\n                 match sig.abi() {\n@@ -937,7 +954,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>, is_static: bool) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n         if self.check_for_opaque_ty(sp, ty) {\n@@ -948,6 +965,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+        // C doesn't really support passing arrays by value.\n+        // The only way to pass an array by value is through a struct.\n+        // So we first test that the top level isn't an array,\n+        // and then recursively check the types inside.\n+        if !is_static && self.check_for_array_ty(sp, ty) {\n+            return;\n+        }\n \n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n@@ -966,21 +990,21 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n         }\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);\n             }\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty);\n+        self.check_type_for_ffi_and_report_errors(span, ty, true);\n     }\n }\n "}, {"sha": "a439a1f339aea6e6521600683dc947f522232cae", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "patch": "@@ -65,6 +65,10 @@ extern {\n     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n+    pub fn raw_array(arr: [u8; 8]); //~ ERROR: uses type `[u8; 8]`\n+\n+    pub static static_u128_type: u128; //~ ERROR: uses type `u128`\n+    pub static static_u128_array_type: [u128; 16]; //~ ERROR: uses type `u128`\n \n     pub fn good3(fptr: Option<extern fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);\n@@ -83,6 +87,9 @@ extern {\n     pub fn good17(p: TransparentCustomZst);\n     #[allow(improper_ctypes)]\n     pub fn good18(_: &String);\n+    pub fn good20(arr: *const [u8; 8]);\n+    pub static good21: [u8; 8];\n+\n }\n \n #[allow(improper_ctypes)]"}, {"sha": "e6bb49afb880f8d3cdf188b684189cc1aeae09cb", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f1a4b3748d4632b0519097ee993136c3d5dc6ed/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=2f1a4b3748d4632b0519097ee993136c3d5dc6ed", "patch": "@@ -197,5 +197,30 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 20 previous errors\n+error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:68:27\n+   |\n+LL |     pub fn raw_array(arr: [u8; 8]);\n+   |                           ^^^^^^^ not FFI-safe\n+   |\n+   = help: consider passing a pointer to the array\n+   = note: passing raw arrays by value is not FFI-safe\n+\n+error: `extern` block uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:70:34\n+   |\n+LL |     pub static static_u128_type: u128;\n+   |                                  ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` block uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:71:40\n+   |\n+LL |     pub static static_u128_array_type: [u128; 16];\n+   |                                        ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: aborting due to 23 previous errors\n "}]}