{"sha": "135657206fba40c3f6138362b62457f4452e578b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNTY1NzIwNmZiYTQwYzNmNjEzODM2MmI2MjQ1N2Y0NDUyZTU3OGI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-04-16T15:09:51Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-04-16T15:09:51Z"}, "message": "MIR: Do not require END_BLOCK to always exist\n\nOnce upon a time, along with START_BLOCK and END_BLOCK in the castle of important blocks also lived\na RESUME_BLOCK (or was it UNWIND_BLOCK? Either works, I don\u2019t remember anymore). This trinity of\nimportant blocks were required to always exist from the birth to death of the MIR-land they\nbelonged to.\n\nSome time later, it was discovered that RESUME_BLOCK was just a lazy goon enjoying comfortable life\nin the light of fame of the other two. Needless to say, once found out, the RESUME_BLOCK was\nquickly slain and disposed of.\n\nNow, the all-seeing eye of ours discovers that END_BLOCK is actually the more evil and better\ndisguised twin of the slain RESUME_BLOCK. Thus END_BLOCK gets slain and quickly disposed\nof. Glory to the START_BLOCK, one and only lord of the important blocks\u2019 castle!\n\n---\n\nBasically, all this does, is removing restriction for END_BLOCK to exist past the first invocation\nof RemoveDeadBlocks pass. This way for functions whose CFG does not reach the `END_BLOCK` end up\nnot containing the block.\n\nAs far as the implementation goes, I\u2019m not entirely satisfied with the `BasicBlock::end_block`, I\nhad hoped to make `new` a `const fn` and then just have a `const END_BLOCK` private to mir::build,\nbut it turns out that constant functions don\u2019t yet support conditionals nor a way to assert.", "tree": {"sha": "5fbaf639d44be9aa5067217b43997e23e284691e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fbaf639d44be9aa5067217b43997e23e284691e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/135657206fba40c3f6138362b62457f4452e578b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/135657206fba40c3f6138362b62457f4452e578b", "html_url": "https://github.com/rust-lang/rust/commit/135657206fba40c3f6138362b62457f4452e578b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/135657206fba40c3f6138362b62457f4452e578b/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1", "html_url": "https://github.com/rust-lang/rust/commit/073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "67cd28c30e6b5875d3695c50b0d4dc86652c0197", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -59,9 +59,6 @@ pub struct Mir<'tcx> {\n /// where execution begins\n pub const START_BLOCK: BasicBlock = BasicBlock(0);\n \n-/// where execution ends, on normal return\n-pub const END_BLOCK: BasicBlock = BasicBlock(1);\n-\n impl<'tcx> Mir<'tcx> {\n     pub fn all_basic_blocks(&self) -> Vec<BasicBlock> {\n         (0..self.basic_blocks.len())\n@@ -216,6 +213,13 @@ impl BasicBlock {\n         BasicBlock(index as u32)\n     }\n \n+    /// Returns a BasicBlock with index 1. This is actual end block (containing\n+    /// the Return terminator) only during the building of MIR and should not be\n+    /// used outside that.\n+    pub const fn end_block() -> BasicBlock {\n+        BasicBlock(1)\n+    }\n+\n     /// Extract the index.\n     pub fn index(self) -> usize {\n         self.0 as usize\n@@ -305,8 +309,7 @@ pub enum TerminatorKind<'tcx> {\n     Resume,\n \n     /// Indicates a normal return. The ReturnPointer lvalue should\n-    /// have been filled in by now. This should only occur in the\n-    /// `END_BLOCK`.\n+    /// have been filled in by now. This should occur at most once.\n     Return,\n \n     /// Drop the Lvalue"}, {"sha": "976d13fca29d6a59bc772eb8cbe2b0da49fbca2f", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -262,7 +262,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     }\n                 };\n                 let extent = this.extent_of_return_scope();\n-                this.exit_scope(expr_span, extent, block, END_BLOCK);\n+                this.exit_scope(expr_span, extent, block, BasicBlock::end_block());\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Call { ty, fun, args } => {"}, {"sha": "a92d686b85d12826e71c0349a2dc7ad57c0ac462", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -183,7 +183,8 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n     };\n \n     assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n-    assert_eq!(builder.cfg.start_new_block(), END_BLOCK);\n+    let end_block = builder.cfg.start_new_block();\n+    assert_eq!(end_block, BasicBlock::end_block());\n \n \n     let mut arg_decls = None; // assigned to `Some` in closures below\n@@ -205,11 +206,10 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n         }));\n \n         builder.cfg.terminate(block, call_site_scope_id, span,\n-                              TerminatorKind::Goto { target: END_BLOCK });\n-        builder.cfg.terminate(END_BLOCK, call_site_scope_id, span,\n+                              TerminatorKind::Goto { target: end_block });\n+        builder.cfg.terminate(end_block, call_site_scope_id, span,\n                               TerminatorKind::Return);\n-\n-        END_BLOCK.unit()\n+        end_block.unit()\n     });\n \n     assert!("}, {"sha": "78d3f4f6207d1a7980c7d5a261a8f2a261666f14", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -21,6 +21,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n \n #![feature(box_patterns)]\n+#![feature(const_fn)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(question_mark)]"}, {"sha": "2099e9a435a0f607112fc1396bc162b92a491ec5", "filename": "src/librustc_mir/transform/remove_dead_blocks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -43,9 +43,8 @@ pub struct RemoveDeadBlocks;\n impl<'tcx> MirPass<'tcx> for RemoveDeadBlocks {\n     fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         let mut seen = BitVector::new(mir.basic_blocks.len());\n-        // These blocks are always required.\n+        // This block is always required.\n         seen.insert(START_BLOCK.index());\n-        seen.insert(END_BLOCK.index());\n \n         let mut worklist = Vec::with_capacity(4);\n         worklist.push(START_BLOCK);"}, {"sha": "eb907f496eb337b2dc89822d497c452b3900cc38", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135657206fba40c3f6138362b62457f4452e578b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=135657206fba40c3f6138362b62457f4452e578b", "patch": "@@ -164,8 +164,6 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n                   .map(|&bb|{\n                       if bb == mir::START_BLOCK {\n                           fcx.new_block(\"start\", None)\n-                      } else if bb == mir::END_BLOCK {\n-                          fcx.new_block(\"end\", None)\n                       } else {\n                           fcx.new_block(&format!(\"{:?}\", bb), None)\n                       }"}]}