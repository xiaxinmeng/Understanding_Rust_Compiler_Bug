{"sha": "8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjM3NzM3YzllOGI3YTM5MGFlMjlkNWZiMGRhYWVlYjQ5NWQyYjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-20T08:27:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-20T08:27:16Z"}, "message": "Merge #8873\n\n8873: Implement import-granularity guessing  r=matklad a=Veykril\n\nThis renames our `MergeBehavior` to `ImportGranularity` as rustfmt has it as the purpose of them are basically the same. `ImportGranularity::Preserve` currently has no specific purpose for us as we don't have an organize imports assist yet, so it currently acts the same as `ImportGranularity::Item`.\r\n\r\nWe now try to guess the import style on a per file basis and fall back to the user granularity setting if the file has no specific style yet or where it is ambiguous. This can be turned off by setting `import.enforceGranularity` to `true`.\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8870\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>", "tree": {"sha": "0f8d45124abe86151e1954c1766534116e174209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8d45124abe86151e1954c1766534116e174209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgph1kCRBK7hj4Ov3rIwAAzicIAJb0ddl8AhVga3CZbE9LEG+i\ncMAmcvdk1KObCeV8rWSXw2QVWYeEuLZqGGKBi/r+uwFL6TiDD8jS1ChDh4v2cmBD\n/FGg1v+CjwOknqp3VJ3kya8TO21qyGGo22AXqf9BZ6CC6hirconZU7J1sr4rAQrz\nNWhVXgz0SXPuNHtv7aenNaiogh04oTkImXfF4lEl6nacSt3QRbFpNfXZVMhnLBdn\nFY4iY85NP7fKcQVnVE9PCtZ2aoHwGqj0zbJ8WOQW0r9kGN/jCONq57Zi98y11gg2\na3yRI4wZhWk5p6Pxof2yUMXrH6jusetZlnsI4shnOFoAEDwCqEyvsiVXsJyn+p8=\n=hcIy\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f8d45124abe86151e1954c1766534116e174209\nparent 764241e38e46316b6370977e8b51e841e93e84b9\nparent 2bf720900f94e36969af44ff8ac52470faf9af4b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621499236 +0000\ncommitter GitHub <noreply@github.com> 1621499236 +0000\n\nMerge #8873\n\n8873: Implement import-granularity guessing  r=matklad a=Veykril\n\nThis renames our `MergeBehavior` to `ImportGranularity` as rustfmt has it as the purpose of them are basically the same. `ImportGranularity::Preserve` currently has no specific purpose for us as we don't have an organize imports assist yet, so it currently acts the same as `ImportGranularity::Item`.\r\n\r\nWe now try to guess the import style on a per file basis and fall back to the user granularity setting if the file has no specific style yet or where it is ambiguous. This can be turned off by setting `import.enforceGranularity` to `true`.\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8870\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "html_url": "https://github.com/rust-lang/rust/commit/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764241e38e46316b6370977e8b51e841e93e84b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/764241e38e46316b6370977e8b51e841e93e84b9", "html_url": "https://github.com/rust-lang/rust/commit/764241e38e46316b6370977e8b51e841e93e84b9"}, {"sha": "2bf720900f94e36969af44ff8ac52470faf9af4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf720900f94e36969af44ff8ac52470faf9af4b", "html_url": "https://github.com/rust-lang/rust/commit/2bf720900f94e36969af44ff8ac52470faf9af4b"}], "stats": {"total": 360, "additions": 312, "deletions": 48}, "files": [{"sha": "1739302bf099a1d6029632d2daeeaf489c130af5", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -4,7 +4,10 @@ use expect_test::expect;\n use hir::Semantics;\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n-    helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap},\n+    helpers::{\n+        insert_use::{ImportGranularity, InsertUseConfig},\n+        SnippetCap,\n+    },\n     source_change::FileSystemEdit,\n     RootDatabase,\n };\n@@ -21,8 +24,9 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     snippet_cap: SnippetCap::new(true),\n     allowed: None,\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Crate),\n+        granularity: ImportGranularity::Crate,\n         prefix_kind: hir::PrefixKind::Plain,\n+        enforce_granularity: true,\n         group: true,\n     },\n };"}, {"sha": "37be575e55bf636006d778a71eb045f8433dcf23", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -3,7 +3,10 @@\n use hir::{PrefixKind, Semantics};\n use ide_db::{\n     base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n-    helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap},\n+    helpers::{\n+        insert_use::{ImportGranularity, InsertUseConfig},\n+        SnippetCap,\n+    },\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -20,8 +23,9 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     add_call_argument_snippets: true,\n     snippet_cap: SnippetCap::new(true),\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Crate),\n+        granularity: ImportGranularity::Crate,\n         prefix_kind: PrefixKind::Plain,\n+        enforce_granularity: true,\n         group: true,\n     },\n };"}, {"sha": "aa61c5bcb467e601cd5dccd462d79cb2de0c474b", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 101, "deletions": 4, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -4,20 +4,36 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, PathSegmentKind},\n+    ast::{self, make, AstNode, AttrsOwner, ModuleItemOwner, PathSegmentKind, VisibilityOwner},\n     ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n-    helpers::merge_imports::{try_merge_imports, use_tree_path_cmp, MergeBehavior},\n+    helpers::merge_imports::{\n+        common_prefix, eq_attrs, eq_visibility, try_merge_imports, use_tree_path_cmp, MergeBehavior,\n+    },\n     RootDatabase,\n };\n \n pub use hir::PrefixKind;\n \n+/// How imports should be grouped into use statements.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum ImportGranularity {\n+    /// Do not change the granularity of any imports and preserve the original structure written by the developer.\n+    Preserve,\n+    /// Merge imports from the same crate into a single use statement.\n+    Crate,\n+    /// Merge imports from the same module into a single use statement.\n+    Module,\n+    /// Flatten imports so that each has its own use statement.\n+    Item,\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct InsertUseConfig {\n-    pub merge: Option<MergeBehavior>,\n+    pub granularity: ImportGranularity,\n+    pub enforce_granularity: bool,\n     pub prefix_kind: PrefixKind,\n     pub group: bool,\n }\n@@ -65,15 +81,96 @@ impl ImportScope {\n             ImportScope::Module(item_list) => ImportScope::Module(item_list.clone_for_update()),\n         }\n     }\n+\n+    fn guess_granularity_from_scope(&self) -> ImportGranularityGuess {\n+        // The idea is simple, just check each import as well as the import and its precedent together for\n+        // whether they fulfill a granularity criteria.\n+        let use_stmt = |item| match item {\n+            ast::Item::Use(use_) => {\n+                let use_tree = use_.use_tree()?;\n+                Some((use_tree, use_.visibility(), use_.attrs()))\n+            }\n+            _ => None,\n+        };\n+        let mut use_stmts = match self {\n+            ImportScope::File(f) => f.items(),\n+            ImportScope::Module(m) => m.items(),\n+        }\n+        .filter_map(use_stmt);\n+        let mut res = ImportGranularityGuess::Unknown;\n+        let (mut prev, mut prev_vis, mut prev_attrs) = match use_stmts.next() {\n+            Some(it) => it,\n+            None => return res,\n+        };\n+        loop {\n+            if let Some(use_tree_list) = prev.use_tree_list() {\n+                if use_tree_list.use_trees().any(|tree| tree.use_tree_list().is_some()) {\n+                    // Nested tree lists can only occur in crate style, or with no proper style being enforced in the file.\n+                    break ImportGranularityGuess::Crate;\n+                } else {\n+                    // Could still be crate-style so continue looking.\n+                    res = ImportGranularityGuess::CrateOrModule;\n+                }\n+            }\n+\n+            let (curr, curr_vis, curr_attrs) = match use_stmts.next() {\n+                Some(it) => it,\n+                None => break res,\n+            };\n+            if eq_visibility(prev_vis, curr_vis.clone()) && eq_attrs(prev_attrs, curr_attrs.clone())\n+            {\n+                if let Some((prev_path, curr_path)) = prev.path().zip(curr.path()) {\n+                    if let Some(_) = common_prefix(&prev_path, &curr_path) {\n+                        if prev.use_tree_list().is_none() && curr.use_tree_list().is_none() {\n+                            // Same prefix but no use tree lists so this has to be of item style.\n+                            break ImportGranularityGuess::Item; // this overwrites CrateOrModule, technically the file doesn't adhere to anything here.\n+                        } else {\n+                            // Same prefix with item tree lists, has to be module style as it\n+                            // can't be crate style since the trees wouldn't share a prefix then.\n+                            break ImportGranularityGuess::Module;\n+                        }\n+                    }\n+                }\n+            }\n+            prev = curr;\n+            prev_vis = curr_vis;\n+            prev_attrs = curr_attrs;\n+        }\n+    }\n+}\n+\n+#[derive(PartialEq, PartialOrd, Debug, Clone, Copy)]\n+enum ImportGranularityGuess {\n+    Unknown,\n+    Item,\n+    Module,\n+    Crate,\n+    CrateOrModule,\n }\n \n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig) {\n     let _p = profile::span(\"insert_use\");\n+    let mut mb = match cfg.granularity {\n+        ImportGranularity::Crate => Some(MergeBehavior::Crate),\n+        ImportGranularity::Module => Some(MergeBehavior::Module),\n+        ImportGranularity::Item | ImportGranularity::Preserve => None,\n+    };\n+    if !cfg.enforce_granularity {\n+        let file_granularity = scope.guess_granularity_from_scope();\n+        mb = match file_granularity {\n+            ImportGranularityGuess::Unknown => mb,\n+            ImportGranularityGuess::Item => None,\n+            ImportGranularityGuess::Module => Some(MergeBehavior::Module),\n+            ImportGranularityGuess::Crate => Some(MergeBehavior::Crate),\n+            ImportGranularityGuess::CrateOrModule => mb.or(Some(MergeBehavior::Crate)),\n+        };\n+    }\n+\n     let use_item =\n         make::use_(None, make::use_tree(path.clone(), None, None, false)).clone_for_update();\n     // merge into existing imports if possible\n-    if let Some(mb) = cfg.merge {\n+    if let Some(mb) = mb {\n         for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 ted::replace(existing_use.syntax(), merged.syntax());"}, {"sha": "78a2a87b385a333072d5204eb8f29ccd4477e24c", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 133, "deletions": 8, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -21,7 +21,7 @@ use crate::bar::A;\n use self::bar::A;\n use super::bar::A;\n use external_crate2::bar::A;\",\n-        None,\n+        ImportGranularity::Item,\n         false,\n         false,\n     );\n@@ -36,7 +36,7 @@ fn insert_not_group_empty() {\n         r\"use external_crate2::bar::A;\n \n \",\n-        None,\n+        ImportGranularity::Item,\n         false,\n         false,\n     );\n@@ -281,7 +281,7 @@ fn insert_empty_module() {\n         r\"{\n     use foo::bar;\n }\",\n-        None,\n+        ImportGranularity::Item,\n         true,\n         true,\n     )\n@@ -631,11 +631,121 @@ fn merge_last_fail3() {\n     );\n }\n \n+#[test]\n+fn guess_empty() {\n+    check_guess(\"\", ImportGranularityGuess::Unknown);\n+}\n+\n+#[test]\n+fn guess_single() {\n+    check_guess(r\"use foo::{baz::{qux, quux}, bar};\", ImportGranularityGuess::Crate);\n+    check_guess(r\"use foo::bar;\", ImportGranularityGuess::Unknown);\n+    check_guess(r\"use foo::bar::{baz, qux};\", ImportGranularityGuess::CrateOrModule);\n+}\n+\n+#[test]\n+fn guess_unknown() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::rab::xuq;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n+#[test]\n+fn guess_item() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Item,\n+    );\n+}\n+\n+#[test]\n+fn guess_module() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::bar::{qux, quux};\n+\",\n+        ImportGranularityGuess::Module,\n+    );\n+    // this is a rather odd case, technically this file isn't following any style properly.\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::{baz::{qux, quux}, bar};\n+\",\n+        ImportGranularityGuess::Module,\n+    );\n+}\n+\n+#[test]\n+fn guess_crate_or_module() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::bar::{qux, quux};\n+\",\n+        ImportGranularityGuess::CrateOrModule,\n+    );\n+}\n+\n+#[test]\n+fn guess_crate() {\n+    check_guess(\n+        r\"\n+use frob::bar::baz;\n+use foo::{baz::{qux, quux}, bar};\n+\",\n+        ImportGranularityGuess::Crate,\n+    );\n+}\n+\n+#[test]\n+fn guess_skips_differing_vis() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+pub use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n+#[test]\n+fn guess_skips_differing_attrs() {\n+    check_guess(\n+        r\"\n+pub use foo::bar::baz;\n+#[doc(hidden)]\n+pub use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n+#[test]\n+fn guess_grouping_matters() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::bar::baz;\n+use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n fn check(\n     path: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    mb: Option<MergeBehavior>,\n+    granularity: ImportGranularity,\n     module: bool,\n     group: bool,\n ) {\n@@ -651,21 +761,30 @@ fn check(\n         .find_map(ast::Path::cast)\n         .unwrap();\n \n-    insert_use(&file, path, InsertUseConfig { merge: mb, prefix_kind: PrefixKind::Plain, group });\n+    insert_use(\n+        &file,\n+        path,\n+        InsertUseConfig {\n+            granularity,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group,\n+        },\n+    );\n     let result = file.as_syntax_node().to_string();\n     assert_eq_text!(ra_fixture_after, &result);\n }\n \n fn check_crate(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Crate), false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Crate, false, true)\n }\n \n fn check_module(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Module), false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Module, false, true)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, None, false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Item, false, true)\n }\n \n fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior) {\n@@ -686,3 +805,9 @@ fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior\n     let result = try_merge_imports(&use0, &use1, mb);\n     assert_eq!(result.map(|u| u.to_string()), None);\n }\n+\n+fn check_guess(ra_fixture: &str, expected: ImportGranularityGuess) {\n+    let syntax = ast::SourceFile::parse(ra_fixture).tree().syntax().clone();\n+    let file = super::ImportScope::from(syntax).unwrap();\n+    assert_eq!(file.guess_granularity_from_scope(), expected);\n+}"}, {"sha": "697e8bcffa90024734d5938eba5ccf79c046d513", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -181,7 +181,7 @@ fn recursive_merge(\n }\n \n /// Traverses both paths until they differ, returning the common prefix of both.\n-fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n+pub fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n     let mut res = None;\n     let mut lhs_curr = lhs.first_qualifier_or_self();\n     let mut rhs_curr = rhs.first_qualifier_or_self();\n@@ -289,7 +289,7 @@ fn path_segment_cmp(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n     a.as_ref().map(ast::NameRef::text).cmp(&b.as_ref().map(ast::NameRef::text))\n }\n \n-fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -> bool {\n+pub fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -> bool {\n     match (vis0, vis1) {\n         (None, None) => true,\n         // FIXME: Don't use the string representation to check for equality\n@@ -299,7 +299,7 @@ fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -\n     }\n }\n \n-fn eq_attrs(\n+pub fn eq_attrs(\n     attrs0: impl Iterator<Item = ast::Attr>,\n     attrs1: impl Iterator<Item = ast::Attr>,\n ) -> bool {"}, {"sha": "b700d025f1039618d224eea3d68828b0bf0a06d3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -12,8 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n use ide_db::helpers::{\n-    insert_use::{InsertUseConfig, PrefixKind},\n-    merge_imports::MergeBehavior,\n+    insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n     SnippetCap,\n };\n use lsp_types::{ClientCapabilities, MarkupKind};\n@@ -35,15 +34,18 @@ use crate::{\n // be specified directly in `package.json`.\n config_data! {\n     struct ConfigData {\n-        /// The strategy to use when inserting new imports or merging imports.\n+        /// How imports should be grouped into use statements.\n+        assist_importGranularity |\n         assist_importMergeBehavior |\n-        assist_importMergeBehaviour: MergeBehaviorDef  = \"\\\"crate\\\"\",\n+        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n+        assist_importEnforceGranularity: bool              = \"false\",\n         /// The path structure for newly inserted paths to use.\n-        assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n+        assist_importPrefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n         /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n-        assist_importGroup: bool                       = \"true\",\n+        assist_importGroup: bool                           = \"true\",\n         /// Show function name and docs in parameter hints.\n-        callInfo_full: bool = \"true\",\n+        callInfo_full: bool                                = \"true\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n@@ -624,11 +626,13 @@ impl Config {\n     }\n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n-            merge: match self.data.assist_importMergeBehavior {\n-                MergeBehaviorDef::None => None,\n-                MergeBehaviorDef::Crate => Some(MergeBehavior::Crate),\n-                MergeBehaviorDef::Module => Some(MergeBehavior::Module),\n+            granularity: match self.data.assist_importGranularity {\n+                ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n+                ImportGranularityDef::Item => ImportGranularity::Item,\n+                ImportGranularityDef::Crate => ImportGranularity::Crate,\n+                ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n+            enforce_granularity: self.data.assist_importEnforceGranularity,\n             prefix_kind: match self.data.assist_importPrefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n@@ -748,8 +752,10 @@ enum ManifestOrProjectJson {\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum MergeBehaviorDef {\n-    None,\n+enum ImportGranularityDef {\n+    Preserve,\n+    #[serde(alias = \"none\")]\n+    Item,\n     #[serde(alias = \"full\")]\n     Crate,\n     #[serde(alias = \"last\")]\n@@ -782,7 +788,7 @@ macro_rules! _config_data {\n     (struct $name:ident {\n         $(\n             $(#[doc=$doc:literal])*\n-            $field:ident $(| $alias:ident)?: $ty:ty = $default:expr,\n+            $field:ident $(| $alias:ident)*: $ty:ty = $default:expr,\n         )*\n     }) => {\n         #[allow(non_snake_case)]\n@@ -794,7 +800,7 @@ macro_rules! _config_data {\n                     $field: get_field(\n                         &mut json,\n                         stringify!($field),\n-                        None$(.or(Some(stringify!($alias))))?,\n+                        None$(.or(Some(stringify!($alias))))*,\n                         $default,\n                     ),\n                 )*}\n@@ -931,6 +937,16 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Merge imports from the same module into a single `use` statement.\"\n             ],\n         },\n+        \"ImportGranularityDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"preserve\", \"crate\", \"module\", \"item\"],\n+            \"enumDescriptions\": [\n+                \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                \"Flatten imports so that each has its own use statement.\"\n+            ],\n+        },\n         \"ImportPrefixDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": ["}, {"sha": "781073fe5b8b6382ea94ec7280d96fcea483ee0c", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -13,7 +13,10 @@\n use std::{convert::TryFrom, sync::Arc};\n \n use ide::{Change, CompletionConfig, FilePosition, TextSize};\n-use ide_db::helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap};\n+use ide_db::helpers::{\n+    insert_use::{ImportGranularity, InsertUseConfig},\n+    SnippetCap,\n+};\n use test_utils::project_root;\n use vfs::{AbsPathBuf, VfsPath};\n \n@@ -133,8 +136,9 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Crate),\n+                granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n+                enforce_granularity: true,\n                 group: true,\n             },\n         };\n@@ -166,8 +170,9 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Crate),\n+                granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n+                enforce_granularity: true,\n                 group: true,\n             },\n         };"}, {"sha": "ef9e0aee9b9efd0ac93acb37ce147293073b0d20", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -1145,7 +1145,7 @@ mod tests {\n \n     use ide::Analysis;\n     use ide_db::helpers::{\n-        insert_use::{InsertUseConfig, PrefixKind},\n+        insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n         SnippetCap,\n     };\n \n@@ -1177,8 +1177,9 @@ mod tests {\n                     add_call_argument_snippets: true,\n                     snippet_cap: SnippetCap::new(true),\n                     insert_use: InsertUseConfig {\n-                        merge: None,\n+                        granularity: ImportGranularity::Item,\n                         prefix_kind: PrefixKind::Plain,\n+                        enforce_granularity: true,\n                         group: true,\n                     },\n                 },"}, {"sha": "c02bab7cc38c2d1ce304711f0aac7a918e44b823", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -1,7 +1,12 @@\n-[[rust-analyzer.assist.importMergeBehavior]]rust-analyzer.assist.importMergeBehavior (default: `\"crate\"`)::\n+[[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n +\n --\n-The strategy to use when inserting new imports or merging imports.\n+How imports should be grouped into use statements.\n+--\n+[[rust-analyzer.assist.importEnforceGranularity]]rust-analyzer.assist.importEnforceGranularity (default: `false`)::\n++\n+--\n+Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n --\n [[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n +"}, {"sha": "1743b374c043b2c1646bee715328eef918d24124", "filename": "editors/code/package.json", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8bb37737c9e8b7a390ae29d5fb0daaeeb495d2b5", "patch": "@@ -385,21 +385,28 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": false,\n-                \"rust-analyzer.assist.importMergeBehavior\": {\n-                    \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n+                \"rust-analyzer.assist.importGranularity\": {\n+                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n                     \"default\": \"crate\",\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"none\",\n+                        \"preserve\",\n                         \"crate\",\n-                        \"module\"\n+                        \"module\",\n+                        \"item\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Do not merge imports at all.\",\n-                        \"Merge imports from the same crate into a single `use` statement.\",\n-                        \"Merge imports from the same module into a single `use` statement.\"\n+                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                        \"Flatten imports so that each has its own use statement.\"\n                     ]\n                 },\n+                \"rust-analyzer.assist.importEnforceGranularity\": {\n+                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.assist.importPrefix\": {\n                     \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n                     \"default\": \"plain\","}]}