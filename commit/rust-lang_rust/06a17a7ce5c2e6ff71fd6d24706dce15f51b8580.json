{"sha": "06a17a7ce5c2e6ff71fd6d24706dce15f51b8580", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YTE3YTdjZTVjMmU2ZmY3MWZkNmQyNDcwNmRjZTE1ZjUxYjg1ODA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T18:57:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T18:57:12Z"}, "message": "manual: disambiguate field expressions from method-call expressions.", "tree": {"sha": "fca5e743a6243868df06627d3f2336c871548dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca5e743a6243868df06627d3f2336c871548dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580", "html_url": "https://github.com/rust-lang/rust/commit/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81196ce96b1d3da7bb718ed4c5e9d4810be896e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81196ce96b1d3da7bb718ed4c5e9d4810be896e", "html_url": "https://github.com/rust-lang/rust/commit/d81196ce96b1d3da7bb718ed4c5e9d4810be896e"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "4e6e0a4184ee7d51cd6c42c5ee264205578b4d54", "filename": "doc/rust.md", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/06a17a7ce5c2e6ff71fd6d24706dce15f51b8580/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=06a17a7ce5c2e6ff71fd6d24706dce15f51b8580", "patch": "@@ -1178,7 +1178,7 @@ trait shape {\n \n This defines a trait with two methods.\n All values that have [implementations](#implementations) of this trait in scope can have their `draw` and `bounding_box` methods called,\n-using `value.bounding_box()` [syntax](#field-expressions).\n+using `value.bounding_box()` [syntax](#method-call-expressions).\n \n Type parameters can be specified for a trait to make it generic.\n These appear after the name, using the same syntax used in [generic\n@@ -1558,13 +1558,27 @@ let base = {x: 1, y: 2, z: 3};\n {y: 0, z: 10, .. base};\n ~~~~\n \n+### Method-call expressions\n+\n+~~~~~~~~{.ebnf .gram}\n+method_call_expr : expr '.' ident paren_expr_list ;\n+~~~~~~~~\n+\n+A _method call_ consists of an expression followed by a single dot, an identifier, and a parenthesized expression-list.\n+Method calls are resolved to methods on specific traits,\n+either statically dispatching to a method if the exact `self`-type of the left-hand-side is known,\n+or dynamically dispatching if the left-hand-side expression is an indirect [trait type](#trait-types).\n+\n+\n ### Field expressions\n \n ~~~~~~~~{.ebnf .gram}\n-field_expr : expr '.' expr\n+field_expr : expr '.' ident\n ~~~~~~~~\n \n-A dot can be used to access a field in a record.\n+A _field expression_ consists of an expression followed by a single dot and an identifier,\n+when not immediately followed by a parenthesized expression-list (the latter is a [method call expression](#method-call-expressions)).\n+A field expression denotes a field of a [structure](#structure-types) or [record](#record-types).\n \n ~~~~~~~~ {.field}\n myrecord.myfield;\n@@ -1574,17 +1588,9 @@ myrecord.myfield;\n A field access on a record is an [lvalue](#lvalues-rvalues-and-temporaries) referring to the value of that field.\n When the field is mutable, it can be [assigned](#assignment-expressions) to.\n \n-When the type of the expression to the left of the dot is a boxed\n-record, it is automatically derferenced to make the field access\n-possible.\n-\n-Field access syntax is overloaded for [trait method](#traits)\n-access. When no matching field is found, or the expression to the left\n-of the dot is not a (boxed) record, an\n-[implementation](#implementations) that matches this type and the\n-given method name is looked up instead, and the result of the\n-expression is this method, with its _self_ argument bound to the\n-expression on the left of the dot.\n+When the type of the expression to the left of the dot is a pointer to a record or structure,\n+it is automatically derferenced to make the field access possible.\n+\n \n ### Vector expressions\n "}]}