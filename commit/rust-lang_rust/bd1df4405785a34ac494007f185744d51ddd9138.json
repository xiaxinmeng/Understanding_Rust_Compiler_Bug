{"sha": "bd1df4405785a34ac494007f185744d51ddd9138", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMWRmNDQwNTc4NWEzNGFjNDk0MDA3ZjE4NTc0NGQ1MWRkZDkxMzg=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-22T21:04:05Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-22T21:04:05Z"}, "message": "Add regression test for #70155.\n\nWith #70166 merged, `RangeInclusive` now derives `PartialEq` and `Eq`, implementing structural equality and as a side effect the range is now usable with const generics, closing #70155.\n\nA test is added to avoid a change to the private fields or the equality implementation of the range from subtly reverting #70155.", "tree": {"sha": "f17404502ff2ee2a8f7b634b20ed469bf229739d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17404502ff2ee2a8f7b634b20ed469bf229739d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1df4405785a34ac494007f185744d51ddd9138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1df4405785a34ac494007f185744d51ddd9138", "html_url": "https://github.com/rust-lang/rust/commit/bd1df4405785a34ac494007f185744d51ddd9138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1df4405785a34ac494007f185744d51ddd9138/comments", "author": null, "committer": null, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "be71b347590c1cd8995f7fc841f1c78073cd6c5e", "filename": "src/test/ui/const-generics/issues/issue-70155.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd1df4405785a34ac494007f185744d51ddd9138/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1df4405785a34ac494007f185744d51ddd9138/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70155.rs?ref=bd1df4405785a34ac494007f185744d51ddd9138", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// Regression test for #70155:\n+// `RangeInclusive` should be usable with const generics\n+\n+struct S<const R: std::ops::RangeInclusive<usize>>;\n+\n+const C : S<{ 0 ..= 999 }> = S;\n+\n+pub fn main() {}"}]}