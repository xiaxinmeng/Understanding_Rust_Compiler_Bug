{"sha": "679f6f347355726f9335fdcbf0d3b81b2e490c38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWY2ZjM0NzM1NTcyNmY5MzM1ZmRjYmYwZDNiODFiMmU0OTBjMzg=", "commit": {"author": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-01-10T10:36:45Z"}, "committer": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-01-10T14:14:38Z"}, "message": "Add `unwrap_unchecked()` methods for `Option` and `Result`\n\nIn particular:\n  - `unwrap_unchecked()` for `Option`.\n  - `unwrap_unchecked()` and `unwrap_err_unchecked()` for `Result`.\n\nThese complement other `*_unchecked()` methods in `core` etc.\n\nCurrently there are a couple of places it may be used inside rustc\n(`LinkedList`, `BTree`). It is also easy to find other repositories\nwith similar functionality.\n\nFixes #48278.\n\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>", "tree": {"sha": "8149085e377e5ed8a6563afd2797cb2b7924577e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8149085e377e5ed8a6563afd2797cb2b7924577e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679f6f347355726f9335fdcbf0d3b81b2e490c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679f6f347355726f9335fdcbf0d3b81b2e490c38", "html_url": "https://github.com/rust-lang/rust/commit/679f6f347355726f9335fdcbf0d3b81b2e490c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679f6f347355726f9335fdcbf0d3b81b2e490c38/comments", "author": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a193921a024e910262ff90bfb028074fddf20d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a193921a024e910262ff90bfb028074fddf20d0", "html_url": "https://github.com/rust-lang/rust/commit/7a193921a024e910262ff90bfb028074fddf20d0"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "18b494b3175b6f98bdc553510fc83a9d13b07058", "filename": "library/core/src/option.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=679f6f347355726f9335fdcbf0d3b81b2e490c38", "patch": "@@ -428,6 +428,37 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns the contained [`Some`] value, consuming the `self` value,\n+    /// without checking that the value is not [`None`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Undefined behavior if the value is [`None`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x = Some(\"air\");\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\");\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\"); // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"none\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_some());\n+        match self {\n+            Some(val) => val,\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "a0f5c7746cc758636821f7a231834e6960d66a4d", "filename": "library/core/src/result.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=679f6f347355726f9335fdcbf0d3b81b2e490c38", "patch": "@@ -229,7 +229,7 @@\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n use crate::ops::{self, Deref, DerefMut};\n-use crate::{convert, fmt};\n+use crate::{convert, fmt, hint};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -821,6 +821,68 @@ impl<T, E> Result<T, E> {\n             Err(e) => op(e),\n         }\n     }\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Err`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Undefined behavior if the value is an [`Err`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"none\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_ok());\n+        match self {\n+            Ok(t) => t,\n+            Err(_) => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n+    /// Returns the contained [`Err`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Ok`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Undefined behavior if the value is an [`Ok`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"none\")]\n+    pub unsafe fn unwrap_err_unchecked(self) -> E {\n+        debug_assert!(self.is_err());\n+        match self {\n+            Ok(_) => unsafe { hint::unreachable_unchecked() },\n+            Err(e) => e,\n+        }\n+    }\n }\n \n impl<T: Copy, E> Result<&T, E> {"}, {"sha": "285e6cdfd39f90c6711527028a7bed7617a09ba4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=679f6f347355726f9335fdcbf0d3b81b2e490c38", "patch": "@@ -62,6 +62,7 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n+#![feature(option_result_unwrap_unchecked)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n #![feature(peekable_peek_mut)]"}, {"sha": "9470451278cc4236ec34d47037458dba285d1bd6", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=679f6f347355726f9335fdcbf0d3b81b2e490c38", "patch": "@@ -160,6 +160,13 @@ fn test_unwrap_or_else() {\n     assert_eq!(x.unwrap_or_else(|| 2), 2);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    assert_eq!(unsafe { Some(1).unwrap_unchecked() }, 1);\n+    let s = unsafe { Some(\"hello\".to_string()).unwrap_unchecked() };\n+    assert_eq!(s, \"hello\");\n+}\n+\n #[test]\n fn test_iter() {\n     let val = 5;"}, {"sha": "7aa44c6e593b3f6fa8a9807df30d420cdde98412", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679f6f347355726f9335fdcbf0d3b81b2e490c38/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=679f6f347355726f9335fdcbf0d3b81b2e490c38", "patch": "@@ -119,6 +119,18 @@ pub fn test_unwrap_or_else_panic() {\n     let _: isize = bad_err.unwrap_or_else(handler);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    let ok: Result<isize, &'static str> = Ok(100);\n+    assert_eq!(unsafe { ok.unwrap_unchecked() }, 100);\n+}\n+\n+#[test]\n+fn test_unwrap_err_unchecked() {\n+    let ok_err: Result<isize, &'static str> = Err(\"Err\");\n+    assert_eq!(unsafe { ok_err.unwrap_err_unchecked() }, \"Err\");\n+}\n+\n #[test]\n pub fn test_expect_ok() {\n     let ok: Result<isize, &'static str> = Ok(100);"}]}