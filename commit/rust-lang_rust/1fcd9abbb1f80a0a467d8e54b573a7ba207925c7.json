{"sha": "1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmY2Q5YWJiYjFmODBhMGE0NjdkOGU1NGI1NzNhN2JhMjA3OTI1Yzc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-05T17:33:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T17:33:06Z"}, "message": "Rollup merge of #83581 - arennow:dir_entry_ext_unix_borrow_name, r=m-ou-se\n\nAdd std::os::unix::fs::DirEntryExt2::file_name_ref(&self) -> &OsStr\n\nGreetings!\n\nThis is my first PR here, so please forgive me if I've missed an important step or otherwise done something wrong. I'm very open to suggestions/fixes/corrections.\n\nThis PR adds a function that allows `std::fs::DirEntry` to vend a borrow of its filename on Unix platforms, which is especially useful for sorting. (Windows has (as I understand it) encoding differences that require an allocation.) This new function sits alongside the cross-platform [`file_name(&self) -> OsString`](https://doc.rust-lang.org/std/fs/struct.DirEntry.html#method.file_name) function.\n\nI pitched this idea in an [internals thread](https://internals.rust-lang.org/t/allow-std-direntry-to-vend-borrows-of-its-filename/14328/4), and no one objected vehemently, so here we are.\n\nI understand features in general, I believe, but I'm not at all confident that my whole-cloth invention of a new feature string (as required by the compiler) was correct (or that the name is appropriate). Further, there doesn't appear to be a test for the sibling `ino` function, so I didn't add one for this similarly trivial function either. If it's desirable that I should do so, I'd be happy to [figure out how to] do that.\n\nThe following is a trivial sample of a use-case for this function, in which directory entries are sorted without any additional allocations:\n\n```rust\nuse std::os::unix::fs::DirEntryExt;\nuse std::{fs, io};\n\nfn main() -> io::Result<()> {\n    let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n    entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n\n    for p in entries {\n        println!(\"{:?}\", p);\n    }\n\n    Ok(())\n}\n```", "tree": {"sha": "89e8ebe5d149d3aea346fa9710a1b87274cb1919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e8ebe5d149d3aea346fa9710a1b87274cb1919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg40JTCRBK7hj4Ov3rIwAAz4wIAJUexzuv08nUSD94HvNBKDG4\neOn3tuUSOLDJfHKr9yHdJmsLIG2gsv7HvTNvRxcN/JtDTU+eV3Qdgw4XIuY8blLI\nhXWOo0ufBzAQoHY8IDHjUwKo4ClRMpuV8dbxgplemkmjj6YFhg8S9jW57hEgCHfq\nIIM0V0tWCg/N2FLWtSvBzJokCFka0O8/pseID6sW1y/Il/w+98WOBsmVy9BLcf1g\nwv7ACfmj6deZHMn0o89dzB4a4lwasSD/R/yRz9cehTdBb5JF7RrdUs/UYriuT3Xg\nzUrrNnheiBpDdF3V32yIsY6a9fgAYo9lfQmiyiUzk4AglYqQLNCmYtQITuhntoI=\n=BjD0\n-----END PGP SIGNATURE-----\n", "payload": "tree 89e8ebe5d149d3aea346fa9710a1b87274cb1919\nparent 6e9b3696d494a32d493585f96f0671123066cd58\nparent 469f4674fbed038c9d7675f1ae08354a6175b8e9\nauthor Yuki Okushi <jtitor@2k36.org> 1625506386 +0900\ncommitter GitHub <noreply@github.com> 1625506386 +0900\n\nRollup merge of #83581 - arennow:dir_entry_ext_unix_borrow_name, r=m-ou-se\n\nAdd std::os::unix::fs::DirEntryExt2::file_name_ref(&self) -> &OsStr\n\nGreetings!\n\nThis is my first PR here, so please forgive me if I've missed an important step or otherwise done something wrong. I'm very open to suggestions/fixes/corrections.\n\nThis PR adds a function that allows `std::fs::DirEntry` to vend a borrow of its filename on Unix platforms, which is especially useful for sorting. (Windows has (as I understand it) encoding differences that require an allocation.) This new function sits alongside the cross-platform [`file_name(&self) -> OsString`](https://doc.rust-lang.org/std/fs/struct.DirEntry.html#method.file_name) function.\n\nI pitched this idea in an [internals thread](https://internals.rust-lang.org/t/allow-std-direntry-to-vend-borrows-of-its-filename/14328/4), and no one objected vehemently, so here we are.\n\nI understand features in general, I believe, but I'm not at all confident that my whole-cloth invention of a new feature string (as required by the compiler) was correct (or that the name is appropriate). Further, there doesn't appear to be a test for the sibling `ino` function, so I didn't add one for this similarly trivial function either. If it's desirable that I should do so, I'd be happy to [figure out how to] do that.\n\nThe following is a trivial sample of a use-case for this function, in which directory entries are sorted without any additional allocations:\n\n```rust\nuse std::os::unix::fs::DirEntryExt;\nuse std::{fs, io};\n\nfn main() -> io::Result<()> {\n    let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n    entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n\n    for p in entries {\n        println!(\"{:?}\", p);\n    }\n\n    Ok(())\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "html_url": "https://github.com/rust-lang/rust/commit/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9b3696d494a32d493585f96f0671123066cd58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9b3696d494a32d493585f96f0671123066cd58", "html_url": "https://github.com/rust-lang/rust/commit/6e9b3696d494a32d493585f96f0671123066cd58"}, {"sha": "469f4674fbed038c9d7675f1ae08354a6175b8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/469f4674fbed038c9d7675f1ae08354a6175b8e9", "html_url": "https://github.com/rust-lang/rust/commit/469f4674fbed038c9d7675f1ae08354a6175b8e9"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "e4ce788f74195cbcdf843367709412004dd4c2c5", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "patch": "@@ -9,6 +9,8 @@ use crate::path::Path;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n // Used for `File::read` on intra-doc links\n+use crate::ffi::OsStr;\n+use crate::sealed::Sealed;\n #[allow(unused_imports)]\n use io::{Read, Write};\n \n@@ -839,6 +841,43 @@ impl DirEntryExt for fs::DirEntry {\n     }\n }\n \n+/// Sealed Unix-specific extension methods for [`fs::DirEntry`].\n+#[unstable(feature = \"dir_entry_ext2\", issue = \"85573\")]\n+pub trait DirEntryExt2: Sealed {\n+    /// Returns a reference to the underlying `OsStr` of this entry's filename.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(dir_entry_ext2)]\n+    /// use std::os::unix::fs::DirEntryExt2;\n+    /// use std::{fs, io};\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n+    ///     entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n+    ///\n+    ///     for p in entries {\n+    ///         println!(\"{:?}\", p);\n+    ///     }\n+    ///\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    fn file_name_ref(&self) -> &OsStr;\n+}\n+\n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl Sealed for fs::DirEntry {}\n+\n+#[unstable(feature = \"dir_entry_ext2\", issue = \"85573\")]\n+impl DirEntryExt2 for fs::DirEntry {\n+    fn file_name_ref(&self) -> &OsStr {\n+        self.as_inner().file_name_os_str()\n+    }\n+}\n+\n /// Creates a new symbolic link on the filesystem.\n ///\n /// The `link` path will be a symbolic link pointing to the `original` path."}, {"sha": "bec0d5898ac9232320f80c3c0261757d360b44ab", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fcd9abbb1f80a0a467d8e54b573a7ba207925c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1fcd9abbb1f80a0a467d8e54b573a7ba207925c7", "patch": "@@ -647,6 +647,10 @@ impl DirEntry {\n     fn name_bytes(&self) -> &[u8] {\n         &*self.name\n     }\n+\n+    pub fn file_name_os_str(&self) -> &OsStr {\n+        OsStr::from_bytes(self.name_bytes())\n+    }\n }\n \n impl OpenOptions {"}]}