{"sha": "b8cd7f7c6df3581df92c2dc51ca23770f468de40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2Q3ZjdjNmRmMzU4MWRmOTJjMmRjNTFjYTIzNzcwZjQ2OGRlNDA=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-03T06:16:01Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T19:08:04Z"}, "message": "add PatIdentRenamer", "tree": {"sha": "5c526e29ad8dc892ac2c4e0d19b17342b0328f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c526e29ad8dc892ac2c4e0d19b17342b0328f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8cd7f7c6df3581df92c2dc51ca23770f468de40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cd7f7c6df3581df92c2dc51ca23770f468de40", "html_url": "https://github.com/rust-lang/rust/commit/b8cd7f7c6df3581df92c2dc51ca23770f468de40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8cd7f7c6df3581df92c2dc51ca23770f468de40/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdaa948c03a33e703eb5830dbed82ee2afe5101", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaa948c03a33e703eb5830dbed82ee2afe5101", "html_url": "https://github.com/rust-lang/rust/commit/9fdaa948c03a33e703eb5830dbed82ee2afe5101"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "5fdfe5040f31c4353ae7a0dbe4b9550ddfcc7e7e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b8cd7f7c6df3581df92c2dc51ca23770f468de40/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cd7f7c6df3581df92c2dc51ca23770f468de40/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b8cd7f7c6df3581df92c2dc51ca23770f468de40", "patch": "@@ -21,6 +21,7 @@ use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use crateid::CrateId;\n use ext::base::*;\n+use fold;\n use fold::*;\n use parse;\n use parse::token::{fresh_mark, fresh_name, intern};\n@@ -856,15 +857,36 @@ impl<'a> Folder for IdentRenamer<'a> {\n     }\n }\n \n-fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n-    /* this discards information in the case of macro-defining macros */\n-    Span {\n-        lo: sp.lo,\n-        hi: sp.hi,\n-        expn_info: cx.backtrace(),\n+/// A tree-folder that applies every rename in its list to\n+/// the idents that are in PatIdent patterns. This is more narrowly\n+/// focused than IdentRenamer, and is needed for FnDecl,\n+/// where we want to rename the args but not the fn name or the generics etc.\n+pub struct PatIdentRenamer<'a> {\n+    renames: &'a mtwt::RenameList,\n+}\n+\n+impl<'a> Folder for PatIdentRenamer<'a> {\n+    fn fold_pat(&mut self, pat: Gc<ast::Pat>) -> Gc<ast::Pat> {\n+        match pat.node {\n+            ast::PatIdent(binding_mode, Spanned{span: ref sp, node: id}, ref sub) => {\n+                let new_ident = Ident{name: id.name,\n+                                      ctxt: mtwt::new_renames(self.renames, id.ctxt)};\n+                let new_node =\n+                    ast::PatIdent(binding_mode,\n+                                  Spanned{span: self.new_span(*sp), node: new_ident},\n+                                  sub.map(|p| self.fold_pat(p)));\n+                box(GC) ast::Pat {\n+                    id: pat.id,\n+                    span: self.new_span(pat.span),\n+                    node: new_node,\n+                }\n+            },\n+            _ => noop_fold_pat(pat, self)\n+        }\n     }\n }\n \n+/// A tree-folder that performs macro expansion\n pub struct MacroExpander<'a, 'b> {\n     pub extsbox: SyntaxEnv,\n     pub cx: &'a mut ExtCtxt<'b>,\n@@ -900,6 +922,15 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n }\n \n+fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n+    /* this discards information in the case of macro-defining macros */\n+    Span {\n+        lo: sp.lo,\n+        hi: sp.hi,\n+        expn_info: cx.backtrace(),\n+    }\n+}\n+\n pub struct ExpansionConfig {\n     pub deriving_hash_type_parameter: bool,\n     pub crate_id: CrateId,"}]}