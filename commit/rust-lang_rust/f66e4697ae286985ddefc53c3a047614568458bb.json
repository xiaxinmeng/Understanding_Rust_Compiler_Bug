{"sha": "f66e4697ae286985ddefc53c3a047614568458bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NmU0Njk3YWUyODY5ODVkZGVmYzUzYzNhMDQ3NjE0NTY4NDU4YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-20T10:14:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-20T10:14:28Z"}, "message": "Auto merge of #58578 - kennytm:rollup, r=kennytm\n\nRollup of 24 pull requests\n\nSuccessful merges:\n\n - #56470 (Modify doctest's auto-`fn main()` to allow `Result`s)\n - #58044 (Make overflowing and wrapping negation const)\n - #58303 (Improve stability tags display)\n - #58336 (Fix search results interactions)\n - #58384 (Fix tables display)\n - #58392 (Use less explicit shifting in std::net::ip)\n - #58409 (rustdoc: respect alternate flag when formatting impl trait)\n - #58456 (Remove no longer accurate diagnostic code about NLL)\n - #58528 (Don't use an allocation for ItemId in StmtKind)\n - #58530 (Monomorphize less code in fs::{read|write})\n - #58534 (Mention capping forbid lints)\n - #58536 (Remove UB in pointer tests)\n - #58538 (Add missing fmt structs examples)\n - #58539 (Add alias methods to PathBuf for underlying OsString (#58234))\n - #58544 (Fix doc for rustc \"-g\" flag)\n - #58545 (Add regression test for a specialization-related ICE (#39448))\n - #58546 (librustc_codegen_llvm => 2018)\n - #58551 (Explain a panic in test case net::tcp::tests::double_bind)\n - #58553 (Use more impl header lifetime elision)\n - #58562 (Fix style nits)\n - #58565 (Fix typo in std::future::Future docs)\n - #58568 (Fix a transposition in driver.rs.)\n - #58569 (Reduce Some Code Repetitions like `(n << amt) >> amt`)\n - #58576 (Stabilize iter::successors and iter::from_fn)", "tree": {"sha": "656e63ba3f96698e771c822a90670f7eb608aa51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656e63ba3f96698e771c822a90670f7eb608aa51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66e4697ae286985ddefc53c3a047614568458bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e4697ae286985ddefc53c3a047614568458bb", "html_url": "https://github.com/rust-lang/rust/commit/f66e4697ae286985ddefc53c3a047614568458bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66e4697ae286985ddefc53c3a047614568458bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e35d270067afff72034312065c48e6d8cfba67", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e35d270067afff72034312065c48e6d8cfba67", "html_url": "https://github.com/rust-lang/rust/commit/74e35d270067afff72034312065c48e6d8cfba67"}, {"sha": "a1a17f5c6663a6a22a58505a6a925b44dfc016e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a17f5c6663a6a22a58505a6a925b44dfc016e9", "html_url": "https://github.com/rust-lang/rust/commit/a1a17f5c6663a6a22a58505a6a925b44dfc016e9"}], "stats": {"total": 1810, "additions": 1177, "deletions": 633}, "files": [{"sha": "d7e789b5a11f7007cb6b88878ad7b58ba33a7a28", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -42,11 +42,11 @@ This flag prints out various information about the compiler.\n \n ## `-g`: include debug information\n \n-A synonym for `-C debug-level=2`.\n+A synonym for `-C debuginfo=2`, for more see [here](codegen-options/index.html#debuginfo).\n \n ## `-O`: optimize your code\n \n-A synonym for `-C opt-level=2`.\n+A synonym for `-C opt-level=2`, for more see [here](codegen-options/index.html#opt-level).\n \n ## `-o`: filename of the output\n "}, {"sha": "d315e0f8ca9e5033eba93ed16ff923f8c09c084a", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -90,7 +90,9 @@ This lint level gives you that.\n 'forbid' is a special lint level that's stronger than 'deny'. It's the same\n as 'deny' in that a lint at this level will produce an error, but unlike the\n 'deny' level, the 'forbid' level can not be overridden to be anything lower\n-than an error.\n+than an error.  However, lint levels may still be capped with `--cap-lints`\n+(see below) so `rustc --cap-lints warn` will make lints set to 'forbid' just\n+warn.\n \n ## Configuring warning levels\n "}, {"sha": "242167aa917864ddf545cf73646dad4343a71397", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -236,6 +236,23 @@ appears to the reader as the initial idea but works with doc tests:\n /// ```\n ```\n \n+As of version 1.34.0, one can also omit the `fn main()`, but you will have to\n+disambiguate the error type:\n+\n+```ignore\n+/// ```\n+/// use std::io;\n+/// let mut input = String::new();\n+/// io::stdin().read_line(&mut input)?;\n+/// # Ok::<(), io:Error>(())\n+/// ```\n+```\n+\n+This is an unfortunate consequence of the `?` operator adding an implicit\n+conversion, so type inference fails because the type is not unique. Please note\n+that you must write the `(())` in one sequence without intermediate whitespace\n+so that rustdoc understands you want an implicit `Result`-returning function.\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "74c80a08b12ab977bdbdf5f8b33d02dc8a4c5432", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -182,8 +182,8 @@ pub enum Cow<'a, B: ?Sized + 'a>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized + ToOwned> Clone for Cow<'a, B> {\n-    fn clone(&self) -> Cow<'a, B> {\n+impl<B: ?Sized + ToOwned> Clone for Cow<'_, B> {\n+    fn clone(&self) -> Self {\n         match *self {\n             Borrowed(b) => Borrowed(b),\n             Owned(ref o) => {\n@@ -193,7 +193,7 @@ impl<'a, B: ?Sized + ToOwned> Clone for Cow<'a, B> {\n         }\n     }\n \n-    fn clone_from(&mut self, source: &Cow<'a, B>) {\n+    fn clone_from(&mut self, source: &Self) {\n         if let Owned(ref mut dest) = *self {\n             if let Owned(ref o) = *source {\n                 o.borrow().clone_into(dest);\n@@ -296,11 +296,11 @@ impl<B: ?Sized + ToOwned> Deref for Cow<'_, B> {\n impl<B: ?Sized> Eq for Cow<'_, B> where B: Eq + ToOwned {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Ord for Cow<'a, B>\n+impl<B: ?Sized> Ord for Cow<'_, B>\n     where B: Ord + ToOwned\n {\n     #[inline]\n-    fn cmp(&self, other: &Cow<'a, B>) -> Ordering {\n+    fn cmp(&self, other: &Self) -> Ordering {\n         Ord::cmp(&**self, &**other)\n     }\n }\n@@ -353,18 +353,18 @@ impl<B: ?Sized> fmt::Display for Cow<'_, B>\n }\n \n #[stable(feature = \"default\", since = \"1.11.0\")]\n-impl<'a, B: ?Sized> Default for Cow<'a, B>\n+impl<B: ?Sized> Default for Cow<'_, B>\n     where B: ToOwned,\n           <B as ToOwned>::Owned: Default\n {\n     /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n-    fn default() -> Cow<'a, B> {\n+    fn default() -> Self {\n         Owned(<B as ToOwned>::Owned::default())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Hash for Cow<'a, B>\n+impl<B: ?Sized> Hash for Cow<'_, B>\n     where B: Hash + ToOwned\n {\n     #[inline]"}, {"sha": "ccd4e9dbc04837996145511f4fd19a5cf9b9e05b", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -947,8 +947,8 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }"}, {"sha": "250927138b315992ac5667d3f662bab1336bb279", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1218,8 +1218,8 @@ impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter {\n             range: self.range.clone(),\n             length: self.length,\n@@ -1441,8 +1441,8 @@ impl<K, V> ExactSizeIterator for Keys<'_, K, V> {\n impl<K, V> FusedIterator for Keys<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Keys<'a, K, V> {\n-    fn clone(&self) -> Keys<'a, K, V> {\n+impl<K, V> Clone for Keys<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Keys { inner: self.inner.clone() }\n     }\n }\n@@ -1478,8 +1478,8 @@ impl<K, V> ExactSizeIterator for Values<'_, K, V> {\n impl<K, V> FusedIterator for Values<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Values<'a, K, V> {\n-    fn clone(&self) -> Values<'a, K, V> {\n+impl<K, V> Clone for Values<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Values { inner: self.inner.clone() }\n     }\n }\n@@ -1606,8 +1606,8 @@ impl<'a, K, V> Range<'a, K, V> {\n impl<K, V> FusedIterator for Range<'_, K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-impl<'a, K, V> Clone for Range<'a, K, V> {\n-    fn clone(&self) -> Range<'a, K, V> {\n+impl<K, V> Clone for Range<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Range {\n             front: self.front,\n             back: self.back,"}, {"sha": "2be6455ad59035bb91824c6ea5d77bcaf15cb94c", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -907,8 +907,8 @@ impl<T: Debug> Debug for BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }\n@@ -963,8 +963,8 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-impl<'a, T> Clone for Range<'a, T> {\n-    fn clone(&self) -> Range<'a, T> {\n+impl<T> Clone for Range<'_, T> {\n+    fn clone(&self) -> Self {\n         Range { iter: self.iter.clone() }\n     }\n }\n@@ -998,8 +998,8 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Difference<'a, T> {\n-    fn clone(&self) -> Difference<'a, T> {\n+impl<T> Clone for Difference<'_, T> {\n+    fn clone(&self) -> Self {\n         Difference {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1036,8 +1036,8 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n impl<T: Ord> FusedIterator for Difference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for SymmetricDifference<'a, T> {\n-    fn clone(&self) -> SymmetricDifference<'a, T> {\n+impl<T> Clone for SymmetricDifference<'_, T> {\n+    fn clone(&self) -> Self {\n         SymmetricDifference {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1070,8 +1070,8 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n impl<T: Ord> FusedIterator for SymmetricDifference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Intersection<'a, T> {\n-    fn clone(&self) -> Intersection<'a, T> {\n+impl<T> Clone for Intersection<'_, T> {\n+    fn clone(&self) -> Self {\n         Intersection {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1108,8 +1108,8 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n impl<T: Ord> FusedIterator for Intersection<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Union<'a, T> {\n-    fn clone(&self) -> Union<'a, T> {\n+impl<T> Clone for Union<'_, T> {\n+    fn clone(&self) -> Self {\n         Union {\n             a: self.a.clone(),\n             b: self.b.clone(),"}, {"sha": "c2ee2e63156cf51cafcb8e116f7c5df31a9bc52e", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1200,16 +1200,16 @@ unsafe impl<T: Send> Send for LinkedList<T> {}\n unsafe impl<T: Sync> Sync for LinkedList<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n+unsafe impl<T: Sync> Send for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n+unsafe impl<T: Sync> Sync for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n+unsafe impl<T: Send> Send for IterMut<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n+unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "f778c4cbfde52dcc904804e989992797cd8dac62", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2132,8 +2132,8 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter {\n             ring: self.ring,\n             tail: self.tail,\n@@ -2225,7 +2225,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n+impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n         f.debug_tuple(\"IterMut\")"}, {"sha": "a351d482fedde745f56ca5fac725216d775ebfa0", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2455,7 +2455,7 @@ pub struct Drain<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Drain\")\n          .field(&self.iter.as_slice())"}, {"sha": "45994c2b4f0f0781cc8dff98b19d00e59c0c473f", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 313, "deletions": 10, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -71,8 +71,10 @@ impl fmt::Write for PadAdapter<'_> {\n ///     }\n /// }\n ///\n-/// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n-/// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() }),\n+///     \"Foo { bar: 10, baz: \\\"Hello World\\\" }\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -96,6 +98,33 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n \n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Bar {\n+    ///     bar: i32,\n+    ///     another: String,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Bar {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_struct(\"Bar\")\n+    ///            .field(\"bar\", &self.bar) // We add `bar` field.\n+    ///            .field(\"another\", &self.another) // We add `another` field.\n+    ///            // We even add a field which doesn't exist (because why not?).\n+    ///            .field(\"not_existing_field\", &1)\n+    ///            .finish() // We're good to go!\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Bar { bar: 10, another: \"Hello World\".to_string() }),\n+    ///     \"Bar { bar: 10, another: \\\"Hello World\\\", not_existing_field: 1 }\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -124,6 +153,32 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Bar {\n+    ///     bar: i32,\n+    ///     baz: String,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Bar {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_struct(\"Bar\")\n+    ///            .field(\"bar\", &self.bar)\n+    ///            .field(\"baz\", &self.baz)\n+    ///            .finish() // You need to call it to \"finish\" the\n+    ///                      // struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Bar { bar: 10, baz: \"Hello World\".to_string() }),\n+    ///     \"Bar { bar: 10, baz: \\\"Hello World\\\" }\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n@@ -168,8 +223,10 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"Foo(10, \"Hello World\")\"\n-/// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+///     \"Foo(10, \\\"Hello World\\\")\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -193,6 +250,28 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n \n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32, String);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_tuple(\"Foo\")\n+    ///            .field(&self.0) // We add the first field.\n+    ///            .field(&self.1) // We add the second field.\n+    ///            .finish() // We're good to go!\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+    ///     \"Foo(10, \\\"Hello World\\\")\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -220,6 +299,29 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32, String);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_tuple(\"Foo\")\n+    ///            .field(&self.0)\n+    ///            .field(&self.1)\n+    ///            .finish() // You need to call it to \"finish\" the\n+    ///                      // tuple formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+    ///     \"Foo(10, \\\"Hello World\\\")\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.fields > 0 {\n@@ -306,8 +408,10 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"{10, 11}\"\n-/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![10, 11])),\n+///     \"{10, 11}\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -329,13 +433,57 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entry(&self.0) // Adds the first \"entry\".\n+    ///            .entry(&self.1) // Adds the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"{[10, 11], [12, 13]}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the set output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entries(self.0.iter()) // Adds the first \"entry\".\n+    ///            .entries(self.1.iter()) // Adds the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"{10, 11, 12, 13}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n         where D: fmt::Debug,\n@@ -348,6 +496,27 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entries(self.0.iter())\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11])),\n+    ///     \"{10, 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n@@ -377,8 +546,10 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"[10, 11]\"\n-/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![10, 11])),\n+///     \"[10, 11]\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -400,13 +571,57 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n \n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds a new entry to the list output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entry(&self.0) // We add the first \"entry\".\n+    ///            .entry(&self.1) // We add the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"[[10, 11], [12, 13]]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the list output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entries(self.0.iter())\n+    ///            .entries(self.1.iter())\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"[10, 11, 12, 13]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n         where D: fmt::Debug,\n@@ -419,6 +634,27 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entries(self.0.iter())\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11])),\n+    ///     \"[10, 11]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n@@ -448,8 +684,10 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"{\"A\": 10, \"B\": 11}\"\n-/// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -471,6 +709,27 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n \n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            .entry(&\"whole\", &self.0) // We add the \"whole\" entry.\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -500,6 +759,29 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Adds the contents of an iterator of entries to the map output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            // We map our vec so each entries' first field will become\n+    ///            // the \"key\".\n+    ///            .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n         where K: fmt::Debug,\n@@ -513,6 +795,27 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         let prefix = if self.is_pretty() && self.has_fields {"}, {"sha": "84e7147153e9edccd89c2ae932abd387e4ebcc9d", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -81,7 +81,7 @@ pub trait Future {\n     ///\n     /// Once a future has completed (returned `Ready` from `poll`),\n     /// then any future calls to `poll` may panic, block forever, or otherwise\n-    /// cause any kind of bad behavior expect causing memory unsafety.\n+    /// cause any kind of bad behavior except causing memory unsafety.\n     /// The `Future` trait itself provides no guarantees about the behavior\n     /// of `poll` after a future has completed.\n     ///\n@@ -92,7 +92,7 @@ pub trait Future {\n     fn poll(self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output>;\n }\n \n-impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n+impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     type Output = F::Output;\n \n     fn poll(mut self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output> {"}, {"sha": "faca785e488c39cc32f5239cf5fd6f022600a121", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -7,7 +7,7 @@ macro_rules! forward_ref_unop {\n     };\n     (impl $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n         #[$attr]\n-        impl<'a> $imp for &'a $t {\n+        impl $imp for &$t {\n             type Output = <$t as $imp>::Output;\n \n             #[inline]"}, {"sha": "5dcca7ee0ca01f394b16e2c536a0e9064e490534", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -326,8 +326,10 @@ pub use self::sources::{Empty, empty};\n pub use self::sources::{Once, once};\n #[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n pub use self::sources::{OnceWith, once_with};\n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n-pub use self::sources::{FromFn, from_fn, Successors, successors};\n+#[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n+pub use self::sources::{FromFn, from_fn};\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n+pub use self::sources::{Successors, successors};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};"}, {"sha": "74ff7f41d76fa603b18cc09961c711728a725685", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -514,7 +514,6 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n /// [module-level documentation]: index.html\n ///\n /// ```\n-/// #![feature(iter_unfold)]\n /// let mut count = 0;\n /// let counter = std::iter::from_fn(move || {\n ///     // Increment our count. This is why we started at zero.\n@@ -530,7 +529,7 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n /// assert_eq!(counter.collect::<Vec<_>>(), &[1, 2, 3, 4, 5]);\n /// ```\n #[inline]\n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n pub fn from_fn<T, F>(f: F) -> FromFn<F>\n     where F: FnMut() -> Option<T>\n {\n@@ -544,10 +543,10 @@ pub fn from_fn<T, F>(f: F) -> FromFn<F>\n ///\n /// [`iter::from_fn`]: fn.from_fn.html\n #[derive(Clone)]\n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n pub struct FromFn<F>(F);\n \n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n impl<T, F> Iterator for FromFn<F>\n     where F: FnMut() -> Option<T>\n {\n@@ -559,7 +558,7 @@ impl<T, F> Iterator for FromFn<F>\n     }\n }\n \n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n impl<F> fmt::Debug for FromFn<F> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"FromFn\").finish()\n@@ -572,13 +571,12 @@ impl<F> fmt::Debug for FromFn<F> {\n /// and calls the given `FnMut(&T) -> Option<T>` closure to compute each item\u2019s successor.\n ///\n /// ```\n-/// #![feature(iter_unfold)]\n /// use std::iter::successors;\n ///\n /// let powers_of_10 = successors(Some(1_u16), |n| n.checked_mul(10));\n /// assert_eq!(powers_of_10.collect::<Vec<_>>(), &[1, 10, 100, 1_000, 10_000]);\n /// ```\n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n pub fn successors<T, F>(first: Option<T>, succ: F) -> Successors<T, F>\n     where F: FnMut(&T) -> Option<T>\n {\n@@ -598,13 +596,13 @@ pub fn successors<T, F>(first: Option<T>, succ: F) -> Successors<T, F>\n ///\n /// [`successors`]: fn.successors.html\n #[derive(Clone)]\n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n pub struct Successors<T, F> {\n     next: Option<T>,\n     succ: F,\n }\n \n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n impl<T, F> Iterator for Successors<T, F>\n     where F: FnMut(&T) -> Option<T>\n {\n@@ -628,12 +626,12 @@ impl<T, F> Iterator for Successors<T, F>\n     }\n }\n \n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n impl<T, F> FusedIterator for Successors<T, F>\n     where F: FnMut(&T) -> Option<T>\n {}\n \n-#[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n+#[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n impl<T: fmt::Debug, F> fmt::Debug for Successors<T, F> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"Successors\")"}, {"sha": "5b7d5f45d9246d947d2edd53fb3feb61bc7b3f65", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1215,7 +1215,7 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n             #[inline]\n-            pub fn wrapping_neg(self) -> Self {\n+            pub const fn wrapping_neg(self) -> Self {\n                 self.overflowing_neg().0\n             }\n         }\n@@ -1569,12 +1569,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            pub fn overflowing_neg(self) -> (Self, bool) {\n-                if self == Self::min_value() {\n-                    (Self::min_value(), true)\n-                } else {\n-                    (-self, false)\n-                }\n+            pub const fn overflowing_neg(self) -> (Self, bool) {\n+                ((!self).wrapping_add(1), self == Self::min_value())\n             }\n         }\n \n@@ -3092,7 +3088,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline]\n-        pub fn wrapping_neg(self) -> Self {\n+        pub const fn wrapping_neg(self) -> Self {\n             self.overflowing_neg().0\n         }\n \n@@ -3397,7 +3393,7 @@ assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2i32 as \", stringify!(\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            pub fn overflowing_neg(self) -> (Self, bool) {\n+            pub const fn overflowing_neg(self) -> (Self, bool) {\n                 ((!self).wrapping_add(1), self != 0)\n             }\n         }"}, {"sha": "60aed7ce09d7f1c825c4c6512ad3ea58aeef5d4d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -874,7 +874,7 @@ impl<T> Option<T> {\n     }\n }\n \n-impl<'a, T: Copy> Option<&'a T> {\n+impl<T: Copy> Option<&T> {\n     /// Maps an `Option<&T>` to an `Option<T>` by copying the contents of the\n     /// option.\n     ///\n@@ -895,7 +895,7 @@ impl<'a, T: Copy> Option<&'a T> {\n     }\n }\n \n-impl<'a, T: Copy> Option<&'a mut T> {\n+impl<T: Copy> Option<&mut T> {\n     /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the\n     /// option.\n     ///\n@@ -916,7 +916,7 @@ impl<'a, T: Copy> Option<&'a mut T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a T> {\n+impl<T: Clone> Option<&T> {\n     /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\n     /// option.\n     ///\n@@ -935,7 +935,7 @@ impl<'a, T: Clone> Option<&'a T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a mut T> {\n+impl<T: Clone> Option<&mut T> {\n     /// Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the\n     /// option.\n     ///"}, {"sha": "d89443662df870349841b6207b839101940bfa95", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2903,7 +2903,7 @@ macro_rules! iterator {\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T> ExactSizeIterator for $name<'a, T> {\n+        impl<T> ExactSizeIterator for $name<'_, T> {\n             #[inline(always)]\n             fn len(&self) -> usize {\n                 len!(self)\n@@ -3098,10 +3098,10 @@ macro_rules! iterator {\n         }\n \n         #[stable(feature = \"fused\", since = \"1.26.0\")]\n-        impl<'a, T> FusedIterator for $name<'a, T> {}\n+        impl<T> FusedIterator for $name<'_, T> {}\n \n         #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-        unsafe impl<'a, T> TrustedLen for $name<'a, T> {}\n+        unsafe impl<T> TrustedLen for $name<'_, T> {}\n     }\n }\n \n@@ -4365,8 +4365,8 @@ pub struct RChunks<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> Clone for RChunks<'a, T> {\n-    fn clone(&self) -> RChunks<'a, T> {\n+impl<T> Clone for RChunks<'_, T> {\n+    fn clone(&self) -> Self {\n         RChunks {\n             v: self.v,\n             chunk_size: self.chunk_size,\n@@ -4455,13 +4455,13 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunks<'a, T> {}\n+impl<T> ExactSizeIterator for RChunks<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunks<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunks<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunks<'a, T> {}\n+impl<T> FusedIterator for RChunks<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4580,13 +4580,13 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunksMut<'a, T> {}\n+impl<T> ExactSizeIterator for RChunksMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksMut<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksMut<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksMut<'a, T> {}\n+impl<T> FusedIterator for RChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4711,10 +4711,10 @@ impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksExact<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksExact<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksExact<'a, T> {}\n+impl<T> FusedIterator for RChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4822,17 +4822,17 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n+impl<T> ExactSizeIterator for RChunksExactMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksExactMut<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksExactMut<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksExactMut<'a, T> {}\n+impl<T> FusedIterator for RChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "8b51d8465141afbd0c1b898e1358086217460463", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -823,7 +823,7 @@ impl FusedIterator for Bytes<'_> {}\n unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n-unsafe impl<'a> TrustedRandomAccess for Bytes<'a> {\n+unsafe impl TrustedRandomAccess for Bytes<'_> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> u8 {\n         self.0.get_unchecked(i)\n     }"}, {"sha": "4cd734bad90a4b6580e34fa8e402e81d717fc61b", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -14,7 +14,6 @@\n #![feature(iter_copied)]\n #![feature(iter_nth_back)]\n #![feature(iter_once_with)]\n-#![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "03fe1fe5a7cf8df93c5c3531c100a65efaa47753", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -40,18 +40,17 @@ fn test() {\n }\n \n #[test]\n-#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_is_null() {\n     let p: *const isize = null();\n     assert!(p.is_null());\n \n-    let q = unsafe { p.offset(1) };\n+    let q = p.wrapping_offset(1);\n     assert!(!q.is_null());\n \n     let mp: *mut isize = null_mut();\n     assert!(mp.is_null());\n \n-    let mq = unsafe { mp.offset(1) };\n+    let mq = mp.wrapping_offset(1);\n     assert!(!mq.is_null());\n \n     // Pointers to unsized types -- slices\n@@ -208,7 +207,6 @@ fn test_ptr_addition() {\n }\n \n #[test]\n-#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_ptr_subtraction() {\n     unsafe {\n         let xs = vec![0,1,2,3,4,5,6,7,8,9];\n@@ -224,8 +222,11 @@ fn test_ptr_subtraction() {\n         let m_start = xs_mut.as_mut_ptr();\n         let mut m_ptr = m_start.offset(9);\n \n-        while m_ptr >= m_start {\n+        loop {\n             *m_ptr += *m_ptr;\n+            if m_ptr == m_start {\n+                break;\n+            }\n             m_ptr = m_ptr.offset(-1);\n         }\n "}, {"sha": "9eeae6eeb5f34819f73d44f8c79b0771ab296632", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -150,9 +150,11 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn pats_all<'b, I: Iterator<Item=&'b P<hir::Pat>>>(&mut self,\n-                                          pats: I,\n-                                          pred: CFGIndex) -> CFGIndex {\n+    fn pats_all<'b, I: Iterator<Item=&'b P<hir::Pat>>>(\n+        &mut self,\n+        pats: I,\n+        pred: CFGIndex\n+    ) -> CFGIndex {\n         //! Handles case where all of the patterns must match.\n         pats.fold(pred, |pred, pat| self.pat(&pat, pred))\n     }"}, {"sha": "00f9fa3a938d6b7c9bb148152a99f2b96cac1201", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -408,11 +408,7 @@ fn bar(x: &str, y: &str) -> &str { }\n fn baz<'a>(x: &'a str, y: &str) -> &str { }\n ```\n \n-Lifetime elision in implementation headers was part of the lifetime elision\n-RFC. It is, however, [currently unimplemented][iss15872].\n-\n [book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n-[iss15872]: https://github.com/rust-lang/rust/issues/15872\n \"##,\n \n E0119: r##\""}, {"sha": "4a2bc213fea80d0c0c86809ad71322e63ef8d3ef", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -953,7 +953,7 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     visitor.visit_id(statement.id);\n     match statement.node {\n         StmtKind::Local(ref local) => visitor.visit_local(local),\n-        StmtKind::Item(ref item) => visitor.visit_nested_item(**item),\n+        StmtKind::Item(item) => visitor.visit_nested_item(item),\n         StmtKind::Expr(ref expression) |\n         StmtKind::Semi(ref expression) => {\n             visitor.visit_expr(expression)"}, {"sha": "9f48a628274db4721a482e6fe8f70bcddee6d295", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -4656,7 +4656,7 @@ impl<'a> LoweringContext<'a> {\n                         hir::Stmt {\n                             id: node_id,\n                             hir_id,\n-                            node: hir::StmtKind::Item(P(item_id)),\n+                            node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })\n@@ -4686,7 +4686,7 @@ impl<'a> LoweringContext<'a> {\n                         hir::Stmt {\n                             id: node_id,\n                             hir_id,\n-                            node: hir::StmtKind::Item(P(item_id)),\n+                            node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })"}, {"sha": "d0b92587b59f007845f9a7963460ac1f5add199f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -964,14 +964,19 @@ pub enum PatKind {\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// `0 <= position <= subpats.len()`\n     Tuple(HirVec<P<Pat>>, Option<usize>),\n+\n     /// A `box` pattern.\n     Box(P<Pat>),\n+\n     /// A reference pattern (e.g., `&mut (a, b)`).\n     Ref(P<Pat>, Mutability),\n+\n     /// A literal.\n     Lit(P<Expr>),\n+\n     /// A range pattern (e.g., `1...2` or `1..2`).\n     Range(P<Expr>, P<Expr>, RangeEnd),\n+\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`.\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n@@ -1175,8 +1180,9 @@ impl fmt::Debug for Stmt {\n pub enum StmtKind {\n     /// A local (`let`) binding.\n     Local(P<Local>),\n+\n     /// An item binding.\n-    Item(P<ItemId>),\n+    Item(ItemId),\n \n     /// An expression without a trailing semi-colon (must have unit type).\n     Expr(P<Expr>),"}, {"sha": "ece649cf1b882f86839dc5eb50a5e77f16a1fba2", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1007,8 +1007,8 @@ impl<'a> State<'a> {\n                 }\n                 self.end()?\n             }\n-            hir::StmtKind::Item(ref item) => {\n-                self.ann.nested(self, Nested::Item(**item))?\n+            hir::StmtKind::Item(item) => {\n+                self.ann.nested(self, Nested::Item(item))?\n             }\n             hir::StmtKind::Expr(ref expr) => {\n                 self.space_if_not_bol()?;"}, {"sha": "f65c09e31343cf12c67c5635763cf90472481f5c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1311,12 +1311,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     Def::Err => {\n                         debug!(\"access to unresolvable pattern {:?}\", pat);\n                         return Err(())\n-                    },\n+                    }\n                     Def::Variant(variant_did) |\n                     Def::VariantCtor(variant_did, ..) => {\n                         self.cat_downcast_if_needed(pat, cmt, variant_did)\n-                    },\n-                    _ => cmt\n+                    }\n+                    _ => cmt,\n                 };\n \n                 for fp in field_pats {\n@@ -1347,7 +1347,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-                PatKind::Box(ref subpat) | PatKind::Ref(ref subpat, _) => {\n+            PatKind::Box(ref subpat) | PatKind::Ref(ref subpat, _) => {\n                 // box p1, &p1, &mut p1.  we can ignore the mutability of\n                 // PatKind::Ref since that information is already contained\n                 // in the type."}, {"sha": "350bc450263226b96d20c35b1ff71f994ec951da", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1167,13 +1167,13 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n #[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n-    // Region bound in a type or fn declaration which will be\n-    // substituted 'early' -- that is, at the same time when type\n-    // parameters are substituted.\n+    /// Region bound in a type or fn declaration which will be\n+    /// substituted 'early' -- that is, at the same time when type\n+    /// parameters are substituted.\n     ReEarlyBound(EarlyBoundRegion),\n \n-    // Region bound in a function scope, which will be substituted when the\n-    // function is called.\n+    /// Region bound in a function scope, which will be substituted when the\n+    /// function is called.\n     ReLateBound(DebruijnIndex, BoundRegion),\n \n     /// When checking a function body, the types of all arguments and so forth"}, {"sha": "841cf98164eb4cbe3a0866b11ee45d9562a84bae", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_codegen_llvm\"\n@@ -10,7 +11,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-cc = \"1.0.1\"\n+cc = \"1.0.1\" # Used to locate MSVC\n num_cpus = \"1.0\"\n rustc-demangle = \"0.1.4\"\n rustc_llvm = { path = \"../librustc_llvm\" }"}, {"sha": "992149f7a47b50e8abc1048d71225dd4c71d9b31", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,12 +1,12 @@\n-use llvm::{self, AttributePlace};\n+use crate::llvm::{self, AttributePlace};\n+use crate::builder::Builder;\n+use crate::context::CodegenCx;\n+use crate::type_::Type;\n+use crate::type_of::{LayoutLlvmExt, PointerKind};\n+use crate::value::Value;\n use rustc_codegen_ssa::MemFlags;\n-use builder::Builder;\n-use context::CodegenCx;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n-use type_::Type;\n-use type_of::{LayoutLlvmExt, PointerKind};\n-use value::Value;\n use rustc_target::abi::call::ArgType;\n \n use rustc_codegen_ssa::traits::*;"}, {"sha": "7430cd3f70961ef223f9037dc6d4604b19d0a15d", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,13 +1,13 @@\n use std::ffi::CString;\n \n-use attributes;\n+use crate::attributes;\n use libc::c_uint;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::ty::TyCtxt;\n use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n \n-use ModuleLlvm;\n-use llvm::{self, False, True};\n+use crate::ModuleLlvm;\n+use crate::llvm::{self, False, True};\n \n pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind) {\n     let llcx = &*mods.llcx;"}, {"sha": "4427308f4155d303753c13fcd7dd3207b2d6b300", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,8 +1,8 @@\n-use llvm;\n-use context::CodegenCx;\n-use type_of::LayoutLlvmExt;\n-use builder::Builder;\n-use value::Value;\n+use crate::llvm;\n+use crate::context::CodegenCx;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::builder::Builder;\n+use crate::value::Value;\n \n use rustc::hir;\n use rustc_codegen_ssa::traits::*;"}, {"sha": "827ebff10f51c1030ce89abe85360af917c6f176", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -15,15 +15,15 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_codegen_ssa::traits::*;\n \n-use abi::Abi;\n-use attributes;\n-use llvm::{self, Attribute};\n-use llvm::AttributePlace::Function;\n-use llvm_util;\n+use crate::abi::Abi;\n+use crate::attributes;\n+use crate::llvm::{self, Attribute};\n+use crate::llvm::AttributePlace::Function;\n+use crate::llvm_util;\n pub use syntax::attr::{self, InlineAttr, OptimizeAttr};\n \n-use context::CodegenCx;\n-use value::Value;\n+use crate::context::CodegenCx;\n+use crate::value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]"}, {"sha": "1c090f14469659799ea636df21ea83ebc73fb5b1", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -7,12 +7,11 @@ use std::path::{Path, PathBuf};\n use std::ptr;\n use std::str;\n \n-use back::bytecode::RLIB_BYTECODE_EXTENSION;\n+use crate::back::bytecode::RLIB_BYTECODE_EXTENSION;\n+use crate::llvm::archive_ro::{ArchiveRO, Child};\n+use crate::llvm::{self, ArchiveKind};\n+use crate::metadata::METADATA_FILENAME;\n use rustc_codegen_ssa::back::archive::find_library;\n-use libc;\n-use llvm::archive_ro::{ArchiveRO, Child};\n-use llvm::{self, ArchiveKind};\n-use metadata::METADATA_FILENAME;\n use rustc::session::Session;\n \n pub struct ArchiveConfig<'a> {"}, {"sha": "a3b34485715a75cc5431d3f10c0205dddee55738", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,13 +1,15 @@\n-use back::wasm;\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::bytecode::RLIB_BYTECODE_EXTENSION;\n+use super::rpath::RPathConfig;\n+use super::rpath;\n+use crate::back::wasm;\n+use crate::metadata::METADATA_FILENAME;\n+use crate::context::get_reloc_model;\n+use crate::llvm;\n use rustc_codegen_ssa::back::linker::Linker;\n use rustc_codegen_ssa::back::link::{remove, ignored_for_lto, each_linked_rlib, linker_and_flavor,\n     get_linker};\n use rustc_codegen_ssa::back::command::Command;\n-use super::rpath::RPathConfig;\n-use super::rpath;\n-use metadata::METADATA_FILENAME;\n use rustc::session::config::{self, DebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::config::{RUST_CGU_EXT, Lto, Sanitizer};\n use rustc::session::filesearch;\n@@ -22,8 +24,6 @@ use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};\n use rustc_data_structures::fx::FxHashSet;\n-use context::get_reloc_model;\n-use llvm;\n \n use std::ascii;\n use std::char;\n@@ -523,7 +523,7 @@ fn link_natively(sess: &Session,\n     }\n \n     {\n-        let target_cpu = ::llvm_util::target_cpu(sess);\n+        let target_cpu = crate::llvm_util::target_cpu(sess);\n         let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n         link_args(&mut *linker, flavor, sess, crate_type, tmpdir,\n                   out_filename, codegen_results);"}, {"sha": "944569c8b744bad4cf1081a822dabe5972780d32", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,25 +1,24 @@\n-use back::bytecode::{DecodedBytecode, RLIB_BYTECODE_EXTENSION};\n+use crate::back::bytecode::{DecodedBytecode, RLIB_BYTECODE_EXTENSION};\n+use crate::back::write::{self, DiagnosticHandlers, with_llvm_pmb, save_temp_bitcode,\n+    to_llvm_opt_settings};\n+use crate::llvm::archive_ro::ArchiveRO;\n+use crate::llvm::{self, True, False};\n+use crate::time_graph::Timeline;\n+use crate::{ModuleLlvm, LlvmCodegenBackend};\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{ModuleConfig, CodegenContext, FatLTOInput};\n use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinShared, ThinModule};\n use rustc_codegen_ssa::traits::*;\n-use back::write::{self, DiagnosticHandlers, with_llvm_pmb, save_temp_bitcode, to_llvm_opt_settings};\n use errors::{FatalError, Handler};\n-use llvm::archive_ro::ArchiveRO;\n-use llvm::{self, True, False};\n use rustc::dep_graph::WorkProduct;\n use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};\n use rustc::util::common::time_ext;\n use rustc_data_structures::fx::FxHashMap;\n-use time_graph::Timeline;\n-use {ModuleLlvm, LlvmCodegenBackend};\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n \n-use libc;\n-\n use std::ffi::{CStr, CString};\n use std::ptr;\n use std::slice;"}, {"sha": "1b16080515235fdc85a5bd784749a5bed5aa6e6b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,28 +1,27 @@\n-use attributes;\n-use back::bytecode::{self, RLIB_BYTECODE_EXTENSION};\n-use back::lto::ThinBuffer;\n+use crate::attributes;\n+use crate::back::bytecode::{self, RLIB_BYTECODE_EXTENSION};\n+use crate::back::lto::ThinBuffer;\n+use crate::base;\n+use crate::consts;\n+use crate::time_graph::Timeline;\n+use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n+use crate::llvm_util;\n+use crate::ModuleLlvm;\n+use crate::type_::Type;\n+use crate::context::{is_pie_binary, get_reloc_model};\n+use crate::common;\n+use crate::LlvmCodegenBackend;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n-use base;\n-use consts;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::config::{self, OutputType, Passes, Lto};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n-use time_graph::Timeline;\n-use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n-use llvm_util;\n-use ModuleLlvm;\n use rustc_codegen_ssa::{ModuleCodegen, CompiledModule};\n use rustc::util::common::time_ext;\n use rustc_fs_util::{path_to_c_string, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use errors::{self, Handler, FatalError};\n-use type_::Type;\n-use context::{is_pie_binary, get_reloc_model};\n-use common;\n-use LlvmCodegenBackend;\n-use rustc_demangle;\n+use errors::{Handler, FatalError};\n \n use std::ffi::{CString, CStr};\n use std::fs;"}, {"sha": "33531bb69485b275daa40bc5d6a186e9d18538e8", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -18,18 +18,18 @@ use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use super::LlvmCodegenBackend;\n \n-use llvm;\n-use metadata;\n+use crate::llvm;\n+use crate::metadata;\n+use crate::builder::Builder;\n+use crate::common;\n+use crate::context::CodegenCx;\n+use crate::monomorphize::partitioning::CodegenUnitExt;\n use rustc::dep_graph;\n use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::TyCtxt;\n use rustc::middle::exported_symbols;\n use rustc::session::config::{self, DebugInfo};\n-use builder::Builder;\n-use common;\n-use context::CodegenCx;\n-use monomorphize::partitioning::CodegenUnitExt;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_data_structures::small_c_str::SmallCStr;\n \n@@ -41,7 +41,7 @@ use std::time::Instant;\n use syntax_pos::symbol::InternedString;\n use rustc::hir::CodegenFnAttrs;\n \n-use value::Value;\n+use crate::value::Value;\n \n \n pub fn write_metadata<'a, 'gcx>("}, {"sha": "39c8f8a09400b07ec636853e9d27f3b42263312c", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,20 +1,19 @@\n-use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{self, False, BasicBlock};\n+use crate::llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n+use crate::llvm::{self, False, BasicBlock};\n+use crate::common::Funclet;\n+use crate::context::CodegenCx;\n+use crate::type_::Type;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::value::Value;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n-use rustc_codegen_ssa::{self, MemFlags};\n-use common::Funclet;\n-use context::CodegenCx;\n-use type_::Type;\n-use type_of::LayoutLlvmExt;\n-use value::Value;\n+use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::hir::def_id::DefId;\n use rustc::session::config;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_codegen_ssa::traits::*;\n-use syntax;\n use rustc_codegen_ssa::base::to_immediate;\n use rustc_codegen_ssa::mir::operand::{OperandValue, OperandRef};\n use rustc_codegen_ssa::mir::place::PlaceRef;"}, {"sha": "43a5767e5c68d4fddfdbfbbac30a16954f3f168c", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -4,11 +4,11 @@\n //! and methods are represented as just a fn ptr and not a full\n //! closure.\n \n-use attributes;\n-use llvm;\n-use monomorphize::Instance;\n-use context::CodegenCx;\n-use value::Value;\n+use crate::attributes;\n+use crate::llvm;\n+use crate::monomorphize::Instance;\n+use crate::context::CodegenCx;\n+use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n use rustc::ty::TypeFoldable;"}, {"sha": "4bd036ea3b17a095c54637cd34b38a9f3451156a", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2,25 +2,25 @@\n \n //! Code that is useful in various codegen modules.\n \n-use llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef};\n-use abi;\n-use consts;\n-use type_::Type;\n-use type_of::LayoutLlvmExt;\n-use value::Value;\n+use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef};\n+use crate::abi;\n+use crate::consts;\n+use crate::type_::Type;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n+use crate::consts::const_alloc_to_llvm;\n use rustc::ty::layout::{HasDataLayout, LayoutOf, self, TyLayout, Size};\n use rustc::mir::interpret::{Scalar, AllocKind, Allocation};\n-use consts::const_alloc_to_llvm;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_uint, c_char};\n \n use syntax::symbol::LocalInternedString;\n use syntax::ast::Mutability;\n \n-pub use context::CodegenCx;\n+pub use crate::context::CodegenCx;\n \n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\"."}, {"sha": "6232d44df5e4e85c6ab3492309d8ac3ff439eadb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,20 +1,20 @@\n+use crate::llvm::{self, SetUnnamedAddr, True};\n+use crate::debuginfo;\n+use crate::monomorphize::MonoItem;\n+use crate::common::CodegenCx;\n+use crate::monomorphize::Instance;\n+use crate::base;\n+use crate::type_::Type;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::value::Value;\n use libc::c_uint;\n-use llvm::{self, SetUnnamedAddr, True};\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n     Pointer, ErrorHandled, GlobalId};\n use rustc::hir::Node;\n-use debuginfo;\n-use monomorphize::MonoItem;\n-use common::CodegenCx;\n-use monomorphize::Instance;\n use syntax_pos::Span;\n use rustc_target::abi::HasDataLayout;\n use syntax_pos::symbol::LocalInternedString;\n-use base;\n-use type_::Type;\n-use type_of::LayoutLlvmExt;\n-use value::Value;\n use rustc::ty::{self, Ty};\n use rustc_codegen_ssa::traits::*;\n "}, {"sha": "d9c4d22b41100df23d0bd05df15026ffd5f7953d", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,14 +1,14 @@\n-use attributes;\n-use llvm;\n+use crate::attributes;\n+use crate::llvm;\n+use crate::debuginfo;\n+use crate::monomorphize::Instance;\n+use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n-use debuginfo;\n-use monomorphize::Instance;\n-use value::Value;\n \n-use monomorphize::partitioning::CodegenUnit;\n-use type_::Type;\n-use type_of::PointeeInfo;\n+use crate::monomorphize::partitioning::CodegenUnit;\n+use crate::type_::Type;\n+use crate::type_of::PointeeInfo;\n use rustc_codegen_ssa::traits::*;\n use libc::c_uint;\n \n@@ -23,15 +23,15 @@ use rustc::util::nodemap::FxHashMap;\n use rustc_target::spec::{HasTargetSpec, Target};\n use rustc_codegen_ssa::callee::resolve_and_get_fn;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n-use callee::get_fn;\n+use crate::callee::get_fn;\n \n use std::ffi::CStr;\n use std::cell::{Cell, RefCell};\n use std::iter;\n use std::str;\n use std::sync::Arc;\n use syntax::symbol::LocalInternedString;\n-use abi::Abi;\n+use crate::abi::Abi;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n@@ -103,7 +103,7 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n         None => &sess.target.target.options.relocation_model[..],\n     };\n \n-    match ::back::write::RELOC_MODEL_ARGS.iter().find(\n+    match crate::back::write::RELOC_MODEL_ARGS.iter().find(\n         |&&arg| arg.0 == reloc_model_arg) {\n         Some(x) => x.1,\n         _ => {\n@@ -121,7 +121,7 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n         None => &sess.target.target.options.tls_model[..],\n     };\n \n-    match ::back::write::TLS_MODEL_ARGS.iter().find(\n+    match crate::back::write::TLS_MODEL_ARGS.iter().find(\n         |&&arg| arg.0 == tls_model_arg) {\n         Some(x) => x.1,\n         _ => {\n@@ -154,7 +154,7 @@ pub unsafe fn create_module(\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = ::back::write::create_target_machine(tcx, false);\n+        let tm = crate::back::write::create_target_machine(tcx, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n@@ -212,7 +212,7 @@ pub unsafe fn create_module(\n impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     crate fn new(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n                  codegen_unit: Arc<CodegenUnit<'tcx>>,\n-                 llvm_module: &'ll ::ModuleLlvm)\n+                 llvm_module: &'ll crate::ModuleLlvm)\n                  -> Self {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n@@ -377,7 +377,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // Returns a Value of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     fn eh_unwind_resume(&self) -> &'ll Value {\n-        use attributes;\n+        use crate::attributes;\n         let unwresume = &self.eh_unwind_resume;\n         if let Some(llfn) = unwresume.get() {\n             return llfn;"}, {"sha": "3ba05bf1b5c917f5a92d32bf88545c6330ead293", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2,9 +2,9 @@ use rustc_codegen_ssa::debuginfo::{FunctionDebugContext, FunctionDebugContextDat\n use super::metadata::file_metadata;\n use super::utils::{DIB, span_start};\n \n-use llvm;\n-use llvm::debuginfo::{DIScope, DISubprogram};\n-use common::CodegenCx;\n+use crate::llvm;\n+use crate::llvm::debuginfo::{DIScope, DISubprogram};\n+use crate::common::CodegenCx;\n use rustc::mir::{Mir, SourceScope};\n \n use libc::c_uint;"}, {"sha": "2555c92fb7c32fc0014b8a37f90bf42f786830a4", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,11 +1,11 @@\n // .debug_gdb_scripts binary section.\n \n-use llvm;\n+use crate::llvm;\n \n-use common::CodegenCx;\n-use builder::Builder;\n+use crate::common::CodegenCx;\n+use crate::builder::Builder;\n+use crate::value::Value;\n use rustc::session::config::DebugInfo;\n-use value::Value;\n use rustc_codegen_ssa::traits::*;\n \n use syntax::attr;"}, {"sha": "da9ff54b0626c0816d9b9e873618bfbdc5ca7521", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -7,23 +7,23 @@ use super::utils::{debug_context, DIB, span_start,\n use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n use super::{CrateDebugContext};\n+use crate::abi;\n+use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n-use abi;\n-use value::Value;\n \n-use llvm;\n-use llvm::debuginfo::{DIArray, DIType, DIFile, DIScope, DIDescriptor,\n+use crate::llvm;\n+use crate::llvm::debuginfo::{DIArray, DIType, DIFile, DIScope, DIDescriptor,\n                       DICompositeType, DILexicalBlock, DIFlags, DebugEmissionKind};\n-use llvm_util;\n+use crate::llvm_util;\n \n+use crate::common::CodegenCx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ich::NodeIdHashingMode;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n-use common::CodegenCx;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, Integer, IntegerExt, LayoutOf,\n                         PrimitiveExt, Size, TyLayout};"}, {"sha": "664ca2533878d1e7bb3e886df4ae7f969ea52561", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -10,24 +10,24 @@ use self::type_names::compute_debuginfo_type_name;\n use self::metadata::{type_metadata, file_metadata, TypeMap};\n use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n-use llvm;\n-use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags,\n+use crate::llvm;\n+use crate::llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags,\n     DISPFlags, DILexicalBlock};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::subst::{Substs, UnpackedKind};\n \n-use abi::Abi;\n-use common::CodegenCx;\n-use builder::Builder;\n-use monomorphize::Instance;\n+use crate::abi::Abi;\n+use crate::common::CodegenCx;\n+use crate::builder::Builder;\n+use crate::monomorphize::Instance;\n+use crate::value::Value;\n use rustc::ty::{self, ParamEnv, Ty, InstanceDef};\n use rustc::mir;\n use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use value::Value;\n use rustc_codegen_ssa::debuginfo::{FunctionDebugContext, MirDebugScope, VariableAccess,\n     VariableKind, FunctionDebugContextData};\n "}, {"sha": "f7c377adf35297297904ec609c794678a3485eec", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2,14 +2,14 @@\n \n use super::metadata::{unknown_file_metadata, UNKNOWN_LINE_NUMBER};\n use super::utils::{DIB, debug_context};\n-use monomorphize::Instance;\n+use crate::monomorphize::Instance;\n use rustc::ty;\n \n-use llvm;\n-use llvm::debuginfo::DIScope;\n+use crate::llvm;\n+use crate::llvm::debuginfo::DIScope;\n+use crate::common::CodegenCx;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n-use common::CodegenCx;\n \n use rustc_data_structures::small_c_str::SmallCStr;\n "}, {"sha": "f7620e11c233d0f16c86faafd434cf365432eb64", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -4,9 +4,9 @@ use super::utils::{debug_context, span_start};\n use super::metadata::UNKNOWN_COLUMN_NUMBER;\n use rustc_codegen_ssa::debuginfo::FunctionDebugContext;\n \n-use llvm;\n-use llvm::debuginfo::DIScope;\n-use builder::Builder;\n+use crate::llvm;\n+use crate::llvm::debuginfo::DIScope;\n+use crate::builder::Builder;\n use rustc_codegen_ssa::traits::*;\n \n use libc::c_uint;"}, {"sha": "1697bb7b52dbd83c8373830aa599b841664d3ee8", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,6 +1,6 @@\n // Type Names for Debug Info.\n \n-use common::CodegenCx;\n+use crate::common::CodegenCx;\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n@@ -125,7 +125,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n \n             let abi = sig.abi();\n-            if abi != ::abi::Abi::Rust {\n+            if abi != crate::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");"}, {"sha": "e1b299df6c312e95981705eea448fd704dac6da3", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -6,12 +6,12 @@ use super::namespace::item_namespace;\n use rustc::hir::def_id::DefId;\n use rustc::ty::DefIdTree;\n \n-use llvm;\n-use llvm::debuginfo::{DIScope, DIBuilder, DIDescriptor, DIArray};\n-use common::{CodegenCx};\n+use crate::llvm;\n+use crate::llvm::debuginfo::{DIScope, DIBuilder, DIDescriptor, DIArray};\n+use crate::common::{CodegenCx};\n use rustc_codegen_ssa::traits::*;\n \n-use syntax_pos::{self, Span};\n+use syntax_pos::Span;\n \n pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n {"}, {"sha": "3febcb019ce29ff32677661acd312c0220e93037", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -11,18 +11,18 @@\n //! * Use define_* family of methods when you might be defining the Value.\n //! * When in doubt, define.\n \n-use llvm;\n-use llvm::AttributePlace::Function;\n+use crate::llvm;\n+use crate::llvm::AttributePlace::Function;\n+use crate::abi::{FnType, FnTypeExt};\n+use crate::attributes;\n+use crate::context::CodegenCx;\n+use crate::type_::Type;\n+use crate::value::Value;\n use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use abi::{FnType, FnTypeExt};\n-use attributes;\n-use context::CodegenCx;\n-use type_::Type;\n use rustc_codegen_ssa::traits::*;\n-use value::Value;\n \n /// Declare a function.\n ///"}, {"sha": "3785e19af970f32a0d064fa3fd30cf5b12100a59", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,26 +1,26 @@\n #![allow(non_upper_case_globals)]\n \n-use attributes;\n-use llvm;\n-use llvm_util;\n-use abi::{Abi, FnType, LlvmType, PassMode};\n+use crate::attributes;\n+use crate::llvm;\n+use crate::llvm_util;\n+use crate::abi::{Abi, FnType, LlvmType, PassMode};\n+use crate::context::CodegenCx;\n+use crate::type_::Type;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::builder::Builder;\n+use crate::value::Value;\n+use crate::va_arg::emit_va_arg;\n use rustc_codegen_ssa::MemFlags;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::base::{to_immediate, wants_msvc_seh, compare_simd_types};\n-use context::CodegenCx;\n-use type_::Type;\n-use type_of::LayoutLlvmExt;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n use syntax::symbol::Symbol;\n-use builder::Builder;\n-use value::Value;\n-use va_arg::emit_va_arg;\n \n use rustc_codegen_ssa::traits::*;\n \n@@ -192,8 +192,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"size_of_val\" => {\n                 let tp_ty = substs.type_at(0);\n                 if let OperandValue::Pair(_, meta) = args[0].val {\n-                    let (llsize, _) =\n-                        glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n+                    let (llsize, _) = glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n                     llsize\n                 } else {\n                     self.const_usize(self.size_of(tp_ty).bytes())\n@@ -206,8 +205,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"min_align_of_val\" => {\n                 let tp_ty = substs.type_at(0);\n                 if let OperandValue::Pair(_, meta) = args[0].val {\n-                    let (_, llalign) =\n-                        glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n+                    let (_, llalign) = glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n                     llalign\n                 } else {\n                     self.const_usize(self.align_of(tp_ty).bytes())"}, {"sha": "9219f42d6923580e1a550ba6a4f5392ee8db7369", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -21,6 +21,9 @@\n #![feature(concat_idents)]\n #![feature(link_args)]\n #![feature(static_nobundle)]\n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+#![allow(elided_lifetimes_in_paths)]\n \n use back::write::create_target_machine;\n use syntax_pos::symbol::Symbol;\n@@ -29,16 +32,11 @@ extern crate flate2;\n #[macro_use] extern crate bitflags;\n extern crate libc;\n #[macro_use] extern crate rustc;\n-extern crate jobserver;\n-extern crate num_cpus;\n extern crate rustc_mir;\n extern crate rustc_allocator;\n-extern crate rustc_apfloat;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n-extern crate rustc_demangle;\n extern crate rustc_incremental;\n-extern crate rustc_llvm;\n extern crate rustc_codegen_utils;\n extern crate rustc_codegen_ssa;\n extern crate rustc_fs_util;\n@@ -48,9 +46,7 @@ extern crate rustc_fs_util;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n extern crate serialize;\n-extern crate cc; // Used to locate MSVC\n extern crate tempfile;\n-extern crate memmap;\n \n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, FatLTOInput};"}, {"sha": "a8d272f157ce3367f843e646fcfb60c7d7699a8c", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -4,7 +4,7 @@ pub use self::OptimizationDiagnosticKind::*;\n pub use self::Diagnostic::*;\n \n use libc::c_uint;\n-use value::Value;\n+use crate::value::Value;\n \n use super::{DiagnosticInfo, Twine};\n "}, {"sha": "e761d2247a7575b139fce53f72301de53b729a72", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -9,8 +9,6 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n-use syntax;\n-use rustc_codegen_ssa;\n \n use super::RustString;\n "}, {"sha": "543cc912930fddbc97e998b5599ae177a99195a7", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -16,7 +16,7 @@ use std::string::FromUtf8Error;\n use std::slice;\n use std::ffi::CStr;\n use std::cell::RefCell;\n-use libc::{self, c_uint, c_char, size_t};\n+use libc::{c_uint, c_char, size_t};\n use rustc_data_structures::small_c_str::SmallCStr;\n \n pub mod archive_ro;"}, {"sha": "5fea9c8747e0fc965fba69cf9d4544d9851377f8", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,6 +1,6 @@\n+use crate::back::write::create_informational_target_machine;\n+use crate::llvm;\n use syntax_pos::symbol::Symbol;\n-use back::write::create_informational_target_machine;\n-use llvm;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n use rustc_target::spec::MergeFunctions;"}, {"sha": "a2df687d58f5acd3915a2220d12ec5c2160b5442", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,8 +1,8 @@\n+use crate::llvm;\n+use crate::llvm::{False, ObjectFile, mk_section_iter};\n+use crate::llvm::archive_ro::ArchiveRO;\n use rustc::middle::cstore::MetadataLoader;\n use rustc_target::spec::Target;\n-use llvm;\n-use llvm::{False, ObjectFile, mk_section_iter};\n-use llvm::archive_ro::ArchiveRO;\n \n use rustc_data_structures::owning_ref::OwningRef;\n use std::path::Path;"}, {"sha": "4fe6a1f4f4b1ca132e031470fafe00b7d1ecbb7b", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,9 +1,9 @@\n-use attributes;\n-use base;\n-use context::CodegenCx;\n-use llvm;\n-use monomorphize::Instance;\n-use type_of::LayoutLlvmExt;\n+use crate::attributes;\n+use crate::base;\n+use crate::context::CodegenCx;\n+use crate::llvm;\n+use crate::monomorphize::Instance;\n+use crate::type_of::LayoutLlvmExt;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;"}, {"sha": "ca61987e12f7a076c82a4fbf68e9bf53a7c5d34d", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,22 +1,22 @@\n #![allow(non_upper_case_globals)]\n \n-pub use llvm::Type;\n+pub use crate::llvm::Type;\n \n-use llvm;\n-use llvm::{Bool, False, True};\n-use context::CodegenCx;\n+use crate::llvm;\n+use crate::llvm::{Bool, False, True};\n+use crate::context::CodegenCx;\n+use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n-use value::Value;\n \n+use crate::common;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::abi::{LlvmType, FnTypeExt};\n use rustc::util::nodemap::FxHashMap;\n use rustc::ty::Ty;\n use rustc::ty::layout::TyLayout;\n use rustc_target::abi::call::{CastTarget, FnType, Reg};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use common;\n use rustc_codegen_ssa::common::TypeKind;\n-use type_of::LayoutLlvmExt;\n-use abi::{LlvmType, FnTypeExt};\n \n use std::fmt;\n use std::cell::RefCell;\n@@ -82,7 +82,6 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn type_i16(&self) -> &'ll Type {\n         unsafe {\n-\n             llvm::LLVMInt16TypeInContext(self.llcx)\n         }\n     }"}, {"sha": "fb5624d56078e7149133124576360145919e4cdb", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,12 +1,12 @@\n-use abi::{FnType, FnTypeExt};\n-use common::*;\n+use crate::abi::{FnType, FnTypeExt};\n+use crate::common::*;\n+use crate::type_::Type;\n use rustc::hir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc_target::abi::FloatTy;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use rustc_codegen_ssa::traits::*;\n-use type_::Type;\n \n use std::fmt::Write;\n "}, {"sha": "8719390b51acaa64dcd724ccafaa01681374f377", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,11 +1,11 @@\n-use builder::Builder;\n+use crate::builder::Builder;\n+use crate::type_::Type;\n+use crate::type_of::LayoutLlvmExt;\n+use crate::value::Value;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::traits::{BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods};\n use rustc::ty::layout::{Align, HasDataLayout, HasTyCtxt, LayoutOf, Size};\n use rustc::ty::Ty;\n-use type_::Type;\n-use type_of::LayoutLlvmExt;\n-use value::Value;\n \n #[allow(dead_code)]\n fn round_pointer_up_to_alignment("}, {"sha": "68809284bb726988aa05ddd58a7d0737393cb5d6", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1,6 +1,6 @@\n-pub use llvm::Value;\n+pub use crate::llvm::Value;\n \n-use llvm;\n+use crate::llvm;\n \n use std::fmt;\n use std::hash::{Hash, Hasher};"}, {"sha": "b998b77a76b9c4c3ba7fdfd744becfa4be588ae6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1172,7 +1172,7 @@ pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n     cstore::provide_extern(providers);\n }\n \n-/// Runs the resolution, typec-hecking, region checking and other\n+/// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>("}, {"sha": "96d2c90345933d7487bb101f5e95286dec6fdd35", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -338,6 +338,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n             }\n+\n             _ => {\n                 let place = unpack!(block = self.as_place(block, initializer));\n                 self.place_into_pattern(block, irrefutable_pat, &place, true)\n@@ -534,6 +535,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     self.visit_bindings(subpattern, pattern_user_ty, f);\n                 }\n             }\n+\n             PatternKind::Array {\n                 ref prefix,\n                 ref slice,\n@@ -556,10 +558,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     self.visit_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n             }\n+\n             PatternKind::Constant { .. } | PatternKind::Range { .. } | PatternKind::Wild => {}\n+\n             PatternKind::Deref { ref subpattern } => {\n                 self.visit_bindings(subpattern, pattern_user_ty.deref(), f);\n             }\n+\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n                 ascription: hair::pattern::Ascription {"}, {"sha": "01f8cbfbe8e2b2a4d727647966bf8ed412ed73ba", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -45,10 +45,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Tries to simplify `match_pair`, returning true if\n+    /// Tries to simplify `match_pair`, returning `Ok(())` if\n     /// successful. If successful, new match pairs and bindings will\n     /// have been pushed into the candidate. If no simplification is\n-    /// possible, Err is returned and no changes are made to\n+    /// possible, `Err` is returned and no changes are made to\n     /// candidate.\n     fn simplify_match_pair<'pat>(&mut self,\n                                  match_pair: MatchPair<'pat, 'tcx>,\n@@ -174,7 +174,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 } else {\n                     Err(match_pair)\n                 }\n-            },\n+            }\n \n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n                 self.prefix_slice_suffix(&mut candidate.match_pairs,"}, {"sha": "a41d3895d6d3cfcace3d167745f430ca6461f159", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -35,10 +35,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            PatternKind::Constant { .. }\n-            if is_switch_ty(match_pair.pattern.ty) => {\n-                // for integers, we use a SwitchInt match, which allows\n-                // us to handle more cases\n+            PatternKind::Constant { .. } if is_switch_ty(match_pair.pattern.ty) => {\n+                // For integers, we use a `SwitchInt` match, which allows\n+                // us to handle more cases.\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::SwitchInt {\n@@ -253,12 +252,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             TestKind::Eq { value, mut ty } => {\n                 let val = Operand::Copy(place.clone());\n                 let mut expect = self.literal_operand(test.span, ty, value);\n-                // Use PartialEq::eq instead of BinOp::Eq\n+                // Use `PartialEq::eq` instead of `BinOp::Eq`\n                 // (the binop can only handle primitives)\n                 let fail = self.cfg.start_new_block();\n                 if !ty.is_scalar() {\n-                    // If we're using b\"...\" as a pattern, we need to insert an\n-                    // unsizing coercion, as the byte string has the type &[u8; N].\n+                    // If we're using `b\"...\"` as a pattern, we need to insert an\n+                    // unsizing coercion, as the byte string has the type `&[u8; N]`.\n                     //\n                     // We want to do this even when the scrutinee is a reference to an\n                     // array, so we can call `<[u8]>::eq` rather than having to find an\n@@ -503,6 +502,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 resulting_candidates[variant_index.as_usize()].push(new_candidate);\n                 true\n             }\n+\n             (&TestKind::Switch { .. }, _) => false,\n \n             // If we are performing a switch over integers, then this informs integer\n@@ -539,7 +539,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             (&TestKind::SwitchInt { .. }, _) => false,\n \n-\n             (&TestKind::Len { len: test_len, op: BinOp::Eq },\n              &PatternKind::Slice { ref prefix, ref slice, ref suffix }) => {\n                 let pat_len = (prefix.len() + suffix.len()) as u64;"}, {"sha": "b583b184a4103146286e5d81a7e53d5cf9d55a5f", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -13,7 +13,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         subpatterns.iter()\n                    .map(|fieldpat| {\n                        let place = place.clone().field(fieldpat.field,\n-                                                         fieldpat.pattern.ty);\n+                                                       fieldpat.pattern.ty);\n                        MatchPair::new(place, &fieldpat.pattern)\n                    })\n                    .collect()"}, {"sha": "6910fb7e988bb268ddf27f964bc94d352bff948c", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -634,8 +634,8 @@ impl<'tcx> Witness<'tcx> {\n /// but is instead bounded by the maximum fixed length of slice patterns in\n /// the column of patterns being analyzed.\n ///\n-/// We make sure to omit constructors that are statically impossible. eg for\n-/// Option<!> we do not include Some(_) in the returned list of constructors.\n+/// We make sure to omit constructors that are statically impossible. E.g., for\n+/// `Option<!>`, we do not include `Some(_)` in the returned list of constructors.\n fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   pcx: PatternContext<'tcx>)\n                                   -> Vec<Constructor<'tcx>>\n@@ -1347,7 +1347,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n /// This computes the arity of a constructor. The arity of a constructor\n /// is how many subpattern patterns of that constructor should be expanded to.\n ///\n-/// For instance, a tuple pattern (_, 42, Some([])) has the arity of 3.\n+/// For instance, a tuple pattern `(_, 42, Some([]))` has the arity of 3.\n /// A struct pattern's arity is the number of fields it contains, etc.\n fn constructor_arity(cx: &MatchCheckCtxt<'a, 'tcx>, ctor: &Constructor<'tcx>, ty: Ty<'tcx>) -> u64 {\n     debug!(\"constructor_arity({:#?}, {:?})\", ctor, ty);\n@@ -1357,7 +1357,7 @@ fn constructor_arity(cx: &MatchCheckCtxt<'a, 'tcx>, ctor: &Constructor<'tcx>, ty\n             Slice(length) => length,\n             ConstantValue(_) => 0,\n             _ => bug!(\"bad slice pattern {:?} {:?}\", ctor, ty)\n-        },\n+        }\n         ty::Ref(..) => 1,\n         ty::Adt(adt, _) => {\n             adt.variants[ctor.variant_index_for_adt(cx, adt)].fields.len() as u64\n@@ -1381,7 +1381,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n             Slice(length) => (0..length).map(|_| ty).collect(),\n             ConstantValue(_) => vec![],\n             _ => bug!(\"bad slice pattern {:?} {:?}\", ctor, ty)\n-        },\n+        }\n         ty::Ref(_, rty, _) => vec![rty],\n         ty::Adt(adt, substs) => {\n             if adt.is_box() {"}, {"sha": "7c44d1bf2c9369d2dd5cca0df6d4bd19de32bead", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -375,7 +375,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 },\n                                 _ => bug!(),\n                             }\n-                        },\n+                        }\n \n                         hir::MatchSource::ForLoopDesugar |\n                         hir::MatchSource::Normal => {\n@@ -391,7 +391,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 err.span_label(catchall, \"matches any value\");\n                             }\n                             err.emit();\n-                        },\n+                        }\n \n                         // Unreachable patterns in try expressions occur when one of the arms\n                         // are an uninhabited type. Which is OK.\n@@ -436,7 +436,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                     let (tail, head) = witnesses.split_last().unwrap();\n                     let head: Vec<_> = head.iter().map(|w| w.to_string()).collect();\n                     format!(\"`{}` and `{}`\", head.join(\"`, `\"), tail)\n-                },\n+                }\n                 _ => {\n                     let (head, tail) = witnesses.split_at(LIMIT);\n                     let head: Vec<_> = head.iter().map(|w| w.to_string()).collect();\n@@ -446,7 +446,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n             let label_text = match witnesses.len() {\n                 1 => format!(\"pattern {} not covered\", joined_patterns),\n-                _ => format!(\"patterns {} not covered\", joined_patterns)\n+                _ => format!(\"patterns {} not covered\", joined_patterns),\n             };\n             create_e0004(cx.tcx.sess, sp,\n                             format!(\"non-exhaustive patterns: {} not covered\",\n@@ -456,7 +456,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         NotUseful => {\n             // This is good, wildcard pattern isn't reachable\n-        },\n+        }\n         _ => bug!()\n     }\n }"}, {"sha": "4d571f4f78296124d665a00d3818c5244e38d0c2", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -965,7 +965,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Constant {\n                     value: cv,\n                 }\n-            },\n+            }\n             ty::Adt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n                 self.tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n@@ -978,7 +978,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                     self.tcx.item_path_str(adt_def.did));\n                 self.tcx.sess.span_err(span, &msg);\n                 PatternKind::Wild\n-            },\n+            }\n             ty::Adt(adt_def, substs) if adt_def.is_enum() => {\n                 let variant_index = const_variant_index(\n                     self.tcx, self.param_env, cv\n@@ -993,7 +993,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     variant_index,\n                     subpatterns,\n                 }\n-            },\n+            }\n             ty::Adt(adt_def, _) => {\n                 let struct_var = adt_def.non_enum_variant();\n                 PatternKind::Leaf {\n@@ -1018,7 +1018,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Constant {\n                     value: cv,\n                 }\n-            },\n+            }\n         };\n \n         Pattern {\n@@ -1252,19 +1252,19 @@ pub fn compare_const_vals<'a, 'gcx, 'tcx>(\n                 let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n                 l.partial_cmp(&r)\n-            },\n+            }\n             ty::Float(ast::FloatTy::F64) => {\n                 let l = ::rustc_apfloat::ieee::Double::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Double::from_bits(b);\n                 l.partial_cmp(&r)\n-            },\n+            }\n             ty::Int(_) => {\n                 let layout = tcx.layout_of(ty).ok()?;\n                 assert!(layout.abi.is_signed());\n                 let a = sign_extend(a, layout.size);\n                 let b = sign_extend(b, layout.size);\n                 Some((a as i128).cmp(&(b as i128)))\n-            },\n+            }\n             _ => Some(a.cmp(&b)),\n         }\n     }"}, {"sha": "c6902ddb3c6a65775a1fef69db5076497bafc14f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -10,6 +10,7 @@ use rustc::mir::interpret::{\n     GlobalId, AllocId, InboundsCheck,\n     ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind,\n+    sign_extend, truncate,\n };\n use super::{\n     EvalContext, Machine, AllocMap, Allocation, AllocationExtra,\n@@ -633,20 +634,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     Err(_) => return err!(InvalidDiscriminant(raw_discr.erase_tag())),\n                 };\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n-                    let i = bits_discr as i128;\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the layout discriminant\n-                    let shift = 128 - discr_val.layout.size.bits();\n-                    let sexted = (i << shift) >> shift;\n+                    let sexted = sign_extend(bits_discr, discr_val.layout.size) as i128;\n                     // and then zeroing with the typeck discriminant type\n                     let discr_ty = rval.layout.ty\n                         .ty_adt_def().expect(\"tagged layout corresponds to adt\")\n                         .repr\n                         .discr_type();\n-                    let discr_ty = layout::Integer::from_attr(self, discr_ty);\n-                    let shift = 128 - discr_ty.size().bits();\n+                    let size = layout::Integer::from_attr(self, discr_ty).size();\n                     let truncatee = sexted as u128;\n-                    (truncatee << shift) >> shift\n+                    truncate(truncatee, size)\n                 } else {\n                     bits_discr\n                 };"}, {"sha": "df7835214ebb6d3183a90ab3cbd43ae29b10dd88", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -49,8 +49,11 @@ pub struct AbiSpace(pub Abi);\n pub struct Function<'a> {\n     /// The declaration to emit.\n     pub decl: &'a clean::FnDecl,\n-    /// The length of the function's \"name\", used to determine line-wrapping.\n-    pub name_len: usize,\n+    /// The length of the function header and name. In other words, the number of characters in the\n+    /// function declaration up to but not including the parentheses.\n+    ///\n+    /// Used to determine line-wrapping.\n+    pub header_len: usize,\n     /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n     pub indent: usize,\n     /// Whether the function is async or not.\n@@ -675,7 +678,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl {}\", GenericBounds(bounds))\n+            if f.alternate() {\n+                write!(f, \"impl {:#}\", GenericBounds(bounds))\n+            } else {\n+                write!(f, \"impl {}\", GenericBounds(bounds))\n+            }\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {\n@@ -844,7 +851,7 @@ impl fmt::Display for clean::FnDecl {\n \n impl<'a> fmt::Display for Function<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &Function { decl, name_len, indent, asyncness } = self;\n+        let &Function { decl, header_len, indent, asyncness } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -899,6 +906,8 @@ impl<'a> fmt::Display for Function<'a> {\n             }\n         }\n \n+        let mut args_plain = format!(\"({})\", args_plain);\n+\n         if decl.variadic {\n             args.push_str(\",<br> ...\");\n             args_plain.push_str(\", ...\");\n@@ -917,13 +926,8 @@ impl<'a> fmt::Display for Function<'a> {\n             output.to_string()\n         };\n \n-        let pad = \" \".repeat(name_len);\n-        let plain = format!(\"{pad}({args}){arrow}\",\n-                        pad = pad,\n-                        args = args_plain,\n-                        arrow = arrow_plain);\n-\n-        let output = if plain.len() > 80 {\n+        let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n+        let output = if declaration_len > 80 {\n             let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n             let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n             format!(\"({args}{close}){arrow}\","}, {"sha": "d037154272db6cdfbb384ffb08e2f841cd8c28c9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -2787,8 +2787,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        <tr class='{stab}{add}module-item'>\\\n                            <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n                                   title='{title}'>{name}</a>{unsafety_flag}</td>\\\n-                           <td class='docblock-short'>{stab_tags}{docs}\\\n-                           </td>\\\n+                           <td class='docblock-short'>{stab_tags}{docs}</td>\\\n                        </tr>\",\n                        name = *myitem.name.as_ref().unwrap(),\n                        stab_tags = stability_tags(myitem),\n@@ -2985,14 +2984,16 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    let name_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                           VisSpace(&it.visibility),\n-                           ConstnessSpace(f.header.constness),\n-                           UnsafetySpace(f.header.unsafety),\n-                           AsyncSpace(f.header.asyncness),\n-                           AbiSpace(f.header.abi),\n-                           it.name.as_ref().unwrap(),\n-                           f.generics).len();\n+    let header_len = format!(\n+        \"{}{}{}{}{:#}fn {}{:#}\",\n+        VisSpace(&it.visibility),\n+        ConstnessSpace(f.header.constness),\n+        UnsafetySpace(f.header.unsafety),\n+        AsyncSpace(f.header.asyncness),\n+        AbiSpace(f.header.abi),\n+        it.name.as_ref().unwrap(),\n+        f.generics\n+    ).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n@@ -3008,7 +3009,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n            decl = Function {\n               decl: &f.decl,\n-              name_len,\n+              header_len,\n               indent: 0,\n               asyncness: f.header.asyncness,\n            })?;\n@@ -3423,16 +3424,18 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                 href(did).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n-        let mut head_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                                   VisSpace(&meth.visibility),\n-                                   ConstnessSpace(header.constness),\n-                                   UnsafetySpace(header.unsafety),\n-                                   AsyncSpace(header.asyncness),\n-                                   AbiSpace(header.abi),\n-                                   name,\n-                                   *g).len();\n+        let mut header_len = format!(\n+            \"{}{}{}{}{:#}fn {}{:#}\",\n+            VisSpace(&meth.visibility),\n+            ConstnessSpace(header.constness),\n+            UnsafetySpace(header.unsafety),\n+            AsyncSpace(header.asyncness),\n+            AbiSpace(header.abi),\n+            name,\n+            *g\n+        ).len();\n         let (indent, end_newline) = if parent == ItemType::Trait {\n-            head_len += 4;\n+            header_len += 4;\n             (4, false)\n         } else {\n             (0, true)\n@@ -3450,7 +3453,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                generics = *g,\n                decl = Function {\n                    decl: d,\n-                   name_len: head_len,\n+                   header_len,\n                    indent,\n                    asyncness: header.asyncness,\n                },"}, {"sha": "1849e53d937aded2c276208d53e1e0f6e2683d4c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1196,7 +1196,7 @@ if (!DOMTokenList.prototype.remove) {\n                 var actives = [[], [], []];\n                 // \"current\" is used to know which tab we're looking into.\n                 var current = 0;\n-                onEachLazy(document.getElementsByClassName(\"search-results\"), function(e) {\n+                onEachLazy(document.getElementById(\"results\").childNodes, function(e) {\n                     onEachLazy(e.getElementsByClassName(\"highlighted\"), function(e) {\n                         actives[current].push(e);\n                     });\n@@ -1213,7 +1213,7 @@ if (!DOMTokenList.prototype.remove) {\n                     removeClass(actives[currentTab][0], \"highlighted\");\n                 } else if (e.which === 40) { // down\n                     if (!actives[currentTab].length) {\n-                        var results = document.getElementsByClassName(\"search-results\");\n+                        var results = document.getElementById(\"results\").childNodes;\n                         if (results.length > 0) {\n                             var res = results[currentTab].getElementsByClassName(\"result\");\n                             if (res.length > 0) {"}, {"sha": "787f3c7f48004f342502e9a19b7279a89d357868", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -424,7 +424,8 @@ h4 > code, h3 > code, .invisible > code {\n \n .docblock table {\n \tmargin: .5em 0;\n-\twidth: 100%;\n+\twidth: calc(100% - 2px);\n+\tborder: 1px dashed;\n }\n \n .docblock table td {\n@@ -657,7 +658,7 @@ a {\n \ttransition: border-color 300ms ease;\n \ttransition: border-radius 300ms ease-in-out;\n \ttransition: box-shadow 300ms ease-in-out;\n-\twidth: 100%;\n+\twidth: calc(100% - 32px);\n }\n \n #crate-search + .search-input {"}, {"sha": "e756ab60ccc6d28e3def52300cf4caffdfaf4a28", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -68,20 +68,10 @@ pre {\n \tborder-bottom-color: #DDD;\n }\n \n-.docblock table {\n+.docblock table, .docblock table td, .docblock table th {\n \tborder-color: #ddd;\n }\n \n-.docblock table td {\n-\tborder-top-color: #ddd;\n-\tborder-bottom-color: #ddd;\n-}\n-\n-.docblock table th {\n-\tborder-top-color: #ddd;\n-\tborder-bottom-color: #ddd;\n-}\n-\n .content .method .where,\n .content .fn .where,\n .content .where.fmt-newline {\n@@ -190,15 +180,15 @@ a.test-arrow {\n \tbox-shadow: 1px 0 0 1px #000, 0 0 0 2px transparent;\n }\n \n-.stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #404040; }\n-.stab.internal { background: #FFB9B3; border-color: #B71C1C; color: #404040; }\n-.stab.deprecated { background: #F3DFFF; border-color: #7F0087;  color: #404040; }\n-.stab.portability { background: #C4ECFF; border-color: #7BA5DB;  color: #404040; }\n-\n .module-item .stab {\n \tcolor: #ddd;\n }\n \n+.stab.unstable {background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n+.stab.internal { background: #FFB9B3; border-color: #B71C1C; color: #2f2f2f; }\n+.stab.deprecated { background: #F3DFFF; border-color: #7F0087; color: #2f2f2f; }\n+.stab.portability { background: #C4ECFF; border-color: #7BA5DB; color: #2f2f2f; }\n+\n #help > div {\n \tbackground: #4d4d4d;\n \tborder-color: #bfbfbf;"}, {"sha": "a294f6f2ff12326aba5961de5041297e7d551461", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -67,21 +67,11 @@ pre {\n }\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n-\tborder-bottom-color: #DDD;\n-}\n-\n-.docblock table {\n-\tborder-color: #ddd;\n-}\n-\n-.docblock table td {\n-\tborder-top-color: #ddd;\n \tborder-bottom-color: #ddd;\n }\n \n-.docblock table th {\n-\tborder-top-color: #ddd;\n-\tborder-bottom-color: #ddd;\n+.docblock table, .docblock table td, .docblock table th {\n+\tborder-color: #ddd;\n }\n \n .content .method .where,\n@@ -191,15 +181,15 @@ a.test-arrow {\n \tbox-shadow: 1px 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n }\n \n+.module-item .stab {\n+\tcolor: #000;\n+}\n+\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.internal { background: #FFB9B3; border-color: #B71C1C; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; }\n \n-.module-item .stab {\n-\tcolor: #000;\n-}\n-\n #help > div {\n \tbackground: #e9e9e9;\n \tborder-color: #bfbfbf;"}, {"sha": "2195b90e1dc165f933c7a2b6ae8cee2eb8c5ba66", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -517,13 +517,19 @@ pub fn make_test(s: &str,\n         }\n     }\n \n-    if dont_insert_main || already_has_main {\n+    // FIXME: This code cannot yet handle no_std test cases yet\n+    if dont_insert_main || already_has_main || prog.contains(\"![no_std]\") {\n         prog.push_str(everything_else);\n     } else {\n-        prog.push_str(\"fn main() {\\n\");\n+        let returns_result = everything_else.trim_end().ends_with(\"(())\");\n+        let (main_pre, main_post) = if returns_result {\n+            (\"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n+             \"}\\n_inner().unwrap() }\")\n+        } else {\n+            (\"fn main() {\\n\", \"\\n}\")\n+        };\n+        prog.extend([main_pre, everything_else, main_post].iter().cloned());\n         line_offset += 1;\n-        prog.push_str(everything_else);\n-        prog.push_str(\"\\n}\");\n     }\n \n     debug!(\"final doctest:\\n{}\", prog);"}, {"sha": "a82b9498074c2d412786d99e486002a20ab77e93", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1641,7 +1641,7 @@ impl<K, V, S> Default for HashMap<K, V, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, Q: ?Sized, V, S> Index<&'a Q> for HashMap<K, V, S>\n+impl<K, Q: ?Sized, V, S> Index<&Q> for HashMap<K, V, S>\n     where K: Eq + Hash + Borrow<Q>,\n           Q: Eq + Hash,\n           S: BuildHasher\n@@ -1673,14 +1673,14 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: Debug, V: Debug> fmt::Debug for Iter<'a, K, V> {\n+impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -1726,14 +1726,14 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Keys<'a, K, V> {\n-    fn clone(&self) -> Keys<'a, K, V> {\n+impl<K, V> Clone for Keys<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Keys { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: Debug, V> fmt::Debug for Keys<'a, K, V> {\n+impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -1755,14 +1755,14 @@ pub struct Values<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Values<'a, K, V> {\n-    fn clone(&self) -> Values<'a, K, V> {\n+impl<K, V> Clone for Values<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Values { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V: Debug> fmt::Debug for Values<'a, K, V> {\n+impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -2241,15 +2241,15 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawEntryBuilderMut<'a, K, V, S> {\n+impl<K, V, S> Debug for RawEntryBuilderMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n+impl<K: Debug, V: Debug, S> Debug for RawEntryMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             RawEntryMut::Vacant(ref v) => {\n@@ -2267,7 +2267,7 @@ impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawOccupiedEntryMut\")\n          .field(\"key\", self.key())\n@@ -2277,15 +2277,15 @@ impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawVacantEntryMut<'a, K, V, S> {\n+impl<K, V, S> Debug for RawVacantEntryMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawVacantEntryMut\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawEntryBuilder<'a, K, V, S> {\n+impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n@@ -2312,7 +2312,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for Entry<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for Entry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Vacant(ref v) => {\n@@ -2340,7 +2340,7 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"OccupiedEntry\")\n             .field(\"key\", self.key())\n@@ -2361,7 +2361,7 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a> Debug for VacantEntry<'a, K, V> {\n+impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"VacantEntry\")\n             .field(self.key())\n@@ -2448,15 +2448,15 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n+impl<K, V> FusedIterator for Iter<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n@@ -2472,17 +2472,17 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n+impl<K, V> FusedIterator for IterMut<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for IterMut<'a, K, V>\n+impl<K, V> fmt::Debug for IterMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n@@ -2539,14 +2539,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Keys<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n+impl<K, V> FusedIterator for Keys<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n@@ -2562,14 +2562,14 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Values<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n+impl<K, V> FusedIterator for Values<'_, K, V> {}\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n@@ -2585,17 +2585,17 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     }\n }\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for ValuesMut<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n+impl<K, V> FusedIterator for ValuesMut<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for ValuesMut<'a, K, V>\n+impl<K, V> fmt::Debug for ValuesMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n@@ -2620,17 +2620,17 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     }\n }\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Drain<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Drain<'a, K, V> {}\n+impl<K, V> FusedIterator for Drain<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for Drain<'a, K, V>\n+impl<K, V> fmt::Debug for Drain<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {"}, {"sha": "bfd36a845636321cf0a64a9e2ebdc45cf33b6b39", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1112,8 +1112,8 @@ impl<T, S> IntoIterator for HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> Clone for Iter<'a, K> {\n-    fn clone(&self) -> Iter<'a, K> {\n+impl<K> Clone for Iter<'_, K> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }\n@@ -1129,16 +1129,16 @@ impl<'a, K> Iterator for Iter<'a, K> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n+impl<K> ExactSizeIterator for Iter<'_, K> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K> FusedIterator for Iter<'a, K> {}\n+impl<K> FusedIterator for Iter<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: fmt::Debug> fmt::Debug for Iter<'a, K> {\n+impl<K: fmt::Debug> fmt::Debug for Iter<'_, K> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -1187,16 +1187,16 @@ impl<'a, K> Iterator for Drain<'a, K> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n+impl<K> ExactSizeIterator for Drain<'_, K> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K> FusedIterator for Drain<'a, K> {}\n+impl<K> FusedIterator for Drain<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: fmt::Debug> fmt::Debug for Drain<'a, K> {\n+impl<K: fmt::Debug> fmt::Debug for Drain<'_, K> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let entries_iter = self.iter\n             .inner\n@@ -1207,8 +1207,8 @@ impl<'a, K: fmt::Debug> fmt::Debug for Drain<'a, K> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Intersection<'a, T, S> {\n-    fn clone(&self) -> Intersection<'a, T, S> {\n+impl<T, S> Clone for Intersection<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Intersection { iter: self.iter.clone(), ..*self }\n     }\n }\n@@ -1236,7 +1236,7 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n+impl<T, S> fmt::Debug for Intersection<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1246,15 +1246,15 @@ impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Intersection<'a, T, S>\n+impl<T, S> FusedIterator for Intersection<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Difference<'a, T, S> {\n-    fn clone(&self) -> Difference<'a, T, S> {\n+impl<T, S> Clone for Difference<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Difference { iter: self.iter.clone(), ..*self }\n     }\n }\n@@ -1282,14 +1282,14 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Difference<'a, T, S>\n+impl<T, S> FusedIterator for Difference<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Difference<'a, T, S>\n+impl<T, S> fmt::Debug for Difference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1299,8 +1299,8 @@ impl<'a, T, S> fmt::Debug for Difference<'a, T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {\n-    fn clone(&self) -> SymmetricDifference<'a, T, S> {\n+impl<T, S> Clone for SymmetricDifference<'_, T, S> {\n+    fn clone(&self) -> Self {\n         SymmetricDifference { iter: self.iter.clone() }\n     }\n }\n@@ -1321,14 +1321,14 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for SymmetricDifference<'a, T, S>\n+impl<T, S> FusedIterator for SymmetricDifference<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for SymmetricDifference<'a, T, S>\n+impl<T, S> fmt::Debug for SymmetricDifference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1338,21 +1338,21 @@ impl<'a, T, S> fmt::Debug for SymmetricDifference<'a, T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Union<'a, T, S> {\n-    fn clone(&self) -> Union<'a, T, S> {\n+impl<T, S> Clone for Union<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Union { iter: self.iter.clone() }\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Union<'a, T, S>\n+impl<T, S> FusedIterator for Union<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Union<'a, T, S>\n+impl<T, S> fmt::Debug for Union<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {"}, {"sha": "865431252acf63ad0895c593b8bbc47a3b60e0a6", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -296,7 +296,7 @@ pub trait Put<K, V> {\n }\n \n \n-impl<'t, K, V> Put<K, V> for &'t mut RawTable<K, V> {\n+impl<K, V> Put<K, V> for &mut RawTable<K, V> {\n     unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V> {\n         *self\n     }\n@@ -865,8 +865,8 @@ struct RawBuckets<'a, K, V> {\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n-    fn clone(&self) -> RawBuckets<'a, K, V> {\n+impl<K, V> Clone for RawBuckets<'_, K, V> {\n+    fn clone(&self) -> Self {\n         RawBuckets {\n             raw: self.raw,\n             elems_left: self.elems_left,\n@@ -901,7 +901,7 @@ impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for RawBuckets<'a, K, V> {\n+impl<K, V> ExactSizeIterator for RawBuckets<'_, K, V> {\n     fn len(&self) -> usize {\n         self.elems_left\n     }\n@@ -912,12 +912,12 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'a, K, V>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for Iter<'a, K, V> {}\n-unsafe impl<'a, K: Sync, V: Sync> Send for Iter<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for Iter<'_, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Send for Iter<'_, K, V> {}\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter {\n             iter: self.iter.clone(),\n         }\n@@ -931,10 +931,10 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n     _marker: marker::PhantomData<&'a mut V>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for IterMut<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for IterMut<'_, K, V> {}\n // Both K: Sync and K: Send are correct for IterMut's Send impl,\n // but Send is the more useful bound\n-unsafe impl<'a, K: Send, V: Send> Send for IterMut<'a, K, V> {}\n+unsafe impl<K: Send, V: Send> Send for IterMut<'_, K, V> {}\n \n impl<'a, K: 'a, V: 'a> IterMut<'a, K, V> {\n     pub fn iter(&self) -> Iter<K, V> {\n@@ -968,8 +968,8 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n     marker: marker::PhantomData<&'a RawTable<K, V>>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for Drain<'a, K, V> {}\n-unsafe impl<'a, K: Send, V: Send> Send for Drain<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for Drain<'_, K, V> {}\n+unsafe impl<K: Send, V: Send> Send for Drain<'_, K, V> {}\n \n impl<'a, K, V> Drain<'a, K, V> {\n     pub fn iter(&self) -> Iter<K, V> {\n@@ -994,7 +994,7 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1015,7 +1015,7 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1064,13 +1064,13 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Drain<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Drop for Drain<'a, K, V> {\n+impl<K, V> Drop for Drain<'_, K, V> {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }"}, {"sha": "543973ab991dffba8eb5394aff3ee92cd0c41228", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -399,7 +399,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for SplitPaths<'a> {\n+impl fmt::Debug for SplitPaths<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"SplitPaths { .. }\")\n     }"}, {"sha": "0ef72242827823316e7b11c9f801e5ff6d1fcc77", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -659,8 +659,8 @@ impl fmt::Debug for CStr {\n }\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n-impl<'a> Default for &'a CStr {\n-    fn default() -> &'a CStr {\n+impl Default for &CStr {\n+    fn default() -> Self {\n         const SLICE: &[c_char] = &[0];\n         unsafe { CStr::from_ptr(SLICE.as_ptr()) }\n     }"}, {"sha": "81433832ffc7e4b44a9ffce06fb913b489f15b2b", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -778,10 +778,10 @@ impl Default for Box<OsStr> {\n }\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n-impl<'a> Default for &'a OsStr {\n+impl Default for &OsStr {\n     /// Creates an empty `OsStr`.\n     #[inline]\n-    fn default() -> &'a OsStr {\n+    fn default() -> Self {\n         OsStr::new(\"\")\n     }\n }"}, {"sha": "79b5686faac601a4a55493ec2ae283f1157589b1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -254,10 +254,13 @@ fn initial_buffer_size(file: &File) -> usize {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut file = File::open(path)?;\n-    let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n-    file.read_to_end(&mut bytes)?;\n-    Ok(bytes)\n+    fn inner(path: &Path) -> io::Result<Vec<u8>> {\n+        let mut file = File::open(path)?;\n+        let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n+        file.read_to_end(&mut bytes)?;\n+        Ok(bytes)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Read the entire contents of a file into a string.\n@@ -296,10 +299,13 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[stable(feature = \"fs_read_write\", since = \"1.26.0\")]\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut file = File::open(path)?;\n-    let mut string = String::with_capacity(initial_buffer_size(&file));\n-    file.read_to_string(&mut string)?;\n-    Ok(string)\n+    fn inner(path: &Path) -> io::Result<String> {\n+        let mut file = File::open(path)?;\n+        let mut string = String::with_capacity(initial_buffer_size(&file));\n+        file.read_to_string(&mut string)?;\n+        Ok(string)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Write a slice as the entire contents of a file.\n@@ -326,7 +332,10 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n-    File::create(path)?.write_all(contents.as_ref())\n+    fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n+        File::create(path)?.write_all(contents)\n+    }\n+    inner(path.as_ref(), contents.as_ref())\n }\n \n impl File {\n@@ -618,7 +627,7 @@ impl Seek for File {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a File {\n+impl Read for &File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n@@ -629,14 +638,14 @@ impl<'a> Read for &'a File {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a File {\n+impl Write for &File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Seek for &'a File {\n+impl Seek for &File {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         self.inner.seek(pos)\n     }"}, {"sha": "0c1d155a91688c903ab182454b6555ccdf46b1d8", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1174,7 +1174,7 @@ mod tests {\n         // Issue #32085\n         struct FailFlushWriter<'a>(&'a mut Vec<u8>);\n \n-        impl<'a> Write for FailFlushWriter<'a> {\n+        impl Write for FailFlushWriter<'_> {\n             fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n                 self.0.extend_from_slice(buf);\n                 Ok(buf.len())"}, {"sha": "758d856867291835ad671db1802a65e376261508", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -279,7 +279,7 @@ fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usi\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for Cursor<&'a mut [u8]> {\n+impl Write for Cursor<&mut [u8]> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         slice_write(&mut self.pos, self.inner, buf)\n@@ -288,7 +288,7 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n }\n \n #[stable(feature = \"cursor_mut_vec\", since = \"1.25.0\")]\n-impl<'a> Write for Cursor<&'a mut Vec<u8>> {\n+impl Write for Cursor<&mut Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         vec_write(&mut self.pos, self.inner, buf)\n     }"}, {"sha": "2577b284714ab08687447d524ec28d915f061dfb", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -7,7 +7,7 @@ use mem;\n // Forwarding implementations\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, R: Read + ?Sized> Read for &'a mut R {\n+impl<R: Read + ?Sized> Read for &mut R {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n@@ -34,7 +34,7 @@ impl<'a, R: Read + ?Sized> Read for &'a mut R {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+impl<W: Write + ?Sized> Write for &mut W {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n@@ -52,12 +52,12 @@ impl<'a, W: Write + ?Sized> Write for &'a mut W {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n+impl<S: Seek + ?Sized> Seek for &mut S {\n     #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n+impl<B: BufRead + ?Sized> BufRead for &mut B {\n     #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n \n@@ -152,7 +152,7 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n /// Note that reading updates the slice to point to the yet unread part.\n /// The slice will be empty when EOF is reached.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a [u8] {\n+impl Read for &[u8] {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n@@ -207,7 +207,7 @@ impl<'a> Read for &'a [u8] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for &'a [u8] {\n+impl BufRead for &[u8] {\n     #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }\n \n@@ -221,7 +221,7 @@ impl<'a> BufRead for &'a [u8] {\n /// Note that writing updates the slice to point to the yet unwritten part.\n /// The slice will be empty when it has been completely overwritten.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a mut [u8] {\n+impl Write for &mut [u8] {\n     #[inline]\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());"}, {"sha": "b634ea43e34e536efedf8bbf64b2d25bb736f047", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -299,7 +299,7 @@ const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n struct Guard<'a> { buf: &'a mut Vec<u8>, len: usize }\n \n-impl<'a> Drop for Guard<'a> {\n+impl Drop for Guard<'_> {\n     fn drop(&mut self) {\n         unsafe { self.buf.set_len(self.len); }\n     }\n@@ -1114,7 +1114,7 @@ pub trait Write {\n             error: Result<()>,\n         }\n \n-        impl<'a, T: Write + ?Sized> fmt::Write for Adaptor<'a, T> {\n+        impl<T: Write + ?Sized> fmt::Write for Adaptor<'_, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),"}, {"sha": "0324568e6fb5293b7898c9eda4605d027d45b0a3", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -312,7 +312,7 @@ impl Read for Stdin {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for StdinLock<'a> {\n+impl Read for StdinLock<'_> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n@@ -323,13 +323,13 @@ impl<'a> Read for StdinLock<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for StdinLock<'a> {\n+impl BufRead for StdinLock<'_> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }\n     fn consume(&mut self, n: usize) { self.inner.consume(n) }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StdinLock<'a> {\n+impl fmt::Debug for StdinLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StdinLock { .. }\")\n     }\n@@ -485,7 +485,7 @@ impl Write for Stdout {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for StdoutLock<'a> {\n+impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n@@ -495,7 +495,7 @@ impl<'a> Write for StdoutLock<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StdoutLock<'a> {\n+impl fmt::Debug for StdoutLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StdoutLock { .. }\")\n     }\n@@ -638,7 +638,7 @@ impl Write for Stderr {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for StderrLock<'a> {\n+impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n@@ -648,7 +648,7 @@ impl<'a> Write for StderrLock<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StderrLock<'a> {\n+impl fmt::Debug for StderrLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StderrLock { .. }\")\n     }"}, {"sha": "4b60ee8e6daddc47d04c7fa7296dfdd4a10658d9", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -861,7 +861,7 @@ fn resolve_socket_addr(lh: LookupHost) -> io::Result<vec::IntoIter<SocketAddr>>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> ToSocketAddrs for (&'a str, u16) {\n+impl ToSocketAddrs for (&str, u16) {\n     type Iter = vec::IntoIter<SocketAddr>;\n     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {\n         let (host, port) = *self;\n@@ -904,7 +904,7 @@ impl<'a> ToSocketAddrs for &'a [SocketAddr] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n+impl<T: ToSocketAddrs + ?Sized> ToSocketAddrs for &T {\n     type Iter = T::Iter;\n     fn to_socket_addrs(&self) -> io::Result<T::Iter> {\n         (**self).to_socket_addrs()"}, {"sha": "c856129016814d922541b7b81ea7d7b6799b3922", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -329,6 +329,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n+        // FIXME: should just be u32::from_be_bytes([a, b, c, d]),\n+        // once that method is no longer rustc_const_unstable\n         Ipv4Addr {\n             inner: c::in_addr {\n                 s_addr: u32::to_be(\n@@ -392,6 +394,7 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n+        // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n     }\n \n@@ -618,9 +621,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n \n     /// Converts this address to an IPv4-mapped [IPv6 address].\n@@ -639,9 +646,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0xFF, 0xFF,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n }\n \n@@ -784,7 +795,7 @@ impl From<Ipv4Addr> for u32 {\n     /// ```\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n-        ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n+        u32::from_be_bytes(ip)\n     }\n }\n \n@@ -801,7 +812,7 @@ impl From<u32> for Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n     /// ```\n     fn from(ip: u32) -> Ipv4Addr {\n-        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n+        Ipv4Addr::from(ip.to_be_bytes())\n     }\n }\n \n@@ -909,14 +920,14 @@ impl Ipv6Addr {\n     pub fn segments(&self) -> [u16; 8] {\n         let arr = &self.inner.s6_addr;\n         [\n-            (arr[0] as u16) << 8 | (arr[1] as u16),\n-            (arr[2] as u16) << 8 | (arr[3] as u16),\n-            (arr[4] as u16) << 8 | (arr[5] as u16),\n-            (arr[6] as u16) << 8 | (arr[7] as u16),\n-            (arr[8] as u16) << 8 | (arr[9] as u16),\n-            (arr[10] as u16) << 8 | (arr[11] as u16),\n-            (arr[12] as u16) << 8 | (arr[13] as u16),\n-            (arr[14] as u16) << 8 | (arr[15] as u16),\n+            u16::from_be_bytes([arr[0], arr[1]]),\n+            u16::from_be_bytes([arr[2], arr[3]]),\n+            u16::from_be_bytes([arr[4], arr[5]]),\n+            u16::from_be_bytes([arr[6], arr[7]]),\n+            u16::from_be_bytes([arr[8], arr[9]]),\n+            u16::from_be_bytes([arr[10], arr[11]]),\n+            u16::from_be_bytes([arr[12], arr[13]]),\n+            u16::from_be_bytes([arr[14], arr[15]]),\n         ]\n     }\n \n@@ -1382,21 +1393,43 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n \n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<Ipv6Addr> for u128 {\n+    /// Convert an `Ipv6Addr` into a host byte order `u128`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::new(\n+    ///     0x1020, 0x3040, 0x5060, 0x7080,\n+    ///     0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    /// );\n+    /// assert_eq!(0x102030405060708090A0B0C0D0E0F00D_u128, u128::from(addr));\n+    /// ```\n     fn from(ip: Ipv6Addr) -> u128 {\n-        let ip = ip.segments();\n-        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n-            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n-            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+        let ip = ip.octets();\n+        u128::from_be_bytes(ip)\n     }\n }\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<u128> for Ipv6Addr {\n+    /// Convert a host byte order `u128` into an `Ipv6Addr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from(0x102030405060708090A0B0C0D0E0F00D_u128);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x1020, 0x3040, 0x5060, 0x7080,\n+    ///         0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    ///     ),\n+    ///     addr);\n+    /// ```\n     fn from(ip: u128) -> Ipv6Addr {\n-        Ipv6Addr::new(\n-            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n-            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n-            (ip >> 16) as u16, ip as u16,\n-        )\n+        Ipv6Addr::from(ip.to_be_bytes())\n     }\n }\n "}, {"sha": "51bd76ae4363e4f1e1b2ae7833a394836a2d0b9c", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -580,7 +580,7 @@ impl Write for TcpStream {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a TcpStream {\n+impl Read for &TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n     #[inline]\n@@ -589,7 +589,7 @@ impl<'a> Read for &'a TcpStream {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a TcpStream {\n+impl Write for &TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n@@ -1187,9 +1187,13 @@ mod tests {\n     #[test]\n     fn double_bind() {\n         each_ip(&mut |addr| {\n-            let _listener = t!(TcpListener::bind(&addr));\n+            let listener1 = t!(TcpListener::bind(&addr));\n             match TcpListener::bind(&addr) {\n-                Ok(..) => panic!(),\n+                Ok(listener2) => panic!(\n+                    \"This system (perhaps due to options set by TcpListener::bind) \\\n+                     permits double binding: {:?} and {:?}\",\n+                    listener1, listener2\n+                ),\n                 Err(e) => {\n                     assert!(e.kind() == ErrorKind::ConnectionRefused ||\n                             e.kind() == ErrorKind::Other ||"}, {"sha": "daeac7107a56c6f72463fafc398a7d8ada36112f", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -199,9 +199,9 @@ pub struct AssertUnwindSafe<T>(\n // * Our custom AssertUnwindSafe wrapper is indeed unwind safe\n \n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-impl<'a, T: ?Sized> !UnwindSafe for &'a mut T {}\n+impl<T: ?Sized> !UnwindSafe for &mut T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}\n+impl<T: RefUnwindSafe + ?Sized> UnwindSafe for &T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n@@ -320,7 +320,7 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n+impl<F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n \n     fn poll(self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output> {"}, {"sha": "240b92a17db4ca46a3dfcc9ded510a010fff669b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 103, "deletions": 22, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -457,14 +457,14 @@ impl<'a> cmp::PartialOrd for PrefixComponent<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Ord for PrefixComponent<'a> {\n-    fn cmp(&self, other: &PrefixComponent<'a>) -> cmp::Ordering {\n+impl cmp::Ord for PrefixComponent<'_> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n         cmp::Ord::cmp(&self.parsed, &other.parsed)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Hash for PrefixComponent<'a> {\n+impl Hash for PrefixComponent<'_> {\n     fn hash<H: Hasher>(&self, h: &mut H) {\n         self.parsed.hash(h);\n     }\n@@ -561,14 +561,14 @@ impl<'a> Component<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Component<'a> {\n+impl AsRef<OsStr> for Component<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_os_str()\n     }\n }\n \n #[stable(feature = \"path_component_asref\", since = \"1.25.0\")]\n-impl<'a> AsRef<Path> for Component<'a> {\n+impl AsRef<Path> for Component<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_os_str().as_ref()\n     }\n@@ -630,11 +630,11 @@ pub struct Iter<'a> {\n }\n \n #[stable(feature = \"path_components_debug\", since = \"1.13.0\")]\n-impl<'a> fmt::Debug for Components<'a> {\n+impl fmt::Debug for Components<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n-        impl<'a> fmt::Debug for DebugHelper<'a> {\n+        impl fmt::Debug for DebugHelper<'_> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.components())\n@@ -814,25 +814,25 @@ impl<'a> Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<Path> for Components<'a> {\n+impl AsRef<Path> for Components<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_path()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Components<'a> {\n+impl AsRef<OsStr> for Components<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_path().as_os_str()\n     }\n }\n \n #[stable(feature = \"path_iter_debug\", since = \"1.13.0\")]\n-impl<'a> fmt::Debug for Iter<'a> {\n+impl fmt::Debug for Iter<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n-        impl<'a> fmt::Debug for DebugHelper<'a> {\n+        impl fmt::Debug for DebugHelper<'_> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.iter())\n@@ -867,14 +867,14 @@ impl<'a> Iter<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<Path> for Iter<'a> {\n+impl AsRef<Path> for Iter<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_path()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Iter<'a> {\n+impl AsRef<OsStr> for Iter<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_path().as_os_str()\n     }\n@@ -897,7 +897,7 @@ impl<'a> DoubleEndedIterator for Iter<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Iter<'a> {}\n+impl FusedIterator for Iter<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Components<'a> {\n@@ -1000,7 +1000,7 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Components<'a> {}\n+impl FusedIterator for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> cmp::PartialEq for Components<'a> {\n@@ -1010,7 +1010,7 @@ impl<'a> cmp::PartialEq for Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Eq for Components<'a> {}\n+impl cmp::Eq for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> cmp::PartialOrd for Components<'a> {\n@@ -1020,8 +1020,8 @@ impl<'a> cmp::PartialOrd for Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Ord for Components<'a> {\n-    fn cmp(&self, other: &Components<'a>) -> cmp::Ordering {\n+impl cmp::Ord for Components<'_> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n         Iterator::cmp(self.clone(), other.clone())\n     }\n }\n@@ -1063,7 +1063,7 @@ impl<'a> Iterator for Ancestors<'a> {\n }\n \n #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n-impl<'a> FusedIterator for Ancestors<'a> {}\n+impl FusedIterator for Ancestors<'_> {}\n \n ////////////////////////////////////////////////////////////////////////////////\n // Basic types and traits\n@@ -1145,6 +1145,33 @@ impl PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n+    /// Creates a new `PathBuf` with a given capacity used to create the\n+    /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(path_buf_capacity)]\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut path = PathBuf::with_capacity(10);\n+    /// let capacity = path.capacity();\n+    ///\n+    /// // This push is done without reallocating\n+    /// path.push(r\"C:\\\");\n+    ///\n+    /// assert_eq!(capacity, path.capacity());\n+    /// ```\n+    ///\n+    /// [`with_capacity`]: ../ffi/struct.OsString.html#method.with_capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn with_capacity(capacity: usize) -> PathBuf {\n+        PathBuf {\n+            inner: OsString::with_capacity(capacity)\n+        }\n+    }\n+\n     /// Coerces to a [`Path`] slice.\n     ///\n     /// [`Path`]: struct.Path.html\n@@ -1373,6 +1400,60 @@ impl PathBuf {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n         unsafe { Box::from_raw(rw) }\n     }\n+\n+    /// Invokes [`capacity`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`capacity`]: ../ffi/struct.OsString.html#method.capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn capacity(&self) -> usize {\n+        self.inner.capacity()\n+    }\n+\n+    /// Invokes [`clear`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`clear`]: ../ffi/struct.OsString.html#method.clear\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn clear(&mut self) {\n+        self.inner.clear()\n+    }\n+\n+    /// Invokes [`reserve`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve`]: ../ffi/struct.OsString.html#method.reserve\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn reserve(&mut self, additional: usize) {\n+        self.inner.reserve(additional)\n+    }\n+\n+    /// Invokes [`reserve_exact`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve_exact`]: ../ffi/struct.OsString.html#method.reserve_exact\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn reserve_exact(&mut self, additional: usize) {\n+        self.inner.reserve_exact(additional)\n+    }\n+\n+    /// Invokes [`shrink_to_fit`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to_fit`]: ../ffi/struct.OsString.html#method.shrink_to_fit\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n+    /// Invokes [`shrink_to`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to`]: ../ffi/struct.OsString.html#method.shrink_to\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n@@ -2529,14 +2610,14 @@ pub struct Display<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> fmt::Debug for Display<'a> {\n+impl fmt::Debug for Display<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&self.path, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> fmt::Display for Display<'a> {\n+impl fmt::Display for Display<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.path.inner.display(f)\n     }\n@@ -2590,7 +2671,7 @@ impl AsRef<Path> for OsStr {\n }\n \n #[stable(feature = \"cow_os_str_as_ref_path\", since = \"1.8.0\")]\n-impl<'a> AsRef<Path> for Cow<'a, OsStr> {\n+impl AsRef<Path> for Cow<'_, OsStr> {\n     fn as_ref(&self) -> &Path {\n         Path::new(self)\n     }"}, {"sha": "8591b55dc58ee9fd909f77e7f9381f0c8bc2d41e", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -321,7 +321,7 @@ impl Drop for Select {\n     }\n }\n \n-impl<'rx, T: Send> Drop for Handle<'rx, T> {\n+impl<T: Send> Drop for Handle<'_, T> {\n     fn drop(&mut self) {\n         unsafe { self.remove() }\n     }\n@@ -347,7 +347,7 @@ impl fmt::Debug for Select {\n     }\n }\n \n-impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n+impl<T: Send> fmt::Debug for Handle<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"Handle\").finish()\n     }"}, {"sha": "954867911a03198c3535a498d7ea7b6b3c0d22b9", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -150,9 +150,9 @@ pub struct MutexGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for MutexGuard<'a, T> { }\n+impl<T: ?Sized> !Send for MutexGuard<'_, T> { }\n #[stable(feature = \"mutexguard\", since = \"1.19.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for MutexGuard<'a, T> { }\n+unsafe impl<T: ?Sized + Sync> Sync for MutexGuard<'_, T> { }\n \n impl<T> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n@@ -421,7 +421,7 @@ impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'mutex, T: ?Sized> Deref for MutexGuard<'mutex, T> {\n+impl<T: ?Sized> Deref for MutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -430,14 +430,14 @@ impl<'mutex, T: ?Sized> Deref for MutexGuard<'mutex, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'mutex, T: ?Sized> DerefMut for MutexGuard<'mutex, T> {\n+impl<T: ?Sized> DerefMut for MutexGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n+impl<T: ?Sized> Drop for MutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -448,14 +448,14 @@ impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {\n+impl<T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }"}, {"sha": "e207d0170d7b8cf4a6bcb5823a61872b5bd4e952", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -436,7 +436,7 @@ impl fmt::Debug for Once {\n     }\n }\n \n-impl<'a> Drop for Finish<'a> {\n+impl Drop for Finish<'_> {\n     fn drop(&mut self) {\n         // Swap out our state with however we finished. We should only ever see\n         // an old state which was RUNNING."}, {"sha": "7f3cb4f72c7b5baa274dd999ea19c6e180cb5a14", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -91,10 +91,10 @@ pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for RwLockReadGuard<'a, T> {}\n+impl<T: ?Sized> !Send for RwLockReadGuard<'_, T> {}\n \n #[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}\n+unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n@@ -113,10 +113,10 @@ pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for RwLockWriteGuard<'a, T> {}\n+impl<T: ?Sized> !Send for RwLockWriteGuard<'_, T> {}\n \n #[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockWriteGuard<'a, T> {}\n+unsafe impl<T: ?Sized + Sync> Sync for RwLockWriteGuard<'_, T> {}\n \n impl<T> RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n@@ -480,7 +480,7 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RwLockReadGuard\")\n             .field(\"lock\", &self.__lock)\n@@ -489,14 +489,14 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RwLockWriteGuard\")\n             .field(\"lock\", &self.__lock)\n@@ -505,14 +505,14 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n+impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -521,7 +521,7 @@ impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {\n+impl<T: ?Sized> Deref for RwLockWriteGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -530,21 +530,21 @@ impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> DerefMut for RwLockWriteGuard<'rwlock, T> {\n+impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for RwLockReadGuard<'a, T> {\n+impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n         unsafe { self.__lock.inner.read_unlock(); }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {\n+impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n     fn drop(&mut self) {\n         self.__lock.poison.done(&self.__poison);\n         unsafe { self.__lock.inner.write_unlock(); }"}, {"sha": "915c17374ca02004c639370d32614e4ccbb12a65", "filename": "src/libstd/sys_common/bytestring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbytestring.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -31,7 +31,7 @@ mod tests {\n     fn smoke() {\n         struct Helper<'a>(&'a [u8]);\n \n-        impl<'a> Debug for Helper<'a> {\n+        impl Debug for Helper<'_> {\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 debug_fmt_bytestring(self.0, f)\n             }"}, {"sha": "b47d8698c605b5d70d4f947ac6914895dc601e7f", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -76,7 +76,7 @@ pub fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n /// A simple RAII utility for the above Mutex without the poisoning semantics.\n pub struct MutexGuard<'a>(&'a imp::Mutex);\n \n-impl<'a> Drop for MutexGuard<'a> {\n+impl Drop for MutexGuard<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe { self.0.unlock(); }"}, {"sha": "596e5d534c2933fd1fc24a8257cf57d1767f8174", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -43,7 +43,7 @@ pub struct ReentrantMutexGuard<'a, T: 'a> {\n     __poison: poison::Guard,\n }\n \n-impl<'a, T> !marker::Send for ReentrantMutexGuard<'a, T> {}\n+impl<T> !marker::Send for ReentrantMutexGuard<'_, T> {}\n \n \n impl<T> ReentrantMutex<T> {\n@@ -138,15 +138,15 @@ impl<'mutex, T> ReentrantMutexGuard<'mutex, T> {\n     }\n }\n \n-impl<'mutex, T> Deref for ReentrantMutexGuard<'mutex, T> {\n+impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n         &self.__lock.data\n     }\n }\n \n-impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n+impl<T> Drop for ReentrantMutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -212,7 +212,7 @@ mod tests {\n     }\n \n     pub struct Answer<'a>(pub ReentrantMutexGuard<'a, RefCell<u32>>);\n-    impl<'a> Drop for Answer<'a> {\n+    impl Drop for Answer<'_> {\n         fn drop(&mut self) {\n             *self.0.borrow_mut() = 42;\n         }"}, {"sha": "9c4945d74dbfef9e82e07bffd3d04441f413d151", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -640,19 +640,26 @@ pub enum PatKind {\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// `0 <= position <= subpats.len()`.\n     Tuple(Vec<P<Pat>>, Option<usize>),\n+\n     /// A `box` pattern.\n     Box(P<Pat>),\n+\n     /// A reference pattern (e.g., `&mut (a, b)`).\n     Ref(P<Pat>, Mutability),\n+\n     /// A literal.\n     Lit(P<Expr>),\n+\n     /// A range pattern (e.g., `1...2`, `1..=2` or `1..2`).\n     Range(P<Expr>, P<Expr>, Spanned<RangeEnd>),\n+\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n     Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+\n     /// Parentheses in patterns used for grouping (i.e., `(PAT)`).\n     Paren(P<Pat>),\n+\n     /// A macro pattern; pre-expansion.\n     Mac(Mac),\n }"}, {"sha": "fd7003d30a1dc5c0613936305ba5e5282733bd41", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -1037,7 +1037,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n             vis.visit_expr(e1);\n             vis.visit_expr(e2);\n             vis.visit_span(span);\n-        },\n+        }\n         PatKind::Slice(before, slice, after) => {\n             visit_vec(before, |pat| vis.visit_pat(pat));\n             visit_opt(slice, |slice| vis.visit_pat(slice));"}, {"sha": "b1fb38d8eafb4e4404dd4f32ab8706444b10694f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -4173,7 +4173,8 @@ impl<'a> Parser<'a> {\n                 err.emit();\n                 self.bump();\n             } else if self.eat(&token::BinOp(token::Or)) {\n-                // No op.\n+                // This is a No-op. Continue the loop to parse the next\n+                // pattern.\n             } else {\n                 return Ok(pats);\n             }"}, {"sha": "82057868b73bbad56fb9f05d825c4cddbf1f3d66", "filename": "src/test/run-pass/const-int-overflowing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -13,6 +13,9 @@ const SHL_B: (u32, bool) = 0x1u32.overflowing_shl(132);\n const SHR_A: (u32, bool) = 0x10u32.overflowing_shr(4);\n const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n \n+const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n+const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n+\n fn ident<T>(ident: T) -> T {\n     ident\n }\n@@ -32,4 +35,7 @@ fn main() {\n \n     assert_eq!(SHR_A, ident((0x1, false)));\n     assert_eq!(SHR_B, ident((0x1, true)));\n+\n+    assert_eq!(NEG_A, ident((0, false)));\n+    assert_eq!(NEG_B, ident((1, true)));\n }"}, {"sha": "140fd57ecb8026b537b5ad095b34d7a7c402e744", "filename": "src/test/run-pass/const-int-wrapping.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -13,6 +13,9 @@ const SHL_B: u32 = 1u32.wrapping_shl(128);\n const SHR_A: u32 = 128u32.wrapping_shr(7);\n const SHR_B: u32 = 128u32.wrapping_shr(128);\n \n+const NEG_A: u32 = 5u32.wrapping_neg();\n+const NEG_B: u32 = 1234567890u32.wrapping_neg();\n+\n fn ident<T>(ident: T) -> T {\n     ident\n }\n@@ -32,4 +35,7 @@ fn main() {\n \n     assert_eq!(SHR_A, ident(1));\n     assert_eq!(SHR_B, ident(128));\n+\n+    assert_eq!(NEG_A, ident(4294967291));\n+    assert_eq!(NEG_B, ident(3060399406));\n }"}, {"sha": "32258792b6e8b88c601b50ac6d4a53b5e84d69be", "filename": "src/test/rustdoc/process-termination.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprocess-termination.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags:--test\n+\n+/// A check of using various process termination strategies\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// assert!(true); // this returns `()`, all is well\n+/// ```\n+///\n+/// You can also simply return `Ok(())`, but you'll need to disambiguate the\n+/// type using turbofish, because we cannot infer the type:\n+///\n+/// ```rust\n+/// Ok::<(), &'static str>(())\n+/// ```\n+///\n+/// You can err with anything that implements `Debug`:\n+///\n+/// ```rust,should_panic\n+/// Err(\"This is returned from `main`, leading to panic\")?;\n+/// Ok::<(), &'static str>(())\n+/// ```\n+pub fn check_process_termination() {}"}, {"sha": "8d8221bcdf29342cd9a66fa6c73e392ec87c99df", "filename": "src/test/rustdoc/wrapping.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwrapping.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -0,0 +1,5 @@\n+use std::fmt::Debug;\n+\n+// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust fn\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//pre[@class=\"rust fn\"]/br' 0\n+pub fn foo() -> impl Debug {}"}, {"sha": "8ac6d8e9311fc5a9c079eb314ef9cb556e2b4d4b", "filename": "src/test/ui/specialization/issue-39448.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -0,0 +1,50 @@\n+#![feature(specialization)]\n+\n+// Regression test for a specialization-related ICE (#39448).\n+\n+trait A: Sized {\n+    fn foo(self, _: Self) -> Self {\n+        self\n+    }\n+}\n+\n+impl A for u8 {}\n+impl A for u16 {}\n+\n+impl FromA<u8> for u16 {\n+    fn from(x: u8) -> u16 {\n+        x as u16\n+    }\n+}\n+\n+trait FromA<T> {\n+    fn from(T) -> Self;\n+}\n+\n+impl<T: A, U: A + FromA<T>> FromA<T> for U {\n+    default fn from(x: T) -> Self {\n+        ToA::to(x)\n+    }\n+}\n+\n+trait ToA<T> {\n+    fn to(self) -> T;\n+}\n+\n+impl<T, U> ToA<U> for T\n+where\n+    U: FromA<T>,\n+{\n+    fn to(self) -> U {\n+        U::from(self)\n+    }\n+}\n+\n+#[allow(dead_code)]\n+fn foo<T: A, U: A>(x: T, y: U) -> U {\n+    x.foo(y.to()).to() //~ ERROR overflow evaluating the requirement\n+}\n+\n+fn main() {\n+    let z = foo(8u8, 1u16);\n+}"}, {"sha": "0b0fd2c4af59192dce0387af8dd9e9677c84b0cb", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f66e4697ae286985ddefc53c3a047614568458bb/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=f66e4697ae286985ddefc53c3a047614568458bb", "patch": "@@ -0,0 +1,12 @@\n+error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n+  --> $DIR/issue-39448.rs:45:13\n+   |\n+LL |     x.foo(y.to()).to() //~ ERROR overflow evaluating the requirement\n+   |             ^^\n+   |\n+   = note: required because of the requirements on the impl of `FromA<U>` for `T`\n+   = note: required because of the requirements on the impl of `ToA<T>` for `U`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}