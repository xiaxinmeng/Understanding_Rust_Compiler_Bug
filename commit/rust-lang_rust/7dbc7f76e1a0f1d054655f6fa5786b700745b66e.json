{"sha": "7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYmM3Zjc2ZTFhMGYxZDA1NDY1NWY2ZmE1Nzg2YjcwMDc0NWI2NmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-24T19:37:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-18T19:23:00Z"}, "message": "Add a few dest-prop MIR tests", "tree": {"sha": "7a39963ec3dfae6d12b26c87f85edd3c66933e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a39963ec3dfae6d12b26c87f85edd3c66933e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "html_url": "https://github.com/rust-lang/rust/commit/7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812d4bbc8d1a240ecc900ffafacb5ce34f69e9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/812d4bbc8d1a240ecc900ffafacb5ce34f69e9f3", "html_url": "https://github.com/rust-lang/rust/commit/812d4bbc8d1a240ecc900ffafacb5ce34f69e9f3"}], "stats": {"total": 362, "additions": 362, "deletions": 0}, "files": [{"sha": "b49ecf07daa39115313c3319f12891f553584813", "filename": "src/test/mir-opt/dest-prop/branch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.rs?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,21 @@\n+//! Tests that assignment in both branches of an `if` are eliminated.\n+\n+fn val() -> i32 {\n+    1\n+}\n+\n+fn cond() -> bool {\n+    true\n+}\n+\n+// EMIT_MIR rustc.main.DestinationPropagation.diff\n+fn main() {\n+    let x = val();\n+\n+    let y = if cond() {\n+        x\n+    } else {\n+        val();\n+        x\n+    };\n+}"}, {"sha": "b8387ae44938737de72969828ce1daf478e0dca2", "filename": "src/test/mir-opt/dest-prop/branch/rustc.main.DestinationPropagation.diff", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch%2Frustc.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch%2Frustc.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch%2Frustc.main.DestinationPropagation.diff?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,88 @@\n+- // MIR for `main` before DestinationPropagation\n++ // MIR for `main` after DestinationPropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/branch.rs:12:11: 12:11\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:13:9: 13:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:15:16: 15:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:18:9: 18:14\n+      scope 1 {\n+-         debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n++         debug x => _2;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:15:9: 15:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/branch.rs:15:9: 15:10\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n+-         _1 = const val() -> bb1;         // scope 0 at $DIR/branch.rs:13:13: 13:18\n++         nop;                             // scope 0 at $DIR/branch.rs:13:9: 13:10\n++         _2 = const val() -> bb1;         // scope 0 at $DIR/branch.rs:13:13: 13:18\n+                                           // ty::Const\n+                                           // + ty: fn() -> i32 {val}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n++         nop;                             // scope 1 at $DIR/branch.rs:15:9: 15:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:15:16: 15:22\n+          _3 = const cond() -> bb2;        // scope 1 at $DIR/branch.rs:15:16: 15:22\n+                                           // ty::Const\n+                                           // + ty: fn() -> bool {cond}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 1 at $DIR/branch.rs:15:13: 20:6\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:18:9: 18:14\n+          _4 = const val() -> bb5;         // scope 1 at $DIR/branch.rs:18:9: 18:14\n+                                           // ty::Const\n+                                           // + ty: fn() -> i32 {val}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb4: {\n+-         _2 = _1;                         // scope 1 at $DIR/branch.rs:16:9: 16:10\n++         nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:18:14: 18:15\n+-         _2 = _1;                         // scope 1 at $DIR/branch.rs:19:9: 19:10\n++         nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:6: 20:7\n+          _0 = const ();                   // scope 0 at $DIR/branch.rs:12:11: 21:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:12:11: 21:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n++         nop;                             // scope 1 at $DIR/branch.rs:21:1: 21:2\n++         nop;                             // scope 0 at $DIR/branch.rs:21:1: 21:2\n+          return;                          // scope 0 at $DIR/branch.rs:21:2: 21:2\n+      }\n+  }\n+  "}, {"sha": "d55d527bc65f63f80396598796feccaac44562cb", "filename": "src/test/mir-opt/dest-prop/cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.rs?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,15 @@\n+//! Tests that cyclic assignments don't hang DestinationPropagation, and result in reasonable code.\n+\n+fn val() -> i32 {\n+    1\n+}\n+\n+// EMIT_MIR rustc.main.DestinationPropagation.diff\n+fn main() {\n+    let mut x = val();\n+    let y = x;\n+    let z = y;\n+    x = z;\n+\n+    drop(x);\n+}"}, {"sha": "5189b665acff1c3180ab0b26f15e8f6b298631ad", "filename": "src/test/mir-opt/dest-prop/cycle/rustc.main.DestinationPropagation.diff", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle%2Frustc.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle%2Frustc.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle%2Frustc.main.DestinationPropagation.diff?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,91 @@\n+- // MIR for `main` before DestinationPropagation\n++ // MIR for `main` after DestinationPropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:8:11: 8:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:9:9: 9:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:12:9: 12:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:14:5: 14:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:14:10: 14:11\n+      scope 1 {\n+-         debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n++         debug x => _4;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:10:9: 10:10\n+          scope 2 {\n+-             debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n++             debug y => _4;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:11:9: 11:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n++                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n+                  scope 4 {\n+                      debug _x => _6;      // in scope 4 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n+-         _1 = const val() -> bb1;         // scope 0 at $DIR/cycle.rs:9:17: 9:22\n++         nop;                             // scope 0 at $DIR/cycle.rs:9:9: 9:14\n++         _4 = const val() -> bb1;         // scope 0 at $DIR/cycle.rs:9:17: 9:22\n+                                           // ty::Const\n+                                           // + ty: fn() -> i32 {val}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n+-         _2 = _1;                         // scope 1 at $DIR/cycle.rs:10:13: 10:14\n+-         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n+-         _3 = _2;                         // scope 2 at $DIR/cycle.rs:11:13: 11:14\n+-         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+-         _4 = _3;                         // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+-         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:12:5: 12:10\n+-         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n++         nop;                             // scope 1 at $DIR/cycle.rs:10:9: 10:10\n++         nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:11:9: 11:10\n++         nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n++         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:14:5: 14:12\n+          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11\n+-         _6 = _1;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n++         _6 = _4;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n+          _5 = const ();                   // scope 4 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          drop(_6) -> bb2;                 // scope 4 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:14:12: 14:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:8:11: 15:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:8:11: 15:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n++         nop;                             // scope 2 at $DIR/cycle.rs:15:1: 15:2\n++         nop;                             // scope 1 at $DIR/cycle.rs:15:1: 15:2\n++         nop;                             // scope 0 at $DIR/cycle.rs:15:1: 15:2\n+          return;                          // scope 0 at $DIR/cycle.rs:15:2: 15:2\n+      }\n+  }\n+  "}, {"sha": "add821eafe0b08e8b206dd3a0d546731790f868c", "filename": "src/test/mir-opt/dest-prop/simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.rs?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,14 @@\n+//! Copy of `nrvo-simple.rs`, to ensure that full dest-prop handles it too.\n+\n+// EMIT_MIR rustc.nrvo.DestinationPropagation.diff\n+fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {\n+    let mut buf = [0; 1024];\n+    init(&mut buf);\n+    buf\n+}\n+\n+fn main() {\n+    let _ = nrvo(|buf| {\n+        buf[4] = 4;\n+    });\n+}"}, {"sha": "d59e1f3c0c9388286760074a669a76464ca6d725", "filename": "src/test/mir-opt/dest-prop/simple/rustc.nrvo.DestinationPropagation.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple%2Frustc.nrvo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple%2Frustc.nrvo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple%2Frustc.nrvo.DestinationPropagation.diff?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `nrvo` before DestinationPropagation\n++ // MIR for `nrvo` after DestinationPropagation\n+  \n+  fn nrvo(_1: for<'r> fn(&'r mut [u8; 1024])) -> [u8; 1024] {\n+      debug init => _1;                    // in scope 0 at $DIR/simple.rs:4:9: 4:13\n+      let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/simple.rs:4:39: 4:49\n+      let mut _2: [u8; 1024];              // in scope 0 at $DIR/simple.rs:5:9: 5:16\n+      let _3: ();                          // in scope 0 at $DIR/simple.rs:6:5: 6:19\n+      let mut _4: for<'r> fn(&'r mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:6:5: 6:9\n+      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:6:10: 6:18\n+      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:6:10: 6:18\n+      scope 1 {\n+-         debug buf => _2;                 // in scope 1 at $DIR/simple.rs:5:9: 5:16\n++         debug buf => _0;                 // in scope 1 at $DIR/simple.rs:5:9: 5:16\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/simple.rs:5:9: 5:16\n+-         _2 = [const 0u8; 1024];          // scope 0 at $DIR/simple.rs:5:19: 5:28\n++         nop;                             // scope 0 at $DIR/simple.rs:5:9: 5:16\n++         _0 = [const 0u8; 1024];          // scope 0 at $DIR/simple.rs:5:19: 5:28\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simple.rs:5:20: 5:21\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          StorageLive(_3);                 // scope 1 at $DIR/simple.rs:6:5: 6:19\n+          StorageLive(_4);                 // scope 1 at $DIR/simple.rs:6:5: 6:9\n+          _4 = _1;                         // scope 1 at $DIR/simple.rs:6:5: 6:9\n+-         StorageLive(_5);                 // scope 1 at $DIR/simple.rs:6:10: 6:18\n+-         StorageLive(_6);                 // scope 1 at $DIR/simple.rs:6:10: 6:18\n+-         _6 = &mut _2;                    // scope 1 at $DIR/simple.rs:6:10: 6:18\n+-         _5 = move _6;                    // scope 1 at $DIR/simple.rs:6:10: 6:18\n++         nop;                             // scope 1 at $DIR/simple.rs:6:10: 6:18\n++         nop;                             // scope 1 at $DIR/simple.rs:6:10: 6:18\n++         _5 = &mut _0;                    // scope 1 at $DIR/simple.rs:6:10: 6:18\n++         nop;                             // scope 1 at $DIR/simple.rs:6:10: 6:18\n+          _3 = move _4(move _5) -> bb1;    // scope 1 at $DIR/simple.rs:6:5: 6:19\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/simple.rs:6:18: 6:19\n++         nop;                             // scope 1 at $DIR/simple.rs:6:18: 6:19\n+          StorageDead(_4);                 // scope 1 at $DIR/simple.rs:6:18: 6:19\n+-         StorageDead(_6);                 // scope 1 at $DIR/simple.rs:6:19: 6:20\n++         nop;                             // scope 1 at $DIR/simple.rs:6:19: 6:20\n+          StorageDead(_3);                 // scope 1 at $DIR/simple.rs:6:19: 6:20\n+-         _0 = _2;                         // scope 1 at $DIR/simple.rs:7:5: 7:8\n+-         StorageDead(_2);                 // scope 0 at $DIR/simple.rs:8:1: 8:2\n++         nop;                             // scope 1 at $DIR/simple.rs:7:5: 7:8\n++         nop;                             // scope 0 at $DIR/simple.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/simple.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "ea8364124043e9532eaa7176fe5796ab324899c1", "filename": "src/test/mir-opt/dest-prop/union.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,16 @@\n+//! Tests that projections through unions cancel `DestinationPropagation`.\n+\n+fn val() -> u32 {\n+    1\n+}\n+\n+// EMIT_MIR rustc.main.DestinationPropagation.diff\n+fn main() {\n+    union Un {\n+        us: u32,\n+    }\n+\n+    let un = Un { us: val() };\n+\n+    drop(unsafe { un.us });\n+}"}, {"sha": "f6ebb6cb9403df58465e1f23b50bc71f9d68fa84", "filename": "src/test/mir-opt/dest-prop/union/rustc.main.DestinationPropagation.diff", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion%2Frustc.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7dbc7f76e1a0f1d054655f6fa5786b700745b66e/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion%2Frustc.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion%2Frustc.main.DestinationPropagation.diff?ref=7dbc7f76e1a0f1d054655f6fa5786b700745b66e", "patch": "@@ -0,0 +1,61 @@\n+- // MIR for `main` before DestinationPropagation\n++ // MIR for `main` after DestinationPropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/union.rs:8:11: 8:11\n+      let _1: main::Un;                    // in scope 0 at $DIR/union.rs:13:9: 13:11\n+      let mut _2: u32;                     // in scope 0 at $DIR/union.rs:13:23: 13:28\n+      let _3: ();                          // in scope 0 at $DIR/union.rs:15:5: 15:27\n+      let mut _4: u32;                     // in scope 0 at $DIR/union.rs:15:10: 15:26\n+      scope 1 {\n+          debug un => _1;                  // in scope 1 at $DIR/union.rs:13:9: 13:11\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug _x => _4;              // in scope 3 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+          _2 = const val() -> bb1;         // scope 0 at $DIR/union.rs:13:23: 13:28\n+                                           // ty::Const\n+                                           // + ty: fn() -> u32 {val}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/union.rs:13:23: 13:26\n+                                           // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n+          StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n+          StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n+          _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n+          _3 = const ();                   // scope 3 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          drop(_4) -> bb2;                 // scope 3 at $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+      }\n+  \n+      bb2: {\n+          StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n+          StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n+          _0 = const ();                   // scope 0 at $DIR/union.rs:8:11: 16:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/union.rs:8:11: 16:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n+          return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n+      }\n+  }\n+  "}]}