{"sha": "a6d51e09610989821aaf79871bcab0661c9b0f74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDUxZTA5NjEwOTg5ODIxYWFmNzk4NzFiY2FiMDY2MWM5YjBmNzQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T20:03:22Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T20:03:22Z"}, "message": "Return Result for token_tree_to_xx functions", "tree": {"sha": "0647a51eb3c1cf28466c44884da21fc98bc51f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0647a51eb3c1cf28466c44884da21fc98bc51f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d51e09610989821aaf79871bcab0661c9b0f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d51e09610989821aaf79871bcab0661c9b0f74", "html_url": "https://github.com/rust-lang/rust/commit/a6d51e09610989821aaf79871bcab0661c9b0f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d51e09610989821aaf79871bcab0661c9b0f74/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f19d70056fada5f381019694d893e0ffe8360a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f19d70056fada5f381019694d893e0ffe8360a", "html_url": "https://github.com/rust-lang/rust/commit/c0f19d70056fada5f381019694d893e0ffe8360a"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "3a9db783577253b9050770bb4ccbe687ececa76f", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6d51e09610989821aaf79871bcab0661c9b0f74/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d51e09610989821aaf79871bcab0661c9b0f74/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=a6d51e09610989821aaf79871bcab0661c9b0f74", "patch": "@@ -204,7 +204,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         invocation: &str,\n     ) -> ra_syntax::TreeArc<ast::MacroItems> {\n         let expanded = expand(rules, invocation);\n-        token_tree_to_macro_items(&expanded)\n+        token_tree_to_macro_items(&expanded).unwrap()\n     }\n \n     pub(crate) fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n@@ -218,7 +218,10 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let expansion = syntax_node_to_token_tree(expansion.syntax()).unwrap().0;\n         let file = token_tree_to_macro_items(&expansion);\n \n-        assert_eq!(tree.syntax().debug_dump().trim(), file.syntax().debug_dump().trim());\n+        assert_eq!(\n+            tree.unwrap().syntax().debug_dump().trim(),\n+            file.unwrap().syntax().debug_dump().trim()\n+        );\n     }\n \n     #[test]\n@@ -358,7 +361,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let expansion = expand(&rules, \"structs!(Foo, Bar)\");\n         let tree = token_tree_to_macro_items(&expansion);\n         assert_eq!(\n-            tree.syntax().debug_dump().trim(),\n+            tree.unwrap().syntax().debug_dump().trim(),\n             r#\"\n MACRO_ITEMS@[0; 40)\n   STRUCT_DEF@[0; 20)\n@@ -472,7 +475,7 @@ MACRO_ITEMS@[0; 40)\n         let stmts = token_tree_to_macro_stmts(&expanded);\n \n         assert_eq!(\n-            stmts.syntax().debug_dump().trim(),\n+            stmts.unwrap().syntax().debug_dump().trim(),\n             r#\"MACRO_STMTS@[0; 15)\n   LET_STMT@[0; 7)\n     LET_KW@[0; 3) \"let\""}, {"sha": "5844d3f12c8aedaf41535989e3e4f5ced2f9942b", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6d51e09610989821aaf79871bcab0661c9b0f74/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d51e09610989821aaf79871bcab0661c9b0f74/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=a6d51e09610989821aaf79871bcab0661c9b0f74", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{\n };\n \n use crate::subtree_source::{SubtreeTokenSource, Querier};\n+use crate::ExpandError;\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n #[derive(Default)]\n@@ -45,48 +46,54 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n //\n \n /// Parses the token tree (result of macro expansion) to an expression\n-pub fn token_tree_to_expr(tt: &tt::Subtree) -> TreeArc<ast::Expr> {\n+pub fn token_tree_to_expr(tt: &tt::Subtree) -> Result<TreeArc<ast::Expr>, ExpandError> {\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_expr(&token_source, &mut tree_sink);\n     let syntax = tree_sink.inner.finish();\n-    ast::Expr::cast(&syntax).unwrap().to_owned()\n+    ast::Expr::cast(&syntax)\n+        .map(|m| m.to_owned())\n+        .ok_or_else(|| crate::ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) to a Pattern\n-pub fn token_tree_to_pat(tt: &tt::Subtree) -> TreeArc<ast::Pat> {\n+pub fn token_tree_to_pat(tt: &tt::Subtree) -> Result<TreeArc<ast::Pat>, ExpandError> {\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_pat(&token_source, &mut tree_sink);\n     let syntax = tree_sink.inner.finish();\n-    ast::Pat::cast(&syntax).unwrap().to_owned()\n+    ast::Pat::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) to a Type\n-pub fn token_tree_to_ty(tt: &tt::Subtree) -> TreeArc<ast::TypeRef> {\n+pub fn token_tree_to_ty(tt: &tt::Subtree) -> Result<TreeArc<ast::TypeRef>, ExpandError> {\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_ty(&token_source, &mut tree_sink);\n     let syntax = tree_sink.inner.finish();\n-    ast::TypeRef::cast(&syntax).unwrap().to_owned()\n+    ast::TypeRef::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of stmts\n-pub fn token_tree_to_macro_stmts(tt: &tt::Subtree) -> TreeArc<ast::MacroStmts> {\n+pub fn token_tree_to_macro_stmts(\n+    tt: &tt::Subtree,\n+) -> Result<TreeArc<ast::MacroStmts>, ExpandError> {\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_macro_stmts(&token_source, &mut tree_sink);\n     let syntax = tree_sink.inner.finish();\n-    ast::MacroStmts::cast(&syntax).unwrap().to_owned()\n+    ast::MacroStmts::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_macro_items(tt: &tt::Subtree) -> TreeArc<ast::MacroItems> {\n+pub fn token_tree_to_macro_items(\n+    tt: &tt::Subtree,\n+) -> Result<TreeArc<ast::MacroItems>, ExpandError> {\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_macro_items(&token_source, &mut tree_sink);\n     let syntax = tree_sink.inner.finish();\n-    ast::MacroItems::cast(&syntax).unwrap().to_owned()\n+    ast::MacroItems::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items"}]}