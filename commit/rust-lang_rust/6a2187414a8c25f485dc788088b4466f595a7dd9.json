{"sha": "6a2187414a8c25f485dc788088b4466f595a7dd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjE4NzQxNGE4YzI1ZjQ4NWRjNzg4MDg4YjQ0NjZmNTk1YTdkZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T18:55:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T18:55:00Z"}, "message": "Auto merge of #28538 - alevy:make_fixedsizearray_unsafe, r=alexcrichton\n\n[breaking-change]\r\n\r\n`FixedSizeArray` is meant to be implemented for arrays of fixed size only, but can be implemented for anything at the moment. Marking the trait unsafe would make it more reasonable to write unsafe code which operates on fixed size arrays of any size.\r\n\r\nFor example, using `uninitialized` to create a fixed size array and immediately filling it with a fixed value is externally safe:\r\n\r\n```\r\npub fn init_with_nones<T, A: FixedSizeArray<Option<T>>>() -> A {\r\n    let mut res = unsafe { mem::uninitialized() };\r\n    for elm in res.as_mut_slice().iter_mut() {\r\n        *elm = None;\r\n    }\r\n    res\r\n}\r\n```\r\n\r\nBut the same code is not safe if `FixedSizeArray` is implemented for other types:\r\n\r\n```\r\nstruct Foo { foo: usize }\r\nimpl FixedSizeArray<Option<usize>> for Foo {\r\n    fn as_slice(&self) -> &[usize] { &[] }\r\n    fn as_mut_slice(&self) -> &mut [usize] { &mut [] }\r\n}\r\n```\r\n\r\nnow `init_with_nones() : Foo` returns a `Foo` with an undefined value for the field `foo`.", "tree": {"sha": "26bd8b8f482cf15530b6417cd499fa09ce36d704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bd8b8f482cf15530b6417cd499fa09ce36d704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2187414a8c25f485dc788088b4466f595a7dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2187414a8c25f485dc788088b4466f595a7dd9", "html_url": "https://github.com/rust-lang/rust/commit/6a2187414a8c25f485dc788088b4466f595a7dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2187414a8c25f485dc788088b4466f595a7dd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "html_url": "https://github.com/rust-lang/rust/commit/e9801294a1e24ec8812b8bb827a5d6df5f9078a9"}, {"sha": "b30d8969e86fa2c9dd3b8e2e28ddda2202331f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30d8969e86fa2c9dd3b8e2e28ddda2202331f0f", "html_url": "https://github.com/rust-lang/rust/commit/b30d8969e86fa2c9dd3b8e2e28ddda2202331f0f"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "c986914440de0ae7576d91b92c878c9d038269f3", "filename": "src/libcore/array.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a2187414a8c25f485dc788088b4466f595a7dd9/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2187414a8c25f485dc788088b4466f595a7dd9/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=6a2187414a8c25f485dc788088b4466f595a7dd9", "patch": "@@ -35,14 +35,23 @@ use slice::{Iter, IterMut, SliceExt};\n ///\n /// This trait can be used to implement other traits on fixed-size arrays\n /// without causing much metadata bloat.\n-pub trait FixedSizeArray<T> {\n+///\n+/// The trait is marked unsafe in order to restrict implementors to fixed-size\n+/// arrays. User of this trait can assume that implementors have the exact\n+/// layout in memory of a fixed size array (for example, for unsafe\n+/// initialization).\n+///\n+/// Note that the traits AsRef and AsMut provide similar methods for types that\n+/// may not be fixed-size arrays. Implementors should prefer those traits\n+/// instead.\n+pub unsafe trait FixedSizeArray<T> {\n     /// Converts the array to immutable slice\n     fn as_slice(&self) -> &[T];\n     /// Converts the array to mutable slice\n     fn as_mut_slice(&mut self) -> &mut [T];\n }\n \n-impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n+unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n     #[inline]\n     fn as_slice(&self) -> &[T] {\n         self"}]}