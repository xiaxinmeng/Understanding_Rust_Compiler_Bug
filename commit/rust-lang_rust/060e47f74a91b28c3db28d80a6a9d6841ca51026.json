{"sha": "060e47f74a91b28c3db28d80a6a9d6841ca51026", "node_id": "C_kwDOAAsO6NoAKDA2MGU0N2Y3NGE5MWIyOGMzZGIyOGQ4MGE2YTlkNjg0MWNhNTEwMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T19:48:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T19:48:55Z"}, "message": "Auto merge of #99917 - yaahc:error-in-core-move, r=thomcc\n\nMove Error trait into core\n\nThis PR moves the error trait from the standard library into a new unstable `error` module within the core library. The goal of this PR is to help unify error reporting across the std and no_std ecosystems, as well as open the door to integrating the error trait into the panic reporting system when reporting panics whose source is an errors (such as via `expect`).\n\nThis PR is a rewrite of https://github.com/rust-lang/rust/pull/90328 using new compiler features that have been added to support error in core.", "tree": {"sha": "79655bdb6dd437f2773196bcfdda18b9f6bc2896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79655bdb6dd437f2773196bcfdda18b9f6bc2896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060e47f74a91b28c3db28d80a6a9d6841ca51026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060e47f74a91b28c3db28d80a6a9d6841ca51026", "html_url": "https://github.com/rust-lang/rust/commit/060e47f74a91b28c3db28d80a6a9d6841ca51026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060e47f74a91b28c3db28d80a6a9d6841ca51026/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4", "html_url": "https://github.com/rust-lang/rust/commit/a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4"}, {"sha": "bf7611d55ee6e24647aefc4d1c82b1dba0164536", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7611d55ee6e24647aefc4d1c82b1dba0164536", "html_url": "https://github.com/rust-lang/rust/commit/bf7611d55ee6e24647aefc4d1c82b1dba0164536"}], "stats": {"total": 1490, "additions": 1264, "deletions": 226}, "files": [{"sha": "67925941c92c65f4651afd691ac5bc58a4a26a38", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -151,6 +151,8 @@ use core::async_iter::AsyncIterator;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n+#[cfg(not(bootstrap))]\n+use core::error::Error;\n use core::fmt;\n use core::future::Future;\n use core::hash::{Hash, Hasher};\n@@ -174,6 +176,9 @@ use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n #[cfg(not(no_global_oom_handling))]\n use crate::str::from_boxed_utf8_unchecked;\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+use crate::string::String;\n #[cfg(not(no_global_oom_handling))]\n use crate::vec::Vec;\n \n@@ -2085,3 +2090,304 @@ impl<S: ?Sized + AsyncIterator + Unpin> AsyncIterator for Box<S> {\n         (**self).size_hint()\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+impl dyn Error {\n+    #[inline]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[rustc_allow_incoherent_impl]\n+    /// Attempts to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                let raw: *mut dyn Error = Box::into_raw(self);\n+                Ok(Box::from_raw(raw as *mut T))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl dyn Error + Send {\n+    #[inline]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[rustc_allow_incoherent_impl]\n+    /// Attempts to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error + Send>> {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n+            // Reapply the `Send` marker.\n+            mem::transmute::<Box<dyn Error>, Box<dyn Error + Send>>(s)\n+        })\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl dyn Error + Send + Sync {\n+    #[inline]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[rustc_allow_incoherent_impl]\n+    /// Attempts to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Self>> {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n+            // Reapply the `Send + Sync` marker.\n+            mem::transmute::<Box<dyn Error>, Box<dyn Error + Send + Sync>>(s)\n+        })\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n+    /// Converts a type of [`Error`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {}\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<dyn Error>::from(an_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(err: E) -> Box<dyn Error + 'a> {\n+        Box::new(err)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n+    /// dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {}\n+    ///\n+    /// unsafe impl Send for AnError {}\n+    ///\n+    /// unsafe impl Sync for AnError {}\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n+        Box::new(err)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl From<String> for Box<dyn Error + Send + Sync> {\n+    /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    #[inline]\n+    fn from(err: String) -> Box<dyn Error + Send + Sync> {\n+        struct StringError(String);\n+\n+        impl Error for StringError {\n+            #[allow(deprecated)]\n+            fn description(&self) -> &str {\n+                &self.0\n+            }\n+        }\n+\n+        impl fmt::Display for StringError {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt::Display::fmt(&self.0, f)\n+            }\n+        }\n+\n+        // Purposefully skip printing \"StringError(..)\"\n+        impl fmt::Debug for StringError {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt::Debug::fmt(&self.0, f)\n+            }\n+        }\n+\n+        Box::new(StringError(err))\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n+impl From<String> for Box<dyn Error> {\n+    /// Converts a [`String`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_string_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(str_err: String) -> Box<dyn Error> {\n+        let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n+        let err2: Box<dyn Error> = err1;\n+        err2\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// [`str`]: prim@str\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    #[inline]\n+    fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n+        From::from(String::from(err))\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n+impl From<&str> for Box<dyn Error> {\n+    /// Converts a [`str`] into a box of dyn [`Error`].\n+    ///\n+    /// [`str`]: prim@str\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(err: &str) -> Box<dyn Error> {\n+        From::from(String::from(err))\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n+impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n+        From::from(String::from(err))\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n+impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n+    fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n+        From::from(String::from(err))\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"box_error\", since = \"1.8.0\")]\n+impl<T: core::error::Error> core::error::Error for Box<T> {\n+    #[allow(deprecated, deprecated_in_future)]\n+    fn description(&self) -> &str {\n+        core::error::Error::description(&**self)\n+    }\n+\n+    #[allow(deprecated)]\n+    fn cause(&self) -> Option<&dyn core::error::Error> {\n+        core::error::Error::cause(&**self)\n+    }\n+\n+    fn source(&self) -> Option<&(dyn core::error::Error + 'static)> {\n+        core::error::Error::source(&**self)\n+    }\n+}"}, {"sha": "0a20c74b00fdce9cb4c4a76be3d15374cfd3e3d6", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -2,6 +2,8 @@\n // https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs\n // by matthieu-m\n use crate::alloc::{self, Layout, LayoutError};\n+#[cfg(not(bootstrap))]\n+use core::error::Error;\n use core::fmt::{self, Debug, Display, Formatter};\n use core::marker::PhantomData;\n #[cfg(not(no_global_oom_handling))]\n@@ -271,3 +273,11 @@ impl<H> WithHeader<H> {\n         Layout::new::<H>().extend(value_layout)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized + Error> Error for ThinBox<T> {\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        self.deref().source()\n+    }\n+}"}, {"sha": "cd7cdc19207193472487fb744ac4fd9b9ebf223a", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -133,6 +133,17 @@ impl<'a, K: Debug + Ord, V: Debug, A: Allocator + Clone> fmt::Display\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: core::fmt::Debug + Ord, V: core::fmt::Debug> core::error::Error\n+    for crate::collections::btree_map::OccupiedError<'a, K, V>\n+{\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"key already exists\"\n+    }\n+}\n+\n impl<'a, K: Ord, V, A: Allocator + Clone> Entry<'a, K, V, A> {\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry."}, {"sha": "21d0def0866ed810ca141618a0a464a5ef1d4baa", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -152,3 +152,7 @@ trait SpecExtend<I: IntoIterator> {\n     /// Extends `self` with the contents of the given iterator.\n     fn spec_extend(&mut self, iter: I);\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n+impl core::error::Error for TryReserveError {}"}, {"sha": "aede6d54c6c173e1845c9bc0311698fce39b8d91", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -1121,3 +1121,29 @@ impl CStr {\n         CString::from(self)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl core::error::Error for NulError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"nul byte found in data\"\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n+impl core::error::Error for FromVecWithNulError {}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n+impl core::error::Error for IntoStringError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"C string contained non-utf8 bytes\"\n+    }\n+\n+    fn source(&self) -> Option<&(dyn core::error::Error + 'static)> {\n+        Some(self.__source())\n+    }\n+}"}, {"sha": "ad6d19bbc6875203d6e721d85be0d53684e4048a", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -111,6 +111,8 @@\n #![feature(const_pin)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n+#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n+#![cfg_attr(not(bootstrap), feature(error_in_core))]\n #![feature(exact_size_is_empty)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n@@ -127,6 +129,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]\n #![feature(pointer_byte_offsets)]\n+#![cfg_attr(not(bootstrap), feature(provide_any))]\n #![feature(ptr_internals)]\n #![feature(ptr_metadata)]\n #![feature(ptr_sub_ptr)]\n@@ -179,6 +182,7 @@\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n #![feature(c_unwind)]\n+#![feature(with_negative_coherence)]\n //\n // Rustdoc features:\n #![feature(doc_cfg)]"}, {"sha": "f2448396ce8db714e7509bbbdc804805f6ce4db8", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -44,6 +44,8 @@\n \n #[cfg(not(no_global_oom_handling))]\n use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n+#[cfg(not(bootstrap))]\n+use core::error::Error;\n use core::fmt;\n use core::hash;\n use core::iter::FusedIterator;\n@@ -1939,6 +1941,24 @@ impl fmt::Display for FromUtf16Error {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for FromUtf8Error {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"invalid utf-8\"\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for FromUtf16Error {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"invalid utf-16\"\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for String {"}, {"sha": "4377edeee87107bc0952067540ba1f79b8abc6eb", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -2763,3 +2763,25 @@ fn data_offset_align(align: usize) -> usize {\n     let layout = Layout::new::<ArcInner<()>>();\n     layout.size() + layout.padding_needed_for(align)\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"arc_error\", since = \"1.52.0\")]\n+impl<T: core::error::Error + ?Sized> core::error::Error for Arc<T> {\n+    #[allow(deprecated, deprecated_in_future)]\n+    fn description(&self) -> &str {\n+        core::error::Error::description(&**self)\n+    }\n+\n+    #[allow(deprecated)]\n+    fn cause(&self) -> Option<&dyn core::error::Error> {\n+        core::error::Error::cause(&**self)\n+    }\n+\n+    fn source(&self) -> Option<&(dyn core::error::Error + 'static)> {\n+        core::error::Error::source(&**self)\n+    }\n+\n+    fn provide<'a>(&'a self, req: &mut core::any::Demand<'a>) {\n+        core::error::Error::provide(&**self, req);\n+    }\n+}"}, {"sha": "f03502429ab21d88049325ee1594dbd273af3036", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -5,6 +5,8 @@\n // Your performance intuition is useless. Run perf.\n \n use crate::cmp;\n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n use crate::mem::{self, ValidAlign};\n use crate::ptr::NonNull;\n@@ -461,6 +463,10 @@ pub type LayoutErr = LayoutError;\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LayoutError;\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+impl Error for LayoutError {}\n+\n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl fmt::Display for LayoutError {"}, {"sha": "94efa76664f6a36662e9fe3ab8a22dda6e7cb73b", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -21,6 +21,8 @@ pub use self::layout::LayoutErr;\n #[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n pub use self::layout::LayoutError;\n \n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n use crate::ptr::{self, NonNull};\n \n@@ -32,6 +34,14 @@ use crate::ptr::{self, NonNull};\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct AllocError;\n \n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"allocator_api\",\n+    reason = \"the precise API and guarantees it provides may be tweaked.\",\n+    issue = \"32838\"\n+)]\n+impl Error for AllocError {}\n+\n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n impl fmt::Display for AllocError {"}, {"sha": "9effb379016093ad4fa64fe342811b076bea985a", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -7,6 +7,8 @@\n use crate::borrow::{Borrow, BorrowMut};\n use crate::cmp::Ordering;\n use crate::convert::{Infallible, TryFrom};\n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n use crate::hash::{self, Hash};\n use crate::iter::TrustedLen;\n@@ -119,6 +121,15 @@ impl fmt::Display for TryFromSliceError {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl Error for TryFromSliceError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n impl TryFromSliceError {\n     #[unstable(\n         feature = \"array_error_internals\","}, {"sha": "dc8ea66cc6d0e6f3e21481d7c3a450d1801082cd", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -1,5 +1,7 @@\n //! UTF-8 and UTF-16 decoding iterators\n \n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n \n use super::from_u32_unchecked;\n@@ -121,3 +123,12 @@ impl fmt::Display for DecodeUtf16Error {\n         write!(f, \"unpaired surrogate found: {:x}\", self.code)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n+impl Error for DecodeUtf16Error {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"unpaired surrogate found\"\n+    }\n+}"}, {"sha": "72d63ac4b4b4191f1dc3e53108bd3f4e0bcb153b", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -38,6 +38,8 @@ pub use self::methods::encode_utf16_raw;\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n pub use self::methods::encode_utf8_raw;\n \n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n \n@@ -584,3 +586,7 @@ impl fmt::Display for TryFromCharError {\n         \"unicode code point out of range\".fmt(fmt)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n+impl Error for TryFromCharError {}"}, {"sha": "5bddfd1a413e70504a66a6d27c72ff182afdc53f", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -34,6 +34,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n \n@@ -715,6 +717,14 @@ impl fmt::Display for Infallible {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n+impl Error for Infallible {\n+    fn description(&self) -> &str {\n+        match *self {}\n+    }\n+}\n+\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n impl PartialEq for Infallible {\n     fn eq(&self, _: &Infallible) -> bool {"}, {"sha": "891abebbfd39b3816d7edb4731cc0146eec1cd60", "filename": "library/core/src/error.md", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Ferror.md", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Ferror.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.md?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -0,0 +1,137 @@\n+Interfaces for working with Errors.\n+\n+# Error Handling In Rust\n+\n+The Rust language provides two complementary systems for constructing /\n+representing, reporting, propagating, reacting to, and discarding errors.\n+These responsibilities are collectively known as \"error handling.\" The\n+components of the first system, the panic runtime and interfaces, are most\n+commonly used to represent bugs that have been detected in your program. The\n+components of the second system, `Result`, the error traits, and user\n+defined types, are used to represent anticipated runtime failure modes of\n+your program.\n+\n+## The Panic Interfaces\n+\n+The following are the primary interfaces of the panic system and the\n+responsibilities they cover:\n+\n+* [`panic!`] and [`panic_any`] (Constructing, Propagated automatically)\n+* [`PanicInfo`] (Reporting)\n+* [`set_hook`], [`take_hook`], and [`#[panic_handler]`][panic-handler] (Reporting)\n+* [`catch_unwind`] and [`resume_unwind`] (Discarding, Propagating)\n+\n+The following are the primary interfaces of the error system and the\n+responsibilities they cover:\n+\n+* [`Result`] (Propagating, Reacting)\n+* The [`Error`] trait (Reporting)\n+* User defined types (Constructing / Representing)\n+* [`match`] and [`downcast`] (Reacting)\n+* The question mark operator ([`?`]) (Propagating)\n+* The partially stable [`Try`] traits (Propagating, Constructing)\n+* [`Termination`] (Reporting)\n+\n+## Converting Errors into Panics\n+\n+The panic and error systems are not entirely distinct. Often times errors\n+that are anticipated runtime failures in an API might instead represent bugs\n+to a caller. For these situations the standard library provides APIs for\n+constructing panics with an `Error` as it's source.\n+\n+* [`Result::unwrap`]\n+* [`Result::expect`]\n+\n+These functions are equivalent, they either return the inner value if the\n+`Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n+as the source. The only difference between them is that with `expect` you\n+provide a panic error message to be printed alongside the source, whereas\n+`unwrap` has a default message indicating only that you unwraped an `Err`.\n+\n+Of the two, `expect` is generally preferred since its `msg` field allows you\n+to convey your intent and assumptions which makes tracking down the source\n+of a panic easier. `unwrap` on the other hand can still be a good fit in\n+situations where you can trivially show that a piece of code will never\n+panic, such as `\"127.0.0.1\".parse::<std::net::IpAddr>().unwrap()` or early\n+prototyping.\n+\n+# Common Message Styles\n+\n+There are two common styles for how people word `expect` messages. Using\n+the message to present information to users encountering a panic\n+(\"expect as error message\") or using the message to present information\n+to developers debugging the panic (\"expect as precondition\").\n+\n+In the former case the expect message is used to describe the error that\n+has occurred which is considered a bug. Consider the following example:\n+\n+```should_panic\n+// Read environment variable, panic if it is not present\n+let path = std::env::var(\"IMPORTANT_PATH\").unwrap();\n+```\n+\n+In the \"expect as error message\" style we would use expect to describe\n+that the environment variable was not set when it should have been:\n+\n+```should_panic\n+let path = std::env::var(\"IMPORTANT_PATH\")\n+    .expect(\"env variable `IMPORTANT_PATH` is not set\");\n+```\n+\n+In the \"expect as precondition\" style, we would instead describe the\n+reason we _expect_ the `Result` should be `Ok`. With this style we would\n+prefer to write:\n+\n+```should_panic\n+let path = std::env::var(\"IMPORTANT_PATH\")\n+    .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n+```\n+\n+The \"expect as error message\" style does not work as well with the\n+default output of the std panic hooks, and often ends up repeating\n+information that is already communicated by the source error being\n+unwrapped:\n+\n+```text\n+thread 'main' panicked at 'env variable `IMPORTANT_PATH` is not set: NotPresent', src/main.rs:4:6\n+```\n+\n+In this example we end up mentioning that an env variable is not set,\n+followed by our source message that says the env is not present, the\n+only additional information we're communicating is the name of the\n+environment variable being checked.\n+\n+The \"expect as precondition\" style instead focuses on source code\n+readability, making it easier to understand what must have gone wrong in\n+situations where panics are being used to represent bugs exclusively.\n+Also, by framing our expect in terms of what \"SHOULD\" have happened to\n+prevent the source error, we end up introducing new information that is\n+independent from our source error.\n+\n+```text\n+thread 'main' panicked at 'env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`: NotPresent', src/main.rs:4:6\n+```\n+\n+In this example we are communicating not only the name of the\n+environment variable that should have been set, but also an explanation\n+for why it should have been set, and we let the source error display as\n+a clear contradiction to our expectation.\n+\n+**Hint**: If you're having trouble remembering how to phrase\n+expect-as-precondition style error messages remember to focus on the word\n+\"should\" as in \"env variable should be set by blah\" or \"the given binary\n+should be available and executable by the current user\".\n+\n+[`panic_any`]: ../../std/panic/fn.panic_any.html\n+[`PanicInfo`]: crate::panic::PanicInfo\n+[`catch_unwind`]: ../../std/panic/fn.catch_unwind.html\n+[`resume_unwind`]: ../../std/panic/fn.resume_unwind.html\n+[`downcast`]: crate::error::Error\n+[`Termination`]: ../../std/process/trait.Termination.html\n+[`Try`]: crate::ops::Try\n+[panic hook]: ../../std/panic/fn.set_hook.html\n+[`set_hook`]: ../../std/panic/fn.set_hook.html\n+[`take_hook`]: ../../std/panic/fn.take_hook.html\n+[panic-handler]: <https://doc.rust-lang.org/nomicon/panic-handler.html>\n+[`match`]: ../../std/keyword.match.html\n+[`?`]: ../../std/result/index.html#the-question-mark-operator-"}, {"sha": "d11debb34adca7c85c10d2b0c96cbfae3c874328", "filename": "library/core/src/error.rs", "status": "added", "additions": 508, "deletions": 0, "changes": 508, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -0,0 +1,508 @@\n+#![doc = include_str!(\"error.md\")]\n+#![unstable(feature = \"error_in_core\", issue = \"none\")]\n+\n+// A note about crates and the facade:\n+//\n+// Originally, the `Error` trait was defined in libcore, and the impls\n+// were scattered about. However, coherence objected to this\n+// arrangement, because to create the blanket impls for `Box` required\n+// knowing that `&str: !Error`, and we have no means to deal with that\n+// sort of conflict just now. Therefore, for the time being, we have\n+// moved the `Error` trait into libstd. As we evolve a sol'n to the\n+// coherence challenge (e.g., specialization, neg impls, etc) we can\n+// reconsider what crate these items belong in.\n+\n+#[cfg(test)]\n+mod tests;\n+\n+use crate::any::{Demand, Provider, TypeId};\n+use crate::fmt::{Debug, Display};\n+\n+/// `Error` is a trait representing the basic expectations for error values,\n+/// i.e., values of type `E` in [`Result<T, E>`].\n+///\n+/// Errors must describe themselves through the [`Display`] and [`Debug`]\n+/// traits. Error messages are typically concise lowercase sentences without\n+/// trailing punctuation:\n+///\n+/// ```\n+/// let err = \"NaN\".parse::<u32>().unwrap_err();\n+/// assert_eq!(err.to_string(), \"invalid digit found in string\");\n+/// ```\n+///\n+/// Errors may provide cause chain information. [`Error::source()`] is generally\n+/// used when errors cross \"abstraction boundaries\". If one module must report\n+/// an error that is caused by an error from a lower-level module, it can allow\n+/// accessing that error via [`Error::source()`]. This makes it possible for the\n+/// high-level module to provide its own errors while also revealing some of the\n+/// implementation for debugging via `source` chains.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n+#[rustc_has_incoherent_inherent_impls]\n+pub trait Error: Debug + Display {\n+    /// The lower-level source of this error, if any.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperError {\n+    ///     source: SuperErrorSideKick,\n+    /// }\n+    ///\n+    /// impl fmt::Display for SuperError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"SuperError is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperError {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         Some(&self.source)\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperErrorSideKick;\n+    ///\n+    /// impl fmt::Display for SuperErrorSideKick {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"SuperErrorSideKick is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperErrorSideKick {}\n+    ///\n+    /// fn get_super_error() -> Result<(), SuperError> {\n+    ///     Err(SuperError { source: SuperErrorSideKick })\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     match get_super_error() {\n+    ///         Err(e) => {\n+    ///             println!(\"Error: {e}\");\n+    ///             println!(\"Caused by: {}\", e.source().unwrap());\n+    ///         }\n+    ///         _ => println!(\"No error\"),\n+    ///     }\n+    /// }\n+    /// ```\n+    #[stable(feature = \"error_source\", since = \"1.30.0\")]\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        None\n+    }\n+\n+    /// Gets the `TypeId` of `self`.\n+    #[doc(hidden)]\n+    #[unstable(\n+        feature = \"error_type_id\",\n+        reason = \"this is memory-unsafe to override in user code\",\n+        issue = \"60784\"\n+    )]\n+    fn type_id(&self, _: private::Internal) -> TypeId\n+    where\n+        Self: 'static,\n+    {\n+        TypeId::of::<Self>()\n+    }\n+\n+    /// ```\n+    /// if let Err(e) = \"xc\".parse::<u32>() {\n+    ///     // Print `e` itself, no need for description().\n+    ///     eprintln!(\"Error: {e}\");\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]\n+    fn description(&self) -> &str {\n+        \"description() is deprecated; use Display\"\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(\n+        since = \"1.33.0\",\n+        note = \"replaced by Error::source, which can support downcasting\"\n+    )]\n+    #[allow(missing_docs)]\n+    fn cause(&self) -> Option<&dyn Error> {\n+        self.source()\n+    }\n+\n+    /// Provides type based access to context intended for error reports.\n+    ///\n+    /// Used in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\n+    /// references to member variables from `dyn Error` trait objects.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    /// #![feature(error_generic_member_access)]\n+    /// use core::fmt;\n+    /// use core::any::Demand;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct MyBacktrace {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl MyBacktrace {\n+    ///     fn new() -> MyBacktrace {\n+    ///         // ...\n+    ///         # MyBacktrace {}\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SourceError {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl fmt::Display for SourceError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Source Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for SourceError {}\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct Error {\n+    ///     source: SourceError,\n+    ///     backtrace: MyBacktrace,\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for Error {\n+    ///     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+    ///         req\n+    ///             .provide_ref::<MyBacktrace>(&self.backtrace)\n+    ///             .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let backtrace = MyBacktrace::new();\n+    ///     let source = SourceError {};\n+    ///     let error = Error { source, backtrace };\n+    ///     let dyn_error = &error as &dyn std::error::Error;\n+    ///     let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n+    ///\n+    ///     assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    #[allow(unused_variables)]\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {}\n+}\n+\n+#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+impl<E> Provider for E\n+where\n+    E: Error + ?Sized,\n+{\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+        self.provide(req)\n+    }\n+}\n+\n+mod private {\n+    // This is a hack to prevent `type_id` from being overridden by `Error`\n+    // implementations, since that can enable unsound downcasting.\n+    #[unstable(feature = \"error_type_id\", issue = \"60784\")]\n+    #[derive(Debug)]\n+    pub struct Internal;\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Error for ! {}\n+\n+impl<'a> dyn Error + 'a {\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&'a self) -> Option<&'a T> {\n+        core::any::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_value<T: 'static>(&'a self) -> Option<T> {\n+        core::any::request_value(self)\n+    }\n+}\n+\n+// Copied from `any.rs`.\n+impl dyn Error + 'static {\n+    /// Returns `true` if the inner type is the same as `T`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        // Get `TypeId` of the type this function is instantiated with.\n+        let t = TypeId::of::<T>();\n+\n+        // Get `TypeId` of the type in the trait object (`self`).\n+        let concrete = self.type_id(private::Internal);\n+\n+        // Compare both `TypeId`s on equality.\n+        t == concrete\n+    }\n+\n+    /// Returns some reference to the inner value if it is of type `T`, or\n+    /// `None` if it isn't.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        if self.is::<T>() {\n+            // SAFETY: `is` ensures this type cast is correct\n+            unsafe { Some(&*(self as *const dyn Error as *const T)) }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns some mutable reference to the inner value if it is of type `T`, or\n+    /// `None` if it isn't.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        if self.is::<T>() {\n+            // SAFETY: `is` ensures this type cast is correct\n+            unsafe { Some(&mut *(self as *mut dyn Error as *mut T)) }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl dyn Error + 'static + Send {\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        <dyn Error + 'static>::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n+    }\n+\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error>::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error>::request_value(self)\n+    }\n+}\n+\n+impl dyn Error + 'static + Send + Sync {\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        <dyn Error + 'static>::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `dyn Error`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n+    }\n+\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error>::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error>::request_value(self)\n+    }\n+}\n+\n+impl dyn Error {\n+    /// Returns an iterator starting with the current error and continuing with\n+    /// recursively calling [`Error::source`].\n+    ///\n+    /// If you want to omit the current error and only use its sources,\n+    /// use `skip(1)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    ///\n+    /// // let err : Box<Error> = b.into(); // or\n+    /// let err = &b as &(dyn Error);\n+    ///\n+    /// let mut iter = err.chain();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    #[unstable(feature = \"error_iter\", issue = \"58520\")]\n+    #[inline]\n+    pub fn chain(&self) -> Chain<'_> {\n+        Chain { current: Some(self) }\n+    }\n+}\n+\n+/// An iterator over an [`Error`] and its sources.\n+///\n+/// If you want to omit the initial error and only process\n+/// its sources, use `skip(1)`.\n+#[unstable(feature = \"error_iter\", issue = \"58520\")]\n+#[derive(Clone, Debug)]\n+pub struct Chain<'a> {\n+    current: Option<&'a (dyn Error + 'static)>,\n+}\n+\n+#[unstable(feature = \"error_iter\", issue = \"58520\")]\n+impl<'a> Iterator for Chain<'a> {\n+    type Item = &'a (dyn Error + 'static);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let current = self.current;\n+        self.current = self.current.and_then(Error::source);\n+        current\n+    }\n+}\n+\n+#[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n+impl<'a, T: Error + ?Sized> Error for &'a T {\n+    #[allow(deprecated, deprecated_in_future)]\n+    fn description(&self) -> &str {\n+        Error::description(&**self)\n+    }\n+\n+    #[allow(deprecated)]\n+    fn cause(&self) -> Option<&dyn Error> {\n+        Error::cause(&**self)\n+    }\n+\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        Error::source(&**self)\n+    }\n+\n+    fn provide<'b>(&'b self, req: &mut Demand<'b>) {\n+        Error::provide(&**self, req);\n+    }\n+}\n+\n+#[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n+impl Error for crate::fmt::Error {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"an error occurred when formatting an argument\"\n+    }\n+}\n+\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Error for crate::cell::BorrowError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"already mutably borrowed\"\n+    }\n+}\n+\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Error for crate::cell::BorrowMutError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"already borrowed\"\n+    }\n+}\n+\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl Error for crate::char::CharTryFromError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"converted integer out of range for `char`\"\n+    }\n+}\n+\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n+impl Error for crate::char::ParseCharError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+impl Error for crate::time::FromFloatSecsError {}\n+\n+#[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n+impl Error for crate::ffi::FromBytesWithNulError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+impl Error for crate::ffi::FromBytesUntilNulError {}"}, {"sha": "8d04a213f503db0edc81d4840b21a92d106a92b1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -302,6 +302,8 @@ pub mod clone;\n pub mod cmp;\n pub mod convert;\n pub mod default;\n+#[cfg(not(bootstrap))]\n+pub mod error;\n pub mod marker;\n pub mod ops;\n "}, {"sha": "1f6b40e5df554b2e07136dae49b4a556ae45f563", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -1,6 +1,8 @@\n //! Error types for conversion to integral types.\n \n use crate::convert::Infallible;\n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n \n /// The error type returned when a checked integral type conversion fails.\n@@ -144,3 +146,21 @@ impl fmt::Display for ParseIntError {\n         self.__description().fmt(f)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for ParseIntError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl Error for TryFromIntError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}"}, {"sha": "ab17aa0c83032d0fd5e97f8b25792e1c55437a38", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -3,6 +3,8 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::intrinsics;\n use crate::mem;\n use crate::ops::{Add, Mul, Sub};\n@@ -57,6 +59,16 @@ pub use wrapping::Wrapping;\n #[cfg(not(no_fp_fmt_parse))]\n pub use dec2flt::ParseFloatError;\n \n+#[cfg(not(bootstrap))]\n+#[cfg(not(no_fp_fmt_parse))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for ParseFloatError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        self.__description()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use error::ParseIntError;\n "}, {"sha": "343889b6999fae8ce24eaf70b0fc5a03b4a21d85", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -1,5 +1,7 @@\n //! Defines utf8 error type.\n \n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt;\n \n /// Errors which can occur when attempting to interpret a sequence of [`u8`]\n@@ -122,6 +124,15 @@ impl fmt::Display for Utf8Error {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for Utf8Error {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"invalid utf-8: corrupt contents\"\n+    }\n+}\n+\n /// An error returned when parsing a `bool` using [`from_str`] fails\n ///\n /// [`from_str`]: super::FromStr::from_str\n@@ -136,3 +147,12 @@ impl fmt::Display for ParseBoolError {\n         \"provided string was not `true` or `false`\".fmt(f)\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for ParseBoolError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"failed to parse bool\"\n+    }\n+}"}, {"sha": "2120bf61d759d739fb6b2ac7696bc7c6d29b4ee1", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -2638,3 +2638,7 @@ impl_fn_for_zst! {\n         unsafe { from_utf8_unchecked(bytes) }\n     };\n }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(bootstrap))]\n+impl !crate::error::Error for &str {}"}, {"sha": "9845d1faf9aa1f544944440de0b0a6b300a9dd98", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -9,6 +9,8 @@ use crate::borrow::Borrow;\n use crate::cell::Cell;\n use crate::collections::TryReserveError;\n use crate::collections::TryReserveErrorKind;\n+#[cfg(not(bootstrap))]\n+use crate::error::Error;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n use crate::hash::{BuildHasher, Hash, Hasher, SipHasher13};\n@@ -2158,6 +2160,15 @@ impl<'a, K: Debug, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: fmt::Debug, V: fmt::Debug> Error for OccupiedError<'a, K, V> {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"key already exists\"\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type Item = (&'a K, &'a V);"}, {"sha": "914f6d6d2e3e9042df762fc15d199ba9abfe49ee", "filename": "library/std/src/error.rs", "status": "modified", "additions": 81, "deletions": 226, "changes": 307, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -1,141 +1,4 @@\n-//! The `Error` trait provides common functionality for errors.\n-//!\n-//! # Error Handling In Rust\n-//!\n-//! The Rust language provides two complementary systems for constructing /\n-//! representing, reporting, propagating, reacting to, and discarding errors.\n-//! These responsibilities are collectively known as \"error handling.\" The\n-//! components of the first system, the panic runtime and interfaces, are most\n-//! commonly used to represent bugs that have been detected in your program. The\n-//! components of the second system, `Result`, the error traits, and user\n-//! defined types, are used to represent anticipated runtime failure modes of\n-//! your program.\n-//!\n-//! ## The Panic Interfaces\n-//!\n-//! The following are the primary interfaces of the panic system and the\n-//! responsibilities they cover:\n-//!\n-//! * [`panic!`] and [`panic_any`] (Constructing, Propagated automatically)\n-//! * [`PanicInfo`] (Reporting)\n-//! * [`set_hook`], [`take_hook`], and [`#[panic_handler]`][panic-handler] (Reporting)\n-//! * [`catch_unwind`] and [`resume_unwind`] (Discarding, Propagating)\n-//!\n-//! The following are the primary interfaces of the error system and the\n-//! responsibilities they cover:\n-//!\n-//! * [`Result`] (Propagating, Reacting)\n-//! * The [`Error`] trait (Reporting)\n-//! * User defined types (Constructing / Representing)\n-//! * [`match`] and [`downcast`] (Reacting)\n-//! * The question mark operator ([`?`]) (Propagating)\n-//! * The partially stable [`Try`] traits (Propagating, Constructing)\n-//! * [`Termination`] (Reporting)\n-//!\n-//! ## Converting Errors into Panics\n-//!\n-//! The panic and error systems are not entirely distinct. Often times errors\n-//! that are anticipated runtime failures in an API might instead represent bugs\n-//! to a caller. For these situations the standard library provides APIs for\n-//! constructing panics with an `Error` as it's source.\n-//!\n-//! * [`Result::unwrap`]\n-//! * [`Result::expect`]\n-//!\n-//! These functions are equivalent, they either return the inner value if the\n-//! `Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n-//! as the source. The only difference between them is that with `expect` you\n-//! provide a panic error message to be printed alongside the source, whereas\n-//! `unwrap` has a default message indicating only that you unwraped an `Err`.\n-//!\n-//! Of the two, `expect` is generally preferred since its `msg` field allows you\n-//! to convey your intent and assumptions which makes tracking down the source\n-//! of a panic easier. `unwrap` on the other hand can still be a good fit in\n-//! situations where you can trivially show that a piece of code will never\n-//! panic, such as `\"127.0.0.1\".parse::<std::net::IpAddr>().unwrap()` or early\n-//! prototyping.\n-//!\n-//! # Common Message Styles\n-//!\n-//! There are two common styles for how people word `expect` messages. Using\n-//! the message to present information to users encountering a panic\n-//! (\"expect as error message\") or using the message to present information\n-//! to developers debugging the panic (\"expect as precondition\").\n-//!\n-//! In the former case the expect message is used to describe the error that\n-//! has occurred which is considered a bug. Consider the following example:\n-//!\n-//! ```should_panic\n-//! // Read environment variable, panic if it is not present\n-//! let path = std::env::var(\"IMPORTANT_PATH\").unwrap();\n-//! ```\n-//!\n-//! In the \"expect as error message\" style we would use expect to describe\n-//! that the environment variable was not set when it should have been:\n-//!\n-//! ```should_panic\n-//! let path = std::env::var(\"IMPORTANT_PATH\")\n-//!     .expect(\"env variable `IMPORTANT_PATH` is not set\");\n-//! ```\n-//!\n-//! In the \"expect as precondition\" style, we would instead describe the\n-//! reason we _expect_ the `Result` should be `Ok`. With this style we would\n-//! prefer to write:\n-//!\n-//! ```should_panic\n-//! let path = std::env::var(\"IMPORTANT_PATH\")\n-//!     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n-//! ```\n-//!\n-//! The \"expect as error message\" style does not work as well with the\n-//! default output of the std panic hooks, and often ends up repeating\n-//! information that is already communicated by the source error being\n-//! unwrapped:\n-//!\n-//! ```text\n-//! thread 'main' panicked at 'env variable `IMPORTANT_PATH` is not set: NotPresent', src/main.rs:4:6\n-//! ```\n-//!\n-//! In this example we end up mentioning that an env variable is not set,\n-//! followed by our source message that says the env is not present, the\n-//! only additional information we're communicating is the name of the\n-//! environment variable being checked.\n-//!\n-//! The \"expect as precondition\" style instead focuses on source code\n-//! readability, making it easier to understand what must have gone wrong in\n-//! situations where panics are being used to represent bugs exclusively.\n-//! Also, by framing our expect in terms of what \"SHOULD\" have happened to\n-//! prevent the source error, we end up introducing new information that is\n-//! independent from our source error.\n-//!\n-//! ```text\n-//! thread 'main' panicked at 'env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`: NotPresent', src/main.rs:4:6\n-//! ```\n-//!\n-//! In this example we are communicating not only the name of the\n-//! environment variable that should have been set, but also an explanation\n-//! for why it should have been set, and we let the source error display as\n-//! a clear contradiction to our expectation.\n-//!\n-//! **Hint**: If you're having trouble remembering how to phrase\n-//! expect-as-precondition style error messages remember to focus on the word\n-//! \"should\" as in \"env variable should be set by blah\" or \"the given binary\n-//! should be available and executable by the current user\".\n-//!\n-//! [`panic_any`]: crate::panic::panic_any\n-//! [`PanicInfo`]: crate::panic::PanicInfo\n-//! [`catch_unwind`]: crate::panic::catch_unwind\n-//! [`resume_unwind`]: crate::panic::resume_unwind\n-//! [`downcast`]: crate::error::Error\n-//! [`Termination`]: crate::process::Termination\n-//! [`Try`]: crate::ops::Try\n-//! [panic hook]: crate::panic::set_hook\n-//! [`set_hook`]: crate::panic::set_hook\n-//! [`take_hook`]: crate::panic::take_hook\n-//! [panic-handler]: <https://doc.rust-lang.org/nomicon/panic-handler.html>\n-//! [`match`]: ../../std/keyword.match.html\n-//! [`?`]: ../../std/result/index.html#the-question-mark-operator-\n-\n+#![doc = include_str!(\"../../core/src/error.md\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // A note about crates and the facade:\n@@ -152,24 +15,48 @@\n #[cfg(test)]\n mod tests;\n \n+#[cfg(bootstrap)]\n use core::array;\n+#[cfg(bootstrap)]\n use core::convert::Infallible;\n \n+#[cfg(bootstrap)]\n use crate::alloc::{AllocError, LayoutError};\n-use crate::any::{Demand, Provider, TypeId};\n+#[cfg(bootstrap)]\n+use crate::any::Demand;\n+#[cfg(bootstrap)]\n+use crate::any::{Provider, TypeId};\n use crate::backtrace::Backtrace;\n+#[cfg(bootstrap)]\n use crate::borrow::Cow;\n+#[cfg(bootstrap)]\n use crate::cell;\n+#[cfg(bootstrap)]\n use crate::char;\n-use crate::fmt::{self, Debug, Display, Write};\n+#[cfg(bootstrap)]\n+use crate::fmt::Debug;\n+#[cfg(bootstrap)]\n+use crate::fmt::Display;\n+use crate::fmt::{self, Write};\n+#[cfg(bootstrap)]\n use crate::io;\n+#[cfg(bootstrap)]\n use crate::mem::transmute;\n+#[cfg(bootstrap)]\n use crate::num;\n+#[cfg(bootstrap)]\n use crate::str;\n+#[cfg(bootstrap)]\n use crate::string;\n+#[cfg(bootstrap)]\n use crate::sync::Arc;\n+#[cfg(bootstrap)]\n use crate::time;\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::error::Error;\n+\n /// `Error` is a trait representing the basic expectations for error values,\n /// i.e., values of type `E` in [`Result<T, E>`].\n ///\n@@ -190,6 +77,7 @@ use crate::time;\n /// implementation for debugging via `source` chains.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n+#[cfg(bootstrap)]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///\n@@ -355,6 +243,7 @@ pub trait Error: Debug + Display {\n     fn provide<'a>(&'a self, req: &mut Demand<'a>) {}\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n impl<'b> Provider for dyn Error + 'b {\n     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n@@ -370,6 +259,7 @@ mod private {\n     pub struct Internal;\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n@@ -402,6 +292,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n@@ -440,6 +331,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n@@ -483,6 +375,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n@@ -504,6 +397,7 @@ impl From<String> for Box<dyn Error> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n@@ -527,6 +421,7 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n@@ -548,6 +443,7 @@ impl From<&str> for Box<dyn Error> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n@@ -569,6 +465,7 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n@@ -589,19 +486,23 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Error for ! {}\n \n+#[cfg(bootstrap)]\n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\",\n     issue = \"32838\"\n )]\n impl Error for AllocError {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl Error for LayoutError {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::ParseBoolError {\n     #[allow(deprecated)]\n@@ -610,6 +511,7 @@ impl Error for str::ParseBoolError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::Utf8Error {\n     #[allow(deprecated)]\n@@ -618,6 +520,7 @@ impl Error for str::Utf8Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseIntError {\n     #[allow(deprecated)]\n@@ -626,6 +529,7 @@ impl Error for num::ParseIntError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for num::TryFromIntError {\n     #[allow(deprecated)]\n@@ -634,6 +538,7 @@ impl Error for num::TryFromIntError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for array::TryFromSliceError {\n     #[allow(deprecated)]\n@@ -642,6 +547,7 @@ impl Error for array::TryFromSliceError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseFloatError {\n     #[allow(deprecated)]\n@@ -650,6 +556,7 @@ impl Error for num::ParseFloatError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for string::FromUtf8Error {\n     #[allow(deprecated)]\n@@ -658,6 +565,7 @@ impl Error for string::FromUtf8Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for string::FromUtf16Error {\n     #[allow(deprecated)]\n@@ -666,13 +574,15 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n impl Error for Infallible {\n     fn description(&self) -> &str {\n         match *self {}\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n     #[allow(deprecated)]\n@@ -681,9 +591,11 @@ impl Error for char::DecodeUtf16Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n impl Error for char::TryFromCharError {}\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug + Ord, V: Debug> Error\n     for crate::collections::btree_map::OccupiedError<'a, K, V>\n@@ -694,6 +606,7 @@ impl<'a, K: Debug + Ord, V: Debug> Error\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedError<'a, K, V> {\n     #[allow(deprecated)]\n@@ -702,6 +615,7 @@ impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedErr\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: Error> Error for Box<T> {\n     #[allow(deprecated, deprecated_in_future)]\n@@ -719,6 +633,7 @@ impl<T: Error> Error for Box<T> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n impl<T: ?Sized + crate::error::Error> crate::error::Error for crate::boxed::ThinBox<T> {\n     fn source(&self) -> Option<&(dyn crate::error::Error + 'static)> {\n@@ -727,6 +642,7 @@ impl<T: ?Sized + crate::error::Error> crate::error::Error for crate::boxed::Thin\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n impl<'a, T: Error + ?Sized> Error for &'a T {\n     #[allow(deprecated, deprecated_in_future)]\n@@ -748,6 +664,7 @@ impl<'a, T: Error + ?Sized> Error for &'a T {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"arc_error\", since = \"1.52.0\")]\n impl<T: Error + ?Sized> Error for Arc<T> {\n     #[allow(deprecated, deprecated_in_future)]\n@@ -769,6 +686,7 @@ impl<T: Error + ?Sized> Error for Arc<T> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n impl Error for fmt::Error {\n     #[allow(deprecated)]\n@@ -777,6 +695,7 @@ impl Error for fmt::Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Error for cell::BorrowError {\n     #[allow(deprecated)]\n@@ -785,6 +704,7 @@ impl Error for cell::BorrowError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Error for cell::BorrowMutError {\n     #[allow(deprecated)]\n@@ -793,6 +713,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for char::CharTryFromError {\n     #[allow(deprecated)]\n@@ -801,6 +722,7 @@ impl Error for char::CharTryFromError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl Error for char::ParseCharError {\n     #[allow(deprecated)]\n@@ -809,12 +731,15 @@ impl Error for char::ParseCharError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl Error for alloc::collections::TryReserveError {}\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n impl Error for time::FromFloatSecsError {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for alloc::ffi::NulError {\n     #[allow(deprecated)]\n@@ -823,6 +748,7 @@ impl Error for alloc::ffi::NulError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<alloc::ffi::NulError> for io::Error {\n     /// Converts a [`alloc::ffi::NulError`] into a [`io::Error`].\n@@ -831,6 +757,7 @@ impl From<alloc::ffi::NulError> for io::Error {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl Error for core::ffi::FromBytesWithNulError {\n     #[allow(deprecated)]\n@@ -839,12 +766,15 @@ impl Error for core::ffi::FromBytesWithNulError {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n impl Error for core::ffi::FromBytesUntilNulError {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n impl Error for alloc::ffi::FromVecWithNulError {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl Error for alloc::ffi::IntoStringError {\n     #[allow(deprecated)]\n@@ -857,6 +787,7 @@ impl Error for alloc::ffi::IntoStringError {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl<'a> dyn Error + 'a {\n     /// Request a reference of type `T` as context about this error.\n     #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n@@ -872,6 +803,7 @@ impl<'a> dyn Error + 'a {\n }\n \n // Copied from `any.rs`.\n+#[cfg(bootstrap)]\n impl dyn Error + 'static {\n     /// Returns `true` if the inner type is the same as `T`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -912,6 +844,7 @@ impl dyn Error + 'static {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl dyn Error + 'static + Send {\n     /// Forwards to the method defined on the type `dyn Error`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -947,6 +880,7 @@ impl dyn Error + 'static + Send {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl dyn Error + 'static + Send + Sync {\n     /// Forwards to the method defined on the type `dyn Error`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -982,6 +916,7 @@ impl dyn Error + 'static + Send + Sync {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl dyn Error {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -1061,10 +996,12 @@ impl dyn Error {\n /// its sources, use `skip(1)`.\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n #[derive(Clone, Debug)]\n+#[cfg(bootstrap)]\n pub struct Chain<'a> {\n     current: Option<&'a (dyn Error + 'static)>,\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n impl<'a> Iterator for Chain<'a> {\n     type Item = &'a (dyn Error + 'static);\n@@ -1076,6 +1013,7 @@ impl<'a> Iterator for Chain<'a> {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl dyn Error + Send {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -1089,6 +1027,7 @@ impl dyn Error + Send {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl dyn Error + Send + Sync {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n@@ -1246,7 +1185,7 @@ impl dyn Error + Send + Sync {\n /// #     Err(SuperError { source: SuperErrorSideKick })\n /// # }\n ///\n-/// fn main() -> Result<(), Report> {\n+/// fn main() -> Result<(), Report<SuperError>> {\n ///     get_super_error()?;\n ///     Ok(())\n /// }\n@@ -1293,7 +1232,7 @@ impl dyn Error + Send + Sync {\n /// #     Err(SuperError { source: SuperErrorSideKick })\n /// # }\n ///\n-/// fn main() -> Result<(), Report> {\n+/// fn main() -> Result<(), Report<SuperError>> {\n ///     get_super_error()\n ///         .map_err(Report::from)\n ///         .map_err(|r| r.pretty(true).show_backtrace(true))?;\n@@ -1605,72 +1544,6 @@ where\n     }\n }\n \n-impl Report<Box<dyn Error>> {\n-    fn backtrace(&self) -> Option<&Backtrace> {\n-        // have to grab the backtrace on the first error directly since that error may not be\n-        // 'static\n-        let backtrace = self.error.request_ref();\n-        let backtrace = backtrace.or_else(|| {\n-            self.error\n-                .source()\n-                .map(|source| source.chain().find_map(|source| source.request_ref()))\n-                .flatten()\n-        });\n-        backtrace\n-    }\n-\n-    /// Format the report as a single line.\n-    #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n-    fn fmt_singleline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.error)?;\n-\n-        let sources = self.error.source().into_iter().flat_map(<dyn Error>::chain);\n-\n-        for cause in sources {\n-            write!(f, \": {cause}\")?;\n-        }\n-\n-        Ok(())\n-    }\n-\n-    /// Format the report as multiple lines, with each error cause on its own line.\n-    #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n-    fn fmt_multiline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let error = &self.error;\n-\n-        write!(f, \"{error}\")?;\n-\n-        if let Some(cause) = error.source() {\n-            write!(f, \"\\n\\nCaused by:\")?;\n-\n-            let multiple = cause.source().is_some();\n-\n-            for (ind, error) in cause.chain().enumerate() {\n-                writeln!(f)?;\n-                let mut indented = Indented { inner: f };\n-                if multiple {\n-                    write!(indented, \"{ind: >4}: {error}\")?;\n-                } else {\n-                    write!(indented, \"      {error}\")?;\n-                }\n-            }\n-        }\n-\n-        if self.show_backtrace {\n-            let backtrace = self.backtrace();\n-\n-            if let Some(backtrace) = backtrace {\n-                let backtrace = backtrace.to_string();\n-\n-                f.write_str(\"\\n\\nStack backtrace:\\n\")?;\n-                f.write_str(backtrace.trim_end())?;\n-            }\n-        }\n-\n-        Ok(())\n-    }\n-}\n-\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n impl<E> From<E> for Report<E>\n where\n@@ -1681,17 +1554,6 @@ where\n     }\n }\n \n-#[unstable(feature = \"error_reporter\", issue = \"90172\")]\n-impl<'a, E> From<E> for Report<Box<dyn Error + 'a>>\n-where\n-    E: Error + 'a,\n-{\n-    fn from(error: E) -> Self {\n-        let error = box error;\n-        Report { error, show_backtrace: false, pretty: false }\n-    }\n-}\n-\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n impl<E> fmt::Display for Report<E>\n where\n@@ -1702,13 +1564,6 @@ where\n     }\n }\n \n-#[unstable(feature = \"error_reporter\", issue = \"90172\")]\n-impl fmt::Display for Report<Box<dyn Error>> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if self.pretty { self.fmt_multiline(f) } else { self.fmt_singleline(f) }\n-    }\n-}\n-\n // This type intentionally outputs the same format for `Display` and `Debug`for\n // situations where you unwrap a `Report` or return it from main.\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]"}, {"sha": "885e44f5e18bd43658d622160ee6162b425cc73a", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -76,6 +76,15 @@ impl fmt::Debug for Error {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl From<alloc::ffi::NulError> for Error {\n+    /// Converts a [`alloc::ffi::NulError`] into a [`Error`].\n+    fn from(_: alloc::ffi::NulError) -> Error {\n+        const_io_error!(ErrorKind::InvalidInput, \"data provided contains a nul byte\")\n+    }\n+}\n+\n // Only derive debug in tests, to make sure it\n // doesn't accidentally get printed.\n #[cfg_attr(test, derive(Debug))]"}, {"sha": "dbaead406b7d028de5bbf196057134e3ce9ec2e4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060e47f74a91b28c3db28d80a6a9d6841ca51026/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=060e47f74a91b28c3db28d80a6a9d6841ca51026", "patch": "@@ -281,6 +281,9 @@\n #![feature(cstr_internals)]\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]\n+#![cfg_attr(not(bootstrap), feature(error_generic_member_access))]\n+#![cfg_attr(not(bootstrap), feature(error_in_core))]\n+#![cfg_attr(not(bootstrap), feature(error_iter))]\n #![feature(exact_size_is_empty)]\n #![feature(exclusive_wrapper)]\n #![feature(extend_one)]"}]}