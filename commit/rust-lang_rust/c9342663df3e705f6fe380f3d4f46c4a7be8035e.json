{"sha": "c9342663df3e705f6fe380f3d4f46c4a7be8035e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MzQyNjYzZGYzZTcwNWY2ZmUzODBmM2Q0ZjQ2YzRhN2JlODAzNWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T11:57:22Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:59:59Z"}, "message": "iterator: add a FromIterator trait\n\nThis is able to take advantage of the lower bound from the size hint.", "tree": {"sha": "9cc269199bfdf767495e7d2dec17ed9b8230c674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc269199bfdf767495e7d2dec17ed9b8230c674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9342663df3e705f6fe380f3d4f46c4a7be8035e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9342663df3e705f6fe380f3d4f46c4a7be8035e", "html_url": "https://github.com/rust-lang/rust/commit/c9342663df3e705f6fe380f3d4f46c4a7be8035e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9342663df3e705f6fe380f3d4f46c4a7be8035e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468cbd9d014d4f8610694057f1a8132f1eaf0b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/468cbd9d014d4f8610694057f1a8132f1eaf0b19", "html_url": "https://github.com/rust-lang/rust/commit/468cbd9d014d4f8610694057f1a8132f1eaf0b19"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "46e059355941f6156dc59a62b765f1325a320c83", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9342663df3e705f6fe380f3d4f46c4a7be8035e/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9342663df3e705f6fe380f3d4f46c4a7be8035e/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=c9342663df3e705f6fe380f3d4f46c4a7be8035e", "patch": "@@ -27,6 +27,12 @@ use ops::{Add, Mul};\n use cmp::Ord;\n use clone::Clone;\n \n+/// Conversion from an `Iterator`\n+pub trait FromIterator<A, T: Iterator<A>> {\n+    /// Build a container with elements from an external iterator.\n+    pub fn from_iterator(iterator: &mut T) -> Self;\n+}\n+\n /// An interface for dealing with \"external iterators\". These types of iterators\n /// can be resumed at any time as all state is stored internally as opposed to\n /// being located on the call stack.\n@@ -931,7 +937,7 @@ mod tests {\n     #[test]\n     fn test_counter_from_iter() {\n         let mut it = Counter::new(0, 5).take_(10);\n-        let xs: ~[int] = iter::FromIter::from_iter::<int, ~[int]>(|f| it.advance(f));\n+        let xs: ~[int] = FromIterator::from_iterator(&mut it);\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n "}, {"sha": "62b42eebfbbd4683d60821609fb5e3686c7ae893", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9342663df3e705f6fe380f3d4f46c4a7be8035e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9342663df3e705f6fe380f3d4f46c4a7be8035e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c9342663df3e705f6fe380f3d4f46c4a7be8035e", "patch": "@@ -19,7 +19,7 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::{Iterator, IteratorUtil};\n+use iterator::{FromIterator, Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n@@ -2511,6 +2511,18 @@ impl<T> FromIter<T> for ~[T]{\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n+    pub fn from_iterator(iterator: &mut T) -> ~[A] {\n+        let (lower, _) = iterator.size_hint();\n+        let mut xs = with_capacity(lower.get_or_zero());\n+        for iterator.advance |x| {\n+            xs.push(x);\n+        }\n+        xs\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use option::{None, Option, Some};"}]}