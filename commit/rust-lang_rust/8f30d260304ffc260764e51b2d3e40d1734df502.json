{"sha": "8f30d260304ffc260764e51b2d3e40d1734df502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzBkMjYwMzA0ZmZjMjYwNzY0ZTUxYjJkM2U0MGQxNzM0ZGY1MDI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-15T23:59:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-19T09:02:57Z"}, "message": "hygiene: Tweak naming some more", "tree": {"sha": "2c937b8736c13eef523d9767b04445532a840ae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c937b8736c13eef523d9767b04445532a840ae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f30d260304ffc260764e51b2d3e40d1734df502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f30d260304ffc260764e51b2d3e40d1734df502", "html_url": "https://github.com/rust-lang/rust/commit/8f30d260304ffc260764e51b2d3e40d1734df502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f30d260304ffc260764e51b2d3e40d1734df502/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09703e3843622430276d0b3c672fbc772ce0b862", "url": "https://api.github.com/repos/rust-lang/rust/commits/09703e3843622430276d0b3c672fbc772ce0b862", "html_url": "https://github.com/rust-lang/rust/commit/09703e3843622430276d0b3c672fbc772ce0b862"}], "stats": {"total": 129, "additions": 65, "deletions": 64}, "files": [{"sha": "ae7d82c2020acc6f5bbbec3a0b67d16878496eaa", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -363,17 +363,17 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n             }\n \n             let sub_hash: u64 = CACHE.with(|cache| {\n-                let mark = span.ctxt.outer();\n+                let expn_id = span.ctxt.outer_expn();\n \n-                if let Some(&sub_hash) = cache.borrow().get(&mark) {\n+                if let Some(&sub_hash) = cache.borrow().get(&expn_id) {\n                     return sub_hash;\n                 }\n \n                 let mut hasher = StableHasher::new();\n-                mark.expn_info().hash_stable(hcx, &mut hasher);\n+                expn_id.expn_info().hash_stable(hcx, &mut hasher);\n                 let sub_hash: Fingerprint = hasher.finish();\n                 let sub_hash = sub_hash.to_smaller_hash();\n-                cache.borrow_mut().insert(mark, sub_hash);\n+                cache.borrow_mut().insert(expn_id, sub_hash);\n                 sub_hash\n             });\n "}, {"sha": "a25c1e34cf15438bc822e913af1ceb9c29b832c6", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -819,15 +819,15 @@ where\n         if span_data.ctxt == SyntaxContext::empty() {\n             TAG_NO_EXPANSION_INFO.encode(self)\n         } else {\n-            let (mark, expn_info) = span_data.ctxt.outer_and_expn_info();\n+            let (expn_id, expn_info) = span_data.ctxt.outer_expn_with_info();\n             if let Some(expn_info) = expn_info {\n-                if let Some(pos) = self.expn_info_shorthands.get(&mark).cloned() {\n+                if let Some(pos) = self.expn_info_shorthands.get(&expn_id).cloned() {\n                     TAG_EXPANSION_INFO_SHORTHAND.encode(self)?;\n                     pos.encode(self)\n                 } else {\n                     TAG_EXPANSION_INFO_INLINE.encode(self)?;\n                     let pos = AbsoluteBytePos::new(self.position());\n-                    self.expn_info_shorthands.insert(mark, pos);\n+                    self.expn_info_shorthands.insert(expn_id, pos);\n                     expn_info.encode(self)\n                 }\n             } else {"}, {"sha": "9763d523a2ac405ecf1d75261c378893e557d91d", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -102,7 +102,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             let kind = llvm::LLVMGetMDKindIDInContext(self.llcx,\n                 key.as_ptr() as *const c_char, key.len() as c_uint);\n \n-            let val: &'ll Value = self.const_i32(ia.ctxt.outer().as_u32() as i32);\n+            let val: &'ll Value = self.const_i32(ia.ctxt.outer_expn().as_u32() as i32);\n \n             llvm::LLVMSetMetadata(r, kind,\n                 llvm::LLVMMDNodeInContext(self.llcx, &val, 1));"}, {"sha": "6bf56bf85155312c60343b7cefd296bd45c6aaec", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -572,7 +572,7 @@ pub fn lower_to_hir(\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.debugging_opts.keep_hygiene_data {\n-        syntax::ext::hygiene::syntax_context_map();\n+        syntax::ext::hygiene::clear_syntax_context_map();\n     }\n \n     Ok(hir_forest)"}, {"sha": "d718d3f78f4e221237c545bd1c61df53a717dcab", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -2070,7 +2070,7 @@ impl<'a> Resolver<'a> {\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n         loop {\n-            match self.macro_defs.get(&ctxt.outer()) {\n+            match self.macro_defs.get(&ctxt.outer_expn()) {\n                 Some(&def_id) => return def_id,\n                 None => ctxt.remove_mark(),\n             };\n@@ -2428,7 +2428,7 @@ impl<'a> Resolver<'a> {\n \n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n-        if !module.expansion.outer_is_descendant_of(span.ctxt()) {\n+        if !module.expansion.outer_expn_is_descendant_of(span.ctxt()) {\n             return Some(self.macro_def_scope(span.remove_mark()));\n         }\n \n@@ -2464,7 +2464,7 @@ impl<'a> Resolver<'a> {\n             module.expansion.is_descendant_of(parent.expansion) {\n                 // The macro is a proc macro derive\n                 if module.expansion.looks_like_proc_macro_derive() {\n-                    if parent.expansion.outer_is_descendant_of(span.ctxt()) {\n+                    if parent.expansion.outer_expn_is_descendant_of(span.ctxt()) {\n                         *poisoned = Some(node_id);\n                         return module.parent;\n                     }"}, {"sha": "3760cabcd898a8b1821e6b9270fa9baf96f4e226", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -139,15 +139,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::default(\n             ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, self.session.edition()\n         ));\n-        let mark = span.ctxt().outer();\n+        let expn_id = span.ctxt().outer_expn();\n         let module = self.module_map[&self.definitions.local_def_id(id)];\n-        self.definitions.set_invocation_parent(mark, module.def_id().unwrap().index);\n-        self.invocations.insert(mark, self.arenas.alloc_invocation_data(InvocationData {\n+        self.definitions.set_invocation_parent(expn_id, module.def_id().unwrap().index);\n+        self.invocations.insert(expn_id, self.arenas.alloc_invocation_data(InvocationData {\n             module,\n             parent_legacy_scope: LegacyScope::Empty,\n             output_legacy_scope: Cell::new(None),\n         }));\n-        mark\n+        expn_id\n     }\n \n     fn resolve_dollar_crates(&mut self) {"}, {"sha": "944b1da36d038fb48f795adbafa86d7d21c542b7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f30d260304ffc260764e51b2d3e40d1734df502/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=8f30d260304ffc260764e51b2d3e40d1734df502", "patch": "@@ -42,8 +42,8 @@ pub struct SyntaxContext(u32);\n #[derive(Debug)]\n struct SyntaxContextData {\n     outer_expn: ExpnId,\n-    transparency: Transparency,\n-    prev_ctxt: SyntaxContext,\n+    outer_transparency: Transparency,\n+    parent: SyntaxContext,\n     /// This context, but with all transparent and semi-transparent expansions filtered away.\n     opaque: SyntaxContext,\n     /// This context, but with all transparent expansions filtered away.\n@@ -108,7 +108,7 @@ impl ExpnId {\n \n     #[inline]\n     pub fn parent(self) -> ExpnId {\n-        HygieneData::with(|data| data.expn_data[self.0 as usize].parent)\n+        HygieneData::with(|data| data.parent_expn(self))\n     }\n \n     #[inline]\n@@ -129,10 +129,10 @@ impl ExpnId {\n         HygieneData::with(|data| data.is_descendant_of(self, ancestor))\n     }\n \n-    /// `expn_id.outer_is_descendant_of(ctxt)` is equivalent to but faster than\n-    /// `expn_id.is_descendant_of(ctxt.outer())`.\n-    pub fn outer_is_descendant_of(self, ctxt: SyntaxContext) -> bool {\n-        HygieneData::with(|data| data.is_descendant_of(self, data.outer(ctxt)))\n+    /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than\n+    /// `expn_id.is_descendant_of(ctxt.outer_expn())`.\n+    pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {\n+        HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))\n     }\n \n     // Used for enabling some compatibility fallback in resolve.\n@@ -167,8 +167,8 @@ impl HygieneData {\n             }],\n             syntax_context_data: vec![SyntaxContextData {\n                 outer_expn: ExpnId::root(),\n-                transparency: Transparency::Opaque,\n-                prev_ctxt: SyntaxContext(0),\n+                outer_transparency: Transparency::Opaque,\n+                parent: SyntaxContext(0),\n                 opaque: SyntaxContext(0),\n                 opaque_and_semitransparent: SyntaxContext(0),\n                 dollar_crate_name: kw::DollarCrate,\n@@ -186,6 +186,10 @@ impl HygieneData {\n         ExpnId(self.expn_data.len() as u32 - 1)\n     }\n \n+    fn parent_expn(&self, expn_id: ExpnId) -> ExpnId {\n+        self.expn_data[expn_id.0 as usize].parent\n+    }\n+\n     fn expn_info(&self, expn_id: ExpnId) -> Option<&ExpnInfo> {\n         if expn_id != ExpnId::root() {\n             Some(self.expn_data[expn_id.0 as usize].expn_info.as_ref()\n@@ -203,7 +207,7 @@ impl HygieneData {\n             if expn_id == ExpnId::root() {\n                 return false;\n             }\n-            expn_id = self.expn_data[expn_id.0 as usize].parent;\n+            expn_id = self.parent_expn(expn_id);\n         }\n         true\n     }\n@@ -222,40 +226,37 @@ impl HygieneData {\n         self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent\n     }\n \n-    fn outer(&self, ctxt: SyntaxContext) -> ExpnId {\n+    fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {\n         self.syntax_context_data[ctxt.0 as usize].outer_expn\n     }\n \n-    fn transparency(&self, ctxt: SyntaxContext) -> Transparency {\n-        self.syntax_context_data[ctxt.0 as usize].transparency\n+    fn outer_transparency(&self, ctxt: SyntaxContext) -> Transparency {\n+        self.syntax_context_data[ctxt.0 as usize].outer_transparency\n     }\n \n-    fn prev_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {\n-        self.syntax_context_data[ctxt.0 as usize].prev_ctxt\n+    fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {\n+        self.syntax_context_data[ctxt.0 as usize].parent\n     }\n \n     fn remove_mark(&self, ctxt: &mut SyntaxContext) -> ExpnId {\n-        let outer_expn = self.syntax_context_data[ctxt.0 as usize].outer_expn;\n-        *ctxt = self.prev_ctxt(*ctxt);\n+        let outer_expn = self.outer_expn(*ctxt);\n+        *ctxt = self.parent_ctxt(*ctxt);\n         outer_expn\n     }\n \n     fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {\n         let mut marks = Vec::new();\n         while ctxt != SyntaxContext::empty() {\n-            let outer_expn = self.outer(ctxt);\n-            let transparency = self.transparency(ctxt);\n-            let prev_ctxt = self.prev_ctxt(ctxt);\n-            marks.push((outer_expn, transparency));\n-            ctxt = prev_ctxt;\n+            marks.push((self.outer_expn(ctxt), self.outer_transparency(ctxt)));\n+            ctxt = self.parent_ctxt(ctxt);\n         }\n         marks.reverse();\n         marks\n     }\n \n     fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {\n         while span.ctxt() != crate::NO_EXPANSION && span.ctxt() != to {\n-            if let Some(info) = self.expn_info(self.outer(span.ctxt())) {\n+            if let Some(info) = self.expn_info(self.outer_expn(span.ctxt())) {\n                 span = info.call_site;\n             } else {\n                 break;\n@@ -266,7 +267,7 @@ impl HygieneData {\n \n     fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {\n         let mut scope = None;\n-        while !self.is_descendant_of(expn_id, self.outer(*ctxt)) {\n+        while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {\n             scope = Some(self.remove_mark(ctxt));\n         }\n         scope\n@@ -320,14 +321,14 @@ impl HygieneData {\n             syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;\n \n         if transparency >= Transparency::Opaque {\n-            let prev_ctxt = opaque;\n-            opaque = *self.syntax_context_map.entry((prev_ctxt, expn_id, transparency))\n+            let parent = opaque;\n+            opaque = *self.syntax_context_map.entry((parent, expn_id, transparency))\n                                              .or_insert_with(|| {\n                 let new_opaque = SyntaxContext(syntax_context_data.len() as u32);\n                 syntax_context_data.push(SyntaxContextData {\n                     outer_expn: expn_id,\n-                    transparency,\n-                    prev_ctxt,\n+                    outer_transparency: transparency,\n+                    parent,\n                     opaque: new_opaque,\n                     opaque_and_semitransparent: new_opaque,\n                     dollar_crate_name: kw::DollarCrate,\n@@ -337,16 +338,16 @@ impl HygieneData {\n         }\n \n         if transparency >= Transparency::SemiTransparent {\n-            let prev_ctxt = opaque_and_semitransparent;\n+            let parent = opaque_and_semitransparent;\n             opaque_and_semitransparent =\n-                    *self.syntax_context_map.entry((prev_ctxt, expn_id, transparency))\n+                    *self.syntax_context_map.entry((parent, expn_id, transparency))\n                                             .or_insert_with(|| {\n                 let new_opaque_and_semitransparent =\n                     SyntaxContext(syntax_context_data.len() as u32);\n                 syntax_context_data.push(SyntaxContextData {\n                     outer_expn: expn_id,\n-                    transparency,\n-                    prev_ctxt,\n+                    outer_transparency: transparency,\n+                    parent,\n                     opaque,\n                     opaque_and_semitransparent: new_opaque_and_semitransparent,\n                     dollar_crate_name: kw::DollarCrate,\n@@ -355,14 +356,14 @@ impl HygieneData {\n             });\n         }\n \n-        let prev_ctxt = ctxt;\n-        *self.syntax_context_map.entry((prev_ctxt, expn_id, transparency)).or_insert_with(|| {\n+        let parent = ctxt;\n+        *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {\n             let new_opaque_and_semitransparent_and_transparent =\n                 SyntaxContext(syntax_context_data.len() as u32);\n             syntax_context_data.push(SyntaxContextData {\n                 outer_expn: expn_id,\n-                transparency,\n-                prev_ctxt,\n+                outer_transparency: transparency,\n+                parent,\n                 opaque,\n                 opaque_and_semitransparent,\n                 dollar_crate_name: kw::DollarCrate,\n@@ -372,7 +373,7 @@ impl HygieneData {\n     }\n }\n \n-pub fn syntax_context_map() {\n+pub fn clear_syntax_context_map() {\n     HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());\n }\n \n@@ -513,7 +514,7 @@ impl SyntaxContext {\n         HygieneData::with(|data| {\n             let mut scope = None;\n             let mut glob_ctxt = data.modern(glob_span.ctxt());\n-            while !data.is_descendant_of(expn_id, data.outer(glob_ctxt)) {\n+            while !data.is_descendant_of(expn_id, data.outer_expn(glob_ctxt)) {\n                 scope = Some(data.remove_mark(&mut glob_ctxt));\n                 if data.remove_mark(self) != scope.unwrap() {\n                     return None;\n@@ -542,7 +543,7 @@ impl SyntaxContext {\n \n             let mut glob_ctxt = data.modern(glob_span.ctxt());\n             let mut marks = Vec::new();\n-            while !data.is_descendant_of(expn_id, data.outer(glob_ctxt)) {\n+            while !data.is_descendant_of(expn_id, data.outer_expn(glob_ctxt)) {\n                 marks.push(data.remove_mark(&mut glob_ctxt));\n             }\n \n@@ -573,23 +574,23 @@ impl SyntaxContext {\n     }\n \n     #[inline]\n-    pub fn outer(self) -> ExpnId {\n-        HygieneData::with(|data| data.outer(self))\n+    pub fn outer_expn(self) -> ExpnId {\n+        HygieneData::with(|data| data.outer_expn(self))\n     }\n \n     /// `ctxt.outer_expn_info()` is equivalent to but faster than\n-    /// `ctxt.outer().expn_info()`.\n+    /// `ctxt.outer_expn().expn_info()`.\n     #[inline]\n     pub fn outer_expn_info(self) -> Option<ExpnInfo> {\n-        HygieneData::with(|data| data.expn_info(data.outer(self)).cloned())\n+        HygieneData::with(|data| data.expn_info(data.outer_expn(self)).cloned())\n     }\n \n-    /// `ctxt.outer_and_expn_info()` is equivalent to but faster than\n-    /// `{ let outer = ctxt.outer(); (outer, outer.expn_info()) }`.\n+    /// `ctxt.outer_expn_with_info()` is equivalent to but faster than\n+    /// `{ let outer = ctxt.outer_expn(); (outer, outer.expn_info()) }`.\n     #[inline]\n-    pub fn outer_and_expn_info(self) -> (ExpnId, Option<ExpnInfo>) {\n+    pub fn outer_expn_with_info(self) -> (ExpnId, Option<ExpnInfo>) {\n         HygieneData::with(|data| {\n-            let outer = data.outer(self);\n+            let outer = data.outer_expn(self);\n             (outer, data.expn_info(outer).cloned())\n         })\n     }\n@@ -613,7 +614,7 @@ impl Span {\n     /// but its location is inherited from the current span.\n     pub fn fresh_expansion(self, parent: ExpnId, expn_info: ExpnInfo) -> Span {\n         HygieneData::with(|data| {\n-            let expn_id = data.fresh_expn_id(parent, Some(expn_info));\n+            let expn_id = data.fresh_expn(parent, Some(expn_info));\n             self.with_ctxt(data.apply_mark(SyntaxContext::empty(), expn_id))\n         })\n     }"}]}