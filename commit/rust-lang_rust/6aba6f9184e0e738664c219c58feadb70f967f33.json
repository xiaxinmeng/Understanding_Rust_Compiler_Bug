{"sha": "6aba6f9184e0e738664c219c58feadb70f967f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYmE2ZjkxODRlMGU3Mzg2NjRjMjE5YzU4ZmVhZGI3MGY5NjdmMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-03T10:52:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-03T12:49:23Z"}, "message": "Allow to check if sync::Once is initialized", "tree": {"sha": "142019e9f7d662e6192809c86dca9749270ab13b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142019e9f7d662e6192809c86dca9749270ab13b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aba6f9184e0e738664c219c58feadb70f967f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aba6f9184e0e738664c219c58feadb70f967f33", "html_url": "https://github.com/rust-lang/rust/commit/6aba6f9184e0e738664c219c58feadb70f967f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aba6f9184e0e738664c219c58feadb70f967f33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dae47051315793d4d4d043b4b8b03c51e3dc877", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dae47051315793d4d4d043b4b8b03c51e3dc877", "html_url": "https://github.com/rust-lang/rust/commit/4dae47051315793d4d4d043b4b8b03c51e3dc877"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "3ca6a135345410495ca8fbf8941c6e96fe671342", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6aba6f9184e0e738664c219c58feadb70f967f33/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aba6f9184e0e738664c219c58feadb70f967f33/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=6aba6f9184e0e738664c219c58feadb70f967f33", "patch": "@@ -295,6 +295,47 @@ impl Once {\n         });\n     }\n \n+    /// Returns true if some `call_once` call has completed\n+    /// successfuly. Specifically, `is_completed` will return false in\n+    /// the following situtations:\n+    ///   * `call_once` was not called at all,\n+    ///   * `call_once` was called, but has not yet completed,\n+    ///   * the `Once` instance is poisoned\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(once_is_completed)]\n+    /// use std::sync::Once;\n+    ///\n+    /// static INIT: Once = Once::new();\n+    ///\n+    /// assert_eq!(INIT.is_completed(), false);\n+    /// INIT.call_once(|| {\n+    ///     assert_eq!(INIT.is_completed(), false);\n+    /// });\n+    /// assert_eq!(INIT.is_completed(), true);\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(once_is_completed)]\n+    /// use std::sync::Once;\n+    /// use std::thread;\n+    ///\n+    /// static INIT: Once = Once::new();\n+    ///\n+    /// assert_eq!(INIT.is_completed(), false);\n+    /// let handle = thread::spawn(|| {\n+    ///     INIT.call_once(|| panic!());\n+    /// });\n+    /// assert!(handle.join().is_err());\n+    /// assert_eq!(INIT.is_completed(), false);\n+    /// ```\n+    #[unstable(feature = \"once_is_completed\", issue = \"42\")]\n+    pub fn is_completed(&self) -> bool {\n+        self.state.load(Ordering::Acquire) == COMPLETE\n+    }\n+\n     // This is a non-generic function to reduce the monomorphization cost of\n     // using `call_once` (this isn't exactly a trivial or small implementation).\n     //"}]}