{"sha": "6e75def7dba6ee28660b8479f0ede72986c299f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNzVkZWY3ZGJhNmVlMjg2NjBiODQ3OWYwZWRlNzI5ODZjMjk5Zjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-20T21:19:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-21T18:32:44Z"}, "message": "Fix issue with single question mark or paren", "tree": {"sha": "3fb0cfafe35d43056786593e5593c74bb76a9fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb0cfafe35d43056786593e5593c74bb76a9fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e75def7dba6ee28660b8479f0ede72986c299f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e75def7dba6ee28660b8479f0ede72986c299f7", "html_url": "https://github.com/rust-lang/rust/commit/6e75def7dba6ee28660b8479f0ede72986c299f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e75def7dba6ee28660b8479f0ede72986c299f7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e038f58105cc1769a9c7991981822d01ebffe277", "url": "https://api.github.com/repos/rust-lang/rust/commits/e038f58105cc1769a9c7991981822d01ebffe277", "html_url": "https://github.com/rust-lang/rust/commit/e038f58105cc1769a9c7991981822d01ebffe277"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "12daa24e857fcbfa62a4f292c1aab804936a57d9", "filename": "src/doc/grammar.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=6e75def7dba6ee28660b8479f0ede72986c299f7", "patch": "@@ -781,10 +781,11 @@ never_type : \"!\" ;\n ### Type parameter bounds\n \n ```antlr\n+bound-list := bound | bound '+' bound-list '+' ?\n bound := ty_bound | lt_bound\n lt_bound := lifetime\n-ty_bound := [?] [ for<lt_param_defs> ] simple_path\n-bound-list := bound | bound '+' bound-list '+' ?\n+ty_bound := ty_bound_noparen | (ty_bound_noparen)\n+ty_bound_noparen := [?] [ for<lt_param_defs> ] simple_path\n ```\n \n ### Self types"}, {"sha": "79ae1d629152834419e80c91148e5d651a1d5171", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6e75def7dba6ee28660b8479f0ede72986c299f7", "patch": "@@ -4086,32 +4086,37 @@ impl<'a> Parser<'a> {\n     fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, TyParamBounds> {\n         let mut bounds = Vec::new();\n         loop {\n-            let has_parens = self.eat(&token::OpenDelim(token::Paren));\n-            let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n-            if self.check_lifetime() {\n-                if let Some(question_span) = question {\n-                    self.span_err(question_span,\n-                                  \"`?` may only modify trait bounds, not lifetime bounds\");\n-                }\n-                bounds.push(RegionTyParamBound(self.expect_lifetime()));\n-                if has_parens {\n-                    self.expect(&token::CloseDelim(token::Paren))?;\n-                    self.span_err(self.prev_span,\n-                                  \"parenthesized lifetime bounds are not supported\");\n-                }\n-            } else if self.check_keyword(keywords::For) || self.check_path() {\n-                let lo = self.span;\n-                let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-                let path = self.parse_path(PathStyle::Type)?;\n-                let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-                let modifier = if question.is_some() {\n-                    TraitBoundModifier::Maybe\n+            let is_bound_start = self.check_path() || self.check_lifetime() ||\n+                                 self.check(&token::Question) ||\n+                                 self.check_keyword(keywords::For) ||\n+                                 self.check(&token::OpenDelim(token::Paren));\n+            if is_bound_start {\n+                let has_parens = self.eat(&token::OpenDelim(token::Paren));\n+                let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n+                if self.token.is_lifetime() {\n+                    if let Some(question_span) = question {\n+                        self.span_err(question_span,\n+                                      \"`?` may only modify trait bounds, not lifetime bounds\");\n+                    }\n+                    bounds.push(RegionTyParamBound(self.expect_lifetime()));\n                 } else {\n-                    TraitBoundModifier::None\n-                };\n-                bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                    let lo = self.span;\n+                    let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+                    let path = self.parse_path(PathStyle::Type)?;\n+                    let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n+                    let modifier = if question.is_some() {\n+                        TraitBoundModifier::Maybe\n+                    } else {\n+                        TraitBoundModifier::None\n+                    };\n+                    bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                }\n                 if has_parens {\n                     self.expect(&token::CloseDelim(token::Paren))?;\n+                    if let Some(&RegionTyParamBound(..)) = bounds.last() {\n+                        self.span_err(self.prev_span,\n+                                      \"parenthesized lifetime bounds are not supported\");\n+                    }\n                 }\n             } else {\n                 break"}, {"sha": "9dde5268c0878b0f0caa475b9bdc2635cc38b097", "filename": "src/test/parse-fail/bound-single-question-mark.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e75def7dba6ee28660b8479f0ede72986c299f7/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs?ref=6e75def7dba6ee28660b8479f0ede72986c299f7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn f<T: ?>() {} //~ ERROR expected identifier, found `>`"}]}