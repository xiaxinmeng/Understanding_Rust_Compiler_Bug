{"sha": "c2f0e99d854d399880d05f546953659c2d170d54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZjBlOTlkODU0ZDM5OTg4MGQwNWY1NDY5NTM2NTljMmQxNzBkNTQ=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2020-10-06T01:44:48Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-09-06T23:14:13Z"}, "message": "try to write the parameter on a new line in case the attribute/parameter together are over max_width", "tree": {"sha": "f6d0db75cabc6b5be9c0d669dbb1a75abd8e7947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6d0db75cabc6b5be9c0d669dbb1a75abd8e7947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2f0e99d854d399880d05f546953659c2d170d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f0e99d854d399880d05f546953659c2d170d54", "html_url": "https://github.com/rust-lang/rust/commit/c2f0e99d854d399880d05f546953659c2d170d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2f0e99d854d399880d05f546953659c2d170d54/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59cac29f4dcfd6e9aba03db07b33767809fcea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59cac29f4dcfd6e9aba03db07b33767809fcea0", "html_url": "https://github.com/rust-lang/rust/commit/a59cac29f4dcfd6e9aba03db07b33767809fcea0"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "42449d1060f7dab2abfd5cb93c42054738fb876b", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2f0e99d854d399880d05f546953659c2d170d54/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f0e99d854d399880d05f546953659c2d170d54/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c2f0e99d854d399880d05f546953659c2d170d54", "patch": "@@ -10,7 +10,8 @@ use crate::rewrite::RewriteContext;\n use crate::shape::{Indent, Shape};\n use crate::string::{rewrite_string, StringFormat};\n use crate::utils::{\n-    count_newlines, first_line_width, last_line_width, trim_left_preserve_layout, unicode_str_width,\n+    count_newlines, first_line_width, last_line_width, trim_left_preserve_layout,\n+    trimmed_last_line_width, unicode_str_width,\n };\n use crate::{ErrorKind, FormattingError};\n \n@@ -171,11 +172,12 @@ pub(crate) fn combine_strs_with_missing_comments(\n         String::with_capacity(prev_str.len() + next_str.len() + shape.indent.width() + 128);\n     result.push_str(prev_str);\n     let mut allow_one_line = !prev_str.contains('\\n') && !next_str.contains('\\n');\n-    let first_sep = if prev_str.is_empty() || next_str.is_empty() {\n-        \"\"\n-    } else {\n-        \" \"\n-    };\n+    let first_sep =\n+        if prev_str.is_empty() || next_str.is_empty() || trimmed_last_line_width(prev_str) == 0 {\n+            \"\"\n+        } else {\n+            \" \"\n+        };\n     let mut one_line_width =\n         last_line_width(prev_str) + first_line_width(next_str) + first_sep.len();\n "}, {"sha": "6ba83b577ae2f75a775dce14bf89b4dca83b7e7d", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2f0e99d854d399880d05f546953659c2d170d54/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f0e99d854d399880d05f546953659c2d170d54/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c2f0e99d854d399880d05f546953659c2d170d54", "patch": "@@ -1980,12 +1980,13 @@ impl Rewrite for ast::Param {\n                 has_multiple_attr_lines,\n             )\n         } else if is_named_param(self) {\n+            let param_name = &self\n+                .pat\n+                .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n             let mut result = combine_strs_with_missing_comments(\n                 context,\n                 &param_attrs_result,\n-                &self\n-                    .pat\n-                    .rewrite(context, Shape::legacy(shape.width, shape.indent))?,\n+                param_name,\n                 span,\n                 shape,\n                 !has_multiple_attr_lines,\n@@ -1999,10 +2000,30 @@ impl Rewrite for ast::Param {\n                 result.push_str(&after_comment);\n                 let overhead = last_line_width(&result);\n                 let max_width = shape.width.checked_sub(overhead)?;\n-                let ty_str = self\n+                if let Some(ty_str) = self\n                     .ty\n-                    .rewrite(context, Shape::legacy(max_width, shape.indent))?;\n-                result.push_str(&ty_str);\n+                    .rewrite(context, Shape::legacy(max_width, shape.indent))\n+                {\n+                    result.push_str(&ty_str);\n+                } else {\n+                    result = combine_strs_with_missing_comments(\n+                        context,\n+                        &(param_attrs_result + &shape.to_string_with_newline(context.config)),\n+                        param_name,\n+                        span,\n+                        shape,\n+                        !has_multiple_attr_lines,\n+                    )?;\n+                    result.push_str(&before_comment);\n+                    result.push_str(colon_spaces(context.config));\n+                    result.push_str(&after_comment);\n+                    let overhead = last_line_width(&result);\n+                    let max_width = shape.width.checked_sub(overhead)?;\n+                    let ty_str = self\n+                        .ty\n+                        .rewrite(context, Shape::legacy(max_width, shape.indent))?;\n+                    result.push_str(&ty_str);\n+                }\n             }\n \n             Some(result)"}]}