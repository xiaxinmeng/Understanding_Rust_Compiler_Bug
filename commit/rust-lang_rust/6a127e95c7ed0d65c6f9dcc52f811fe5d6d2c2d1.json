{"sha": "6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMTI3ZTk1YzdlZDBkNjVjNmY5ZGNjNTJmODExZmU1ZDZkMmMyZDE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-02T03:42:38Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-04T21:45:35Z"}, "message": "fixup", "tree": {"sha": "8dc88f9e48ba52497c468ceee6b802588b536cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc88f9e48ba52497c468ceee6b802588b536cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1", "html_url": "https://github.com/rust-lang/rust/commit/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edca8f73d635d20e9b9cfc3a550d5c8ab261c134", "url": "https://api.github.com/repos/rust-lang/rust/commits/edca8f73d635d20e9b9cfc3a550d5c8ab261c134", "html_url": "https://github.com/rust-lang/rust/commit/edca8f73d635d20e9b9cfc3a550d5c8ab261c134"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "62b2f2949fab669f28fae64cd16b120d73bf6855", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=6a127e95c7ed0d65c6f9dcc52f811fe5d6d2c2d1", "patch": "@@ -647,7 +647,8 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn process_mod(&mut self, item: &ast::Item) {  // The module in question, represented as an item.\n+    // `item` is the module in question, represented as an item.\n+    fn process_mod(&mut self, item: &ast::Item) {\n         let mod_data = self.save_ctxt.get_item_data(item);\n         down_cast_data!(mod_data, ModData, self, item.span);\n         self.fmt.mod_str(item.span,"}]}