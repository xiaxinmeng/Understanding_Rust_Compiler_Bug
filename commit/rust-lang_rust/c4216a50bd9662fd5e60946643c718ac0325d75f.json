{"sha": "c4216a50bd9662fd5e60946643c718ac0325d75f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjE2YTUwYmQ5NjYyZmQ1ZTYwOTQ2NjQzYzcxOGFjMDMyNWQ3NWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-03T18:09:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-04T07:24:29Z"}, "message": "Test cases for Issue 23338.\n\nWe ignore pretty for the params-outlive-temps-of-body test because the\nway its comments are formatted exercises a known bug in the pretty\nprinter.", "tree": {"sha": "395212d2dc77beb2bc6ad850f7ba9a6db8137130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395212d2dc77beb2bc6ad850f7ba9a6db8137130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4216a50bd9662fd5e60946643c718ac0325d75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4216a50bd9662fd5e60946643c718ac0325d75f", "html_url": "https://github.com/rust-lang/rust/commit/c4216a50bd9662fd5e60946643c718ac0325d75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4216a50bd9662fd5e60946643c718ac0325d75f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "html_url": "https://github.com/rust-lang/rust/commit/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c"}], "stats": {"total": 246, "additions": 246, "deletions": 0}, "files": [{"sha": "993893438e53642124186dd200743662ae9dd24d", "filename": "src/test/compile-fail/issue-23338-locals-die-before-temps-of-body.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Fcompile-fail%2Fissue-23338-locals-die-before-temps-of-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Fcompile-fail%2Fissue-23338-locals-die-before-temps-of-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23338-locals-die-before-temps-of-body.rs?ref=c4216a50bd9662fd5e60946643c718ac0325d75f", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is just checking that we still reject code where temp values\n+// are borrowing values for longer than they will be around.\n+//\n+// Compare to run-pass/issue-23338-params-outlive-temps-of-body.rs\n+\n+use std::cell::RefCell;\n+\n+fn foo(x: RefCell<String>) -> String {\n+    let y = x;\n+    y.borrow().clone() //~ ERROR `y` does not live long enough\n+}\n+\n+fn foo2(x: RefCell<String>) -> String {\n+    let ret = {\n+        let y = x;\n+        y.borrow().clone() //~ ERROR `y` does not live long enough\n+    };\n+    ret\n+}\n+\n+fn main() {\n+    let r = RefCell::new(format!(\"data\"));\n+    assert_eq!(foo(r), \"data\");\n+    let r = RefCell::new(format!(\"data\"));\n+    assert_eq!(foo2(r), \"data\");\n+}"}, {"sha": "0815ff084fb51c67ff732d173dc6a6bd614aa6f1", "filename": "src/test/run-pass/issue-23338-ensure-param-drop-order.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs?ref=c4216a50bd9662fd5e60946643c718ac0325d75f", "patch": "@@ -0,0 +1,171 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n+// This test is ensuring that parameters are indeed dropped after\n+// temporaries in a fn body.\n+\n+use std::cell::RefCell;\n+\n+use self::d::D;\n+\n+pub fn main() {\n+    let log = RefCell::new(vec![]);\n+    d::println(&format!(\"created empty log\"));\n+    test(&log);\n+\n+    assert_eq!(&log.borrow()[..],\n+               [\n+                   //                                    created empty log\n+                   //    +-- Make D(da_0, 0)\n+                   //    | +-- Make D(de_1, 1)\n+                   //    | |                             calling foo\n+                   //    | |                             entered foo\n+                   //    | | +-- Make D(de_2, 2)\n+                   //    | | | +-- Make D(da_1, 3)\n+                   //    | | | | +-- Make D(de_3, 4)\n+                   //    | | | | | +-- Make D(de_4, 5)\n+                   3, // | | | +-- Drop D(da_1, 3)\n+                   //    | | |   | |\n+                   4, // | | |   +-- Drop D(de_3, 4)\n+                   //    | | |     |\n+                   //    | | |     |                     eval tail of foo\n+                   //    | | | +-- Make D(de_5, 6)\n+                   //    | | | | +-- Make D(de_6, 7)\n+                   6, // | | | +-- Drop D(de_5, 6)\n+                   //    | | |   | |\n+                   5, // | | |   | +-- Drop D(de_4, 5)\n+                   //    | | |   |\n+                   2, // | | +-- Drop D(de_2, 2)\n+                   //    | |     |\n+                   1, // | +-- Drop D(de_1, 1)\n+                   //    |       |\n+                   0, // +-- Drop D(da_0, 0)\n+                   //            |\n+                   //            |                       result D(de_6, 7)\n+                   7 //          +-- Drop D(de_6, 7)\n+\n+                       ]);\n+}\n+\n+fn test<'a>(log: d::Log<'a>) {\n+    let da = D::new(\"da\", 0, log);\n+    let de = D::new(\"de\", 1, log);\n+    d::println(&format!(\"calling foo\"));\n+    let result = foo(da, de);\n+    d::println(&format!(\"result {}\", result));\n+}\n+\n+fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {\n+    d::println(&format!(\"entered foo\"));\n+    let de2 = de1.incr();      // creates D(de_2, 2)\n+    let de4 = {\n+        let _da1 = da0.incr(); // creates D(da_1, 3)\n+        de2.incr().incr()      // creates D(de_3, 4) and D(de_4, 5)\n+    };\n+    d::println(&format!(\"eval tail of foo\"));\n+    de4.incr().incr()          // creates D(de_5, 6) and D(de_6, 7)\n+}\n+\n+// This module provides simultaneous printouts of the dynamic extents\n+// of all of the D values, in addition to logging the order that each\n+// is dropped.\n+\n+const PREF_INDENT: u32 = 16;\n+\n+pub mod d {\n+    #![allow(unused_parens)]\n+    use std::fmt;\n+    use std::mem;\n+    use std::cell::RefCell;\n+\n+    static mut counter: u32 = 0;\n+    static mut trails: u64 = 0;\n+\n+    pub type Log<'a> = &'a RefCell<Vec<u32>>;\n+\n+    pub fn current_width() -> u32 {\n+        unsafe { max_width() - trails.leading_zeros() }\n+    }\n+\n+    pub fn max_width() -> u32 {\n+        unsafe {\n+            (mem::size_of_val(&trails)*8) as u32\n+        }\n+    }\n+\n+    pub fn indent_println(my_trails: u32, s: &str) {\n+        let mut indent: String = String::new();\n+        for i in 0..my_trails {\n+            unsafe {\n+                if trails & (1 << i) != 0 {\n+                    indent = indent + \"| \";\n+                } else {\n+                    indent = indent + \"  \";\n+                }\n+            }\n+        }\n+        println!(\"{}{}\", indent, s);\n+    }\n+\n+    pub fn println(s: &str) {\n+        indent_println(super::PREF_INDENT, s);\n+    }\n+\n+    fn first_avail() -> u32 {\n+        unsafe {\n+            for i in 0..64 {\n+                if trails & (1 << i) == 0 {\n+                    return i;\n+                }\n+            }\n+        }\n+        panic!(\"exhausted trails\");\n+    }\n+\n+    pub struct D<'a> {\n+        name: &'static str, i: u32, uid: u32, trail: u32, log: Log<'a>\n+    }\n+\n+    impl<'a> fmt::Display for D<'a> {\n+        fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+            write!(w, \"D({}_{}, {})\", self.name, self.i, self.uid)\n+        }\n+    }\n+\n+    impl<'a> D<'a> {\n+        pub fn new(name: &'static str, i: u32, log: Log<'a>) -> D<'a> {\n+            unsafe {\n+                let trail = first_avail();\n+                let ctr = counter;\n+                counter += 1;\n+                trails |= (1 << trail);\n+                let ret = D {\n+                    name: name, i: i, log: log, uid: ctr, trail: trail\n+                };\n+                indent_println(trail, &format!(\"+-- Make {}\", ret));\n+                ret\n+            }\n+        }\n+        pub fn incr(&self) -> D<'a> {\n+            D::new(self.name, self.i + 1, self.log)\n+        }\n+    }\n+\n+    impl<'a> Drop for D<'a> {\n+        fn drop(&mut self) {\n+            unsafe { trails &= !(1 << self.trail); };\n+            self.log.borrow_mut().push(self.uid);\n+            indent_println(self.trail, &format!(\"+-- Drop {}\", self));\n+            indent_println(::PREF_INDENT, \"\");\n+        }\n+    }\n+}"}, {"sha": "cb9e852e526928b068178b803e161acdcfc0e9c2", "filename": "src/test/run-pass/issue-23338-params-outlive-temps-of-body.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Frun-pass%2Fissue-23338-params-outlive-temps-of-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4216a50bd9662fd5e60946643c718ac0325d75f/src%2Ftest%2Frun-pass%2Fissue-23338-params-outlive-temps-of-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23338-params-outlive-temps-of-body.rs?ref=c4216a50bd9662fd5e60946643c718ac0325d75f", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is largely checking that we now accept code where temp values\n+// are borrowing from the input parameters (the `foo` case below).\n+//\n+// Compare to run-pass/issue-23338-params-outlive-temps-of-body.rs\n+//\n+// (The `foo2` case is just for parity with the above test, which\n+//  shows what happens when you move the `y`-binding to the inside of\n+//  the inner block.)\n+\n+use std::cell::RefCell;\n+\n+fn foo(x: RefCell<String>) -> String {\n+    x.borrow().clone()\n+}\n+\n+fn foo2(x: RefCell<String>) -> String {\n+    let y = x;\n+    let ret = {\n+        y.borrow().clone()\n+    };\n+    ret\n+}\n+\n+pub fn main() {\n+    let r = RefCell::new(format!(\"data\"));\n+    assert_eq!(foo(r), \"data\");\n+    let r = RefCell::new(format!(\"data\"));\n+    assert_eq!(foo2(r), \"data\");\n+}"}]}