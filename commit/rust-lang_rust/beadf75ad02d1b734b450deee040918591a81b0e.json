{"sha": "beadf75ad02d1b734b450deee040918591a81b0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYWRmNzVhZDAyZDFiNzM0YjQ1MGRlZWUwNDA5MTg1OTFhODFiMGU=", "commit": {"author": {"name": "Cyres", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-03T13:25:06Z"}, "committer": {"name": "Cyres", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-03T13:25:06Z"}, "message": "Add ident function to the rest of the tests", "tree": {"sha": "6db2b8accba3e2eddb22f0b7e4f8fd2b5c841815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db2b8accba3e2eddb22f0b7e4f8fd2b5c841815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beadf75ad02d1b734b450deee040918591a81b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beadf75ad02d1b734b450deee040918591a81b0e", "html_url": "https://github.com/rust-lang/rust/commit/beadf75ad02d1b734b450deee040918591a81b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beadf75ad02d1b734b450deee040918591a81b0e/comments", "author": null, "committer": null, "parents": [{"sha": "e54c5a9e4838dccec06cbe045e67aac589e6e619", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54c5a9e4838dccec06cbe045e67aac589e6e619", "html_url": "https://github.com/rust-lang/rust/commit/e54c5a9e4838dccec06cbe045e67aac589e6e619"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "0f8f230f456bd32c824d7a3ed310616447f8a795", "filename": "src/test/run-pass/const-int-overflowing.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs?ref=beadf75ad02d1b734b450deee040918591a81b0e", "patch": "@@ -25,19 +25,23 @@ const SHL_B: (u32, bool) = 0x1u32.overflowing_shl(132);\n const SHR_A: (u32, bool) = 0x10u32.overflowing_shr(4);\n const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n \n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n fn main() {\n-    assert_eq!(ADD_A, (7, false));\n-    assert_eq!(ADD_B, (0, true));\n+    assert_eq!(ADD_A, ident((7, false)));\n+    assert_eq!(ADD_B, ident((0, true)));\n \n-    assert_eq!(SUB_A, (3, false));\n-    assert_eq!(SUB_B, (u32::max_value(), true));\n+    assert_eq!(SUB_A, ident((3, false)));\n+    assert_eq!(SUB_B, ident((u32::max_value(), true)));\n \n-    assert_eq!(MUL_A, (10, false));\n-    assert_eq!(MUL_B, (1410065408, true));\n+    assert_eq!(MUL_A, ident((10, false)));\n+    assert_eq!(MUL_B, ident((1410065408, true)));\n \n-    assert_eq!(SHL_A, (0x10, false));\n-    assert_eq!(SHL_B, (0x10, true));\n+    assert_eq!(SHL_A, ident((0x10, false)));\n+    assert_eq!(SHL_B, ident((0x10, true)));\n \n-    assert_eq!(SHR_A, (0x1, false));\n-    assert_eq!(SHR_B, (0x1, true));\n+    assert_eq!(SHR_A, ident((0x1, false)));\n+    assert_eq!(SHR_B, ident((0x1, true)));\n }"}, {"sha": "ee8e0b0b9dd7f905ab976eacb1f83f094f4d8faf", "filename": "src/test/run-pass/const-int-rotate.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs?ref=beadf75ad02d1b734b450deee040918591a81b0e", "patch": "@@ -13,7 +13,11 @@\n const LEFT: u32 = 0x10000b3u32.rotate_left(8);\n const RIGHT: u32 = 0xb301u32.rotate_right(8);\n \n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n fn main() {\n-    assert_eq!(LEFT, 0xb301);\n-    assert_eq!(RIGHT, 0x10000b3);\n+    assert_eq!(LEFT, ident(0xb301));\n+    assert_eq!(RIGHT, ident(0x10000b3));\n }"}, {"sha": "072b150cd15af3a5c391c5e0b600fba4fbac833b", "filename": "src/test/run-pass/const-int-wrapping.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beadf75ad02d1b734b450deee040918591a81b0e/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs?ref=beadf75ad02d1b734b450deee040918591a81b0e", "patch": "@@ -25,19 +25,23 @@ const SHL_B: u32 = 1u32.wrapping_shl(128);\n const SHR_A: u32 = 128u32.wrapping_shr(7);\n const SHR_B: u32 = 128u32.wrapping_shr(128);\n \n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n fn main() {\n-    assert_eq!(ADD_A, 255);\n-    assert_eq!(ADD_B, 199);\n+    assert_eq!(ADD_A, ident(255));\n+    assert_eq!(ADD_B, ident(199));\n \n-    assert_eq!(SUB_A, 0);\n-    assert_eq!(SUB_B, 101);\n+    assert_eq!(SUB_A, ident(0));\n+    assert_eq!(SUB_B, ident(101));\n \n-    assert_eq!(MUL_A, 120);\n-    assert_eq!(MUL_B, 44);\n+    assert_eq!(MUL_A, ident(120));\n+    assert_eq!(MUL_B, ident(44));\n \n-    assert_eq!(SHL_A, 128);\n-    assert_eq!(SHL_B, 1);\n+    assert_eq!(SHL_A, ident(128));\n+    assert_eq!(SHL_B, ident(1));\n \n-    assert_eq!(SHR_A, 1);\n-    assert_eq!(SHR_B, 128);\n+    assert_eq!(SHR_A, ident(1);\n+    assert_eq!(SHR_B, ident(128));\n }"}]}