{"sha": "0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWJiZjExZTZiMWI0YWE5NWYzMGUwMTM3M2QzZjE0ODhlY2E5YzQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-07-31T19:54:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-07-31T20:39:33Z"}, "message": "Don't count MIR locals as borrowed after StorageDead when finding locals live across a yield terminator", "tree": {"sha": "b7e6b6f2399ef1d6cd7741ce5828b2cd36d922fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e6b6f2399ef1d6cd7741ce5828b2cd36d922fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "html_url": "https://github.com/rust-lang/rust/commit/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89817997ac0aa100bf91997194ad85a7e59f743", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89817997ac0aa100bf91997194ad85a7e59f743", "html_url": "https://github.com/rust-lang/rust/commit/f89817997ac0aa100bf91997194ad85a7e59f743"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "c8c41c13b0fbb684fbaa8967689f6fb12f9a3508", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "patch": "@@ -15,9 +15,9 @@ use rustc::mir::visit::Visitor;\n use dataflow::BitDenotation;\n \n /// This calculates if any part of a MIR local could have previously been borrowed.\n-/// This means that once a local has been borrowed, its bit will always be set\n-/// from that point and onwards, even if the borrow ends. You could also think of this\n-/// as computing the lifetimes of infinite borrows.\n+/// This means that once a local has been borrowed, its bit will be set\n+/// from that point and onwards, until we see a StorageDead statement for the local,\n+/// at which points there is no memory associated with the local, so it cannot be borrowed.\n /// This is used to compute which locals are live during a yield expression for\n /// immovable generators.\n #[derive(Copy, Clone)]\n@@ -50,9 +50,17 @@ impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<Local>,\n                         loc: Location) {\n+        let stmt = &self.mir[loc.block].statements[loc.statement_index];\n+\n         BorrowedLocalsVisitor {\n             sets,\n-        }.visit_statement(loc.block, &self.mir[loc.block].statements[loc.statement_index], loc);\n+        }.visit_statement(loc.block, stmt, loc);\n+\n+        // StorageDead invalidates all borrows and raw pointers to a local\n+        match stmt.kind {\n+            StatementKind::StorageDead(l) => sets.kill(&l),\n+            _ => (),\n+        }\n     }\n \n     fn terminator_effect(&self,"}, {"sha": "a3647edd155d3d71b105891b4e16b16d7400a683", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "patch": "@@ -433,7 +433,8 @@ fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // The `liveness` variable contains the liveness of MIR locals ignoring borrows.\n                 // This is correct for movable generators since borrows cannot live across\n                 // suspension points. However for immovable generators we need to account for\n-                // borrows, so we conseratively assume that all borrowed locals live forever.\n+                // borrows, so we conseratively assume that all borrowed locals are live until\n+                // we find a StorageDead statement referencing the locals.\n                 // To do this we just union our `liveness` result with `borrowed_locals`, which\n                 // contains all the locals which has been borrowed before this suspension point.\n                 // If a borrow is converted to a raw reference, we must also assume that it lives"}, {"sha": "3042061226b39c6677c3e9a23c4d2e2c7228bb98", "filename": "src/test/run-pass/generator/yield-in-initializer.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0babbf11e6b1b4aa95f30e01373d3f1488eca9c4/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-initializer.rs?ref=0babbf11e6b1b4aa95f30e01373d3f1488eca9c4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+fn main() {\n+    static || {\n+        loop {\n+            // Test that `opt` is not live across the yield, even when borrowed in a loop\n+            // See https://github.com/rust-lang/rust/issues/52792\n+            let opt = {\n+                yield;\n+                true\n+            };\n+            &opt;\n+        }\n+    };\n+}"}]}