{"sha": "e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YmNiMjI1OWFlZmQzYzgxMWE3MWU2OGNmMmE3Y2Y5ZDkxOGMwZWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-24T02:17:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-24T02:41:27Z"}, "message": "Reorganise config options and stabilise a few", "tree": {"sha": "7bad9b5defab704532571ad49d7c9c1e18b5ea74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bad9b5defab704532571ad49d7c9c1e18b5ea74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee", "html_url": "https://github.com/rust-lang/rust/commit/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f891d04c87aa3ade9d60d9c3ca6bc582ec221613", "url": "https://api.github.com/repos/rust-lang/rust/commits/f891d04c87aa3ade9d60d9c3ca6bc582ec221613", "html_url": "https://github.com/rust-lang/rust/commit/f891d04c87aa3ade9d60d9c3ca6bc582ec221613"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "f30f0039ccda891dd80b67fc732f954bf1a2725e", "filename": "src/config.rs", "status": "modified", "additions": 81, "deletions": 58, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=e5bcb2259aefd3c811a71e68cf2a7cf9d918c0ee", "patch": "@@ -501,76 +501,65 @@ pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n \n \n create_config! {\n+    // Fundamental stuff\n+    max_width: usize, 100, true, \"Maximum width of each line\";\n+    hard_tabs: bool, false, true, \"Use tab characters for indentation, spaces for alignment\";\n+    tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n+    newline_style: NewlineStyle, NewlineStyle::Unix, true, \"Unix or Windows line endings\";\n     indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n-    unstable_features: bool, false, true,\n-            \"Enables unstable features. Only available on nightly channel\";\n-    verbose: bool, false, false, \"Use verbose output\";\n-    disable_all_formatting: bool, false, false, \"Don't reformat anything\";\n-    skip_children: bool, false, false, \"Don't reformat out of line modules\";\n-    file_lines: FileLines, FileLines::all(), false,\n-        \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n-         via the --file-lines option\";\n-    max_width: usize, 100, false, \"Maximum width of each line\";\n-    error_on_line_overflow: bool, true, false, \"Error if unable to get all lines within max_width\";\n-    error_on_line_overflow_comments: bool, true, false,\n-        \"Error if unable to get comments within max_width\";\n-    tab_spaces: usize, 4, false, \"Number of spaces per tab\";\n+\n+    // strings and comments\n+    format_strings: bool, false, false, \"Format string literals where necessary\";\n+    wrap_comments: bool, false, true, \"Break comments to fit on the line\";\n+    comment_width: usize, 80, false,\n+        \"Maximum length of comments. No effect unless wrap_comments = true\";\n+    normalize_comments: bool, false, true, \"Convert /* */ comments to // comments where possible\";\n+\n+    // Width heuristics\n     fn_call_width: usize, 60, false,\n         \"Maximum width of the args of a function call before falling back to vertical formatting\";\n     struct_lit_width: usize, 18, false,\n         \"Maximum width in the body of a struct lit before falling back to vertical formatting\";\n     struct_variant_width: usize, 35, false,\n         \"Maximum width in the body of a struct variant before falling back to vertical formatting\";\n-    force_explicit_abi: bool, true, false, \"Always print the abi for extern items\";\n-    newline_style: NewlineStyle, NewlineStyle::Unix, false, \"Unix or Windows line endings\";\n-    brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for items\";\n-    control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n-        \"Brace style for control flow constructs\";\n-    impl_empty_single_line: bool, true, false, \"Put empty-body implementations on a single line\";\n-    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n-        \"How to handle trailing commas for lists\";\n-    trailing_semicolon: bool, true, false,\n-        \"Add trailing semicolon after break, continue and return\";\n-    fn_empty_single_line: bool, true, false, \"Put empty-body functions on a single line\";\n-    fn_single_line: bool, false, false, \"Put single-expression functions on a single line\";\n-    fn_args_density: Density, Density::Tall, false, \"Argument density in functions\";\n     array_width: usize, 60, false,\n         \"Maximum width of an array literal before falling back to vertical formatting\";\n     array_horizontal_layout_threshold: usize, 0, false,\n         \"How many elements array must have before rustfmt uses horizontal layout.\";\n-    type_punctuation_density: TypeDensity, TypeDensity::Wide, false,\n-        \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n+    chain_width: usize, 60, false, \"Maximum length of a chain to fit on a single line\";\n+    single_line_if_else_max_width: usize, 50, false, \"Maximum line length for single line if-else \\\n+                                                expressions. A value of zero means always break \\\n+                                                if-else expressions.\";\n+\n+    // Single line expressions and items.\n+    struct_lit_single_line: bool, true, false,\n+        \"Put small struct literals on a single line\";\n+    impl_empty_single_line: bool, true, false, \"Put empty-body implementations on a single line\";\n+    fn_empty_single_line: bool, true, false, \"Put empty-body functions on a single line\";\n+    fn_single_line: bool, false, false, \"Put single-expression functions on a single line\";\n+\n+    // Where clauses\n     // TODO:\n     // 1. Should we at least try to put the where clause on the same line as the rest of the\n     // function decl?\n     // 2. Currently options `Tall` and `Vertical` produce the same output.\n     where_density: Density, Density::Vertical, false, \"Density of a where clause\";\n     where_single_line: bool, false, false, \"To force single line where layout\";\n     where_layout: ListTactic, ListTactic::Vertical, false, \"Element layout inside a where clause\";\n-    struct_lit_single_line: bool, true, false,\n-        \"Put small struct literals on a single line\";\n-    report_todo: ReportTactic, ReportTactic::Never, false,\n-        \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n-    report_fixme: ReportTactic, ReportTactic::Never, false,\n-        \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n-    chain_width: usize, 60, false, \"Maximum length of a chain to fit on a single line\";\n+\n+    // Imports\n     imports_indent: IndentStyle, IndentStyle::Visual, false, \"Indent of imports\";\n     imports_layout: ListTactic, ListTactic::Mixed, false, \"Item layout inside a import block\";\n+\n+    // Ordering\n     reorder_extern_crates: bool, true, false, \"Reorder extern crate statements alphabetically\";\n     reorder_extern_crates_in_group: bool, true, false, \"Reorder extern crate statements in group\";\n     reorder_imports: bool, false, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, true, false,\n         \"Reorder lists of names in import statements alphabetically\";\n-    single_line_if_else_max_width: usize, 50, false, \"Maximum line length for single line if-else \\\n-                                                expressions. A value of zero means always break \\\n-                                                if-else expressions.\";\n-    format_strings: bool, false, false, \"Format string literals where necessary\";\n-    hard_tabs: bool, false, false, \"Use tab characters for indentation, spaces for alignment\";\n-    wrap_comments: bool, false, false, \"Break comments to fit on the line\";\n-    comment_width: usize, 80, false,\n-        \"Maximum length of comments. No effect unless wrap_comments = true\";\n-    normalize_comments: bool, false, false, \"Convert /* */ comments to // comments where possible\";\n+\n+    // Match\n     wrap_match_arms: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n                                   the same line with the pattern of arms\";\n     match_block_trailing_comma: bool, false, false,\n@@ -579,19 +568,21 @@ create_config! {\n         \"Force match arm bodies to be in a new lines\";\n     indent_match_arms: bool, true, false, \"Indent match arms instead of keeping them at the same \\\n                                     indentation level as the match keyword\";\n+    multiline_match_arm_forces_block: bool, false, false,\n+        \"Force multiline match arm bodies to be wrapped in a block\";\n+\n+    // Spaces around punctuation\n+    binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n+        \"Where to put a binary operator when a binary expression goes multiline.\";\n+    type_punctuation_density: TypeDensity, TypeDensity::Wide, false,\n+        \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     space_before_colon: bool, false, false, \"Leave a space before the colon\";\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";\n     spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n     spaces_within_parens_and_brackets: bool, false, false,\n         \"Put spaces within non-empty parentheses or brackets\";\n-    use_try_shorthand: bool, false, false, \"Replace uses of the try! macro by the ? shorthand\";\n-    write_mode: WriteMode, WriteMode::Overwrite, false,\n-        \"What Write Mode to use when none is supplied: \\\n-         Replace, Overwrite, Display, Plain, Diff, Coverage\";\n-    color: Color, Color::Auto, false,\n-        \"What Color option to use when none is supplied: Always, Never, Auto\";\n-    condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n-                                              in tuple patterns\";\n+\n+    // Misc.\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n                                              threshold.\";\n@@ -601,13 +592,45 @@ create_config! {\n         \"Try to put attributes on the same line as fields and variants.\";\n     multiline_closure_forces_block: bool, false, false,\n         \"Force multiline closure bodies to be wrapped in a block\";\n-    multiline_match_arm_forces_block: bool, false, false,\n-        \"Force multiline match arm bodies to be wrapped in a block\";\n-    merge_derives: bool, true, false, \"Merge multiple `#[derive(...)]` into a single one\";\n-    binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n-        \"Where to put a binary operator when a binary expression goes multiline.\";\n+    fn_args_density: Density, Density::Tall, false, \"Argument density in functions\";\n+    brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for items\";\n+    control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n+        \"Brace style for control flow constructs\";\n+    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n+        \"How to handle trailing commas for lists\";\n+    trailing_semicolon: bool, true, false,\n+        \"Add trailing semicolon after break, continue and return\";\n+\n+    // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n+    merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n+    use_try_shorthand: bool, false, false, \"Replace uses of the try! macro by the ? shorthand\";\n+    condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n+                                              in tuple patterns\";\n+    force_explicit_abi: bool, true, true, \"Always print the abi for extern items\";\n+\n+    // Control options (changes the operation of rustfmt, rather than the formatting)\n+    write_mode: WriteMode, WriteMode::Overwrite, false,\n+        \"What Write Mode to use when none is supplied: \\\n+         Replace, Overwrite, Display, Plain, Diff, Coverage\";\n+    color: Color, Color::Auto, false,\n+        \"What Color option to use when none is supplied: Always, Never, Auto\";\n     required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n-        \"Require a specific version of rustfmt.\"\n+        \"Require a specific version of rustfmt.\";\n+    unstable_features: bool, false, true,\n+            \"Enables unstable features. Only available on nightly channel\";\n+    verbose: bool, false, false, \"Use verbose output\";\n+    disable_all_formatting: bool, false, false, \"Don't reformat anything\";\n+    skip_children: bool, false, false, \"Don't reformat out of line modules\";\n+    file_lines: FileLines, FileLines::all(), false,\n+        \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n+         via the --file-lines option\";\n+    error_on_line_overflow: bool, true, false, \"Error if unable to get all lines within max_width\";\n+    error_on_line_overflow_comments: bool, true, false,\n+        \"Error if unable to get comments within max_width\";\n+    report_todo: ReportTactic, ReportTactic::Never, false,\n+        \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n+    report_fixme: ReportTactic, ReportTactic::Never, false,\n+        \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n }\n \n #[cfg(test)]"}]}