{"sha": "7611fe438dae91084d17022e705bf64374d5ba4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MTFmZTQzOGRhZTkxMDg0ZDE3MDIyZTcwNWJmNjQzNzRkNWJhNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T02:19:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T02:19:58Z"}, "message": "Auto merge of #88039 - sexxi-goose:fix-87987, r=nikomatsakis\n\nRFC2229 Only compute place if upvars can be resolved\n\nCloses https://github.com/rust-lang/rust/issues/87987\n\nThis PR fixes an ICE when trying to unwrap an Err. This error appears when trying to convert a PlaceBuilder into Place when upvars can't yet be resolved. We should only try to convert a PlaceBuilder into Place if upvars can be resolved.\n\nr? `@nikomatsakis`", "tree": {"sha": "03dcc117fc7b641555c17f2608d71c317687a239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dcc117fc7b641555c17f2608d71c317687a239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7611fe438dae91084d17022e705bf64374d5ba4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7611fe438dae91084d17022e705bf64374d5ba4b", "html_url": "https://github.com/rust-lang/rust/commit/7611fe438dae91084d17022e705bf64374d5ba4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7611fe438dae91084d17022e705bf64374d5ba4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebedfedcd82678d5b0592227ca5e6ca31a5afb8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebedfedcd82678d5b0592227ca5e6ca31a5afb8f", "html_url": "https://github.com/rust-lang/rust/commit/ebedfedcd82678d5b0592227ca5e6ca31a5afb8f"}, {"sha": "9c32b5b3ba4a139e26d30486513929ce16391eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c32b5b3ba4a139e26d30486513929ce16391eec", "html_url": "https://github.com/rust-lang/rust/commit/9c32b5b3ba4a139e26d30486513929ce16391eec"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "1feb8b0d7a06d4d670606ad508537afe718fa858", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7611fe438dae91084d17022e705bf64374d5ba4b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611fe438dae91084d17022e705bf64374d5ba4b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=7611fe438dae91084d17022e705bf64374d5ba4b", "patch": "@@ -155,12 +155,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ascription: thir::Ascription { variance, user_ty, user_ty_span },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n-                candidate.ascriptions.push(Ascription {\n-                    span: user_ty_span,\n-                    user_ty,\n-                    source: match_pair.place.clone().into_place(self.tcx, self.typeck_results),\n-                    variance,\n-                });\n+                if let Ok(place_resolved) =\n+                    match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+                {\n+                    candidate.ascriptions.push(Ascription {\n+                        span: user_ty_span,\n+                        user_ty,\n+                        source: place_resolved.into_place(self.tcx, self.typeck_results),\n+                        variance,\n+                    });\n+                }\n \n                 candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));\n \n@@ -173,15 +177,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n-                candidate.bindings.push(Binding {\n-                    name,\n-                    mutability,\n-                    span: match_pair.pattern.span,\n-                    source: match_pair.place.clone().into_place(self.tcx, self.typeck_results),\n-                    var_id: var,\n-                    var_ty: ty,\n-                    binding_mode: mode,\n-                });\n+                if let Ok(place_resolved) =\n+                    match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+                {\n+                    candidate.bindings.push(Binding {\n+                        name,\n+                        mutability,\n+                        span: match_pair.pattern.span,\n+                        source: place_resolved.into_place(self.tcx, self.typeck_results),\n+                        var_id: var,\n+                        var_ty: ty,\n+                        binding_mode: mode,\n+                    });\n+                }\n \n                 if let Some(subpattern) = subpattern.as_ref() {\n                     // this is the `x @ P` case; have to keep matching against `P` now"}, {"sha": "88dd76e37c1124f688967449567fdf60c5d8c0a2", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7611fe438dae91084d17022e705bf64374d5ba4b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611fe438dae91084d17022e705bf64374d5ba4b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=7611fe438dae91084d17022e705bf64374d5ba4b", "patch": "@@ -31,15 +31,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         suffix: &'pat [Pat<'tcx>],\n     ) {\n         let tcx = self.tcx;\n-        let (min_length, exact_size) = match place\n-            .clone()\n-            .into_place(tcx, self.typeck_results)\n-            .ty(&self.local_decls, tcx)\n-            .ty\n-            .kind()\n+        let (min_length, exact_size) = if let Ok(place_resolved) =\n+            place.clone().try_upvars_resolved(tcx, self.typeck_results)\n         {\n-            ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n-            _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n+            match place_resolved\n+                .into_place(tcx, self.typeck_results)\n+                .ty(&self.local_decls, tcx)\n+                .ty\n+                .kind()\n+            {\n+                ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n+                _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n+            }\n+        } else {\n+            ((prefix.len() + suffix.len()).try_into().unwrap(), false)\n         };\n \n         match_pairs.extend(prefix.iter().enumerate().map(|(idx, subpattern)| {"}, {"sha": "5dc2cb7e71099e24ba380487b5f011f76a7b9a9e", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7611fe438dae91084d17022e705bf64374d5ba4b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7611fe438dae91084d17022e705bf64374d5ba4b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs?ref=7611fe438dae91084d17022e705bf64374d5ba4b", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+// edition:2021\n+\n+struct Props {\n+    field_1: u32, //~ WARNING: field is never read: `field_1`\n+    field_2: u32, //~ WARNING: field is never read: `field_2`\n+}\n+\n+fn main() {\n+    // Test 1\n+    let props_2 = Props { //~ WARNING: unused variable: `props_2`\n+        field_1: 1,\n+        field_2: 1,\n+    };\n+\n+    let _ = || {\n+        let _: Props = props_2;\n+    };\n+\n+    // Test 2\n+    let mut arr = [1, 3, 4, 5];\n+\n+    let mref = &mut arr;\n+\n+    let _c = || match arr {\n+        [_, _, _, _] => println!(\"A\")\n+    };\n+\n+    println!(\"{:#?}\", mref);\n+}"}, {"sha": "aa7012c3618c2e5038df8b45431cd902eb4c1c93", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7611fe438dae91084d17022e705bf64374d5ba4b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7611fe438dae91084d17022e705bf64374d5ba4b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr?ref=7611fe438dae91084d17022e705bf64374d5ba4b", "patch": "@@ -0,0 +1,24 @@\n+warning: unused variable: `props_2`\n+  --> $DIR/issue-87987.rs:11:9\n+   |\n+LL |     let props_2 = Props {\n+   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_props_2`\n+   |\n+   = note: `#[warn(unused_variables)]` on by default\n+\n+warning: field is never read: `field_1`\n+  --> $DIR/issue-87987.rs:5:5\n+   |\n+LL |     field_1: u32,\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(dead_code)]` on by default\n+\n+warning: field is never read: `field_2`\n+  --> $DIR/issue-87987.rs:6:5\n+   |\n+LL |     field_2: u32,\n+   |     ^^^^^^^^^^^^\n+\n+warning: 3 warnings emitted\n+"}]}