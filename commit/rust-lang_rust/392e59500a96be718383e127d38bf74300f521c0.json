{"sha": "392e59500a96be718383e127d38bf74300f521c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MmU1OTUwMGE5NmJlNzE4MzgzZTEyN2QzOGJmNzQzMDBmNTIxYzA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T21:46:06Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-03T13:08:57Z"}, "message": "Fix miscompilation", "tree": {"sha": "f5743d3683a36dc45a0afe35573a5c01510779b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5743d3683a36dc45a0afe35573a5c01510779b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392e59500a96be718383e127d38bf74300f521c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392e59500a96be718383e127d38bf74300f521c0", "html_url": "https://github.com/rust-lang/rust/commit/392e59500a96be718383e127d38bf74300f521c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392e59500a96be718383e127d38bf74300f521c0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa46fe15367a8154f38371d0d913fa2f97f6416", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa46fe15367a8154f38371d0d913fa2f97f6416", "html_url": "https://github.com/rust-lang/rust/commit/9fa46fe15367a8154f38371d0d913fa2f97f6416"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "414d91a18be12d39e9299b905d3cc161dadee0d2", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/392e59500a96be718383e127d38bf74300f521c0/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392e59500a96be718383e127d38bf74300f521c0/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=392e59500a96be718383e127d38bf74300f521c0", "patch": "@@ -380,28 +380,35 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n     PinArgVisitor { ref_gen_ty, tcx }.visit_body(body);\n }\n \n-fn replace_result_variable<'tcx>(\n-    ret_ty: Ty<'tcx>,\n+/// Allocates a new local and replaces all references of `local` with it. Returns the new local.\n+///\n+/// `local` will be changed to a new local decl with type `ty`.\n+///\n+/// Note that the new local will be uninitialized. It is the caller's responsibility to assign some\n+/// valid value to it before its first use.\n+fn replace_local<'tcx>(\n+    local: Local,\n+    ty: Ty<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n-    let new_ret = LocalDecl {\n+    let new_decl = LocalDecl {\n         mutability: Mutability::Mut,\n-        ty: ret_ty,\n+        ty,\n         user_ty: UserTypeProjections::none(),\n         source_info,\n         internal: false,\n         is_block_tail: None,\n         local_info: LocalInfo::Other,\n     };\n-    let new_ret_local = Local::new(body.local_decls.len());\n-    body.local_decls.push(new_ret);\n-    body.local_decls.swap(RETURN_PLACE, new_ret_local);\n+    let new_local = Local::new(body.local_decls.len());\n+    body.local_decls.push(new_decl);\n+    body.local_decls.swap(local, new_local);\n \n-    RenameLocalVisitor { from: RETURN_PLACE, to: new_ret_local, tcx }.visit_body(body);\n+    RenameLocalVisitor { from: local, to: new_local, tcx }.visit_body(body);\n \n-    new_ret_local\n+    new_local\n }\n \n struct StorageIgnored(liveness::LiveVarSet);\n@@ -794,6 +801,10 @@ fn compute_layout<'tcx>(\n     (remap, layout, storage_liveness)\n }\n \n+/// Replaces the entry point of `body` with a block that switches on the generator discriminant and\n+/// dispatches to blocks according to `cases`.\n+///\n+/// After this function, the former entry point of the function will be bb1.\n fn insert_switch<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     cases: Vec<(usize, BasicBlock)>,\n@@ -1093,6 +1104,13 @@ fn create_cases<'tcx>(\n \n                 // Create StorageLive instructions for locals with live storage\n                 for i in 0..(body.local_decls.len()) {\n+                    if i == 2 {\n+                        // The resume argument is live on function entry. Don't insert a\n+                        // `StorageLive`, or the following `Assign` will read from uninitialized\n+                        // memory.\n+                        continue;\n+                    }\n+\n                     let l = Local::new(i);\n                     if point.storage_liveness.contains(l) && !transform.remap.contains_key(&l) {\n                         statements\n@@ -1110,6 +1128,10 @@ fn create_cases<'tcx>(\n                             Rvalue::Use(Operand::Move(resume_arg.into())),\n                         )),\n                     });\n+                    statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageDead(resume_arg),\n+                    });\n                 }\n \n                 // Then jump to the real target\n@@ -1166,7 +1188,28 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local\n         // RETURN_PLACE then is a fresh unused local with type ret_ty.\n-        let new_ret_local = replace_result_variable(ret_ty, body, tcx);\n+        let new_ret_local = replace_local(RETURN_PLACE, ret_ty, body, tcx);\n+\n+        // We also replace the resume argument and insert an `Assign`.\n+        // This is needed because the resume argument might be live across a `yield`, and the\n+        // transform assumes that any local live across a `yield` is assigned to before that.\n+        let resume_local = Local::new(2);\n+        let new_resume_local =\n+            replace_local(resume_local, body.local_decls[resume_local].ty, body, tcx);\n+\n+        // When first entering the generator, move the resume argument into its new local.\n+        let source_info = source_info(body);\n+        let stmts = &mut body.basic_blocks_mut()[BasicBlock::new(0)].statements;\n+        stmts.insert(\n+            0,\n+            Statement {\n+                source_info,\n+                kind: StatementKind::Assign(box (\n+                    new_resume_local.into(),\n+                    Rvalue::Use(Operand::Move(resume_local.into())),\n+                )),\n+            },\n+        );\n \n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices"}, {"sha": "278dc49c9260526b19b8ffd26398d8217e7e93d1", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/392e59500a96be718383e127d38bf74300f521c0/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392e59500a96be718383e127d38bf74300f521c0/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=392e59500a96be718383e127d38bf74300f521c0", "patch": "@@ -13,8 +13,8 @@ fn main() {\n \n // START rustc.main-{{closure}}.generator_drop.0.mir\n // bb0: {\n-//     _6 = discriminant((*_1));\n-//     switchInt(move _6) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n+//     _7 = discriminant((*_1));\n+//     switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n // }\n // bb1: {\n //     StorageDead(_4);\n@@ -37,7 +37,6 @@ fn main() {\n //     goto -> bb3;\n // }\n // bb7: {\n-//     StorageLive(_2);\n //     StorageLive(_3);\n //     StorageLive(_4);\n //     goto -> bb1;"}, {"sha": "4c4cf117a556316f58c00b0a41f1821554c1163e", "filename": "src/test/ui/generator/resume-live-across-yield.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/392e59500a96be718383e127d38bf74300f521c0/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392e59500a96be718383e127d38bf74300f521c0/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs?ref=392e59500a96be718383e127d38bf74300f521c0", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(PartialEq, Eq, Debug)]\n+struct Dropper(String);\n+\n+impl Drop for Dropper {\n+    fn drop(&mut self) {\n+        DROP.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let mut g = |mut _d| {\n+        _d = yield;\n+        _d\n+    };\n+\n+    let mut g = Pin::new(&mut g);\n+\n+    assert_eq!(\n+        g.as_mut().resume(Dropper(String::from(\"Hello world!\"))),\n+        GeneratorState::Yielded(())\n+    );\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    match g.as_mut().resume(Dropper(String::from(\"Number Two\"))) {\n+        GeneratorState::Complete(dropper) => {\n+            assert_eq!(DROP.load(Ordering::Acquire), 1);\n+            assert_eq!(dropper.0, \"Number Two\");\n+            drop(dropper);\n+            assert_eq!(DROP.load(Ordering::Acquire), 2);\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    drop(g);\n+    assert_eq!(DROP.load(Ordering::Acquire), 2);\n+}"}]}