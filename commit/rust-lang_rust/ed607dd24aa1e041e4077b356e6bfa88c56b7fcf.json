{"sha": "ed607dd24aa1e041e4077b356e6bfa88c56b7fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjA3ZGQyNGFhMWUwNDFlNDA3N2IzNTZlNmJmYTg4YzU2YjdmY2Y=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T18:00:07Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T18:06:26Z"}, "message": "std::iterator: Implement .next_back() for Zip\n\nLet Zip be double-ended when both its children have the ExactSizeHint\ntrait.", "tree": {"sha": "3ba47f3c26658e8966eb24ae4348fff9733ceaf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba47f3c26658e8966eb24ae4348fff9733ceaf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf", "html_url": "https://github.com/rust-lang/rust/commit/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf/comments", "author": null, "committer": null, "parents": [{"sha": "4b2cc22031d56a4846bc0ad4e65e19892db734c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2cc22031d56a4846bc0ad4e65e19892db734c4", "html_url": "https://github.com/rust-lang/rust/commit/4b2cc22031d56a4846bc0ad4e65e19892db734c4"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "58ebb35846dacd160ca623aa4dfd1423ab4d1635", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed607dd24aa1e041e4077b356e6bfa88c56b7fcf/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=ed607dd24aa1e041e4077b356e6bfa88c56b7fcf", "patch": "@@ -936,6 +936,29 @@ impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n     }\n }\n \n+impl<A, B,\n+     T: DoubleEndedIterator<A> + ExactSizeHint,\n+     U: DoubleEndedIterator<B> + ExactSizeHint> DoubleEndedIterator<(A, B)>\n+for Zip<T, U> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<(A, B)> {\n+        let (a_sz, _) = self.a.size_hint();\n+        let (b_sz, _) = self.b.size_hint();\n+        if a_sz < b_sz {\n+            for _ in range(0, b_sz - a_sz) { self.b.next_back(); }\n+        } else if a_sz > b_sz {\n+            for _ in range(0, a_sz - b_sz) { self.a.next_back(); }\n+        }\n+        let (a_sz, _) = self.a.size_hint();\n+        let (b_sz, _) = self.b.size_hint();\n+        assert!(a_sz == b_sz);\n+        match (self.a.next_back(), self.b.next_back()) {\n+            (Some(x), Some(y)) => Some((x, y)),\n+            _ => None\n+        }\n+    }\n+}\n+\n impl<A, B, T: RandomAccessIterator<A>, U: RandomAccessIterator<B>>\n RandomAccessIterator<(A, B)> for Zip<T, U> {\n     #[inline]"}]}