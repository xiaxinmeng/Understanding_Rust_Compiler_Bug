{"sha": "e94f066b02623bf15a4293467d0761e23c2087c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NGYwNjZiMDI2MjNiZjE1YTQyOTM0NjdkMDc2MWUyM2MyMDg3YzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-23T01:22:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T01:22:47Z"}, "message": "Rollup merge of #66576 - pnkfelix:more-robust-gdb-vec-printer, r=alexcrichton\n\nmade gdb pretty-printing more robust when printing uninitialized vec\n\nmade gdb pretty-printing more robust when printing uninitialized vec\n\nI based this solution on my reading of:\n\nhttps://rethinkdb.com/blog/make-debugging-easier-with-custom-pretty-printers#what-is-still-to-be-done\n\nThat post claims that there is no clean way to check for garbage pointers, and\nso this PR adopts the same solution of tentatively attempting to convert a\ndererence to a string, which throws a clean exception on garbage that we can\ncatch and recover from.\n\nI only made the change to vec and not the other pretty printers because I wanted\nto focus my effort on the simplest thing that would resolve issue #64343. In\nparticular, I *considered* generalizing this fix to work on the other datatypes\nin the pretty-printing support library, but I don't want to invest effort in\nthat until after we resolve our overall debugging support strategy; see also\nissues #60826 and #65564.\n\nFix #64343", "tree": {"sha": "cd67be2fca503977f01450b757341e698a3b1136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd67be2fca503977f01450b757341e698a3b1136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94f066b02623bf15a4293467d0761e23c2087c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2InoCRBK7hj4Ov3rIwAAdHIIADbxdxbwszEwOzhQhkGLW9vT\ncUm3CcpEcFbJKi0S9suj5Tcxdop0TIjLwFn7BCAWjqTnMyYHCO9hhFF1o3K8wpnk\nSoYPNTpqKIisL7Cx5DTHGzy6EgZbxJ0GraWznN0tFpQAVn4aEnDKzTAYOBi/rc2z\nifBaqPyWWhgHBfxy6g0Qhv+ARTSBjmC3XCHjqVfWsKsA6DrhI8+DHRx75MDGLk1j\nsYKkvElD40Onv9xzNYJvMADdPs+buV6dq5X8MjMJ28hWjeUaa52z5XDA0PC99ES2\n768bfI9ERF0IADdTDb66Oc4FZSJQU9iApAkrAQuhdt9maUBcFr6H1WW68+OQObI=\n=QM47\n-----END PGP SIGNATURE-----\n", "payload": "tree cd67be2fca503977f01450b757341e698a3b1136\nparent 8256e735cf42892639d343fe85dea97c9ac9d1a9\nparent 9b40e0bb9af6641a23586fd5999430e4c7622636\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574472167 +0100\ncommitter GitHub <noreply@github.com> 1574472167 +0100\n\nRollup merge of #66576 - pnkfelix:more-robust-gdb-vec-printer, r=alexcrichton\n\nmade gdb pretty-printing more robust when printing uninitialized vec\n\nmade gdb pretty-printing more robust when printing uninitialized vec\n\nI based this solution on my reading of:\n\nhttps://rethinkdb.com/blog/make-debugging-easier-with-custom-pretty-printers#what-is-still-to-be-done\n\nThat post claims that there is no clean way to check for garbage pointers, and\nso this PR adopts the same solution of tentatively attempting to convert a\ndererence to a string, which throws a clean exception on garbage that we can\ncatch and recover from.\n\nI only made the change to vec and not the other pretty printers because I wanted\nto focus my effort on the simplest thing that would resolve issue #64343. In\nparticular, I *considered* generalizing this fix to work on the other datatypes\nin the pretty-printing support library, but I don't want to invest effort in\nthat until after we resolve our overall debugging support strategy; see also\nissues #60826 and #65564.\n\nFix #64343\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94f066b02623bf15a4293467d0761e23c2087c4", "html_url": "https://github.com/rust-lang/rust/commit/e94f066b02623bf15a4293467d0761e23c2087c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94f066b02623bf15a4293467d0761e23c2087c4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8256e735cf42892639d343fe85dea97c9ac9d1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8256e735cf42892639d343fe85dea97c9ac9d1a9", "html_url": "https://github.com/rust-lang/rust/commit/8256e735cf42892639d343fe85dea97c9ac9d1a9"}, {"sha": "9b40e0bb9af6641a23586fd5999430e4c7622636", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b40e0bb9af6641a23586fd5999430e4c7622636", "html_url": "https://github.com/rust-lang/rust/commit/9b40e0bb9af6641a23586fd5999430e4c7622636"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "5da01b96fa5e36f392cdecad68eb448964eed219", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e94f066b02623bf15a4293467d0761e23c2087c4/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/e94f066b02623bf15a4293467d0761e23c2087c4/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=e94f066b02623bf15a4293467d0761e23c2087c4", "patch": "@@ -284,10 +284,20 @@ def to_string(self):\n                 (\"(len: %i, cap: %i)\" % (length, cap)))\n \n     def children(self):\n+        saw_inaccessible = False\n         (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(self.__val)\n         gdb_ptr = data_ptr.get_wrapped_value()\n         for index in xrange(0, length):\n-            yield (str(index), (gdb_ptr + index).dereference())\n+            if saw_inaccessible:\n+                return\n+            try:\n+                # rust-lang/rust#64343: passing deref expr to `str` allows\n+                # catching exception on garbage pointer\n+                str((gdb_ptr + index).dereference())\n+                yield (str(index), (gdb_ptr + index).dereference())\n+            except RuntimeError:\n+                saw_inaccessible = True\n+                yield (str(index), \"inaccessible\")\n \n \n class RustStdVecDequePrinter(object):"}]}