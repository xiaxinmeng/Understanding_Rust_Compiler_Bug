{"sha": "eaeede21269b52e0a060d363744d10fb817adec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZWVkZTIxMjY5YjUyZTBhMDYwZDM2Mzc0NGQxMGZiODE3YWRlYzM=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-03T10:19:36Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-03T12:44:51Z"}, "message": "Fix ICE caused by Drop implementations for unsized types\n\nFixes #26709", "tree": {"sha": "552c7e5bfe5fe01dcd73b95650763caf3d0ed29f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552c7e5bfe5fe01dcd73b95650763caf3d0ed29f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaeede21269b52e0a060d363744d10fb817adec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaeede21269b52e0a060d363744d10fb817adec3", "html_url": "https://github.com/rust-lang/rust/commit/eaeede21269b52e0a060d363744d10fb817adec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaeede21269b52e0a060d363744d10fb817adec3/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c246ecb64d147a2853747dedf1db76d06094891", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c246ecb64d147a2853747dedf1db76d06094891", "html_url": "https://github.com/rust-lang/rust/commit/4c246ecb64d147a2853747dedf1db76d06094891"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "e530eb0de59b8e7b9ed9cdbc6f6c08033be85d89", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eaeede21269b52e0a060d363744d10fb817adec3/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeede21269b52e0a060d363744d10fb817adec3/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=eaeede21269b52e0a060d363744d10fb817adec3", "patch": "@@ -355,7 +355,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let ty = Type::from_ref(llvm::LLVMTypeOf(dtor_addr));\n         ty.element_type().func_params()\n     };\n-    assert_eq!(params.len(), 1);\n+    assert_eq!(params.len(), if type_is_sized(bcx.tcx(), t) { 1 } else { 2 });\n \n     // Be sure to put the contents into a scope so we can use an invoke\n     // instruction to call the user destructor but still call the field\n@@ -371,7 +371,12 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let glue_type = get_drop_glue_type(bcx.ccx(), t);\n     let dtor_ty = bcx.tcx().mk_ctor_fn(class_did, &[glue_type], bcx.tcx().mk_nil());\n-    let (_, bcx) = invoke(bcx, dtor_addr, &[v0], dtor_ty, DebugLoc::None);\n+    let (_, bcx) = if type_is_sized(bcx.tcx(), t) {\n+        invoke(bcx, dtor_addr, &[v0], dtor_ty, DebugLoc::None)\n+    } else {\n+        let args = [Load(bcx, expr::get_dataptr(bcx, v0)), Load(bcx, expr::get_len(bcx, v0))];\n+        invoke(bcx, dtor_addr, &args, dtor_ty, DebugLoc::None)\n+    };\n \n     bcx.fcx.pop_and_trans_custom_cleanup_scope(bcx, contents_scope)\n }"}, {"sha": "62626d75865cfc87f424ae16bf1c01705b0cc716", "filename": "src/test/run-pass/issue-26709.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eaeede21269b52e0a060d363744d10fb817adec3/src%2Ftest%2Frun-pass%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeede21269b52e0a060d363744d10fb817adec3/src%2Ftest%2Frun-pass%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26709.rs?ref=eaeede21269b52e0a060d363744d10fb817adec3", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Wrapper<'a, T: ?Sized>(&'a mut i32, T);\n+\n+impl<'a, T: ?Sized> Drop for Wrapper<'a, T> {\n+    fn drop(&mut self) {\n+        *self.0 = 432;\n+    }\n+}\n+\n+fn main() {\n+    let mut x = 0;\n+    {\n+        let wrapper = Box::new(Wrapper(&mut x, 123));\n+        let _: Box<Wrapper<Send>> = wrapper;\n+    }\n+    assert_eq!(432, x)\n+}"}]}