{"sha": "b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmI1Y2RjZjQyYjRmZTZiMWUzZWJlNTZhZDBjZDQzZmQ5MDc0ODk=", "commit": {"author": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-28T12:21:31Z"}, "committer": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-31T12:47:25Z"}, "message": "Retry on EINVAL from pthread_attr_setstacksize()\n\nEnforce that the stack size is > RED_ZONE + PTHREAD_STACK_MIN.  If the\ncall to pthread_attr_setstacksize() subsequently fails with EINVAL, it\nmeans that the platform requires the stack size to be a multiple of the\npage size.  In that case, round up to the nearest page and retry.\n\nFixes #11694.", "tree": {"sha": "e654dcf7f4f058c7f5fc82d9322251adec216401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e654dcf7f4f058c7f5fc82d9322251adec216401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "html_url": "https://github.com/rust-lang/rust/commit/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489/comments", "author": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464b2e2364919f4555d6f8c5025273afd4277366", "url": "https://api.github.com/repos/rust-lang/rust/commits/464b2e2364919f4555d6f8c5025273afd4277366", "html_url": "https://github.com/rust-lang/rust/commit/464b2e2364919f4555d6f8c5025273afd4277366"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "605923ac99c6e7d42fec6070365e182fd4f83971", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "patch": "@@ -145,18 +145,30 @@ impl<T: Send> Drop for Thread<T> {\n #[cfg(windows)]\n mod imp {\n     use cast;\n+    use cmp;\n     use libc;\n     use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, SIZE_T, BOOL,\n                                        LPVOID, DWORD, LPDWORD, HANDLE};\n     use ptr;\n+    use unstable::stack::RED_ZONE;\n \n     pub type rust_thread = HANDLE;\n     pub type rust_thread_return = DWORD;\n \n     pub unsafe fn create(stack: uint, p: ~proc()) -> rust_thread {\n         let arg: *mut libc::c_void = cast::transmute(p);\n-        CreateThread(ptr::mut_null(), stack as libc::size_t, super::thread_start,\n-                     arg, 0, ptr::mut_null())\n+        // FIXME On UNIX, we guard against stack sizes that are too small but\n+        // that's because pthreads enforces that stacks are at least\n+        // PTHREAD_STACK_MIN bytes big.  Windows has no such lower limit, it's\n+        // just that below a certain threshold you can't do anything useful.\n+        // That threshold is application and architecture-specific, however.\n+        // For now, the only requirement is that it's big enough to hold the\n+        // red zone.  Round up to the next 64 kB because that's what the NT\n+        // kernel does, might as well make it explicit.  With the current\n+        // 20 kB red zone, that makes for a 64 kB minimum stack.\n+        let stack_size = (cmp::max(stack, RED_ZONE) + 0xfffe) & (-0xfffe - 1);\n+        CreateThread(ptr::mut_null(), stack_size as libc::size_t,\n+                     super::thread_start, arg, 0, ptr::mut_null())\n     }\n \n     pub unsafe fn join(native: rust_thread) {\n@@ -190,10 +202,13 @@ mod imp {\n #[cfg(unix)]\n mod imp {\n     use cast;\n-    use libc::consts::os::posix01::PTHREAD_CREATE_JOINABLE;\n+    use cmp;\n+    use libc::consts::os::posix01::{PTHREAD_CREATE_JOINABLE, PTHREAD_STACK_MIN};\n     use libc;\n+    use os;\n     use ptr;\n     use unstable::intrinsics;\n+    use unstable::stack::RED_ZONE;\n \n     pub type rust_thread = libc::pthread_t;\n     pub type rust_thread_return = *u8;\n@@ -202,11 +217,29 @@ mod imp {\n         let mut native: libc::pthread_t = intrinsics::uninit();\n         let mut attr: libc::pthread_attr_t = intrinsics::uninit();\n         assert_eq!(pthread_attr_init(&mut attr), 0);\n-        assert_eq!(pthread_attr_setstacksize(&mut attr,\n-                                             stack as libc::size_t), 0);\n         assert_eq!(pthread_attr_setdetachstate(&mut attr,\n                                                PTHREAD_CREATE_JOINABLE), 0);\n \n+        // Reserve room for the red zone, the runtime's stack of last resort.\n+        let stack_size = cmp::max(stack, RED_ZONE + PTHREAD_STACK_MIN as uint);\n+        match pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t) {\n+            0 => {\n+            },\n+            libc::EINVAL => {\n+                // EINVAL means |stack_size| is either too small or not a\n+                // multiple of the system page size.  Because it's definitely\n+                // >= PTHREAD_STACK_MIN, it must be an alignment issue.\n+                // Round up to the neareast page and try again.\n+                let page_size = os::page_size();\n+                let stack_size = (stack_size + page_size - 1) & (-(page_size - 1) - 1);\n+                assert_eq!(pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t), 0);\n+            },\n+            errno => {\n+                // This cannot really happen.\n+                fail!(\"pthread_attr_setstacksize() error: {} ({})\", os::last_os_error(), errno);\n+            },\n+        };\n+\n         let arg: *libc::c_void = cast::transmute(p);\n         assert_eq!(pthread_create(&mut native, &attr,\n                                   super::thread_start, arg), 0);\n@@ -262,4 +295,10 @@ mod tests {\n \n     #[test]\n     fn detached() { Thread::spawn(proc () {}) }\n+\n+    #[test]\n+    fn small_stacks() {\n+        assert_eq!(42, Thread::start_stack(0, proc () 42).join());\n+        assert_eq!(42, Thread::start_stack(1, proc () 42).join());\n+    }\n }"}, {"sha": "90c7888973afdab8a29779e9921799f1603ee554", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "patch": "@@ -24,7 +24,7 @@\n //! detection is not guaranteed to continue in the future. Usage of this module\n //! is discouraged unless absolutely necessary.\n \n-static RED_ZONE: uint = 20 * 1024;\n+pub static RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented\n /// stacks are currently not enabled as segmented stacks, but rather one giant"}]}