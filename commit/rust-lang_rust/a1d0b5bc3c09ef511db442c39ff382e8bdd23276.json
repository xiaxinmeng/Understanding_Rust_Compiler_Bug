{"sha": "a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDBiNWJjM2MwOWVmNTExZGI0NDJjMzlmZjM4MmU4YmRkMjMyNzY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T16:33:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T16:49:30Z"}, "message": "Prepare Ty::new for resolution", "tree": {"sha": "82aed4e1fc9d1ffc99ff78f7919cc6d1a4994230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82aed4e1fc9d1ffc99ff78f7919cc6d1a4994230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "html_url": "https://github.com/rust-lang/rust/commit/a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0b5bc3c09ef511db442c39ff382e8bdd23276/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c85748f5fbe308610261da91aeb978eca751a0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c85748f5fbe308610261da91aeb978eca751a0ff", "html_url": "https://github.com/rust-lang/rust/commit/c85748f5fbe308610261da91aeb978eca751a0ff"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "7905d86a19c69890a4b19f4db04e7cdd960f4e13", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a1d0b5bc3c09ef511db442c39ff382e8bdd23276/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d0b5bc3c09ef511db442c39ff382e8bdd23276/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a1d0b5bc3c09ef511db442c39ff382e8bdd23276", "patch": "@@ -130,17 +130,17 @@ pub struct FnSig {\n }\n \n impl Ty {\n-    pub fn new(node: ast::TypeRef) -> Self {\n+    pub fn new(_db: &impl HirDatabase, node: ast::TypeRef) -> Cancelable<Self> {\n         use ra_syntax::ast::TypeRef::*;\n-        match node {\n+        Ok(match node {\n             ParenType(_inner) => Ty::Unknown, // TODO\n             TupleType(_inner) => Ty::Unknown, // TODO\n             NeverType(..) => Ty::Never,\n             PathType(inner) => {\n                 let path = if let Some(p) = inner.path() {\n                     p\n                 } else {\n-                    return Ty::Unknown;\n+                    return Ok(Ty::Unknown);\n                 };\n                 if path.qualifier().is_none() {\n                     let name = path\n@@ -172,7 +172,7 @@ impl Ty {\n             ForType(_inner) => Ty::Unknown,         // TODO\n             ImplTraitType(_inner) => Ty::Unknown,   // TODO\n             DynTraitType(_inner) => Ty::Unknown,    // TODO\n-        }\n+        })\n     }\n \n     pub fn unit() -> Self {\n@@ -218,19 +218,28 @@ pub fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n         .param_list()\n         .map(|pl| {\n             pl.params()\n-                .map(|p| p.type_ref().map(|t| Ty::new(t)).unwrap_or(Ty::Unknown))\n+                .map(|p| {\n+                    p.type_ref()\n+                        .map(|t| Ty::new(db, t))\n+                        .unwrap_or(Ok(Ty::Unknown))\n+                })\n                 .collect()\n         })\n-        .unwrap_or_else(Vec::new);\n+        .unwrap_or_else(|| Ok(Vec::new()))?;\n     let output = node\n         .ret_type()\n         .and_then(|rt| rt.type_ref())\n-        .map(|t| Ty::new(t))\n-        .unwrap_or(Ty::Unknown);\n+        .map(|t| Ty::new(db, t))\n+        .unwrap_or(Ok(Ty::Unknown))?;\n     let sig = FnSig { input, output };\n     Ok(Ty::FnPtr(Arc::new(sig)))\n }\n \n+// TODO this should probably be per namespace (i.e. types vs. values), since for\n+// a tuple struct `struct Foo(Bar)`, Foo has function type as a value, but\n+// defines the struct type Foo when used in the type namespace. rustc has a\n+// separate DefId for the constructor, but with the current DefId approach, that\n+// seems complicated.\n pub fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n     let def = def_id.resolve(db)?;\n     match def {\n@@ -408,9 +417,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                 }\n                 match callee_ty {\n-                    Ty::FnPtr(sig) => {\n-                        sig.output.clone()\n-                    }\n+                    Ty::FnPtr(sig) => sig.output.clone(),\n                     _ => {\n                         // not callable\n                         // TODO report an error?\n@@ -499,7 +506,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 } else {\n                     Ty::Unknown\n                 };\n-                let cast_ty = e.type_ref().map(Ty::new).unwrap_or(Ty::Unknown);\n+                let cast_ty = e\n+                    .type_ref()\n+                    .map(|t| Ty::new(self.db, t))\n+                    .unwrap_or(Ok(Ty::Unknown))?;\n                 // TODO do the coercion...\n                 cast_ty\n             }\n@@ -532,7 +542,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             match stmt {\n                 ast::Stmt::LetStmt(stmt) => {\n                     let decl_ty = if let Some(type_ref) = stmt.type_ref() {\n-                        Ty::new(type_ref)\n+                        Ty::new(self.db, type_ref)?\n                     } else {\n                         Ty::Unknown\n                     };\n@@ -582,7 +592,7 @@ pub fn infer(db: &impl HirDatabase, function: Function) -> Cancelable<InferenceR\n                 continue;\n             };\n             if let Some(type_ref) = param.type_ref() {\n-                let ty = Ty::new(type_ref);\n+                let ty = Ty::new(db, type_ref)?;\n                 ctx.type_for.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n             } else {\n                 // TODO self param"}]}