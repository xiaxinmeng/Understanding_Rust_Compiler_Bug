{"sha": "6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNDQ4M2VjN2E5MmJlZGFiNjliMzYzYWVlYjY5MzFiMWJiNTk1MWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-05T07:01:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-05T17:40:59Z"}, "message": "Fix some bugs with -W unused-imports\n\n1. Don't warn about anything not used in the prelude which is autmoatically\n   injected, accomplished with a test that the span is equal to a dummy span.\n2. Don't warn about unused imports from the injected intrinsic module,\n   accomplished by testing against the name of the imported module\n3. If anything is used from a glob import, don't warn about the glob import.\n4. If an import imports more than one thing, and none of them are used, only\n   issue a warning once\n\nAlso updated the unused-imports-warn test to have stricter requirements on\nerror messages.", "tree": {"sha": "63f9e00da7ba451d79efbba56ec277456eddb104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f9e00da7ba451d79efbba56ec277456eddb104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "html_url": "https://github.com/rust-lang/rust/commit/6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a4483ec7a92bedab69b363aeeb6931b1bb5951f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b05ece9310303c600ecf83c895892d7a19b565", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b05ece9310303c600ecf83c895892d7a19b565", "html_url": "https://github.com/rust-lang/rust/commit/f1b05ece9310303c600ecf83c895892d7a19b565"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "4213201db6131c7e2a688fad2adcaef130055402", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 50, "deletions": 17, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6a4483ec7a92bedab69b363aeeb6931b1bb5951f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4483ec7a92bedab69b363aeeb6931b1bb5951f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "patch": "@@ -392,17 +392,19 @@ pub struct ImportResolution {\n     /// The type that this `use` directive names, if there is one.\n     mut type_target: Option<Target>,\n \n-    mut used: bool,\n+    /// There exists one state per import statement\n+    state: @mut ImportState,\n }\n \n-pub fn ImportResolution(privacy: Privacy, span: span) -> ImportResolution {\n+pub fn ImportResolution(privacy: Privacy, span: span,\n+                        state: @mut ImportState) -> ImportResolution {\n     ImportResolution {\n         privacy: privacy,\n         span: span,\n         outstanding_references: 0,\n         value_target: None,\n         type_target: None,\n-        used: false\n+        state: state,\n     }\n }\n \n@@ -415,6 +417,15 @@ pub impl ImportResolution {\n     }\n }\n \n+pub struct ImportState {\n+    used: bool,\n+    warned: bool\n+}\n+\n+pub fn ImportState() -> ImportState {\n+    ImportState{ used: false, warned: false }\n+}\n+\n /// The link from a module up to its nearest parent node.\n pub enum ParentLink {\n     NoParentLink,\n@@ -1415,6 +1426,7 @@ pub impl Resolver {\n \n                     // Build up the import directives.\n                     let module_ = self.get_module_from_parent(parent);\n+                    let state = @mut ImportState();\n                     match view_path.node {\n                         view_path_simple(binding, full_path, ns, _) => {\n                             let ns = match ns {\n@@ -1430,7 +1442,8 @@ pub impl Resolver {\n                                                         module_,\n                                                         module_path,\n                                                         subclass,\n-                                                        view_path.span);\n+                                                        view_path.span,\n+                                                        state);\n                         }\n                         view_path_list(_, ref source_idents, _) => {\n                             for (*source_idents).each |source_ident| {\n@@ -1442,15 +1455,17 @@ pub impl Resolver {\n                                                             module_,\n                                                             module_path,\n                                                             subclass,\n-                                                            view_path.span);\n+                                                            view_path.span,\n+                                                            state);\n                             }\n                         }\n                         view_path_glob(_, _) => {\n                             self.build_import_directive(privacy,\n                                                         module_,\n                                                         module_path,\n                                                         @GlobImport,\n-                                                        view_path.span);\n+                                                        view_path.span,\n+                                                        state);\n                         }\n                     }\n                 }\n@@ -1573,7 +1588,8 @@ pub impl Resolver {\n                     // avoid creating cycles in the\n                     // module graph.\n \n-                    let resolution = @ImportResolution(Public, dummy_sp());\n+                    let resolution = @ImportResolution(Public, dummy_sp(),\n+                                                       @mut ImportState());\n                     resolution.outstanding_references = 0;\n \n                     match existing_module.parent_link {\n@@ -1826,7 +1842,8 @@ pub impl Resolver {\n                               module_: @Module,\n                               module_path: @DVec<ident>,\n                               subclass: @ImportDirectiveSubclass,\n-                              span: span) {\n+                              span: span,\n+                              state: @mut ImportState) {\n         let directive = @ImportDirective(privacy, module_path,\n                                          subclass, span);\n         module_.imports.push(directive);\n@@ -1850,7 +1867,14 @@ pub impl Resolver {\n                     }\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n-                        let resolution = @ImportResolution(privacy, span);\n+                        let resolution = @ImportResolution(privacy, span,\n+                                                           state);\n+                        let name = self.idents_to_str(module_path.get());\n+                        // Don't warn about unused intrinsics because they're\n+                        // automatically appended to all files\n+                        if name == ~\"intrinsic::rusti\" {\n+                            resolution.state.warned = true;\n+                        }\n                         resolution.outstanding_references = 1;\n                         module_.import_resolutions.insert(target, resolution);\n                     }\n@@ -2183,7 +2207,7 @@ pub impl Resolver {\n                                     return UnboundResult;\n                                 }\n                                 Some(target) => {\n-                                    import_resolution.used = true;\n+                                    import_resolution.state.used = true;\n                                     return BoundResult(target.target_module,\n                                                     target.bindings);\n                                 }\n@@ -2352,7 +2376,7 @@ pub impl Resolver {\n                                     module_result = UnboundResult;\n                                 }\n                                 Some(target) => {\n-                                    import_resolution.used = true;\n+                                    import_resolution.state.used = true;\n                                     module_result = BoundResult\n                                         (target.target_module,\n                                          target.bindings);\n@@ -2419,6 +2443,7 @@ pub impl Resolver {\n         // everything it can to the list of import resolutions of the module\n         // node.\n         debug!(\"(resolving glob import) resolving %? glob import\", privacy);\n+        let state = @mut ImportState();\n \n         // We must bail out if the node has unresolved imports of any kind\n         // (including globs).\n@@ -2445,7 +2470,8 @@ pub impl Resolver {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n                         @ImportResolution(privacy,\n-                                          target_import_resolution.span);\n+                                          target_import_resolution.span,\n+                                          state);\n                     new_import_resolution.value_target =\n                         copy target_import_resolution.value_target;\n                     new_import_resolution.type_target =\n@@ -2486,7 +2512,8 @@ pub impl Resolver {\n             match module_.import_resolutions.find(&ident) {\n                 None => {\n                     // Create a new import resolution from this child.\n-                    dest_import_resolution = @ImportResolution(privacy, span);\n+                    dest_import_resolution = @ImportResolution(privacy, span,\n+                                                               state);\n                     module_.import_resolutions.insert\n                         (ident, dest_import_resolution);\n                 }\n@@ -2713,7 +2740,7 @@ pub impl Resolver {\n                                namespace);\n                     }\n                     Some(target) => {\n-                        import_resolution.used = true;\n+                        import_resolution.state.used = true;\n                         return Success(copy target);\n                     }\n                 }\n@@ -2962,7 +2989,7 @@ pub impl Resolver {\n                     Some(target) => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n-                        import_resolution.used = true;\n+                        import_resolution.state.used = true;\n                         return Success(copy target);\n                     }\n                 }\n@@ -4560,7 +4587,7 @@ pub impl Resolver {\n                                     namespace)) {\n                             (Some(def), Some(Public)) => {\n                                 // Found it.\n-                                import_resolution.used = true;\n+                                import_resolution.state.used = true;\n                                 return ImportNameDefinition(def);\n                             }\n                             (Some(_), _) | (None, _) => {\n@@ -5204,7 +5231,13 @@ pub impl Resolver {\n \n     fn check_for_unused_imports_in_module(module_: @Module) {\n         for module_.import_resolutions.each_value_ref |&import_resolution| {\n-            if !import_resolution.used {\n+            // Ignore dummy spans for things like automatically injected\n+            // imports for the prelude, and also don't warn about the same\n+            // import statement being unused more than once.\n+            if !import_resolution.state.used &&\n+                    !import_resolution.state.warned &&\n+                    import_resolution.span != dummy_sp() {\n+                import_resolution.state.warned = true;\n                 match self.unused_import_lint_level {\n                     warn => {\n                         self.session.span_warn(import_resolution.span,"}, {"sha": "52a9e1b38ff47e51541bc177a16044db56a0ae7f", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a4483ec7a92bedab69b363aeeb6931b1bb5951f/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4483ec7a92bedab69b363aeeb6931b1bb5951f/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=6a4483ec7a92bedab69b363aeeb6931b1bb5951f", "patch": "@@ -8,23 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:unused import\n-// compile-flags:-W unused-imports\n+// compile-flags: -D unused-imports\n+\n use cal = bar::c::cc;\n \n+use core::either::Right;        //~ ERROR unused import\n+\n+use core::util::*;              // shouldn't get errors for not using\n+                                // everything imported\n+\n+// Should only get one error instead of two errors here\n+use core::option::{Some, None}; //~ ERROR unused import\n+\n mod foo {\n-    pub type point = {x: int, y: int};\n-    pub type square = {p: point, h: uint, w: uint};\n+    pub struct Point{x: int, y: int}\n+    pub struct Square{p: Point, h: uint, w: uint}\n }\n \n mod bar {\n     pub mod c {\n-        use foo::point;\n-        use foo::square;\n-        pub fn cc(p: point) -> str { return 2 * (p.x + p.y); }\n+        use foo::Point;\n+        use foo::Square; //~ ERROR unused import\n+        pub fn cc(p: Point) -> int { return 2 * (p.x + p.y); }\n     }\n }\n \n fn main() {\n-    cal({x:3, y:9});\n+    cal(foo::Point{x:3, y:9});\n+    let a = 3;\n+    ignore(a);\n }"}]}