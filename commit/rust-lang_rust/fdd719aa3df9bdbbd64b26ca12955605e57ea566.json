{"sha": "fdd719aa3df9bdbbd64b26ca12955605e57ea566", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDcxOWFhM2RmOWJkYmJkNjRiMjZjYTEyOTU1NjA1ZTU3ZWE1NjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T11:44:42Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:10Z"}, "message": "Prepare for using wfcheck on existential types", "tree": {"sha": "790fd18954f9fe6b739a9737b5d56b087e721e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790fd18954f9fe6b739a9737b5d56b087e721e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd719aa3df9bdbbd64b26ca12955605e57ea566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd719aa3df9bdbbd64b26ca12955605e57ea566", "html_url": "https://github.com/rust-lang/rust/commit/fdd719aa3df9bdbbd64b26ca12955605e57ea566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd719aa3df9bdbbd64b26ca12955605e57ea566/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb139f53f62b936ad94e9449212e130a71723b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb139f53f62b936ad94e9449212e130a71723b7", "html_url": "https://github.com/rust-lang/rust/commit/feb139f53f62b936ad94e9449212e130a71723b7"}], "stats": {"total": 90, "additions": 54, "deletions": 36}, "files": [{"sha": "178f0d3cdcbc109cdfd3df17bc4346dcb7c190ed", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -2856,22 +2856,26 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n         })\n }\n \n+/// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition\n+pub fn is_impl_trait_defn(tcx: TyCtxt, def_id: DefId) -> Option<DefId> {\n+    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n+        if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {\n+            if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n+                return exist_ty.impl_trait_fn;\n+            }\n+        }\n+    }\n+    None\n+}\n+\n /// See `ParamEnv` struct def'n for details.\n fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx> {\n \n     // The param_env of an impl Trait type is its defining function's param_env\n-    if let Some(Def::Existential(_)) = tcx.describe_def(def_id) {\n-        if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n-            if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {\n-                if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n-                    if let Some(parent) = exist_ty.impl_trait_fn {\n-                        return param_env(tcx, parent);\n-                    }\n-                }\n-            }\n-        }\n+    if let Some(parent) = is_impl_trait_defn(tcx, def_id) {\n+        return param_env(tcx, parent);\n     }\n     // Compute the bounds on Self and the type parameters.\n "}, {"sha": "b99cdd59773aa71f18dfbf97332e4eed4c11a8a8", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -360,10 +360,16 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     // types appearing in the fn signature\n                 }\n \n-                ty::TyAnon(..) => {\n+                ty::TyAnon(did, substs) => {\n                     // all of the requirements on type parameters\n                     // should've been checked by the instantiation\n                     // of whatever returned this exact `impl Trait`.\n+\n+                    // for named existential types we still need to check them\n+                    if super::is_impl_trait_defn(self.infcx.tcx, did).is_none() {\n+                        let obligations = self.nominal_obligations(did, substs);\n+                        self.out.extend(obligations);\n+                    }\n                 }\n \n                 ty::TyDynamic(data, r) => {"}, {"sha": "465faa1d4779c65ba52dc110efe62e851cf461b4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -1037,15 +1037,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         match path.def {\n             Def::Existential(did) => {\n                 // check for desugared impl trait\n-                if let Some(node_id) = tcx.hir.as_local_node_id(did) {\n-                    if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {\n-                        if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n-                            if exist_ty.impl_trait_fn.is_some() {\n-                                let lifetimes = &path.segments[0].args.as_ref().unwrap().args;\n-                                return self.impl_trait_ty_to_ty(did, lifetimes);\n-                            }\n-                        }\n-                    }\n+                if ty::is_impl_trait_defn(tcx, did).is_some() {\n+                    let lifetimes = &path.segments[0].args.as_ref().unwrap().args;\n+                    return self.impl_trait_ty_to_ty(did, lifetimes);\n                 }\n                 let item_segment = path.segments.split_last().unwrap();\n                 self.prohibit_generics(item_segment.1);"}, {"sha": "84af8e1dca2b1dbae5f7077b8805d8c0a1d2bce1", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -1,17 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:18\n+   |\n+LL |     let z: i32 = x; //~ ERROR mismatched types\n+   |                  ^ expected i32, found anonymized type\n+   |\n+   = note: expected type `i32`\n+              found type `WrongGeneric::<&{integer}>`\n+\n warning: not reporting region error due to nll\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:19:1\n    |\n LL | existential type WrongGeneric<T>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:20:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0310`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "440fc2d1284046e04eecbf2eaffa2ef021e2e829", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(existential_type)]\n \n-fn main() {}\n+fn main() {\n+    let y = 42;\n+    let x = wrong_generic(&y);\n+    let z: i32 = x; //~ ERROR mismatched types\n+}\n \n existential type WrongGeneric<T>: 'static;\n //~^ ERROR the parameter type `T` may not live long enough"}, {"sha": "189ad7d49a485d8f84f2e4f111924c429598efce", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd719aa3df9bdbbd64b26ca12955605e57ea566/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr?ref=fdd719aa3df9bdbbd64b26ca12955605e57ea566", "patch": "@@ -1,5 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:18\n+   |\n+LL |     let z: i32 = x; //~ ERROR mismatched types\n+   |                  ^ expected i32, found anonymized type\n+   |\n+   = note: expected type `i32`\n+              found type `WrongGeneric::<&{integer}>`\n+\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:19:1\n    |\n LL | existential type WrongGeneric<T>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,11 +17,12 @@ LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:19:1\n    |\n LL | existential type WrongGeneric<T>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0310`.\n+Some errors occurred: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}]}