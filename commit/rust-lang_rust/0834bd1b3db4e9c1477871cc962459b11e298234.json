{"sha": "0834bd1b3db4e9c1477871cc962459b11e298234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzRiZDFiM2RiNGU5YzE0Nzc4NzFjYzk2MjQ1OWIxMWUyOTgyMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-20T07:12:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-20T07:12:39Z"}, "message": "Auto merge of #23548 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "4a63350e8437a7fb81d9351e29289214908c0b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a63350e8437a7fb81d9351e29289214908c0b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0834bd1b3db4e9c1477871cc962459b11e298234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0834bd1b3db4e9c1477871cc962459b11e298234", "html_url": "https://github.com/rust-lang/rust/commit/0834bd1b3db4e9c1477871cc962459b11e298234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0834bd1b3db4e9c1477871cc962459b11e298234/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda8673531c2ecea13c86216f964feb6091b4ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda8673531c2ecea13c86216f964feb6091b4ade", "html_url": "https://github.com/rust-lang/rust/commit/fda8673531c2ecea13c86216f964feb6091b4ade"}, {"sha": "6107e4c0b88d9e22482ed88c52b98c2ec2034bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6107e4c0b88d9e22482ed88c52b98c2ec2034bb1", "html_url": "https://github.com/rust-lang/rust/commit/6107e4c0b88d9e22482ed88c52b98c2ec2034bb1"}], "stats": {"total": 159, "additions": 89, "deletions": 70}, "files": [{"sha": "e7ad2aec7be0af4be5390c40443f5f7c5262fcfa", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -97,12 +97,7 @@\n #     make check-stage1-rpass TESTNAME=my-shiny-new-test\n #\n #     // Having trouble figuring out which test is failing? Turn off parallel tests\n-#     make check-stage1-std RUST_TEST_TASKS=1\n-#\n-# This is hardly all there is to know of The Rust Build System's\n-# mysteries. The tale continues on the wiki[1].\n-#\n-# [1]: https://github.com/rust-lang/rust/wiki/Note-testsuite\n+#     make check-stage1-std RUST_TEST_THREADS=1\n #\n # If you really feel like getting your hands dirty, then:\n #"}, {"sha": "33ef3f9ee4acba4e3078a5a3afb8ac6ccf3849d5", "filename": "man/rustc.1", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -242,6 +242,28 @@ full debug info with variable and type information.\n \\fBopt\\-level\\fR=\\fIVAL\\fR\n Optimize with possible levels 0\\[en]3\n \n+.SH ENVIRONMENT VARIABLES\n+\n+Some of these affect the output of the compiler, while others affect programs\n+which link to the standard library.\n+\n+.TP\n+\\fBRUST_TEST_THREADS\\fR\n+The test framework Rust provides executes tests in parallel. This variable sets\n+the maximum number of threads used for this purpose.\n+\n+.TP\n+\\fBRUST_TEST_NOCAPTURE\\fR\n+A synonym for the --nocapture flag.\n+\n+.TP\n+\\fBRUST_MIN_STACK\\fR\n+Sets the minimum stack size for new threads.\n+\n+.TP\n+\\fBRUST_BACKTRACE\\fR\n+If set, produces a backtrace in the output of a program which panics.\n+\n .SH \"EXAMPLES\"\n To build an executable from a source file with a main function:\n     $ rustc \\-o hello hello.rs"}, {"sha": "01c4e99b77c70a25daa503a95ac2f1d45a093f0d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -224,15 +224,15 @@ pub fn run_tests(config: &Config) {\n         // android debug-info test uses remote debugger\n         // so, we test 1 task at once.\n         // also trying to isolate problems with adb_run_wrapper.sh ilooping\n-        env::set_var(\"RUST_TEST_TASKS\",\"1\");\n+        env::set_var(\"RUST_TEST_THREADS\",\"1\");\n     }\n \n     match config.mode {\n         DebugInfoLldb => {\n             // Some older versions of LLDB seem to have problems with multiple\n             // instances running in parallel, so only run one test task at a\n             // time.\n-            env::set_var(\"RUST_TEST_TASKS\", \"1\");\n+            env::set_var(\"RUST_TEST_THREADS\", \"1\");\n         }\n         _ => { /* proceed */ }\n     }"}, {"sha": "6899fa13974e9e4282bafd0fda4021ec4223765e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -131,7 +131,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         true\n     });\n \n-    for key in vec![\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_TASKS\"] {\n+    for key in vec![\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n         match env::var(key) {\n             Ok(val) =>\n                 if exec_env.iter().find(|&&(ref x, _)| *x == key.to_string()).is_none() {"}, {"sha": "018f35337f3c0b376f86c23b571e93f6ebc2603a", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -170,6 +170,8 @@ Foreign libraries often hand off ownership of resources to the calling code.\n When this occurs, we must use Rust's destructors to provide safety and guarantee\n the release of these resources (especially in the case of panic).\n \n+For more about destructors, see the [Drop trait](../std/ops/trait.Drop.html).\n+\n # Callbacks from C code to Rust functions\n \n Some external libraries require the usage of callbacks to report back their"}, {"sha": "39106aaf85751c3efeb31b2ce6ebf8357a302879", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -561,38 +561,40 @@ fn main() {\n In this case, Rust knows that `x` is being *borrowed* by the `add_one()`\n function, and since it's only reading the value, allows it.\n \n-We can borrow `x` multiple times, as long as it's not simultaneous:\n+We can borrow `x` as read-only multiple times, even simultaneously:\n \n ```{rust}\n-fn add_one(x: &i32) -> i32 {\n-    *x + 1\n+fn add(x: &i32, y: &i32) -> i32 {\n+    *x + *y\n }\n \n fn main() {\n     let x = Box::new(5);\n \n-    println!(\"{}\", add_one(&*x));\n-    println!(\"{}\", add_one(&*x));\n-    println!(\"{}\", add_one(&*x));\n+    println!(\"{}\", add(&x, &x));\n+    println!(\"{}\", add(&x, &x));\n }\n ```\n \n-Or as long as it's not a mutable borrow. This will error:\n+We can mutably borrow `x` multiple times, but only if x itself is mutable, and\n+it may not be *simultaneously* borrowed: \n \n ```{rust,ignore}\n-fn add_one(x: &mut i32) -> i32 {\n-    *x + 1\n+fn increment(x: &mut i32) {\n+    *x += 1;\n }\n \n fn main() {\n-    let x = Box::new(5);\n+    // If variable x is not \"mut\", this will not compile\n+    let mut x = Box::new(5);\n \n-    println!(\"{}\", add_one(&*x)); // error: cannot borrow immutable dereference\n-                                  // of `&`-pointer as mutable\n+    increment(&mut x);\n+    increment(&mut x);\n+    println!(\"{}\", x);\n }\n ```\n \n-Notice we changed the signature of `add_one()` to request a mutable reference.\n+Notice the signature of `increment()` requests a mutable reference.\n \n ## Best practices\n "}, {"sha": "11f0b8e1ddbf96df73378f4169fae121551fea85", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -93,10 +93,6 @@ offered by the Rust language and libraries. For example, they\n - are plain-old-data, that is, they don't move ownership, again unlike\n   `Box`, hence the Rust compiler cannot protect against bugs like\n   use-after-free;\n-- are considered sendable (if their contents is considered sendable),\n-  so the compiler offers no assistance with ensuring their use is\n-  thread-safe; for example, one can concurrently access a `*mut i32`\n-  from two threads without synchronization.\n - lack any form of lifetimes, unlike `&`, and so the compiler cannot\n   reason about dangling pointers; and\n - have no guarantees about aliasing or mutability other than mutation"}, {"sha": "c56852cb18a0577b93ca8895a34c44a1d0c44965", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -73,6 +73,11 @@ pub struct Metadata(fs_imp::FileAttr);\n /// will yield instances of `io::Result<DirEntry>`. Through a `DirEntry`\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n+///\n+/// # Failure\n+///\n+/// This `io::Result` will be an `Err` if there's some sort of intermittent\n+/// IO error during iteration.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ReadDir(fs_imp::ReadDir);\n "}, {"sha": "237435d6dfbfa4c9b8a224c515edc74d122dc20a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -584,7 +584,8 @@ pub trait BufRead: Read {\n         read_until(self, byte, buf)\n     }\n \n-    /// Read all bytes until a newline byte (the 0xA byte) is reached.\n+    /// Read all bytes until a newline byte (the 0xA byte) is reached, and\n+    /// append them to the provided buffer.\n     ///\n     /// This function will continue to read (and buffer) bytes from the\n     /// underlying stream until the newline delimiter (the 0xA byte) or EOF is"}, {"sha": "b5513dfd0354d542538360bb947fb510020596d3", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -191,8 +191,8 @@ impl Float for f32 {\n     /// Constructs a floating point number by multiplying `x` by 2 raised to the\n     /// power of `exp`\n     #[inline]\n-    fn ldexp(x: f32, exp: int) -> f32 {\n-        unsafe { cmath::ldexpf(x, exp as c_int) }\n+    fn ldexp(self, exp: isize) -> f32 {\n+        unsafe { cmath::ldexpf(self, exp as c_int) }\n     }\n \n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n@@ -2207,8 +2207,8 @@ mod tests {\n         let f1: f32 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n         let f2: f32 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         let f3: f32 = FromStrRadix::from_str_radix(\"1.Cp-12\", 16).unwrap();\n-        assert_eq!(Float::ldexp(1f32, -123), f1);\n-        assert_eq!(Float::ldexp(1f32, -111), f2);\n+        assert_eq!(1f32.ldexp(-123), f1);\n+        assert_eq!(1f32.ldexp(-111), f2);\n         assert_eq!(Float::ldexp(1.75f32, -12), f3);\n \n         assert_eq!(Float::ldexp(0f32, -123), 0f32);"}, {"sha": "61bddc3d18f66310c7210bdd5c7747b9001f0517", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -200,8 +200,8 @@ impl Float for f64 {\n     fn to_radians(self) -> f64 { num::Float::to_radians(self) }\n \n     #[inline]\n-    fn ldexp(x: f64, exp: int) -> f64 {\n-        unsafe { cmath::ldexp(x, exp as c_int) }\n+    fn ldexp(self, exp: isize) -> f64 {\n+        unsafe { cmath::ldexp(self, exp as c_int) }\n     }\n \n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n@@ -2214,8 +2214,8 @@ mod tests {\n         let f1: f64 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n         let f2: f64 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         let f3: f64 = FromStrRadix::from_str_radix(\"1.Cp-12\", 16).unwrap();\n-        assert_eq!(Float::ldexp(1f64, -123), f1);\n-        assert_eq!(Float::ldexp(1f64, -111), f2);\n+        assert_eq!(1f64.ldexp(-123), f1);\n+        assert_eq!(1f64.ldexp(-111), f2);\n         assert_eq!(Float::ldexp(1.75f64, -12), f3);\n \n         assert_eq!(Float::ldexp(0f64, -123), 0f64);"}, {"sha": "082dad613b5561891bd11be67406f354e198fa9b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -699,7 +699,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"pending integer conventions\")]\n-    fn ldexp(x: Self, exp: isize) -> Self;\n+    fn ldexp(self, exp: isize) -> Self;\n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n     /// satisfying:\n     ///"}, {"sha": "5e8abfd0a3f8988a9f4a128e0bc233dd90b6aec8", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -30,7 +30,7 @@ use thunk::Thunk;\n use usize;\n \n // Reexport some of our utilities which are expected by other crates.\n-pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n+pub use self::util::{min_stack, running_on_valgrind};\n pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n \n // Reexport some functionality from liballoc."}, {"sha": "f1c43a07e6e3895ef35cc52369876cc8f0cc7350", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -58,29 +58,6 @@ pub fn min_stack() -> uint {\n     return amt;\n }\n \n-/// Get's the number of scheduler threads requested by the environment\n-/// either `RUST_THREADS` or `num_cpus`.\n-#[allow(deprecated)]\n-pub fn default_sched_threads() -> uint {\n-    use os;\n-    match env::var(\"RUST_THREADS\") {\n-        Ok(nstr) => {\n-            let opt_n: Option<uint> = nstr.parse().ok();\n-            match opt_n {\n-                Some(n) if n > 0 => n,\n-                _ => panic!(\"`RUST_THREADS` is `{}`, should be a positive integer\", nstr)\n-            }\n-        }\n-        Err(..) => {\n-            if limit_thread_creation_due_to_osx_and_valgrind() {\n-                1\n-            } else {\n-                os::num_cpus()\n-            }\n-        }\n-    }\n-}\n-\n // Indicates whether we should perform expensive sanity checks, including rtassert!\n //\n // FIXME: Once the runtime matures remove the `true` below to turn off rtassert,"}, {"sha": "c11ffe66e6c392305450dd13706994e6ba3ed812", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -176,6 +176,8 @@ pub mod rt {\n     impl_to_source! { ast::Arg, arg_to_string }\n     impl_to_source! { Generics, generics_to_string }\n     impl_to_source! { P<ast::Item>, item_to_string }\n+    impl_to_source! { P<ast::ImplItem>, impl_item_to_string }\n+    impl_to_source! { P<ast::TraitItem>, trait_item_to_string }\n     impl_to_source! { P<ast::Stmt>, stmt_to_string }\n     impl_to_source! { P<ast::Expr>, expr_to_string }\n     impl_to_source! { P<ast::Pat>, pat_to_string }\n@@ -308,6 +310,8 @@ pub mod rt {\n \n     impl_to_tokens! { ast::Ident }\n     impl_to_tokens! { P<ast::Item> }\n+    impl_to_tokens! { P<ast::ImplItem> }\n+    impl_to_tokens! { P<ast::TraitItem> }\n     impl_to_tokens! { P<ast::Pat> }\n     impl_to_tokens! { ast::Arm }\n     impl_to_tokens_lifetime! { &'a [P<ast::Item>] }"}, {"sha": "239fea57d94d2ae795f47dc5ba21543818e8aa8d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -355,6 +355,14 @@ pub fn item_to_string(i: &ast::Item) -> String {\n     $to_string(|s| s.print_item(i))\n }\n \n+pub fn impl_item_to_string(i: &ast::ImplItem) -> String {\n+    $to_string(|s| s.print_impl_item(i))\n+}\n+\n+pub fn trait_item_to_string(i: &ast::TraitItem) -> String {\n+    $to_string(|s| s.print_trait_item(i))\n+}\n+\n pub fn generics_to_string(generics: &ast::Generics) -> String {\n     $to_string(|s| s.print_generics(generics))\n }"}, {"sha": "51decbab8587d1e516279ff98e05dccd3dd6ce91", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -44,6 +44,7 @@\n #![feature(std_misc)]\n #![feature(libc)]\n #![feature(set_stdio)]\n+#![feature(os)]\n \n extern crate getopts;\n extern crate serialize;\n@@ -338,7 +339,7 @@ The FILTER regex is tested against the name of all tests to run, and\n only those tests that match are run.\n \n By default, all tests are run in parallel. This can be altered with the\n-RUST_TEST_TASKS environment variable when running tests (set it to 1).\n+RUST_TEST_THRADS environment variable when running tests (set it to 1).\n \n All tests have their standard output and standard error captured by default.\n This can be overridden with the --nocapture flag or the RUST_TEST_NOCAPTURE=1\n@@ -841,18 +842,22 @@ fn run_tests<F>(opts: &TestOpts,\n     Ok(())\n }\n \n+#[allow(deprecated)]\n fn get_concurrency() -> uint {\n-    use std::rt;\n-    match env::var(\"RUST_TEST_TASKS\") {\n+    match env::var(\"RUST_TEST_THREADS\") {\n         Ok(s) => {\n             let opt_n: Option<uint> = s.parse().ok();\n             match opt_n {\n                 Some(n) if n > 0 => n,\n-                _ => panic!(\"RUST_TEST_TASKS is `{}`, should be a positive integer.\", s)\n+                _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", s)\n             }\n         }\n         Err(..) => {\n-            rt::default_sched_threads()\n+            if std::rt::util::limit_thread_creation_due_to_osx_and_valgrind() {\n+                1\n+            } else {\n+                std::os::num_cpus()\n+            }\n         }\n     }\n }"}, {"sha": "5e1070c6dc503d1bc1019eab14dff4a90a16288b", "filename": "src/libunicode/char.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibunicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Flibunicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fchar.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -462,7 +462,8 @@ impl CharExt for char {\n }\n \n /// An iterator over the lowercase mapping of a given character, returned from\n-/// the `lowercase` method on characters.\n+/// the [`to_lowercase` method](../primitive.char.html#method.to_lowercase) on\n+/// characters.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToLowercase(Option<char>);\n \n@@ -473,7 +474,8 @@ impl Iterator for ToLowercase {\n }\n \n /// An iterator over the uppercase mapping of a given character, returned from\n-/// the `uppercase` method on characters.\n+/// the [`to_uppercase` method](../primitive.char.html#method.to_uppercase) on\n+/// characters.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToUppercase(Option<char>);\n "}, {"sha": "94ed641c79c9372cabcf34a107356b5e2bc780cc", "filename": "src/test/run-fail/test-tasks-invalid-value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This checks that RUST_TEST_TASKS not being 1, 2, ... is detected\n+// This checks that RUST_TEST_THREADS not being 1, 2, ... is detected\n // properly.\n \n // error-pattern:should be a positive integer\n // compile-flags: --test\n-// exec-env:RUST_TEST_TASKS=foo\n+// exec-env:RUST_TEST_THREADS=foo\n // ignore-pretty: does not work well with `--test`\n \n #[test]"}, {"sha": "5462a996f73d974d071a4ca31b6845cc68228dc1", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834bd1b3db4e9c1477871cc962459b11e298234/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=0834bd1b3db4e9c1477871cc962459b11e298234", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty\n // compile-flags:--test\n-// exec-env:RUST_TEST_TASKS=1\n+// exec-env:RUST_TEST_THREADS=1\n \n // Tests for the connect_timeout() function on a TcpStream. This runs with only\n // one test task to ensure that errors are timeouts, not file descriptor"}]}