{"sha": "de434d8e44b40451eff0020832bb9a9303b32067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDM0ZDhlNDRiNDA0NTFlZmYwMDIwODMyYmI5YTkzMDNiMzIwNjc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-12T11:14:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-12T11:14:47Z"}, "message": "Propagate locals, even if they have unpropagatable assignments somewhere.", "tree": {"sha": "a3058a29ca64add3e448447c8f0264683f6c4547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3058a29ca64add3e448447c8f0264683f6c4547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de434d8e44b40451eff0020832bb9a9303b32067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de434d8e44b40451eff0020832bb9a9303b32067", "html_url": "https://github.com/rust-lang/rust/commit/de434d8e44b40451eff0020832bb9a9303b32067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de434d8e44b40451eff0020832bb9a9303b32067/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c849a0d087546d9ef5a47593287b2bc1ec5bfcaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c849a0d087546d9ef5a47593287b2bc1ec5bfcaf", "html_url": "https://github.com/rust-lang/rust/commit/c849a0d087546d9ef5a47593287b2bc1ec5bfcaf"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "d66c909fe6cc5d08adcea9bf1d1806305ea08ea6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de434d8e44b40451eff0020832bb9a9303b32067/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de434d8e44b40451eff0020832bb9a9303b32067/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=de434d8e44b40451eff0020832bb9a9303b32067", "patch": "@@ -775,6 +775,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // Projections are fine, because `&mut foo.x` will be caught by\n             // `MutatingUseContext::Borrow` elsewhere.\n             MutatingUse(MutatingUseContext::Projection)\n+            // These are just stores, where the storing is not propagatable, but there may be later\n+            // mutations of the same local via `Store`\n+            | MutatingUse(MutatingUseContext::Call)\n+            // Actual store that can possibly even propagate a value\n             | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {\n@@ -799,7 +803,21 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonUse(_) => {}\n-            _ => {\n+\n+            // These could be propagated with a smarter analysis or just some careful thinking about\n+            // whether they'd be fine right now.\n+            MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Yield)\n+            | MutatingUse(MutatingUseContext::Drop)\n+            | MutatingUse(MutatingUseContext::Retag)\n+            // These can't ever be propagated under any scheme, as we can't reason about indirect\n+            // mutation.\n+            | NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n+            | NonMutatingUse(NonMutatingUseContext::AddressOf)\n+            | MutatingUse(MutatingUseContext::Borrow)\n+            | MutatingUse(MutatingUseContext::AddressOf) => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }"}, {"sha": "3cf05f1357835dca956693686ba3615fa40d9269", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read/rustc.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de434d8e44b40451eff0020832bb9a9303b32067/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/de434d8e44b40451eff0020832bb9a9303b32067/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read%2Frustc.main.ConstProp.diff?ref=de434d8e44b40451eff0020832bb9a9303b32067", "patch": "@@ -29,17 +29,26 @@\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000063))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:11: 6:13\n+-                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:11: 6:13\n++                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           (_1.0: i32) = const 42i32;       // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:11: 7:13\n+-                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:11: 7:13\n++                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n-          _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++         _2 = const 99i32;                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000063))\n++                                          // mir::Constant\n++                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n                                            // ty::Const\n                                            // + ty: ()"}]}