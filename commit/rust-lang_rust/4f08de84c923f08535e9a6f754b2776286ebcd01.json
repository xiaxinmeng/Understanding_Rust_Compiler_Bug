{"sha": "4f08de84c923f08535e9a6f754b2776286ebcd01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDhkZTg0YzkyM2YwODUzNWU5YTZmNzU0YjI3NzYyODZlYmNkMDE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-15T22:23:18Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-17T00:55:46Z"}, "message": "Add comprehensive test for no-ICE behaviour of SIMD FFI.\n\nThis just compiles a test using SIMD in FFI (mostly importing LLVM\nintrinsics) for almost all rustc's supported platforms, but not linking\nit or running it, so there's absolutely no guarantee that this is correct.", "tree": {"sha": "5fa4ae2e25fed9186773d71e93aab70b500da39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa4ae2e25fed9186773d71e93aab70b500da39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f08de84c923f08535e9a6f754b2776286ebcd01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f08de84c923f08535e9a6f754b2776286ebcd01", "html_url": "https://github.com/rust-lang/rust/commit/4f08de84c923f08535e9a6f754b2776286ebcd01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f08de84c923f08535e9a6f754b2776286ebcd01/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e83ae931c802608962fb5f9c90220d80d2eaa1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e83ae931c802608962fb5f9c90220d80d2eaa1c", "html_url": "https://github.com/rust-lang/rust/commit/9e83ae931c802608962fb5f9c90220d80d2eaa1c"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "68a6a5fbfe86425d49b1e9892427bce94c43b174", "filename": "src/test/run-make/simd-ffi/Makefile", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4f08de84c923f08535e9a6f754b2776286ebcd01/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4f08de84c923f08535e9a6f754b2776286ebcd01/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2FMakefile?ref=4f08de84c923f08535e9a6f754b2776286ebcd01", "patch": "@@ -0,0 +1,33 @@\n+-include ../tools.mk\n+\n+# construct a fairly exhaustive list of platforms that we\n+# support. These ones don't follow a pattern\n+TARGETS=arm-linux-androideabi arm-unknown-linux-gnueabihf arm-unknown-linux-gnueabi\n+\n+# these ones do, each OS lists the architectures it supports\n+LINUX=aarch64 i686 x86_64 mips mipsel\n+WINDOWS=i686 x86_64\n+# fails with: failed to get iphonesimulator SDK path: no such file or directory\n+#IOS=i386 aarch64 armv7\n+DARWIN=i686 x86_64\n+\n+$(foreach arch,$(LINUX),$(eval TARGETS += $(arch)-unknown-linux-gnu))\n+$(foreach arch,$(WINDOWS),$(eval TARGETS += $(arch)-pc-windows-gnu))\n+#$(foreach arch,$(IOS),$(eval TARGETS += $(arch)-apple-ios))\n+$(foreach arch,$(DARWIN),$(eval TARGETS += $(arch)-apple-darwin))\n+\n+all: $(TARGETS)\n+\n+define MK_TARGETS\n+# compile the rust file to the given target, but only to asm and IR\n+# form, to avoid having to have an appropriate linker.\n+#\n+# we need some features because the integer SIMD instructions are not\n+# enabled by-default for i686 and ARM; these features will be invalid\n+# on some platforms, but LLVM just prints a warning so that's fine for\n+# now.\n+$(1): simd.rs\n+\t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs -C target-feature='+neon,+sse2'\n+endef\n+\n+$(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}, {"sha": "d5945db94791fded3ebdb4824409fcaf7c488eae", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4f08de84c923f08535e9a6f754b2776286ebcd01/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f08de84c923f08535e9a6f754b2776286ebcd01/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=4f08de84c923f08535e9a6f754b2776286ebcd01", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ensures that public symbols are not removed completely\n+#![crate_type = \"lib\"]\n+// we can compile to a variety of platforms, because we don't need\n+// cross-compiled standard libraries.\n+#![no_std]\n+\n+#![feature(simd, link_llvm_intrinsics, lang_items)]\n+\n+\n+#[repr(C)]\n+#[derive(Copy)]\n+#[simd]\n+pub struct f32x4(f32, f32, f32, f32);\n+\n+\n+extern {\n+    #[link_name = \"llvm.sqrt.v4f32\"]\n+    fn vsqrt(x: f32x4) -> f32x4;\n+}\n+\n+pub fn foo(x: f32x4) -> f32x4 {\n+    unsafe {vsqrt(x)}\n+}\n+\n+#[repr(C)]\n+#[derive(Copy)]\n+#[simd]\n+pub struct i32x4(i32, i32, i32, i32);\n+\n+\n+extern {\n+    // _mm_sll_epi32\n+    #[cfg(any(target_arch = \"x86\",\n+              target_arch = \"x86-64\"))]\n+    #[link_name = \"llvm.x86.sse2.psll.d\"]\n+    fn integer(a: i32x4, b: i32x4) -> i32x4;\n+\n+    // vmaxq_s32\n+    #[cfg(any(target_arch = \"arm\"))]\n+    #[link_name = \"llvm.arm.neon.vmaxs.v4i32\"]\n+    fn integer(a: i32x4, b: i32x4) -> i32x4;\n+    // vmaxq_s32\n+    #[cfg(any(target_arch = \"aarch64\"))]\n+    #[link_name = \"llvm.aarch64.neon.maxs.v4i32\"]\n+    fn integer(a: i32x4, b: i32x4) -> i32x4;\n+\n+    // just some substitute foreign symbol, not an LLVM intrinsic; so\n+    // we still get type checking, but not as detailed as (ab)using\n+    // LLVM.\n+    #[cfg(not(any(target_arch = \"x86\",\n+                  target_arch = \"x86-64\",\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")))]\n+    fn integer(a: i32x4, b: i32x4) -> i32x4;\n+}\n+\n+pub fn bar(a: i32x4, b: i32x4) -> i32x4 {\n+    unsafe {integer(a, b)}\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+mod std {\n+    pub mod marker {\n+        pub use Copy;\n+    }\n+}"}]}