{"sha": "6c7ec18e3357e71c7c26f43b28b52e78634a917c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjN2VjMThlMzM1N2U3MWM3YzI2ZjQzYjI4YjUyZTc4NjM0YTkxN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-05T22:14:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-05T22:14:43Z"}, "message": "Rollup merge of #59624 - jethrogb:jb/sgx-unwind-syms, r=alexcrichton\n\nSGX target: Use linker option to avoid code CGU assignment kludge\n\ncc @VardhanThigle @faern", "tree": {"sha": "84f3e1064cdeb1726c4c6fe534576189b5507068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f3e1064cdeb1726c4c6fe534576189b5507068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c7ec18e3357e71c7c26f43b28b52e78634a917c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcp9NTCRBK7hj4Ov3rIwAAdHIIAGny05tUYbwIJjq/d1VFxuxt\nYqYJZzyqU2pU2f+WKMT8n8HtRFdhUSaSd4h8C1WDwZQPk8+fMc4W+QmBhqFJ0hza\nlb9ZHnpj7dB6qQ6XNAj9ukAukq8Go3onqkinn2eTmk27bDnNb/lFCPEsdSnFsfn8\n86a000f0N8UpfmgCToR8GsW2o7ZWBoBjZX24w8TOyh3jGDtOs0O79byfiymy+yDh\nojrb2BB9lJm814PaKz8RNdMxtHio1cQYxi4kBdQP4Fa29xtJZKQeAfue9Xht8zLb\n4CMjwJBdC4opPVNZkEGAJyD/dDOVziRpBXKX7a/7XXhm2pAgzly1g36LtS65lzk=\n=e+wX\n-----END PGP SIGNATURE-----\n", "payload": "tree 84f3e1064cdeb1726c4c6fe534576189b5507068\nparent 2b90d67320778a1d342b4825e3dd5fd5f68ea711\nparent 0a1a4759537091c240cadd517159696eeca6ead2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554502483 +0200\ncommitter GitHub <noreply@github.com> 1554502483 +0200\n\nRollup merge of #59624 - jethrogb:jb/sgx-unwind-syms, r=alexcrichton\n\nSGX target: Use linker option to avoid code CGU assignment kludge\n\ncc @VardhanThigle @faern\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ec18e3357e71c7c26f43b28b52e78634a917c", "html_url": "https://github.com/rust-lang/rust/commit/6c7ec18e3357e71c7c26f43b28b52e78634a917c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ec18e3357e71c7c26f43b28b52e78634a917c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b90d67320778a1d342b4825e3dd5fd5f68ea711", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b90d67320778a1d342b4825e3dd5fd5f68ea711", "html_url": "https://github.com/rust-lang/rust/commit/2b90d67320778a1d342b4825e3dd5fd5f68ea711"}, {"sha": "0a1a4759537091c240cadd517159696eeca6ead2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1a4759537091c240cadd517159696eeca6ead2", "html_url": "https://github.com/rust-lang/rust/commit/0a1a4759537091c240cadd517159696eeca6ead2"}], "stats": {"total": 94, "additions": 53, "deletions": 41}, "files": [{"sha": "46cf4cd8ae3530dd9ac6c0e68588be969b4d4b46", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=6c7ec18e3357e71c7c26f43b28b52e78634a917c", "patch": "@@ -21,6 +21,15 @@ pub fn target() -> Result<Target, String> {\n         \"-Wl,--no-undefined-version\",\n         \"-Wl,-Bsymbolic\",\n         \"-Wl,--export-dynamic\",\n+        // The following symbols are needed by libunwind, which is linked after\n+        // libstd. Make sure they're included in the link.\n+        \"-Wl,-u,__rust_abort\",\n+        \"-Wl,-u,__rust_c_alloc\",\n+        \"-Wl,-u,__rust_c_dealloc\",\n+        \"-Wl,-u,__rust_print_err\",\n+        \"-Wl,-u,__rust_rwlock_rdlock\",\n+        \"-Wl,-u,__rust_rwlock_unlock\",\n+        \"-Wl,-u,__rust_rwlock_wrlock\",\n     ];\n \n     const EXPORT_SYMBOLS: &[&str] = &["}, {"sha": "b385d567dd8c4324fc9bc8ed7a1e941baa36dee0", "filename": "src/libstd/sys/sgx/alloc.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs?ref=6c7ec18e3357e71c7c26f43b28b52e78634a917c", "patch": "@@ -1,4 +1,4 @@\n-use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::alloc::{self, GlobalAlloc, Layout, System};\n \n use super::waitqueue::SpinMutex;\n \n@@ -30,3 +30,17 @@ unsafe impl GlobalAlloc for System {\n         DLMALLOC.lock().realloc(ptr, layout.size(), layout.align(), new_size)\n     }\n }\n+\n+// The following functions are needed by libunwind. These symbols are named\n+// in pre-link args for the target specification, so keep that in sync.\n+#[cfg(not(test))]\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_c_alloc(size: usize, align: usize) -> *mut u8 {\n+    alloc::alloc(Layout::from_size_align_unchecked(size, align))\n+}\n+\n+#[cfg(not(test))]\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_c_dealloc(ptr: *mut u8, size: usize, align: usize) {\n+    alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n+}"}, {"sha": "a99a534f41e3ce69e073fa16024b0426a7252406", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=6c7ec18e3357e71c7c26f43b28b52e78634a917c", "patch": "@@ -130,6 +130,15 @@ pub unsafe fn abort_internal() -> ! {\n     abi::usercalls::exit(true)\n }\n \n+// This function is needed by the panic runtime. The symbol is named in\n+// pre-link args for the target specification, so keep that in sync.\n+#[cfg(not(test))]\n+#[no_mangle]\n+// NB. used by both libunwind and libpanic_abort\n+pub unsafe extern \"C\" fn __rust_abort() {\n+    abort_internal();\n+}\n+\n pub fn hashmap_random_keys() -> (u64, u64) {\n     fn rdrand64() -> u64 {\n         unsafe {"}, {"sha": "30c47e44eef8ecfaa794238a95c0a3d2de13ea8c", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=6c7ec18e3357e71c7c26f43b28b52e78634a917c", "patch": "@@ -1,10 +1,4 @@\n-#[cfg(not(test))]\n-use crate::alloc::{self, Layout};\n use crate::num::NonZeroUsize;\n-#[cfg(not(test))]\n-use crate::slice;\n-#[cfg(not(test))]\n-use crate::str;\n \n use super::waitqueue::{\n     try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n@@ -165,10 +159,11 @@ impl RWLock {\n     pub unsafe fn destroy(&self) {}\n }\n \n+// The following functions are needed by libunwind. These symbols are named\n+// in pre-link args for the target specification, so keep that in sync.\n #[cfg(not(test))]\n const EINVAL: i32 = 22;\n \n-// used by libunwind port\n #[cfg(not(test))]\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n@@ -198,39 +193,6 @@ pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n     return 0;\n }\n \n-// the following functions are also used by the libunwind port. They're\n-// included here to make sure parallel codegen and LTO don't mess things up.\n-#[cfg(not(test))]\n-#[no_mangle]\n-pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n-    if s < 0 {\n-        return;\n-    }\n-    let buf = slice::from_raw_parts(m as *const u8, s as _);\n-    if let Ok(s) = str::from_utf8(&buf[..buf.iter().position(|&b| b == 0).unwrap_or(buf.len())]) {\n-        eprint!(\"{}\", s);\n-    }\n-}\n-\n-#[cfg(not(test))]\n-#[no_mangle]\n-// NB. used by both libunwind and libpanic_abort\n-pub unsafe extern \"C\" fn __rust_abort() {\n-    crate::sys::abort_internal();\n-}\n-\n-#[cfg(not(test))]\n-#[no_mangle]\n-pub unsafe extern \"C\" fn __rust_c_alloc(size: usize, align: usize) -> *mut u8 {\n-    alloc::alloc(Layout::from_size_align_unchecked(size, align))\n-}\n-\n-#[cfg(not(test))]\n-#[no_mangle]\n-pub unsafe extern \"C\" fn __rust_c_dealloc(ptr: *mut u8, size: usize, align: usize) {\n-    alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "a575401f5f60dc28fba903ebf0e6d8bc7a764c67", "filename": "src/libstd/sys/sgx/stdio.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ec18e3357e71c7c26f43b28b52e78634a917c/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs?ref=6c7ec18e3357e71c7c26f43b28b52e78634a917c", "patch": "@@ -2,6 +2,10 @@ use fortanix_sgx_abi as abi;\n \n use crate::io;\n use crate::sys::fd::FileDesc;\n+#[cfg(not(test))]\n+use crate::slice;\n+#[cfg(not(test))]\n+use crate::str;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -62,3 +66,17 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub fn panic_output() -> Option<impl io::Write> {\n     super::abi::panic::SgxPanicOutput::new()\n }\n+\n+// This function is needed by libunwind. The symbol is named in pre-link args\n+// for the target specification, so keep that in sync.\n+#[cfg(not(test))]\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n+    if s < 0 {\n+        return;\n+    }\n+    let buf = slice::from_raw_parts(m as *const u8, s as _);\n+    if let Ok(s) = str::from_utf8(&buf[..buf.iter().position(|&b| b == 0).unwrap_or(buf.len())]) {\n+        eprint!(\"{}\", s);\n+    }\n+}"}]}