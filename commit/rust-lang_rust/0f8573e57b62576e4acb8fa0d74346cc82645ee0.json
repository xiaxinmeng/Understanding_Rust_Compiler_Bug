{"sha": "0f8573e57b62576e4acb8fa0d74346cc82645ee0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODU3M2U1N2I2MjU3NmU0YWNiOGZhMGQ3NDM0NmNjODI2NDVlZTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-12T14:56:13Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-17T17:41:12Z"}, "message": "Pass ExpnData by reference.", "tree": {"sha": "0ae3706a16950f05580c706fa8a193669b3d3415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae3706a16950f05580c706fa8a193669b3d3415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8573e57b62576e4acb8fa0d74346cc82645ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8573e57b62576e4acb8fa0d74346cc82645ee0", "html_url": "https://github.com/rust-lang/rust/commit/0f8573e57b62576e4acb8fa0d74346cc82645ee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8573e57b62576e4acb8fa0d74346cc82645ee0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51b131fd186ffef240835e18eae3a73501f3090", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51b131fd186ffef240835e18eae3a73501f3090", "html_url": "https://github.com/rust-lang/rust/commit/a51b131fd186ffef240835e18eae3a73501f3090"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0ac80ebd6367b62c7e8088f216680af715e2b9f2", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8573e57b62576e4acb8fa0d74346cc82645ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8573e57b62576e4acb8fa0d74346cc82645ee0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=0f8573e57b62576e4acb8fa0d74346cc82645ee0", "patch": "@@ -372,7 +372,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 |encoder, expn_id, data, hash| -> FileEncodeResult {\n                     if expn_id.krate == LOCAL_CRATE {\n                         let pos = AbsoluteBytePos::new(encoder.position());\n-                        encoder.encode_tagged(TAG_EXPN_DATA, &data)?;\n+                        encoder.encode_tagged(TAG_EXPN_DATA, data)?;\n                         expn_data.insert(hash, pos);\n                     } else {\n                         foreign_expn_data.insert(hash, expn_id.local_id.as_u32());"}, {"sha": "b4adf2d46bbcdd65f67685f725003af932acaf4e", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f8573e57b62576e4acb8fa0d74346cc82645ee0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8573e57b62576e4acb8fa0d74346cc82645ee0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=0f8573e57b62576e4acb8fa0d74346cc82645ee0", "patch": "@@ -1142,7 +1142,7 @@ impl HygieneEncodeContext {\n         &self,\n         encoder: &mut T,\n         mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,\n-        mut encode_expn: impl FnMut(&mut T, ExpnId, ExpnData, ExpnHash) -> Result<(), R>,\n+        mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,\n     ) -> Result<(), R> {\n         // When we serialize a `SyntaxContextData`, we may end up serializing\n         // a `SyntaxContext` that we haven't seen before\n@@ -1344,15 +1344,15 @@ fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Resul\n \n fn for_all_expns_in<E>(\n     expns: impl Iterator<Item = ExpnId>,\n-    mut f: impl FnMut(ExpnId, ExpnData, ExpnHash) -> Result<(), E>,\n+    mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,\n ) -> Result<(), E> {\n     let all_data: Vec<_> = HygieneData::with(|data| {\n         expns\n             .map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn).clone()))\n             .collect()\n     });\n     for (expn, data, hash) in all_data.into_iter() {\n-        f(expn, data, hash)?;\n+        f(expn, &data, hash)?;\n     }\n     Ok(())\n }"}]}