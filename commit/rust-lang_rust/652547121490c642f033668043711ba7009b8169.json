{"sha": "652547121490c642f033668043711ba7009b8169", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjU0NzEyMTQ5MGM2NDJmMDMzNjY4MDQzNzExYmE3MDA5YjgxNjk=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-08T22:48:04Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-08T22:48:04Z"}, "message": "fix #595", "tree": {"sha": "b91a490adb67f3caf4ab1b084673db7c248b42ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91a490adb67f3caf4ab1b084673db7c248b42ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652547121490c642f033668043711ba7009b8169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652547121490c642f033668043711ba7009b8169", "html_url": "https://github.com/rust-lang/rust/commit/652547121490c642f033668043711ba7009b8169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652547121490c642f033668043711ba7009b8169/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "html_url": "https://github.com/rust-lang/rust/commit/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "6f47dfea2f6a12f765e6eb69ddfc95f16c67e8ef", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/652547121490c642f033668043711ba7009b8169/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652547121490c642f033668043711ba7009b8169/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=652547121490c642f033668043711ba7009b8169", "patch": "@@ -257,6 +257,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         regex::INVALID_REGEX,\n+        regex::REGEX_MACRO,\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,"}, {"sha": "1f5d7faba06cc1b05bcb17d5aaebf1a2dd60ba51", "filename": "src/regex.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/652547121490c642f033668043711ba7009b8169/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652547121490c642f033668043711ba7009b8169/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=652547121490c642f033668043711ba7009b8169", "patch": "@@ -1,11 +1,11 @@\n use regex_syntax;\n use std::error::Error;\n+use std::collections::HashSet;\n use syntax::ast::Lit_::LitStr;\n-use syntax::ast::NodeId;\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_block, FnKind};\n+use rustc_front::intravisit::{Visitor, walk_expr};\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n@@ -48,7 +48,7 @@ declare_lint! {\n /// **Example:** `regex!(\"foo|bar\")`\n declare_lint! {\n     pub REGEX_MACRO,\n-    Allow,\n+    Warn,\n     \"finds use of `regex!(_)`, suggests `Regex::new(_)` instead\"\n }\n \n@@ -62,15 +62,9 @@ impl LintPass for RegexPass {\n }\n \n impl LateLintPass for RegexPass {\n-    fn check_fn(&mut self, \n-                cx: &LateContext, \n-                _: FnKind, \n-                _: &FnDecl, \n-                block: &Block, \n-                _: Span, \n-                _: NodeId) {\n-        let mut visitor = RegexVisitor { cx: cx, last: BytePos(0) };\n-        visitor.visit_block(block);\n+    fn check_crate(&mut self, cx: &LateContext, krate: &Crate) {\n+        let mut visitor = RegexVisitor { cx: cx, spans: HashSet::new() };\n+        krate.visit_all_items(&mut visitor);\n     }\n \n \n@@ -169,25 +163,23 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n \n struct RegexVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>,\n-    last: BytePos\n+    spans: HashSet<Span>,\n }\n \n impl<'v, 't: 'v> Visitor<'v> for RegexVisitor<'v, 't> {\n-    fn visit_block(&mut self, block: &'v Block) {\n-        if let Some(ref expr) = block.expr {\n-            if let Some(span) = is_expn_of(self.cx, expr.span, \"regex\") {\n-                if span.lo == BytePos(0) || span.lo == self.last {\n-                    return;\n-                }\n-                span_lint(self.cx, \n-                          REGEX_MACRO, \n-                          span,\n-                          &format!(\"regex!(_): {:?}, {:?}\", self.last, span.lo));\n-                          //\"`regex!(_)` found. Use `Regex::new(_)`, which is faster for now.\");\n-                self.last = span.lo;\n+    fn visit_expr(&mut self, expr: &'v Expr) {\n+        if let Some(span) = is_expn_of(self.cx, expr.span, \"regex\") {\n+            if self.spans.contains(&span) {\n                 return;\n             }\n+            span_lint(self.cx, \n+                      REGEX_MACRO, \n+                      span,\n+                      \"`regex!(_)` found. \\\n+                      Please use `Regex::new(_)`, which is faster for now.\");\n+            self.spans.insert(span);\n+            return;\n         }\n-        walk_block(self, block);\n+        walk_expr(self, expr);\n     }\n }"}, {"sha": "67d73ce0ac40174388be105185d703ab2953fcb6", "filename": "tests/mut_mut_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/652547121490c642f033668043711ba7009b8169/tests%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652547121490c642f033668043711ba7009b8169/tests%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmut_mut_macro.rs?ref=652547121490c642f033668043711ba7009b8169", "patch": "@@ -9,6 +9,7 @@ use std::collections::HashMap;\n \n #[test]\n #[deny(mut_mut)]\n+#[allow(regex_macro)]\n fn test_regex() {\n     let pattern = regex!(r\"^(?P<level>[#]+)\\s(?P<title>.+)$\");\n     assert!(pattern.is_match(\"# headline\"));"}]}