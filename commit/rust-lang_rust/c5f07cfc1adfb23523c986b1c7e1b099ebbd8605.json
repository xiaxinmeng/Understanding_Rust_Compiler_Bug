{"sha": "c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZjA3Y2ZjMWFkZmIyMzUyM2M5ODZiMWM3ZTFiMDk5ZWJiZDg2MDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T05:08:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `Inherited::locals`", "tree": {"sha": "0666cb1da3d12ca4e61ec7db60d8cbc1642776c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0666cb1da3d12ca4e61ec7db60d8cbc1642776c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "html_url": "https://github.com/rust-lang/rust/commit/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "html_url": "https://github.com/rust-lang/rust/commit/8ae01fc0ae8ee160a5713873177f9fc9957be8ab"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "f3c01778562f7224312a16350983565c31209ffa", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f07cfc1adfb23523c986b1c7e1b099ebbd8605/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c5f07cfc1adfb23523c986b1c7e1b099ebbd8605", "patch": "@@ -158,7 +158,7 @@ pub struct SelfInfo {\n /// share the inherited fields.\n pub struct Inherited {\n     infcx: @infer::InferCtxt,\n-    locals: @mut HashMap<ast::NodeId, ty::t>,\n+    locals: @RefCell<HashMap<ast::NodeId, ty::t>>,\n     param_env: ty::ParameterEnvironment,\n \n     // Temporary tables:\n@@ -260,7 +260,7 @@ impl Inherited {\n            -> Inherited {\n         Inherited {\n             infcx: infer::new_infer_ctxt(tcx),\n-            locals: @mut HashMap::new(),\n+            locals: @RefCell::new(HashMap::new()),\n             param_env: param_env,\n             node_types: RefCell::new(HashMap::new()),\n             node_type_substs: RefCell::new(HashMap::new()),\n@@ -351,11 +351,13 @@ impl GatherLocalsVisitor {\n                     // infer the variable's type\n                     let var_id = self.fcx.infcx().next_ty_var_id();\n                     let var_ty = ty::mk_var(self.fcx.tcx(), var_id);\n-                    self.fcx.inh.locals.insert(nid, var_ty);\n+                    let mut locals = self.fcx.inh.locals.borrow_mut();\n+                    locals.get().insert(nid, var_ty);\n                 }\n                 Some(typ) => {\n                     // take type that the user specified\n-                    self.fcx.inh.locals.insert(nid, typ);\n+                    let mut locals = self.fcx.inh.locals.borrow_mut();\n+                    locals.get().insert(nid, typ);\n                 }\n             }\n     }\n@@ -369,10 +371,13 @@ impl Visitor<()> for GatherLocalsVisitor {\n               _ => Some(self.fcx.to_ty(local.ty))\n             };\n             self.assign(local.id, o_ty);\n-            debug!(\"Local variable {} is assigned type {}\",\n-                   self.fcx.pat_to_str(local.pat),\n-                   self.fcx.infcx().ty_to_str(\n-                       self.fcx.inh.locals.get_copy(&local.id)));\n+            {\n+                let locals = self.fcx.inh.locals.borrow();\n+                debug!(\"Local variable {} is assigned type {}\",\n+                       self.fcx.pat_to_str(local.pat),\n+                       self.fcx.infcx().ty_to_str(\n+                           locals.get().get_copy(&local.id)));\n+            }\n             visit::walk_local(self, local, ());\n \n     }\n@@ -382,10 +387,13 @@ impl Visitor<()> for GatherLocalsVisitor {\n               ast::PatIdent(_, ref path, _)\n                   if pat_util::pat_is_binding(self.fcx.ccx.tcx.def_map, p) => {\n                 self.assign(p.id, None);\n-                debug!(\"Pattern binding {} is assigned to {}\",\n-                       self.tcx.sess.str_of(path.segments[0].identifier),\n-                       self.fcx.infcx().ty_to_str(\n-                           self.fcx.inh.locals.get_copy(&p.id)));\n+                {\n+                    let locals = self.fcx.inh.locals.borrow();\n+                    debug!(\"Pattern binding {} is assigned to {}\",\n+                           self.tcx.sess.str_of(path.segments[0].identifier),\n+                           self.fcx.infcx().ty_to_str(\n+                               locals.get().get_copy(&p.id)));\n+                }\n               }\n               _ => {}\n             }\n@@ -509,9 +517,10 @@ pub fn check_fn(ccx: @CrateCtxt,\n         // Add the self parameter\n         for self_info in opt_self_info.iter() {\n             visit.assign(self_info.self_id, Some(self_info.self_ty));\n+            let locals = fcx.inh.locals.borrow();\n             debug!(\"self is assigned to {}\",\n                    fcx.infcx().ty_to_str(\n-                       fcx.inh.locals.get_copy(&self_info.self_id)));\n+                       locals.get().get_copy(&self_info.self_id)));\n         }\n \n         // Add formal parameters.\n@@ -1079,7 +1088,8 @@ impl FnCtxt {\n     }\n \n     pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> ty::t {\n-        match self.inh.locals.find(&nid) {\n+        let locals = self.inh.locals.borrow();\n+        match locals.get().find(&nid) {\n             Some(&t) => t,\n             None => {\n                 self.tcx().sess.span_bug("}]}