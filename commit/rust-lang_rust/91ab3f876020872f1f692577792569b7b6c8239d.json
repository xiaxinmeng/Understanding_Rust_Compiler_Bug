{"sha": "91ab3f876020872f1f692577792569b7b6c8239d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYWIzZjg3NjAyMDg3MmYxZjY5MjU3Nzc5MjU2OWI3YjZjODIzOWQ=", "commit": {"author": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T17:18:58Z"}, "committer": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T17:18:58Z"}, "message": "Support paths other than \"Some\".", "tree": {"sha": "f8ad0fe2ffc59dce786767cc447eebece9b46282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8ad0fe2ffc59dce786767cc447eebece9b46282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ab3f876020872f1f692577792569b7b6c8239d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ab3f876020872f1f692577792569b7b6c8239d", "html_url": "https://github.com/rust-lang/rust/commit/91ab3f876020872f1f692577792569b7b6c8239d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ab3f876020872f1f692577792569b7b6c8239d/comments", "author": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841a39f865b38041e84cd80840587dbe57d62c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841a39f865b38041e84cd80840587dbe57d62c1", "html_url": "https://github.com/rust-lang/rust/commit/1841a39f865b38041e84cd80840587dbe57d62c1"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "8536b015b3af85e24235ed8a8845b00ef0d1754b", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/91ab3f876020872f1f692577792569b7b6c8239d/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ab3f876020872f1f692577792569b7b6c8239d/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=91ab3f876020872f1f692577792569b7b6c8239d", "patch": "@@ -3,7 +3,7 @@ use std::ops::RangeInclusive;\n use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::replace_children,\n-    ast::{self, edit::IndentLevel, make},\n+    ast::{self, edit::IndentLevel, make, Pat::TupleStructPat},\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n };\n@@ -38,6 +38,21 @@ use crate::{\n pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n+    let mut if_let_ident: Option<String> = None;\n+\n+    // Check if there is an IfLet that we can handle.\n+    match cond.pat() {\n+        None => {} // No IfLet, supported.\n+        Some(TupleStructPat(ref pat)) if pat.args().count() == 1usize => match &pat.path() {\n+            Some(p) => match p.qualifier() {\n+                None => if_let_ident = Some(p.syntax().text().to_string()),\n+                _ => return None,\n+            },\n+            _ => return None,\n+        },\n+        _ => return None, // Unsupported IfLet.\n+    };\n+\n     let expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n     if if_expr.else_branch().is_some() {\n@@ -78,7 +93,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n \n     ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match cond.pat() {\n+        let new_block = match if_let_ident {\n             None => {\n                 // If.\n                 let early_expression = &(early_expression.to_owned() + \";\");\n@@ -109,10 +124,13 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                     &mut new_if_and_then_statements,\n                 )\n             }\n-            _ => {\n+            Some(if_let_ident) => {\n                 // If-let.\n-                let new_match_expr =\n-                    if_indent_level.increase_indent(make::let_match_early(expr, early_expression));\n+                let new_match_expr = if_indent_level.increase_indent(make::let_match_early(\n+                    expr,\n+                    &if_let_ident,\n+                    early_expression,\n+                ));\n                 let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n                 let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n                 let end_of_then =\n@@ -128,15 +146,14 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                         .skip(1)\n                         .take_while(|i| *i != end_of_then),\n                 );\n-                let new_block = replace_children(\n+                replace_children(\n                     &parent_block.syntax(),\n                     RangeInclusive::new(\n                         if_expr.clone().syntax().clone().into(),\n                         if_expr.syntax().clone().into(),\n                     ),\n                     &mut then_statements,\n-                );\n-                new_block\n+                )\n             }\n         };\n         edit.target(if_expr.syntax().text_range());\n@@ -211,6 +228,37 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn convert_let_ok_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                if<|> let Ok(n) = n {\n+                    foo(n);\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                le<|>t n = match n {\n+                    Ok(it) => it,\n+                    None => return,\n+                };\n+                foo(n);\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn convert_inside_while() {\n         check_assist("}, {"sha": "95062ef6c467a92829924e02d6563540a6cb616f", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91ab3f876020872f1f692577792569b7b6c8239d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ab3f876020872f1f692577792569b7b6c8239d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=91ab3f876020872f1f692577792569b7b6c8239d", "patch": "@@ -110,14 +110,15 @@ pub fn match_arm_list(arms: impl Iterator<Item = ast::MatchArm>) -> ast::MatchAr\n     }\n }\n \n-pub fn let_match_early(expr: ast::Expr, early_expression: &str) -> ast::LetStmt {\n+pub fn let_match_early(expr: ast::Expr, path: &str, early_expression: &str) -> ast::LetStmt {\n     return from_text(&format!(\n         r#\"let {} = match {} {{\n-    Some(it) => it,\n+    {}(it) => it,\n     None => {},\n }};\"#,\n         expr.syntax().text(),\n         expr.syntax().text(),\n+        path,\n         early_expression\n     ));\n "}]}