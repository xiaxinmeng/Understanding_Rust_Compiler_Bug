{"sha": "3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNWFhZGMzNTBjMDE2Y2RjZmJhMmVhYWFhNGM0ZmYxNDFkZGRhYjU=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T21:11:59Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:49:41Z"}, "message": "Remove unnecessary data from ConstantValue/ConstantRange", "tree": {"sha": "dd604d6ccd14283ce8d56788135e2c29cd37c5fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd604d6ccd14283ce8d56788135e2c29cd37c5fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5", "html_url": "https://github.com/rust-lang/rust/commit/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "url": "https://api.github.com/repos/rust-lang/rust/commits/f674f89e93c4ae7a8ce315468d3e05b86e92ef24", "html_url": "https://github.com/rust-lang/rust/commit/f674f89e93c4ae7a8ce315468d3e05b86e92ef24"}], "stats": {"total": 52, "additions": 14, "deletions": 38}, "files": [{"sha": "ee5af95152248db599296c8f507e9152fe14ad28", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3e5aadc350c016cdcfba2eaaaa4c4ff141dddab5", "patch": "@@ -582,19 +582,19 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n enum Constructor<'tcx> {\n     /// The constructor of all patterns that don't vary by constructor,\n     /// e.g., struct patterns and fixed-length arrays.\n     Single,\n     /// Enum variants.\n     Variant(DefId),\n     /// Literal values.\n-    ConstantValue(&'tcx ty::Const<'tcx>, Span),\n+    ConstantValue(&'tcx ty::Const<'tcx>),\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange<'tcx>),\n     /// Ranges of non-integer literal values (`2.0..=5.2`).\n-    ConstantRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, Ty<'tcx>, RangeEnd, Span),\n+    ConstantRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),\n     /// Array patterns of length `n`.\n     FixedLenSlice(u64),\n     /// Slice patterns. Captures any array constructor of `length >= i + j`.\n@@ -603,29 +603,6 @@ enum Constructor<'tcx> {\n     NonExhaustive,\n }\n \n-// Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n-impl<'tcx> std::cmp::PartialEq for Constructor<'tcx> {\n-    fn eq(&self, other: &Self) -> bool {\n-        match (self, other) {\n-            (Constructor::Single, Constructor::Single) => true,\n-            (Constructor::NonExhaustive, Constructor::NonExhaustive) => true,\n-            (Constructor::Variant(a), Constructor::Variant(b)) => a == b,\n-            (Constructor::ConstantValue(a, _), Constructor::ConstantValue(b, _)) => a == b,\n-            (\n-                Constructor::ConstantRange(a_start, a_end, a_ty, a_range_end, _),\n-                Constructor::ConstantRange(b_start, b_end, b_ty, b_range_end, _),\n-            ) => a_start == b_start && a_end == b_end && a_ty == b_ty && a_range_end == b_range_end,\n-            (Constructor::IntRange(a), Constructor::IntRange(b)) => a == b,\n-            (Constructor::FixedLenSlice(a), Constructor::FixedLenSlice(b)) => a == b,\n-            (\n-                Constructor::VarLenSlice(a_prefix, a_suffix),\n-                Constructor::VarLenSlice(b_prefix, b_suffix),\n-            ) => a_prefix == b_prefix && a_suffix == b_suffix,\n-            _ => false,\n-        }\n-    }\n-}\n-\n impl<'tcx> Constructor<'tcx> {\n     fn is_slice(&self) -> bool {\n         match self {\n@@ -652,7 +629,7 @@ impl<'tcx> Constructor<'tcx> {\n                 assert!(!adt.is_enum());\n                 VariantIdx::new(0)\n             }\n-            ConstantValue(c, _) => crate::const_eval::const_variant_index(cx.tcx, cx.param_env, c),\n+            ConstantValue(c) => crate::const_eval::const_variant_index(cx.tcx, cx.param_env, c),\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt),\n         }\n     }\n@@ -938,8 +915,8 @@ impl<'tcx> Constructor<'tcx> {\n                 let wild = Pat::wildcard_from_ty(ty);\n                 PatKind::Slice { prefix, slice: Some(wild), suffix }\n             }\n-            &ConstantValue(value, _) => PatKind::Constant { value },\n-            &ConstantRange(lo, hi, _, end, _) => PatKind::Range(PatRange { lo, hi, end }),\n+            &ConstantValue(value) => PatKind::Constant { value },\n+            &ConstantRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n             IntRange(range) => {\n                 return range.to_pat(cx.tcx);\n             }\n@@ -1148,10 +1125,9 @@ fn all_constructors<'a, 'tcx>(\n         )\n     };\n     match pcx.ty.kind {\n-        ty::Bool => [true, false]\n-            .iter()\n-            .map(|&b| ConstantValue(ty::Const::from_bool(cx.tcx, b), pcx.span))\n-            .collect(),\n+        ty::Bool => {\n+            [true, false].iter().map(|&b| ConstantValue(ty::Const::from_bool(cx.tcx, b))).collect()\n+        }\n         ty::Array(ref sub_ty, len) if len.try_eval_usize(cx.tcx, cx.param_env).is_some() => {\n             let len = len.eval_usize(cx.tcx, cx.param_env);\n             if len != 0 && cx.is_uninhabited(sub_ty) { vec![] } else { vec![FixedLenSlice(len)] }\n@@ -1721,7 +1697,7 @@ fn pat_constructor<'tcx>(\n             if let Some(int_range) = IntRange::from_const(tcx, param_env, value, pat.span) {\n                 Some(IntRange(int_range))\n             } else {\n-                Some(ConstantValue(value, pat.span))\n+                Some(ConstantValue(value))\n             }\n         }\n         PatKind::Range(PatRange { lo, hi, end }) => {\n@@ -1736,7 +1712,7 @@ fn pat_constructor<'tcx>(\n             ) {\n                 Some(IntRange(int_range))\n             } else {\n-                Some(ConstantRange(lo, hi, ty, end, pat.span))\n+                Some(ConstantRange(lo, hi, end))\n             }\n         }\n         PatKind::Array { .. } => match pat.ty.kind {\n@@ -2134,8 +2110,8 @@ fn constructor_covered_by_range<'tcx>(\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     let (ctor_from, ctor_to, ctor_end) = match *ctor {\n-        ConstantValue(value, _) => (value, value, RangeEnd::Included),\n-        ConstantRange(from, to, _, ctor_end, _) => (from, to, ctor_end),\n+        ConstantValue(value) => (value, value, RangeEnd::Included),\n+        ConstantRange(from, to, ctor_end) => (from, to, ctor_end),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", ctor),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);\n@@ -2331,7 +2307,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                     None\n                 }\n             }\n-            ConstantValue(cv, _) => {\n+            ConstantValue(cv) => {\n                 match slice_pat_covered_by_const(\n                     cx.tcx,\n                     pat.span,"}]}