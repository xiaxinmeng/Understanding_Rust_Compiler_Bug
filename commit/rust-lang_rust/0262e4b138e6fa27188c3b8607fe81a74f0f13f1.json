{"sha": "0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjJlNGIxMzhlNmZhMjcxODhjM2I4NjA3ZmU4MWE3NGYwZjEzZjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-19T19:55:40Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-19T22:59:24Z"}, "message": "use range assert when loading enum discriminant\n\nCloses #4924", "tree": {"sha": "2f61dadd253af047a0bbca6e9bb80c136607a7a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f61dadd253af047a0bbca6e9bb80c136607a7a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "html_url": "https://github.com/rust-lang/rust/commit/0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1171a214a633128bbbd067bd0e582f8b40172e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/1171a214a633128bbbd067bd0e582f8b40172e01", "html_url": "https://github.com/rust-lang/rust/commit/1171a214a633128bbbd067bd0e582f8b40172e01"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "694cfb94e962c394ad2c224e86c1b0d34efa85e5", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "patch": "@@ -184,6 +184,15 @@ pub enum FileType {\n     ObjectFile = 1\n }\n \n+pub enum Metadata {\n+    MD_dbg = 0,\n+    MD_tbaa = 1,\n+    MD_prof = 2,\n+    MD_fpmath = 3,\n+    MD_range = 4,\n+    MD_tbaa_struct = 5\n+}\n+\n // Opaque pointer types\n pub enum Module_opaque {}\n pub type ModuleRef = *Module_opaque;"}, {"sha": "46aed07c66dc29e107cf2d01c5ba51037dc09420", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "patch": "@@ -1361,13 +1361,34 @@ pub fn compile_submatch(bcx: block,\n     if opts.len() > 0u {\n         match opts[0] {\n             var(_, vdef) => {\n-                if (*ty::enum_variants(tcx, vdef.enm)).len() == 1u {\n+                let variants = ty::enum_variants(tcx, vdef.enm);\n+                if variants.len() == 1 {\n                     kind = single;\n                 } else {\n                     let enumptr =\n                         PointerCast(bcx, val, T_opaque_enum_ptr(ccx));\n                     let discrimptr = GEPi(bcx, enumptr, [0u, 0u]);\n-                    test_val = Load(bcx, discrimptr);\n+\n+                    let mut min_discrim = variants[0].disr_val;\n+                    for uint::range(1, variants.len()) |idx| {\n+                        if variants[idx].disr_val < min_discrim {\n+                            min_discrim = variants[idx].disr_val;\n+                        }\n+                    }\n+\n+                    let mut max_discrim = variants[0].disr_val;\n+                    for uint::range(1, variants.len()) |idx| {\n+                        if variants[idx].disr_val > max_discrim {\n+                            max_discrim = variants[idx].disr_val;\n+                        }\n+                    }\n+\n+                    test_val = LoadRangeAssert(bcx, discrimptr,\n+                                               min_discrim as c_ulonglong,\n+                                               (max_discrim + 1)\n+                                               as c_ulonglong,\n+                                               lib::llvm::True);\n+\n                     kind = switch;\n                 }\n             }"}, {"sha": "671f92624e1358bc6666f3649abe696297ee7bc1", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262e4b138e6fa27188c3b8607fe81a74f0f13f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=0262e4b138e6fa27188c3b8607fe81a74f0f13f1", "patch": "@@ -14,7 +14,7 @@ use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use libc::{c_uint, c_int};\n+use libc::{c_uint, c_int, c_ulonglong};\n use middle::trans::common::*;\n \n use core::cast::transmute;\n@@ -536,6 +536,27 @@ pub fn Load(cx: block, PointerVal: ValueRef) -> ValueRef {\n     }\n }\n \n+pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n+                       hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n+    let value = Load(cx, PointerVal);\n+\n+    let ccx = cx.fcx.ccx;\n+    let ty = val_ty(PointerVal);\n+    unsafe {\n+        assert llvm::LLVMGetTypeKind(ty) != lib::llvm::Array;\n+\n+        let min = llvm::LLVMConstInt(ccx.int_type, lo, signed);\n+        let max = llvm::LLVMConstInt(ccx.int_type, hi, signed);\n+\n+        do vec::as_imm_buf([min, max]) |ptr, len| {\n+            llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n+                                  llvm::LLVMMDNode(ptr, len as c_uint));\n+        }\n+    }\n+\n+    value\n+}\n+\n pub fn Store(cx: block, Val: ValueRef, Ptr: ValueRef) {\n     unsafe {\n         if cx.unreachable { return; }"}]}