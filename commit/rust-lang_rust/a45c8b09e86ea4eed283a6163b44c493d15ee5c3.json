{"sha": "a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NWM4YjA5ZTg2ZWE0ZWVkMjgzYTYxNjNiNDRjNDkzZDE1ZWU1YzM=", "commit": {"author": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-11T00:18:36Z"}, "committer": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-11T00:18:36Z"}, "message": "Use LocalKey::try_with in std", "tree": {"sha": "22a055157f249feb88774d567f1901fd7d09068c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a055157f249feb88774d567f1901fd7d09068c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE4PWe0/2fDR3tomkkxB9lBMEWQgkFAllkGVwACgkQxB9lBMEW\nQgnsQgf8CVlZkLfKB6adjrXdF22S26jkRX3NvhpSxJvc05B0EGOLzBKr23194EeM\nkk5tP+PeD+exECFv5ik7ZRAPlWhNyC1oUb4b+TBgAf/OxObJPIGwPWTgG63r7SUR\nzwiPlPHj9AkasU0m416v5oAvZaFvKiBxIKJqC/BG5U5U58UCpQIHMoaQ/kbJumB+\nQw8Ur/S1cZyHFuK859t6YJ8vZYBaTPsHT/laHaW8mxcGIY3vzeAKa6NLr3YwttBX\nhqKl1YhwjN7fCjeT7AsfrAZ5897JqRoMgSFQ7H3r7NQNvCLOGyki3lw13Z7DmyyH\nUba2qyQVD2/0AkKG2lz+zV8d/ebVhA==\n=OPtq\n-----END PGP SIGNATURE-----", "payload": "tree 22a055157f249feb88774d567f1901fd7d09068c\nparent 32ae12b3d1062babf4f052db42c649e30b11673a\nauthor Lee Bousfield <ljbousfield@gmail.com> 1499732316 -0400\ncommitter Lee Bousfield <ljbousfield@gmail.com> 1499732316 -0400\n\nUse LocalKey::try_with in std\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "html_url": "https://github.com/rust-lang/rust/commit/a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a45c8b09e86ea4eed283a6163b44c493d15ee5c3/comments", "author": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ae12b3d1062babf4f052db42c649e30b11673a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ae12b3d1062babf4f052db42c649e30b11673a", "html_url": "https://github.com/rust-lang/rust/commit/32ae12b3d1062babf4f052db42c649e30b11673a"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "d71fa1334541f7fea6a0b70028ef80c4e18f4a5c", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a45c8b09e86ea4eed283a6163b44c493d15ee5c3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45c8b09e86ea4eed283a6163b44c493d15ee5c3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "patch": "@@ -17,7 +17,7 @@ use io::{self, Initializer, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::{LocalKey, LocalKeyState};\n+use thread::LocalKey;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -674,20 +674,14 @@ fn print_to<T>(args: fmt::Arguments,\n                local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n                global_s: fn() -> T,\n                label: &str) where T: Write {\n-    let result = match local_s.state() {\n-        LocalKeyState::Uninitialized |\n-        LocalKeyState::Destroyed => global_s().write_fmt(args),\n-        LocalKeyState::Valid => {\n-            local_s.with(|s| {\n-                if let Ok(mut borrowed) = s.try_borrow_mut() {\n-                    if let Some(w) = borrowed.as_mut() {\n-                        return w.write_fmt(args);\n-                    }\n-                }\n-                global_s().write_fmt(args)\n-            })\n+    let result = local_s.try_with(|s| {\n+        if let Ok(mut borrowed) = s.try_borrow_mut() {\n+            if let Some(w) = borrowed.as_mut() {\n+                return w.write_fmt(args);\n+            }\n         }\n-    };\n+        global_s().write_fmt(args)\n+    }).unwrap_or_else(|_| global_s().write_fmt(args));\n     if let Err(e) = result {\n         panic!(\"failed printing to {}: {}\", label, e);\n     }"}, {"sha": "2abb8afa82848a5a8db1cddbc8c4c61589b06ba9", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a45c8b09e86ea4eed283a6163b44c493d15ee5c3/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45c8b09e86ea4eed283a6163b44c493d15ee5c3/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=a45c8b09e86ea4eed283a6163b44c493d15ee5c3", "patch": "@@ -12,7 +12,6 @@\n \n use cell::RefCell;\n use thread::Thread;\n-use thread::LocalKeyState;\n \n struct ThreadInfo {\n     stack_guard: Option<usize>,\n@@ -23,19 +22,15 @@ thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(N\n \n impl ThreadInfo {\n     fn with<R, F>(f: F) -> Option<R> where F: FnOnce(&mut ThreadInfo) -> R {\n-        if THREAD_INFO.state() == LocalKeyState::Destroyed {\n-            return None\n-        }\n-\n-        THREAD_INFO.with(move |c| {\n+        THREAD_INFO.try_with(move |c| {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_guard: None,\n                     thread: Thread::new(None),\n                 })\n             }\n-            Some(f(c.borrow_mut().as_mut().unwrap()))\n-        })\n+            f(c.borrow_mut().as_mut().unwrap())\n+        }).ok()\n     }\n }\n "}]}