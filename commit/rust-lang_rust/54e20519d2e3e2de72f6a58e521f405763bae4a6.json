{"sha": "54e20519d2e3e2de72f6a58e521f405763bae4a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZTIwNTE5ZDJlM2UyZGU3MmY2YTU4ZTUyMWY0MDU3NjNiYWU0YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-15T09:43:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-15T09:43:29Z"}, "message": "Auto merge of #3886 - phansch:rustfix_useless_asref, r=flip1995\n\nEnable rustfix for `useless_asref` lint tests\n\ncc #3630", "tree": {"sha": "4985ce63c9208f7043b3ef1ce0f864f134047e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4985ce63c9208f7043b3ef1ce0f864f134047e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54e20519d2e3e2de72f6a58e521f405763bae4a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54e20519d2e3e2de72f6a58e521f405763bae4a6", "html_url": "https://github.com/rust-lang/rust/commit/54e20519d2e3e2de72f6a58e521f405763bae4a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54e20519d2e3e2de72f6a58e521f405763bae4a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7806413c6f00adc0716721945466b5bb823af7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7806413c6f00adc0716721945466b5bb823af7f", "html_url": "https://github.com/rust-lang/rust/commit/e7806413c6f00adc0716721945466b5bb823af7f"}, {"sha": "0019ca5e4f3a676d3534ead8c0e206e6b19092bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0019ca5e4f3a676d3534ead8c0e206e6b19092bd", "html_url": "https://github.com/rust-lang/rust/commit/0019ca5e4f3a676d3534ead8c0e206e6b19092bd"}], "stats": {"total": 164, "additions": 152, "deletions": 12}, "files": [{"sha": "c6fce5df210d3c4f73c75f61174ee726258c9959", "filename": "tests/ui/useless_asref.fixed", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.fixed?ref=54e20519d2e3e2de72f6a58e521f405763bae4a6", "patch": "@@ -0,0 +1,136 @@\n+// run-rustfix\n+\n+#![deny(clippy::useless_asref)]\n+#![allow(clippy::trivially_copy_pass_by_ref)]\n+\n+use std::fmt::Debug;\n+\n+struct FakeAsRef;\n+\n+#[allow(clippy::should_implement_trait)]\n+impl FakeAsRef {\n+    fn as_ref(&self) -> &Self {\n+        self\n+    }\n+}\n+\n+struct MoreRef;\n+\n+impl<'a, 'b, 'c> AsRef<&'a &'b &'c MoreRef> for MoreRef {\n+    fn as_ref(&self) -> &&'a &'b &'c MoreRef {\n+        &&&&MoreRef\n+    }\n+}\n+\n+fn foo_rstr(x: &str) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_rslice(x: &[i32]) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_mrslice(x: &mut [i32]) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_rrrrmr(_: &&&&MoreRef) {\n+    println!(\"so many refs\");\n+}\n+\n+fn not_ok() {\n+    let rstr: &str = \"hello\";\n+    let mut mrslice: &mut [i32] = &mut [1, 2, 3];\n+\n+    {\n+        let rslice: &[i32] = &*mrslice;\n+        foo_rstr(rstr);\n+        foo_rstr(rstr);\n+        foo_rslice(rslice);\n+        foo_rslice(rslice);\n+    }\n+    {\n+        foo_mrslice(mrslice);\n+        foo_mrslice(mrslice);\n+        foo_rslice(mrslice);\n+        foo_rslice(mrslice);\n+    }\n+\n+    {\n+        let rrrrrstr = &&&&rstr;\n+        let rrrrrslice = &&&&&*mrslice;\n+        foo_rslice(rrrrrslice);\n+        foo_rslice(rrrrrslice);\n+        foo_rstr(rrrrrstr);\n+        foo_rstr(rrrrrstr);\n+    }\n+    {\n+        let mrrrrrslice = &mut &mut &mut &mut mrslice;\n+        foo_mrslice(mrrrrrslice);\n+        foo_mrslice(mrrrrrslice);\n+        foo_rslice(mrrrrrslice);\n+        foo_rslice(mrrrrrslice);\n+    }\n+    #[allow(unused_parens, clippy::double_parens)]\n+    foo_rrrrmr((&&&&MoreRef));\n+\n+    generic_not_ok(mrslice);\n+    generic_ok(mrslice);\n+}\n+\n+fn ok() {\n+    let string = \"hello\".to_owned();\n+    let mut arr = [1, 2, 3];\n+    let mut vec = vec![1, 2, 3];\n+\n+    {\n+        foo_rstr(string.as_ref());\n+        foo_rslice(arr.as_ref());\n+        foo_rslice(vec.as_ref());\n+    }\n+    {\n+        foo_mrslice(arr.as_mut());\n+        foo_mrslice(vec.as_mut());\n+    }\n+\n+    {\n+        let rrrrstring = &&&&string;\n+        let rrrrarr = &&&&arr;\n+        let rrrrvec = &&&&vec;\n+        foo_rstr(rrrrstring.as_ref());\n+        foo_rslice(rrrrarr.as_ref());\n+        foo_rslice(rrrrvec.as_ref());\n+    }\n+    {\n+        let mrrrrarr = &mut &mut &mut &mut arr;\n+        let mrrrrvec = &mut &mut &mut &mut vec;\n+        foo_mrslice(mrrrrarr.as_mut());\n+        foo_mrslice(mrrrrvec.as_mut());\n+    }\n+    FakeAsRef.as_ref();\n+    foo_rrrrmr(MoreRef.as_ref());\n+\n+    generic_not_ok(arr.as_mut());\n+    generic_ok(&mut arr);\n+}\n+\n+fn foo_mrt<T: Debug + ?Sized>(t: &mut T) {\n+    println!(\"{:?}\", t);\n+}\n+fn foo_rt<T: Debug + ?Sized>(t: &T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn generic_not_ok<T: AsMut<T> + AsRef<T> + Debug + ?Sized>(mrt: &mut T) {\n+    foo_mrt(mrt);\n+    foo_mrt(mrt);\n+    foo_rt(mrt);\n+    foo_rt(mrt);\n+}\n+\n+fn generic_ok<U: AsMut<T> + AsRef<T> + ?Sized, T: Debug + ?Sized>(mru: &mut U) {\n+    foo_mrt(mru.as_mut());\n+    foo_rt(mru.as_ref());\n+}\n+\n+fn main() {\n+    not_ok();\n+    ok();\n+}"}, {"sha": "1d23760bd1480e4672633da850473c4910db243d", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=54e20519d2e3e2de72f6a58e521f405763bae4a6", "patch": "@@ -1,5 +1,8 @@\n+// run-rustfix\n+\n #![deny(clippy::useless_asref)]\n #![allow(clippy::trivially_copy_pass_by_ref)]\n+\n use std::fmt::Debug;\n \n struct FakeAsRef;\n@@ -65,6 +68,7 @@ fn not_ok() {\n         foo_rslice(mrrrrrslice.as_ref());\n         foo_rslice(mrrrrrslice);\n     }\n+    #[allow(unused_parens, clippy::double_parens)]\n     foo_rrrrmr((&&&&MoreRef).as_ref());\n \n     generic_not_ok(mrslice);"}, {"sha": "dd0613fc767136ee04854ff9b6f47635d1e9ecb4", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54e20519d2e3e2de72f6a58e521f405763bae4a6/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=54e20519d2e3e2de72f6a58e521f405763bae4a6", "patch": "@@ -1,71 +1,71 @@\n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:41:18\n+  --> $DIR/useless_asref.rs:44:18\n    |\n LL |         foo_rstr(rstr.as_ref());\n    |                  ^^^^^^^^^^^^^ help: try this: `rstr`\n    |\n note: lint level defined here\n-  --> $DIR/useless_asref.rs:1:9\n+  --> $DIR/useless_asref.rs:3:9\n    |\n LL | #![deny(clippy::useless_asref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:43:20\n+  --> $DIR/useless_asref.rs:46:20\n    |\n LL |         foo_rslice(rslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^ help: try this: `rslice`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:47:21\n+  --> $DIR/useless_asref.rs:50:21\n    |\n LL |         foo_mrslice(mrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:49:20\n+  --> $DIR/useless_asref.rs:52:20\n    |\n LL |         foo_rslice(mrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:56:20\n+  --> $DIR/useless_asref.rs:59:20\n    |\n LL |         foo_rslice(rrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^ help: try this: `rrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:58:18\n+  --> $DIR/useless_asref.rs:61:18\n    |\n LL |         foo_rstr(rrrrrstr.as_ref());\n    |                  ^^^^^^^^^^^^^^^^^ help: try this: `rrrrrstr`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:63:21\n+  --> $DIR/useless_asref.rs:66:21\n    |\n LL |         foo_mrslice(mrrrrrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:65:20\n+  --> $DIR/useless_asref.rs:68:20\n    |\n LL |         foo_rslice(mrrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:68:16\n+  --> $DIR/useless_asref.rs:72:16\n    |\n LL |     foo_rrrrmr((&&&&MoreRef).as_ref());\n    |                ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&&&&MoreRef)`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:118:13\n+  --> $DIR/useless_asref.rs:122:13\n    |\n LL |     foo_mrt(mrt.as_mut());\n    |             ^^^^^^^^^^^^ help: try this: `mrt`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:120:12\n+  --> $DIR/useless_asref.rs:124:12\n    |\n LL |     foo_rt(mrt.as_ref());\n    |            ^^^^^^^^^^^^ help: try this: `mrt`"}]}