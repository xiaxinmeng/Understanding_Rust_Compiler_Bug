{"sha": "d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "node_id": "C_kwDOAAsO6NoAKGQ0NGNlYzM0NTNjZTE2NDVjMWIxN2I1NGI4ZmJlYzk4OWQ0YWIwZDM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-16T06:59:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T06:59:40Z"}, "message": "Rollup merge of #90819 - JakobDegen:issue-90804, r=petrochenkov\n\nFixes incorrect handling of TraitRefs when emitting suggestions.\n\nCloses #90804 , although there were more issues here that were hidden by the thing that caused this ICE.\n\nUnderlying problem was that substitutions were being thrown out, which not only leads to an ICE but also incorrect diagnostics. On top of that, in some cases the self types from the root obligations were being mixed in with those from derived obligations.\n\nThis makes a couple diagnostics arguable worse (\"`B<C>` does not implement `Copy`\" instead of \"`C` does not implement `Copy`\") but the worse diagnostics are at least still correct and that downside is in my opinion clearly outweighed by the benefits of fixing the ICE and unambiguously wrong diagnostics.", "tree": {"sha": "91dd1bb4de99e3ab2e3b4a8289230a83798ca9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91dd1bb4de99e3ab2e3b4a8289230a83798ca9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhk1bcCRBK7hj4Ov3rIwAA4XoIAF68hZJ2pMJQPxRl728PKr3Z\nSiHayzbb3LkoShO55ANqBZ0LdVhv/gyEc5dGEjJ7OcK1/0YmUGc3KssqEUJl9Ekj\npxHqDbvwJSP3PGMqsVrSiZzXvIDwAbysvGvC46HrKfDArKH636C0d5NESZ7AXLks\nXPRwnOO+KDOCNEVCf3a/OAnafAppy0Ft7OFwgbag5ZoQRjVyNE2xtroLazX37qan\nHtE9NJYiivq2sc5gbfc5+Pl1npJJS8mA/iDU/Js3QiI8eih06MEmdRhRdkGcMfWK\n43KlZ+BofXe1EngRwd0D8ddediDvOKcPDF9GY+ktlrLb0vJjFAX2y3S236ES/yI=\n=Dm3f\n-----END PGP SIGNATURE-----\n", "payload": "tree 91dd1bb4de99e3ab2e3b4a8289230a83798ca9e4\nparent b17de50a4182c1e5df1abec5374a09d28dcb387a\nparent d58d52a39759960009ca2817f7edcdf22d8722df\nauthor Yuki Okushi <jtitor@2k36.org> 1637045980 +0900\ncommitter GitHub <noreply@github.com> 1637045980 +0900\n\nRollup merge of #90819 - JakobDegen:issue-90804, r=petrochenkov\n\nFixes incorrect handling of TraitRefs when emitting suggestions.\n\nCloses #90804 , although there were more issues here that were hidden by the thing that caused this ICE.\n\nUnderlying problem was that substitutions were being thrown out, which not only leads to an ICE but also incorrect diagnostics. On top of that, in some cases the self types from the root obligations were being mixed in with those from derived obligations.\n\nThis makes a couple diagnostics arguable worse (\"`B<C>` does not implement `Copy`\" instead of \"`C` does not implement `Copy`\") but the worse diagnostics are at least still correct and that downside is in my opinion clearly outweighed by the benefits of fixing the ICE and unambiguously wrong diagnostics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "html_url": "https://github.com/rust-lang/rust/commit/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17de50a4182c1e5df1abec5374a09d28dcb387a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17de50a4182c1e5df1abec5374a09d28dcb387a", "html_url": "https://github.com/rust-lang/rust/commit/b17de50a4182c1e5df1abec5374a09d28dcb387a"}, {"sha": "d58d52a39759960009ca2817f7edcdf22d8722df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d58d52a39759960009ca2817f7edcdf22d8722df", "html_url": "https://github.com/rust-lang/rust/commit/d58d52a39759960009ca2817f7edcdf22d8722df"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "0bf01afb575dab54163f53b3862763f2788e79cd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "patch": "@@ -706,36 +706,29 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         let param_env = obligation.param_env;\n-        let trait_ref = poly_trait_ref.skip_binder();\n-\n-        let found_ty = trait_ref.self_ty();\n-        let found_ty_str = found_ty.to_string();\n-        let imm_borrowed_found_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, found_ty);\n-        let imm_substs = self.tcx.mk_substs_trait(imm_borrowed_found_ty, &[]);\n-        let mut_borrowed_found_ty = self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, found_ty);\n-        let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |new_imm_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-                                 new_mut_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-                                 expected_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        let mut try_borrowing = |old_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n                                  blacklist: &[DefId]|\n          -> bool {\n-            if blacklist.contains(&expected_trait_ref.def_id()) {\n+            if blacklist.contains(&old_ref.def_id()) {\n                 return false;\n             }\n \n-            let imm_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                new_imm_trait_ref.without_const().to_predicate(self.tcx),\n-            ));\n-\n-            let mut_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                new_mut_trait_ref.without_const().to_predicate(self.tcx),\n-            ));\n+            let orig_ty = old_ref.self_ty().skip_binder();\n+            let mk_result = |new_ty| {\n+                let new_ref = old_ref.rebind(ty::TraitRef::new(\n+                    old_ref.def_id(),\n+                    self.tcx.mk_substs_trait(new_ty, &old_ref.skip_binder().substs[1..]),\n+                ));\n+                self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                    ObligationCause::dummy(),\n+                    param_env,\n+                    new_ref.without_const().to_predicate(self.tcx),\n+                ))\n+            };\n+            let imm_result = mk_result(self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, orig_ty));\n+            let mut_result = mk_result(self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, orig_ty));\n \n             if imm_result || mut_result {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n@@ -747,8 +740,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n-                        found_ty_str,\n-                        expected_trait_ref.print_only_trait_path(),\n+                        orig_ty.to_string(),\n+                        old_ref.print_only_trait_path(),\n                     );\n                     if has_custom_message {\n                         err.note(&msg);\n@@ -764,7 +757,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span,\n                         &format!(\n                             \"expected an implementor of trait `{}`\",\n-                            expected_trait_ref.print_only_trait_path(),\n+                            old_ref.print_only_trait_path(),\n                         ),\n                     );\n \n@@ -807,21 +800,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         if let ObligationCauseCode::ImplDerivedObligation(obligation) = &*code {\n-            let expected_trait_ref = obligation.parent_trait_ref;\n-            let new_imm_trait_ref = poly_trait_ref\n-                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs));\n-            let new_mut_trait_ref = poly_trait_ref\n-                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs));\n-            return try_borrowing(new_imm_trait_ref, new_mut_trait_ref, expected_trait_ref, &[]);\n+            try_borrowing(obligation.parent_trait_ref, &[])\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n-            return try_borrowing(\n-                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, imm_substs)),\n-                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, mut_substs)),\n-                *poly_trait_ref,\n-                &never_suggest_borrow[..],\n-            );\n+            try_borrowing(*poly_trait_ref, &never_suggest_borrow[..])\n         } else {\n             false\n         }"}, {"sha": "13097edf0adf91cb228caba173023e5342554060", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `C: Copy` is not satisfied\n+error[E0277]: the trait bound `B<C>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n@@ -22,7 +22,7 @@ help: consider borrowing here\n LL |     is_copy(&B { a: 1, b: C });\n    |             +\n \n-error[E0277]: the trait bound `C: Clone` is not satisfied\n+error[E0277]: the trait bound `B<C>: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n@@ -46,7 +46,7 @@ help: consider borrowing here\n LL |     is_clone(&B { a: 1, b: C });\n    |              +\n \n-error[E0277]: the trait bound `D: Copy` is not satisfied\n+error[E0277]: the trait bound `B<D>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });"}, {"sha": "1ab130e0ab1432aa53682b2e763be3b760f090ce", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "patch": "@@ -65,7 +65,7 @@ LL |     is_send(Box::new(TestType));\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: the trait bound `dummy2::TestType: Send` is not satisfied\n+   = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n    = note: required because of the requirements on the impl of `Send` for `Unique<dummy2::TestType>`\n    = note: required because it appears within the type `Box<dummy2::TestType>`\n note: required by a bound in `is_send`\n@@ -104,11 +104,11 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL |     is_sync(Outer2(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Sync`\n+   |     ------- ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: the trait bound `main::TestType: Sync` is not satisfied\n+   = help: the trait `Send` is not implemented for `main::TestType`\n note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`\n   --> $DIR/negated-auto-traits-error.rs:14:22\n    |\n@@ -119,12 +119,6 @@ note: required by a bound in `is_sync`\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |               ^^^^ required by this bound in `is_sync`\n-help: consider borrowing here\n-   |\n-LL |     is_sync(&Outer2(TestType));\n-   |             +\n-LL |     is_sync(&mut Outer2(TestType));\n-   |             ++++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f891a42fc2af059ae090f846d8dfd0b794031c6e", "filename": "src/test/ui/typeck/issue-90804-incorrect-reference-suggestion.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs?ref=d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "patch": "@@ -0,0 +1,11 @@\n+// Do not suggest referencing the parameter to `check`\n+\n+trait Marker<T> {}\n+\n+impl<T> Marker<i32> for T {}\n+\n+pub fn check<T: Marker<u32>>(_: T) {}\n+\n+pub fn main() {\n+    check::<()>(()); //~ ERROR [E0277]\n+}"}, {"sha": "08eab0253701e2a8c654dc170211a60d0b4b65fb", "filename": "src/test/ui/typeck/issue-90804-incorrect-reference-suggestion.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44cec3453ce1645c1b17b54b8fbec989d4ab0d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr?ref=d44cec3453ce1645c1b17b54b8fbec989d4ab0d3", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `(): Marker<u32>` is not satisfied\n+  --> $DIR/issue-90804-incorrect-reference-suggestion.rs:10:17\n+   |\n+LL |     check::<()>(());\n+   |     ----------- ^^ the trait `Marker<u32>` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/issue-90804-incorrect-reference-suggestion.rs:7:17\n+   |\n+LL | pub fn check<T: Marker<u32>>(_: T) {}\n+   |                 ^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}