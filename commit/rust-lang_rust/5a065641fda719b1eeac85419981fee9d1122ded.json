{"sha": "5a065641fda719b1eeac85419981fee9d1122ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDY1NjQxZmRhNzE5YjFlZWFjODU0MTk5ODFmZWU5ZDExMjJkZWQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-15T15:09:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-09T04:49:33Z"}, "message": "Add checkup for return statement outside of a function", "tree": {"sha": "ade1619ebb090f0b0228b18367c8259120df87e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade1619ebb090f0b0228b18367c8259120df87e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a065641fda719b1eeac85419981fee9d1122ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a065641fda719b1eeac85419981fee9d1122ded", "html_url": "https://github.com/rust-lang/rust/commit/5a065641fda719b1eeac85419981fee9d1122ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a065641fda719b1eeac85419981fee9d1122ded/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7537f953e2d28dc0f34ab39737b058e7b79a7fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7537f953e2d28dc0f34ab39737b058e7b79a7fb7", "html_url": "https://github.com/rust-lang/rust/commit/7537f953e2d28dc0f34ab39737b058e7b79a7fb7"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "21b0b5e62901201a4e04098b6abcc453e3ecf235", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=5a065641fda719b1eeac85419981fee9d1122ded", "patch": "@@ -376,7 +376,8 @@ fn compare_predicate_entailment<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 &infcx.parameter_environment.caller_bounds);\n             infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n         } else {\n-            let fcx = FnCtxt::new(&inh, tcx.types.err, impl_m_body_id);\n+            let mut fcx = FnCtxt::new(&inh, impl_m_body_id);\n+            fcx.ret_ty = Some(tcx.types.err);\n             fcx.regionck_item(impl_m_body_id, impl_m_span, &[]);\n         }\n "}, {"sha": "755ea718f89574920ddf094b83666c8dd5357a7c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a065641fda719b1eeac85419981fee9d1122ded", "patch": "@@ -451,7 +451,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // expects the types within the function to be consistent.\n     err_count_on_creation: usize,\n \n-    ret_ty: Ty<'tcx>,\n+    ret_ty: Option<Ty<'tcx>>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -785,11 +785,12 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Create the function context.  This is either derived from scratch or,\n     // in the case of function expressions, based on the outer context.\n-    let mut fcx = FnCtxt::new(inherited, fn_sig.output(), body.id);\n+    let mut fcx = FnCtxt::new(inherited, body.id);\n+    let ret_ty = fn_sig.output();\n     *fcx.ps.borrow_mut() = UnsafetyState::function(unsafety, unsafety_id);\n \n-    fcx.require_type_is_sized(fcx.ret_ty, decl.output.span(), traits::ReturnType);\n-    fcx.ret_ty = fcx.instantiate_anon_types(&fcx.ret_ty);\n+    fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::ReturnType);\n+    fcx.ret_ty = fcx.instantiate_anon_types(&ret_ty);\n     fn_sig = fcx.tcx.mk_fn_sig(fn_sig.inputs().iter().cloned(), &fcx.ret_ty, fn_sig.variadic);\n \n     {\n@@ -821,7 +822,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     inherited.tables.borrow_mut().liberated_fn_sigs.insert(fn_id, fn_sig);\n \n-    fcx.check_expr_coercable_to_type(body, fcx.ret_ty);\n+    fcx.check_expr_coercable_to_type(body, fcx.ret_ty.unwrap());\n \n     fcx\n }\n@@ -1245,7 +1246,7 @@ fn check_const_with_type<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n                                    expected_type: Ty<'tcx>,\n                                    id: ast::NodeId) {\n     ccx.inherited(id).enter(|inh| {\n-        let fcx = FnCtxt::new(&inh, expected_type, expr.id);\n+        let fcx = FnCtxt::new(&inh, expr.id);\n         fcx.require_type_is_sized(expected_type, expr.span, traits::ConstSized);\n \n         // Gather locals in statics (because of block expressions).\n@@ -1530,15 +1531,14 @@ enum TupleArgumentsFlag {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n-               rty: Ty<'tcx>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             body_id: body_id,\n             writeback_errors: Cell::new(false),\n             err_count_on_creation: inh.tcx.sess.err_count(),\n-            ret_ty: rty,\n+            ret_ty: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n@@ -3705,14 +3705,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprAgain(_) => { tcx.types.never }\n           hir::ExprRet(ref expr_opt) => {\n-            if let Some(ref e) = *expr_opt {\n-                self.check_expr_coercable_to_type(&e, self.ret_ty);\n+            if self.ret_ty.is_none() {\n+                struct_span_err!(self.tcx.sess, expr.span, E0571,\n+                                 \"return statement cannot be out of a function scope\").emit();\n+            } else if let Some(ref e) = *expr_opt {\n+                self.check_expr_coercable_to_type(&e, self.ret_ty.unwrap());\n             } else {\n                 match self.eq_types(false,\n                                     &self.misc(expr.span),\n-                                    self.ret_ty,\n-                                    tcx.mk_nil())\n-                {\n+                                    self.ret_ty.unwrap(),\n+                                    tcx.mk_nil()) {\n                     Ok(ok) => self.register_infer_ok_obligations(ok),\n                     Err(_) => {\n                         struct_span_err!(tcx.sess, expr.span, E0069,"}, {"sha": "6942bb0934c4afd5f8b8ae30906aa62bd4427e28", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5a065641fda719b1eeac85419981fee9d1122ded", "patch": "@@ -51,7 +51,8 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let id = self.id;\n         let span = self.span;\n         self.inherited.enter(|inh| {\n-            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.types.never, id);\n+            let mut fcx = FnCtxt::new(&inh, id);\n+            fcx.ret_ty = Some(inh.ccx.tcx.types.never);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 ccx: fcx.ccx,\n                 code: code"}, {"sha": "65b606b45823c1ef75484f84cd725fcfb185f06e", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a065641fda719b1eeac85419981fee9d1122ded/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5a065641fda719b1eeac85419981fee9d1122ded", "patch": "@@ -4164,6 +4164,34 @@ target / ABI combination is currently unsupported by llvm.\n If necessary, you can circumvent this check using custom target specifications.\n \"##,\n \n+E0571: r##\"\n+A return statement was outside a function scope.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0571\n+const FOO: u32 = return 0; // error: return statement cannot be out of a\n+                           //        function scope\n+\n+fn main() {}\n+```\n+\n+To fix this issue, just remove the return statement or move it into a function\n+scope. Example:\n+\n+```\n+const FOO: u32 = 0;\n+\n+fn some_fn() -> i32 {\n+    return FOO;\n+}\n+\n+fn main() {\n+    some_fn();\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}]}