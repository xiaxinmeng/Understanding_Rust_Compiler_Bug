{"sha": "4b2e553dac205609277607b3a192cc7fc905fc2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMmU1NTNkYWMyMDU2MDkyNzc2MDdiM2ExOTJjYzdmYzkwNWZjMmM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-26T11:17:33Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-26T12:51:32Z"}, "message": "integrate the edition code.\n\nAs a driveby change, I made `#![feature(nll)]` *always* take\nprecedence over `-Z borrowck`.  The main effect this had is that it\nmeans tests with `#![feature(nll)]` will ignore uses of `-Z\nborrowck=compare`. This affected only one test as far as I can tell,\nand I think that test used `-Z borrowck=compare` only as a historical\naccident.", "tree": {"sha": "2357370dec9e27cb3ea6bab89739bc97cfaf96df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2357370dec9e27cb3ea6bab89739bc97cfaf96df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2e553dac205609277607b3a192cc7fc905fc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2e553dac205609277607b3a192cc7fc905fc2c", "html_url": "https://github.com/rust-lang/rust/commit/4b2e553dac205609277607b3a192cc7fc905fc2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2e553dac205609277607b3a192cc7fc905fc2c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a59dafe1198b9f36d7c72e536f5d57495de1b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a59dafe1198b9f36d7c72e536f5d57495de1b9d", "html_url": "https://github.com/rust-lang/rust/commit/1a59dafe1198b9f36d7c72e536f5d57495de1b9d"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "98568f860a4fdd62ee33a4728de581a85a31612e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4b2e553dac205609277607b3a192cc7fc905fc2c", "patch": "@@ -74,6 +74,7 @@ use rustc_target::spec::abi;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n use syntax::codemap::MultiSpan;\n+use syntax::edition::Edition;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n@@ -1403,34 +1404,51 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// What mode(s) of borrowck should we run? AST? MIR? both?\n     /// (Also considers the `#![feature(nll)]` setting.)\n     pub fn borrowck_mode(&self) -> BorrowckMode {\n+        // Here are the main constraints we need to deal with:\n+        //\n+        // 1. An opts.borrowck_mode of `BorrowckMode::Ast` is\n+        //    synonymous with no `-Z borrowck=...` flag at all.\n+        //    (This is arguably a historical accident.)\n+        //\n+        // 2. `BorrowckMode::Migrate` is the limited migration to\n+        //    NLL that we are deploying with the 2018 edition.\n+        //\n+        // 3. We want to allow developers on the Nightly channel\n+        //    to opt back into the \"hard error\" mode for NLL,\n+        //    (which they can do via specifying `#![feature(nll)]`\n+        //    explicitly in their crate).\n+        //\n+        // So, this precedence list is how pnkfelix chose to work with\n+        // the above constraints:\n+        //\n+        // * `#![feature(nll)]` *always* means use NLL with hard\n+        //   errors. (To simplify the code here, it now even overrides\n+        //   a user's attempt to specify `-Z borrowck=compare`, which\n+        //   we arguably do not need anymore and should remove.)\n+        //\n+        // * Otherwise, if no `-Z borrowck=...` flag was given (or\n+        //   if `borrowck=ast` was specified), then use the default\n+        //   as required by the edition.\n+        //\n+        // * Otherwise, use the behavior requested via `-Z borrowck=...`\n+\n+        if self.features().nll { return BorrowckMode::Mir; }\n+\n         match self.sess.opts.borrowck_mode {\n             mode @ BorrowckMode::Mir |\n-            mode @ BorrowckMode::Compare => mode,\n-\n-            // `BorrowckMode::Ast` is synonymous with no `-Z\n-            // borrowck=...` flag at all. Therefore, we definitely\n-            // want `#![feature(nll)]` to override it.\n-            mode @ BorrowckMode::Ast => {\n-                if self.features().nll {\n-                    BorrowckMode::Mir\n-                } else {\n-                    mode\n-                }\n-            }\n-\n-            // `BorrowckMode::Migrate` is modelling the behavior one\n-            // will eventually specify via `--edition 2018`. We want\n-            // to allow developers on the Nightly channel to opt back\n-            // into the \"hard error\" mode for NLL, which they can do\n-            // via specifying `#![feature(nll)]` explicitly in their\n-            // crate.\n-            mode @ BorrowckMode::Migrate => {\n-                if self.features().nll {\n-                    BorrowckMode::Mir\n-                } else {\n-                    mode\n-                }\n-            }\n+            mode @ BorrowckMode::Compare |\n+            mode @ BorrowckMode::Migrate => mode,\n+\n+            BorrowckMode::Ast => match self.sess.edition() {\n+                Edition::Edition2015 => BorrowckMode::Ast,\n+                Edition::Edition2018 => BorrowckMode::Migrate,\n+\n+                // For now, future editions mean Migrate. (But it\n+                // would make a lot of sense for it to be changed to\n+                // `BorrowckMode::Mir`, depending on how we plan to\n+                // time the forcing of full migration to NLL.)\n+                _ => BorrowckMode::Migrate,\n+            },\n         }\n     }\n "}, {"sha": "fdfe9e2c562e0395d6d8e9726e97351c91a73182", "filename": "src/test/ui/generator/generator-with-nll.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs?ref=4b2e553dac205609277607b3a192cc7fc905fc2c", "patch": "@@ -8,17 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z borrowck=compare\n-\n #![feature(generators)]\n #![feature(nll)]\n \n fn main() {\n     || {\n         // The reference in `_a` is a Legal with NLL since it ends before the yield\n-        let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-        let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-        //~^ borrow may still be in use when generator yields (Mir)\n+        let _a = &mut true;\n+        let b = &mut true;\n+        //~^ borrow may still be in use when generator yields\n         yield ();\n         println!(\"{}\", b);\n     };"}, {"sha": "1dc663d8bcbf7f1ea4ba4687a0bd99c2c7ef1671", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b2e553dac205609277607b3a192cc7fc905fc2c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=4b2e553dac205609277607b3a192cc7fc905fc2c", "patch": "@@ -1,30 +1,12 @@\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/generator-with-nll.rs:19:23\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/generator-with-nll.rs:18:17\n    |\n-LL |         let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                       ^^^^\n-...\n-LL |         yield ();\n-   |         -------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/generator-with-nll.rs:20:22\n-   |\n-LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                      ^^^^\n-LL |         //~^ borrow may still be in use when generator yields (Mir)\n-LL |         yield ();\n-   |         -------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/generator-with-nll.rs:20:17\n-   |\n-LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+LL |         let b = &mut true;\n    |                 ^^^^^^^^^\n-LL |         //~^ borrow may still be in use when generator yields (Mir)\n+LL |         //~^ borrow may still be in use when generator yields\n LL |         yield ();\n    |         -------- possible yield occurs here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0626`."}]}