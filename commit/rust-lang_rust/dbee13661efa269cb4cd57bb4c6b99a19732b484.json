{"sha": "dbee13661efa269cb4cd57bb4c6b99a19732b484", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWUxMzY2MWVmYTI2OWNiNGNkNTdiYjRjNmI5OWExOTczMmI0ODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T11:48:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T11:48:19Z"}, "message": "Rustfmt", "tree": {"sha": "3c54302d06da4cf99cbc0e2429fbab66851d4910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c54302d06da4cf99cbc0e2429fbab66851d4910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbee13661efa269cb4cd57bb4c6b99a19732b484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbee13661efa269cb4cd57bb4c6b99a19732b484", "html_url": "https://github.com/rust-lang/rust/commit/dbee13661efa269cb4cd57bb4c6b99a19732b484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbee13661efa269cb4cd57bb4c6b99a19732b484/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b32489e7224eea5fc5ebc388732efa10c510fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b32489e7224eea5fc5ebc388732efa10c510fb2", "html_url": "https://github.com/rust-lang/rust/commit/5b32489e7224eea5fc5ebc388732efa10c510fb2"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "34c9561d6762287a6113ee700e4042e6041b4352", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dbee13661efa269cb4cd57bb4c6b99a19732b484", "patch": "@@ -144,9 +144,11 @@ pub(crate) fn codegen_fn<'tcx>(\n \n     if let Some(mach_compile_result) = &context.mach_compile_result {\n         if let Some(disasm) = &mach_compile_result.disasm {\n-            crate::pretty_clif::write_ir_file(tcx, &format!(\"{}.vcode\", tcx.symbol_name(instance).name), |file| {\n-                file.write_all(disasm.as_bytes())\n-            })\n+            crate::pretty_clif::write_ir_file(\n+                tcx,\n+                &format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n+                |file| file.write_all(disasm.as_bytes()),\n+            )\n         }\n     }\n "}, {"sha": "beff84fb2e217ae04445e7979f807ddebf7b65ab", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=dbee13661efa269cb4cd57bb4c6b99a19732b484", "patch": "@@ -100,7 +100,10 @@ fn codegen_static_ref<'tcx>(\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n     assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n     assert!(\n-        matches!(fx.bcx.func.global_values[local_data_id], GlobalValueData::Symbol { tls: false, ..}),\n+        matches!(\n+            fx.bcx.func.global_values[local_data_id],\n+            GlobalValueData::Symbol { tls: false, .. }\n+        ),\n         \"tls static referenced without Rvalue::ThreadLocalRef\"\n     );\n     CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)"}, {"sha": "6160f9b78d8b3a6d9cd3cefde854f4ca60813f67", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=dbee13661efa269cb4cd57bb4c6b99a19732b484", "patch": "@@ -74,10 +74,7 @@ impl WriterRelocate {\n \n     /// Perform the collected relocations to be usable for JIT usage.\n     #[cfg(feature = \"jit\")]\n-    pub(super) fn relocate_for_jit(\n-        mut self,\n-        jit_module: &cranelift_jit::JITModule,\n-    ) -> Vec<u8> {\n+    pub(super) fn relocate_for_jit(mut self, jit_module: &cranelift_jit::JITModule) -> Vec<u8> {\n         use std::convert::TryInto;\n \n         for reloc in self.relocs.drain(..) {"}, {"sha": "22c94fec82fc13a61b03ff1063376ecef26f652d", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbee13661efa269cb4cd57bb4c6b99a19732b484/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=dbee13661efa269cb4cd57bb4c6b99a19732b484", "patch": "@@ -246,37 +246,37 @@ pub(crate) fn write_clif_file<'tcx>(\n     context: &cranelift_codegen::Context,\n     mut clif_comments: &CommentWriter,\n ) {\n-    write_ir_file(tcx, &format!(\n-        \"{}.{}.clif\",\n-        tcx.symbol_name(instance).name,\n-        postfix\n-    ), |file| {\n-        let value_ranges = isa.map(|isa| {\n-            context\n-                .build_value_labels_ranges(isa)\n-                .expect(\"value location ranges\")\n-        });\n+    write_ir_file(\n+        tcx,\n+        &format!(\"{}.{}.clif\", tcx.symbol_name(instance).name, postfix),\n+        |file| {\n+            let value_ranges = isa.map(|isa| {\n+                context\n+                    .build_value_labels_ranges(isa)\n+                    .expect(\"value location ranges\")\n+            });\n \n-        let mut clif = String::new();\n-        cranelift_codegen::write::decorate_function(\n-            &mut clif_comments,\n-            &mut clif,\n-            &context.func,\n-            &DisplayFunctionAnnotations {\n-                isa: Some(&*crate::build_isa(tcx.sess)),\n-                value_ranges: value_ranges.as_ref(),\n-            },\n-        )\n-        .unwrap();\n+            let mut clif = String::new();\n+            cranelift_codegen::write::decorate_function(\n+                &mut clif_comments,\n+                &mut clif,\n+                &context.func,\n+                &DisplayFunctionAnnotations {\n+                    isa: Some(&*crate::build_isa(tcx.sess)),\n+                    value_ranges: value_ranges.as_ref(),\n+                },\n+            )\n+            .unwrap();\n \n-        writeln!(file, \"test compile\")?;\n-        writeln!(file, \"set is_pic\")?;\n-        writeln!(file, \"set enable_simd\")?;\n-        writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n-        writeln!(file)?;\n-        file.write_all(clif.as_bytes())?;\n-        Ok(())\n-    });\n+            writeln!(file, \"test compile\")?;\n+            writeln!(file, \"set is_pic\")?;\n+            writeln!(file, \"set enable_simd\")?;\n+            writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n+            writeln!(file)?;\n+            file.write_all(clif.as_bytes())?;\n+            Ok(())\n+        },\n+    );\n }\n \n impl<M: Module> fmt::Debug for FunctionCx<'_, '_, M> {"}]}