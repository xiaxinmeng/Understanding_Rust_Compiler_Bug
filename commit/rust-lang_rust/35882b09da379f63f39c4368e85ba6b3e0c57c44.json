{"sha": "35882b09da379f63f39c4368e85ba6b3e0c57c44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODgyYjA5ZGEzNzlmNjNmMzljNDM2OGU4NWJhNmIzZTBjNTdjNDQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T05:14:47Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T05:14:47Z"}, "message": "move get_unwrap tests", "tree": {"sha": "cbfb5a8bc154fad0f82e36b34d33a128ec721616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfb5a8bc154fad0f82e36b34d33a128ec721616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35882b09da379f63f39c4368e85ba6b3e0c57c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35882b09da379f63f39c4368e85ba6b3e0c57c44", "html_url": "https://github.com/rust-lang/rust/commit/35882b09da379f63f39c4368e85ba6b3e0c57c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35882b09da379f63f39c4368e85ba6b3e0c57c44/comments", "author": null, "committer": null, "parents": [{"sha": "90b428e88d3fd5d392ece183347cbfbc8accbd5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b428e88d3fd5d392ece183347cbfbc8accbd5c", "html_url": "https://github.com/rust-lang/rust/commit/90b428e88d3fd5d392ece183347cbfbc8accbd5c"}], "stats": {"total": 216, "additions": 110, "deletions": 106}, "files": [{"sha": "a10d4d18262050861274bd289e39bd5d8a41d46f", "filename": "tests/ui/get_unwrap.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=35882b09da379f63f39c4368e85ba6b3e0c57c44", "patch": "@@ -0,0 +1,46 @@\n+#![allow(unused_mut)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+use std::iter::FromIterator;\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+fn main() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+        let _ = some_slice.get(0).unwrap();\n+        let _ = some_vec.get(0).unwrap();\n+        let _ = some_vecdeque.get(0).unwrap();\n+        let _ = some_hashmap.get(&1).unwrap();\n+        let _ = some_btreemap.get(&1).unwrap();\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}"}, {"sha": "3724cbfc8521f5ca415ccd1a54eb46ff8eeae19c", "filename": "tests/ui/get_unwrap.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=35882b09da379f63f39c4368e85ba6b3e0c57c44", "patch": "@@ -0,0 +1,62 @@\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:27:17\n+   |\n+27 |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+   |\n+   = note: `-D get-unwrap` implied by `-D warnings`\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:28:17\n+   |\n+28 |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:29:17\n+   |\n+29 |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n+\n+error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:30:17\n+   |\n+30 |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n+\n+error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:31:17\n+   |\n+31 |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n+\n+error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:32:17\n+   |\n+32 |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:37:10\n+   |\n+37 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:38:10\n+   |\n+38 |         *some_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:39:10\n+   |\n+39 |         *some_vec.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n+\n+error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:40:10\n+   |\n+40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n+"}, {"sha": "827d2182cab70db1a5b5d7362a507b2ff842cda3", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=35882b09da379f63f39c4368e85ba6b3e0c57c44", "patch": "@@ -349,48 +349,6 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n-struct GetFalsePositive {\n-    arr: [u32; 3],\n-}\n-\n-impl GetFalsePositive {\n-    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n-    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n-}\n-\n-/// Checks implementation of `GET_UNWRAP` lint\n-fn get_unwrap() {\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_slice = &mut [0, 1, 2, 3];\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n-    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n-\n-    { // Test `get().unwrap()`\n-        let _ = boxed_slice.get(1).unwrap();\n-        let _ = some_slice.get(0).unwrap();\n-        let _ = some_vec.get(0).unwrap();\n-        let _ = some_vecdeque.get(0).unwrap();\n-        let _ = some_hashmap.get(&1).unwrap();\n-        let _ = some_btreemap.get(&1).unwrap();\n-        let _ = false_positive.get(0).unwrap();\n-    }\n-\n-    { // Test `get_mut().unwrap()`\n-        *boxed_slice.get_mut(0).unwrap() = 1;\n-        *some_slice.get_mut(0).unwrap() = 1;\n-        *some_vec.get_mut(0).unwrap() = 1;\n-        *some_vecdeque.get_mut(0).unwrap() = 1;\n-        // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n-    }\n-}\n-\n-\n #[allow(similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "167ad8c768e389627b99fa09ade02af181149cb0", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 64, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35882b09da379f63f39c4368e85ba6b3e0c57c44/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=35882b09da379f63f39c4368e85ba6b3e0c57c44", "patch": "@@ -437,72 +437,10 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n 346 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:372:17\n-    |\n-372 |         let _ = boxed_slice.get(1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n-    |\n-    = note: `-D get-unwrap` implied by `-D warnings`\n-\n-error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:373:17\n-    |\n-373 |         let _ = some_slice.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n-\n-error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:374:17\n-    |\n-374 |         let _ = some_vec.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n-\n-error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:375:17\n-    |\n-375 |         let _ = some_vecdeque.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n-\n-error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:376:17\n-    |\n-376 |         let _ = some_hashmap.get(&1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n-\n-error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:377:17\n-    |\n-377 |         let _ = some_btreemap.get(&1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n-\n-error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:382:10\n-    |\n-382 |         *boxed_slice.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n-\n-error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:383:10\n-    |\n-383 |         *some_slice.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n-\n-error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:384:10\n-    |\n-384 |         *some_vec.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n-\n-error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:385:10\n-    |\n-385 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n-\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:397:13\n+   --> $DIR/methods.rs:355:13\n     |\n-397 |     let _ = opt.unwrap();\n+355 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}