{"sha": "6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "node_id": "C_kwDOAAsO6NoAKDZjOGEyZDQ3MTVmZmM1ZThjZThiMWFlYzYxM2MwOTFmMDE5OGVhZWE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-30T20:05:40Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-05T16:37:29Z"}, "message": "rustdoc: when running a function-signature search, tweak the tab bar", "tree": {"sha": "936ead8daf56546f012fef23ff31158846274fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936ead8daf56546f012fef23ff31158846274fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "html_url": "https://github.com/rust-lang/rust/commit/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d6768e3b60209d4195c822ea3247482909b604", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6768e3b60209d4195c822ea3247482909b604", "html_url": "https://github.com/rust-lang/rust/commit/a7d6768e3b60209d4195c822ea3247482909b604"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "9999c68860715920987082101446aec2e1d9c040", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "patch": "@@ -1333,6 +1333,11 @@ pre.rust {\n \tborder-top: 2px solid;\n }\n \n+#titles > button:first-child:last-child {\n+\tmargin-right: 1px;\n+\twidth: calc(100% - 1px);\n+}\n+\n #titles > button:not(:last-child) {\n \tmargin-right: 1px;\n \twidth: calc(33.3% - 1px);"}, {"sha": "f93f21af817a06e353c052b9de54aeda86d74c27", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "patch": "@@ -1407,18 +1407,12 @@ window.initSearch = rawSearchIndex => {\n                     for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n                         row = searchIndex[i];\n                         in_returned = checkReturned(row, elem, parsedQuery.typeFilter);\n-                        addIntoResults(results_returned, row.id, i, -1, in_returned);\n+                        addIntoResults(results_others, row.id, i, -1, in_returned);\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {\n-                let container = results_others;\n-                // In the special case where only a \"returned\" information is available, we want to\n-                // put the information into the \"results_returned\" dict.\n-                if (parsedQuery.returned.length !== 0 && parsedQuery.elems.length === 0) {\n-                    container = results_returned;\n-                }\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                    handleArgs(searchIndex[i], i, container);\n+                    handleArgs(searchIndex[i], i, results_others);\n                 }\n             }\n         }\n@@ -1723,12 +1717,17 @@ window.initSearch = rawSearchIndex => {\n             `${typeFilter}</h1> in ${crates} </div>`;\n         if (results.query.error !== null) {\n             output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n+        } else if (results.query.foundElems <= 1 && results.query.returned.length === 0) {\n+            output += `<div id=\"titles\">` +\n+                makeTabHeader(0, \"In Names\", ret_others[1]) +\n+                makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n+                makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n+                \"</div>\";\n+        } else {\n+            output += '<div id=\"titles\">' +\n+                makeTabHeader(0, \"In Function Signature\", ret_others[1]) +\n+                \"</div>\";\n         }\n-        output += `<div id=\"titles\">` +\n-            makeTabHeader(0, \"In Names\", ret_others[1]) +\n-            makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n-            makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n-            \"</div>\";\n \n         const resultsElem = document.createElement(\"div\");\n         resultsElem.id = \"results\";"}, {"sha": "3269305331b191d34b3324e45c81c0975acb3b71", "filename": "src/test/rustdoc-gui/search-tab-change-title-fn-sig.goml", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml?ref=6c8a2d4715ffc5e8ce8b1aec613c091f0198eaea", "patch": "@@ -0,0 +1,32 @@\n+// Checks that the search tab results work correctly with function signature syntax\n+// First, try a search-by-name\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"Foo\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Names\", CONTAINS)\n+\n+// Now try search-by-return\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"-> String\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Signature\", CONTAINS)\n+\n+// Try with a search-by-return with no results\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"-> Something\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Signature\", CONTAINS)\n+\n+// Try with a search-by-return with no results\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"usize pattern\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Signature\", CONTAINS)"}, {"sha": "52b3ceae7b115ae09186d12cb9a38a60cf02dd55", "filename": "src/test/rustdoc-gui/search-tab-selection-if-current-is-empty.goml", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a7d6768e3b60209d4195c822ea3247482909b604/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml?ref=a7d6768e3b60209d4195c822ea3247482909b604", "patch": "@@ -1,23 +0,0 @@\n-// Checks that the first non-empty search result tab is selected if the default/currently selected\n-// one is empty.\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"Foo\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n-\n-// To go back to the original \"state\"\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"-> String\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-// With this search, only the last tab shouldn't be empty so it should be selected.\n-assert-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n-\n-// To go back to the original \"state\"\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"-> Something\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-// With this search, all the tabs are empty so the first one should remain selected.\n-assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})"}]}