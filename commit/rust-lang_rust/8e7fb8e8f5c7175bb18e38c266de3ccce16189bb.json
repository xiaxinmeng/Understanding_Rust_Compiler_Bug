{"sha": "8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlN2ZiOGU4ZjVjNzE3NWJiMThlMzhjMjY2ZGUzY2NjZTE2MTg5YmI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-31T21:00:17Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-31T21:02:44Z"}, "message": "Add send_map::each{,_key,_value}", "tree": {"sha": "7f7ebadb08d70028b852edec65d9a01c0bd6d0f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7ebadb08d70028b852edec65d9a01c0bd6d0f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "html_url": "https://github.com/rust-lang/rust/commit/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35abae89281cd54073c7caefd1e7d55123e8b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35abae89281cd54073c7caefd1e7d55123e8b6d", "html_url": "https://github.com/rust-lang/rust/commit/f35abae89281cd54073c7caefd1e7d55123e8b6d"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "5c10dd18e3d51e5e9df1ce0376121e36fde1a506", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "patch": "@@ -279,16 +279,34 @@ mod linear {\n         }\n     }\n \n-    /*\n-    FIXME --- #2979 must be fixed to typecheck this\n     impl imm_methods<K,V> for &linear_map<K,V> {\n+        /*\n+        FIXME --- #2979 must be fixed to typecheck this\n         fn find_ptr(k: K) -> option<&V> {\n             //XXX this should not type check as written, but it should\n             //be *possible* to typecheck it...\n             self.with_ptr(k, |v| v)\n         }\n+        */\n+\n+        fn each(blk: fn(k: &K, v: &V) -> bool) {\n+            for vec::each(self.buckets) |slot| {\n+                let mut broke = false;\n+                do slot.iter |bucket| {\n+                    if !blk(&bucket.key, &bucket.value) {\n+                        broke = true; // FIXME(#3064) just write \"break;\"\n+                    }\n+                }\n+                if broke { break; }\n+            }\n+        }\n+        fn each_key(blk: fn(k: &K) -> bool) {\n+            self.each(|k, _v| blk(k))\n+        }\n+        fn each_value(blk: fn(v: &V) -> bool) {\n+            self.each(|_k, v| blk(v))\n+        }\n     }\n-    */\n }\n \n #[test]\n@@ -342,4 +360,4 @@ mod test {\n         assert m.get(&9) == 4;\n         assert m.get(&5) == 3;\n     }\n-}\n\\ No newline at end of file\n+}"}]}