{"sha": "dfb37cb088ce116829e3d268a13c1e6cc3601295", "node_id": "C_kwDOAAsO6NoAKGRmYjM3Y2IwODhjZTExNjgyOWUzZDI2OGExM2MxZTZjYzM2MDEyOTU", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-14T02:08:10Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-14T02:08:10Z"}, "message": "Add section on common message styles for Result::expect", "tree": {"sha": "f7c8d29a9b68b53f2a3ccaf0592201e51309e807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c8d29a9b68b53f2a3ccaf0592201e51309e807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb37cb088ce116829e3d268a13c1e6cc3601295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb37cb088ce116829e3d268a13c1e6cc3601295", "html_url": "https://github.com/rust-lang/rust/commit/dfb37cb088ce116829e3d268a13c1e6cc3601295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb37cb088ce116829e3d268a13c1e6cc3601295/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c", "html_url": "https://github.com/rust-lang/rust/commit/34a6c9f26e2ce32cad0d71f5e342365b09f4d12c"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "564e5e34d6dce6762e5f3b207892c11b742e2b42", "filename": "library/core/src/result.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dfb37cb088ce116829e3d268a13c1e6cc3601295/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb37cb088ce116829e3d268a13c1e6cc3601295/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=dfb37cb088ce116829e3d268a13c1e6cc3601295", "patch": "@@ -1023,6 +1023,62 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n+    ///\n+    /// # Common Message Styles\n+    ///\n+    /// There are two common styles for how people word `expect` messages. Using the message to\n+    /// present information to users encountering a panic (\"expect as error message\") or using the\n+    /// message to present information to developers debugging the panic (\"expect as\n+    /// precondition\").\n+    ///\n+    /// In the former case the expect message is used to describe the error that has occurred which\n+    /// is considered a bug. Consider the following example:\n+    ///\n+    /// ```\n+    /// // Read environment variable, panic if it is not present\n+    /// let path = std::env::var(\"IMPORTANT_PATH\").unwrap();\n+    /// ```\n+    ///\n+    /// In the \"expect as error message\" style we would use expect to describe that the environment\n+    /// variable was not set when it should have been:\n+    ///\n+    /// ```\n+    /// let path = std::env::var(\"IMPORTANT_PATH\")\n+    ///     .expect(\"env variable `IMPORTANT_PATH` is not set\");\n+    /// ```\n+    ///\n+    /// In the latter style, we would instead describe the reason we _expect_ the `Result` will\n+    /// always be `Ok`. With this style we would instead write:\n+    ///\n+    /// ```\n+    /// let path = std::env::var(\"IMPORTANT_PATH\")\n+    ///     .expect(\"env variable `IMPORTANT_PATH` is always be set by `wrapper_script.sh`\");\n+    /// ```\n+    ///\n+    /// The \"expect as error message\" style has the advantage of giving a more user friendly error\n+    /// message, and is more consistent with the default output of the [panic hook] provided by\n+    /// `std`.\n+    ///\n+    /// ```\n+    /// thread 'expect_as_error_message' panicked at 'env variable `IMPORTANT_PATH` is not set: NotPresent', src/lib.rs:4:10\n+    /// ```\n+    ///\n+    /// The \"expect as precondition\" style instead focuses on source code readability, making it\n+    /// easier to understand what must have gone wrong in situations where panics are being used to\n+    /// represent bugs exclusively. But this extra information often looks confusing when presented\n+    /// directly to users with the default `std` panic hook's report format:\n+    ///\n+    /// ```\n+    /// thread 'expect_as_precondition' panicked at 'env variable `IMPORTANT_PATH` is always set by `wrapper_script.sh`: NotPresent', src/lib.rs:4:10\n+    /// ```\n+    ///\n+    /// This style works best when paired with a custom [panic hook] like the one provided by the\n+    /// CLI working group library, [`human-panic`], which redirects panic messages to crash report\n+    /// files while showing users a more \"Oops, something went wrong!\" message with a suggestion to\n+    /// send the crash report file back to the developers.\n+    ///\n+    /// [panic hook]: https://doc.rust-lang.org/stable/std/panic/fn.set_hook.html\n+    /// [`human-panic`]: https://docs.rs/human-panic\n     #[inline]\n     #[track_caller]\n     #[stable(feature = \"result_expect\", since = \"1.4.0\")]"}]}