{"sha": "72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzgyZDI0N2EwMDhjNGU1MWMyY2UxZTA4YjdjMmE0ZWJkNWU5MjU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-28T23:38:25Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T22:36:16Z"}, "message": "Avoid eagerly stripping the common platform prefix.\n\nThis works better with the code generation approach.", "tree": {"sha": "02aa3da794e6baa2c0235e5a9f5842de0448b03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02aa3da794e6baa2c0235e5a9f5842de0448b03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "html_url": "https://github.com/rust-lang/rust/commit/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2de279965a27e8189a9129a4b3454dd82568b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2de279965a27e8189a9129a4b3454dd82568b9", "html_url": "https://github.com/rust-lang/rust/commit/ee2de279965a27e8189a9129a4b3454dd82568b9"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "259b21704df7f0fd95bace1f5c1872535fcfc53b", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "patch": "@@ -17,7 +17,7 @@ macro_rules! p {\n     }\n }\n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    Some(match name {\n+    Some(match name[\"aarch64_\".len()..] {\n         \"vmaxvq_u8\" => p!(\"umaxv.i8.v16i8\", (i8x16) -> i8),\n         \"vmaxvq_u16\" => p!(\"umaxv.i16.v8i16\", (i16x8) -> i16),\n         \"vmaxvq_u32\" => p!(\"umaxv.i32.v4i32\", (i32x4) -> i32),"}, {"sha": "b8a02773ec05ab0bf772510e525fa538b862cf9c", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "patch": "@@ -17,8 +17,8 @@ macro_rules! p {\n     }\n }\n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"v\") { return None }\n-    Some(match &name[\"v\".len()..] {\n+    if !name.starts_with(\"arm_v\") { return None }\n+    Some(match &name[\"arm_v\".len()..] {\n         \"sqrtq_f32\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n         \"sqrtq_f64\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n "}, {"sha": "5eb09aeb0dc4b7ea92d34637f64e2e9e5e084059", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "patch": "@@ -96,11 +96,11 @@ mod aarch64;\n impl Intrinsic {\n     pub fn find<'tcx>(tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         if name.starts_with(\"x86_\") {\n-            x86::find(tcx, &name[\"x86_\".len()..])\n+            x86::find(tcx, name)\n         } else if name.starts_with(\"arm_\") {\n-            arm::find(tcx, &name[\"arm_\".len()..])\n+            arm::find(tcx, name)\n         } else if name.starts_with(\"aarch64_\") {\n-            aarch64::find(tcx, &name[\"aarch64_\".len()..])\n+            aarch64::find(tcx, name)\n         } else {\n             None\n         }"}, {"sha": "ad5fcff8f584d844084e9c4c33e7771c0eb3fb80", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72382d247a008c4e51c2ce1e08b7c2a4ebd5e925/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=72382d247a008c4e51c2ce1e08b7c2a4ebd5e925", "patch": "@@ -18,8 +18,8 @@ macro_rules! p {\n }\n \n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    if name.starts_with(\"mm_\") {\n-        Some(match &name[\"mm_\".len()..] {\n+    if name.starts_with(\"x86_mm_\") {\n+        Some(match &name[\"x86_mm_\".len()..] {\n             \"sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n             \"sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n \n@@ -105,8 +105,8 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n \n             _ => return None\n         })\n-    } else if name.starts_with(\"mm256_\") {\n-        Some(match &name[\"mm256_\".len()..] {\n+    } else if name.starts_with(\"x86_mm256_\") {\n+        Some(match &name[\"x86_mm256_\".len()..] {\n             \"addsub_pd\" => p!(\"avx.addsub.pd.256\", (f64x4, f64x4) -> f64x4),\n             \"addsub_ps\" => p!(\"avx.addsub.ps.256\", (f32x8, f32x8) -> f32x8),\n             \"hadd_pd\" => p!(\"avx.hadd.pd.256\", (f64x4, f64x4) -> f64x4),"}]}