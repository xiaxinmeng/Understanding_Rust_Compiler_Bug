{"sha": "0aeb2fcba1370e820863b10af5db3cf1013adbe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWIyZmNiYTEzNzBlODIwODYzYjEwYWY1ZGIzY2YxMDEzYWRiZTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-21T11:04:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-21T11:04:51Z"}, "message": "Rollup merge of #81184 - jyn514:combine-after, r=CraftSpider\n\nRemove unnecessary `after_run` function\n\nIt's called at the same time and in the same place as `after_krate`, so\nthey can be combined.", "tree": {"sha": "3abbc2bb04ae0e23b1d840c9027b6d00f12fc313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3abbc2bb04ae0e23b1d840c9027b6d00f12fc313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aeb2fcba1370e820863b10af5db3cf1013adbe1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCV/UCRBK7hj4Ov3rIwAAdHIIAJGqBRocykeAwWM05lJKXTQI\ncwuw5zx1EnDIWcax8FaVvJSBZcfE16mosFBZ9siJeCbBj36fdxBfsI5W3g71N/Wa\nVKjaT4kgW0sdR8S3QzCLl28NcU6G0dghyHbjQZPK43Efb+AC0W5hPGDPWCoxMdVi\n4w3+7lOqq5OsU+6EdGyt0f/D3vKjXwA83NkvVuYMvdwAU3dgyQohb2UE+5uVH9vJ\nX9bhyMVGSs14zF9jyrnoQIEwxSTM7m27um90t6FTqEaIhD5XQF9fkbpKbKWB1u4f\n8jGBYW4xBacgaqeO31uZHmFbs1KEVCej5wSNPn7gzQW6DdbqHIkLowB0wuVFHk8=\n=nnJp\n-----END PGP SIGNATURE-----\n", "payload": "tree 3abbc2bb04ae0e23b1d840c9027b6d00f12fc313\nparent b76f0f92abd84fa30913c79e93d92ebd13bfb229\nparent d926147ccbd9bda51a5f0754f62811c0699621e5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611227091 +0900\ncommitter GitHub <noreply@github.com> 1611227091 +0900\n\nRollup merge of #81184 - jyn514:combine-after, r=CraftSpider\n\nRemove unnecessary `after_run` function\n\nIt's called at the same time and in the same place as `after_krate`, so\nthey can be combined.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeb2fcba1370e820863b10af5db3cf1013adbe1", "html_url": "https://github.com/rust-lang/rust/commit/0aeb2fcba1370e820863b10af5db3cf1013adbe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aeb2fcba1370e820863b10af5db3cf1013adbe1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76f0f92abd84fa30913c79e93d92ebd13bfb229", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76f0f92abd84fa30913c79e93d92ebd13bfb229", "html_url": "https://github.com/rust-lang/rust/commit/b76f0f92abd84fa30913c79e93d92ebd13bfb229"}, {"sha": "d926147ccbd9bda51a5f0754f62811c0699621e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d926147ccbd9bda51a5f0754f62811c0699621e5", "html_url": "https://github.com/rust-lang/rust/commit/d926147ccbd9bda51a5f0754f62811c0699621e5"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "c91d6decc0b675a7ab88ab93ac0fafa299adcb67", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=0aeb2fcba1370e820863b10af5db3cf1013adbe1", "patch": "@@ -38,10 +38,14 @@ crate trait FormatRenderer<'tcx>: Clone {\n     fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n \n     /// Post processing hook for cleanup and dumping output to files.\n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error>;\n-\n-    /// Called after everything else to write out errors.\n-    fn after_run(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error>;\n+    ///\n+    /// A handler is available if the renderer wants to report errors.\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error>;\n }\n \n /// Main method for rendering a crate.\n@@ -104,6 +108,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n \n-    format_renderer.after_krate(&krate, &cache)?;\n-    format_renderer.after_run(diag)\n+    format_renderer.after_krate(&krate, &cache, diag)\n }"}, {"sha": "26afd705740b2b16b318e14009814f1874d60705", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0aeb2fcba1370e820863b10af5db3cf1013adbe1", "patch": "@@ -523,17 +523,12 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         Ok((cx, krate))\n     }\n \n-    fn after_run(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error> {\n-        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n-        if nb_errors > 0 {\n-            Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n-        } else {\n-            Ok(())\n-        }\n-    }\n-\n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error> {\n         let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n         let crate_name = krate.name;\n@@ -596,7 +591,15 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n-        Ok(())\n+\n+        // Flush pending errors.\n+        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n+        let nb_errors = self.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        if nb_errors > 0 {\n+            Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n+        } else {\n+            Ok(())\n+        }\n     }\n \n     fn mod_item_in("}, {"sha": "64500c1d911612db92cfce3cfd27226c09e12ae8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb2fcba1370e820863b10af5db3cf1013adbe1/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=0aeb2fcba1370e820863b10af5db3cf1013adbe1", "patch": "@@ -199,7 +199,12 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        _diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items(cache));\n@@ -245,8 +250,4 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         serde_json::ser::to_writer(&file, &output).unwrap();\n         Ok(())\n     }\n-\n-    fn after_run(&mut self, _diag: &rustc_errors::Handler) -> Result<(), Error> {\n-        Ok(())\n-    }\n }"}]}