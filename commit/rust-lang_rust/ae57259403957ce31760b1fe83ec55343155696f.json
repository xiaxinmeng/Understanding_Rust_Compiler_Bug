{"sha": "ae57259403957ce31760b1fe83ec55343155696f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTcyNTk0MDM5NTdjZTMxNzYwYjFmZTgzZWM1NTM0MzE1NTY5NmY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-07T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-09T06:54:02Z"}, "message": "Add bootstrap step for building sanitizer runtimes", "tree": {"sha": "93b18c6d10b0360d839c0cba223d5c6d93bc24fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b18c6d10b0360d839c0cba223d5c6d93bc24fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae57259403957ce31760b1fe83ec55343155696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae57259403957ce31760b1fe83ec55343155696f", "html_url": "https://github.com/rust-lang/rust/commit/ae57259403957ce31760b1fe83ec55343155696f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae57259403957ce31760b1fe83ec55343155696f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "html_url": "https://github.com/rust-lang/rust/commit/0c6b1a7e3c54ff3a5ef6744073281b00368749c8"}], "stats": {"total": 202, "additions": 159, "deletions": 43}, "files": [{"sha": "00c8e72a8f6851c82c68a4f0cd2925d8fd3ed584", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -343,6 +343,7 @@ impl<'a> Builder<'a> {\n                 tool::Rustdoc,\n                 tool::Clippy,\n                 native::Llvm,\n+                native::Sanitizers,\n                 tool::Rustfmt,\n                 tool::Miri,\n                 native::Lld"}, {"sha": "b76515763fbdb19a18d6049418ac28ee6d8165ab", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n         let compiler = builder.compiler(0, builder.config.build);\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n-        std_cargo(builder, &compiler, target, &mut cargo);\n+        std_cargo(builder, target, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo("}, {"sha": "eced03506ab9ff64fcdcf91acf072556ea74c8d8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -87,7 +87,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n-        std_cargo(builder, &compiler, target, &mut cargo);\n+        std_cargo(builder, target, &mut cargo);\n \n         builder.info(&format!(\n             \"Building stage{} std artifacts ({} -> {})\",\n@@ -153,17 +153,18 @@ fn copy_third_party_objects(\n         copy_and_stamp(Path::new(&src), \"libunwind.a\");\n     }\n \n+    if builder.config.sanitizers && compiler.stage != 0 {\n+        // The sanitizers are only copied in stage1 or above,\n+        // to avoid creating dependency on LLVM.\n+        target_deps.extend(copy_sanitizers(builder, &compiler, target));\n+    }\n+\n     target_deps\n }\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n-pub fn std_cargo(\n-    builder: &Builder<'_>,\n-    compiler: &Compiler,\n-    target: Interned<String>,\n-    cargo: &mut Cargo,\n-) {\n+pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -206,19 +207,6 @@ pub fn std_cargo(\n         let mut features = builder.std_features();\n         features.push_str(&compiler_builtins_c_feature);\n \n-        if compiler.stage != 0 && builder.config.sanitizers {\n-            // This variable is used by the sanitizer runtime crates, e.g.\n-            // rustc_lsan, to build the sanitizer runtime from C code\n-            // When this variable is missing, those crates won't compile the C code,\n-            // so we don't set this variable during stage0 where llvm-config is\n-            // missing\n-            // We also only build the runtimes when --enable-sanitizers (or its\n-            // config.toml equivalent) is used\n-            let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n-            cargo.env(\"LLVM_CONFIG\", llvm_config);\n-            cargo.env(\"RUSTC_BUILD_SANITIZERS\", \"1\");\n-        }\n-\n         cargo\n             .arg(\"--features\")\n             .arg(features)\n@@ -276,31 +264,43 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if builder.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n-            // The sanitizers are only built in stage1 or above, so the dylibs will\n-            // be missing in stage0 and causes panic. See the `std()` function above\n-            // for reason why the sanitizers are not built in stage0.\n-            copy_apple_sanitizer_dylibs(builder, &builder.native_dir(target), \"osx\", &libdir);\n-        }\n     }\n }\n \n-fn copy_apple_sanitizer_dylibs(\n+/// Copies sanitizer runtime libraries into target libdir.\n+fn copy_sanitizers(\n     builder: &Builder<'_>,\n-    native_dir: &Path,\n-    platform: &str,\n-    into: &Path,\n-) {\n-    for &sanitizer in &[\"asan\", \"tsan\"] {\n-        let filename = format!(\"lib__rustc__clang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n-        let mut src_path = native_dir.join(sanitizer);\n-        src_path.push(\"build\");\n-        src_path.push(\"lib\");\n-        src_path.push(\"darwin\");\n-        src_path.push(&filename);\n-        builder.copy(&src_path, &into.join(filename));\n+    compiler: &Compiler,\n+    target: Interned<String>,\n+) -> Vec<PathBuf> {\n+    let runtimes: Vec<native::SanitizerRuntime> = builder.ensure(native::Sanitizers { target });\n+\n+    if builder.config.dry_run {\n+        return Vec::new();\n+    }\n+\n+    let mut target_deps = Vec::new();\n+    let libdir = builder.sysroot_libdir(*compiler, target);\n+\n+    for runtime in &runtimes {\n+        let dst = libdir.join(&runtime.name);\n+        builder.copy(&runtime.path, &dst);\n+\n+        if target == \"x86_64-apple-darwin\" {\n+            // Update the library install name reflect the fact it has been renamed.\n+            let status = Command::new(\"install_name_tool\")\n+                .arg(\"-id\")\n+                .arg(format!(\"@rpath/{}\", runtime.name))\n+                .arg(&dst)\n+                .status()\n+                .expect(\"failed to execute `install_name_tool`\");\n+            assert!(status.success());\n+        }\n+\n+        target_deps.push(dst);\n     }\n+\n+    target_deps\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "4d18199dc8ac06e7b7b8be6a860db3ffa271c2d1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -449,7 +449,7 @@ impl Step for Std {\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n-            compile::std_cargo(builder, &compiler, target, &mut cargo);\n+            compile::std_cargo(builder, target, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n             // build by the rustc step later if enabled."}, {"sha": "ce977f1bbc44e5c0eda159230ba65cda643746d1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -546,3 +546,118 @@ impl Step for TestHelpers {\n             .compile(\"rust_test_helpers\");\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Sanitizers {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Sanitizers {\n+    type Output = Vec<SanitizerRuntime>;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/llvm-project/compiler-rt\").path(\"src/sanitizers\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Sanitizers { target: run.target });\n+    }\n+\n+    /// Builds sanitizer runtime libraries.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let compiler_rt_dir = builder.src.join(\"src/llvm-project/compiler-rt\");\n+        if !compiler_rt_dir.exists() {\n+            return Vec::new();\n+        }\n+\n+        let out_dir = builder.native_dir(self.target).join(\"sanitizers\");\n+        let runtimes = supported_sanitizers(&out_dir, self.target);\n+        if runtimes.is_empty() {\n+            return runtimes;\n+        }\n+\n+        let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n+        if builder.config.dry_run {\n+            return runtimes;\n+        }\n+\n+        let done_stamp = out_dir.join(\"sanitizers-finished-building\");\n+        if done_stamp.exists() {\n+            builder.info(&format!(\n+                \"Assuming that sanitizers rebuild is not necessary. \\\n+                To force a rebuild, remove the file `{}`\",\n+                done_stamp.display()\n+            ));\n+            return runtimes;\n+        }\n+\n+        builder.info(&format!(\"Building sanitizers for {}\", self.target));\n+        let _time = util::timeit(&builder);\n+\n+        let mut cfg = cmake::Config::new(&compiler_rt_dir);\n+        cfg.target(&self.target);\n+        cfg.host(&builder.config.build);\n+        cfg.profile(\"Release\");\n+\n+        cfg.define(\"CMAKE_C_COMPILER_TARGET\", self.target);\n+        cfg.define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_CRT\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_LIBFUZZER\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_PROFILE\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\");\n+        cfg.define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_DEFAULT_TARGET_ONLY\", \"ON\");\n+        cfg.define(\"COMPILER_RT_USE_LIBCXX\", \"OFF\");\n+        cfg.define(\"LLVM_CONFIG_PATH\", &llvm_config);\n+\n+        t!(fs::create_dir_all(&out_dir));\n+        cfg.out_dir(out_dir);\n+\n+        for runtime in &runtimes {\n+            cfg.build_target(&runtime.cmake_target);\n+            cfg.build();\n+        }\n+\n+        t!(fs::write(&done_stamp, b\"\"));\n+\n+        runtimes\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct SanitizerRuntime {\n+    /// CMake target used to build the runtime.\n+    pub cmake_target: String,\n+    /// Path to the built runtime library.\n+    pub path: PathBuf,\n+    /// Library filename that will be used rustc.\n+    pub name: String,\n+}\n+\n+/// Returns sanitizers available on a given target.\n+fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<SanitizerRuntime> {\n+    let mut result = Vec::new();\n+    match &*target {\n+        \"x86_64-apple-darwin\" => {\n+            for s in &[\"asan\", \"lsan\", \"tsan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n+                    path: out_dir\n+                        .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n+                    name: format!(\"librustc_rt.{}.dylib\", s),\n+                });\n+            }\n+        }\n+        \"x86_64-unknown-linux-gnu\" => {\n+            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n+                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n+                    name: format!(\"librustc_rt.{}.a\", s),\n+                });\n+            }\n+        }\n+        _ => {}\n+    }\n+    result\n+}"}, {"sha": "10e07489e1212ce76f804a177b1fa8cc5c7ee8cf", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae57259403957ce31760b1fe83ec55343155696f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ae57259403957ce31760b1fe83ec55343155696f", "patch": "@@ -1659,7 +1659,7 @@ impl Step for Crate {\n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n-                compile::std_cargo(builder, &compiler, target, &mut cargo);\n+                compile::std_cargo(builder, target, &mut cargo);\n             }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });"}]}