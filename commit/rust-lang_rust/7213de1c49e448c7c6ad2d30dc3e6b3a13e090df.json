{"sha": "7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTNkZTFjNDllNDQ4YzdjNmFkMmQzMGRjM2U2YjNhMTNlMDkwZGY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-12T23:51:51Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-17T19:26:48Z"}, "message": "Fallout from deprecation\n\nThis commit handles the fallout from deprecating `_with` and `_equiv` methods.", "tree": {"sha": "9133e9f7b6f954432eddd947cb74248a1751ea36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9133e9f7b6f954432eddd947cb74248a1751ea36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "html_url": "https://github.com/rust-lang/rust/commit/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a2867ea736007397aa2fbaa0e4c539c80e162c", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a2867ea736007397aa2fbaa0e4c539c80e162c", "html_url": "https://github.com/rust-lang/rust/commit/80a2867ea736007397aa2fbaa0e4c539c80e162c"}], "stats": {"total": 105, "additions": 56, "deletions": 49}, "files": [{"sha": "159a62f01107206b1a4f0e92be71fae111a37c92", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -178,7 +178,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, Token>) -> TokenAndSpan {\n     let toknum = m.name(\"toknum\");\n     let content = m.name(\"content\");\n \n-    let proto_tok = tokens.find_equiv(&toknum).expect(format!(\"didn't find token {} in the map\",\n+    let proto_tok = tokens.get(&toknum).expect(format!(\"didn't find token {} in the map\",\n                                                               toknum).as_slice());\n \n     let nm = parse::token::intern(content);"}, {"sha": "20823a2affc7f5d73fd887a23bf81b9b932089d2", "filename": "src/libcollections/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibcollections%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibcollections%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmod.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -33,4 +33,4 @@\n //! ```\n \n pub mod map;\n-pub mod set;\n\\ No newline at end of file\n+pub mod set;"}, {"sha": "9dcb182cd267570b259926cb1993bfbdc0f27527", "filename": "src/libcollections/trie/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibcollections%2Ftrie%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibcollections%2Ftrie%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmod.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -17,4 +17,4 @@\n //! `TrieMap` is ordered.\n \n pub mod map;\n-pub mod set;\n\\ No newline at end of file\n+pub mod set;"}, {"sha": "e1e2abcb1b7c540e011443e6959a8b86fa3e63b4", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -726,7 +726,7 @@ impl<'t> Captures<'t> {\n         match self.named {\n             None => \"\",\n             Some(ref h) => {\n-                match h.find_equiv(name) {\n+                match h.get(name) {\n                     None => \"\",\n                     Some(i) => self.at(*i),\n                 }"}, {"sha": "aa6a021a210ef60580a7bac46a41c5c902cbf910", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -165,7 +165,7 @@ impl LintStore {\n     }\n \n     fn register_renamed(&mut self, old_name: &str, new_name: &str) {\n-        let target = match self.by_name.find_equiv(new_name) {\n+        let target = match self.by_name.get(new_name) {\n             Some(&Id(lint_id)) => lint_id.clone(),\n             _ => panic!(\"invalid lint renaming of {} to {}\", old_name, new_name)\n         };\n@@ -259,7 +259,7 @@ impl LintStore {\n     fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)\n                  -> Option<LintId>\n     {\n-        match self.by_name.find_equiv(lint_name) {\n+        match self.by_name.get(lint_name) {\n             Some(&Id(lint_id)) => Some(lint_id),\n             Some(&Renamed(ref new_name, lint_id)) => {\n                 let warning = format!(\"lint {} has been renamed to {}\",\n@@ -282,7 +282,7 @@ impl LintStore {\n                     match self.lint_groups.iter().map(|(&x, pair)| (x, pair.ref0().clone()))\n                                                  .collect::<FnvHashMap<&'static str,\n                                                                        Vec<LintId>>>()\n-                                                 .find_equiv(lint_name.as_slice()) {\n+                                                 .get(lint_name.as_slice()) {\n                         Some(v) => {\n                             v.iter()\n                              .map(|lint_id: &LintId|\n@@ -489,7 +489,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                     match self.lints.find_lint(lint_name.get(), &self.tcx.sess, Some(span)) {\n                         Some(lint_id) => vec![(lint_id, level, span)],\n                         None => {\n-                            match self.lints.lint_groups.find_equiv(lint_name.get()) {\n+                            match self.lints.lint_groups.get(lint_name.get()) {\n                                 Some(&(ref v, _)) => v.iter()\n                                                       .map(|lint_id: &LintId|\n                                                            (*lint_id, level, span))"}, {"sha": "1cfe565fd7deecc16006162c0cba59e5824716a2", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -321,7 +321,7 @@ fn existing_match(e: &Env, name: &str,\n         // `source` stores paths which are normalized which may be different\n         // from the strings on the command line.\n         let source = e.sess.cstore.get_used_crate_source(cnum).unwrap();\n-        match e.sess.opts.externs.find_equiv(name) {\n+        match e.sess.opts.externs.get(name) {\n             Some(locs) => {\n                 let found = locs.iter().any(|l| {\n                     let l = fs::realpath(&Path::new(l.as_slice())).ok();"}, {"sha": "e0110a81c179f0d6e3fe03086151634b9f01fe60", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -298,7 +298,7 @@ fn item_path(item_doc: rbml::Doc) -> Vec<ast_map::PathElem> {\n fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name {\n     let name = reader::get_doc(item, tag_paths_data_name);\n     let string = name.as_str_slice();\n-    match intr.find_equiv(string) {\n+    match intr.find(string) {\n         None => token::intern(string),\n         Some(val) => val,\n     }\n@@ -1449,4 +1449,3 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n         Some(item) => item_sort(item) == 't',\n     }\n }\n-"}, {"sha": "f7d666e48150d97bc39bf5f5c6e5a6fba2a5f909", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -54,7 +54,7 @@ impl<'a> FileSearch<'a> {\n         debug!(\"filesearch: searching lib path\");\n         let tlib_path = make_target_lib_path(self.sysroot,\n                                     self.triple);\n-        if !visited_dirs.contains_equiv(tlib_path.as_vec()) {\n+        if !visited_dirs.contains(tlib_path.as_vec()) {\n             match f(&tlib_path) {\n                 FileMatches => found = true,\n                 FileDoesntMatch => ()\n@@ -69,9 +69,9 @@ impl<'a> FileSearch<'a> {\n                 let tlib_path = make_rustpkg_lib_path(\n                     self.sysroot, path, self.triple);\n                 debug!(\"is {} in visited_dirs? {}\", tlib_path.display(),\n-                        visited_dirs.contains_equiv(&tlib_path.as_vec().to_vec()));\n+                        visited_dirs.contains(&tlib_path.as_vec().to_vec()));\n \n-                if !visited_dirs.contains_equiv(tlib_path.as_vec()) {\n+                if !visited_dirs.contains(tlib_path.as_vec()) {\n                     visited_dirs.insert(tlib_path.as_vec().to_vec());\n                     // Don't keep searching the RUST_PATH if one match turns up --\n                     // if we did, we'd get a \"multiple matching crates\" error"}, {"sha": "30bef248b4738c6a8afe52380d1c55f25bdcb45e", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -596,7 +596,7 @@ impl<'a> Context<'a> {\n     }\n \n     fn find_commandline_library(&mut self) -> Option<Library> {\n-        let locs = match self.sess.opts.externs.find_equiv(self.crate_name) {\n+        let locs = match self.sess.opts.externs.get(self.crate_name) {\n             Some(s) => s,\n             None => return None,\n         };"}, {"sha": "ffc8a83e42edad9fd8704502e2df1488f6daf8c1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'v> Visitor<'v> for LanguageItemCollector<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match extract(item.attrs.as_slice()) {\n             Some(value) => {\n-                let item_index = self.item_refs.find_equiv(&value).map(|x| *x);\n+                let item_index = self.item_refs.get(value.get()).map(|x| *x);\n \n                 match item_index {\n                     Some(item_index) => {"}, {"sha": "cc51be31760a370c3d2650ce558a37f69289db93", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -216,7 +216,7 @@ pub fn get_extern_fn(ccx: &CrateContext,\n                      ty: Type,\n                      output: ty::t)\n                      -> ValueRef {\n-    match externs.find_equiv(name) {\n+    match externs.get(name) {\n         Some(n) => return *n,\n         None => {}\n     }\n@@ -226,7 +226,7 @@ pub fn get_extern_fn(ccx: &CrateContext,\n }\n \n fn get_extern_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str, did: ast::DefId) -> ValueRef {\n-    match ccx.externs().borrow().find_equiv(name) {\n+    match ccx.externs().borrow().get(name) {\n         Some(n) => return *n,\n         None => ()\n     }\n@@ -2983,7 +2983,7 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n \n                 let name = CString::new(llvm::LLVMGetValueName(val), false);\n                 if !declared.contains(&name) &&\n-                   !reachable.contains_equiv(name.as_str().unwrap()) {\n+                   !reachable.contains(name.as_str().unwrap()) {\n                     llvm::SetLinkage(val, llvm::InternalLinkage);\n                 }\n             }"}, {"sha": "de8e80b02757b6b21bc217c3560271aabca9e410", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -1677,7 +1677,7 @@ fn declare_local(bcx: Block,\n }\n \n fn file_metadata(cx: &CrateContext, full_path: &str) -> DIFile {\n-    match debug_context(cx).created_files.borrow().find_equiv(full_path) {\n+    match debug_context(cx).created_files.borrow().get(full_path) {\n         Some(file_metadata) => return *file_metadata,\n         None => ()\n     }"}, {"sha": "69861290b8d0d16f47d8d7d5b7e061b27f6533f2", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -336,7 +336,7 @@ impl TypeNames {\n     }\n \n     pub fn find_type(&self, s: &str) -> Option<Type> {\n-        self.named_types.borrow().find_equiv(s).map(|x| Type::from_ref(*x))\n+        self.named_types.borrow().get(s).map(|x| Type::from_ref(*x))\n     }\n \n     pub fn type_to_string(&self, ty: Type) -> String {"}, {"sha": "8e9ac7095dae1bde2d1a85089b11a6719638d20a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -2122,7 +2122,7 @@ impl<'a> fmt::Show for Sidebar<'a> {\n \n         fn block(w: &mut fmt::Formatter, short: &str, longty: &str,\n                  cur: &clean::Item, cx: &Context) -> fmt::Result {\n-            let items = match cx.sidebar.find_equiv(short) {\n+            let items = match cx.sidebar.get(short) {\n                 Some(items) => items.as_slice(),\n                 None => return Ok(())\n             };"}, {"sha": "03e0452a4158d5a02d601cc3910ee7ebbd0a3d1c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -901,7 +901,7 @@ impl Json {\n     /// Otherwise, returns None.\n     pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{\n         match self {\n-            &Object(ref map) => map.find_with(|s| key.cmp(s.as_slice())),\n+            &Object(ref map) => map.get(key),\n             _ => None\n         }\n     }\n@@ -926,7 +926,7 @@ impl Json {\n     pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {\n         match self {\n             &Object(ref map) => {\n-                match map.find_with(|s| key.cmp(s.as_slice())) {\n+                match map.get(key) {\n                     Some(json_value) => Some(json_value),\n                     None => {\n                         for (_, v) in map.iter() {"}, {"sha": "69375e8d4f84e131d5044185422b130c96589472", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -1944,11 +1944,11 @@ mod test_map {\n         m.insert(\"baz\".to_string(), baz);\n \n \n-        assert_eq!(m.find_equiv(\"foo\"), Some(&foo));\n-        assert_eq!(m.find_equiv(\"bar\"), Some(&bar));\n-        assert_eq!(m.find_equiv(\"baz\"), Some(&baz));\n+        assert_eq!(m.get(\"foo\"), Some(&foo));\n+        assert_eq!(m.get(\"bar\"), Some(&bar));\n+        assert_eq!(m.get(\"baz\"), Some(&baz));\n \n-        assert_eq!(m.find_equiv(\"qux\"), None);\n+        assert_eq!(m.get(\"qux\"), None);\n     }\n \n     #[test]"}, {"sha": "4caef247aebc26f601318c8d4de23ec70cfdfe02", "filename": "src/libsyntax/diagnostics/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -20,6 +20,6 @@ impl Registry {\n     }\n \n     pub fn find_description(&self, code: &str) -> Option<&'static str> {\n-        self.descriptions.find_equiv(code).map(|desc| *desc)\n+        self.descriptions.get(code).map(|desc| *desc)\n     }\n }"}, {"sha": "f1b92b4d6bc1d7406bcac881eb0c1f09a79a1889", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -144,7 +144,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, allow_method: bool,\n             let name = interned_name.get();\n             p.expect(&token::Eq);\n             let e = p.parse_expr();\n-            match names.find_equiv(name) {\n+            match names.get(name) {\n                 None => {}\n                 Some(prev) => {\n                     ecx.span_err(e.span,\n@@ -366,7 +366,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.ecx.expr_path(path)\n             }\n             parse::CountIsName(n) => {\n-                let i = match self.name_positions.find_equiv(n) {\n+                let i = match self.name_positions.get(n) {\n                     Some(&i) => i,\n                     None => 0, // error already emitted elsewhere\n                 };\n@@ -410,7 +410,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     // Named arguments are converted to positional arguments at\n                     // the end of the list of arguments\n                     parse::ArgumentNamed(n) => {\n-                        let i = match self.name_positions.find_equiv(n) {\n+                        let i = match self.name_positions.get(n) {\n                             Some(&i) => i,\n                             None => 0, // error already emitted elsewhere\n                         };"}, {"sha": "ede967bba25cd20bad2a12dd2d56ae77148f3179", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -14,9 +14,9 @@\n \n use ast::Name;\n \n+use std::borrow::BorrowFrom;\n use std::collections::HashMap;\n use std::cell::RefCell;\n-use std::cmp::Equiv;\n use std::fmt;\n use std::hash::Hash;\n use std::rc::Rc;\n@@ -75,9 +75,10 @@ impl<T: Eq + Hash + Clone + 'static> Interner<T> {\n         (*vect).len()\n     }\n \n-    pub fn find_equiv<Sized? Q: Hash + Equiv<T>>(&self, val: &Q) -> Option<Name> {\n+    pub fn find<Sized? Q>(&self, val: &Q) -> Option<Name>\n+    where Q: BorrowFrom<T> + Eq + Hash {\n         let map = self.map.borrow();\n-        match (*map).find_equiv(val) {\n+        match (*map).get(val) {\n             Some(v) => Some(*v),\n             None => None,\n         }\n@@ -117,6 +118,12 @@ impl fmt::Show for RcStr {\n     }\n }\n \n+impl BorrowFrom<RcStr> for str {\n+    fn borrow_from(owned: &RcStr) -> &str {\n+        owned.string.as_slice()\n+    }\n+}\n+\n impl RcStr {\n     pub fn new(string: &str) -> RcStr {\n         RcStr {\n@@ -149,7 +156,7 @@ impl StrInterner {\n \n     pub fn intern(&self, val: &str) -> Name {\n         let mut map = self.map.borrow_mut();\n-        match map.find_equiv(val) {\n+        match map.get(val) {\n             Some(&idx) => return idx,\n             None => (),\n         }\n@@ -195,8 +202,9 @@ impl StrInterner {\n         self.vect.borrow().len()\n     }\n \n-    pub fn find_equiv<Sized? Q:Hash + Equiv<RcStr>>(&self, val: &Q) -> Option<Name> {\n-        match (*self.map.borrow()).find_equiv(val) {\n+    pub fn find<Sized? Q>(&self, val: &Q) -> Option<Name>\n+    where Q: BorrowFrom<RcStr> + Eq + Hash {\n+        match (*self.map.borrow()).get(val) {\n             Some(v) => Some(*v),\n             None => None,\n         }"}, {"sha": "c1393767c8adcaf62af86f86b2f1e70452e9c64a", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -78,7 +78,7 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n         if self.num_colors > color {\n             let s = expand(self.ti\n                                .strings\n-                               .find_equiv(\"setaf\")\n+                               .get(\"setaf\")\n                                .unwrap()\n                                .as_slice(),\n                            &[Number(color as int)], &mut Variables::new());\n@@ -95,7 +95,7 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n         if self.num_colors > color {\n             let s = expand(self.ti\n                                .strings\n-                               .find_equiv(\"setab\")\n+                               .get(\"setab\")\n                                .unwrap()\n                                .as_slice(),\n                            &[Number(color as int)], &mut Variables::new());\n@@ -113,7 +113,7 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n             attr::BackgroundColor(c) => self.bg(c),\n             _ => {\n                 let cap = cap_for_attr(attr);\n-                let parm = self.ti.strings.find_equiv(cap);\n+                let parm = self.ti.strings.get(cap);\n                 if parm.is_some() {\n                     let s = expand(parm.unwrap().as_slice(),\n                                    &[],\n@@ -135,19 +135,19 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n             }\n             _ => {\n                 let cap = cap_for_attr(attr);\n-                self.ti.strings.find_equiv(cap).is_some()\n+                self.ti.strings.get(cap).is_some()\n             }\n         }\n     }\n \n     fn reset(&mut self) -> IoResult<()> {\n-        let mut cap = self.ti.strings.find_equiv(\"sgr0\");\n+        let mut cap = self.ti.strings.get(\"sgr0\");\n         if cap.is_none() {\n             // are there any terminals that have color/attrs and not sgr0?\n             // Try falling back to sgr, then op\n-            cap = self.ti.strings.find_equiv(\"sgr\");\n+            cap = self.ti.strings.get(\"sgr\");\n             if cap.is_none() {\n-                cap = self.ti.strings.find_equiv(\"op\");\n+                cap = self.ti.strings.get(\"op\");\n             }\n         }\n         let s = cap.map_or(Err(\"can't find terminfo capability `sgr0`\".to_string()), |op| {\n@@ -202,9 +202,9 @@ impl<T: Writer+Send> TerminfoTerminal<T> {\n         }\n \n         let inf = ti.unwrap();\n-        let nc = if inf.strings.find_equiv(\"setaf\").is_some()\n-                 && inf.strings.find_equiv(\"setab\").is_some() {\n-                     inf.numbers.find_equiv(\"colors\").map_or(0, |&n| n)\n+        let nc = if inf.strings.get(\"setaf\").is_some()\n+                 && inf.strings.get(\"setab\").is_some() {\n+                     inf.numbers.get(\"colors\").map_or(0, |&n| n)\n                  } else { 0 };\n \n         return Some(box TerminfoTerminal {out: out,"}, {"sha": "e39cd743ad55ac75d921912f1a419eac21df1cb3", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7213de1c49e448c7c6ad2d30dc3e6b3a13e090df/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=7213de1c49e448c7c6ad2d30dc3e6b3a13e090df", "patch": "@@ -76,7 +76,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n    let key = key.into_ascii().as_slice().to_lowercase().into_string();\n-   match mm.find_equiv(key.as_bytes()) {\n+   match mm.get(key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }\n    }"}]}