{"sha": "4f276202f52ca6cfd122cc88ea304b197ab06a02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjc2MjAyZjUyY2E2Y2ZkMTIyY2M4OGVhMzA0YjE5N2FiMDZhMDI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-01T02:18:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-01T02:18:19Z"}, "message": "Rollup merge of #76103 - GuillaumeGomez:cleanup-e0769, r=Dylan-DPC\n\nClean up E0769\n\nr? @pickfire\n\ncc @Dylan-DPC", "tree": {"sha": "971681301ea602ac909958cec10ee3762440217e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971681301ea602ac909958cec10ee3762440217e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f276202f52ca6cfd122cc88ea304b197ab06a02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTa9sCRBK7hj4Ov3rIwAAdHIIAIv0ve3kFg+z26tZy6bQjymD\n5OycLYeyuTxHW/F+mCazLyPEOBxgIKmwavMuXt3wlmGAnvMUcq0xgISOZaOg1kdl\nfrRZubKSin9EWm+yv9aBdMTbmbXasHrkV5vOmyVOmPaThhnka3uCbufD4csZfnPP\nHQeG0D8IHNefEPqTWbRLQU9PBT2eZtUSecLs6Pc0IVhPkaOTYxwSY7Wb8t1/Dgz8\nRw54rzdUOm3mebd2zFg4IJBvlR2NmY4FPf9X86HT3rnRS1qrw2KJeXUJwqdW8uAc\n10subxdmvLZg9Qw83/5y88DxVb6V/Cj2s2jOJLBulGIbEuE+nDpOYTnZR8HZH8k=\n=dVRF\n-----END PGP SIGNATURE-----\n", "payload": "tree 971681301ea602ac909958cec10ee3762440217e\nparent 5033203121f4bda79e28dd698f0f42c8785f5684\nparent f3ae96ecd54b244857ce565c373a3363009e68f3\nauthor Tyler Mandry <tmandry@gmail.com> 1598926699 -0700\ncommitter GitHub <noreply@github.com> 1598926699 -0700\n\nRollup merge of #76103 - GuillaumeGomez:cleanup-e0769, r=Dylan-DPC\n\nClean up E0769\n\nr? @pickfire\n\ncc @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f276202f52ca6cfd122cc88ea304b197ab06a02", "html_url": "https://github.com/rust-lang/rust/commit/4f276202f52ca6cfd122cc88ea304b197ab06a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f276202f52ca6cfd122cc88ea304b197ab06a02/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5033203121f4bda79e28dd698f0f42c8785f5684", "url": "https://api.github.com/repos/rust-lang/rust/commits/5033203121f4bda79e28dd698f0f42c8785f5684", "html_url": "https://github.com/rust-lang/rust/commit/5033203121f4bda79e28dd698f0f42c8785f5684"}, {"sha": "f3ae96ecd54b244857ce565c373a3363009e68f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ae96ecd54b244857ce565c373a3363009e68f3", "html_url": "https://github.com/rust-lang/rust/commit/f3ae96ecd54b244857ce565c373a3363009e68f3"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "4a3b674b05896d964165f73dd4f37efe8b7ec046", "filename": "compiler/rustc_error_codes/src/error_codes/E0769.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4f276202f52ca6cfd122cc88ea304b197ab06a02/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f276202f52ca6cfd122cc88ea304b197ab06a02/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md?ref=4f276202f52ca6cfd122cc88ea304b197ab06a02", "patch": "@@ -1,15 +1,19 @@\n-A tuple struct or tuple variant was used in a pattern as if it were a\n-struct or struct variant.\n+A tuple struct or tuple variant was used in a pattern as if it were a struct or\n+struct variant.\n \n Erroneous code example:\n \n ```compile_fail,E0769\n enum E {\n     A(i32),\n }\n+\n let e = E::A(42);\n+\n match e {\n-    E::A { number } => println!(\"{}\", x),\n+    E::A { number } => { // error!\n+        println!(\"{}\", number);\n+    }\n }\n ```\n \n@@ -21,19 +25,23 @@ To fix this error, you can use the tuple pattern:\n # }\n # let e = E::A(42);\n match e {\n-    E::A(number) => println!(\"{}\", number),\n+    E::A(number) => { // ok!\n+        println!(\"{}\", number);\n+    }\n }\n ```\n \n-Alternatively, you can also use the struct pattern by using the correct\n-field names and binding them to new identifiers:\n+Alternatively, you can also use the struct pattern by using the correct field\n+names and binding them to new identifiers:\n \n ```\n # enum E {\n #     A(i32),\n # }\n # let e = E::A(42);\n match e {\n-    E::A { 0: number } => println!(\"{}\", number),\n+    E::A { 0: number } => { // ok!\n+        println!(\"{}\", number);\n+    }\n }\n ```"}]}