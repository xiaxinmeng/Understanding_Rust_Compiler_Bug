{"sha": "6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOWM5YjBmMThkNmUxNTg3ZmIyNzcwZWM5OTljZTA3YzE4ZmI0NmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-30T15:01:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T22:17:14Z"}, "message": "ty::layout: implement `layout_of` automatically as a default method.", "tree": {"sha": "e9fcf4d47abbdf087a81d9a8475e5b997af2141d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fcf4d47abbdf087a81d9a8475e5b997af2141d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e", "html_url": "https://github.com/rust-lang/rust/commit/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b710c0d48ce8d5873441a8078dcf992c1d951ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b710c0d48ce8d5873441a8078dcf992c1d951ac8", "html_url": "https://github.com/rust-lang/rust/commit/b710c0d48ce8d5873441a8078dcf992c1d951ac8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1d7a1f11b6c8028e9d9c8e96eae50d6b4f7dacc0", "filename": "src/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6a9c9b0f18d6e1587fb2770ec999ce07c18fb46e", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::layout::LayoutError;\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -259,8 +260,9 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        RevealAllLayoutCx(self.tcx).layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_layout_err(err, span, ty)\n     }\n }\n \n@@ -366,15 +368,13 @@ pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.still_further_specializable());\n-        self.0.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap_or_else(|e| {\n-            if let layout::LayoutError::SizeOverflow(_) = e {\n-                self.0.sess.fatal(&e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let layout::LayoutError::SizeOverflow(_) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}]}