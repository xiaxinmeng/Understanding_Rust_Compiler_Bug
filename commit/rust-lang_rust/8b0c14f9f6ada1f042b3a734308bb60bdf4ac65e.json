{"sha": "8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMGMxNGY5ZjZhZGExZjA0MmIzYTczNDMwOGJiNjBiZGY0YWM2NWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-06T09:51:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-06T09:51:06Z"}, "message": "ptr_offset: handle negative offsets", "tree": {"sha": "a755369e52bc922057791dc812ba8594b0421650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a755369e52bc922057791dc812ba8594b0421650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e", "html_url": "https://github.com/rust-lang/rust/commit/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a2f4dd152787cf506e75ec936c42b0b84a599f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a2f4dd152787cf506e75ec936c42b0b84a599f", "html_url": "https://github.com/rust-lang/rust/commit/b2a2f4dd152787cf506e75ec936c42b0b84a599f"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "2a90d3e12f4c0f41c51c0f4a837051aed579333e", "filename": "src/operator.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=8b0c14f9f6ada1f042b3a734308bb60bdf4ac65e", "patch": "@@ -112,11 +112,18 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             .ok_or_else(|| err_panic!(Overflow(mir::BinOp::Mul)))?;\n         // We do this first, to rule out overflows.\n         let offset_ptr = ptr.ptr_signed_offset(offset, self)?;\n-        // What we need to check is that starting at `ptr`,\n-        // we could do an access of size `offset`. Alignment does not matter.\n+        // What we need to check is that starting at `min(ptr, offset_ptr)`,\n+        // we could do an access of size `abs(offset)`. Alignment does not matter.\n+        let (min_ptr, abs_offset) = if offset >= 0 {\n+            (ptr, u64::try_from(offset).unwrap())\n+        } else {\n+            // Negative offset.\n+            // If the negation overflows, the result will be negative so the try_from will fail.\n+            (offset_ptr, u64::try_from(-offset).unwrap())\n+        };\n         self.memory.check_ptr_access_align(\n-            ptr,\n-            Size::from_bytes(u64::try_from(offset).unwrap()),\n+            min_ptr,\n+            Size::from_bytes(abs_offset),\n             None,\n             CheckInAllocMsg::InboundsTest,\n         )?;"}]}