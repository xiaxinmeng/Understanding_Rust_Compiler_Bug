{"sha": "c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MGVkNWQyMmM0YzJhNDg4NWZkZmRmYThjNmIwMDhkNzliMGZjMjk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-10-31T18:35:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-10-31T21:43:40Z"}, "message": "Share empty `Vec`s more within `MatcherPos::matches`.\n\n`create_matches` creates a `Vec<Rc<Vec<NamedMatch>>>`. Even though all the\ninner `Vec`s are empty, each one is created separately.\n\nThis commit changes `create_matches` so it instead creates one empty inner\n`Vec`, and shares it.\n\nThe commit also changes `MatcherPos::matches` to a boxed slice, because its\nlength doesn't change.", "tree": {"sha": "40c66feb00cdb17c2aba10d1b641f3230b6e9cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c66feb00cdb17c2aba10d1b641f3230b6e9cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "html_url": "https://github.com/rust-lang/rust/commit/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d586d5d2f51489821b471f20959333558c24b129", "url": "https://api.github.com/repos/rust-lang/rust/commits/d586d5d2f51489821b471f20959333558c24b129", "html_url": "https://github.com/rust-lang/rust/commit/d586d5d2f51489821b471f20959333558c24b129"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "bf91a233f7c699905bbe367bb152ceb80b3f62a0", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "patch": "@@ -168,7 +168,7 @@ struct MatcherPos<'a> {\n     /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`\n     /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one\n     /// wants the shared `matches`, one should use `up.matches`.\n-    matches: Vec<Rc<Vec<NamedMatch>>>,\n+    matches: Box<[Rc<Vec<NamedMatch>>]>,\n     /// The position in `matches` corresponding to the first metavar in this matcher's sequence of\n     /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds\n     /// to `matches[match_lo]`.\n@@ -278,9 +278,14 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n     })\n }\n \n-/// Initialize `len` empty shared `Vec`s to be used to store matches of metavars.\n-fn create_matches(len: usize) -> Vec<Rc<Vec<NamedMatch>>> {\n-    (0..len).into_iter().map(|_| Rc::new(Vec::new())).collect()\n+/// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n+fn create_matches(len: usize) -> Box<[Rc<Vec<NamedMatch>>]> {\n+    if len == 0 {\n+        vec![]\n+    } else {\n+        let empty_matches = Rc::new(Vec::new());\n+        vec![empty_matches.clone(); len]\n+    }.into_boxed_slice()\n }\n \n /// Generate the top-level matcher position in which the \"dot\" is before the first token of the"}]}