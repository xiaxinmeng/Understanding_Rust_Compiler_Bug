{"sha": "e2a362f9bbf94eedca42eceea2929e4d96f4eeee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYTM2MmY5YmJmOTRlZWRjYTQyZWNlZWEyOTI5ZTRkOTZmNGVlZWU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T07:04:33Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcore: use unboxed closures in `SlicePrelude` methods", "tree": {"sha": "63d85c8991e68248c4770818698723363d7dcf87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d85c8991e68248c4770818698723363d7dcf87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2a362f9bbf94eedca42eceea2929e4d96f4eeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a362f9bbf94eedca42eceea2929e4d96f4eeee", "html_url": "https://github.com/rust-lang/rust/commit/e2a362f9bbf94eedca42eceea2929e4d96f4eeee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2a362f9bbf94eedca42eceea2929e4d96f4eeee/comments", "author": null, "committer": null, "parents": [{"sha": "6ae9b9e54a9eb9711b32d663bb1a044f7540b4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae9b9e54a9eb9711b32d663bb1a044f7540b4b0", "html_url": "https://github.com/rust-lang/rust/commit/6ae9b9e54a9eb9711b32d663bb1a044f7540b4b0"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "af15099476578eda3551f3bcfe97ff577ee44469", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2a362f9bbf94eedca42eceea2929e4d96f4eeee/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a362f9bbf94eedca42eceea2929e4d96f4eeee/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e2a362f9bbf94eedca42eceea2929e4d96f4eeee", "patch": "@@ -238,7 +238,7 @@ pub trait SlicePrelude<T> for Sized? {\n     /// assert!(match r { Found(1...4) => true, _ => false, });\n     /// ```\n     #[unstable = \"waiting on unboxed closures\"]\n-    fn binary_search(&self, f: |&T| -> Ordering) -> BinarySearchResult;\n+    fn binary_search<F>(&self, f: F) -> BinarySearchResult where F: FnMut(&T) -> Ordering;\n \n     /// Return the number of elements in the slice\n     ///\n@@ -552,7 +552,7 @@ impl<T> SlicePrelude<T> for [T] {\n     }\n \n     #[unstable]\n-    fn binary_search(&self, f: |&T| -> Ordering) -> BinarySearchResult {\n+    fn binary_search<F>(&self, mut f: F) -> BinarySearchResult where F: FnMut(&T) -> Ordering {\n         let mut base : uint = 0;\n         let mut lim : uint = self.len();\n "}]}