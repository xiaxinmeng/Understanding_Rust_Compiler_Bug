{"sha": "5aa6c3a49a924c077641df6c5308586a0b0390cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTZjM2E0OWE5MjRjMDc3NjQxZGY2YzUzMDg1ODZhMGIwMzkwY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-28T23:45:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T20:46:26Z"}, "message": "rustdoc: Move const docs into the item tag", "tree": {"sha": "965417e0bcf8c311764ec86b863d25cce1b537ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/965417e0bcf8c311764ec86b863d25cce1b537ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa6c3a49a924c077641df6c5308586a0b0390cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa6c3a49a924c077641df6c5308586a0b0390cd", "html_url": "https://github.com/rust-lang/rust/commit/5aa6c3a49a924c077641df6c5308586a0b0390cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa6c3a49a924c077641df6c5308586a0b0390cd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e2b1b8f91c3381b9b02b53a544a5f35eb2c853", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e2b1b8f91c3381b9b02b53a544a5f35eb2c853", "html_url": "https://github.com/rust-lang/rust/commit/95e2b1b8f91c3381b9b02b53a544a5f35eb2c853"}], "stats": {"total": 156, "additions": 48, "deletions": 108}, "files": [{"sha": "dd8a7390fc7dd38231d1978ca7b996ad3cada081", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -247,7 +247,7 @@ fn fold_const_should_extract_docs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_const(fold, doc.topmod.consts[0]);\n+    let doc = fold_const(fold, doc.topmod.consts()[0]);\n     assert doc.brief == some(\"foo\");\n     assert doc.desc == some(\"bar\");\n }"}, {"sha": "f0450b69a7da2e8e63a79bb3a3bba39f5022c4af", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -101,8 +101,8 @@ fn should_promote_const_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.consts[0].brief == some(\"desc\");\n-    assert doc.topmod.consts[0].desc == none;\n+    assert doc.topmod.consts()[0].brief == some(\"desc\");\n+    assert doc.topmod.consts()[0].desc == none;\n }\n \n #[test]"}, {"sha": "4910233bfce7da490a72599e7ceeb3c092dc4f78", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -22,8 +22,7 @@ type moddoc = ~{\n     desc: option<str>,\n     items: [itemtag],\n     mods: modlist,\n-    fns: fnlist,\n-    consts: constlist\n+    fns: fnlist\n };\n \n type constdoc = ~{\n@@ -81,11 +80,19 @@ type resdoc = ~{\n \n // Just to break the structural recursive types\n enum modlist = [moddoc];\n-enum constlist = [constdoc];\n enum fnlist = [fndoc];\n \n impl util for moddoc {\n \n+    fn consts() -> [constdoc] {\n+        vec::filter_map(self.items) {|itemtag|\n+            alt itemtag {\n+              consttag(constdoc) { some(constdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n     fn enums() -> [enumdoc] {\n         vec::filter_map(self.items) {|itemtag|\n             alt itemtag {"}, {"sha": "f0c41c779452eb82882fae8d84a37286c8fe18e9", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -45,6 +45,11 @@ fn moddoc_from_mod(\n         desc: none,\n         items: vec::filter_map(module.items) {|item|\n             alt item.node {\n+              ast::item_const(_, _) {\n+                some(doc::consttag(\n+                    constdoc_from_const(item.ident, item.id)\n+                ))\n+              }\n               ast::item_enum(variants, _) {\n                 some(doc::enumtag(\n                     enumdoc_from_enum(item.ident, item.id, variants)\n@@ -82,17 +87,6 @@ fn moddoc_from_mod(\n                     none\n                   }\n                 }\n-            }),\n-        consts: doc::constlist(\n-            vec::filter_map(module.items) {|item|\n-                alt item.node {\n-                  ast::item_const(_, _) {\n-                    some(constdoc_from_const(item.ident, item.id))\n-                  }\n-                  _ {\n-                    none\n-                  }\n-                }\n             })\n     }\n }\n@@ -157,8 +151,8 @@ fn should_extract_const_name_and_id() {\n     let source = \"const a: int = 0;\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    assert doc.topmod.consts[0].id != 0;\n-    assert doc.topmod.consts[0].name == \"a\";\n+    assert doc.topmod.consts()[0].id != 0;\n+    assert doc.topmod.consts()[0].name == \"a\";\n }\n \n fn enumdoc_from_enum("}, {"sha": "7ad102efc17883025f56398ab786b1b31407d337", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -22,8 +22,6 @@ type fold_enum<T> = fn~(fold: fold<T>, doc: doc::enumdoc) -> doc::enumdoc;\n type fold_res<T> = fn~(fold: fold<T>, doc: doc::resdoc) -> doc::resdoc;\n type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n type fold_fnlist<T> = fn~(fold: fold<T>, list: doc::fnlist) -> doc::fnlist;\n-type fold_constlist<T> = fn~(\n-    fold: fold<T>, list: doc::constlist) -> doc::constlist;\n \n type t<T> = {\n     ctxt: T,\n@@ -34,8 +32,7 @@ type t<T> = {\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n     fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>\n+    fold_fnlist: fold_fnlist<T>\n };\n \n \n@@ -50,8 +47,7 @@ fn mk_fold<T:copy>(\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n     fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>\n+    fold_fnlist: fold_fnlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -62,8 +58,7 @@ fn mk_fold<T:copy>(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist\n+        fold_fnlist: fold_fnlist\n     })\n }\n \n@@ -77,8 +72,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_enum(f, d)},\n         {|f, d| default_seq_fold_res(f, d)},\n         {|f, d| default_seq_fold_modlist(f, d)},\n-        {|f, d| default_seq_fold_fnlist(f, d)},\n-        {|f, d| default_seq_fold_constlist(f, d)}\n+        {|f, d| default_seq_fold_fnlist(f, d)}\n     )\n }\n \n@@ -98,6 +92,9 @@ fn default_seq_fold_mod<T>(\n     ~{\n         items: vec::map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::consttag(constdoc) {\n+                doc::consttag(fold.fold_const(fold, constdoc))\n+              }\n               doc::enumtag(enumdoc) {\n                 doc::enumtag(fold.fold_enum(fold, enumdoc))\n               }\n@@ -107,8 +104,7 @@ fn default_seq_fold_mod<T>(\n             }\n         },\n         mods: fold.fold_modlist(fold, doc.mods),\n-        fns: fold.fold_fnlist(fold, doc.fns),\n-        consts: fold.fold_constlist(fold, doc.consts)\n+        fns: fold.fold_fnlist(fold, doc.fns)\n         with *doc\n     }\n }\n@@ -159,15 +155,6 @@ fn default_seq_fold_fnlist<T>(\n     })\n }\n \n-fn default_seq_fold_constlist<T>(\n-    fold: fold<T>,\n-    list: doc::constlist\n-) -> doc::constlist {\n-    doc::constlist(vec::map(*list) {|doc|\n-        fold.fold_const(fold, doc)\n-    })\n-}\n-\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "f7d450c0c403c92e24ede326b7df459603eae23a", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -81,10 +81,6 @@ fn write_mod_contents(\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n \n-    for constdoc in *doc.consts {\n-        write_const(ctxt, constdoc);\n-    }\n-\n     for fndoc in *doc.fns {\n         write_fn(ctxt, fndoc);\n     }\n@@ -95,6 +91,7 @@ fn write_mod_contents(\n \n     for itemtag in doc.items {\n         alt itemtag {\n+          doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n           doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n         }"}, {"sha": "814079a98f2e964cb036dded7952ee1d9006b5ee", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -24,8 +24,7 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist\n+        fold_fnlist: fold_fnlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -38,6 +37,14 @@ fn fold_mod(\n     let doc = ~{\n         items: vec::filter_map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::consttag(constdoc) {\n+                let doc = fold.fold_const(fold, constdoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::consttag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               doc::enumtag(enumdoc) {\n                 let doc = fold.fold_enum(fold, enumdoc);\n                 if fold.ctxt.have_docs {\n@@ -219,27 +226,13 @@ fn fold_const(\n     ret doc;\n }\n \n-fn fold_constlist(\n-    fold: fold::fold<ctxt>,\n-    list: doc::constlist\n-) -> doc::constlist {\n-    doc::constlist(vec::filter_map(*list) {|doc|\n-        let doc = fold.fold_const(fold, doc);\n-        if fold.ctxt.have_docs {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    })\n-}\n-\n #[test]\n fn should_elide_undocumented_consts() {\n     let source = \"const a: bool = true;\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::is_empty(*doc.topmod.consts);\n+    assert vec::is_empty(doc.topmod.consts());\n }\n \n fn fold_enum(fold: fold::fold<ctxt>, doc: doc::enumdoc) -> doc::enumdoc {"}, {"sha": "2bf7480932cb6e22e657fe718a19ac1ffafad2a2", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -23,8 +23,7 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     ~{\n         items: exported_items(fold.ctxt, doc),\n         mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n-        fns: doc::fnlist(exported_fns(fold.ctxt, doc)),\n-        consts: doc::constlist(exported_consts(fold.ctxt, doc))\n+        fns: doc::fnlist(exported_fns(fold.ctxt, doc))\n         with *doc\n     }\n }\n@@ -53,14 +52,6 @@ fn exported_fns(srv: astsrv::srv, doc: doc::moddoc) -> [doc::fndoc] {\n     )\n }\n \n-fn exported_consts(srv: astsrv::srv, doc: doc::moddoc) -> [doc::constdoc] {\n-    exported_things(\n-        srv, doc,\n-        exported_consts_from_crate,\n-        exported_consts_from_mod\n-    )\n-}\n-\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -116,27 +107,14 @@ fn exported_fns_from_mod(\n     exported_fns_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n-fn exported_consts_from_crate(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::constdoc] {\n-    exported_consts_from(srv, doc, is_exported_from_crate)\n-}\n-\n-fn exported_consts_from_mod(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::constdoc] {\n-    exported_consts_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n-}\n-\n fn exported_items_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n     is_exported: fn(astsrv::srv, str) -> bool\n ) -> [doc::itemtag] {\n     vec::filter_map(doc.items) { |itemtag|\n         let name = alt itemtag {\n+          doc::consttag(~{name, _}) { name }\n           doc::enumtag(~{name, _}) { name }\n           doc::restag(~{name, _}) { name }\n         };\n@@ -186,20 +164,6 @@ fn exported_mods_from(\n     }\n }\n \n-fn exported_consts_from(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc,\n-    is_exported: fn(astsrv::srv, str) -> bool\n-) -> [doc::constdoc] {\n-    vec::filter_map(*doc.consts) { |doc|\n-        if is_exported(srv, doc.name) {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    }\n-}\n-\n fn exported_variants_from(\n     srv: astsrv::srv,\n     doc: doc::enumdoc,\n@@ -285,7 +249,7 @@ fn should_prune_unexported_consts() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods[0].consts) == 1u;\n+    assert vec::len(doc.topmod.mods[0].consts()) == 1u;\n }\n \n #[test]\n@@ -294,7 +258,7 @@ fn should_prune_unexported_consts_from_top_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.consts) == 1u;\n+    assert vec::len(doc.topmod.consts()) == 1u;\n }\n \n #[test]"}, {"sha": "0b05afe310d7fe48972f2d539266e186a91e181b", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -53,8 +53,7 @@ fn test_run_passes() {\n                 desc: none,\n                 items: [],\n                 mods: doc::modlist([]),\n-                fns: doc::fnlist([]),\n-                consts: doc::constlist([])\n+                fns: doc::fnlist([])\n             }\n         }\n     }\n@@ -71,8 +70,7 @@ fn test_run_passes() {\n                 desc: none,\n                 items: [],\n                 mods: doc::modlist([]),\n-                fns: doc::fnlist([]),\n-                consts: doc::constlist([])\n+                fns: doc::fnlist([])\n             }\n         }\n     }"}, {"sha": "6ec3db4ec9c254ecf1fdb6e76ba84c4e14f27f7f", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -35,8 +35,8 @@ fn should_trim_const() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.consts[0].brief == some(\"brief\");\n-    assert doc.topmod.consts[0].desc == some(\"desc\");\n+    assert doc.topmod.consts()[0].brief == some(\"brief\");\n+    assert doc.topmod.consts()[0].desc == some(\"desc\");\n }\n \n #[test]"}, {"sha": "06f69fdbb1687e77b521739bc0b0e5a29270fbb0", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa6c3a49a924c077641df6c5308586a0b0390cd/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=5aa6c3a49a924c077641df6c5308586a0b0390cd", "patch": "@@ -183,7 +183,7 @@ fn should_add_const_types() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.consts[0].ty == some(\"bool\");\n+    assert doc.topmod.consts()[0].ty == some(\"bool\");\n }\n \n fn fold_enum("}]}