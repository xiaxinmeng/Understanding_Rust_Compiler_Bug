{"sha": "34de78fd8131ac8149caab086c9696899d8d2bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZGU3OGZkODEzMWFjODE0OWNhYWIwODZjOTY5Njg5OWQ4ZDJiZWQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-10T11:45:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T14:15:36Z"}, "message": "Generate inference vars and obligations for projections in opaque types instead of trying to normalize them.", "tree": {"sha": "b21aef73e7881ac011e0f6a2971b81da110973d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21aef73e7881ac011e0f6a2971b81da110973d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34de78fd8131ac8149caab086c9696899d8d2bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34de78fd8131ac8149caab086c9696899d8d2bed", "html_url": "https://github.com/rust-lang/rust/commit/34de78fd8131ac8149caab086c9696899d8d2bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34de78fd8131ac8149caab086c9696899d8d2bed/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb1a652156d2d4d72d933976632aba7eeb3d614", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb1a652156d2d4d72d933976632aba7eeb3d614", "html_url": "https://github.com/rust-lang/rust/commit/5fb1a652156d2d4d72d933976632aba7eeb3d614"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "04ce0c56c2aa0f7ec6baa4b72ea1cf934642b301", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/34de78fd8131ac8149caab086c9696899d8d2bed/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34de78fd8131ac8149caab086c9696899d8d2bed/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=34de78fd8131ac8149caab086c9696899d8d2bed", "patch": "@@ -1,4 +1,3 @@\n-use crate::infer::InferCtxtExt as _;\n use crate::traits::{self, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -995,31 +994,37 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         debug!(\"generated new type inference var {:?}\", ty_var.kind());\n \n         let item_bounds = tcx.explicit_item_bounds(def_id);\n-        debug!(?item_bounds);\n-        let bounds: Vec<_> =\n-            item_bounds.iter().map(|(bound, _)| bound.subst(tcx, substs)).collect();\n-\n-        let param_env = tcx.param_env(def_id);\n-        let InferOk { value: bounds, obligations } = infcx.partially_normalize_associated_types_in(\n-            ObligationCause::misc(self.value_span, self.body_id),\n-            param_env,\n-            bounds,\n-        );\n-        self.obligations.extend(obligations);\n \n-        debug!(?bounds);\n+        self.obligations.reserve(item_bounds.len());\n+        for (predicate, _) in item_bounds {\n+            debug!(?predicate);\n+            let predicate = predicate.subst(tcx, substs);\n+            debug!(?predicate);\n+\n+            // We can't normalize associated types from `rustc_infer`, but we can eagerly register inference variables for them.\n+            let predicate = predicate.fold_with(&mut BottomUpFolder {\n+                tcx,\n+                ty_op: |ty| match ty.kind() {\n+                    ty::Projection(projection_ty) => infcx.infer_projection(\n+                        self.param_env,\n+                        *projection_ty,\n+                        ObligationCause::misc(self.value_span, self.body_id),\n+                        0,\n+                        &mut self.obligations,\n+                    ),\n+                    _ => ty,\n+                },\n+                lt_op: |lt| lt,\n+                ct_op: |ct| ct,\n+            });\n+            debug!(?predicate);\n \n-        for predicate in &bounds {\n             if let ty::PredicateKind::Projection(projection) = predicate.kind().skip_binder() {\n                 if projection.ty.references_error() {\n                     // No point on adding these obligations since there's a type error involved.\n                     return ty_var;\n                 }\n             }\n-        }\n-\n-        self.obligations.reserve(bounds.len());\n-        for predicate in bounds {\n             // Change the predicate to refer to the type variable,\n             // which will be the concrete type instead of the opaque type.\n             // This also instantiates nested instances of `impl Trait`.\n@@ -1029,7 +1034,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                 traits::ObligationCause::new(self.value_span, self.body_id, traits::OpaqueType);\n \n             // Require that the predicate holds for the concrete type.\n-            debug!(\"instantiate_opaque_types: predicate={:?}\", predicate);\n+            debug!(?predicate);\n             self.obligations.push(traits::Obligation::new(cause, self.param_env, predicate));\n         }\n "}, {"sha": "8761e4cf66a658f7d3526d7af29f3941cd2ebea1", "filename": "src/test/ui/impl-trait/issue-72911.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34de78fd8131ac8149caab086c9696899d8d2bed/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34de78fd8131ac8149caab086c9696899d8d2bed/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs?ref=34de78fd8131ac8149caab086c9696899d8d2bed", "patch": "@@ -16,6 +16,7 @@ fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = Lint>\n \n fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n     //~^ ERROR: failed to resolve\n+    //~| ERROR: `()` is not an iterator\n     unimplemented!()\n }\n "}, {"sha": "6c6d9cbe23e1084ba9d14ce5afb5391c1f9fc80d", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34de78fd8131ac8149caab086c9696899d8d2bed/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34de78fd8131ac8149caab086c9696899d8d2bed/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=34de78fd8131ac8149caab086c9696899d8d2bed", "patch": "@@ -28,7 +28,15 @@ LL | fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = L\n LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n    |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n \n-error: aborting due to 3 previous errors\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-72911.rs:17:20\n+   |\n+LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0433, E0720.\n-For more information about an error, try `rustc --explain E0433`.\n+Some errors have detailed explanations: E0277, E0433, E0720.\n+For more information about an error, try `rustc --explain E0277`."}]}