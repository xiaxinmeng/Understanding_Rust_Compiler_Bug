{"sha": "9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "node_id": "C_kwDOAAsO6NoAKDlmYzNmYzNhMGNmNjNiOWJlMzE3ZjkyYjg0ZGNhYTliMjAxNjIyNzk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T21:44:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T21:44:26Z"}, "message": "Rollup merge of #97130 - notriddle:notriddle/collect-trait-impls-dup, r=GuillaumeGomez\n\nrustdoc: avoid including impl blocks with filled-in generics\n\nFixes #94937\n\n# Before\n\n![image](https://user-images.githubusercontent.com/1593513/168933282-02ccc4ae-9c89-4836-ba34-e2bd83946105.png)\n\n# After\n\n![image](https://user-images.githubusercontent.com/1593513/168933255-4c17407d-d8d1-406e-87f5-9ea809437173.png)", "tree": {"sha": "bc5acefdf6d903a9a9c9a6798150ff07e3fa56f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5acefdf6d903a9a9c9a6798150ff07e3fa56f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil926CRBK7hj4Ov3rIwAA1P4IAElbffSASYcQlRsu9LkDPBXA\n6jY4ozAwSbNiEWdU2eWrMkrWjuc+r39/EKypPXXap1Iq46szXEDtxSmP5R8z91/A\nTaER63Q0pM7+PX2qdzI8aFIXXgbJDLNkVgVQbhq7PwKR3p1mDYFwG3reUATenMmP\nP8fwiMr7THNXYNWnh7mVi7DavCrUyCXvUMKDWtRCBBZbP23LGx7IhezVLz9jOvLT\nB17fty7jXuYKMdAF9z1KXtXjYzHnkiKCM+q1J3+FAdpxdylPJol6aVbj/+PjIFgN\nRN3902j7+FN0aE1+bnFZjVYRX4MmeCKBY3z+O5YP1p3R3f+q3WiiuQQFKB341C8=\n=720X\n-----END PGP SIGNATURE-----\n", "payload": "tree bc5acefdf6d903a9a9c9a6798150ff07e3fa56f2\nparent 3ed9bbe9700f8ea46528dedb9fb242167b01a802\nparent 434adfff42a3992aaa4c0a1471ee71fb136a61cb\nauthor Yuki Okushi <jtitor@2k36.org> 1654119866 +0900\ncommitter GitHub <noreply@github.com> 1654119866 +0900\n\nRollup merge of #97130 - notriddle:notriddle/collect-trait-impls-dup, r=GuillaumeGomez\n\nrustdoc: avoid including impl blocks with filled-in generics\n\nFixes #94937\n\n# Before\n\n![image](https://user-images.githubusercontent.com/1593513/168933282-02ccc4ae-9c89-4836-ba34-e2bd83946105.png)\n\n# After\n\n![image](https://user-images.githubusercontent.com/1593513/168933255-4c17407d-d8d1-406e-87f5-9ea809437173.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "html_url": "https://github.com/rust-lang/rust/commit/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed9bbe9700f8ea46528dedb9fb242167b01a802", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9bbe9700f8ea46528dedb9fb242167b01a802", "html_url": "https://github.com/rust-lang/rust/commit/3ed9bbe9700f8ea46528dedb9fb242167b01a802"}, {"sha": "434adfff42a3992aaa4c0a1471ee71fb136a61cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/434adfff42a3992aaa4c0a1471ee71fb136a61cb", "html_url": "https://github.com/rust-lang/rust/commit/434adfff42a3992aaa4c0a1471ee71fb136a61cb"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "6ea33d763b185d580bccdc3d5afbab4b92e3bb66", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "patch": "@@ -9,7 +9,7 @@ use crate::visit::DocVisitor;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_span::symbol::sym;\n \n pub(crate) const COLLECT_TRAIT_IMPLS: Pass = Pass {\n@@ -81,8 +81,35 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n             // Do not calculate blanket impl list for docs that are not going to be rendered.\n             // While the `impl` blocks themselves are only in `libcore`, the module with `doc`\n             // attached is directly included in `libstd` as well.\n+            let tcx = cx.tcx;\n             if did.is_local() {\n-                for def_id in prim.impls(cx.tcx) {\n+                for def_id in prim.impls(tcx).filter(|def_id| {\n+                    // Avoid including impl blocks with filled-in generics.\n+                    // https://github.com/rust-lang/rust/issues/94937\n+                    //\n+                    // FIXME(notriddle): https://github.com/rust-lang/rust/issues/97129\n+                    //\n+                    // This tactic of using inherent impl blocks for getting\n+                    // auto traits and blanket impls is a hack. What we really\n+                    // want is to check if `[T]` impls `Send`, which has\n+                    // nothing to do with the inherent impl.\n+                    //\n+                    // Rustdoc currently uses these `impl` block as a source of\n+                    // the `Ty`, as well as the `ParamEnv`, `SubstsRef`, and\n+                    // `Generics`. To avoid relying on the `impl` block, these\n+                    // things would need to be created from wholecloth, in a\n+                    // form that is valid for use in type inference.\n+                    let ty = tcx.type_of(def_id);\n+                    match ty.kind() {\n+                        ty::Slice(ty)\n+                        | ty::Ref(_, ty, _)\n+                        | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {\n+                            matches!(ty.kind(), ty::Param(..))\n+                        }\n+                        ty::Tuple(tys) => tys.iter().all(|ty| matches!(ty.kind(), ty::Param(..))),\n+                        _ => true,\n+                    }\n+                }) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items_external.extend(impls.filter(|i| cx.inlined.insert(i.item_id)));\n                 }"}, {"sha": "b3f511bc1f153fc423b713ea2866bccc7cc4d65f", "filename": "src/test/rustdoc/primitive-slice-auto-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc3fc3a0cf63b9be317f92b84dcaa9b20162279/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=9fc3fc3a0cf63b9be317f92b84dcaa9b20162279", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: --crate-type lib --edition 2018\n+\n+#![crate_name = \"foo\"]\n+#![feature(rustdoc_internals)]\n+\n+// @has foo/primitive.slice.html '//a[@class=\"primitive\"]' 'slice'\n+// @has - '//span[@class=\"in-band\"]' 'Primitive Type slice'\n+// @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n+// @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T] where T: Send'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T] where T: Sync'\n+#[doc(primitive = \"slice\")]\n+/// this is a test!\n+mod slice_prim {}"}]}