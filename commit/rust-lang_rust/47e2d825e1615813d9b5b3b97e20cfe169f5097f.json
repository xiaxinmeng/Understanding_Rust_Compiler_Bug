{"sha": "47e2d825e1615813d9b5b3b97e20cfe169f5097f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTJkODI1ZTE2MTU4MTNkOWI1YjNiOTdlMjBjZmUxNjlmNTA5N2Y=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T09:28:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:47:53Z"}, "message": "Add intern table for `List<ProjectionElem<'tcx, (), ()>>`.\n\nAlso added alias `ProjectionKind<'tcx>` for `ProjectionElem<'tcx, (), ()>`.", "tree": {"sha": "6f565952a42d513909e76673cc3b068282690d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f565952a42d513909e76673cc3b068282690d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e2d825e1615813d9b5b3b97e20cfe169f5097f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e2d825e1615813d9b5b3b97e20cfe169f5097f", "html_url": "https://github.com/rust-lang/rust/commit/47e2d825e1615813d9b5b3b97e20cfe169f5097f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e2d825e1615813d9b5b3b97e20cfe169f5097f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92cbe4772a1c195eab16ce4cf51eff36fddf0dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/92cbe4772a1c195eab16ce4cf51eff36fddf0dd5", "html_url": "https://github.com/rust-lang/rust/commit/92cbe4772a1c195eab16ce4cf51eff36fddf0dd5"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "952783a91b2ed9d8b94fca79af742126c6b46c72", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47e2d825e1615813d9b5b3b97e20cfe169f5097f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e2d825e1615813d9b5b3b97e20cfe169f5097f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=47e2d825e1615813d9b5b3b97e20cfe169f5097f", "patch": "@@ -1944,6 +1944,10 @@ pub type PlaceProjection<'tcx> = Projection<'tcx, Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n+/// Alias for projections as they appear in `UserTypeProjection`, where we\n+/// need neither the `V` parameter for `Index` nor the `T` for `Field`.\n+pub type ProjectionKind<'tcx> = ProjectionElem<'tcx, (), ()>;\n+\n newtype_index! {\n     pub struct Field {\n         DEBUG_FORMAT = \"field[{}]\"\n@@ -2531,6 +2535,10 @@ pub struct UserTypeProjection<'tcx> {\n     pub projs: Vec<ProjectionElem<'tcx, (), ()>>,\n }\n \n+impl<'tcx> Copy for ProjectionKind<'tcx> { }\n+\n+CloneTypeFoldableAndLiftImpls! { ProjectionKind<'tcx>, }\n+\n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         use mir::ProjectionElem::*;"}, {"sha": "1e3b372c02907af48fb2d9fa748bf966c72e1f1c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47e2d825e1615813d9b5b3b97e20cfe169f5097f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e2d825e1615813d9b5b3b97e20cfe169f5097f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=47e2d825e1615813d9b5b3b97e20cfe169f5097f", "patch": "@@ -31,7 +31,7 @@ use middle::cstore::EncodedMetadata;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n-use mir::{self, Mir, interpret};\n+use mir::{self, Mir, interpret, ProjectionKind};\n use mir::interpret::Allocation;\n use ty::subst::{CanonicalUserSubsts, Kind, Substs, Subst};\n use ty::ReprOptions;\n@@ -132,6 +132,7 @@ pub struct CtxtInterners<'tcx> {\n     clauses: InternedSet<'tcx, List<Clause<'tcx>>>,\n     goal: InternedSet<'tcx, GoalKind<'tcx>>,\n     goal_list: InternedSet<'tcx, List<Goal<'tcx>>>,\n+    projs: InternedSet<'tcx, List<ProjectionKind<'tcx>>>,\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n@@ -149,6 +150,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             clauses: Default::default(),\n             goal: Default::default(),\n             goal_list: Default::default(),\n+            projs: Default::default(),\n         }\n     }\n \n@@ -2294,6 +2296,13 @@ impl<'tcx: 'lcx, 'lcx> Borrow<[Kind<'lcx>]> for Interned<'tcx, Substs<'tcx>> {\n     }\n }\n \n+impl<'tcx: 'lcx, 'lcx> Borrow<[ProjectionKind<'lcx>]>\n+    for Interned<'tcx, List<ProjectionKind<'tcx>>> {\n+    fn borrow<'a>(&'a self) -> &'a [ProjectionKind<'lcx>] {\n+        &self.0[..]\n+    }\n+}\n+\n impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n     fn borrow<'a>(&'a self) -> &'a RegionKind {\n         &self.0\n@@ -2441,7 +2450,8 @@ slice_interners!(\n     type_list: _intern_type_list(Ty),\n     substs: _intern_substs(Kind),\n     clauses: _intern_clauses(Clause),\n-    goal_list: _intern_goals(Goal)\n+    goal_list: _intern_goals(Goal),\n+    projs: _intern_projs(ProjectionKind)\n );\n \n // This isn't a perfect fit: CanonicalVarInfo slices are always\n@@ -2743,6 +2753,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn intern_projs(self, ps: &[ProjectionKind<'tcx>]) -> &'tcx List<ProjectionKind<'tcx>> {\n+        if ps.len() == 0 {\n+            List::empty()\n+        } else {\n+            self._intern_projs(ps)\n+        }\n+    }\n+\n     pub fn intern_canonical_var_infos(self, ts: &[CanonicalVarInfo]) -> CanonicalVarInfos<'gcx> {\n         if ts.len() == 0 {\n             List::empty()"}]}