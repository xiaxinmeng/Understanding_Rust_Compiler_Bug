{"sha": "b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDZmZTNhZTk2YTdmMWY0NzhkYzZiYWYyOWI4ZTRjZmY1YWI4NjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T20:33:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T20:58:44Z"}, "message": "Review comments\n\n- Change wording of suggestion\n- Move recovery logic to `diagnostics.rs`\n- Reduce ammount of code duplication", "tree": {"sha": "cacec5fe5fed51d05d3829435284069e6299e38e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacec5fe5fed51d05d3829435284069e6299e38e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "html_url": "https://github.com/rust-lang/rust/commit/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0183a575f686003586ca3308db8a55d6224f4789", "url": "https://api.github.com/repos/rust-lang/rust/commits/0183a575f686003586ca3308db8a55d6224f4789", "html_url": "https://github.com/rust-lang/rust/commit/0183a575f686003586ca3308db8a55d6224f4789"}], "stats": {"total": 190, "additions": 81, "deletions": 109}, "files": [{"sha": "61453e35095bebd8085af45c78a6455b239d7720", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "patch": "@@ -1,5 +1,5 @@\n use crate::ast;\n-use crate::ast::{Expr, ExprKind, Item, ItemKind, Pat, PatKind, QSelf, Ty, TyKind};\n+use crate::ast::{BlockCheckMode, Expr, ExprKind, Item, ItemKind, Pat, PatKind, QSelf, Ty, TyKind};\n use crate::parse::parser::PathStyle;\n use crate::parse::token;\n use crate::parse::PResult;\n@@ -223,4 +223,42 @@ impl<'a> Parser<'a> {\n             false\n         }\n     }\n+\n+    /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n+    /// and `await { <expr> }`.\n+    crate fn parse_incorrect_await_syntax(\n+        &mut self,\n+        lo: Span,\n+        await_sp: Span,\n+    ) -> PResult<'a, (Span, ExprKind)> {\n+        let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n+        let expr = if self.token == token::OpenDelim(token::Brace) {\n+            // Handle `await { <expr> }`.\n+            // This needs to be handled separatedly from the next arm to avoid\n+            // interpreting `await { <expr> }?` as `<expr>?.await`.\n+            self.parse_block_expr(\n+                None,\n+                self.span,\n+                BlockCheckMode::Default,\n+                ThinVec::new(),\n+            )\n+        } else {\n+            self.parse_expr()\n+        }.map_err(|mut err| {\n+            err.span_label(await_sp, \"while parsing this incorrect await expression\");\n+            err\n+        })?;\n+        let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+            .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n+        let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n+        let sp = lo.to(expr.span);\n+        let app = match expr.node {\n+            ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n+            _ => Applicability::MachineApplicable,\n+        };\n+        self.struct_span_err(sp, \"incorrect use of `await`\")\n+            .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n+            .emit();\n+        Ok((sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr)))\n+    }\n }"}, {"sha": "bb0f9fa9502a0ccacb890b173c95e5d4023e5b98", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 95, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "patch": "@@ -2629,10 +2629,9 @@ impl<'a> Parser<'a> {\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n                 } else if self.span.rust_2018() && self.eat_keyword(keywords::Await) {\n-                    let await_sp = self.prev_span;\n-                    let e = self.parse_async_macro_or_stmt(lo, await_sp)?;\n-                    hi = e.0;\n-                    ex = e.1;\n+                    let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n+                    hi = await_hi;\n+                    ex = e_kind;\n                 } else if self.token.is_path_start() {\n                     let path = self.parse_path(PathStyle::Expr)?;\n \n@@ -2697,97 +2696,29 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    fn parse_async_macro_or_stmt(\n+    /// Parse `await!(<expr>)` calls, or alternatively recover from incorrect but reasonable\n+    /// alternative syntaxes `await <expr>`, `await? <expr>`, `await(<expr>)` and\n+    /// `await { <expr> }`.\n+    fn parse_await_macro_or_alt(\n         &mut self,\n         lo: Span,\n         await_sp: Span,\n     ) -> PResult<'a, (Span, ExprKind)> {\n-        Ok(match self.token {\n-            token::Not => {\n-                // Handle correct `await!(<expr>)`\n-                // FIXME: make this an error when `await!` is no longer supported\n-                // https://github.com/rust-lang/rust/issues/60610\n-                self.expect(&token::Not)?;\n-                self.expect(&token::OpenDelim(token::Paren))?;\n-                let expr = self.parse_expr().map_err(|mut err| {\n-                    err.span_label(\n-                        await_sp,\n-                        \"while parsing this await macro call\",\n-                    );\n-                    err\n-                })?;\n-                self.expect(&token::CloseDelim(token::Paren))?;\n-                (expr.span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr))\n-            }\n-            token::Question => {\n-                // Handle `await? <expr>`\n-                self.bump(); // `?`\n-                let expr = self.parse_expr().map_err(|mut err| {\n-                    err.span_label(\n-                        await_sp,\n-                        \"while parsing this incorrect await statement\",\n-                    );\n-                    err\n-                })?;\n-                let sp = lo.to(expr.span);\n-                let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n-                    .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-                let expr = self.mk_expr(\n-                    sp,\n-                    ExprKind::Await(ast::AwaitOrigin::FieldLike, expr),\n-                    ThinVec::new(),\n-                );\n-                let mut err = self.struct_span_err(\n-                    sp,\n-                    \"incorrect use of `await`\",\n-                );\n-                err.span_suggestion(\n-                    sp,\n-                    \"`await` is not a statement\",\n-                    format!(\"{}.await?\", expr_str),\n-                    Applicability::MachineApplicable,\n-                );\n-                err.emit();\n-                (sp, ExprKind::Try(expr))\n-            }\n-            ref t => {\n-                // Handle `await <expr>`\n-                let expr = if t == &token::OpenDelim(token::Brace) {\n-                    // Handle `await { <expr> }`\n-                    // this needs to be handled separatedly from the next arm to avoid\n-                    // interpreting `await { <expr> }?` as `<expr>?.await`\n-                    self.parse_block_expr(\n-                        None,\n-                        self.span,\n-                        BlockCheckMode::Default,\n-                        ThinVec::new(),\n-                    )\n-                } else {\n-                    self.parse_expr()\n-                }.map_err(|mut err| {\n-                    err.span_label(\n-                        await_sp,\n-                        \"while parsing this incorrect await statement\",\n-                    );\n-                    err\n-                })?;\n-                let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n-                    .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-                let sp = lo.to(expr.span);\n-                let mut err = self.struct_span_err(\n-                    sp,\n-                    \"incorrect use of `await`\",\n-                );\n-                err.span_suggestion(\n-                    sp,\n-                    \"`await` is not a statement\",\n-                    format!(\"{}.await\", expr_str),\n-                    Applicability::MachineApplicable,\n-                );\n-                err.emit();\n-                (sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr))\n-            }\n-        })\n+        if self.token == token::Not {\n+            // Handle correct `await!(<expr>)`.\n+            // FIXME: make this an error when `await!` is no longer supported\n+            // https://github.com/rust-lang/rust/issues/60610\n+            self.expect(&token::Not)?;\n+            self.expect(&token::OpenDelim(token::Paren))?;\n+            let expr = self.parse_expr().map_err(|mut err| {\n+                err.span_label(await_sp, \"while parsing this await macro call\");\n+                err\n+            })?;\n+            self.expect(&token::CloseDelim(token::Paren))?;\n+            Ok((expr.span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr)))\n+        } else { // Handle `await <expr>`.\n+            self.parse_incorrect_await_syntax(lo, await_sp)\n+        }\n     }\n \n     fn maybe_parse_struct_expr(\n@@ -2938,10 +2869,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a block or unsafe block.\n-    fn parse_block_expr(&mut self, opt_label: Option<Label>,\n-                            lo: Span, blk_mode: BlockCheckMode,\n-                            outer_attrs: ThinVec<Attribute>)\n-                            -> PResult<'a, P<Expr>> {\n+    crate fn parse_block_expr(\n+        &mut self,\n+        opt_label: Option<Label>,\n+        lo: Span,\n+        blk_mode: BlockCheckMode,\n+        outer_attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n         let mut attrs = outer_attrs;"}, {"sha": "380da4448ad323ee0a2853215a212de245aaac21", "filename": "src/test/ui/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=b9d6fe3ae96a7f1f478dc6baf29b8e4cff5ab865", "patch": "@@ -2,43 +2,43 @@ error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:10:13\n    |\n LL |     let _ = await bar();\n-   |             ^^^^^^^^^^^ help: `await` is not a statement: `bar().await`\n+   |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:14:13\n    |\n LL |     let _ = await? bar();\n-   |             ^^^^^^^^^^^^ help: `await` is not a statement: `bar().await?`\n+   |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:18:13\n    |\n LL |     let _ = await bar()?;\n-   |             ^^^^^^^^^^^^ help: `await` is not a statement: `bar()?.await`\n+   |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:23:13\n    |\n LL |     let _ = await { bar() };\n-   |             ^^^^^^^^^^^^^^^ help: `await` is not a statement: `{ bar() }.await`\n+   |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:27:13\n    |\n LL |     let _ = await(bar());\n-   |             ^^^^^^^^^^^^ help: `await` is not a statement: `(bar()).await`\n+   |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `(bar()).await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:31:13\n    |\n LL |     let _ = await { bar() }?;\n-   |             ^^^^^^^^^^^^^^^ help: `await` is not a statement: `{ bar() }.await`\n+   |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:35:14\n    |\n LL |     let _ = (await bar())?;\n-   |              ^^^^^^^^^^^ help: `await` is not a statement: `bar().await`\n+   |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:39:24\n@@ -56,25 +56,25 @@ error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:55:13\n    |\n LL |     let _ = await bar();\n-   |             ^^^^^^^^^^^ help: `await` is not a statement: `bar().await`\n+   |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:60:13\n    |\n LL |     let _ = await? bar();\n-   |             ^^^^^^^^^^^^ help: `await` is not a statement: `bar().await?`\n+   |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:65:13\n    |\n LL |     let _ = await bar()?;\n-   |             ^^^^^^^^^^^^ help: `await` is not a statement: `bar()?.await`\n+   |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:70:14\n    |\n LL |     let _ = (await bar())?;\n-   |              ^^^^^^^^^^^ help: `await` is not a statement: `bar().await`\n+   |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:75:24\n@@ -94,13 +94,13 @@ error: expected expression, found `=>`\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n-   |                   while parsing this incorrect await statement\n+   |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n   --> $DIR/incorrect-syntax-suggestions.rs:108:11\n    |\n LL |     match await { await => () }\n-   |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is not a statement: `{ await => () }.await`\n+   |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n   --> $DIR/incorrect-syntax-suggestions.rs:111:1"}]}