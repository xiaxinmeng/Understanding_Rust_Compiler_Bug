{"sha": "23e443a5faab17059be8b9035bfa6f608cff1530", "node_id": "C_kwDOAAsO6NoAKDIzZTQ0M2E1ZmFhYjE3MDU5YmU4YjkwMzViZmE2ZjYwOGNmZjE1MzA", "commit": {"author": {"name": "Wang Qilin", "email": "qilin.wang@huawei.com", "date": "2023-05-05T09:18:42Z"}, "committer": {"name": "Wang Qilin", "email": "qilin.wang@huawei.com", "date": "2023-05-05T09:46:10Z"}, "message": "support enable rpath in each target independently", "tree": {"sha": "34c3ec3a3f9f30f861f01f0aa8eedaf011415047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c3ec3a3f9f30f861f01f0aa8eedaf011415047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e443a5faab17059be8b9035bfa6f608cff1530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e443a5faab17059be8b9035bfa6f608cff1530", "html_url": "https://github.com/rust-lang/rust/commit/23e443a5faab17059be8b9035bfa6f608cff1530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e443a5faab17059be8b9035bfa6f608cff1530/comments", "author": {"login": "wangkirin", "id": 12807239, "node_id": "MDQ6VXNlcjEyODA3MjM5", "avatar_url": "https://avatars.githubusercontent.com/u/12807239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangkirin", "html_url": "https://github.com/wangkirin", "followers_url": "https://api.github.com/users/wangkirin/followers", "following_url": "https://api.github.com/users/wangkirin/following{/other_user}", "gists_url": "https://api.github.com/users/wangkirin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangkirin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangkirin/subscriptions", "organizations_url": "https://api.github.com/users/wangkirin/orgs", "repos_url": "https://api.github.com/users/wangkirin/repos", "events_url": "https://api.github.com/users/wangkirin/events{/privacy}", "received_events_url": "https://api.github.com/users/wangkirin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wangkirin", "id": 12807239, "node_id": "MDQ6VXNlcjEyODA3MjM5", "avatar_url": "https://avatars.githubusercontent.com/u/12807239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangkirin", "html_url": "https://github.com/wangkirin", "followers_url": "https://api.github.com/users/wangkirin/followers", "following_url": "https://api.github.com/users/wangkirin/following{/other_user}", "gists_url": "https://api.github.com/users/wangkirin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangkirin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangkirin/subscriptions", "organizations_url": "https://api.github.com/users/wangkirin/orgs", "repos_url": "https://api.github.com/users/wangkirin/repos", "events_url": "https://api.github.com/users/wangkirin/events{/privacy}", "received_events_url": "https://api.github.com/users/wangkirin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5559e338256f17ada6d82b429acc2dbd8facc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5559e338256f17ada6d82b429acc2dbd8facc9c", "html_url": "https://github.com/rust-lang/rust/commit/f5559e338256f17ada6d82b429acc2dbd8facc9c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "d0eaa9fd7ffac3dd33bdc810e37abba949d829a1", "filename": "config.example.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e443a5faab17059be8b9035bfa6f608cff1530/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23e443a5faab17059be8b9035bfa6f608cff1530/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=23e443a5faab17059be8b9035bfa6f608cff1530", "patch": "@@ -750,6 +750,10 @@ changelog-seen = 2\n # This option will override the same option under [build] section.\n #profiler = build.profiler (bool)\n \n+# This option supports enable `rpath` in each target independently, \n+# and will override the same option under [rust] section. It only works on Unix platforms\n+#rpath = rust.rpath (bool)\n+\n # Force static or dynamic linkage of the standard library for this target. If\n # this target is a host for rustc, this will also affect the linkage of the\n # compiler itself. This is useful for building rustc on targets that normally"}, {"sha": "b8e50342f92c2deab5364ed20da6ef01133043cf", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23e443a5faab17059be8b9035bfa6f608cff1530/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e443a5faab17059be8b9035bfa6f608cff1530/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=23e443a5faab17059be8b9035bfa6f608cff1530", "patch": "@@ -1610,7 +1610,7 @@ impl<'a> Builder<'a> {\n         // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n         // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n         // to change a flag in a binary?\n-        if self.config.rust_rpath && util::use_host_linker(target) {\n+        if self.config.rpath_enabled(target) && util::use_host_linker(target) {\n             let rpath = if target.contains(\"apple\") {\n                 // Note that we need to take one extra step on macOS to also pass\n                 // `-Wl,-instal_name,@rpath/...` to get things to work right. To"}, {"sha": "7a1d3e6dc48816315167aa1a0139d55f05944fd3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23e443a5faab17059be8b9035bfa6f608cff1530/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e443a5faab17059be8b9035bfa6f608cff1530/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=23e443a5faab17059be8b9035bfa6f608cff1530", "patch": "@@ -455,6 +455,7 @@ pub struct Target {\n     pub ndk: Option<PathBuf>,\n     pub sanitizers: Option<bool>,\n     pub profiler: Option<bool>,\n+    pub rpath: Option<bool>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub musl_libdir: Option<PathBuf>,\n@@ -800,6 +801,7 @@ define_config! {\n         android_ndk: Option<String> = \"android-ndk\",\n         sanitizers: Option<bool> = \"sanitizers\",\n         profiler: Option<bool> = \"profiler\",\n+        rpath: Option<bool> = \"rpath\",\n         crt_static: Option<bool> = \"crt-static\",\n         musl_root: Option<String> = \"musl-root\",\n         musl_libdir: Option<String> = \"musl-libdir\",\n@@ -1301,6 +1303,7 @@ impl Config {\n                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n                 target.sanitizers = cfg.sanitizers;\n                 target.profiler = cfg.profiler;\n+                target.rpath = cfg.rpath;\n \n                 config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n@@ -1610,6 +1613,10 @@ impl Config {\n         self.target_config.values().any(|t| t.profiler == Some(true)) || self.profiler\n     }\n \n+    pub fn rpath_enabled(&self, target: TargetSelection) -> bool {\n+        self.target_config.get(&target).map(|t| t.rpath).flatten().unwrap_or(self.rust_rpath)\n+    }\n+\n     pub fn llvm_enabled(&self) -> bool {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n     }"}]}