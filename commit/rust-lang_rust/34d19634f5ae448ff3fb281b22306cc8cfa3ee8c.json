{"sha": "34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZDE5NjM0ZjVhZTQ0OGZmM2ZiMjgxYjIyMzA2Y2M4Y2ZhM2VlOGM=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-10T10:53:43Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-12T09:52:38Z"}, "message": "Use smaller spans for some structured suggestions\n\nUse more accurate suggestion spans for\n\n* argument parse error\n* fully qualified path\n* missing code block type\n* numeric casts\n* E0212", "tree": {"sha": "05bbd5cfee8adc8e69a6175675107ea2e9d345bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05bbd5cfee8adc8e69a6175675107ea2e9d345bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "html_url": "https://github.com/rust-lang/rust/commit/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}], "stats": {"total": 2158, "additions": 1200, "deletions": 958}, "files": [{"sha": "c6b9220e1de0f8614a23568ea646acd16ad9a59b", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -298,6 +298,21 @@ impl Diagnostic {\n         )\n     }\n \n+    /// Show a suggestion that has multiple parts to it, always as it's own subdiagnostic.\n+    /// In other words, multiple changes need to be applied as part of this suggestion.\n+    pub fn multipart_suggestion_verbose(\n+        &mut self,\n+        msg: &str,\n+        suggestion: Vec<(Span, String)>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.multipart_suggestion_with_style(\n+            msg,\n+            suggestion,\n+            applicability,\n+            SuggestionStyle::ShowAlways,\n+        )\n+    }\n     /// [`Diagnostic::multipart_suggestion()`] but you can set the [`SuggestionStyle`].\n     pub fn multipart_suggestion_with_style(\n         &mut self,"}, {"sha": "786d66f715f764eac4af62a62565931ea406e184", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -257,6 +257,20 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::multipart_suggestion()`].\n+    pub fn multipart_suggestion_verbose(\n+        &mut self,\n+        msg: &str,\n+        suggestion: Vec<(Span, String)>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.multipart_suggestion_verbose(msg, suggestion, applicability);\n+        self\n+    }\n+\n     /// See [`Diagnostic::tool_only_multipart_suggestion()`].\n     pub fn tool_only_multipart_suggestion(\n         &mut self,"}, {"sha": "9f1052fba158ef895e3d3b6f42889f6def371862", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -1618,50 +1618,57 @@ impl<'a> Parser<'a> {\n         {\n             let rfc_note = \"anonymous parameters are removed in the 2018 edition (see RFC 1685)\";\n \n-            let (ident, self_sugg, param_sugg, type_sugg) = match pat.kind {\n-                PatKind::Ident(_, ident, _) => (\n-                    ident,\n-                    format!(\"self: {}\", ident),\n-                    format!(\"{}: TypeName\", ident),\n-                    format!(\"_: {}\", ident),\n-                ),\n-                // Also catches `fn foo(&a)`.\n-                PatKind::Ref(ref pat, mutab)\n-                    if matches!(pat.clone().into_inner().kind, PatKind::Ident(..)) =>\n-                {\n-                    match pat.clone().into_inner().kind {\n-                        PatKind::Ident(_, ident, _) => {\n-                            let mutab = mutab.prefix_str();\n-                            (\n-                                ident,\n-                                format!(\"self: &{}{}\", mutab, ident),\n-                                format!(\"{}: &{}TypeName\", ident, mutab),\n-                                format!(\"_: &{}{}\", mutab, ident),\n-                            )\n+            let (ident, self_sugg, param_sugg, type_sugg, self_span, param_span, type_span) =\n+                match pat.kind {\n+                    PatKind::Ident(_, ident, _) => (\n+                        ident,\n+                        \"self: \".to_string(),\n+                        \": TypeName\".to_string(),\n+                        \"_: \".to_string(),\n+                        pat.span.shrink_to_lo(),\n+                        pat.span.shrink_to_hi(),\n+                        pat.span.shrink_to_lo(),\n+                    ),\n+                    // Also catches `fn foo(&a)`.\n+                    PatKind::Ref(ref inner_pat, mutab)\n+                        if matches!(inner_pat.clone().into_inner().kind, PatKind::Ident(..)) =>\n+                    {\n+                        match inner_pat.clone().into_inner().kind {\n+                            PatKind::Ident(_, ident, _) => {\n+                                let mutab = mutab.prefix_str();\n+                                (\n+                                    ident,\n+                                    \"self: \".to_string(),\n+                                    format!(\"{}: &{}TypeName\", ident, mutab),\n+                                    \"_: \".to_string(),\n+                                    pat.span.shrink_to_lo(),\n+                                    pat.span,\n+                                    pat.span.shrink_to_lo(),\n+                                )\n+                            }\n+                            _ => unreachable!(),\n                         }\n-                        _ => unreachable!(),\n-                    }\n-                }\n-                _ => {\n-                    // Otherwise, try to get a type and emit a suggestion.\n-                    if let Some(ty) = pat.to_ty() {\n-                        err.span_suggestion_verbose(\n-                            pat.span,\n-                            \"explicitly ignore the parameter name\",\n-                            format!(\"_: {}\", pprust::ty_to_string(&ty)),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.note(rfc_note);\n                     }\n+                    _ => {\n+                        // Otherwise, try to get a type and emit a suggestion.\n+                        if let Some(ty) = pat.to_ty() {\n+                            err.span_suggestion_verbose(\n+                                pat.span,\n+                                \"explicitly ignore the parameter name\",\n+                                format!(\"_: {}\", pprust::ty_to_string(&ty)),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            err.note(rfc_note);\n+                        }\n \n-                    return None;\n-                }\n-            };\n+                        return None;\n+                    }\n+                };\n \n             // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n             if first_param {\n                 err.span_suggestion(\n-                    pat.span,\n+                    self_span,\n                     \"if this is a `self` type, give it a parameter name\",\n                     self_sugg,\n                     Applicability::MaybeIncorrect,\n@@ -1671,14 +1678,14 @@ impl<'a> Parser<'a> {\n             // `fn foo(HashMap: TypeName<u32>)`.\n             if self.token != token::Lt {\n                 err.span_suggestion(\n-                    pat.span,\n+                    param_span,\n                     \"if this is a parameter name, give it a type\",\n                     param_sugg,\n                     Applicability::HasPlaceholders,\n                 );\n             }\n             err.span_suggestion(\n-                pat.span,\n+                type_span,\n                 \"if this is a type, explicitly ignore the parameter name\",\n                 type_sugg,\n                 Applicability::MachineApplicable,"}, {"sha": "e88c1fd831e944906a76428f2ae5ec991832a7c3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, SuggestionStyle};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n@@ -1950,11 +1950,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                             introduce_suggestion.push((*span, formatter(&lt_name)));\n                         }\n                     }\n-                    err.multipart_suggestion_with_style(\n+                    err.multipart_suggestion_verbose(\n                         &msg,\n                         introduce_suggestion,\n                         Applicability::MaybeIncorrect,\n-                        SuggestionStyle::ShowAlways,\n                     );\n                 }\n \n@@ -1966,14 +1965,13 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     })\n                     .map(|(formatter, span)| (*span, formatter(name)))\n                     .collect();\n-                err.multipart_suggestion_with_style(\n+                err.multipart_suggestion_verbose(\n                     &format!(\n                         \"consider using the `{}` lifetime\",\n                         lifetime_names.iter().next().unwrap()\n                     ),\n                     spans_suggs,\n                     Applicability::MaybeIncorrect,\n-                    SuggestionStyle::ShowAlways,\n                 );\n             };\n         let suggest_new = |err: &mut DiagnosticBuilder<'_>, suggs: Vec<Option<String>>| {\n@@ -2064,11 +2062,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                             };\n                             spans_suggs.push((span, sugg.to_string()));\n                         }\n-                        err.multipart_suggestion_with_style(\n+                        err.multipart_suggestion_verbose(\n                             \"consider using the `'static` lifetime\",\n                             spans_suggs,\n                             Applicability::MaybeIncorrect,\n-                            SuggestionStyle::ShowAlways,\n                         );\n                         continue;\n                     }\n@@ -2088,11 +2085,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         introduce_suggestion.push((span, sugg.to_string()));\n                     }\n                 }\n-                err.multipart_suggestion_with_style(\n+                err.multipart_suggestion_verbose(\n                     &msg,\n                     introduce_suggestion,\n                     Applicability::MaybeIncorrect,\n-                    SuggestionStyle::ShowAlways,\n                 );\n                 if should_break {\n                     break;\n@@ -2167,11 +2163,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 if spans_suggs.len() > 0 {\n                     // This happens when we have `Foo<T>` where we point at the space before `T`,\n                     // but this can be confusing so we give a suggestion with placeholders.\n-                    err.multipart_suggestion_with_style(\n+                    err.multipart_suggestion_verbose(\n                         \"consider using one of the available lifetimes here\",\n                         spans_suggs,\n                         Applicability::HasPlaceholders,\n-                        SuggestionStyle::ShowAlways,\n                     );\n                 }\n             }"}, {"sha": "9a8fc259cfc5141df548b5618cc8bce31c9ff2bb", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -1648,14 +1648,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             constraint=constraint,\n                         ));\n                     } else {\n-                        err.span_suggestion(\n-                            span,\n+                        err.span_suggestion_verbose(\n+                            span.with_hi(assoc_name.span.lo()),\n                             \"use fully qualified syntax to disambiguate\",\n                             format!(\n-                                \"<{} as {}>::{}\",\n+                                \"<{} as {}>::\",\n                                 ty_param_name(),\n                                 bound.print_only_trait_path(),\n-                                assoc_name,\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "a959f32c46783582e1ef56a4b30c4c6a1174543b", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 58, "deletions": 48, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -17,7 +17,6 @@ use rustc_span::{BytePos, Span};\n \n use super::method::probe;\n \n-use std::fmt;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -771,9 +770,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let prefix = if let Some(hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Struct(_, fields, _),\n-            ..\n+        let mut sugg = vec![];\n+\n+        if let Some(hir::Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Struct(_, fields, _), ..\n         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n         {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n@@ -782,12 +782,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .find(|field| field.expr.hir_id == expr.hir_id && field.is_shorthand)\n             {\n                 // This is a field literal\n-                Some(field) => format!(\"{}: \", field.ident),\n+                Some(field) => {\n+                    sugg.push((field.ident.span.shrink_to_lo(), format!(\"{}: \", field.ident)));\n+                }\n                 // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n                 None => return false,\n             }\n-        } else {\n-            String::new()\n         };\n \n         if let hir::ExprKind::Call(path, args) = &expr.kind {\n@@ -842,28 +842,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             checked_ty, expected_ty,\n         );\n \n-        let with_opt_paren: fn(&dyn fmt::Display) -> String =\n-            if expr.precedence().order() < PREC_POSTFIX {\n-                |s| format!(\"({})\", s)\n-            } else {\n-                |s| s.to_string()\n-            };\n+        let close_paren = if expr.precedence().order() < PREC_POSTFIX {\n+            sugg.push((expr.span.shrink_to_lo(), \"(\".to_string()));\n+            \")\"\n+        } else {\n+            \"\"\n+        };\n \n-        let cast_suggestion = format!(\"{}{} as {}\", prefix, with_opt_paren(&src), expected_ty);\n-        let into_suggestion = format!(\"{}{}.into()\", prefix, with_opt_paren(&src));\n-        let suffix_suggestion = with_opt_paren(&format_args!(\n-            \"{}{}\",\n+        let mut cast_suggestion = sugg.clone();\n+        cast_suggestion\n+            .push((expr.span.shrink_to_hi(), format!(\"{} as {}\", close_paren, expected_ty)));\n+        let mut into_suggestion = sugg.clone();\n+        into_suggestion.push((expr.span.shrink_to_hi(), format!(\"{}.into()\", close_paren)));\n+        let mut suffix_suggestion = sugg.clone();\n+        suffix_suggestion.push((\n             if matches!(\n                 (&expected_ty.kind(), &checked_ty.kind()),\n                 (ty::Int(_) | ty::Uint(_), ty::Float(_))\n             ) {\n                 // Remove fractional part from literal, for example `42.0f32` into `42`\n                 let src = src.trim_end_matches(&checked_ty.to_string());\n-                src.split('.').next().unwrap()\n+                let len = src.split('.').next().unwrap().len();\n+                expr.span.with_lo(expr.span.lo() + BytePos(len as u32))\n             } else {\n-                src.trim_end_matches(&checked_ty.to_string())\n+                let len = src.trim_end_matches(&checked_ty.to_string()).len();\n+                expr.span.with_lo(expr.span.lo() + BytePos(len as u32))\n+            },\n+            if expr.precedence().order() < PREC_POSTFIX {\n+                // Readd `)`\n+                format!(\"{})\", expected_ty)\n+            } else {\n+                expected_ty.to_string()\n             },\n-            expected_ty,\n         ));\n         let literal_is_ty_suffixed = |expr: &hir::Expr<'_>| {\n             if let hir::ExprKind::Lit(lit) = &expr.kind { lit.node.is_suffixed() } else { false }\n@@ -890,22 +900,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .ok()\n                         .map(|src| (expr, src))\n                 });\n-                let (span, msg, suggestion) = if let (Some((lhs_expr, lhs_src)), false) =\n+                let (msg, suggestion) = if let (Some((lhs_expr, lhs_src)), false) =\n                     (lhs_expr_and_src, exp_to_found_is_fallible)\n                 {\n                     let msg = format!(\n                         \"you can convert `{}` from `{}` to `{}`, matching the type of `{}`\",\n                         lhs_src, expected_ty, checked_ty, src\n                     );\n-                    let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src);\n-                    (lhs_expr.span, msg, suggestion)\n+                    let suggestion = vec![\n+                        (lhs_expr.span.shrink_to_lo(), format!(\"{}::from(\", checked_ty)),\n+                        (lhs_expr.span.shrink_to_hi(), \")\".to_string()),\n+                    ];\n+                    (msg, suggestion)\n                 } else {\n                     let msg = format!(\"{} and panic if the converted value doesn't fit\", msg);\n-                    let suggestion =\n-                        format!(\"{}{}.try_into().unwrap()\", prefix, with_opt_paren(&src));\n-                    (expr.span, msg, suggestion)\n+                    let mut suggestion = sugg.clone();\n+                    suggestion.push((\n+                        expr.span.shrink_to_hi(),\n+                        format!(\"{}.try_into().unwrap()\", close_paren),\n+                    ));\n+                    (msg, suggestion)\n                 };\n-                err.span_suggestion(span, &msg, suggestion, Applicability::MachineApplicable);\n+                err.multipart_suggestion_verbose(\n+                    &msg,\n+                    suggestion,\n+                    Applicability::MachineApplicable,\n+                );\n             };\n \n         let suggest_to_change_suffix_or_into =\n@@ -943,7 +963,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     into_suggestion.clone()\n                 };\n-                err.span_suggestion(expr.span, msg, suggestion, Applicability::MachineApplicable);\n+                err.multipart_suggestion_verbose(msg, suggestion, Applicability::MachineApplicable);\n             };\n \n         match (&expected_ty.kind(), &checked_ty.kind()) {\n@@ -997,16 +1017,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if found.bit_width() < exp.bit_width() {\n                     suggest_to_change_suffix_or_into(err, false, true);\n                 } else if literal_is_ty_suffixed(expr) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if can_cast {\n                     // Missing try_into implementation for `f64` to `f32`\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\"{}, producing the closest possible value\", cast_msg),\n                         cast_suggestion,\n                         Applicability::MaybeIncorrect, // lossy conversion\n@@ -1016,16 +1034,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             (&ty::Uint(_) | &ty::Int(_), &ty::Float(_)) => {\n                 if literal_is_ty_suffixed(expr) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if can_cast {\n                     // Missing try_into implementation for `{float}` to `{integer}`\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\"{}, rounding the float towards zero\", msg),\n                         cast_suggestion,\n                         Applicability::MaybeIncorrect, // lossy conversion\n@@ -1036,8 +1052,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (&ty::Float(ref exp), &ty::Uint(ref found)) => {\n                 // if `found` is `None` (meaning found is `usize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\n                             \"{}, producing the floating point representation of the integer\",\n                             msg,\n@@ -1046,16 +1061,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Applicability::MachineApplicable,\n                     );\n                 } else if literal_is_ty_suffixed(expr) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n                     // Missing try_into implementation for `{integer}` to `{float}`\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\n                             \"{}, producing the floating point representation of the integer,\n                                  rounded if necessary\",\n@@ -1070,8 +1083,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (&ty::Float(ref exp), &ty::Int(ref found)) => {\n                 // if `found` is `None` (meaning found is `isize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\n                             \"{}, producing the floating point representation of the integer\",\n                             &msg,\n@@ -1080,16 +1092,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Applicability::MachineApplicable,\n                     );\n                 } else if literal_is_ty_suffixed(expr) {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n                     // Missing try_into implementation for `{integer}` to `{float}`\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion_verbose(\n                         &format!(\n                             \"{}, producing the floating point representation of the integer, \\\n                                 rounded if necessary\","}, {"sha": "637ee3fc5ee38aa94ecb2ce631264cfd6e5ac61c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -452,9 +452,9 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                             let suggestions = vec![\n                                 (lt_sp, sugg),\n                                 (\n-                                    span,\n+                                    span.with_hi(item_segment.ident.span.lo()),\n                                     format!(\n-                                        \"{}::{}\",\n+                                        \"{}::\",\n                                         // Replace the existing lifetimes with a new named lifetime.\n                                         self.tcx\n                                             .replace_late_bound_regions(poly_trait_ref, |_| {\n@@ -467,7 +467,6 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                                                 ))\n                                             })\n                                             .0,\n-                                        item_segment.ident\n                                     ),\n                                 ),\n                             ];\n@@ -489,14 +488,13 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                 | hir::Node::ForeignItem(_)\n                 | hir::Node::TraitItem(_)\n                 | hir::Node::ImplItem(_) => {\n-                    err.span_suggestion(\n-                        span,\n+                    err.span_suggestion_verbose(\n+                        span.with_hi(item_segment.ident.span.lo()),\n                         \"use a fully qualified path with inferred lifetimes\",\n                         format!(\n-                            \"{}::{}\",\n+                            \"{}::\",\n                             // Erase named lt, we want `<A as B<'_>::C`, not `<A as B<'a>::C`.\n                             self.tcx.anonymize_late_bound_regions(poly_trait_ref).skip_binder(),\n-                            item_segment.ident\n                         ),\n                         Applicability::MaybeIncorrect,\n                     );"}, {"sha": "c9f66d096f06cdb383a50fe3380c5865700def95", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -101,9 +101,9 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                     );\n                 } else if empty_block {\n                     diag.span_suggestion(\n-                        sp.from_inner(InnerSpan::new(0, 3)),\n+                        sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n                         explanation,\n-                        String::from(\"```text\"),\n+                        String::from(\"text\"),\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "4c6249cc6d9e176d1f5c2bb5c072ee063e5e52bf", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -14,7 +14,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ~~~~~~~\n+   |        ++++\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:9:5\n@@ -32,7 +32,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ~~~~~~~\n+   |        ++++\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:21:5\n@@ -47,7 +47,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ~~~~~~~\n+   |        ++++\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:35:5\n@@ -123,7 +123,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ~~~~~~~\n+   |        ++++\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:92:9\n@@ -148,7 +148,7 @@ LL | | /// ```\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n-   |     ~~~~~~~\n+   |        ++++\n \n warning: 12 warnings emitted\n "}, {"sha": "bb60c898e8122a160a54b0055618050433cace6c", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,15 +8,15 @@ LL |     fn foo(i32);\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn foo(self: i32);\n-   |            ~~~~~~~~~\n+   |            +++++\n help: if this is a parameter name, give it a type\n    |\n LL |     fn foo(i32: TypeName);\n-   |            ~~~~~~~~~~~~~\n+   |               ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn foo(_: i32);\n-   |            ~~~~~~\n+   |            ++\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:9:29\n@@ -28,15 +28,15 @@ LL |     fn foo_with_ref(&mut i32);\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn foo_with_ref(self: &mut i32);\n-   |                     ~~~~~~~~~~~~~~\n+   |                     +++++\n help: if this is a parameter name, give it a type\n    |\n LL |     fn foo_with_ref(i32: &mut TypeName);\n    |                     ~~~~~~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn foo_with_ref(_: &mut i32);\n-   |                     ~~~~~~~~~~~\n+   |                     ++\n \n error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:12:47\n@@ -96,15 +96,15 @@ LL |     fn bar_with_default_impl(String, String) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn bar_with_default_impl(self: String, String) {}\n-   |                              ~~~~~~~~~~~~\n+   |                              +++++\n help: if this is a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String: TypeName, String) {}\n-   |                              ~~~~~~~~~~~~~~~~\n+   |                                    ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn bar_with_default_impl(_: String, String) {}\n-   |                              ~~~~~~~~~\n+   |                              ++\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:22:44\n@@ -116,11 +116,11 @@ LL |     fn bar_with_default_impl(String, String) {}\n help: if this is a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String, String: TypeName) {}\n-   |                                      ~~~~~~~~~~~~~~~~\n+   |                                            ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn bar_with_default_impl(String, _: String) {}\n-   |                                      ~~~~~~~~~\n+   |                                      ++\n \n error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:27:22\n@@ -132,11 +132,11 @@ LL |     fn baz(a:usize, b, c: usize) -> usize {\n help: if this is a parameter name, give it a type\n    |\n LL |     fn baz(a:usize, b: TypeName, c: usize) -> usize {\n-   |                     ~~~~~~~~~~~\n+   |                      ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n-   |                     ~~~~\n+   |                     ++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19fc2f652c6be1907ee73b5ae7f6ea9cab45d205", "filename": "src/test/ui/associated-types/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -13,11 +13,11 @@ LL | fn a<C:Vehicle+Box>(_: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn a<C:Vehicle+Box>(_: <C as Box>::Color) {\n-   |                        ~~~~~~~~~~~~~~~~~\n+   |                        ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn a<C:Vehicle+Box>(_: <C as Vehicle>::Color) {\n-   |                        ~~~~~~~~~~~~~~~~~~~~~\n+   |                        ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:20:12\n@@ -34,11 +34,11 @@ LL | fn b<C>(_: C::Color) where C : Vehicle+Box {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn b<C>(_: <C as Box>::Color) where C : Vehicle+Box {\n-   |            ~~~~~~~~~~~~~~~~~\n+   |            ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn b<C>(_: <C as Vehicle>::Color) where C : Vehicle+Box {\n-   |            ~~~~~~~~~~~~~~~~~~~~~\n+   |            ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:24:12\n@@ -55,11 +55,11 @@ LL | fn c<C>(_: C::Color) where C : Vehicle, C : Box {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn c<C>(_: <C as Box>::Color) where C : Vehicle, C : Box {\n-   |            ~~~~~~~~~~~~~~~~~\n+   |            ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn c<C>(_: <C as Vehicle>::Color) where C : Vehicle, C : Box {\n-   |            ~~~~~~~~~~~~~~~~~~~~~\n+   |            ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:35:20\n@@ -76,11 +76,11 @@ LL |     fn e(&self, _: X::Color) where X : Box;\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn e(&self, _: <X as Box>::Color) where X : Box;\n-   |                    ~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn e(&self, _: <X as Vehicle>::Color) where X : Box;\n-   |                    ~~~~~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:38:20\n@@ -97,11 +97,11 @@ LL |     fn f(&self, _: X::Color) where X : Box { }\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn f(&self, _: <X as Box>::Color) where X : Box { }\n-   |                    ~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn f(&self, _: <X as Vehicle>::Color) where X : Box { }\n-   |                    ~~~~~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:30:20\n@@ -118,11 +118,11 @@ LL |     fn d(&self, _: X::Color) where X : Box { }\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn d(&self, _: <X as Box>::Color) where X : Box { }\n-   |                    ~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |     fn d(&self, _: <X as Vehicle>::Color) where X : Box { }\n-   |                    ~~~~~~~~~~~~~~~~~~~~~\n+   |                    ~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "66a4899c77fef706e4fd36606b2993e42535f0d2", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -21,11 +21,11 @@ LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n-   |                                ~~~~~~~~~~~~~~~~~~~~~\n+   |                                ~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {\n-   |                                ~~~~~~~~~~~~~~~~~\n+   |                                ~~~~~~~~~~~~\n \n error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n@@ -74,11 +74,11 @@ LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {\n-   |                             ~~~~~~~~~~~~~~~~~~~~~\n+   |                             ~~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {\n-   |                             ~~~~~~~~~~~~~~~~~\n+   |                             ~~~~~~~~~~~~\n \n error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:32"}, {"sha": "6512d60b2c2951ab28c2c3c329e3aa2b0012c870", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -19,11 +19,11 @@ LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n help: use fully qualified syntax to disambiguate\n    |\n LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Bar>::A) {}\n-   |                                  ~~~~~~~~~~~~~\n+   |                                  ~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Foo>::A) {}\n-   |                                  ~~~~~~~~~~~~~\n+   |                                  ~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "350835f206c059180abeb196bb180ea8161dbc28", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     f1(2i32, 4i32);\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);\n-   |              ~~~~\n+   |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n@@ -50,7 +50,7 @@ LL |     let _: i32 = f2(2i32);\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                          ++++++++++++++++++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c508006c3a49927c7e0957c59df8d232c0c64d9b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -2,7 +2,12 @@ error[E0212]: cannot use the associated type of a trait with uninferred generic\n   --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n-   |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n+   |        ^^^^\n+   |\n+help: use a fully qualified path with inferred lifetimes\n+   |\n+LL |     x: <I as Foo<&isize>>::A)\n+   |        ~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "48433b15286d4466678f795388bdd0cfa498fd4d", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -2,13 +2,23 @@ error[E0212]: cannot use the associated type of a trait with uninferred generic\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n-   |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n+   |                                ^^^^\n+   |\n+help: use a fully qualified path with inferred lifetimes\n+   |\n+LL |     fn some_method(&self, arg: <I as Foo<&isize>>::A);\n+   |                                ~~~~~~~~~~~~~~~~~~~~\n \n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n    |\n LL |     fn mango(&self) -> X::Assoc {\n-   |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n+   |                        ^^^^^^^^\n+   |\n+help: use a fully qualified path with inferred lifetimes\n+   |\n+LL |     fn mango(&self) -> <X as Banana<'_>>::Assoc {\n+   |                        ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "afd9b6dd412da3a67a8e3152a5f6eb3c63e30f0d", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(R.method::<1u16>(), 1);\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     assert_eq!(R.method::<1u8>(), 1);\n-   |                           ~~~\n+   |                            ~~\n \n error: aborting due to previous error\n "}, {"sha": "afd9b6dd412da3a67a8e3152a5f6eb3c63e30f0d", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(R.method::<1u16>(), 1);\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     assert_eq!(R.method::<1u8>(), 1);\n-   |                           ~~~\n+   |                            ~~\n \n error: aborting due to previous error\n "}, {"sha": "27f516341ee315a98f81efc7a7ba9aaa81c2a0d7", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |         OhNo = 0_u8,\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n LL |         OhNo = 0_i8,\n-   |                ~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:28:16\n@@ -18,7 +18,7 @@ LL |         OhNo = 0_i8,\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |         OhNo = 0_u8,\n-   |                ~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:41:16\n@@ -29,7 +29,7 @@ LL |         OhNo = 0_u16,\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n LL |         OhNo = 0_i16,\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:54:16\n@@ -40,7 +40,7 @@ LL |         OhNo = 0_i16,\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n LL |         OhNo = 0_u16,\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:67:16\n@@ -51,7 +51,7 @@ LL |         OhNo = 0_u32,\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         OhNo = 0_i32,\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:80:16\n@@ -62,7 +62,7 @@ LL |         OhNo = 0_i32,\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |         OhNo = 0_u32,\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:93:16\n@@ -73,7 +73,7 @@ LL |         OhNo = 0_u64,\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n LL |         OhNo = 0_i64,\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:106:16\n@@ -84,7 +84,7 @@ LL |         OhNo = 0_i64,\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n LL |         OhNo = 0_u64,\n-   |                ~~~~~\n+   |                  ~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f3dbf122de3baa73ec1e4af724187343af15938c", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -13,11 +13,11 @@ LL |         let _: Self::A;\n help: use fully qualified syntax to disambiguate\n    |\n LL |         let _: <Self as Foo>::A;\n-   |                ~~~~~~~~~~~~~~~~\n+   |                ~~~~~~~~~~~~~~~\n help: use fully qualified syntax to disambiguate\n    |\n LL |         let _: <Self as Bar>::A;\n-   |                ~~~~~~~~~~~~~~~~\n+   |                ~~~~~~~~~~~~~~~\n \n error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n   --> $DIR/E0221.rs:21:16\n@@ -26,12 +26,13 @@ LL |     type Err: T3;\n    |     ------------- ambiguous `Err` from `My`\n LL |     fn test() {\n LL |         let _: Self::Err;\n-   |                ^^^^^^^^^\n-   |                |\n-   |                ambiguous associated type `Err`\n-   |                help: use fully qualified syntax to disambiguate: `<Self as My>::Err`\n+   |                ^^^^^^^^^ ambiguous associated type `Err`\n    |\n    = note: associated type `Self` could derive from `FromStr`\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |         let _: <Self as My>::Err;\n+   |                ~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "454373c322e9b15367f7dc67552e0643b4285dd3", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -19,7 +19,7 @@ LL |     let y: f32 = 1f64;\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n LL |     let y: f32 = 1f32;\n-   |                  ~~~~\n+   |                   ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "24f42f22f37df661cd86629998e175b888af1ea4", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -16,7 +16,7 @@ LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n-   |                  ~~~~~~~~~~~~~~~~~~~~~\n+   |                   ++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4c29c4a1cb05c6af7160603f4c854000470f7c15", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 162, "deletions": 118, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     id_i8(a16);\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:41:11\n@@ -18,7 +18,7 @@ LL |     id_i8(a32);\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:44:11\n@@ -29,7 +29,7 @@ LL |     id_i8(a64);\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:47:11\n@@ -40,16 +40,18 @@ LL |     id_i8(asize);\n help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(asize.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:51:12\n    |\n LL |     id_i16(a8);\n-   |            ^^\n-   |            |\n-   |            expected `i16`, found `i8`\n-   |            help: you can convert an `i8` to an `i16`: `a8.into()`\n+   |            ^^ expected `i16`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i16`\n+   |\n+LL |     id_i16(a8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:55:12\n@@ -60,7 +62,7 @@ LL |     id_i16(a32);\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:58:12\n@@ -71,7 +73,7 @@ LL |     id_i16(a64);\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:61:12\n@@ -82,25 +84,29 @@ LL |     id_i16(asize);\n help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(asize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:65:12\n    |\n LL |     id_i32(a8);\n-   |            ^^\n-   |            |\n-   |            expected `i32`, found `i8`\n-   |            help: you can convert an `i8` to an `i32`: `a8.into()`\n+   |            ^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     id_i32(a8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:68:12\n    |\n LL |     id_i32(a16);\n-   |            ^^^\n-   |            |\n-   |            expected `i32`, found `i16`\n-   |            help: you can convert an `i16` to an `i32`: `a16.into()`\n+   |            ^^^ expected `i32`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i32`\n+   |\n+LL |     id_i32(a16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:72:12\n@@ -111,7 +117,7 @@ LL |     id_i32(a64);\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:75:12\n@@ -122,34 +128,40 @@ LL |     id_i32(asize);\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(asize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:79:12\n    |\n LL |     id_i64(a8);\n-   |            ^^\n-   |            |\n-   |            expected `i64`, found `i8`\n-   |            help: you can convert an `i8` to an `i64`: `a8.into()`\n+   |            ^^ expected `i64`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i64`\n+   |\n+LL |     id_i64(a8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^\n-   |            |\n-   |            expected `i64`, found `i16`\n-   |            help: you can convert an `i16` to an `i64`: `a16.into()`\n+   |            ^^^ expected `i64`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i64`\n+   |\n+LL |     id_i64(a16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:85:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^\n-   |            |\n-   |            expected `i64`, found `i32`\n-   |            help: you can convert an `i32` to an `i64`: `a32.into()`\n+   |            ^^^ expected `i64`, found `i32`\n+   |\n+help: you can convert an `i32` to an `i64`\n+   |\n+LL |     id_i64(a32.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:89:12\n@@ -160,25 +172,29 @@ LL |     id_i64(asize);\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     id_i64(asize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:93:14\n    |\n LL |     id_isize(a8);\n-   |              ^^\n-   |              |\n-   |              expected `isize`, found `i8`\n-   |              help: you can convert an `i8` to an `isize`: `a8.into()`\n+   |              ^^ expected `isize`, found `i8`\n+   |\n+help: you can convert an `i8` to an `isize`\n+   |\n+LL |     id_isize(a8.into());\n+   |                +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:96:14\n    |\n LL |     id_isize(a16);\n-   |              ^^^\n-   |              |\n-   |              expected `isize`, found `i16`\n-   |              help: you can convert an `i16` to an `isize`: `a16.into()`\n+   |              ^^^ expected `isize`, found `i16`\n+   |\n+help: you can convert an `i16` to an `isize`\n+   |\n+LL |     id_isize(a16.into());\n+   |                 +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:99:14\n@@ -189,7 +205,7 @@ LL |     id_isize(a32);\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a32.try_into().unwrap());\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:102:14\n@@ -200,7 +216,7 @@ LL |     id_isize(a64);\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a64.try_into().unwrap());\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:108:11\n@@ -211,7 +227,7 @@ LL |     id_i8(c16);\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:111:11\n@@ -222,7 +238,7 @@ LL |     id_i8(c32);\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:114:11\n@@ -233,16 +249,18 @@ LL |     id_i8(c64);\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:118:12\n    |\n LL |     id_i16(c8);\n-   |            ^^\n-   |            |\n-   |            expected `i16`, found `i8`\n-   |            help: you can convert an `i8` to an `i16`: `c8.into()`\n+   |            ^^ expected `i16`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i16`\n+   |\n+LL |     id_i16(c8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:122:12\n@@ -253,7 +271,7 @@ LL |     id_i16(c32);\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:125:12\n@@ -264,25 +282,29 @@ LL |     id_i16(c64);\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:129:12\n    |\n LL |     id_i32(c8);\n-   |            ^^\n-   |            |\n-   |            expected `i32`, found `i8`\n-   |            help: you can convert an `i8` to an `i32`: `c8.into()`\n+   |            ^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     id_i32(c8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:132:12\n    |\n LL |     id_i32(c16);\n-   |            ^^^\n-   |            |\n-   |            expected `i32`, found `i16`\n-   |            help: you can convert an `i16` to an `i32`: `c16.into()`\n+   |            ^^^ expected `i32`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i32`\n+   |\n+LL |     id_i32(c16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:136:12\n@@ -293,34 +315,40 @@ LL |     id_i32(c64);\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:140:12\n    |\n LL |     id_i64(a8);\n-   |            ^^\n-   |            |\n-   |            expected `i64`, found `i8`\n-   |            help: you can convert an `i8` to an `i64`: `a8.into()`\n+   |            ^^ expected `i64`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i64`\n+   |\n+LL |     id_i64(a8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:143:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^\n-   |            |\n-   |            expected `i64`, found `i16`\n-   |            help: you can convert an `i16` to an `i64`: `a16.into()`\n+   |            ^^^ expected `i64`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i64`\n+   |\n+LL |     id_i64(a16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:146:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^\n-   |            |\n-   |            expected `i64`, found `i32`\n-   |            help: you can convert an `i32` to an `i64`: `a32.into()`\n+   |            ^^^ expected `i64`, found `i32`\n+   |\n+help: you can convert an `i32` to an `i64`\n+   |\n+LL |     id_i64(a32.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:152:11\n@@ -331,7 +359,7 @@ LL |     id_u8(b16);\n help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:155:11\n@@ -342,7 +370,7 @@ LL |     id_u8(b32);\n help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:158:11\n@@ -353,7 +381,7 @@ LL |     id_u8(b64);\n help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:161:11\n@@ -364,16 +392,18 @@ LL |     id_u8(bsize);\n help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(bsize.try_into().unwrap());\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:165:12\n    |\n LL |     id_u16(b8);\n-   |            ^^\n-   |            |\n-   |            expected `u16`, found `u8`\n-   |            help: you can convert a `u8` to a `u16`: `b8.into()`\n+   |            ^^ expected `u16`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u16`\n+   |\n+LL |     id_u16(b8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:169:12\n@@ -384,7 +414,7 @@ LL |     id_u16(b32);\n help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:172:12\n@@ -395,7 +425,7 @@ LL |     id_u16(b64);\n help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:175:12\n@@ -406,25 +436,29 @@ LL |     id_u16(bsize);\n help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(bsize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:179:12\n    |\n LL |     id_u32(b8);\n-   |            ^^\n-   |            |\n-   |            expected `u32`, found `u8`\n-   |            help: you can convert a `u8` to a `u32`: `b8.into()`\n+   |            ^^ expected `u32`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u32`\n+   |\n+LL |     id_u32(b8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:182:12\n    |\n LL |     id_u32(b16);\n-   |            ^^^\n-   |            |\n-   |            expected `u32`, found `u16`\n-   |            help: you can convert a `u16` to a `u32`: `b16.into()`\n+   |            ^^^ expected `u32`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |     id_u32(b16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:186:12\n@@ -435,7 +469,7 @@ LL |     id_u32(b64);\n help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:189:12\n@@ -446,34 +480,40 @@ LL |     id_u32(bsize);\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(bsize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:193:12\n    |\n LL |     id_u64(b8);\n-   |            ^^\n-   |            |\n-   |            expected `u64`, found `u8`\n-   |            help: you can convert a `u8` to a `u64`: `b8.into()`\n+   |            ^^ expected `u64`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u64`\n+   |\n+LL |     id_u64(b8.into());\n+   |              +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:196:12\n    |\n LL |     id_u64(b16);\n-   |            ^^^\n-   |            |\n-   |            expected `u64`, found `u16`\n-   |            help: you can convert a `u16` to a `u64`: `b16.into()`\n+   |            ^^^ expected `u64`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u64`\n+   |\n+LL |     id_u64(b16.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:199:12\n    |\n LL |     id_u64(b32);\n-   |            ^^^\n-   |            |\n-   |            expected `u64`, found `u32`\n-   |            help: you can convert a `u32` to a `u64`: `b32.into()`\n+   |            ^^^ expected `u64`, found `u32`\n+   |\n+help: you can convert a `u32` to a `u64`\n+   |\n+LL |     id_u64(b32.into());\n+   |               +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:203:12\n@@ -484,25 +524,29 @@ LL |     id_u64(bsize);\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     id_u64(bsize.try_into().unwrap());\n-   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:207:14\n    |\n LL |     id_usize(b8);\n-   |              ^^\n-   |              |\n-   |              expected `usize`, found `u8`\n-   |              help: you can convert a `u8` to a `usize`: `b8.into()`\n+   |              ^^ expected `usize`, found `u8`\n+   |\n+help: you can convert a `u8` to a `usize`\n+   |\n+LL |     id_usize(b8.into());\n+   |                +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:210:14\n    |\n LL |     id_usize(b16);\n-   |              ^^^\n-   |              |\n-   |              expected `usize`, found `u16`\n-   |              help: you can convert a `u16` to a `usize`: `b16.into()`\n+   |              ^^^ expected `usize`, found `u16`\n+   |\n+help: you can convert a `u16` to a `usize`\n+   |\n+LL |     id_usize(b16.into());\n+   |                 +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:213:14\n@@ -513,7 +557,7 @@ LL |     id_usize(b32);\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b32.try_into().unwrap());\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:216:14\n@@ -524,7 +568,7 @@ LL |     id_usize(b64);\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b64.try_into().unwrap());\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~\n+   |                 ++++++++++++++++++++\n \n error: aborting due to 52 previous errors\n "}, {"sha": "075c92e65de820cb4c42e713e45ada488e7e7897", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     foo(1*(1 as isize));\n help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         +              +++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n@@ -18,7 +18,7 @@ LL |     bar(1*(1 as usize));\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         +              +++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "babbb6e519bc0674069d6fd63a4c06c43bed5db7", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,7 +9,7 @@ LL |   let x: u32 = 20i32;\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |   let x: u32 = 20u32;\n-   |                ~~~~~\n+   |                  ~~~\n \n error: aborting due to previous error\n "}, {"sha": "da44566d075c4c5530a9414189ea8e2cea537e2c", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{}\", foo(10i32));\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     println!(\"{}\", foo(10u32));\n-   |                        ~~~~~\n+   |                          ~~~\n \n error: aborting due to previous error\n "}, {"sha": "c70093bafb69bdb4fc776e2d591e45424fe1a17c", "filename": "src/test/ui/issues/issue-8761.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     A = 1i64,\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n LL |     A = 1isize,\n-   |         ~~~~~~\n+   |          ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-8761.rs:5:9\n@@ -18,7 +18,7 @@ LL |     B = 2u8\n help: change the type of the numeric literal from `u8` to `isize`\n    |\n LL |     B = 2isize\n-   |         ~~~~~~\n+   |          ~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4adeebe2a591d260fdeb56a258b9b69cabbefa62", "filename": "src/test/ui/meta/expected-error-correct-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmeta%2Fexpected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmeta%2Fexpected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fexpected-error-correct-rev.a.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,7 +9,7 @@ LL |     let x: u32 = 22_usize;\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n LL |     let x: u32 = 22_u32;\n-   |                  ~~~~~~\n+   |                     ~~~\n \n error: aborting due to previous error\n "}, {"sha": "87330155eacca0848cbfa8de71ebe9f9be4ea654", "filename": "src/test/ui/meta/meta-expected-error-wrong-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,7 +9,7 @@ LL |     let x: u32 = 22_usize;\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n LL |     let x: u32 = 22_u32;\n-   |                  ~~~~~~\n+   |                     ~~~\n \n error: aborting due to previous error\n "}, {"sha": "4b494c961158a32de6db7a2d45d25c5509c3916b", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -17,7 +17,7 @@ LL |     let y: usize = x.foo();\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                           ++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3e2ebf43b8c3a08264ae522a2db249b9d1589648", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -11,7 +11,7 @@ LL |     write!(hello);\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                   +                             +++++++++++++++++++++\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19"}, {"sha": "55e45a8f1625a6aa2d0d2b66e36f1e37038bc3f9", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     foo(1u8);\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n LL |     foo(1u16);\n-   |         ~~~~\n+   |          ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:8:10\n@@ -18,7 +18,7 @@ LL |     foo1(2f32);\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n LL |     foo1(2f64);\n-   |          ~~~~\n+   |           ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:10:10\n@@ -29,7 +29,7 @@ LL |     foo2(3i16);\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n LL |     foo2(3i32);\n-   |          ~~~~\n+   |           ~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4e4bcdf234dcf0eadbbb16d14338085ac5c21f38", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL | const C: i32 = 1i8;\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL | const C: i32 = 1i32;\n-   |                ~~~~\n+   |                 ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:2:15\n@@ -26,7 +26,7 @@ LL |     let c: i32 = 1i8;\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL |     let c: i32 = 1i32;\n-   |                  ~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:6:17\n@@ -47,7 +47,7 @@ LL |     let c: i32 = 1i8;\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL |     let c: i32 = 1i32;\n-   |                  ~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:11:17\n@@ -60,7 +60,7 @@ LL |     let d: i8 = c;\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~\n+   |                  ++++++++++++++++++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6319c1ead24eec010e171885528287437653288b", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     test(array.len());\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n-   |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a7b342739aa1b425a71396c5437ffcaee73a38c5", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,27 +9,33 @@ LL |     let x: u16 = foo();\n help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |            ---   ^^^^^\n-   |            |     |\n-   |            |     expected `i64`, found `u16`\n-   |            |     help: you can convert a `u16` to an `i64`: `(x + x).into()`\n+   |            ---   ^^^^^ expected `i64`, found `u16`\n+   |            |\n    |            expected due to this\n+   |\n+help: you can convert a `u16` to an `i64`\n+   |\n+LL |     let y: i64 = (x + x).into();\n+   |                  +     ++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |            ---   ^^^^^\n-   |            |     |\n-   |            |     expected `i32`, found `u16`\n-   |            |     help: you can convert a `u16` to an `i32`: `(x + x).into()`\n+   |            ---   ^^^^^ expected `i32`, found `u16`\n+   |            |\n    |            expected due to this\n+   |\n+help: you can convert a `u16` to an `i32`\n+   |\n+LL |     let z: i32 = (x + x).into();\n+   |                  +     ++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2f58f164985db92b3fd4f5b8c2b8802c4c902c65", "filename": "src/test/ui/numeric/numeric-cast-binop.stderr", "status": "modified", "additions": 307, "deletions": 237, "changes": 544, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |         x_u8 > x_u16;\n help: you can convert `x_u8` from `u8` to `u16`, matching the type of `x_u16`\n    |\n LL |         u16::from(x_u8) > x_u16;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:25:16\n@@ -18,7 +18,7 @@ LL |         x_u8 > x_u32;\n help: you can convert `x_u8` from `u8` to `u32`, matching the type of `x_u32`\n    |\n LL |         u32::from(x_u8) > x_u32;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:27:16\n@@ -29,7 +29,7 @@ LL |         x_u8 > x_u64;\n help: you can convert `x_u8` from `u8` to `u64`, matching the type of `x_u64`\n    |\n LL |         u64::from(x_u8) > x_u64;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:29:16\n@@ -40,7 +40,7 @@ LL |         x_u8 > x_u128;\n help: you can convert `x_u8` from `u8` to `u128`, matching the type of `x_u128`\n    |\n LL |         u128::from(x_u8) > x_u128;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         +++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:31:16\n@@ -51,16 +51,18 @@ LL |         x_u8 > x_usize;\n help: you can convert `x_u8` from `u8` to `usize`, matching the type of `x_usize`\n    |\n LL |         usize::from(x_u8) > x_usize;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         ++++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:34:17\n    |\n LL |         x_u16 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `u16`, found `u8`\n-   |                 help: you can convert a `u8` to a `u16`: `x_u8.into()`\n+   |                 ^^^^ expected `u16`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u16`\n+   |\n+LL |         x_u16 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:36:17\n@@ -71,7 +73,7 @@ LL |         x_u16 > x_u32;\n help: you can convert `x_u16` from `u16` to `u32`, matching the type of `x_u32`\n    |\n LL |         u32::from(x_u16) > x_u32;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:38:17\n@@ -82,7 +84,7 @@ LL |         x_u16 > x_u64;\n help: you can convert `x_u16` from `u16` to `u64`, matching the type of `x_u64`\n    |\n LL |         u64::from(x_u16) > x_u64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:40:17\n@@ -93,7 +95,7 @@ LL |         x_u16 > x_u128;\n help: you can convert `x_u16` from `u16` to `u128`, matching the type of `x_u128`\n    |\n LL |         u128::from(x_u16) > x_u128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:42:17\n@@ -104,25 +106,29 @@ LL |         x_u16 > x_usize;\n help: you can convert `x_u16` from `u16` to `usize`, matching the type of `x_usize`\n    |\n LL |         usize::from(x_u16) > x_usize;\n-   |         ~~~~~~~~~~~~~~~~~~\n+   |         ++++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:45:17\n    |\n LL |         x_u32 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `u32`, found `u8`\n-   |                 help: you can convert a `u8` to a `u32`: `x_u8.into()`\n+   |                 ^^^^ expected `u32`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u32`\n+   |\n+LL |         x_u32 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:47:17\n    |\n LL |         x_u32 > x_u16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `u32`, found `u16`\n-   |                 help: you can convert a `u16` to a `u32`: `x_u16.into()`\n+   |                 ^^^^^ expected `u32`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |         x_u32 > x_u16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:49:17\n@@ -133,7 +139,7 @@ LL |         x_u32 > x_u64;\n help: you can convert `x_u32` from `u32` to `u64`, matching the type of `x_u64`\n    |\n LL |         u64::from(x_u32) > x_u64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:51:17\n@@ -144,7 +150,7 @@ LL |         x_u32 > x_u128;\n help: you can convert `x_u32` from `u32` to `u128`, matching the type of `x_u128`\n    |\n LL |         u128::from(x_u32) > x_u128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:53:17\n@@ -155,34 +161,40 @@ LL |         x_u32 > x_usize;\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_usize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:56:17\n    |\n LL |         x_u64 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `u64`, found `u8`\n-   |                 help: you can convert a `u8` to a `u64`: `x_u8.into()`\n+   |                 ^^^^ expected `u64`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u64`\n+   |\n+LL |         x_u64 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:58:17\n    |\n LL |         x_u64 > x_u16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `u64`, found `u16`\n-   |                 help: you can convert a `u16` to a `u64`: `x_u16.into()`\n+   |                 ^^^^^ expected `u64`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u64`\n+   |\n+LL |         x_u64 > x_u16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:60:17\n    |\n LL |         x_u64 > x_u32;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `u64`, found `u32`\n-   |                 help: you can convert a `u32` to a `u64`: `x_u32.into()`\n+   |                 ^^^^^ expected `u64`, found `u32`\n+   |\n+help: you can convert a `u32` to a `u64`\n+   |\n+LL |         x_u64 > x_u32.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:62:17\n@@ -193,7 +205,7 @@ LL |         x_u64 > x_u128;\n help: you can convert `x_u64` from `u64` to `u128`, matching the type of `x_u128`\n    |\n LL |         u128::from(x_u64) > x_u128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:64:17\n@@ -204,43 +216,51 @@ LL |         x_u64 > x_usize;\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_usize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:67:18\n    |\n LL |         x_u128 > x_u8;\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `u128`, found `u8`\n-   |                  help: you can convert a `u8` to a `u128`: `x_u8.into()`\n+   |                  ^^^^ expected `u128`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u128`\n+   |\n+LL |         x_u128 > x_u8.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:69:18\n    |\n LL |         x_u128 > x_u16;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `u128`, found `u16`\n-   |                  help: you can convert a `u16` to a `u128`: `x_u16.into()`\n+   |                  ^^^^^ expected `u128`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u128`\n+   |\n+LL |         x_u128 > x_u16.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:71:18\n    |\n LL |         x_u128 > x_u32;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `u128`, found `u32`\n-   |                  help: you can convert a `u32` to a `u128`: `x_u32.into()`\n+   |                  ^^^^^ expected `u128`, found `u32`\n+   |\n+help: you can convert a `u32` to a `u128`\n+   |\n+LL |         x_u128 > x_u32.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:73:18\n    |\n LL |         x_u128 > x_u64;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `u128`, found `u64`\n-   |                  help: you can convert a `u64` to a `u128`: `x_u64.into()`\n+   |                  ^^^^^ expected `u128`, found `u64`\n+   |\n+help: you can convert a `u64` to a `u128`\n+   |\n+LL |         x_u128 > x_u64.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:75:18\n@@ -251,25 +271,29 @@ LL |         x_u128 > x_usize;\n help: you can convert a `usize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_usize.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:78:19\n    |\n LL |         x_usize > x_u8;\n-   |                   ^^^^\n-   |                   |\n-   |                   expected `usize`, found `u8`\n-   |                   help: you can convert a `u8` to a `usize`: `x_u8.into()`\n+   |                   ^^^^ expected `usize`, found `u8`\n+   |\n+help: you can convert a `u8` to a `usize`\n+   |\n+LL |         x_usize > x_u8.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:80:19\n    |\n LL |         x_usize > x_u16;\n-   |                   ^^^^^\n-   |                   |\n-   |                   expected `usize`, found `u16`\n-   |                   help: you can convert a `u16` to a `usize`: `x_u16.into()`\n+   |                   ^^^^^ expected `usize`, found `u16`\n+   |\n+help: you can convert a `u16` to a `usize`\n+   |\n+LL |         x_usize > x_u16.into();\n+   |                        +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:82:19\n@@ -280,7 +304,7 @@ LL |         x_usize > x_u32;\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u32.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:84:19\n@@ -291,7 +315,7 @@ LL |         x_usize > x_u64;\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u64.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:86:19\n@@ -302,7 +326,7 @@ LL |         x_usize > x_u128;\n help: you can convert a `u128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u128.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:92:16\n@@ -313,7 +337,7 @@ LL |         x_i8 > x_i16;\n help: you can convert `x_i8` from `i8` to `i16`, matching the type of `x_i16`\n    |\n LL |         i16::from(x_i8) > x_i16;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:94:16\n@@ -324,7 +348,7 @@ LL |         x_i8 > x_i32;\n help: you can convert `x_i8` from `i8` to `i32`, matching the type of `x_i32`\n    |\n LL |         i32::from(x_i8) > x_i32;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:96:16\n@@ -335,7 +359,7 @@ LL |         x_i8 > x_i64;\n help: you can convert `x_i8` from `i8` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_i8) > x_i64;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:98:16\n@@ -346,7 +370,7 @@ LL |         x_i8 > x_i128;\n help: you can convert `x_i8` from `i8` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_i8) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         +++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:100:16\n@@ -357,16 +381,18 @@ LL |         x_i8 > x_isize;\n help: you can convert `x_i8` from `i8` to `isize`, matching the type of `x_isize`\n    |\n LL |         isize::from(x_i8) > x_isize;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         ++++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:103:17\n    |\n LL |         x_i16 > x_i8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i16`, found `i8`\n-   |                 help: you can convert an `i8` to an `i16`: `x_i8.into()`\n+   |                 ^^^^ expected `i16`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i16`\n+   |\n+LL |         x_i16 > x_i8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:105:17\n@@ -377,7 +403,7 @@ LL |         x_i16 > x_i32;\n help: you can convert `x_i16` from `i16` to `i32`, matching the type of `x_i32`\n    |\n LL |         i32::from(x_i16) > x_i32;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:107:17\n@@ -388,7 +414,7 @@ LL |         x_i16 > x_i64;\n help: you can convert `x_i16` from `i16` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_i16) > x_i64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:109:17\n@@ -399,7 +425,7 @@ LL |         x_i16 > x_i128;\n help: you can convert `x_i16` from `i16` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_i16) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:111:17\n@@ -410,25 +436,29 @@ LL |         x_i16 > x_isize;\n help: you can convert `x_i16` from `i16` to `isize`, matching the type of `x_isize`\n    |\n LL |         isize::from(x_i16) > x_isize;\n-   |         ~~~~~~~~~~~~~~~~~~\n+   |         ++++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:114:17\n    |\n LL |         x_i32 > x_i8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i32`, found `i8`\n-   |                 help: you can convert an `i8` to an `i32`: `x_i8.into()`\n+   |                 ^^^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |         x_i32 > x_i8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:116:17\n    |\n LL |         x_i32 > x_i16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i32`, found `i16`\n-   |                 help: you can convert an `i16` to an `i32`: `x_i16.into()`\n+   |                 ^^^^^ expected `i32`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i32`\n+   |\n+LL |         x_i32 > x_i16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:118:17\n@@ -439,7 +469,7 @@ LL |         x_i32 > x_i64;\n help: you can convert `x_i32` from `i32` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_i32) > x_i64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:120:17\n@@ -450,7 +480,7 @@ LL |         x_i32 > x_i128;\n help: you can convert `x_i32` from `i32` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_i32) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:122:17\n@@ -461,34 +491,40 @@ LL |         x_i32 > x_isize;\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_isize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:125:17\n    |\n LL |         x_i64 > x_i8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i64`, found `i8`\n-   |                 help: you can convert an `i8` to an `i64`: `x_i8.into()`\n+   |                 ^^^^ expected `i64`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i64`\n+   |\n+LL |         x_i64 > x_i8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:127:17\n    |\n LL |         x_i64 > x_i16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i64`, found `i16`\n-   |                 help: you can convert an `i16` to an `i64`: `x_i16.into()`\n+   |                 ^^^^^ expected `i64`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i64`\n+   |\n+LL |         x_i64 > x_i16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:129:17\n    |\n LL |         x_i64 > x_i32;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i64`, found `i32`\n-   |                 help: you can convert an `i32` to an `i64`: `x_i32.into()`\n+   |                 ^^^^^ expected `i64`, found `i32`\n+   |\n+help: you can convert an `i32` to an `i64`\n+   |\n+LL |         x_i64 > x_i32.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:131:17\n@@ -499,7 +535,7 @@ LL |         x_i64 > x_i128;\n help: you can convert `x_i64` from `i64` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_i64) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:133:17\n@@ -510,43 +546,51 @@ LL |         x_i64 > x_isize;\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_isize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:136:18\n    |\n LL |         x_i128 > x_i8;\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `i128`, found `i8`\n-   |                  help: you can convert an `i8` to an `i128`: `x_i8.into()`\n+   |                  ^^^^ expected `i128`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i128`\n+   |\n+LL |         x_i128 > x_i8.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:138:18\n    |\n LL |         x_i128 > x_i16;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `i16`\n-   |                  help: you can convert an `i16` to an `i128`: `x_i16.into()`\n+   |                  ^^^^^ expected `i128`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i128`\n+   |\n+LL |         x_i128 > x_i16.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:140:18\n    |\n LL |         x_i128 > x_i32;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `i32`\n-   |                  help: you can convert an `i32` to an `i128`: `x_i32.into()`\n+   |                  ^^^^^ expected `i128`, found `i32`\n+   |\n+help: you can convert an `i32` to an `i128`\n+   |\n+LL |         x_i128 > x_i32.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:142:18\n    |\n LL |         x_i128 > x_i64;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `i64`\n-   |                  help: you can convert an `i64` to an `i128`: `x_i64.into()`\n+   |                  ^^^^^ expected `i128`, found `i64`\n+   |\n+help: you can convert an `i64` to an `i128`\n+   |\n+LL |         x_i128 > x_i64.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:144:18\n@@ -557,25 +601,29 @@ LL |         x_i128 > x_isize;\n help: you can convert an `isize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_isize.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:147:19\n    |\n LL |         x_isize > x_i8;\n-   |                   ^^^^\n-   |                   |\n-   |                   expected `isize`, found `i8`\n-   |                   help: you can convert an `i8` to an `isize`: `x_i8.into()`\n+   |                   ^^^^ expected `isize`, found `i8`\n+   |\n+help: you can convert an `i8` to an `isize`\n+   |\n+LL |         x_isize > x_i8.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:149:19\n    |\n LL |         x_isize > x_i16;\n-   |                   ^^^^^\n-   |                   |\n-   |                   expected `isize`, found `i16`\n-   |                   help: you can convert an `i16` to an `isize`: `x_i16.into()`\n+   |                   ^^^^^ expected `isize`, found `i16`\n+   |\n+help: you can convert an `i16` to an `isize`\n+   |\n+LL |         x_isize > x_i16.into();\n+   |                        +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:151:19\n@@ -586,7 +634,7 @@ LL |         x_isize > x_i32;\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i32.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:153:19\n@@ -597,7 +645,7 @@ LL |         x_isize > x_i64;\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i64.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:155:19\n@@ -608,7 +656,7 @@ LL |         x_isize > x_i128;\n help: you can convert an `i128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i128.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:161:16\n@@ -619,7 +667,7 @@ LL |         x_u8 > x_i8;\n help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |         x_u8 > x_i8.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:163:16\n@@ -630,7 +678,7 @@ LL |         x_u8 > x_i16;\n help: you can convert `x_u8` from `u8` to `i16`, matching the type of `x_i16`\n    |\n LL |         i16::from(x_u8) > x_i16;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:165:16\n@@ -641,7 +689,7 @@ LL |         x_u8 > x_i32;\n help: you can convert `x_u8` from `u8` to `i32`, matching the type of `x_i32`\n    |\n LL |         i32::from(x_u8) > x_i32;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:167:16\n@@ -652,7 +700,7 @@ LL |         x_u8 > x_i64;\n help: you can convert `x_u8` from `u8` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_u8) > x_i64;\n-   |         ~~~~~~~~~~~~~~~\n+   |         ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:169:16\n@@ -663,7 +711,7 @@ LL |         x_u8 > x_i128;\n help: you can convert `x_u8` from `u8` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_u8) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         +++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:171:16\n@@ -674,7 +722,7 @@ LL |         x_u8 > x_isize;\n help: you can convert `x_u8` from `u8` to `isize`, matching the type of `x_isize`\n    |\n LL |         isize::from(x_u8) > x_isize;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         ++++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:174:17\n@@ -685,7 +733,7 @@ LL |         x_u16 > x_i8;\n help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i8.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:176:17\n@@ -696,7 +744,7 @@ LL |         x_u16 > x_i16;\n help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i16.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:178:17\n@@ -707,7 +755,7 @@ LL |         x_u16 > x_i32;\n help: you can convert `x_u16` from `u16` to `i32`, matching the type of `x_i32`\n    |\n LL |         i32::from(x_u16) > x_i32;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:180:17\n@@ -718,7 +766,7 @@ LL |         x_u16 > x_i64;\n help: you can convert `x_u16` from `u16` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_u16) > x_i64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:182:17\n@@ -729,7 +777,7 @@ LL |         x_u16 > x_i128;\n help: you can convert `x_u16` from `u16` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_u16) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:184:17\n@@ -740,7 +788,7 @@ LL |         x_u16 > x_isize;\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_isize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:187:17\n@@ -751,7 +799,7 @@ LL |         x_u32 > x_i8;\n help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i8.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:189:17\n@@ -762,7 +810,7 @@ LL |         x_u32 > x_i16;\n help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i16.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:191:17\n@@ -773,7 +821,7 @@ LL |         x_u32 > x_i32;\n help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i32.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:193:17\n@@ -784,7 +832,7 @@ LL |         x_u32 > x_i64;\n help: you can convert `x_u32` from `u32` to `i64`, matching the type of `x_i64`\n    |\n LL |         i64::from(x_u32) > x_i64;\n-   |         ~~~~~~~~~~~~~~~~\n+   |         ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:195:17\n@@ -795,7 +843,7 @@ LL |         x_u32 > x_i128;\n help: you can convert `x_u32` from `u32` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_u32) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:197:17\n@@ -806,7 +854,7 @@ LL |         x_u32 > x_isize;\n help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_isize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:200:17\n@@ -817,7 +865,7 @@ LL |         x_u64 > x_i8;\n help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i8.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:202:17\n@@ -828,7 +876,7 @@ LL |         x_u64 > x_i16;\n help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i16.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:204:17\n@@ -839,7 +887,7 @@ LL |         x_u64 > x_i32;\n help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i32.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:206:17\n@@ -850,7 +898,7 @@ LL |         x_u64 > x_i64;\n help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i64.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:208:17\n@@ -861,7 +909,7 @@ LL |         x_u64 > x_i128;\n help: you can convert `x_u64` from `u64` to `i128`, matching the type of `x_i128`\n    |\n LL |         i128::from(x_u64) > x_i128;\n-   |         ~~~~~~~~~~~~~~~~~\n+   |         +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:210:17\n@@ -872,7 +920,7 @@ LL |         x_u64 > x_isize;\n help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_isize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:213:18\n@@ -883,7 +931,7 @@ LL |         x_u128 > x_i8;\n help: you can convert an `i8` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i8.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:215:18\n@@ -894,7 +942,7 @@ LL |         x_u128 > x_i16;\n help: you can convert an `i16` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i16.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:217:18\n@@ -905,7 +953,7 @@ LL |         x_u128 > x_i32;\n help: you can convert an `i32` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i32.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:219:18\n@@ -916,7 +964,7 @@ LL |         x_u128 > x_i64;\n help: you can convert an `i64` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i64.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:221:18\n@@ -927,7 +975,7 @@ LL |         x_u128 > x_i128;\n help: you can convert an `i128` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i128.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:223:18\n@@ -938,7 +986,7 @@ LL |         x_u128 > x_isize;\n help: you can convert an `isize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_isize.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:226:19\n@@ -949,7 +997,7 @@ LL |         x_usize > x_i8;\n help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i8.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:228:19\n@@ -960,7 +1008,7 @@ LL |         x_usize > x_i16;\n help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i16.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:230:19\n@@ -971,7 +1019,7 @@ LL |         x_usize > x_i32;\n help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i32.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:232:19\n@@ -982,7 +1030,7 @@ LL |         x_usize > x_i64;\n help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i64.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:234:19\n@@ -993,7 +1041,7 @@ LL |         x_usize > x_i128;\n help: you can convert an `i128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i128.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:236:19\n@@ -1004,7 +1052,7 @@ LL |         x_usize > x_isize;\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_isize.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                          ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:242:16\n@@ -1015,7 +1063,7 @@ LL |         x_i8 > x_u8;\n help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u8.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:244:16\n@@ -1026,7 +1074,7 @@ LL |         x_i8 > x_u16;\n help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u16.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:246:16\n@@ -1037,7 +1085,7 @@ LL |         x_i8 > x_u32;\n help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u32.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:248:16\n@@ -1048,7 +1096,7 @@ LL |         x_i8 > x_u64;\n help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u64.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:250:16\n@@ -1059,7 +1107,7 @@ LL |         x_i8 > x_u128;\n help: you can convert a `u128` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u128.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:252:16\n@@ -1070,16 +1118,18 @@ LL |         x_i8 > x_usize;\n help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_usize.try_into().unwrap();\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:255:17\n    |\n LL |         x_i16 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i16`, found `u8`\n-   |                 help: you can convert a `u8` to an `i16`: `x_u8.into()`\n+   |                 ^^^^ expected `i16`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i16`\n+   |\n+LL |         x_i16 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:257:17\n@@ -1090,7 +1140,7 @@ LL |         x_i16 > x_u16;\n help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u16.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:259:17\n@@ -1101,7 +1151,7 @@ LL |         x_i16 > x_u32;\n help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u32.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:261:17\n@@ -1112,7 +1162,7 @@ LL |         x_i16 > x_u64;\n help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u64.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:263:17\n@@ -1123,7 +1173,7 @@ LL |         x_i16 > x_u128;\n help: you can convert a `u128` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u128.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:265:17\n@@ -1134,25 +1184,29 @@ LL |         x_i16 > x_usize;\n help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_usize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:268:17\n    |\n LL |         x_i32 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i32`, found `u8`\n-   |                 help: you can convert a `u8` to an `i32`: `x_u8.into()`\n+   |                 ^^^^ expected `i32`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i32`\n+   |\n+LL |         x_i32 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:270:17\n    |\n LL |         x_i32 > x_u16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i32`, found `u16`\n-   |                 help: you can convert a `u16` to an `i32`: `x_u16.into()`\n+   |                 ^^^^^ expected `i32`, found `u16`\n+   |\n+help: you can convert a `u16` to an `i32`\n+   |\n+LL |         x_i32 > x_u16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:272:17\n@@ -1163,7 +1217,7 @@ LL |         x_i32 > x_u32;\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u32.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:274:17\n@@ -1174,7 +1228,7 @@ LL |         x_i32 > x_u64;\n help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u64.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:276:17\n@@ -1185,7 +1239,7 @@ LL |         x_i32 > x_u128;\n help: you can convert a `u128` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u128.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:278:17\n@@ -1196,34 +1250,40 @@ LL |         x_i32 > x_usize;\n help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_usize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:281:17\n    |\n LL |         x_i64 > x_u8;\n-   |                 ^^^^\n-   |                 |\n-   |                 expected `i64`, found `u8`\n-   |                 help: you can convert a `u8` to an `i64`: `x_u8.into()`\n+   |                 ^^^^ expected `i64`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i64`\n+   |\n+LL |         x_i64 > x_u8.into();\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:283:17\n    |\n LL |         x_i64 > x_u16;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i64`, found `u16`\n-   |                 help: you can convert a `u16` to an `i64`: `x_u16.into()`\n+   |                 ^^^^^ expected `i64`, found `u16`\n+   |\n+help: you can convert a `u16` to an `i64`\n+   |\n+LL |         x_i64 > x_u16.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:285:17\n    |\n LL |         x_i64 > x_u32;\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `i64`, found `u32`\n-   |                 help: you can convert a `u32` to an `i64`: `x_u32.into()`\n+   |                 ^^^^^ expected `i64`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i64`\n+   |\n+LL |         x_i64 > x_u32.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:287:17\n@@ -1234,7 +1294,7 @@ LL |         x_i64 > x_u64;\n help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u64.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:289:17\n@@ -1245,7 +1305,7 @@ LL |         x_i64 > x_u128;\n help: you can convert a `u128` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u128.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:291:17\n@@ -1256,43 +1316,51 @@ LL |         x_i64 > x_usize;\n help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_usize.try_into().unwrap();\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:294:18\n    |\n LL |         x_i128 > x_u8;\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `i128`, found `u8`\n-   |                  help: you can convert a `u8` to an `i128`: `x_u8.into()`\n+   |                  ^^^^ expected `i128`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i128`\n+   |\n+LL |         x_i128 > x_u8.into();\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:296:18\n    |\n LL |         x_i128 > x_u16;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `u16`\n-   |                  help: you can convert a `u16` to an `i128`: `x_u16.into()`\n+   |                  ^^^^^ expected `i128`, found `u16`\n+   |\n+help: you can convert a `u16` to an `i128`\n+   |\n+LL |         x_i128 > x_u16.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:298:18\n    |\n LL |         x_i128 > x_u32;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `u32`\n-   |                  help: you can convert a `u32` to an `i128`: `x_u32.into()`\n+   |                  ^^^^^ expected `i128`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i128`\n+   |\n+LL |         x_i128 > x_u32.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:300:18\n    |\n LL |         x_i128 > x_u64;\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `i128`, found `u64`\n-   |                  help: you can convert a `u64` to an `i128`: `x_u64.into()`\n+   |                  ^^^^^ expected `i128`, found `u64`\n+   |\n+help: you can convert a `u64` to an `i128`\n+   |\n+LL |         x_i128 > x_u64.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:302:18\n@@ -1303,7 +1371,7 @@ LL |         x_i128 > x_u128;\n help: you can convert a `u128` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_u128.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:304:18\n@@ -1314,16 +1382,18 @@ LL |         x_i128 > x_usize;\n help: you can convert a `usize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_usize.try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:307:19\n    |\n LL |         x_isize > x_u8;\n-   |                   ^^^^\n-   |                   |\n-   |                   expected `isize`, found `u8`\n-   |                   help: you can convert a `u8` to an `isize`: `x_u8.into()`\n+   |                   ^^^^ expected `isize`, found `u8`\n+   |\n+help: you can convert a `u8` to an `isize`\n+   |\n+LL |         x_isize > x_u8.into();\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:309:19\n@@ -1334,7 +1404,7 @@ LL |         x_isize > x_u16;\n help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u16.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:311:19\n@@ -1345,7 +1415,7 @@ LL |         x_isize > x_u32;\n help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u32.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:313:19\n@@ -1356,7 +1426,7 @@ LL |         x_isize > x_u64;\n help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u64.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                        ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:315:19\n@@ -1367,7 +1437,7 @@ LL |         x_isize > x_u128;\n help: you can convert a `u128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u128.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:317:19\n@@ -1378,7 +1448,7 @@ LL |         x_isize > x_usize;\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_usize.try_into().unwrap();\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                          ++++++++++++++++++++\n \n error: aborting due to 132 previous errors\n "}, {"sha": "e4843206de1dd48c2025a796c22552b2f612a79a", "filename": "src/test/ui/numeric/numeric-cast-no-fix.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -47,7 +47,7 @@ LL |     x_u8 > -1_isize;\n help: you can convert `x_u8` from `u8` to `isize`, matching the type of `-1_isize`\n    |\n LL |     isize::from(x_u8) > -1_isize;\n-   |     ~~~~~~~~~~~~~~~~~\n+   |     ++++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:23:15\n@@ -74,7 +74,7 @@ LL |     x_u64 > -1_i128;\n help: you can convert `x_u64` from `u64` to `i128`, matching the type of `-1_i128`\n    |\n LL |     i128::from(x_u64) > -1_i128;\n-   |     ~~~~~~~~~~~~~~~~~\n+   |     +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:29:13\n@@ -85,7 +85,7 @@ LL |     x_u32 > -1_i128;\n help: you can convert `x_u32` from `u32` to `i128`, matching the type of `-1_i128`\n    |\n LL |     i128::from(x_u32) > -1_i128;\n-   |     ~~~~~~~~~~~~~~~~~\n+   |     +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:31:13\n@@ -96,7 +96,7 @@ LL |     x_u16 > -1_i128;\n help: you can convert `x_u16` from `u16` to `i128`, matching the type of `-1_i128`\n    |\n LL |     i128::from(x_u16) > -1_i128;\n-   |     ~~~~~~~~~~~~~~~~~\n+   |     +++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:33:12\n@@ -107,7 +107,7 @@ LL |     x_u8 > -1_i128;\n help: you can convert `x_u8` from `u8` to `i128`, matching the type of `-1_i128`\n    |\n LL |     i128::from(x_u8) > -1_i128;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     +++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:36:15\n@@ -142,7 +142,7 @@ LL |     x_u32 > -1_i64;\n help: you can convert `x_u32` from `u32` to `i64`, matching the type of `-1_i64`\n    |\n LL |     i64::from(x_u32) > -1_i64;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:44:13\n@@ -153,7 +153,7 @@ LL |     x_u16 > -1_i64;\n help: you can convert `x_u16` from `u16` to `i64`, matching the type of `-1_i64`\n    |\n LL |     i64::from(x_u16) > -1_i64;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:46:12\n@@ -164,7 +164,7 @@ LL |     x_u8 > -1_i64;\n help: you can convert `x_u8` from `u8` to `i64`, matching the type of `-1_i64`\n    |\n LL |     i64::from(x_u8) > -1_i64;\n-   |     ~~~~~~~~~~~~~~~\n+   |     ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:49:15\n@@ -207,7 +207,7 @@ LL |     x_u16 > -1_i32;\n help: you can convert `x_u16` from `u16` to `i32`, matching the type of `-1_i32`\n    |\n LL |     i32::from(x_u16) > -1_i32;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ++++++++++     +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:59:12\n@@ -218,7 +218,7 @@ LL |     x_u8 > -1_i32;\n help: you can convert `x_u8` from `u8` to `i32`, matching the type of `-1_i32`\n    |\n LL |     i32::from(x_u8) > -1_i32;\n-   |     ~~~~~~~~~~~~~~~\n+   |     ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:62:15\n@@ -269,7 +269,7 @@ LL |     x_u8 > -1_i16;\n help: you can convert `x_u8` from `u8` to `i16`, matching the type of `-1_i16`\n    |\n LL |     i16::from(x_u8) > -1_i16;\n-   |     ~~~~~~~~~~~~~~~\n+   |     ++++++++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:75:15"}, {"sha": "3e2bc5bc82d4206f76e9246e0d5c51cec6b8da5c", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 243, "deletions": 191, "changes": 434, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     foo::<usize>(x_u64);\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:25:18\n@@ -18,25 +18,29 @@ LL |     foo::<usize>(x_u32);\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:27:18\n    |\n LL |     foo::<usize>(x_u16);\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `usize`, found `u16`\n-   |                  help: you can convert a `u16` to a `usize`: `x_u16.into()`\n+   |                  ^^^^^ expected `usize`, found `u16`\n+   |\n+help: you can convert a `u16` to a `usize`\n+   |\n+LL |     foo::<usize>(x_u16.into());\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n    |\n LL |     foo::<usize>(x_u8);\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `usize`, found `u8`\n-   |                  help: you can convert a `u8` to a `usize`: `x_u8.into()`\n+   |                  ^^^^ expected `usize`, found `u8`\n+   |\n+help: you can convert a `u8` to a `usize`\n+   |\n+LL |     foo::<usize>(x_u8.into());\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n@@ -47,7 +51,7 @@ LL |     foo::<usize>(x_isize);\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:33:18\n@@ -58,7 +62,7 @@ LL |     foo::<usize>(x_i64);\n help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:35:18\n@@ -69,7 +73,7 @@ LL |     foo::<usize>(x_i32);\n help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:37:18\n@@ -80,7 +84,7 @@ LL |     foo::<usize>(x_i16);\n help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:39:18\n@@ -91,7 +95,7 @@ LL |     foo::<usize>(x_i8);\n help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:44:18\n@@ -102,7 +106,7 @@ LL |     foo::<isize>(x_usize);\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                         ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:46:18\n@@ -113,7 +117,7 @@ LL |     foo::<isize>(x_u64);\n help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:48:18\n@@ -124,7 +128,7 @@ LL |     foo::<isize>(x_u32);\n help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:50:18\n@@ -135,16 +139,18 @@ LL |     foo::<isize>(x_u16);\n help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `isize`, found `u8`\n-   |                  help: you can convert a `u8` to an `isize`: `x_u8.into()`\n+   |                  ^^^^ expected `isize`, found `u8`\n+   |\n+help: you can convert a `u8` to an `isize`\n+   |\n+LL |     foo::<isize>(x_u8.into());\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n@@ -155,7 +161,7 @@ LL |     foo::<isize>(x_i64);\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:57:18\n@@ -166,25 +172,29 @@ LL |     foo::<isize>(x_i32);\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:59:18\n    |\n LL |     foo::<isize>(x_i16);\n-   |                  ^^^^^\n-   |                  |\n-   |                  expected `isize`, found `i16`\n-   |                  help: you can convert an `i16` to an `isize`: `x_i16.into()`\n+   |                  ^^^^^ expected `isize`, found `i16`\n+   |\n+help: you can convert an `i16` to an `isize`\n+   |\n+LL |     foo::<isize>(x_i16.into());\n+   |                       +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:61:18\n    |\n LL |     foo::<isize>(x_i8);\n-   |                  ^^^^\n-   |                  |\n-   |                  expected `isize`, found `i8`\n-   |                  help: you can convert an `i8` to an `isize`: `x_i8.into()`\n+   |                  ^^^^ expected `isize`, found `i8`\n+   |\n+help: you can convert an `i8` to an `isize`\n+   |\n+LL |     foo::<isize>(x_i8.into());\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:66:16\n@@ -195,34 +205,40 @@ LL |     foo::<u64>(x_usize);\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:69:16\n    |\n LL |     foo::<u64>(x_u32);\n-   |                ^^^^^\n-   |                |\n-   |                expected `u64`, found `u32`\n-   |                help: you can convert a `u32` to a `u64`: `x_u32.into()`\n+   |                ^^^^^ expected `u64`, found `u32`\n+   |\n+help: you can convert a `u32` to a `u64`\n+   |\n+LL |     foo::<u64>(x_u32.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:71:16\n    |\n LL |     foo::<u64>(x_u16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `u64`, found `u16`\n-   |                help: you can convert a `u16` to a `u64`: `x_u16.into()`\n+   |                ^^^^^ expected `u64`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u64`\n+   |\n+LL |     foo::<u64>(x_u16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:73:16\n    |\n LL |     foo::<u64>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `u64`, found `u8`\n-   |                help: you can convert a `u8` to a `u64`: `x_u8.into()`\n+   |                ^^^^ expected `u64`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u64`\n+   |\n+LL |     foo::<u64>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:75:16\n@@ -233,7 +249,7 @@ LL |     foo::<u64>(x_isize);\n help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:77:16\n@@ -244,7 +260,7 @@ LL |     foo::<u64>(x_i64);\n help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:79:16\n@@ -255,7 +271,7 @@ LL |     foo::<u64>(x_i32);\n help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:81:16\n@@ -266,7 +282,7 @@ LL |     foo::<u64>(x_i16);\n help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:83:16\n@@ -277,7 +293,7 @@ LL |     foo::<u64>(x_i8);\n help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:88:16\n@@ -288,7 +304,7 @@ LL |     foo::<i64>(x_usize);\n help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:90:16\n@@ -299,34 +315,40 @@ LL |     foo::<i64>(x_u64);\n help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i64`, found `u32`\n-   |                help: you can convert a `u32` to an `i64`: `x_u32.into()`\n+   |                ^^^^^ expected `i64`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i64`\n+   |\n+LL |     foo::<i64>(x_u32.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i64`, found `u16`\n-   |                help: you can convert a `u16` to an `i64`: `x_u16.into()`\n+   |                ^^^^^ expected `i64`, found `u16`\n+   |\n+help: you can convert a `u16` to an `i64`\n+   |\n+LL |     foo::<i64>(x_u16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i64`, found `u8`\n-   |                help: you can convert a `u8` to an `i64`: `x_u8.into()`\n+   |                ^^^^ expected `i64`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i64`\n+   |\n+LL |     foo::<i64>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n@@ -337,34 +359,40 @@ LL |     foo::<i64>(x_isize);\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:101:16\n    |\n LL |     foo::<i64>(x_i32);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i64`, found `i32`\n-   |                help: you can convert an `i32` to an `i64`: `x_i32.into()`\n+   |                ^^^^^ expected `i64`, found `i32`\n+   |\n+help: you can convert an `i32` to an `i64`\n+   |\n+LL |     foo::<i64>(x_i32.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:103:16\n    |\n LL |     foo::<i64>(x_i16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i64`, found `i16`\n-   |                help: you can convert an `i16` to an `i64`: `x_i16.into()`\n+   |                ^^^^^ expected `i64`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i64`\n+   |\n+LL |     foo::<i64>(x_i16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:105:16\n    |\n LL |     foo::<i64>(x_i8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i64`, found `i8`\n-   |                help: you can convert an `i8` to an `i64`: `x_i8.into()`\n+   |                ^^^^ expected `i64`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i64`\n+   |\n+LL |     foo::<i64>(x_i8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:110:16\n@@ -375,7 +403,7 @@ LL |     foo::<u32>(x_usize);\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:112:16\n@@ -386,25 +414,29 @@ LL |     foo::<u32>(x_u64);\n help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:115:16\n    |\n LL |     foo::<u32>(x_u16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `u32`, found `u16`\n-   |                help: you can convert a `u16` to a `u32`: `x_u16.into()`\n+   |                ^^^^^ expected `u32`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |     foo::<u32>(x_u16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:117:16\n    |\n LL |     foo::<u32>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `u32`, found `u8`\n-   |                help: you can convert a `u8` to a `u32`: `x_u8.into()`\n+   |                ^^^^ expected `u32`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u32`\n+   |\n+LL |     foo::<u32>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:119:16\n@@ -415,7 +447,7 @@ LL |     foo::<u32>(x_isize);\n help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:121:16\n@@ -426,7 +458,7 @@ LL |     foo::<u32>(x_i64);\n help: you can convert an `i64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:123:16\n@@ -437,7 +469,7 @@ LL |     foo::<u32>(x_i32);\n help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:125:16\n@@ -448,7 +480,7 @@ LL |     foo::<u32>(x_i16);\n help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:127:16\n@@ -459,7 +491,7 @@ LL |     foo::<u32>(x_i8);\n help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:132:16\n@@ -470,7 +502,7 @@ LL |     foo::<i32>(x_usize);\n help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:134:16\n@@ -481,7 +513,7 @@ LL |     foo::<i32>(x_u64);\n help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:136:16\n@@ -492,25 +524,29 @@ LL |     foo::<i32>(x_u32);\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i32`, found `u16`\n-   |                help: you can convert a `u16` to an `i32`: `x_u16.into()`\n+   |                ^^^^^ expected `i32`, found `u16`\n+   |\n+help: you can convert a `u16` to an `i32`\n+   |\n+LL |     foo::<i32>(x_u16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i32`, found `u8`\n-   |                help: you can convert a `u8` to an `i32`: `x_u8.into()`\n+   |                ^^^^ expected `i32`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i32`\n+   |\n+LL |     foo::<i32>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n@@ -521,7 +557,7 @@ LL |     foo::<i32>(x_isize);\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:144:16\n@@ -532,25 +568,29 @@ LL |     foo::<i32>(x_i64);\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:147:16\n    |\n LL |     foo::<i32>(x_i16);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i32`, found `i16`\n-   |                help: you can convert an `i16` to an `i32`: `x_i16.into()`\n+   |                ^^^^^ expected `i32`, found `i16`\n+   |\n+help: you can convert an `i16` to an `i32`\n+   |\n+LL |     foo::<i32>(x_i16.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:149:16\n    |\n LL |     foo::<i32>(x_i8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to an `i32`: `x_i8.into()`\n+   |                ^^^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     foo::<i32>(x_i8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:154:16\n@@ -561,7 +601,7 @@ LL |     foo::<u16>(x_usize);\n help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:156:16\n@@ -572,7 +612,7 @@ LL |     foo::<u16>(x_u64);\n help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:158:16\n@@ -583,16 +623,18 @@ LL |     foo::<u16>(x_u32);\n help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:161:16\n    |\n LL |     foo::<u16>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `u16`, found `u8`\n-   |                help: you can convert a `u8` to a `u16`: `x_u8.into()`\n+   |                ^^^^ expected `u16`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u16`\n+   |\n+LL |     foo::<u16>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:163:16\n@@ -603,7 +645,7 @@ LL |     foo::<u16>(x_isize);\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:165:16\n@@ -614,7 +656,7 @@ LL |     foo::<u16>(x_i64);\n help: you can convert an `i64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:167:16\n@@ -625,7 +667,7 @@ LL |     foo::<u16>(x_i32);\n help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:169:16\n@@ -636,7 +678,7 @@ LL |     foo::<u16>(x_i16);\n help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:171:16\n@@ -647,7 +689,7 @@ LL |     foo::<u16>(x_i8);\n help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:176:16\n@@ -658,7 +700,7 @@ LL |     foo::<i16>(x_usize);\n help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:178:16\n@@ -669,7 +711,7 @@ LL |     foo::<i16>(x_u64);\n help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:180:16\n@@ -680,7 +722,7 @@ LL |     foo::<i16>(x_u32);\n help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:182:16\n@@ -691,16 +733,18 @@ LL |     foo::<i16>(x_u16);\n help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i16`, found `u8`\n-   |                help: you can convert a `u8` to an `i16`: `x_u8.into()`\n+   |                ^^^^ expected `i16`, found `u8`\n+   |\n+help: you can convert a `u8` to an `i16`\n+   |\n+LL |     foo::<i16>(x_u8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16\n@@ -711,7 +755,7 @@ LL |     foo::<i16>(x_isize);\n help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                       ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:188:16\n@@ -722,7 +766,7 @@ LL |     foo::<i16>(x_i64);\n help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:190:16\n@@ -733,16 +777,18 @@ LL |     foo::<i16>(x_i32);\n help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                     ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:193:16\n    |\n LL |     foo::<i16>(x_i8);\n-   |                ^^^^\n-   |                |\n-   |                expected `i16`, found `i8`\n-   |                help: you can convert an `i8` to an `i16`: `x_i8.into()`\n+   |                ^^^^ expected `i16`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i16`\n+   |\n+LL |     foo::<i16>(x_i8.into());\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:198:15\n@@ -753,7 +799,7 @@ LL |     foo::<u8>(x_usize);\n help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:200:15\n@@ -764,7 +810,7 @@ LL |     foo::<u8>(x_u64);\n help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:202:15\n@@ -775,7 +821,7 @@ LL |     foo::<u8>(x_u32);\n help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:204:15\n@@ -786,7 +832,7 @@ LL |     foo::<u8>(x_u16);\n help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:207:15\n@@ -797,7 +843,7 @@ LL |     foo::<u8>(x_isize);\n help: you can convert an `isize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:209:15\n@@ -808,7 +854,7 @@ LL |     foo::<u8>(x_i64);\n help: you can convert an `i64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:211:15\n@@ -819,7 +865,7 @@ LL |     foo::<u8>(x_i32);\n help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:213:15\n@@ -830,7 +876,7 @@ LL |     foo::<u8>(x_i16);\n help: you can convert an `i16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:215:15\n@@ -841,7 +887,7 @@ LL |     foo::<u8>(x_i8);\n help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                   ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:220:15\n@@ -852,7 +898,7 @@ LL |     foo::<i8>(x_usize);\n help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:222:15\n@@ -863,7 +909,7 @@ LL |     foo::<i8>(x_u64);\n help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:224:15\n@@ -874,7 +920,7 @@ LL |     foo::<i8>(x_u32);\n help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:226:15\n@@ -885,7 +931,7 @@ LL |     foo::<i8>(x_u16);\n help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:228:15\n@@ -896,7 +942,7 @@ LL |     foo::<i8>(x_u8);\n help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                   ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:230:15\n@@ -907,7 +953,7 @@ LL |     foo::<i8>(x_isize);\n help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:232:15\n@@ -918,7 +964,7 @@ LL |     foo::<i8>(x_i64);\n help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:234:15\n@@ -929,7 +975,7 @@ LL |     foo::<i8>(x_i32);\n help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:236:15\n@@ -940,7 +986,7 @@ LL |     foo::<i8>(x_i16);\n help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n-   |               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:242:16\n@@ -951,7 +997,7 @@ LL |     foo::<f64>(x_usize);\n help: you can cast a `usize` to an `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_usize as f64);\n-   |                ~~~~~~~~~~~~~~\n+   |                        ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:244:16\n@@ -962,7 +1008,7 @@ LL |     foo::<f64>(x_u64);\n help: you can cast a `u64` to an `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_u64 as f64);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:246:16\n@@ -973,7 +1019,7 @@ LL |     foo::<f64>(x_u32);\n help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:248:16\n@@ -984,7 +1030,7 @@ LL |     foo::<f64>(x_u16);\n help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:250:16\n@@ -995,7 +1041,7 @@ LL |     foo::<f64>(x_u8);\n help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n-   |                ~~~~~~~~~~~\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:252:16\n@@ -1006,7 +1052,7 @@ LL |     foo::<f64>(x_isize);\n help: you can convert an `isize` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_isize as f64);\n-   |                ~~~~~~~~~~~~~~\n+   |                        ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:254:16\n@@ -1017,7 +1063,7 @@ LL |     foo::<f64>(x_i64);\n help: you can convert an `i64` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_i64 as f64);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:256:16\n@@ -1028,7 +1074,7 @@ LL |     foo::<f64>(x_i32);\n help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i32.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:258:16\n@@ -1039,7 +1085,7 @@ LL |     foo::<f64>(x_i16);\n help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i16.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:260:16\n@@ -1050,16 +1096,18 @@ LL |     foo::<f64>(x_i8);\n help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i8.into());\n-   |                ~~~~~~~~~~~\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:263:16\n    |\n LL |     foo::<f64>(x_f32);\n-   |                ^^^^^\n-   |                |\n-   |                expected `f64`, found `f32`\n-   |                help: you can convert an `f32` to an `f64`: `x_f32.into()`\n+   |                ^^^^^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     foo::<f64>(x_f32.into());\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:266:16\n@@ -1070,7 +1118,7 @@ LL |     foo::<f32>(x_usize);\n help: you can cast a `usize` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_usize as f32);\n-   |                ~~~~~~~~~~~~~~\n+   |                        ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:268:16\n@@ -1081,7 +1129,7 @@ LL |     foo::<f32>(x_u64);\n help: you can cast a `u64` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u64 as f32);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:270:16\n@@ -1092,7 +1140,7 @@ LL |     foo::<f32>(x_u32);\n help: you can cast a `u32` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u32 as f32);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:272:16\n@@ -1103,7 +1151,7 @@ LL |     foo::<f32>(x_u16);\n help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:274:16\n@@ -1114,7 +1162,7 @@ LL |     foo::<f32>(x_u8);\n help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n-   |                ~~~~~~~~~~~\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:276:16\n@@ -1125,7 +1173,7 @@ LL |     foo::<f32>(x_isize);\n help: you can convert an `isize` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_isize as f32);\n-   |                ~~~~~~~~~~~~~~\n+   |                        ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:278:16\n@@ -1136,7 +1184,7 @@ LL |     foo::<f32>(x_i64);\n help: you can convert an `i64` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i64 as f32);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:280:16\n@@ -1147,7 +1195,7 @@ LL |     foo::<f32>(x_i32);\n help: you can convert an `i32` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i32 as f32);\n-   |                ~~~~~~~~~~~~\n+   |                      ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:282:16\n@@ -1158,7 +1206,7 @@ LL |     foo::<f32>(x_i16);\n help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i16.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:284:16\n@@ -1169,25 +1217,29 @@ LL |     foo::<f32>(x_i8);\n help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i8.into());\n-   |                ~~~~~~~~~~~\n+   |                    +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:289:16\n    |\n LL |     foo::<u32>(x_u8 as u16);\n-   |                ^^^^^^^^^^^\n-   |                |\n-   |                expected `u32`, found `u16`\n-   |                help: you can convert a `u16` to a `u32`: `(x_u8 as u16).into()`\n+   |                ^^^^^^^^^^^ expected `u32`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |     foo::<u32>((x_u8 as u16).into());\n+   |                +           ++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:291:16\n    |\n LL |     foo::<i32>(-x_i8);\n-   |                ^^^^^\n-   |                |\n-   |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to an `i32`: `(-x_i8).into()`\n+   |                ^^^^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     foo::<i32>((-x_i8).into());\n+   |                +     ++++++++\n \n error: aborting due to 113 previous errors\n "}, {"sha": "b829946e522260f3e076bb0329cf9567b9fc9b2e", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "modified", "additions": 144, "deletions": 140, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     foo::<usize>(42_u64);\n help: change the type of the numeric literal from `u64` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:9:18\n@@ -18,7 +18,7 @@ LL |     foo::<usize>(42_u32);\n help: change the type of the numeric literal from `u32` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:11:18\n@@ -29,7 +29,7 @@ LL |     foo::<usize>(42_u16);\n help: change the type of the numeric literal from `u16` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:13:18\n@@ -40,7 +40,7 @@ LL |     foo::<usize>(42_u8);\n help: change the type of the numeric literal from `u8` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:15:18\n@@ -51,7 +51,7 @@ LL |     foo::<usize>(42_isize);\n help: change the type of the numeric literal from `isize` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:17:18\n@@ -62,7 +62,7 @@ LL |     foo::<usize>(42_i64);\n help: change the type of the numeric literal from `i64` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:19:18\n@@ -73,7 +73,7 @@ LL |     foo::<usize>(42_i32);\n help: change the type of the numeric literal from `i32` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:21:18\n@@ -84,7 +84,7 @@ LL |     foo::<usize>(42_i16);\n help: change the type of the numeric literal from `i16` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:23:18\n@@ -95,7 +95,7 @@ LL |     foo::<usize>(42_i8);\n help: change the type of the numeric literal from `i8` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:25:18\n@@ -106,7 +106,7 @@ LL |     foo::<usize>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `usize`\n    |\n LL |     foo::<usize>(42usize);\n-   |                  ~~~~~~~\n+   |                    ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:27:18\n@@ -117,7 +117,7 @@ LL |     foo::<usize>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `usize`\n    |\n LL |     foo::<usize>(42usize);\n-   |                  ~~~~~~~\n+   |                    ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:30:18\n@@ -128,7 +128,7 @@ LL |     foo::<isize>(42_usize);\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:32:18\n@@ -139,7 +139,7 @@ LL |     foo::<isize>(42_u64);\n help: change the type of the numeric literal from `u64` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:34:18\n@@ -150,7 +150,7 @@ LL |     foo::<isize>(42_u32);\n help: change the type of the numeric literal from `u32` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:36:18\n@@ -161,7 +161,7 @@ LL |     foo::<isize>(42_u16);\n help: change the type of the numeric literal from `u16` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:38:18\n@@ -172,7 +172,7 @@ LL |     foo::<isize>(42_u8);\n help: change the type of the numeric literal from `u8` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:41:18\n@@ -183,7 +183,7 @@ LL |     foo::<isize>(42_i64);\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:43:18\n@@ -194,7 +194,7 @@ LL |     foo::<isize>(42_i32);\n help: change the type of the numeric literal from `i32` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:45:18\n@@ -205,7 +205,7 @@ LL |     foo::<isize>(42_i16);\n help: change the type of the numeric literal from `i16` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:47:18\n@@ -216,7 +216,7 @@ LL |     foo::<isize>(42_i8);\n help: change the type of the numeric literal from `i8` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n-   |                  ~~~~~~~~\n+   |                     ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:49:18\n@@ -227,7 +227,7 @@ LL |     foo::<isize>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `isize`\n    |\n LL |     foo::<isize>(42isize);\n-   |                  ~~~~~~~\n+   |                    ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:51:18\n@@ -238,7 +238,7 @@ LL |     foo::<isize>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `isize`\n    |\n LL |     foo::<isize>(42isize);\n-   |                  ~~~~~~~\n+   |                    ~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:54:16\n@@ -249,7 +249,7 @@ LL |     foo::<u64>(42_usize);\n help: change the type of the numeric literal from `usize` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:57:16\n@@ -260,7 +260,7 @@ LL |     foo::<u64>(42_u32);\n help: change the type of the numeric literal from `u32` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:59:16\n@@ -271,7 +271,7 @@ LL |     foo::<u64>(42_u16);\n help: change the type of the numeric literal from `u16` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:61:16\n@@ -282,7 +282,7 @@ LL |     foo::<u64>(42_u8);\n help: change the type of the numeric literal from `u8` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:63:16\n@@ -293,7 +293,7 @@ LL |     foo::<u64>(42_isize);\n help: change the type of the numeric literal from `isize` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:65:16\n@@ -304,7 +304,7 @@ LL |     foo::<u64>(42_i64);\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:67:16\n@@ -315,7 +315,7 @@ LL |     foo::<u64>(42_i32);\n help: change the type of the numeric literal from `i32` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:69:16\n@@ -326,7 +326,7 @@ LL |     foo::<u64>(42_i16);\n help: change the type of the numeric literal from `i16` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:71:16\n@@ -337,7 +337,7 @@ LL |     foo::<u64>(42_i8);\n help: change the type of the numeric literal from `i8` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:73:16\n@@ -348,7 +348,7 @@ LL |     foo::<u64>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `u64`\n    |\n LL |     foo::<u64>(42u64);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:75:16\n@@ -359,7 +359,7 @@ LL |     foo::<u64>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `u64`\n    |\n LL |     foo::<u64>(42u64);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:78:16\n@@ -370,7 +370,7 @@ LL |     foo::<i64>(42_usize);\n help: change the type of the numeric literal from `usize` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:80:16\n@@ -381,7 +381,7 @@ LL |     foo::<i64>(42_u64);\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:82:16\n@@ -392,7 +392,7 @@ LL |     foo::<i64>(42_u32);\n help: change the type of the numeric literal from `u32` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:84:16\n@@ -403,7 +403,7 @@ LL |     foo::<i64>(42_u16);\n help: change the type of the numeric literal from `u16` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:86:16\n@@ -414,7 +414,7 @@ LL |     foo::<i64>(42_u8);\n help: change the type of the numeric literal from `u8` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:88:16\n@@ -425,7 +425,7 @@ LL |     foo::<i64>(42_isize);\n help: change the type of the numeric literal from `isize` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:91:16\n@@ -436,7 +436,7 @@ LL |     foo::<i64>(42_i32);\n help: change the type of the numeric literal from `i32` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:93:16\n@@ -447,7 +447,7 @@ LL |     foo::<i64>(42_i16);\n help: change the type of the numeric literal from `i16` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:95:16\n@@ -458,7 +458,7 @@ LL |     foo::<i64>(42_i8);\n help: change the type of the numeric literal from `i8` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:97:16\n@@ -469,7 +469,7 @@ LL |     foo::<i64>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `i64`\n    |\n LL |     foo::<i64>(42i64);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:99:16\n@@ -480,7 +480,7 @@ LL |     foo::<i64>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `i64`\n    |\n LL |     foo::<i64>(42i64);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:102:16\n@@ -491,7 +491,7 @@ LL |     foo::<u32>(42_usize);\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:104:16\n@@ -502,7 +502,7 @@ LL |     foo::<u32>(42_u64);\n help: change the type of the numeric literal from `u64` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:107:16\n@@ -513,7 +513,7 @@ LL |     foo::<u32>(42_u16);\n help: change the type of the numeric literal from `u16` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:109:16\n@@ -524,7 +524,7 @@ LL |     foo::<u32>(42_u8);\n help: change the type of the numeric literal from `u8` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:111:16\n@@ -535,7 +535,7 @@ LL |     foo::<u32>(42_isize);\n help: change the type of the numeric literal from `isize` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:113:16\n@@ -546,7 +546,7 @@ LL |     foo::<u32>(42_i64);\n help: change the type of the numeric literal from `i64` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:115:16\n@@ -557,7 +557,7 @@ LL |     foo::<u32>(42_i32);\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:117:16\n@@ -568,7 +568,7 @@ LL |     foo::<u32>(42_i16);\n help: change the type of the numeric literal from `i16` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:119:16\n@@ -579,7 +579,7 @@ LL |     foo::<u32>(42_i8);\n help: change the type of the numeric literal from `i8` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:121:16\n@@ -590,7 +590,7 @@ LL |     foo::<u32>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `u32`\n    |\n LL |     foo::<u32>(42u32);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:123:16\n@@ -601,7 +601,7 @@ LL |     foo::<u32>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `u32`\n    |\n LL |     foo::<u32>(42u32);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:126:16\n@@ -612,7 +612,7 @@ LL |     foo::<i32>(42_usize);\n help: change the type of the numeric literal from `usize` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:128:16\n@@ -623,7 +623,7 @@ LL |     foo::<i32>(42_u64);\n help: change the type of the numeric literal from `u64` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:130:16\n@@ -634,7 +634,7 @@ LL |     foo::<i32>(42_u32);\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:132:16\n@@ -645,7 +645,7 @@ LL |     foo::<i32>(42_u16);\n help: change the type of the numeric literal from `u16` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:134:16\n@@ -656,7 +656,7 @@ LL |     foo::<i32>(42_u8);\n help: change the type of the numeric literal from `u8` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:136:16\n@@ -667,7 +667,7 @@ LL |     foo::<i32>(42_isize);\n help: change the type of the numeric literal from `isize` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:138:16\n@@ -678,7 +678,7 @@ LL |     foo::<i32>(42_i64);\n help: change the type of the numeric literal from `i64` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:141:16\n@@ -689,7 +689,7 @@ LL |     foo::<i32>(42_i16);\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:143:16\n@@ -700,7 +700,7 @@ LL |     foo::<i32>(42_i8);\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:145:16\n@@ -711,7 +711,7 @@ LL |     foo::<i32>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `i32`\n    |\n LL |     foo::<i32>(42i32);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:147:16\n@@ -722,7 +722,7 @@ LL |     foo::<i32>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `i32`\n    |\n LL |     foo::<i32>(42i32);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:150:16\n@@ -733,7 +733,7 @@ LL |     foo::<u16>(42_usize);\n help: change the type of the numeric literal from `usize` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:152:16\n@@ -744,7 +744,7 @@ LL |     foo::<u16>(42_u64);\n help: change the type of the numeric literal from `u64` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:154:16\n@@ -755,7 +755,7 @@ LL |     foo::<u16>(42_u32);\n help: change the type of the numeric literal from `u32` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:157:16\n@@ -766,7 +766,7 @@ LL |     foo::<u16>(42_u8);\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:159:16\n@@ -777,7 +777,7 @@ LL |     foo::<u16>(42_isize);\n help: change the type of the numeric literal from `isize` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:161:16\n@@ -788,7 +788,7 @@ LL |     foo::<u16>(42_i64);\n help: change the type of the numeric literal from `i64` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:163:16\n@@ -799,7 +799,7 @@ LL |     foo::<u16>(42_i32);\n help: change the type of the numeric literal from `i32` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:165:16\n@@ -810,7 +810,7 @@ LL |     foo::<u16>(42_i16);\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:167:16\n@@ -821,7 +821,7 @@ LL |     foo::<u16>(42_i8);\n help: change the type of the numeric literal from `i8` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:169:16\n@@ -832,7 +832,7 @@ LL |     foo::<u16>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `u16`\n    |\n LL |     foo::<u16>(42u16);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:171:16\n@@ -843,7 +843,7 @@ LL |     foo::<u16>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `u16`\n    |\n LL |     foo::<u16>(42u16);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:174:16\n@@ -854,7 +854,7 @@ LL |     foo::<i16>(42_usize);\n help: change the type of the numeric literal from `usize` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:176:16\n@@ -865,7 +865,7 @@ LL |     foo::<i16>(42_u64);\n help: change the type of the numeric literal from `u64` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:178:16\n@@ -876,7 +876,7 @@ LL |     foo::<i16>(42_u32);\n help: change the type of the numeric literal from `u32` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:180:16\n@@ -887,7 +887,7 @@ LL |     foo::<i16>(42_u16);\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:182:16\n@@ -898,7 +898,7 @@ LL |     foo::<i16>(42_u8);\n help: change the type of the numeric literal from `u8` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:184:16\n@@ -909,7 +909,7 @@ LL |     foo::<i16>(42_isize);\n help: change the type of the numeric literal from `isize` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:186:16\n@@ -920,7 +920,7 @@ LL |     foo::<i16>(42_i64);\n help: change the type of the numeric literal from `i64` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:188:16\n@@ -931,7 +931,7 @@ LL |     foo::<i16>(42_i32);\n help: change the type of the numeric literal from `i32` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:191:16\n@@ -942,7 +942,7 @@ LL |     foo::<i16>(42_i8);\n help: change the type of the numeric literal from `i8` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:193:16\n@@ -953,7 +953,7 @@ LL |     foo::<i16>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `i16`\n    |\n LL |     foo::<i16>(42i16);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:195:16\n@@ -964,7 +964,7 @@ LL |     foo::<i16>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `i16`\n    |\n LL |     foo::<i16>(42i16);\n-   |                ~~~~~\n+   |                  ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:198:15\n@@ -975,7 +975,7 @@ LL |     foo::<u8>(42_usize);\n help: change the type of the numeric literal from `usize` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:200:15\n@@ -986,7 +986,7 @@ LL |     foo::<u8>(42_u64);\n help: change the type of the numeric literal from `u64` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:202:15\n@@ -997,7 +997,7 @@ LL |     foo::<u8>(42_u32);\n help: change the type of the numeric literal from `u32` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:204:15\n@@ -1008,7 +1008,7 @@ LL |     foo::<u8>(42_u16);\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:207:15\n@@ -1019,7 +1019,7 @@ LL |     foo::<u8>(42_isize);\n help: change the type of the numeric literal from `isize` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:209:15\n@@ -1030,7 +1030,7 @@ LL |     foo::<u8>(42_i64);\n help: change the type of the numeric literal from `i64` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:211:15\n@@ -1041,7 +1041,7 @@ LL |     foo::<u8>(42_i32);\n help: change the type of the numeric literal from `i32` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:213:15\n@@ -1052,7 +1052,7 @@ LL |     foo::<u8>(42_i16);\n help: change the type of the numeric literal from `i16` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:215:15\n@@ -1063,7 +1063,7 @@ LL |     foo::<u8>(42_i8);\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:217:15\n@@ -1074,7 +1074,7 @@ LL |     foo::<u8>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `u8`\n    |\n LL |     foo::<u8>(42u8);\n-   |               ~~~~\n+   |                 ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:219:15\n@@ -1085,7 +1085,7 @@ LL |     foo::<u8>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `u8`\n    |\n LL |     foo::<u8>(42u8);\n-   |               ~~~~\n+   |                 ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:222:15\n@@ -1096,7 +1096,7 @@ LL |     foo::<i8>(42_usize);\n help: change the type of the numeric literal from `usize` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:224:15\n@@ -1107,7 +1107,7 @@ LL |     foo::<i8>(42_u64);\n help: change the type of the numeric literal from `u64` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:226:15\n@@ -1118,7 +1118,7 @@ LL |     foo::<i8>(42_u32);\n help: change the type of the numeric literal from `u32` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:228:15\n@@ -1129,7 +1129,7 @@ LL |     foo::<i8>(42_u16);\n help: change the type of the numeric literal from `u16` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:230:15\n@@ -1140,7 +1140,7 @@ LL |     foo::<i8>(42_u8);\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:232:15\n@@ -1151,7 +1151,7 @@ LL |     foo::<i8>(42_isize);\n help: change the type of the numeric literal from `isize` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:234:15\n@@ -1162,7 +1162,7 @@ LL |     foo::<i8>(42_i64);\n help: change the type of the numeric literal from `i64` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:236:15\n@@ -1173,7 +1173,7 @@ LL |     foo::<i8>(42_i32);\n help: change the type of the numeric literal from `i32` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:238:15\n@@ -1184,7 +1184,7 @@ LL |     foo::<i8>(42_i16);\n help: change the type of the numeric literal from `i16` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n-   |               ~~~~~\n+   |                  ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:241:15\n@@ -1195,7 +1195,7 @@ LL |     foo::<i8>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `i8`\n    |\n LL |     foo::<i8>(42i8);\n-   |               ~~~~\n+   |                 ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:243:15\n@@ -1206,7 +1206,7 @@ LL |     foo::<i8>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `i8`\n    |\n LL |     foo::<i8>(42i8);\n-   |               ~~~~\n+   |                 ~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:246:16\n@@ -1217,7 +1217,7 @@ LL |     foo::<f64>(42_usize);\n help: change the type of the numeric literal from `usize` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:248:16\n@@ -1228,7 +1228,7 @@ LL |     foo::<f64>(42_u64);\n help: change the type of the numeric literal from `u64` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:250:16\n@@ -1239,7 +1239,7 @@ LL |     foo::<f64>(42_u32);\n help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u32.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:252:16\n@@ -1250,7 +1250,7 @@ LL |     foo::<f64>(42_u16);\n help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u16.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:254:16\n@@ -1261,7 +1261,7 @@ LL |     foo::<f64>(42_u8);\n help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u8.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:256:16\n@@ -1272,7 +1272,7 @@ LL |     foo::<f64>(42_isize);\n help: change the type of the numeric literal from `isize` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:258:16\n@@ -1283,7 +1283,7 @@ LL |     foo::<f64>(42_i64);\n help: change the type of the numeric literal from `i64` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:260:16\n@@ -1294,7 +1294,7 @@ LL |     foo::<f64>(42_i32);\n help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i32.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:262:16\n@@ -1305,7 +1305,7 @@ LL |     foo::<f64>(42_i16);\n help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i16.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:264:16\n@@ -1316,7 +1316,7 @@ LL |     foo::<f64>(42_i8);\n help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i8.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:267:16\n@@ -1327,7 +1327,7 @@ LL |     foo::<f64>(42.0_f32);\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n LL |     foo::<f64>(42.0_f64);\n-   |                ~~~~~~~~\n+   |                     ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:270:16\n@@ -1338,7 +1338,7 @@ LL |     foo::<f32>(42_usize);\n help: change the type of the numeric literal from `usize` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:272:16\n@@ -1349,7 +1349,7 @@ LL |     foo::<f32>(42_u64);\n help: change the type of the numeric literal from `u64` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:274:16\n@@ -1360,7 +1360,7 @@ LL |     foo::<f32>(42_u32);\n help: change the type of the numeric literal from `u32` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:276:16\n@@ -1371,7 +1371,7 @@ LL |     foo::<f32>(42_u16);\n help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u16.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:278:16\n@@ -1382,7 +1382,7 @@ LL |     foo::<f32>(42_u8);\n help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u8.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:280:16\n@@ -1393,7 +1393,7 @@ LL |     foo::<f32>(42_isize);\n help: change the type of the numeric literal from `isize` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:282:16\n@@ -1404,7 +1404,7 @@ LL |     foo::<f32>(42_i64);\n help: change the type of the numeric literal from `i64` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:284:16\n@@ -1415,7 +1415,7 @@ LL |     foo::<f32>(42_i32);\n help: change the type of the numeric literal from `i32` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n-   |                ~~~~~~\n+   |                   ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:286:16\n@@ -1426,7 +1426,7 @@ LL |     foo::<f32>(42_i16);\n help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i16.into());\n-   |                ~~~~~~~~~~~~~\n+   |                      +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:288:16\n@@ -1437,7 +1437,7 @@ LL |     foo::<f32>(42_i8);\n help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i8.into());\n-   |                ~~~~~~~~~~~~\n+   |                     +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:290:16\n@@ -1448,25 +1448,29 @@ LL |     foo::<f32>(42.0_f64);\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n LL |     foo::<f32>(42.0_f32);\n-   |                ~~~~~~~~\n+   |                     ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:294:16\n    |\n LL |     foo::<u32>(42_u8 as u16);\n-   |                ^^^^^^^^^^^^\n-   |                |\n-   |                expected `u32`, found `u16`\n-   |                help: you can convert a `u16` to a `u32`: `(42_u8 as u16).into()`\n+   |                ^^^^^^^^^^^^ expected `u32`, found `u16`\n+   |\n+help: you can convert a `u16` to a `u32`\n+   |\n+LL |     foo::<u32>((42_u8 as u16).into());\n+   |                +            ++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:296:16\n    |\n LL |     foo::<i32>(-42_i8);\n-   |                ^^^^^^\n-   |                |\n-   |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to an `i32`: `(-42_i8).into()`\n+   |                ^^^^^^ expected `i32`, found `i8`\n+   |\n+help: you can convert an `i8` to an `i32`\n+   |\n+LL |     foo::<i32>((-42_i8).into());\n+   |                +      ++++++++\n \n error: aborting due to 134 previous errors\n "}, {"sha": "86622778203905c61018558c15871cc3d0fad4ed", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -38,15 +38,15 @@ LL | fn fizz(i32) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL | fn fizz(self: i32) {}\n-   |         ~~~~~~~~~\n+   |         +++++\n help: if this is a parameter name, give it a type\n    |\n LL | fn fizz(i32: TypeName) {}\n-   |         ~~~~~~~~~~~~~\n+   |            ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn fizz(_: i32) {}\n-   |         ~~~~~~\n+   |         ++\n \n error: expected one of `:`, `@`, or `|`, found `S`\n   --> $DIR/inverted-parameters.rs:27:23"}, {"sha": "a1d721e746ad02fc00998966dd158e9b0e2b0345", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -13,16 +13,16 @@ LL | fn test(&'a str) {\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this is a `self` type, give it a parameter name\n    |\n-LL | fn test(self: &str) {\n-   |         ~~~~~~~~~~\n+LL | fn test(self: &'a str) {\n+   |         +++++\n help: if this is a parameter name, give it a type\n    |\n LL | fn test(str: &TypeName) {\n    |         ~~~~~~~~~~~~~~\n help: if this is a type, explicitly ignore the parameter name\n    |\n-LL | fn test(_: &str) {\n-   |         ~~~~~~~\n+LL | fn test(_: &'a str) {\n+   |         ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ce2eab051addd3feca87b91313af10c6de6e514f", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,15 +8,15 @@ LL | fn foo(x) {\n help: if this is a `self` type, give it a parameter name\n    |\n LL | fn foo(self: x) {\n-   |        ~~~~~~~\n+   |        +++++\n help: if this is a parameter name, give it a type\n    |\n LL | fn foo(x: TypeName) {\n-   |        ~~~~~~~~~~~\n+   |         ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn foo(_: x) {\n-   |        ~~~~\n+   |        ++\n \n error: aborting due to previous error\n "}, {"sha": "c78f96e1addcb21f5b6ffe213f706cacc91b65a5", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,11 +8,11 @@ LL | fn a(B<) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL | fn a(self: B<) {}\n-   |      ~~~~~~~\n+   |      +++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn a(_: B<) {}\n-   |      ~~~~\n+   |      ++\n \n error: aborting due to previous error\n "}, {"sha": "49895f3db4dff417b3967215b97a8ef308c8c33c", "filename": "src/test/ui/pptypedef.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fpptypedef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fpptypedef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     let_in(3u32, |i| { assert!(i == 3i32); });\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3u32); });\n-   |                                     ~~~~\n+   |                                      ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:8:37\n@@ -18,7 +18,7 @@ LL |     let_in(3i32, |i| { assert!(i == 3u32); });\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3i32); });\n-   |                                     ~~~~\n+   |                                      ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9a44ccb12e742adacd89e5c3f65595e11093c4b", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -18,7 +18,7 @@ LL |         Some(x) => { return x },\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         Some(x) => { return x.try_into().unwrap() },\n-   |                             ~~~~~~~~~~~~~~~~~~~~~\n+   |                              ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:33:22"}, {"sha": "e222c141f8b6a0b184d35a5509d61c96911bf536", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -61,7 +61,7 @@ LL |     let f = [0; 4u8];\n help: change the type of the numeric literal from `u8` to `usize`\n    |\n LL |     let f = [0; 4usize];\n-   |                 ~~~~~~\n+   |                  ~~~~~\n \n error: aborting due to 9 previous errors\n "}, {"sha": "593821bf96128acf0dc28d8186b392b7b196e5e7", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,15 +8,15 @@ LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n help: if this is a `self` type, give it a parameter name\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] self: i32); }\n-   |                                      ~~~~~~~~~\n+   |                                      +++++\n help: if this is a parameter name, give it a type\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32: TypeName); }\n-   |                                      ~~~~~~~~~~~~~\n+   |                                         ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] _: i32); }\n-   |                                      ~~~~~~\n+   |                                      ++\n \n error: aborting due to previous error\n "}, {"sha": "932a435143b0c35bd5ba62f5804c40f82bdcee25", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -33,7 +33,7 @@ LL |     let _: i32 = 22_i64 >> 1_i32;\n help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                  +               +++++++++++++++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8d26ca4ac7a743096d8c0225dc73e07dffa32ddc", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,11 +8,11 @@ LL | fn foo(Option<i32>, String) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL | fn foo(self: Option<i32>, String) {}\n-   |        ~~~~~~~~~~~~\n+   |        +++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn foo(_: Option<i32>, String) {}\n-   |        ~~~~~~~~~\n+   |        ++\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27\n@@ -24,11 +24,11 @@ LL | fn foo(Option<i32>, String) {}\n help: if this is a parameter name, give it a type\n    |\n LL | fn foo(Option<i32>, String: TypeName) {}\n-   |                     ~~~~~~~~~~~~~~~~\n+   |                           ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn foo(Option<i32>, _: String) {}\n-   |                     ~~~~~~~~~\n+   |                     ++\n \n error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n@@ -40,15 +40,15 @@ LL | fn bar(x, y: usize) {}\n help: if this is a `self` type, give it a parameter name\n    |\n LL | fn bar(self: x, y: usize) {}\n-   |        ~~~~~~~\n+   |        +++++\n help: if this is a parameter name, give it a type\n    |\n LL | fn bar(x: TypeName, y: usize) {}\n-   |        ~~~~~~~~~~~\n+   |         ++++++++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn bar(_: x, y: usize) {}\n-   |        ~~~~\n+   |        ++\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5"}, {"sha": "c3418dab0e8afb7309bc875ba0ff7b92876a2797", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -8,11 +8,11 @@ LL | pub fn foo(Box<Self>) { }\n help: if this is a `self` type, give it a parameter name\n    |\n LL | pub fn foo(self: Box<Self>) { }\n-   |            ~~~~~~~~~\n+   |            +++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | pub fn foo(_: Box<Self>) { }\n-   |            ~~~~~~\n+   |            ++\n \n error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-64252-self-type.rs:10:15\n@@ -24,11 +24,11 @@ LL |     fn bar(Box<Self>) { }\n help: if this is a `self` type, give it a parameter name\n    |\n LL |     fn bar(self: Box<Self>) { }\n-   |            ~~~~~~~~~\n+   |            +++++\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL |     fn bar(_: Box<Self>) { }\n-   |            ~~~~~~\n+   |            ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "12466868f002872f88114c172c241f12fdf1c8b5", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -2,19 +2,23 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:19\n    |\n LL |     let _ = RGB { r, g, c };\n-   |                   ^\n-   |                   |\n-   |                   expected `f64`, found `f32`\n-   |                   help: you can convert an `f32` to an `f64`: `r: r.into()`\n+   |                   ^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     let _ = RGB { r: r.into(), g, c };\n+   |                   ++  +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:22\n    |\n LL |     let _ = RGB { r, g, c };\n-   |                      ^\n-   |                      |\n-   |                      expected `f64`, found `f32`\n-   |                      help: you can convert an `f32` to an `f64`: `g: g.into()`\n+   |                      ^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     let _ = RGB { r, g: g.into(), c };\n+   |                      ++  +++++++\n \n error[E0560]: struct `RGB` has no field named `c`\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:25"}, {"sha": "72c84d167167fc69b2ab6177ae02b06441d8deaa", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -2,28 +2,34 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                   ^\n-   |                   |\n-   |                   expected `f64`, found `f32`\n-   |                   help: you can convert an `f32` to an `f64`: `r: r.into()`\n+   |                   ^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     let _ = RGB { r: r.into(), g, b };\n+   |                   ++  +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:22\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                      ^\n-   |                      |\n-   |                      expected `f64`, found `f32`\n-   |                      help: you can convert an `f32` to an `f64`: `g: g.into()`\n+   |                      ^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     let _ = RGB { r, g: g.into(), b };\n+   |                      ++  +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:25\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                         ^\n-   |                         |\n-   |                         expected `f64`, found `f32`\n-   |                         help: you can convert an `f32` to an `f64`: `b: b.into()`\n+   |                         ^ expected `f64`, found `f32`\n+   |\n+help: you can convert an `f32` to an `f64`\n+   |\n+LL |     let _ = RGB { r, g, b: b.into() };\n+   |                         ++  +++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "10dfd2de744fc0f383d17c053a9dfd3c947df4e9", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,7 +9,7 @@ LL | fn f() -> isize { return g(); }\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL | fn f() -> isize { return g().try_into().unwrap(); }\n-   |                          ~~~~~~~~~~~~~~~~~~~~~~~\n+   |                             ++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "6caa23d8f4997ef4e97a81f31ab69b98d52cafef", "filename": "src/test/ui/traits/multidispatch-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     test(22i32, 44i32);\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     test(22i32, 44u32);\n-   |                 ~~~~~\n+   |                   ~~~\n \n error: aborting due to previous error\n "}, {"sha": "26679e713803e01925e4b37ff394fff69b7deb33", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -10,7 +10,7 @@ LL |     B::get_x()\n help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |               ++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "fbfbffbd24e2ff79892d16733d827015a408355a", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:9:18\n    |\n LL |     identity_u16(x);\n-   |                  ^\n-   |                  |\n-   |                  expected `u16`, found `u8`\n-   |                  help: you can convert a `u8` to a `u16`: `x.into()`\n+   |                  ^ expected `u16`, found `u8`\n+   |\n+help: you can convert a `u8` to a `u16`\n+   |\n+LL |     identity_u16(x.into());\n+   |                   +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:12:18\n@@ -16,7 +18,7 @@ LL |     identity_u16(y);\n help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~\n+   |                   ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:21:18\n@@ -27,7 +29,7 @@ LL |     identity_u16(a);\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n-   |                  ~~~~~~~~~~~~~~~~~~~~~\n+   |                   ++++++++++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e82b5e4497383fd5cd9b28f8ded4e955b35ff715", "filename": "src/test/ui/typeof/type_mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -15,7 +15,7 @@ LL |     let b: typeof(a) = 1i8;\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |     let b: typeof(a) = 1u8;\n-   |                        ~~~\n+   |                         ~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "23b9157375657fba56ba004e252df3b55d53c377", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -20,7 +20,7 @@ LL |     <i32 as Add<i32>>::add(1u32, 2);\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1i32, 2);\n-   |                            ~~~~\n+   |                             ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:8:31\n@@ -31,7 +31,7 @@ LL |     <i32 as Add<i32>>::add(1, 2u32);\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1, 2i32);\n-   |                               ~~~~\n+   |                                ~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f791ea62ceb65f50ca68d90891bb18aebbc68bce", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -7,7 +7,7 @@ LL |     let z = f(1_usize, 2);\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     let z = f(1_isize, 2);\n-   |               ~~~~~~~\n+   |                 ~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c686a0b2f5aeaa4572b8d1847ea8995802d78f67", "filename": "src/test/ui/wrong-ret-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34d19634f5ae448ff3fb281b22306cc8cfa3ee8c/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-ret-type.stderr?ref=34d19634f5ae448ff3fb281b22306cc8cfa3ee8c", "patch": "@@ -9,7 +9,7 @@ LL | fn mk_int() -> usize { let i: isize = 3; return i; }\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL | fn mk_int() -> usize { let i: isize = 3; return i.try_into().unwrap(); }\n-   |                                                 ~~~~~~~~~~~~~~~~~~~~~\n+   |                                                  ++++++++++++++++++++\n \n error: aborting due to previous error\n "}]}