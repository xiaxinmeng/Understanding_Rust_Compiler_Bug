{"sha": "b531364a1a8af28ad78e52cf0a9bf657640aa17c", "node_id": "C_kwDOAAsO6NoAKGI1MzEzNjRhMWE4YWYyOGFkNzhlNTJjZjBhOWJmNjU3NjQwYWExN2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-30T12:37:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-30T12:37:01Z"}, "message": "Rollup merge of #90377 - WaffleLapkin:const_slice_from_raw_parts, r=oli-obk\n\nMake `core::slice::from_raw_parts[_mut]` const\n\nResponses to #90012 seem to allow ``@rust-lang/wg-const-eval`` to decide on use of `const_eval_select`, so we can make `core::slice::from_raw_parts[_mut]` const :)\n\n---\nThis PR marks the following APIs as const:\n```rust\n// core::slice\npub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T];\npub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T];\n```\n---\n\nResolves #90011\nr? ``@oli-obk``", "tree": {"sha": "f6130bda729f492fd78c958250ab4bc0d0122482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6130bda729f492fd78c958250ab4bc0d0122482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b531364a1a8af28ad78e52cf0a9bf657640aa17c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhfTxtCRBK7hj4Ov3rIwAA0n8IAEJuk7h0cPIsw366EUxiKET5\nh2CBeI8sIp1ifMS7iIbpI8ot8sfehuC8JzHnG/FRLCJQhIyeJvvOd5eIccfLFQe5\n0tlZnle0hXleTKtiYHvPRl2x98tILsnesJrEpMYF55AOeNCXZTe4uPiJP3MK3n/s\nE0pZbRPfZ6FSoLlRc06qHreD+wEUzTewtpBlUd7x6kU2vYD0s/g9dBXC310SpM2M\ng3pWxoHJrEe4DZSDagZ1d5Wyhk1qYYB0Ea9j+EFLDHDjtDgNsCcHP6c76inoA036\nzdI4WeO8hzXApEp6z+IARsTsI/tYV/LaBUqF159FBf6xMAEYtttgZDgVF21utGc=\n=n6sH\n-----END PGP SIGNATURE-----\n", "payload": "tree f6130bda729f492fd78c958250ab4bc0d0122482\nparent a213740abeb2c4248633b1e3836b38473d2b01ec\nparent afaa54a99d75bc6287d835b1ee33e1b15bda462e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635597421 +0200\ncommitter GitHub <noreply@github.com> 1635597421 +0200\n\nRollup merge of #90377 - WaffleLapkin:const_slice_from_raw_parts, r=oli-obk\n\nMake `core::slice::from_raw_parts[_mut]` const\n\nResponses to #90012 seem to allow ``@rust-lang/wg-const-eval`` to decide on use of `const_eval_select`, so we can make `core::slice::from_raw_parts[_mut]` const :)\n\n---\nThis PR marks the following APIs as const:\n```rust\n// core::slice\npub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T];\npub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T];\n```\n---\n\nResolves #90011\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b531364a1a8af28ad78e52cf0a9bf657640aa17c", "html_url": "https://github.com/rust-lang/rust/commit/b531364a1a8af28ad78e52cf0a9bf657640aa17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b531364a1a8af28ad78e52cf0a9bf657640aa17c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a213740abeb2c4248633b1e3836b38473d2b01ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a213740abeb2c4248633b1e3836b38473d2b01ec", "html_url": "https://github.com/rust-lang/rust/commit/a213740abeb2c4248633b1e3836b38473d2b01ec"}, {"sha": "afaa54a99d75bc6287d835b1ee33e1b15bda462e", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa54a99d75bc6287d835b1ee33e1b15bda462e", "html_url": "https://github.com/rust-lang/rust/commit/afaa54a99d75bc6287d835b1ee33e1b15bda462e"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "5f44087cabbbc7e5eec8cc57eacca8543280c306", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b531364a1a8af28ad78e52cf0a9bf657640aa17c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b531364a1a8af28ad78e52cf0a9bf657640aa17c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b531364a1a8af28ad78e52cf0a9bf657640aa17c", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_discriminant)]\n+#![cfg_attr(not(bootstrap), feature(const_eval_select))]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]"}, {"sha": "81bb16d54015e9551266e41068e1bb6ec63cd5a5", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b531364a1a8af28ad78e52cf0a9bf657640aa17c/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b531364a1a8af28ad78e52cf0a9bf657640aa17c/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=b531364a1a8af28ad78e52cf0a9bf657640aa17c", "patch": "@@ -1,8 +1,6 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n-use crate::intrinsics::is_aligned_and_not_null;\n-use crate::mem;\n use crate::ptr;\n \n /// Forms a slice from a pointer and a length.\n@@ -85,12 +83,10 @@ use crate::ptr;\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    debug_check_data_len(data, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n     unsafe { &*ptr::slice_from_raw_parts(data, len) }\n }\n@@ -126,16 +122,48 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    debug_check_data_len(data as _, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.\n     unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }\n }\n \n+// In debug builds checks that `data` pointer is aligned and non-null and that slice with given `len` would cover less than half the address space\n+#[cfg(all(not(bootstrap), debug_assertions))]\n+#[unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+const fn debug_check_data_len<T>(data: *const T, len: usize) {\n+    fn rt_check<T>(data: *const T) {\n+        use crate::intrinsics::is_aligned_and_not_null;\n+\n+        assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n+    }\n+\n+    const fn noop<T>(_: *const T) {}\n+\n+    // SAFETY:\n+    //\n+    // `rt_check` is just a debug assert to hint users that they are causing UB,\n+    // it is not required for safety (the safety must be guatanteed by\n+    // the `from_raw_parts[_mut]` caller).\n+    //\n+    // Since the checks are not required, we ignore them in CTFE as they can't\n+    // be done there (alignment does not make much sense there).\n+    unsafe {\n+        crate::intrinsics::const_eval_select((data,), noop, rt_check);\n+    }\n+\n+    assert!(\n+        crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n+        \"attempt to create slice covering at least half the address space\"\n+    );\n+}\n+\n+#[cfg(not(all(not(bootstrap), debug_assertions)))]\n+const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n+\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]"}]}