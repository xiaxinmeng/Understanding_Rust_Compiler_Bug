{"sha": "28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGYyYmY3YjUwOTNiYjQ1ODQ1YmZhYWRmY2ZiOTFlZWY1ZDAwZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T14:18:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T15:42:07Z"}, "message": "control canonicalization with a trait vs bools", "tree": {"sha": "d958310e4d4af0ab914b1a004bc29693804e82a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d958310e4d4af0ab914b1a004bc29693804e82a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "html_url": "https://github.com/rust-lang/rust/commit/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a661843c9ce01370afc6c6cf02d075eac5d174", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a661843c9ce01370afc6c6cf02d075eac5d174", "html_url": "https://github.com/rust-lang/rust/commit/42a661843c9ce01370afc6c6cf02d075eac5d174"}], "stats": {"total": 125, "additions": 83, "deletions": 42}, "files": [{"sha": "95822eb18552182f1e1b1d2be719f85c65c10036", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 83, "deletions": 42, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "patch": "@@ -63,10 +63,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             value,\n             Some(self),\n             self.tcx,\n-            CanonicalizeRegionMode {\n-                static_region: true,\n-                other_free_regions: true,\n-            },\n+            &CanonicalizeAllFreeRegions,\n             var_values,\n         )\n     }\n@@ -105,10 +102,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             value,\n             Some(self),\n             self.tcx,\n-            CanonicalizeRegionMode {\n-                static_region: false,\n-                other_free_regions: false,\n-            },\n+            &CanonicalizeQueryResponse,\n             &mut var_values,\n         )\n     }\n@@ -140,27 +134,87 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             value,\n             Some(self),\n             self.tcx,\n-            CanonicalizeRegionMode {\n-                static_region: false,\n-                other_free_regions: true,\n-            },\n+            &CanonicalizeFreeRegionsOtherThanStatic,\n             var_values,\n         )\n     }\n }\n \n-/// If this flag is true, then all free regions will be replaced with\n-/// a canonical var. This is used to make queries as generic as\n-/// possible. For example, the query `F: Foo<'static>` would be\n-/// canonicalized to `F: Foo<'0>`.\n-struct CanonicalizeRegionMode {\n-    static_region: bool,\n-    other_free_regions: bool,\n+/// Controls how we canonicalize \"free regions\" that are not inference\n+/// variables. This depends on what we are canonicalizing *for* --\n+/// e.g., if we are canonicalizing to create a query, we want to\n+/// replace those with inference variables, since we want to make a\n+/// maximally general query. But if we are canonicalizing a *query\n+/// response*, then we don't typically replace free regions, as they\n+/// must have been introduced from other parts of the system.\n+trait CanonicalizeRegionMode {\n+    fn canonicalize_free_region(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, '_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx>;\n+\n+    fn any(&self) -> bool;\n+}\n+\n+struct CanonicalizeQueryResponse;\n+\n+impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n+    fn canonicalize_free_region(\n+        &self,\n+        _canonicalizer: &mut Canonicalizer<'_, '_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        match r {\n+            ty::ReFree(_) | ty::ReEmpty | ty::ReErased | ty::ReStatic | ty::ReEarlyBound(..) => r,\n+            _ => {\n+                // Other than `'static` or `'empty`, the query\n+                // response should be executing in a fully\n+                // canonicalized environment, so there shouldn't be\n+                // any other region names it can come up.\n+                bug!(\"unexpected region in query response: `{:?}`\", r)\n+            }\n+        }\n+    }\n+\n+    fn any(&self) -> bool {\n+        false\n+    }\n+}\n+\n+struct CanonicalizeAllFreeRegions;\n+\n+impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n+    fn canonicalize_free_region(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, '_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        canonicalizer.canonical_var_for_region(r)\n+    }\n+\n+    fn any(&self) -> bool {\n+        true\n+    }\n }\n \n-impl CanonicalizeRegionMode {\n+struct CanonicalizeFreeRegionsOtherThanStatic;\n+\n+impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n+    fn canonicalize_free_region(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, '_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        if let ty::ReStatic = r {\n+            r\n+        } else {\n+            canonicalizer.canonical_var_for_region(r)\n+        }\n+    }\n+\n     fn any(&self) -> bool {\n-        self.static_region || self.other_free_regions\n+        true\n     }\n }\n \n@@ -172,7 +226,7 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n     indices: FxHashMap<Kind<'tcx>, CanonicalVar>,\n-    canonicalize_region_mode: CanonicalizeRegionMode,\n+    canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n     needs_canonical_flags: TypeFlags,\n }\n \n@@ -201,26 +255,13 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 self.canonical_var_for_region(r)\n             }\n \n-            ty::ReStatic => {\n-                if self.canonicalize_region_mode.static_region {\n-                    self.canonical_var_for_region(r)\n-                } else {\n-                    r\n-                }\n-            }\n-\n-            ty::ReEarlyBound(..)\n+            ty::ReStatic\n+            | ty::ReEarlyBound(..)\n             | ty::ReFree(_)\n             | ty::ReScope(_)\n             | ty::RePlaceholder(..)\n             | ty::ReEmpty\n-            | ty::ReErased => {\n-                if self.canonicalize_region_mode.other_free_regions {\n-                    self.canonical_var_for_region(r)\n-                } else {\n-                    r\n-                }\n-            }\n+            | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n \n             ty::ReClosureBound(..) | ty::ReCanonical(_) => {\n                 bug!(\"canonical region encountered during canonicalization\")\n@@ -286,10 +327,10 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// `canonicalize_query` and `canonicalize_response`.\n     fn canonicalize<V>(\n         value: &V,\n-        infcx: Option<&'cx InferCtxt<'cx, 'gcx, 'tcx>>,\n-        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-        canonicalize_region_mode: CanonicalizeRegionMode,\n-        var_values: &'cx mut SmallCanonicalVarValues<'tcx>,\n+        infcx: Option<&InferCtxt<'_, 'gcx, 'tcx>>,\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n+        var_values: &mut SmallCanonicalVarValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,"}]}