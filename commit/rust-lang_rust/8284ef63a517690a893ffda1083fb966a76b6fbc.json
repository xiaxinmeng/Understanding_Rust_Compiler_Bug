{"sha": "8284ef63a517690a893ffda1083fb966a76b6fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODRlZjYzYTUxNzY5MGE4OTNmZmRhMTA4M2ZiOTY2YTc2YjZmYmM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-23T23:15:40Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-30T13:57:05Z"}, "message": "std: make sure HashMap from_iter uses random initialization by default\n\nIt turns out that HashMap's from_iter implementation was being\ninitialized without the sip keys being randomized. This adds\na custom default hasher that should avoid this potential vulnerability.", "tree": {"sha": "7b3dcf1d45223093718e3730e61f4384438f4619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3dcf1d45223093718e3730e61f4384438f4619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8284ef63a517690a893ffda1083fb966a76b6fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8284ef63a517690a893ffda1083fb966a76b6fbc", "html_url": "https://github.com/rust-lang/rust/commit/8284ef63a517690a893ffda1083fb966a76b6fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8284ef63a517690a893ffda1083fb966a76b6fbc/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "287dcb77b34b421256c1d9cf26f3101276d2f486", "url": "https://api.github.com/repos/rust-lang/rust/commits/287dcb77b34b421256c1d9cf26f3101276d2f486", "html_url": "https://github.com/rust-lang/rust/commit/287dcb77b34b421256c1d9cf26f3101276d2f486"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "be5c2e25141dec81e578256185be45e662a7cce6", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=8284ef63a517690a893ffda1083fb966a76b6fbc", "patch": "@@ -16,15 +16,13 @@ use collections::{Collection, Mutable, Set, MutableSet, Map, MutableMap};\n use default::Default;\n use fmt::Show;\n use fmt;\n-use hash::{Hash, Hasher, sip};\n+use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{Iterator, FilterMap, Chain, Repeat, Zip, Extendable};\n use iter::{range, range_inclusive, FromIterator};\n use iter;\n use mem::replace;\n use num;\n use option::{Some, None, Option};\n-use rand::Rng;\n-use rand;\n use result::{Ok, Err};\n \n mod table {\n@@ -733,7 +731,7 @@ impl DefaultResizePolicy {\n /// }\n /// ```\n #[deriving(Clone)]\n-pub struct HashMap<K, V, H = sip::SipHasher> {\n+pub struct HashMap<K, V, H = RandomSipHasher> {\n     // All hashes are keyed on these values, to prevent hash collision attacks.\n     hasher: H,\n \n@@ -1033,18 +1031,15 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> MutableMap<K, V> for HashMap<K, V, H>\n \n }\n \n-impl<K: Hash + Eq, V> HashMap<K, V, sip::SipHasher> {\n+impl<K: Hash + Eq, V> HashMap<K, V, RandomSipHasher> {\n     /// Create an empty HashMap.\n-    pub fn new() -> HashMap<K, V, sip::SipHasher> {\n+    pub fn new() -> HashMap<K, V, RandomSipHasher> {\n         HashMap::with_capacity(INITIAL_CAPACITY)\n     }\n \n     /// Creates an empty hash map with the given initial capacity.\n-    pub fn with_capacity(capacity: uint) -> HashMap<K, V, sip::SipHasher> {\n-        let mut r = rand::task_rng();\n-        let r0 = r.gen();\n-        let r1 = r.gen();\n-        let hasher = sip::SipHasher::new_with_keys(r0, r1);\n+    pub fn with_capacity(capacity: uint) -> HashMap<K, V, RandomSipHasher> {\n+        let hasher = RandomSipHasher::new();\n         HashMap::with_capacity_and_hasher(capacity, hasher)\n     }\n }\n@@ -1489,7 +1484,7 @@ pub type SetMoveItems<K> =\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n /// requires that the elements implement the `Eq` and `Hash` traits.\n #[deriving(Clone)]\n-pub struct HashSet<T, H = sip::SipHasher> {\n+pub struct HashSet<T, H = RandomSipHasher> {\n     map: HashMap<T, (), H>\n }\n \n@@ -1529,15 +1524,15 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> MutableSet<T> for HashSet<T, H> {\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n }\n \n-impl<T: Hash + Eq> HashSet<T, sip::SipHasher> {\n+impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     /// Create an empty HashSet\n-    pub fn new() -> HashSet<T, sip::SipHasher> {\n+    pub fn new() -> HashSet<T, RandomSipHasher> {\n         HashSet::with_capacity(INITIAL_CAPACITY)\n     }\n \n     /// Create an empty HashSet with space for at least `n` elements in\n     /// the hash table.\n-    pub fn with_capacity(capacity: uint) -> HashSet<T, sip::SipHasher> {\n+    pub fn with_capacity(capacity: uint) -> HashSet<T, RandomSipHasher> {\n         HashSet { map: HashMap::with_capacity(capacity) }\n     }\n }"}, {"sha": "fd1bab2dd715f617a59b8c9045baed6c64352f51", "filename": "src/libstd/hash.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=8284ef63a517690a893ffda1083fb966a76b6fbc", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Generic hashing support.\n+\n+pub use core_collections::hash::{Hash, Hasher, Writer, hash, sip};\n+\n+use default::Default;\n+use rand::Rng;\n+use rand;\n+\n+/// `RandomSipHasher` computes the SipHash algorithm from a stream of bytes\n+/// initialized with random keys.\n+#[deriving(Clone)]\n+pub struct RandomSipHasher {\n+    hasher: sip::SipHasher,\n+}\n+\n+impl RandomSipHasher {\n+    /// Construct a new `RandomSipHasher` that is initialized with random keys.\n+    #[inline]\n+    pub fn new() -> RandomSipHasher {\n+        let mut r = rand::task_rng();\n+        let r0 = r.gen();\n+        let r1 = r.gen();\n+        RandomSipHasher {\n+            hasher: sip::SipHasher::new_with_keys(r0, r1),\n+        }\n+    }\n+}\n+\n+impl Hasher<sip::SipState> for RandomSipHasher {\n+    #[inline]\n+    fn hash<T: Hash<sip::SipState>>(&self, value: &T) -> u64 {\n+        self.hasher.hash(value)\n+    }\n+}\n+\n+impl Default for RandomSipHasher {\n+    #[inline]\n+    fn default() -> RandomSipHasher {\n+        RandomSipHasher::new()\n+    }\n+}"}, {"sha": "12ad1d64344b10ccc73bae8b1d75017020d4fab1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284ef63a517690a893ffda1083fb966a76b6fbc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8284ef63a517690a893ffda1083fb966a76b6fbc", "patch": "@@ -166,7 +166,6 @@ pub use core::option;\n pub use alloc::owned;\n pub use alloc::rc;\n \n-pub use core_collections::hash;\n pub use core_collections::slice;\n pub use core_collections::str;\n pub use core_collections::string;\n@@ -236,6 +235,7 @@ pub mod to_str;\n /* Common data structures */\n \n pub mod collections;\n+pub mod hash;\n \n /* Tasks and communication */\n "}]}