{"sha": "b831b17b3dbc475420924834b250f07bccd673d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzFiMTdiM2RiYzQ3NTQyMDkyNDgzNGIyNTBmMDdiY2NkNjczZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T13:53:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T13:53:50Z"}, "message": "Simplify", "tree": {"sha": "12be36378a4652107867d40d979f5c9d01dafddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12be36378a4652107867d40d979f5c9d01dafddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b831b17b3dbc475420924834b250f07bccd673d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b831b17b3dbc475420924834b250f07bccd673d0", "html_url": "https://github.com/rust-lang/rust/commit/b831b17b3dbc475420924834b250f07bccd673d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b831b17b3dbc475420924834b250f07bccd673d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8337dcd9e277feac8e9cff621c752a3e86ba19e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8337dcd9e277feac8e9cff621c752a3e86ba19e6", "html_url": "https://github.com/rust-lang/rust/commit/8337dcd9e277feac8e9cff621c752a3e86ba19e6"}], "stats": {"total": 71, "additions": 29, "deletions": 42}, "files": [{"sha": "b2381bd971d42b014b03c47467e2d6425d74c61e", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b831b17b3dbc475420924834b250f07bccd673d0/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b831b17b3dbc475420924834b250f07bccd673d0/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=b831b17b3dbc475420924834b250f07bccd673d0", "patch": "@@ -69,23 +69,11 @@ impl<'a> Clone for AssistCtx<'a> {\n }\n \n impl<'a> AssistCtx<'a> {\n-    pub(crate) fn with_ctx<F, T>(\n-        db: &RootDatabase,\n-        frange: FileRange,\n-        should_compute_edit: bool,\n-        f: F,\n-    ) -> T\n-    where\n-        F: FnOnce(AssistCtx) -> T,\n-    {\n+    pub fn new(db: &RootDatabase, frange: FileRange, should_compute_edit: bool) -> AssistCtx {\n         let parse = db.parse(frange.file_id);\n-\n-        let ctx = AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit };\n-        f(ctx)\n+        AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit }\n     }\n-}\n \n-impl<'a> AssistCtx<'a> {\n     pub(crate) fn add_assist(\n         self,\n         id: AssistId,"}, {"sha": "fcdfe6c14db69f423c08e37888fb4ab61c45b68c", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b831b17b3dbc475420924834b250f07bccd673d0/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b831b17b3dbc475420924834b250f07bccd673d0/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b831b17b3dbc475420924834b250f07bccd673d0", "patch": "@@ -37,6 +37,7 @@ pub struct AssistAction {\n     pub label: Option<String>,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n+    // FIXME: This belongs to `AssistLabel`\n     pub target: Option<TextRange>,\n }\n \n@@ -60,35 +61,33 @@ impl ResolvedAssist {\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n-    AssistCtx::with_ctx(db, range, false, |ctx| {\n-        assists::all()\n-            .iter()\n-            .filter_map(|f| f(ctx.clone()))\n-            .map(|a| match a {\n-                Assist::Unresolved { label } => label,\n-                Assist::Resolved { .. } => unreachable!(),\n-            })\n-            .collect()\n-    })\n+    let ctx = AssistCtx::new(db, range, false);\n+    assists::all()\n+        .iter()\n+        .filter_map(|f| f(ctx.clone()))\n+        .map(|a| match a {\n+            Assist::Unresolved { label } => label,\n+            Assist::Resolved { .. } => unreachable!(),\n+        })\n+        .collect()\n }\n \n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n-    AssistCtx::with_ctx(db, range, true, |ctx| {\n-        let mut a = assists::all()\n-            .iter()\n-            .filter_map(|f| f(ctx.clone()))\n-            .map(|a| match a {\n-                Assist::Resolved { assist } => assist,\n-                Assist::Unresolved { .. } => unreachable!(),\n-            })\n-            .collect();\n-        sort_assists(&mut a);\n-        a\n-    })\n+    let ctx = AssistCtx::new(db, range, true);\n+    let mut a = assists::all()\n+        .iter()\n+        .filter_map(|f| f(ctx.clone()))\n+        .map(|a| match a {\n+            Assist::Resolved { assist } => assist,\n+            Assist::Unresolved { .. } => unreachable!(),\n+        })\n+        .collect();\n+    sort_assists(&mut a);\n+    a\n }\n \n fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n@@ -192,7 +191,7 @@ mod helpers {\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -219,7 +218,7 @@ mod helpers {\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -242,7 +241,7 @@ mod helpers {\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -261,7 +260,7 @@ mod helpers {\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n-            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n             Assist::Resolved { assist } => assist.get_first_action(),\n@@ -279,7 +278,7 @@ mod helpers {\n         let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        let assist = assist(AssistCtx::new(&db, frange, true));\n         assert!(assist.is_none());\n     }\n \n@@ -290,7 +289,7 @@ mod helpers {\n         let (range, before) = extract_range(before);\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n-        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        let assist = assist(AssistCtx::new(&db, frange, true));\n         assert!(assist.is_none());\n     }\n }"}]}