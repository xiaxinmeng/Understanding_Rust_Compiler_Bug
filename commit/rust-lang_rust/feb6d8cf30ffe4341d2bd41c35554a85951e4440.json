{"sha": "feb6d8cf30ffe4341d2bd41c35554a85951e4440", "node_id": "C_kwDOAAsO6NoAKGZlYjZkOGNmMzBmZmU0MzQxZDJiZDQxYzM1NTU0YTg1OTUxZTQ0NDA", "commit": {"author": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-08T19:20:25Z"}, "committer": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-10T12:10:13Z"}, "message": "introduce rc_clone_in_vec_init lint", "tree": {"sha": "ea5745e24d47a1316486f6078cd8b01737aa6785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea5745e24d47a1316486f6078cd8b01737aa6785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb6d8cf30ffe4341d2bd41c35554a85951e4440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb6d8cf30ffe4341d2bd41c35554a85951e4440", "html_url": "https://github.com/rust-lang/rust/commit/feb6d8cf30ffe4341d2bd41c35554a85951e4440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb6d8cf30ffe4341d2bd41c35554a85951e4440/comments", "author": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0509a9629019f31840f1154d998dd19f7c07c2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0509a9629019f31840f1154d998dd19f7c07c2f6", "html_url": "https://github.com/rust-lang/rust/commit/0509a9629019f31840f1154d998dd19f7c07c2f6"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "3a274ae1d9c9ad8d8723c03bc3a40bfeaa614af1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -3642,6 +3642,7 @@ Released 2018-09-13\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n+[`rc_clone_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init\n [`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation"}, {"sha": "b608ef9c6930276bf304e040899530c54d6fe803", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -263,6 +263,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n     LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n     LintId::of(redundant_clone::REDUNDANT_CLONE),\n     LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n     LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),"}, {"sha": "9224d9d5113189b1cd1c5763f2c649c97d51078a", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -446,6 +446,7 @@ store.register_lints(&[\n     ranges::RANGE_PLUS_ONE,\n     ranges::RANGE_ZIP_WITH_LEN,\n     ranges::REVERSED_EMPTY_RANGES,\n+    rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT,\n     redundant_clone::REDUNDANT_CLONE,\n     redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n     redundant_else::REDUNDANT_ELSE,"}, {"sha": "940bf7ace5e83f8385618a890c2217dade7b7481", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -26,6 +26,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n+    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "3c3cb51c8e39076dabe0c10ca9f065974ae82bf6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -345,6 +345,7 @@ mod ptr_offset_with_cast;\n mod pub_use;\n mod question_mark;\n mod ranges;\n+mod rc_clone_in_vec_init;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -890,6 +891,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let max_include_file_size = conf.max_include_file_size;\n     store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n+    store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "6391890b043392df9ec12d288ad3f7c76155f3ae", "filename": "clippy_lints/src/rc_clone_in_vec_init.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -0,0 +1,90 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::higher::VecArgs;\n+use clippy_utils::last_path_segment;\n+use clippy_utils::macros::{root_macro_call_first_node, MacroCall};\n+use rustc_hir::{Expr, ExprKind, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, Symbol};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `Arc::new` or `Rc::new` in `vec![elem; len]`\n+    ///\n+    /// ### Why is this bad?\n+    /// This will create `elem` once and clone it `len` times - doing so with `Arc` or `Rc`\n+    /// is a bit misleading, as it will create references to the same pointer, rather\n+    /// than different instances.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let v = vec![std::sync::Arc::new(\"some data\".to_string()); 100];\n+    /// // or\n+    /// let v = vec![std::rc::Rc::new(\"some data\".to_string()); 100];\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    ///\n+    /// // Initialize each value separately:\n+    /// let mut data = Vec::with_capacity(100);\n+    /// for _ in 0..100 {\n+    ///     data.push(std::rc::Rc::new(\"some data\".to_string()));\n+    /// }\n+    ///\n+    /// // Or if you want clones of the same reference,\n+    /// // Create the reference beforehand to clarify that\n+    /// // it should be cloned for each value\n+    /// let data = std::rc::Rc::new(\"some data\".to_string());\n+    /// let v = vec![data; 100];\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub RC_CLONE_IN_VEC_INIT,\n+    suspicious,\n+    \"initializing `Arc` or `Rc` in `vec![elem; len]`\"\n+}\n+declare_lint_pass!(RcCloneInVecInit => [RC_CLONE_IN_VEC_INIT]);\n+\n+impl LateLintPass<'_> for RcCloneInVecInit {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return; };\n+        let Some(VecArgs::Repeat(elem, _)) = VecArgs::hir(cx, expr) else { return; };\n+        let Some(symbol) = new_reference_call(cx, elem) else { return; };\n+\n+        emit_lint(cx, symbol, &macro_call);\n+    }\n+}\n+\n+fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, macro_call: &MacroCall) {\n+    let symbol_name = symbol.as_str();\n+\n+    span_lint_and_then(\n+        cx,\n+        RC_CLONE_IN_VEC_INIT,\n+        macro_call.span,\n+        &format!(\"calling `{symbol_name}::new` in `vec![elem; len]`\"),\n+        |diag| {\n+            diag.note(format!(\"each element will point to the same `{symbol_name}` instance\"));\n+            diag.help(format!(\n+                \"if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n+            ));\n+            diag.help(\"or if not, initialize each element individually\");\n+        },\n+    );\n+}\n+\n+/// Checks whether the given `expr` is a call to `Arc::new` or `Rc::new`\n+fn new_reference_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n+    if_chain! {\n+        if let ExprKind::Call(func, _args) = expr.kind;\n+        if let ExprKind::Path(ref func_path @ QPath::TypeRelative(ty, _)) = func.kind;\n+        if let TyKind::Path(ref ty_path) = ty.kind;\n+        if let Some(def_id) = cx.qpath_res(ty_path, ty.hir_id).opt_def_id();\n+        if last_path_segment(func_path).ident.name == sym::new;\n+\n+        then {\n+            return cx.tcx.get_diagnostic_name(def_id).filter(|symbol| symbol == &sym::Arc || symbol == &sym::Rc);\n+        }\n+    }\n+\n+    None\n+}"}, {"sha": "9f4e27dfa62480c64d7990c93c32eb516ace6eaa", "filename": "tests/ui/rc_clone_in_vec_init/arc.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Farc.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -0,0 +1,49 @@\n+#![warn(clippy::rc_clone_in_vec_init)]\n+use std::sync::{Arc, Mutex};\n+\n+fn main() {}\n+\n+fn should_warn_simple_case() {\n+    let v = vec![Arc::new(\"x\".to_string()); 2];\n+}\n+\n+fn should_warn_complex_case() {\n+    let v = vec![\n+        std::sync::Arc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_custom_arc() {\n+    #[derive(Clone)]\n+    struct Arc;\n+\n+    impl Arc {\n+        fn new() -> Self {\n+            Arc\n+        }\n+    }\n+\n+    let v = vec![Arc::new(); 2];\n+}\n+\n+fn should_not_warn_vec_from_elem_but_not_arc() {\n+    let v = vec![String::new(); 2];\n+    let v1 = vec![1; 2];\n+    let v2 = vec![\n+        Box::new(std::sync::Arc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_vec_macro_but_not_from_elem() {\n+    let v = vec![Arc::new(\"x\".to_string())];\n+}"}, {"sha": "19e4727cb987f90d3d50e14c61d70979a158d1fb", "filename": "tests/ui/rc_clone_in_vec_init/arc.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -0,0 +1,30 @@\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:7:13\n+   |\n+LL |     let v = vec![Arc::new(\"x\".to_string()); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n+   = note: each element will point to the same `Arc` instance\n+   = help: if this is intentional, consider extracting the `Arc` initialization to a variable\n+   = help: or if not, initialize each element individually\n+\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:11:13\n+   |\n+LL |       let v = vec![\n+   |  _____________^\n+LL | |         std::sync::Arc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Arc` instance\n+   = help: if this is intentional, consider extracting the `Arc` initialization to a variable\n+   = help: or if not, initialize each element individually\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5e2834aa9023badc8148f23c4c5690c2d94a7752", "filename": "tests/ui/rc_clone_in_vec_init/rc.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Frc.rs?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -0,0 +1,50 @@\n+#![warn(clippy::rc_clone_in_vec_init)]\n+use std::rc::Rc;\n+use std::sync::Mutex;\n+\n+fn main() {}\n+\n+fn should_warn_simple_case() {\n+    let v = vec![Rc::new(\"x\".to_string()); 2];\n+}\n+\n+fn should_warn_complex_case() {\n+    let v = vec![\n+        std::rc::Rc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_custom_arc() {\n+    #[derive(Clone)]\n+    struct Rc;\n+\n+    impl Rc {\n+        fn new() -> Self {\n+            Rc\n+        }\n+    }\n+\n+    let v = vec![Rc::new(); 2];\n+}\n+\n+fn should_not_warn_vec_from_elem_but_not_rc() {\n+    let v = vec![String::new(); 2];\n+    let v1 = vec![1; 2];\n+    let v2 = vec![\n+        Box::new(std::rc::Rc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_vec_macro_but_not_from_elem() {\n+    let v = vec![Rc::new(\"x\".to_string())];\n+}"}, {"sha": "50ffcca9676a13a3c5645efd092f635da32566b7", "filename": "tests/ui/rc_clone_in_vec_init/rc.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb6d8cf30ffe4341d2bd41c35554a85951e4440/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr?ref=feb6d8cf30ffe4341d2bd41c35554a85951e4440", "patch": "@@ -0,0 +1,30 @@\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:8:13\n+   |\n+LL |     let v = vec![Rc::new(\"x\".to_string()); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n+   = note: each element will point to the same `Rc` instance\n+   = help: if this is intentional, consider extracting the `Rc` initialization to a variable\n+   = help: or if not, initialize each element individually\n+\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:12:13\n+   |\n+LL |       let v = vec![\n+   |  _____________^\n+LL | |         std::rc::Rc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Rc` instance\n+   = help: if this is intentional, consider extracting the `Rc` initialization to a variable\n+   = help: or if not, initialize each element individually\n+\n+error: aborting due to 2 previous errors\n+"}]}