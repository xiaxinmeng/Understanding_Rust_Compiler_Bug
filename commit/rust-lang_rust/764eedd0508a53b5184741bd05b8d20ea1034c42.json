{"sha": "764eedd0508a53b5184741bd05b8d20ea1034c42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NGVlZGQwNTA4YTUzYjUxODQ3NDFiZDA1YjhkMjBlYTEwMzRjNDI=", "commit": {"author": {"name": "wartman4404", "email": "wartman4404@my.mstc.edu", "date": "2015-11-04T03:11:40Z"}, "committer": {"name": "wartman4404", "email": "wartman4404@my.mstc.edu", "date": "2015-11-04T03:11:40Z"}, "message": "check for Deref conversions", "tree": {"sha": "9dd43c77d348637a2fa35d9c4d128bc1d2c2a0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd43c77d348637a2fa35d9c4d128bc1d2c2a0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764eedd0508a53b5184741bd05b8d20ea1034c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764eedd0508a53b5184741bd05b8d20ea1034c42", "html_url": "https://github.com/rust-lang/rust/commit/764eedd0508a53b5184741bd05b8d20ea1034c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764eedd0508a53b5184741bd05b8d20ea1034c42/comments", "author": null, "committer": null, "parents": [{"sha": "414c0d20f746c2e3852c8a5356b8831176c915f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/414c0d20f746c2e3852c8a5356b8831176c915f6", "html_url": "https://github.com/rust-lang/rust/commit/414c0d20f746c2e3852c8a5356b8831176c915f6"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "4c23d6994d298fc9ed2cc7829f2e41b20b027422", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764eedd0508a53b5184741bd05b8d20ea1034c42/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/764eedd0508a53b5184741bd05b8d20ea1034c42/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=764eedd0508a53b5184741bd05b8d20ea1034c42", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 71 lints included in this crate:\n+There are 72 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}, {"sha": "855ea51ee8eacc395a48caf87025302fa5db16b1", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=764eedd0508a53b5184741bd05b8d20ea1034c42", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::ty;\n \n-use utils::{snippet, span_lint};\n+use utils::{snippet, span_lint, is_adjusted};\n \n \n #[allow(missing_copy_implementations)]\n@@ -32,10 +32,6 @@ impl LateLintPass for EtaPass {\n     }\n }\n \n-fn is_adjusted(cx: &LateContext, e: &Expr) -> bool {\n-    cx.tcx.tables.borrow().adjustments.get(&e.id).is_some()\n-}\n-\n fn check_closure(cx: &LateContext, expr: &Expr) {\n     if let ExprClosure(_, ref decl, ref blk) = expr.node {\n         if !blk.stmts.is_empty() {"}, {"sha": "e93a8221145847a5f3957cd0e41e478101d9a573", "filename": "src/map_clone.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmap_clone.rs?ref=764eedd0508a53b5184741bd05b8d20ea1034c42", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::ast::Ident;\n use utils::OPTION_PATH;\n-use utils::{match_trait_method, match_type, snippet, span_help_and_lint};\n+use utils::{is_adjusted, match_trait_method, match_type, snippet, span_help_and_lint};\n use utils::{walk_ptrs_ty, walk_ptrs_ty_depth};\n \n declare_lint!(pub MAP_CLONE, Warn,\n@@ -30,7 +30,7 @@ impl LateLintPass for MapClonePass {\n                 let Some(type_name) = get_type_name(cx, expr, &args[0])\n             ], {\n                 // look for derefs, for .map(|x| *x)\n-                if only_derefs(&*closure_expr, arg_ident) &&\n+                if only_derefs(cx, &*closure_expr, arg_ident) &&\n                     // .cloned() only removes one level of indirection, don't lint on more\n                     walk_ptrs_ty_depth(cx.tcx.pat_ty(&*decl.inputs[0].pat)).1 == 1\n                 {\n@@ -85,13 +85,12 @@ fn get_arg_name(pat: &Pat) -> Option<Ident> {\n     }\n }\n \n-fn only_derefs(expr: &Expr, id: Ident) -> bool {\n-    if expr_eq_ident(expr, id) {\n-        true\n-    } else if let ExprUnary(UnDeref, ref subexpr) = expr.node {\n-        only_derefs(subexpr, id)\n-    } else {\n-        false\n+fn only_derefs(cx: &LateContext, expr: &Expr, id: Ident) -> bool {\n+    match expr.node {\n+        ExprUnary(UnDeref, ref subexpr) if !is_adjusted(cx, subexpr) => {\n+            only_derefs(cx, subexpr, id)\n+        },\n+        _ => expr_eq_ident(expr, id),\n     }\n }\n "}, {"sha": "757d7bc379d76eb988bfccf764e0e3f6252d253d", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764eedd0508a53b5184741bd05b8d20ea1034c42/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=764eedd0508a53b5184741bd05b8d20ea1034c42", "patch": "@@ -347,6 +347,10 @@ pub fn is_integer_literal(expr: &Expr, value: u64) -> bool\n     false\n }\n \n+pub fn is_adjusted(cx: &LateContext, e: &Expr) -> bool {\n+    cx.tcx.tables.borrow().adjustments.get(&e.id).is_some()\n+}\n+\n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///\n ///     if_let_chain! {"}, {"sha": "f6241114a83c545356e04adf8bb5b065e39fffa9", "filename": "tests/compile-fail/map_clone.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/764eedd0508a53b5184741bd05b8d20ea1034c42/tests%2Fcompile-fail%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764eedd0508a53b5184741bd05b8d20ea1034c42/tests%2Fcompile-fail%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmap_clone.rs?ref=764eedd0508a53b5184741bd05b8d20ea1034c42", "patch": "@@ -5,6 +5,8 @@\n \n #![allow(unused)]\n \n+use std::ops::Deref;\n+\n fn map_clone_iter() {\n     let x = [1,2,3];\n     x.iter().map(|y| y.clone()); //~ ERROR you seem to be using .map()\n@@ -66,4 +68,25 @@ fn map_clone_other() {\n     x.map(|y| *y);\n }\n \n+#[derive(Copy, Clone)]\n+struct UnusualDeref;\n+static NINE: i32 = 9;\n+\n+impl Deref for UnusualDeref {\n+    type Target = i32;\n+    fn deref(&self) -> &i32 { &NINE }\n+}\n+\n+fn map_clone_deref() {\n+    let x = Some(UnusualDeref);\n+    let _: Option<UnusualDeref> = x.as_ref().map(|y| *y); //~ ERROR you seem to be using .map()\n+                                                          //~^ HELP try\n+\n+    // Not linted: using deref conversion\n+    let _: Option<i32> = x.map(|y| *y);\n+\n+    // Not linted: using regular deref but also deref conversion\n+    let _: Option<i32> = x.as_ref().map(|y| **y);\n+}\n+\n fn main() { }"}]}