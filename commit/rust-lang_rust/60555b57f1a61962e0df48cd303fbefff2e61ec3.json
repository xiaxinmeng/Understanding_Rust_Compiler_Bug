{"sha": "60555b57f1a61962e0df48cd303fbefff2e61ec3", "node_id": "C_kwDOAAsO6NoAKDYwNTU1YjU3ZjFhNjE5NjJlMGRmNDhjZDMwM2ZiZWZmZjJlNjFlYzM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T14:42:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T14:42:39Z"}, "message": "fix big-endian bitmasks smaller than a byte", "tree": {"sha": "f1cba1362a0c8e1f0f1e82d9c6484f71daf17fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1cba1362a0c8e1f0f1e82d9c6484f71daf17fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60555b57f1a61962e0df48cd303fbefff2e61ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60555b57f1a61962e0df48cd303fbefff2e61ec3", "html_url": "https://github.com/rust-lang/rust/commit/60555b57f1a61962e0df48cd303fbefff2e61ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60555b57f1a61962e0df48cd303fbefff2e61ec3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50fbfa4ebab8c8754d625163f4fba8a1ca0ab676", "url": "https://api.github.com/repos/rust-lang/rust/commits/50fbfa4ebab8c8754d625163f4fba8a1ca0ab676", "html_url": "https://github.com/rust-lang/rust/commit/50fbfa4ebab8c8754d625163f4fba8a1ca0ab676"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "efa688b128fd07f4df819c2994494ce0ecaf334d", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60555b57f1a61962e0df48cd303fbefff2e61ec3/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60555b57f1a61962e0df48cd303fbefff2e61ec3/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=60555b57f1a61962e0df48cd303fbefff2e61ec3", "patch": "@@ -68,14 +68,26 @@ where\n \n // Used for bitmask bit order workaround\n pub(crate) trait ReverseBits {\n-    fn reverse_bits(self) -> Self;\n+    // Reverse the least significant `n` bits of `self`.\n+    // (Remaining bits must be 0.)\n+    fn reverse_bits(self, n: usize) -> Self;\n }\n \n macro_rules! impl_reverse_bits {\n     { $($int:ty),* } => {\n         $(\n         impl ReverseBits for $int {\n-            fn reverse_bits(self) -> Self { <$int>::reverse_bits(self) }\n+            #[inline(always)]\n+            fn reverse_bits(self, n: usize) -> Self {\n+                let rev = <$int>::reverse_bits(self);\n+                let bitsize = core::mem::size_of::<$int>() * 8;\n+                if n < bitsize {\n+                    // Shift things back to the right\n+                    rev >> (bitsize - n)\n+                } else {\n+                    rev\n+                }\n+            }\n         }\n         )*\n     }\n@@ -137,7 +149,7 @@ where\n \n         // LLVM assumes bit order should match endianness\n         if cfg!(target_endian = \"big\") {\n-            bitmask.reverse_bits()\n+            bitmask.reverse_bits(LANES)\n         } else {\n             bitmask\n         }\n@@ -150,7 +162,7 @@ where\n     {\n         // LLVM assumes bit order should match endianness\n         let bitmask = if cfg!(target_endian = \"big\") {\n-            bitmask.reverse_bits()\n+            bitmask.reverse_bits(LANES)\n         } else {\n             bitmask\n         };"}, {"sha": "d10c6610f5051be8b1b7ae0e7e25baeda1621a79", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60555b57f1a61962e0df48cd303fbefff2e61ec3/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60555b57f1a61962e0df48cd303fbefff2e61ec3/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=60555b57f1a61962e0df48cd303fbefff2e61ec3", "patch": "@@ -84,13 +84,20 @@ macro_rules! test_mask_api {\n             #[test]\n             fn roundtrip_bitmask_conversion_short() {\n                 use core_simd::ToBitMask;\n+\n                 let values = [\n                     false, false, false, true,\n                 ];\n                 let mask = core_simd::Mask::<$type, 4>::from_array(values);\n                 let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, 0b1000);\n                 assert_eq!(core_simd::Mask::<$type, 4>::from_bitmask(bitmask), mask);\n+\n+                let values = [true, false];\n+                let mask = core_simd::Mask::<$type, 2>::from_array(values);\n+                let bitmask = mask.to_bitmask();\n+                assert_eq!(bitmask, 0b01);\n+                assert_eq!(core_simd::Mask::<$type, 2>::from_bitmask(bitmask), mask);\n             }\n         }\n     }"}]}