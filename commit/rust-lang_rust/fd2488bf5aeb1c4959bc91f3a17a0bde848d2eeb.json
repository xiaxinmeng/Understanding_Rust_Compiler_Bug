{"sha": "fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjQ4OGJmNWFlYjFjNDk1OWJjOTFmM2ExN2EwYmRlODQ4ZDJlZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T13:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T13:06:04Z"}, "message": "auto merge of #9051 : bjz/rust/master, r=huonw", "tree": {"sha": "05637365e6bed9fabfc79114a4f8165eb3553dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05637365e6bed9fabfc79114a4f8165eb3553dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "html_url": "https://github.com/rust-lang/rust/commit/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2827b99deb70196a32c3df716baccc763fe6c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2827b99deb70196a32c3df716baccc763fe6c6", "html_url": "https://github.com/rust-lang/rust/commit/7e2827b99deb70196a32c3df716baccc763fe6c6"}, {"sha": "2c31053d20ba8f4bd9120d2025d8eb226b94179a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c31053d20ba8f4bd9120d2025d8eb226b94179a", "html_url": "https://github.com/rust-lang/rust/commit/2c31053d20ba8f4bd9120d2025d8eb226b94179a"}], "stats": {"total": 803, "additions": 419, "deletions": 384}, "files": [{"sha": "5c077c7e633d0cc16caa38fbc4ad810bb0a50a1f", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,7 +10,8 @@\n \n //! Operations and constants for `i16`\n \n-use num::BitCount;\n+use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n use unstable::intrinsics;\n \n pub use self::generated::*;\n@@ -30,3 +31,33 @@ impl BitCount for i16 {\n     #[inline]\n     fn trailing_zeros(&self) -> i16 { unsafe { intrinsics::cttz16(*self) } }\n }\n+\n+impl CheckedAdd for i16 {\n+    #[inline]\n+    fn checked_add(&self, v: &i16) -> Option<i16> {\n+        unsafe {\n+            let (x, y) = intrinsics::i16_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for i16 {\n+    #[inline]\n+    fn checked_sub(&self, v: &i16) -> Option<i16> {\n+        unsafe {\n+            let (x, y) = intrinsics::i16_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for i16 {\n+    #[inline]\n+    fn checked_mul(&self, v: &i16) -> Option<i16> {\n+        unsafe {\n+            let (x, y) = intrinsics::i16_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "f076e33b3a2183808cbe533378380d174cee4500", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,7 +10,8 @@\n \n //! Operations and constants for `i32`\n \n-use num::BitCount;\n+use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n use unstable::intrinsics;\n \n pub use self::generated::*;\n@@ -30,3 +31,33 @@ impl BitCount for i32 {\n     #[inline]\n     fn trailing_zeros(&self) -> i32 { unsafe { intrinsics::cttz32(*self) } }\n }\n+\n+impl CheckedAdd for i32 {\n+    #[inline]\n+    fn checked_add(&self, v: &i32) -> Option<i32> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for i32 {\n+    #[inline]\n+    fn checked_sub(&self, v: &i32) -> Option<i32> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for i32 {\n+    #[inline]\n+    fn checked_mul(&self, v: &i32) -> Option<i32> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "d991bf0330034a7e387280208e51c4d646d41e81", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,7 +10,10 @@\n \n //! Operations and constants for `i64`\n \n-use num::BitCount;\n+use num::{BitCount, CheckedAdd, CheckedSub};\n+#[cfg(target_word_size = \"64\")]\n+use num::CheckedMul;\n+use option::{Option, Some, None};\n use unstable::intrinsics;\n \n pub use self::generated::*;\n@@ -30,3 +33,35 @@ impl BitCount for i64 {\n     #[inline]\n     fn trailing_zeros(&self) -> i64 { unsafe { intrinsics::cttz64(*self) } }\n }\n+\n+impl CheckedAdd for i64 {\n+    #[inline]\n+    fn checked_add(&self, v: &i64) -> Option<i64> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for i64 {\n+    #[inline]\n+    fn checked_sub(&self, v: &i64) -> Option<i64> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+// FIXME: #8449: should not be disabled on 32-bit\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedMul for i64 {\n+    #[inline]\n+    fn checked_mul(&self, v: &i64) -> Option<i64> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "a807f6b9e53f3dbd9d5cd9fcdf6f61fc07fc995b", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,7 +10,8 @@\n \n //! Operations and constants for `i8`\n \n-use num::BitCount;\n+use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n use unstable::intrinsics;\n \n pub use self::generated::*;\n@@ -30,3 +31,33 @@ impl BitCount for i8 {\n     #[inline]\n     fn trailing_zeros(&self) -> i8 { unsafe { intrinsics::cttz8(*self) } }\n }\n+\n+impl CheckedAdd for i8 {\n+    #[inline]\n+    fn checked_add(&self, v: &i8) -> Option<i8> {\n+        unsafe {\n+            let (x, y) = intrinsics::i8_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for i8 {\n+    #[inline]\n+    fn checked_sub(&self, v: &i8) -> Option<i8> {\n+        unsafe {\n+            let (x, y) = intrinsics::i8_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for i8 {\n+    #[inline]\n+    fn checked_mul(&self, v: &i8) -> Option<i8> {\n+        unsafe {\n+            let (x, y) = intrinsics::i8_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "c5364fa3dab963d652d80b5f477f4b1138dacb3f", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -12,7 +12,9 @@\n \n #[allow(non_uppercase_statics)];\n \n-use num::BitCount;\n+use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n \n pub use self::generated::*;\n \n@@ -51,6 +53,72 @@ impl BitCount for int {\n     fn trailing_zeros(&self) -> int { (*self as i64).trailing_zeros() as int }\n }\n \n+#[cfg(target_word_size = \"32\")]\n+impl CheckedAdd for int {\n+    #[inline]\n+    fn checked_add(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_add_with_overflow(*self as i32, *v as i32);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedAdd for int {\n+    #[inline]\n+    fn checked_add(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_add_with_overflow(*self as i64, *v as i64);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"32\")]\n+impl CheckedSub for int {\n+    #[inline]\n+    fn checked_sub(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_sub_with_overflow(*self as i32, *v as i32);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedSub for int {\n+    #[inline]\n+    fn checked_sub(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_sub_with_overflow(*self as i64, *v as i64);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"32\")]\n+impl CheckedMul for int {\n+    #[inline]\n+    fn checked_mul(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i32_mul_with_overflow(*self as i32, *v as i32);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedMul for int {\n+    #[inline]\n+    fn checked_mul(&self, v: &int) -> Option<int> {\n+        unsafe {\n+            let (x, y) = intrinsics::i64_mul_with_overflow(*self as i64, *v as i64);\n+            if y { None } else { Some(x as int) }\n+        }\n+    }\n+}\n+\n /// Returns `base` raised to the power of `exponent`\n pub fn pow(base: int, exponent: uint) -> int {\n     if exponent == 0u {"}, {"sha": "135124b04c143a4bcb27cdcbf160618507f4ddd9", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 5, "deletions": 379, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -15,11 +15,11 @@\n \n #[allow(missing_doc)];\n \n+use clone::{Clone, DeepClone};\n use cmp::{Eq, ApproxEq, Ord};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::{Option, Some, None};\n-use unstable::intrinsics;\n \n pub mod strconv;\n \n@@ -275,7 +275,9 @@ pub trait Bounded {\n /// Specifies the available operations common to all of Rust's core numeric primitives.\n /// These may not always make sense from a purely mathematical point of view, but\n /// may be useful for systems programming.\n-pub trait Primitive: Num\n+pub trait Primitive: Clone\n+                   + DeepClone\n+                   + Num\n                    + NumCast\n                    + Bounded\n                    + Neg<Self>\n@@ -493,7 +495,7 @@ pub trait Saturating {\n     fn saturating_sub(self, v: Self) -> Self;\n }\n \n-impl<T: CheckedAdd+CheckedSub+Zero+Ord+Bounded> Saturating for T {\n+impl<T: CheckedAdd + CheckedSub + Zero + Ord + Bounded> Saturating for T {\n     #[inline]\n     fn saturating_add(self, v: T) -> T {\n         match self.checked_add(&v) {\n@@ -523,390 +525,14 @@ pub trait CheckedAdd: Add<Self, Self> {\n     fn checked_add(&self, v: &Self) -> Option<Self>;\n }\n \n-impl CheckedAdd for i8 {\n-    #[inline]\n-    fn checked_add(&self, v: &i8) -> Option<i8> {\n-        unsafe {\n-            let (x, y) = intrinsics::i8_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for i16 {\n-    #[inline]\n-    fn checked_add(&self, v: &i16) -> Option<i16> {\n-        unsafe {\n-            let (x, y) = intrinsics::i16_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for i32 {\n-    #[inline]\n-    fn checked_add(&self, v: &i32) -> Option<i32> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for i64 {\n-    #[inline]\n-    fn checked_add(&self, v: &i64) -> Option<i64> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedAdd for int {\n-    #[inline]\n-    fn checked_add(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_add_with_overflow(*self as i32, *v as i32);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedAdd for int {\n-    #[inline]\n-    fn checked_add(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_add_with_overflow(*self as i64, *v as i64);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for u8 {\n-    #[inline]\n-    fn checked_add(&self, v: &u8) -> Option<u8> {\n-        unsafe {\n-            let (x, y) = intrinsics::u8_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for u16 {\n-    #[inline]\n-    fn checked_add(&self, v: &u16) -> Option<u16> {\n-        unsafe {\n-            let (x, y) = intrinsics::u16_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for u32 {\n-    #[inline]\n-    fn checked_add(&self, v: &u32) -> Option<u32> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedAdd for u64 {\n-    #[inline]\n-    fn checked_add(&self, v: &u64) -> Option<u64> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_add_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedAdd for uint {\n-    #[inline]\n-    fn checked_add(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_add_with_overflow(*self as u32, *v as u32);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedAdd for uint {\n-    #[inline]\n-    fn checked_add(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_add_with_overflow(*self as u64, *v as u64);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n pub trait CheckedSub: Sub<Self, Self> {\n     fn checked_sub(&self, v: &Self) -> Option<Self>;\n }\n \n-impl CheckedSub for i8 {\n-    #[inline]\n-    fn checked_sub(&self, v: &i8) -> Option<i8> {\n-        unsafe {\n-            let (x, y) = intrinsics::i8_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for i16 {\n-    #[inline]\n-    fn checked_sub(&self, v: &i16) -> Option<i16> {\n-        unsafe {\n-            let (x, y) = intrinsics::i16_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for i32 {\n-    #[inline]\n-    fn checked_sub(&self, v: &i32) -> Option<i32> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for i64 {\n-    #[inline]\n-    fn checked_sub(&self, v: &i64) -> Option<i64> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedSub for int {\n-    #[inline]\n-    fn checked_sub(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_sub_with_overflow(*self as i32, *v as i32);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedSub for int {\n-    #[inline]\n-    fn checked_sub(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_sub_with_overflow(*self as i64, *v as i64);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for u8 {\n-    #[inline]\n-    fn checked_sub(&self, v: &u8) -> Option<u8> {\n-        unsafe {\n-            let (x, y) = intrinsics::u8_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for u16 {\n-    #[inline]\n-    fn checked_sub(&self, v: &u16) -> Option<u16> {\n-        unsafe {\n-            let (x, y) = intrinsics::u16_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for u32 {\n-    #[inline]\n-    fn checked_sub(&self, v: &u32) -> Option<u32> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedSub for u64 {\n-    #[inline]\n-    fn checked_sub(&self, v: &u64) -> Option<u64> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_sub_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedSub for uint {\n-    #[inline]\n-    fn checked_sub(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_sub_with_overflow(*self as u32, *v as u32);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedSub for uint {\n-    #[inline]\n-    fn checked_sub(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_sub_with_overflow(*self as u64, *v as u64);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n pub trait CheckedMul: Mul<Self, Self> {\n     fn checked_mul(&self, v: &Self) -> Option<Self>;\n }\n \n-impl CheckedMul for i8 {\n-    #[inline]\n-    fn checked_mul(&self, v: &i8) -> Option<i8> {\n-        unsafe {\n-            let (x, y) = intrinsics::i8_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedMul for i16 {\n-    #[inline]\n-    fn checked_mul(&self, v: &i16) -> Option<i16> {\n-        unsafe {\n-            let (x, y) = intrinsics::i16_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedMul for i32 {\n-    #[inline]\n-    fn checked_mul(&self, v: &i32) -> Option<i32> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-// FIXME: #8449: should not be disabled on 32-bit\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedMul for i64 {\n-    #[inline]\n-    fn checked_mul(&self, v: &i64) -> Option<i64> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedMul for int {\n-    #[inline]\n-    fn checked_mul(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i32_mul_with_overflow(*self as i32, *v as i32);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedMul for int {\n-    #[inline]\n-    fn checked_mul(&self, v: &int) -> Option<int> {\n-        unsafe {\n-            let (x, y) = intrinsics::i64_mul_with_overflow(*self as i64, *v as i64);\n-            if y { None } else { Some(x as int) }\n-        }\n-    }\n-}\n-\n-impl CheckedMul for u8 {\n-    #[inline]\n-    fn checked_mul(&self, v: &u8) -> Option<u8> {\n-        unsafe {\n-            let (x, y) = intrinsics::u8_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedMul for u16 {\n-    #[inline]\n-    fn checked_mul(&self, v: &u16) -> Option<u16> {\n-        unsafe {\n-            let (x, y) = intrinsics::u16_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-impl CheckedMul for u32 {\n-    #[inline]\n-    fn checked_mul(&self, v: &u32) -> Option<u32> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-// FIXME: #8449: should not be disabled on 32-bit\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedMul for u64 {\n-    #[inline]\n-    fn checked_mul(&self, v: &u64) -> Option<u64> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_mul_with_overflow(*self, *v);\n-            if y { None } else { Some(x) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"32\")]\n-impl CheckedMul for uint {\n-    #[inline]\n-    fn checked_mul(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u32_mul_with_overflow(*self as u32, *v as u32);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n-#[cfg(target_word_size = \"64\")]\n-impl CheckedMul for uint {\n-    #[inline]\n-    fn checked_mul(&self, v: &uint) -> Option<uint> {\n-        unsafe {\n-            let (x, y) = intrinsics::u64_mul_with_overflow(*self as u64, *v as u64);\n-            if y { None } else { Some(x as uint) }\n-        }\n-    }\n-}\n-\n pub trait CheckedDiv: Div<Self, Self> {\n     fn checked_div(&self, v: &Self) -> Option<Self>;\n }"}, {"sha": "e227947ca6e5f8d2f60ecf5a97459fc4f2c6e4c5", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,5 +10,40 @@\n \n //! Operations and constants for `u16`\n \n+use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n+\n pub use self::generated::*;\n+\n uint_module!(u16, i16, 16)\n+\n+impl CheckedAdd for u16 {\n+    #[inline]\n+    fn checked_add(&self, v: &u16) -> Option<u16> {\n+        unsafe {\n+            let (x, y) = intrinsics::u16_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for u16 {\n+    #[inline]\n+    fn checked_sub(&self, v: &u16) -> Option<u16> {\n+        unsafe {\n+            let (x, y) = intrinsics::u16_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for u16 {\n+    #[inline]\n+    fn checked_mul(&self, v: &u16) -> Option<u16> {\n+        unsafe {\n+            let (x, y) = intrinsics::u16_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "4dbd543da7b0b252f71a881df0bc3a948ac33506", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,5 +10,40 @@\n \n //! Operations and constants for `u32`\n \n+use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n+\n pub use self::generated::*;\n+\n uint_module!(u32, i32, 32)\n+\n+impl CheckedAdd for u32 {\n+    #[inline]\n+    fn checked_add(&self, v: &u32) -> Option<u32> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for u32 {\n+    #[inline]\n+    fn checked_sub(&self, v: &u32) -> Option<u32> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for u32 {\n+    #[inline]\n+    fn checked_mul(&self, v: &u32) -> Option<u32> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "d3077333077d3f65ecf2e3530dce3617f093a869", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,5 +10,44 @@\n \n //! Operations and constants for `u64`\n \n+use num::{CheckedAdd, CheckedSub};\n+#[cfg(target_word_size = \"64\")]\n+use num::CheckedMul;\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n+\n pub use self::generated::*;\n+\n uint_module!(u64, i64, 64)\n+\n+impl CheckedAdd for u64 {\n+    #[inline]\n+    fn checked_add(&self, v: &u64) -> Option<u64> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for u64 {\n+    #[inline]\n+    fn checked_sub(&self, v: &u64) -> Option<u64> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+// FIXME: #8449: should not be disabled on 32-bit\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedMul for u64 {\n+    #[inline]\n+    fn checked_mul(&self, v: &u64) -> Option<u64> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "ca54af5cecc43808fc85a2131005a96bb962e9f8", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -10,5 +10,40 @@\n \n //! Operations and constants for `u8`\n \n+use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n+\n pub use self::generated::*;\n+\n uint_module!(u8, i8, 8)\n+\n+impl CheckedAdd for u8 {\n+    #[inline]\n+    fn checked_add(&self, v: &u8) -> Option<u8> {\n+        unsafe {\n+            let (x, y) = intrinsics::u8_add_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedSub for u8 {\n+    #[inline]\n+    fn checked_sub(&self, v: &u8) -> Option<u8> {\n+        unsafe {\n+            let (x, y) = intrinsics::u8_sub_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}\n+\n+impl CheckedMul for u8 {\n+    #[inline]\n+    fn checked_mul(&self, v: &u8) -> Option<u8> {\n+        unsafe {\n+            let (x, y) = intrinsics::u8_mul_with_overflow(*self, *v);\n+            if y { None } else { Some(x) }\n+        }\n+    }\n+}"}, {"sha": "dfdd6cf72f742970d69e1c74607e8f123e89eebf", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=fd2488bf5aeb1c4959bc91f3a17a0bde848d2eeb", "patch": "@@ -11,6 +11,9 @@\n //! Operations and constants for `uint`\n \n use num;\n+use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use option::{Option, Some, None};\n+use unstable::intrinsics;\n use sys;\n \n pub use self::generated::*;\n@@ -101,6 +104,72 @@ pub fn next_power_of_two(n: uint) -> uint {\n     return tmp + 1u;\n }\n \n+#[cfg(target_word_size = \"32\")]\n+impl CheckedAdd for uint {\n+    #[inline]\n+    fn checked_add(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_add_with_overflow(*self as u32, *v as u32);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedAdd for uint {\n+    #[inline]\n+    fn checked_add(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_add_with_overflow(*self as u64, *v as u64);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"32\")]\n+impl CheckedSub for uint {\n+    #[inline]\n+    fn checked_sub(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_sub_with_overflow(*self as u32, *v as u32);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedSub for uint {\n+    #[inline]\n+    fn checked_sub(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_sub_with_overflow(*self as u64, *v as u64);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"32\")]\n+impl CheckedMul for uint {\n+    #[inline]\n+    fn checked_mul(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u32_mul_with_overflow(*self as u32, *v as u32);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+impl CheckedMul for uint {\n+    #[inline]\n+    fn checked_mul(&self, v: &uint) -> Option<uint> {\n+        unsafe {\n+            let (x, y) = intrinsics::u64_mul_with_overflow(*self as u64, *v as u64);\n+            if y { None } else { Some(x as uint) }\n+        }\n+    }\n+}\n+\n #[test]\n fn test_next_power_of_two() {\n     assert!((next_power_of_two(0u) == 0u));"}]}