{"sha": "29428637093cce62829e863eb5c8143da9860bef", "node_id": "C_kwDOAAsO6NoAKDI5NDI4NjM3MDkzY2NlNjI4MjllODYzZWI1YzgxNDNkYTk4NjBiZWY", "commit": {"author": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-06-09T07:37:18Z"}, "committer": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-06-09T07:45:46Z"}, "message": "feat: append :: after", "tree": {"sha": "e39b6f698976b0ef10d28dd852b556779f4758d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39b6f698976b0ef10d28dd852b556779f4758d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29428637093cce62829e863eb5c8143da9860bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29428637093cce62829e863eb5c8143da9860bef", "html_url": "https://github.com/rust-lang/rust/commit/29428637093cce62829e863eb5c8143da9860bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29428637093cce62829e863eb5c8143da9860bef/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55bc693356d793f3fae5cf9c7f97f8fc1cef5d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/55bc693356d793f3fae5cf9c7f97f8fc1cef5d2d", "html_url": "https://github.com/rust-lang/rust/commit/55bc693356d793f3fae5cf9c7f97f8fc1cef5d2d"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "28e4e47751782b12a24d3d3bcfc181360e44406d", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29428637093cce62829e863eb5c8143da9860bef/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29428637093cce62829e863eb5c8143da9860bef/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=29428637093cce62829e863eb5c8143da9860bef", "patch": "@@ -1,13 +1,13 @@\n //! Completion for use trees\n \n use hir::ScopeDef;\n-use ide_db::FxHashSet;\n+use ide_db::{FxHashSet, SymbolKind};\n use syntax::{ast, AstNode};\n \n use crate::{\n     context::{CompletionContext, NameRefContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n     item::Builder,\n-    CompletionRelevance, Completions,\n+    CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -105,20 +105,26 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n         None => {\n             cov_mark::hit!(unqualified_path_selected_only);\n             ctx.process_all_names(&mut |name, res| {\n-                let should_add_resolution = match res {\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(_))) => {\n-                        match res.krate(ctx.db) {\n-                            // exclude prelude enum\n-                            Some(krate) => !krate.is_builtin(ctx.db),\n-                            _ => true,\n+                match res {\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => {\n+                        acc.add_resolution(ctx, name, res);\n+                    }\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n+                        // exclude prelude enum\n+                        let is_builtin =\n+                            res.krate(ctx.db).map_or(false, |krate| krate.is_builtin(ctx.db));\n+\n+                        if !is_builtin {\n+                            let item = CompletionItem::new(\n+                                CompletionItemKind::SymbolKind(SymbolKind::Enum),\n+                                ctx.source_range(),\n+                                format!(\"{}::\", e.name(ctx.db)),\n+                            );\n+                            acc.add(item.build());\n                         }\n                     }\n-                    _ => false,\n+                    _ => {}\n                 };\n-                if should_add_resolution {\n-                    acc.add_resolution(ctx, name, res);\n-                }\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }"}, {"sha": "711822d731bbb25a1b469e640f7060c084748d48", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29428637093cce62829e863eb5c8143da9860bef/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29428637093cce62829e863eb5c8143da9860bef/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=29428637093cce62829e863eb5c8143da9860bef", "patch": "@@ -26,7 +26,7 @@ mod foo {}\n // nothing here\n \"#,\n         expect![[r#\"\n-            en FooBar\n+            en FooBar::\n             md foo\n             md other_crate\n             kw crate::"}]}