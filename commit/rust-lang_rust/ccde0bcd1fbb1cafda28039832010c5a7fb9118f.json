{"sha": "ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZGUwYmNkMWZiYjFjYWZkYTI4MDM5ODMyMDEwYzVhN2ZiOTExOGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T16:54:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T16:54:12Z"}, "message": "Only complete ancestors and self in visibility path completions", "tree": {"sha": "7b72d2f693551c35976e2959fb3a590f0a586e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b72d2f693551c35976e2959fb3a590f0a586e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "html_url": "https://github.com/rust-lang/rust/commit/ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccde0bcd1fbb1cafda28039832010c5a7fb9118f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3956a5b757dffb5bfd475b89146aa9eb655818e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3956a5b757dffb5bfd475b89146aa9eb655818e0", "html_url": "https://github.com/rust-lang/rust/commit/3956a5b757dffb5bfd475b89146aa9eb655818e0"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "03b079ed7a0b00b96fe858cdcc25a8c83f4338d1", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ccde0bcd1fbb1cafda28039832010c5a7fb9118f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde0bcd1fbb1cafda28039832010c5a7fb9118f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "patch": "@@ -28,22 +28,40 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n     let context_module = ctx.scope.module();\n \n-    if let Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) =\n-        ctx.completion_location\n-    {\n-        if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n-            for (name, def) in module.scope(ctx.db, context_module) {\n-                if let hir::ScopeDef::MacroDef(macro_def) = def {\n-                    if macro_def.is_fn_like() {\n-                        acc.add_macro(ctx, Some(name.clone()), macro_def);\n+    match ctx.completion_location {\n+        Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n+            if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n+                for (name, def) in module.scope(ctx.db, context_module) {\n+                    if let hir::ScopeDef::MacroDef(macro_def) = def {\n+                        if macro_def.is_fn_like() {\n+                            acc.add_macro(ctx, Some(name.clone()), macro_def);\n+                        }\n+                    }\n+                    if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n+                        acc.add_resolution(ctx, name, &def);\n                     }\n                 }\n-                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n-                    acc.add_resolution(ctx, name, &def);\n+            }\n+            return;\n+        }\n+        Some(ImmediateLocation::Visibility(_)) => {\n+            if let hir::PathResolution::Def(hir::ModuleDef::Module(resolved)) = resolution {\n+                if let Some(current_module) = ctx.scope.module() {\n+                    if let Some(next) = current_module\n+                        .path_to_root(ctx.db)\n+                        .into_iter()\n+                        .take_while(|&it| it != resolved)\n+                        .next()\n+                    {\n+                        if let Some(name) = next.name(ctx.db) {\n+                            acc.add_resolution(ctx, name, &hir::ScopeDef::ModuleDef(next.into()));\n+                        }\n+                    }\n                 }\n             }\n+            return;\n         }\n-        return;\n+        _ => (),\n     }\n \n     if ctx.in_use_tree() {"}, {"sha": "8a024af24b8002b81b4cc69a15785af14b33904e", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ccde0bcd1fbb1cafda28039832010c5a7fb9118f/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde0bcd1fbb1cafda28039832010c5a7fb9118f/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=ccde0bcd1fbb1cafda28039832010c5a7fb9118f", "patch": "@@ -40,7 +40,6 @@ pub(in $0)\n \n #[test]\n fn qualified() {\n-    // FIXME: only show parent modules\n     check(\n         r#\"\n mod foo {\n@@ -50,7 +49,21 @@ mod foo {\n mod bar {}\n \"#,\n         expect![[r#\"\n-            md bar\n+            md foo\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+mod qux {\n+    mod foo {\n+        pub(in crate::qux::$0)\n+    }\n+    mod baz {}\n+}\n+\n+mod bar {}\n+\"#,\n+        expect![[r#\"\n             md foo\n         \"#]],\n     );"}]}