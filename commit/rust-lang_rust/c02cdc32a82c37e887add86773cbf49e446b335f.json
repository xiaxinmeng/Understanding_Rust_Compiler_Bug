{"sha": "c02cdc32a82c37e887add86773cbf49e446b335f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmNkYzMyYTgyYzM3ZTg4N2FkZDg2NzczY2JmNDllNDQ2YjMzNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-22T01:13:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-22T15:04:45Z"}, "message": "Generalize send/recv to work for more types", "tree": {"sha": "89f8a94c689fbc3a1aa33b4ea55472f1efd88cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f8a94c689fbc3a1aa33b4ea55472f1efd88cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02cdc32a82c37e887add86773cbf49e446b335f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02cdc32a82c37e887add86773cbf49e446b335f", "html_url": "https://github.com/rust-lang/rust/commit/c02cdc32a82c37e887add86773cbf49e446b335f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02cdc32a82c37e887add86773cbf49e446b335f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20e7995ac39fdc879c436bc8d5a7ba5c3580f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20e7995ac39fdc879c436bc8d5a7ba5c3580f00", "html_url": "https://github.com/rust-lang/rust/commit/e20e7995ac39fdc879c436bc8d5a7ba5c3580f00"}], "stats": {"total": 139, "additions": 124, "deletions": 15}, "files": [{"sha": "a95ebcabfb04d6169c05bb8f38e3a0c3a168d3a0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c02cdc32a82c37e887add86773cbf49e446b335f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02cdc32a82c37e887add86773cbf49e446b335f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c02cdc32a82c37e887add86773cbf49e446b335f", "patch": "@@ -4790,17 +4790,19 @@ fn trans_send(@block_ctxt cx, @ast.expr lhs, @ast.expr rhs,\n         }\n     }\n \n-    auto llunit_ty = type_of(bcx.fcx.ccx, unit_ty);\n-    auto data_alloca = bcx.build.Alloca(llunit_ty);\n-    bcx.build.Store(data.val, data_alloca);\n+    auto data_alloc = alloc_ty(bcx, unit_ty);\n+    bcx = data_alloc.bcx;\n+    auto data_tmp = copy_ty(bcx, INIT, data_alloc.val, data.val, unit_ty);\n+    bcx = data_tmp.bcx;\n \n-    auto chn_val = vp2i(bcx, chn.val);\n-    auto data_val = vp2i(bcx, data_alloca);\n+    // TODO: Cleanups?\n \n-    auto sub = trans_upcall(bcx, \"upcall_send\", vec(chn_val, data_val));\n+    auto sub = trans_upcall(bcx, \"upcall_send\",\n+                            vec(vp2i(bcx, chn.val),\n+                                vp2i(bcx, data_alloc.val)));\n     bcx = sub.bcx;\n \n-    ret res(bcx, chn_val);\n+    ret res(bcx, chn.val);\n }\n \n fn trans_recv(@block_ctxt cx, @ast.expr lhs, @ast.expr rhs,\n@@ -4813,17 +4815,19 @@ fn trans_recv(@block_ctxt cx, @ast.expr lhs, @ast.expr rhs,\n     auto prt = trans_expr(bcx, rhs);\n     bcx = prt.bcx;\n \n+    auto sub = trans_upcall(bcx, \"upcall_recv\",\n+                            vec(vp2i(bcx, data.res.val),\n+                                vp2i(bcx, prt.val)));\n+    bcx = sub.bcx;\n+\n     auto unit_ty = node_ann_type(cx.fcx.ccx, ann);\n-    auto llunit_ty = type_of(bcx.fcx.ccx, unit_ty);\n-    auto data_alloca = bcx.build.Alloca(llunit_ty);\n+    auto data_load = load_scalar_or_boxed(bcx, data.res.val, unit_ty);\n+    auto cp = copy_ty(bcx, DROP_EXISTING, data.res.val, data_load, unit_ty);\n+    bcx = cp.bcx;\n \n-    auto data_val = vp2i(bcx, data_alloca);\n-    auto prt_val = vp2i(bcx, prt.val);\n-    auto sub = trans_upcall(bcx, \"upcall_recv\", vec(data_val, prt_val));\n-    bcx = sub.bcx;\n+    // TODO: Cleanups?\n \n-    auto data_load = bcx.build.Load(data_alloca);\n-    ret copy_ty(bcx, DROP_EXISTING, data.res.val, data_load, unit_ty);\n+    ret res(bcx, data.res.val);\n }\n \n fn init_local(@block_ctxt cx, @ast.local local) -> result {"}, {"sha": "0b568cbc457c8d5fe7694322a1cdde774af38fc8", "filename": "src/test/run-pass/task-comm-16.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c02cdc32a82c37e887add86773cbf49e446b335f/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02cdc32a82c37e887add86773cbf49e446b335f/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=c02cdc32a82c37e887add86773cbf49e446b335f", "patch": "@@ -0,0 +1,105 @@\n+// -*- rust -*-\n+\n+// Tests of ports and channels on various types\n+\n+impure fn test_rec() {\n+  type r = rec(int val0, u8 val1, char val2);\n+\n+  let port[r] po = port();\n+  let chan[r] ch = chan(po);\n+  let r r0 = rec(val0 = 0, val1 = 1u8, val2 = '2');\n+\n+  ch <| r0;\n+\n+  let r r1;\n+  r1 <- po;\n+\n+  check (r1.val0 == 0);\n+  check (r1.val1 == 1u8);\n+  check (r1.val2 == '2');\n+}\n+\n+impure fn test_vec() {\n+  let port[vec[int]] po = port();\n+  let chan[vec[int]] ch = chan(po);\n+  let vec[int] v0 = vec(0, 1, 2);\n+\n+  ch <| v0;\n+\n+  let vec[int] v1;\n+  v1 <- po;\n+\n+  check (v1.(0) == 0);\n+  check (v1.(1) == 1);\n+  check (v1.(2) == 2);\n+}\n+\n+impure fn test_tup() {\n+  type t = tup(int, u8, char);\n+\n+  let port[t] po = port();\n+  let chan[t] ch = chan(po);\n+  let t t0 = tup(0, 1u8, '2');\n+\n+  ch <| t0;\n+\n+  let t t1;\n+  t1 <- po;\n+\n+  check (t0._0 == 0);\n+  check (t0._1 == 1u8);\n+  check (t0._2 == '2');\n+}\n+\n+impure fn test_tag() {\n+  tag t {\n+    tag1;\n+    tag2(int);\n+    tag3(int, u8, char);\n+  }\n+\n+  let port[t] po = port();\n+  let chan[t] ch = chan(po);\n+\n+  ch <| tag1;\n+  ch <| tag2(10);\n+  ch <| tag3(10, 11u8, 'A');\n+\n+  let t t1;\n+\n+  t1 <- po;\n+  check (t1 == tag1);\n+  t1 <- po;\n+  check (t1 == tag2(10));\n+  t1 <- po;\n+  check (t1 == tag3(10, 11u8, 'A'));\n+}\n+\n+impure fn test_chan() {\n+  let port[chan[int]] po = port();\n+  let chan[chan[int]] ch = chan(po);\n+\n+  let port[int] po0 = port();\n+  let chan[int] ch0 = chan(po0);\n+\n+  ch <| ch0;\n+\n+  let chan[int] ch1;\n+  ch1 <- po;\n+\n+  // Does the transmitted channel still work?\n+  ch1 <| 10;\n+\n+  let int i;\n+  i <- po0;\n+\n+  check (i == 10);\n+}\n+\n+impure fn main() {\n+  test_rec();\n+  test_vec();\n+  test_tup();\n+  test_tag();\n+  test_chan();\n+}"}]}