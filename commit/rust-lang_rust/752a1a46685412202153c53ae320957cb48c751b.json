{"sha": "752a1a46685412202153c53ae320957cb48c751b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MmExYTQ2Njg1NDEyMjAyMTUzYzUzYWUzMjA5NTdjYjQ4Yzc1MWI=", "commit": {"author": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T21:52:17Z"}, "committer": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T21:52:17Z"}, "message": "Updated tag methods for consistency", "tree": {"sha": "2ce070057e460340807edfe9c6821525612ee967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce070057e460340807edfe9c6821525612ee967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752a1a46685412202153c53ae320957cb48c751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752a1a46685412202153c53ae320957cb48c751b", "html_url": "https://github.com/rust-lang/rust/commit/752a1a46685412202153c53ae320957cb48c751b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752a1a46685412202153c53ae320957cb48c751b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc28d454157dce3885980012dd12e592ce74cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc28d454157dce3885980012dd12e592ce74cc2", "html_url": "https://github.com/rust-lang/rust/commit/9cc28d454157dce3885980012dd12e592ce74cc2"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "46c16e9ceae0ae6bf457d4dd4a9875f1ff7170f6", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=752a1a46685412202153c53ae320957cb48c751b", "patch": "@@ -25,7 +25,7 @@ use crate::interpret::{self,\n     PlaceTy, MPlaceTy, MemPlace, OpTy, ImmTy, Immediate, Scalar,\n     RawConst, ConstValue,\n     InterpResult, InterpErrorInfo, InterpError, GlobalId, InterpretCx, StackPopCleanup,\n-    Allocation, AllocId, MemoryKind,\n+    Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking,\n };\n \n@@ -404,7 +404,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-        _memory_extra: &(),\n+        _memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n         (alloc, ())\n@@ -413,7 +413,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     #[inline(always)]\n     fn tag_static_base_pointer(\n         _id: AllocId,\n-        _memory_extra: &(),\n+        _memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag {\n         ()\n     }"}, {"sha": "4eb95f20d935449e610426d1c88ef571a4edfa99", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=752a1a46685412202153c53ae320957cb48c751b", "patch": "@@ -177,7 +177,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n \n     /// Return the \"base\" tag for the given static allocation: the one that is used for direct\n@@ -187,7 +187,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// for cyclic statics!\n     fn tag_static_base_pointer(\n         id: AllocId,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag;\n \n     /// Executes a retagging operation"}, {"sha": "b431166a916189bb84feb5da4a4b7376234dedcb", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752a1a46685412202153c53ae320957cb48c751b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=752a1a46685412202153c53ae320957cb48c751b", "patch": "@@ -105,7 +105,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n-        ptr.with_tag(M::tag_static_base_pointer(ptr.alloc_id, &self.extra))\n+        ptr.with_tag(M::tag_static_base_pointer(ptr.alloc_id, &self))\n     }\n \n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer<M::PointerTag> {\n@@ -138,7 +138,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        let (alloc, tag) = M::tag_allocation(id, Cow::Owned(alloc), Some(kind), &self.extra);\n+        let (alloc, tag) = M::tag_allocation(id, Cow::Owned(alloc), Some(kind), &self);\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n         Pointer::from(id).with_tag(tag)\n     }\n@@ -325,7 +325,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     fn get_static_alloc(\n         id: AllocId,\n         tcx: TyCtxtAt<'tcx>,\n-        memory_extra: &M::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let alloc = match alloc {\n@@ -372,7 +372,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             alloc,\n             M::STATIC_KIND.map(MemoryKind::Machine),\n-            memory_extra\n+            memory\n         ).0)\n     }\n \n@@ -385,7 +385,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // `get_static_alloc` that we can actually use directly without inserting anything anywhere.\n         // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.\n         let a = self.alloc_map.get_or(id, || {\n-            let alloc = Self::get_static_alloc(id, self.tcx, &self.extra).map_err(Err)?;\n+            let alloc = Self::get_static_alloc(id, self.tcx, &self).map_err(Err)?;\n             match alloc {\n                 Cow::Borrowed(alloc) => {\n                     // We got a ref, cheaply return that as an \"error\" so that the\n@@ -414,11 +414,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n     ) -> InterpResult<'tcx, &mut Allocation<M::PointerTag, M::AllocExtra>> {\n         let tcx = self.tcx;\n-        let memory_extra = &self.extra;\n+        let alloc = Self::get_static_alloc(id, tcx, &self);\n         let a = self.alloc_map.get_mut_or(id, || {\n             // Need to make a copy, even if `get_static_alloc` is able\n             // to give us a cheap reference.\n-            let alloc = Self::get_static_alloc(id, tcx, memory_extra)?;\n+            let alloc = alloc?;\n             if alloc.mutability == Mutability::Immutable {\n                 return err!(ModifiedConstantMemory);\n             }"}]}