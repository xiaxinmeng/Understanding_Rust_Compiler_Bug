{"sha": "8494368d568da3303179cf2d523fc673067540d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTQzNjhkNTY4ZGEzMzAzMTc5Y2YyZDUyM2ZjNjczMDY3NTQwZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T23:29:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T23:29:17Z"}, "message": "rollup merge of #18447 : nick29581/dst-impl3", "tree": {"sha": "89a99b8e5a95713f51764ca98f84532047c7c46c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a99b8e5a95713f51764ca98f84532047c7c46c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8494368d568da3303179cf2d523fc673067540d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8494368d568da3303179cf2d523fc673067540d4", "html_url": "https://github.com/rust-lang/rust/commit/8494368d568da3303179cf2d523fc673067540d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8494368d568da3303179cf2d523fc673067540d4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "html_url": "https://github.com/rust-lang/rust/commit/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32"}, {"sha": "f9e52fb34c55a417b289fb39dc2254c09a95226d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e52fb34c55a417b289fb39dc2254c09a95226d", "html_url": "https://github.com/rust-lang/rust/commit/f9e52fb34c55a417b289fb39dc2254c09a95226d"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "3ac8ae1b0f42018c7104b2c4ea2b24b991f7915a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -627,7 +627,10 @@ impl NameBindings {\n                      sp: Span) {\n         // Merges the module with the existing type def or creates a new one.\n         let modifiers = if is_public { PUBLIC } else { DefModifiers::empty() } | IMPORTABLE;\n-        let module_ = Rc::new(Module::new(parent_link, def_id, kind, external,\n+        let module_ = Rc::new(Module::new(parent_link,\n+                                          def_id,\n+                                          kind,\n+                                          external,\n                                           is_public));\n         let type_def = self.type_def.borrow().clone();\n         match type_def {\n@@ -1372,6 +1375,8 @@ impl<'a> Resolver<'a> {\n                 // Create the module and add all methods.\n                 match ty.node {\n                     TyPath(ref path, _, _) if path.segments.len() == 1 => {\n+                        // FIXME(18446) we should distinguish between the name of\n+                        // a trait and the name of an impl of that trait.\n                         let mod_name = path.segments.last().unwrap().identifier.name;\n \n                         let parent_opt = parent.module().children.borrow()\n@@ -1380,8 +1385,8 @@ impl<'a> Resolver<'a> {\n                             // It already exists\n                             Some(ref child) if child.get_module_if_available()\n                                                 .is_some() &&\n-                                           child.get_module().kind.get() ==\n-                                                ImplModuleKind => {\n+                                           (child.get_module().kind.get() == ImplModuleKind ||\n+                                            child.get_module().kind.get() == TraitModuleKind) => {\n                                 ModuleReducedGraphParent(child.get_module())\n                             }\n                             Some(ref child) if child.get_module_if_available()"}, {"sha": "9d0df263849c119faebbe9cd5735654790930a0b", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -514,7 +514,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // and `Rc<Baz>`. (Note that it is not a *coherence violation*\n         // to have impls for both `Bar` and `Baz`, despite this\n         // ambiguity).  In this case, we report an error, listing all\n-        // the applicable impls.  The use can explicitly \"up-coerce\"\n+        // the applicable impls.  The user can explicitly \"up-coerce\"\n         // to the type they want.\n         //\n         // Note that this coercion step only considers actual impls\n@@ -1942,7 +1942,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn all_impls(&self, trait_def_id: ast::DefId) -> Vec<ast::DefId> {\n         /*!\n-         * Returns se tof all impls for a given trait.\n+         * Returns set of all impls for a given trait.\n          */\n \n         ty::populate_implementations_for_trait_if_necessary(self.tcx(),"}, {"sha": "ac18f53de046599cc8ac9651e4c5a6e6ef3812ca", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -207,8 +207,8 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         let impl_items = self.create_impl_from_item(item);\n \n         for associated_trait in associated_traits.iter() {\n-            let trait_ref = ty::node_id_to_trait_ref(\n-                self.crate_context.tcx, associated_trait.ref_id);\n+            let trait_ref = ty::node_id_to_trait_ref(self.crate_context.tcx,\n+                                                     associated_trait.ref_id);\n             debug!(\"(checking implementation) adding impl for trait '{}', item '{}'\",\n                    trait_ref.repr(self.crate_context.tcx),\n                    token::get_ident(item.ident));"}, {"sha": "3c4ad3473610cfd0509a956a6bba4b053ee7fa90", "filename": "src/librustc/middle/typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -41,7 +41,8 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n                 match ty::get(self_ty).sty {\n                     ty::ty_enum(def_id, _) |\n-                    ty::ty_struct(def_id, _) => {\n+                    ty::ty_struct(def_id, _) |\n+                    ty::ty_trait(box ty::TyTrait{ def_id, ..}) => {\n                         if def_id.krate != ast::LOCAL_CRATE {\n                             span_err!(self.tcx.sess, item.span, E0116,\n                                       \"cannot associate methods with a type outside the \\"}, {"sha": "5e2ebc3e620d631c5c3e951952ae8e625d1de8ff", "filename": "src/test/compile-fail/trait-impl-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test calling methods on an impl for a bare trait. This test checks that the\n+// trait impl is only applied to a trait object, not concrete types which implement\n+// the trait.\n+\n+trait T {}\n+\n+impl<'a> T+'a {\n+    fn foo(&self) {}\n+}\n+\n+impl T for int {}\n+\n+fn main() {\n+    let x = &42i;\n+    x.foo(); //~ERROR: type `&int` does not implement any method in scope named `foo`\n+}"}, {"sha": "303e3d937444d48612ce38b788e1f3168f20facb", "filename": "src/test/compile-fail/trait-impl-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Fcompile-fail%2Ftrait-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Fcompile-fail%2Ftrait-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-2.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test calling methods on an impl for a bare trait. This test checks trait impls\n+// must be in the same module as the trait.\n+\n+mod Foo {\n+    trait T {}\n+}\n+\n+mod Bar {\n+    impl<'a> ::Foo::T+'a { //~ERROR: inherent implementations may only be implemented in the same\n+        fn foo(&self) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "216a7ef33f54ce00ff9bfb71a996420947a95c26", "filename": "src/test/run-pass/trait-impl.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494368d568da3303179cf2d523fc673067540d4/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-impl.rs?ref=8494368d568da3303179cf2d523fc673067540d4", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test calling methods on an impl for a bare trait.\n+\n+static mut COUNT: uint = 1;\n+\n+trait T {}\n+\n+impl<'a> T+'a {\n+    fn foo(&self) {\n+        unsafe { COUNT *= 2; }\n+    }\n+    fn bar() {\n+        unsafe { COUNT *= 3; }\n+    }\n+}\n+\n+impl T for int {}\n+\n+fn main() {\n+    let x: &T = &42i;\n+\n+    x.foo();\n+    T::foo(x);\n+    T::bar();\n+\n+    unsafe { assert!(COUNT == 12); }\n+}"}]}