{"sha": "9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDIxNzdkODZmN2Q4MGRiZDZjZTIzYWIwMDljZDNkYzcxNjQ5MmM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:22:34Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from rustc_infer", "tree": {"sha": "660092e9500dfbf6a03429a94a8443a5d7ef868c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660092e9500dfbf6a03429a94a8443a5d7ef868c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "html_url": "https://github.com/rust-lang/rust/commit/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6897619d6d7c530d071cb8587d12c5de3353aa75", "url": "https://api.github.com/repos/rust-lang/rust/commits/6897619d6d7c530d071cb8587d12c5de3353aa75", "html_url": "https://github.com/rust-lang/rust/commit/6897619d6d7c530d071cb8587d12c5de3353aa75"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "ff7bbf0562f605ddef2734bc25b6420d8afc97da", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "patch": "@@ -113,13 +113,6 @@ impl Default for RegionckMode {\n }\n \n impl RegionckMode {\n-    pub fn suppressed(self) -> bool {\n-        match self {\n-            Self::Solve => false,\n-            Self::Erase { suppress_errors } => suppress_errors,\n-        }\n-    }\n-\n     /// Indicates that the MIR borrowck will repeat these region\n     /// checks, so we should ignore errors if NLL is (unconditionally)\n     /// enabled.\n@@ -420,15 +413,6 @@ pub enum SubregionOrigin<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n-/// Places that type/region parameters can appear.\n-#[derive(Clone, Copy, Debug)]\n-pub enum ParameterOrigin {\n-    Path,               // foo::bar\n-    MethodCall,         // foo.bar() <-- parameters on impl providing bar()\n-    OverloadedOperator, // a + b when overloaded\n-    OverloadedDeref,    // *a when overloaded\n-}\n-\n /// Times when we replace late-bound regions with variables:\n #[derive(Clone, Copy, Debug)]\n pub enum LateBoundRegionConversionTime {\n@@ -508,21 +492,6 @@ pub enum NLLRegionVariableOrigin {\n     },\n }\n \n-impl NLLRegionVariableOrigin {\n-    pub fn is_universal(self) -> bool {\n-        match self {\n-            NLLRegionVariableOrigin::FreeRegion => true,\n-            NLLRegionVariableOrigin::Placeholder(..) => true,\n-            NLLRegionVariableOrigin::Existential { .. } => false,\n-            NLLRegionVariableOrigin::RootEmptyRegion => false,\n-        }\n-    }\n-\n-    pub fn is_existential(self) -> bool {\n-        !self.is_universal()\n-    }\n-}\n-\n // FIXME(eddyb) investigate overlap between this and `TyOrConstInferVar`.\n #[derive(Copy, Clone, Debug)]\n pub enum FixupError<'tcx> {"}, {"sha": "2fb9f638e360833ffe8ba2ad4614800b73ba1c49", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "patch": "@@ -28,7 +28,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use std::fmt::Debug;\n \n@@ -119,12 +118,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n     fn forbid_inference_vars() -> bool;\n }\n \n-#[derive(Clone, Debug)]\n-struct ScopesAndKind<'tcx> {\n-    scopes: Vec<BoundRegionScope<'tcx>>,\n-    kind: GenericArg<'tcx>,\n-}\n-\n #[derive(Clone, Debug, Default)]\n struct BoundRegionScope<'tcx> {\n     map: FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,"}, {"sha": "aaf5e958c269d783658fcfd3914147f4eaca9c93", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "patch": "@@ -59,9 +59,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(PredicateObligation<'_>, 32);\n \n-pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;\n-pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n \n pub type Selection<'tcx> = ImplSource<'tcx, PredicateObligation<'tcx>>;\n "}]}