{"sha": "c82af09bb0fb78379cf3b525d22f902b3139217f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmFmMDliYjBmYjc4Mzc5Y2YzYjUyNWQyMmY5MDJiMzEzOTIxN2Y=", "commit": {"author": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-09-05T21:47:10Z"}, "committer": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-09-05T21:47:10Z"}, "message": "Add comment.", "tree": {"sha": "911d336052a33084b0e9d0d086a923d9f10115e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911d336052a33084b0e9d0d086a923d9f10115e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82af09bb0fb78379cf3b525d22f902b3139217f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQB1BAAWCAAdFiEEcsU1MS52w+AyCfaTF0Yl5eh3wNkFAluQTxoACgkQF0Yl5eh3wNkfEwD/aHji\nI3BaNg5/HLeBmNbCQDPFhbRS0kwZ6P9deOGhQ9UBAJdDd05EPeEu6sV8403eRxK6Vf7IFuysTeWH\npq61CfsD\n=QgXw\n-----END PGP SIGNATURE-----\n", "payload": "tree 911d336052a33084b0e9d0d086a923d9f10115e4\nparent 9ff29d6188bf18451876715dcf215ca73452133a\nauthor Without Boats <boats@mozilla.com> 1536184030 +0200\ncommitter Without Boats <boats@mozilla.com> 1536184030 +0200\n\nAdd comment.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82af09bb0fb78379cf3b525d22f902b3139217f", "html_url": "https://github.com/rust-lang/rust/commit/c82af09bb0fb78379cf3b525d22f902b3139217f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82af09bb0fb78379cf3b525d22f902b3139217f/comments", "author": null, "committer": null, "parents": [{"sha": "9ff29d6188bf18451876715dcf215ca73452133a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff29d6188bf18451876715dcf215ca73452133a", "html_url": "https://github.com/rust-lang/rust/commit/9ff29d6188bf18451876715dcf215ca73452133a"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "aeed139ebb76027dc5b0d08fa81fb5897dbab6c6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c82af09bb0fb78379cf3b525d22f902b3139217f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82af09bb0fb78379cf3b525d22f902b3139217f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c82af09bb0fb78379cf3b525d22f902b3139217f", "patch": "@@ -749,6 +749,28 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n     }\n }\n \n+/* Nota bene\n+ *\n+ *  We could have chosen not to add this impl, and instead have written a \n+ *  function of Pin<Box<T>> to Pin<T>. Such a function would not be sound,\n+ *  because Box<T> implements Unpin even when T does not, as a result of\n+ *  this impl.\n+ *\n+ *  We chose this API instead of the alternative for a few reasons:\n+ *      - Logically, it is helpful to understand pinning in regard to the\n+ *        memory region being pointed to. For this reason none of the\n+ *        standard library pointer types support projecting through a pin\n+ *        (Box<T> is the only pointer type in std for which this would be\n+ *        safe.)\n+ *      - It is in practive very useful to have Box<T> be unconditionally\n+ *        Unpin because of trait objects, for which the structural auto\n+ *        trait functionality does not apply (e.g. Box<dyn Foo> would\n+ *        otherwise not be Unpin).\n+ *\n+ *  Another type with the same semantics as Box but only a conditional\n+ *  implementation of `Unpin` (where `T: Unpin`) would be valid/safe, and\n+ *  could have a method to project a Pin<T> from it.\n+ */\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> Unpin for Box<T> { }\n "}]}