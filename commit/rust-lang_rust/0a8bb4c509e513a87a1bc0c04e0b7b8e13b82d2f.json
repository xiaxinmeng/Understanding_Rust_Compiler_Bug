{"sha": "0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGJiNGM1MDllNTEzYTg3YTFiYzBjMDRlMGI3YjhlMTNiODJkMmY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-11-24T22:00:26Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:22:40Z"}, "message": "split the metadata code into rustc_metadata\n\ntests & rustdoc still broken", "tree": {"sha": "ac16b45ccda05e01d32fa44377add76aa716325b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac16b45ccda05e01d32fa44377add76aa716325b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "html_url": "https://github.com/rust-lang/rust/commit/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1430a3500076ad504a0b30be77fd2ad4468ea769", "url": "https://api.github.com/repos/rust-lang/rust/commits/1430a3500076ad504a0b30be77fd2ad4468ea769", "html_url": "https://github.com/rust-lang/rust/commit/1430a3500076ad504a0b30be77fd2ad4468ea769"}], "stats": {"total": 1537, "additions": 629, "deletions": 908}, "files": [{"sha": "8ce0a41d9786c01c3eee35a481c71cc2b0574118", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -57,7 +57,7 @@ TARGET_CRATES := libc std flate arena term \\\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_front rustc_platform_intrinsics \\\n-                rustc_plugin\n+                rustc_plugin rustc_metadata\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n@@ -88,22 +88,23 @@ DEPS_test := std getopts serialize rbml term native:rust_test_helpers\n \n DEPS_syntax := std term serialize log fmt_macros arena libc rustc_bitflags\n \n-DEPS_rustc := syntax flate arena serialize getopts rbml rustc_front\\\n+DEPS_rustc := syntax flate arena serialize getopts rustc_front\\\n               log graphviz rustc_llvm rustc_back rustc_data_structures\n DEPS_rustc_back := std syntax rustc_llvm rustc_front flate log libc\n DEPS_rustc_borrowck := rustc rustc_front log graphviz syntax\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n-\t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin\n-\n+\t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin \\\n+                     rustc_metadata\n DEPS_rustc_front := std syntax log serialize\n DEPS_rustc_lint := rustc log syntax\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n+DEPS_rustc_metadata := rustc rustc_front syntax rbml\n DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n-DEPS_rustc_plugin := rustc syntax\n+DEPS_rustc_plugin := rustc rustc_metadata syntax\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n                     log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics"}, {"sha": "b4e188c498d7409e0d98d027b0481260b5ff4acd", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -1899,51 +1899,6 @@ contain references (with a maximum lifetime of `'a`).\n [1]: https://github.com/rust-lang/rfcs/pull/1156\n \"##,\n \n-E0454: r##\"\n-A link name was given with an empty name. Erroneous code example:\n-\n-```\n-#[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n-```\n-\n-The rust compiler cannot link to an external library if you don't give it its\n-name. Example:\n-\n-```\n-#[link(name = \"some_lib\")] extern {} // ok!\n-```\n-\"##,\n-\n-E0458: r##\"\n-An unknown \"kind\" was specified for a link attribute. Erroneous code example:\n-\n-```\n-#[link(kind = \"wonderful_unicorn\")] extern {}\n-// error: unknown kind: `wonderful_unicorn`\n-```\n-\n-Please specify a valid \"kind\" value, from one of the following:\n- * static\n- * dylib\n- * framework\n-\"##,\n-\n-E0459: r##\"\n-A link was used without a name parameter. Erroneous code example:\n-\n-```\n-#[link(kind = \"dylib\")] extern {}\n-// error: #[link(...)] specified without `name = \"foo\"`\n-```\n-\n-Please add the name parameter to allow the rust compiler to find the library\n-you want. Example:\n-\n-```\n-#[link(kind = \"dylib\", name = \"some_lib\")] extern {} // ok!\n-```\n-\"##,\n-\n E0493: r##\"\n A type with a destructor was assigned to an invalid type of variable. Erroneous\n code example:\n@@ -2144,20 +2099,6 @@ register_diagnostics! {\n     E0400, // overloaded derefs are not allowed in constants\n     E0452, // malformed lint attribute\n     E0453, // overruled by outer forbid\n-    E0455, // native frameworks are only available on OSX targets\n-    E0456, // plugin `..` is not available for triple `..`\n-    E0457, // plugin `..` only found in rlib format, but must be available...\n-    E0460, // found possibly newer version of crate `..`\n-    E0461, // couldn't find crate `..` with expected target triple ..\n-    E0462, // found staticlib `..` instead of rlib or dylib\n-    E0463, // can't find crate for `..`\n-    E0464, // multiple matching crates for `..`\n-    E0465, // multiple .. candidates for `..` found\n-    E0466, // bad macro import\n-    E0467, // bad macro reexport\n-    E0468, // an `extern crate` loading macros must be at the crate root\n-    E0469, // imported macro not found\n-    E0470, // reexported macro not found\n     E0471, // constant evaluation error: ..\n     E0472, // asm! is unsupported on this target\n     E0473, // dereference of reference outside its lifetime\n@@ -2181,5 +2122,4 @@ register_diagnostics! {\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0492, // cannot borrow a constant which contains interior mutability\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0514, // metadata version mismatch\n }"}, {"sha": "0f0d59e70b0b8985c42c34d1be294b36f5c8fd93", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def_id::{DefId, DefIndex};\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir;"}, {"sha": "8c3da2cddd5610391a8497dc8d5152ec42903884", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -14,8 +14,8 @@ use self::MapEntry::*;\n use self::collector::NodeCollector;\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData, DisambiguatedDefPathData};\n \n-use metadata::inline::InlinedItem;\n-use metadata::inline::InlinedItem as II;\n+use middle::cstore::InlinedItem;\n+use middle::cstore::InlinedItem as II;\n use middle::def_id::DefId;\n \n use syntax::abi;"}, {"sha": "6da4f174e3e0942f44fd0b6357d4e67faf2f311c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -67,7 +67,6 @@ extern crate rustc_back;\n extern crate rustc_front;\n extern crate rustc_data_structures;\n extern crate serialize;\n-extern crate rbml;\n extern crate collections;\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n@@ -101,7 +100,6 @@ pub mod front {\n pub mod middle {\n     pub mod astconv_util;\n     pub mod expr_use_visitor; // STAGE0: increase glitch immunity\n-    pub mod astencode;\n     pub mod cfg;\n     pub mod check_const;\n     pub mod check_static_recursion;\n@@ -110,6 +108,7 @@ pub mod middle {\n     pub mod check_no_asm;\n     pub mod check_rvalues;\n     pub mod const_eval;\n+    pub mod cstore;\n     pub mod dataflow;\n     pub mod dead;\n     pub mod def;\n@@ -137,8 +136,6 @@ pub mod middle {\n     pub mod weak_lang_items;\n }\n \n-pub mod metadata;\n-\n pub mod session;\n \n pub mod lint;"}, {"sha": "40159b24fe71d0cca6804f55510421f63bec51c4", "filename": "src/librustc/metadata/csearch.rs", "status": "removed", "additions": 0, "deletions": 408, "changes": 408, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -1,408 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Searching for information from the cstore\n-\n-use front::map as ast_map;\n-use metadata::cstore;\n-use metadata::decoder;\n-use metadata::inline::InlinedItem;\n-use middle::def_id::{DefId, DefIndex};\n-use middle::lang_items;\n-use middle::ty;\n-use util::nodemap::FnvHashMap;\n-\n-use std::rc::Rc;\n-use syntax::ast;\n-use syntax::attr;\n-use rustc_front::hir;\n-\n-#[derive(Copy, Clone)]\n-pub struct MethodInfo {\n-    pub name: ast::Name,\n-    pub def_id: DefId,\n-    pub vis: hir::Visibility,\n-}\n-\n-pub fn get_symbol(cstore: &cstore::CStore, def: DefId) -> String {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_symbol(&cdata, def.index)\n-}\n-\n-/// Iterates over all the language items in the given crate.\n-pub fn each_lang_item<F>(cstore: &cstore::CStore,\n-                         cnum: ast::CrateNum,\n-                         f: F)\n-                         -> bool where\n-    F: FnMut(DefIndex, usize) -> bool,\n-{\n-    let crate_data = cstore.get_crate_data(cnum);\n-    decoder::each_lang_item(&*crate_data, f)\n-}\n-\n-/// Iterates over each child of the given item.\n-pub fn each_child_of_item<F>(cstore: &cstore::CStore,\n-                             def_id: DefId,\n-                             callback: F) where\n-    F: FnMut(decoder::DefLike, ast::Name, hir::Visibility),\n-{\n-    let crate_data = cstore.get_crate_data(def_id.krate);\n-    let get_crate_data = |cnum| {\n-        cstore.get_crate_data(cnum)\n-    };\n-    decoder::each_child_of_item(cstore.intr.clone(),\n-                                &*crate_data,\n-                                def_id.index,\n-                                get_crate_data,\n-                                callback)\n-}\n-\n-/// Iterates over each top-level crate item.\n-pub fn each_top_level_item_of_crate<F>(cstore: &cstore::CStore,\n-                                       cnum: ast::CrateNum,\n-                                       callback: F) where\n-    F: FnMut(decoder::DefLike, ast::Name, hir::Visibility),\n-{\n-    let crate_data = cstore.get_crate_data(cnum);\n-    let get_crate_data = |cnum| {\n-        cstore.get_crate_data(cnum)\n-    };\n-    decoder::each_top_level_item_of_crate(cstore.intr.clone(),\n-                                          &*crate_data,\n-                                          get_crate_data,\n-                                          callback)\n-}\n-\n-pub fn get_item_path(tcx: &ty::ctxt, def: DefId) -> Vec<ast_map::PathElem> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    let path = decoder::get_item_path(&*cdata, def.index);\n-\n-    cdata.with_local_path(|cpath| {\n-        let mut r = Vec::with_capacity(cpath.len() + path.len());\n-        r.push_all(cpath);\n-        r.push_all(&path);\n-        r\n-    })\n-}\n-\n-pub fn get_item_name(tcx: &ty::ctxt, def: DefId) -> ast::Name {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_item_name(&cstore.intr, &cdata, def.index)\n-}\n-\n-pub enum FoundAst<'ast> {\n-    Found(&'ast InlinedItem),\n-    FoundParent(DefId, &'ast InlinedItem),\n-    NotFound,\n-}\n-\n-// Finds the AST for this item in the crate metadata, if any.  If the item was\n-// not marked for inlining, then the AST will not be present and hence none\n-// will be returned.\n-pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId,\n-                                decode_inlined_item: decoder::DecodeInlinedItem)\n-                                -> FoundAst<'tcx> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::maybe_get_item_ast(&*cdata, tcx, def.index, decode_inlined_item)\n-}\n-\n-/// Returns information about the given implementation.\n-pub fn get_impl_items(cstore: &cstore::CStore, impl_def_id: DefId)\n-                      -> Vec<ty::ImplOrTraitItemId> {\n-    let cdata = cstore.get_crate_data(impl_def_id.krate);\n-    decoder::get_impl_items(&*cdata, impl_def_id.index)\n-}\n-\n-pub fn get_impl_or_trait_item<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId)\n-                                    -> ty::ImplOrTraitItem<'tcx> {\n-    let cdata = tcx.sess.cstore.get_crate_data(def.krate);\n-    decoder::get_impl_or_trait_item(tcx.sess.cstore.intr.clone(),\n-                                    &*cdata,\n-                                    def.index,\n-                                    tcx)\n-}\n-\n-pub fn get_trait_name(cstore: &cstore::CStore, def: DefId) -> ast::Name {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_trait_name(cstore.intr.clone(),\n-                            &*cdata,\n-                            def.index)\n-}\n-\n-pub fn is_static_method(cstore: &cstore::CStore, def: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::is_static_method(&*cdata, def.index)\n-}\n-\n-pub fn get_trait_item_def_ids(cstore: &cstore::CStore, def: DefId)\n-                              -> Vec<ty::ImplOrTraitItemId> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_trait_item_def_ids(&*cdata, def.index)\n-}\n-\n-pub fn get_item_variances(cstore: &cstore::CStore,\n-                          def: DefId) -> ty::ItemVariances {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_item_variances(&*cdata, def.index)\n-}\n-\n-pub fn get_provided_trait_methods<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                        def: DefId)\n-                                        -> Vec<Rc<ty::Method<'tcx>>> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_provided_trait_methods(cstore.intr.clone(), &*cdata, def.index, tcx)\n-}\n-\n-pub fn get_associated_consts<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId)\n-                                   -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_associated_consts(cstore.intr.clone(), &*cdata, def.index, tcx)\n-}\n-\n-pub fn get_methods_if_impl(cstore: &cstore::CStore,\n-                                  def: DefId)\n-                               -> Option<Vec<MethodInfo> > {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_methods_if_impl(cstore.intr.clone(), &*cdata, def.index)\n-}\n-\n-pub fn get_item_attrs(cstore: &cstore::CStore,\n-                      def_id: DefId)\n-                      -> Vec<ast::Attribute> {\n-    let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::get_item_attrs(&*cdata, def_id.index)\n-}\n-\n-pub fn get_struct_field_names(cstore: &cstore::CStore, def: DefId) -> Vec<ast::Name> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_struct_field_names(&cstore.intr, &*cdata, def.index)\n-}\n-\n-pub fn get_struct_field_attrs(cstore: &cstore::CStore, def: DefId)\n-                              -> FnvHashMap<DefId, Vec<ast::Attribute>> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_struct_field_attrs(&*cdata)\n-}\n-\n-pub fn get_type<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                      def: DefId)\n-                      -> ty::TypeScheme<'tcx> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_type(&*cdata, def.index, tcx)\n-}\n-\n-pub fn get_trait_def<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::TraitDef<'tcx> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_trait_def(&*cdata, def.index, tcx)\n-}\n-\n-pub fn get_adt_def<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_adt_def(&cstore.intr, &*cdata, def.index, tcx)\n-}\n-\n-pub fn get_predicates<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId)\n-                            -> ty::GenericPredicates<'tcx>\n-{\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_predicates(&*cdata, def.index, tcx)\n-}\n-\n-pub fn get_super_predicates<'tcx>(tcx: &ty::ctxt<'tcx>, def: DefId)\n-                                  -> ty::GenericPredicates<'tcx>\n-{\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_super_predicates(&*cdata, def.index, tcx)\n-}\n-\n-pub fn get_impl_polarity<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                               def: DefId)\n-                               -> Option<hir::ImplPolarity>\n-{\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_impl_polarity(&*cdata, def.index)\n-}\n-\n-pub fn get_custom_coerce_unsized_kind<'tcx>(\n-    tcx: &ty::ctxt<'tcx>,\n-    def: DefId)\n-    -> Option<ty::adjustment::CustomCoerceUnsized>\n-{\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_custom_coerce_unsized_kind(&*cdata, def.index)\n-}\n-\n-// Given a def_id for an impl, return the trait it implements,\n-// if there is one.\n-pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                            def: DefId)\n-                            -> Option<ty::TraitRef<'tcx>> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_impl_trait(&*cdata, def.index, tcx)\n-}\n-\n-pub fn get_native_libraries(cstore: &cstore::CStore, crate_num: ast::CrateNum)\n-                            -> Vec<(cstore::NativeLibraryKind, String)> {\n-    let cdata = cstore.get_crate_data(crate_num);\n-    decoder::get_native_libraries(&*cdata)\n-}\n-\n-pub fn each_inherent_implementation_for_type<F>(cstore: &cstore::CStore,\n-                                                def_id: DefId,\n-                                                callback: F) where\n-    F: FnMut(DefId),\n-{\n-    let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::each_inherent_implementation_for_type(&*cdata, def_id.index, callback)\n-}\n-\n-pub fn each_implementation_for_trait<F>(cstore: &cstore::CStore,\n-                                        def_id: DefId,\n-                                        mut callback: F) where\n-    F: FnMut(DefId),\n-{\n-    cstore.iter_crate_data(|_, cdata| {\n-        decoder::each_implementation_for_trait(cdata, def_id, &mut callback)\n-    })\n-}\n-\n-/// If the given def ID describes an item belonging to a trait (either a\n-/// default method or an implementation of a trait method), returns the ID of\n-/// the trait that the method belongs to. Otherwise, returns `None`.\n-pub fn get_trait_of_item(cstore: &cstore::CStore,\n-                         def_id: DefId,\n-                         tcx: &ty::ctxt)\n-                         -> Option<DefId> {\n-    let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::get_trait_of_item(&*cdata, def_id.index, tcx)\n-}\n-\n-pub fn get_tuple_struct_definition_if_ctor(cstore: &cstore::CStore,\n-                                           def_id: DefId)\n-    -> Option<DefId>\n-{\n-    let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::get_tuple_struct_definition_if_ctor(&*cdata, def_id.index)\n-}\n-\n-pub fn get_dylib_dependency_formats(cstore: &cstore::CStore,\n-                                    cnum: ast::CrateNum)\n-    -> Vec<(ast::CrateNum, cstore::LinkagePreference)>\n-{\n-    let cdata = cstore.get_crate_data(cnum);\n-    decoder::get_dylib_dependency_formats(&*cdata)\n-}\n-\n-pub fn get_missing_lang_items(cstore: &cstore::CStore, cnum: ast::CrateNum)\n-    -> Vec<lang_items::LangItem>\n-{\n-    let cdata = cstore.get_crate_data(cnum);\n-    decoder::get_missing_lang_items(&*cdata)\n-}\n-\n-pub fn get_method_arg_names(cstore: &cstore::CStore, did: DefId)\n-    -> Vec<String>\n-{\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::get_method_arg_names(&*cdata, did.index)\n-}\n-\n-pub fn get_reachable_ids(cstore: &cstore::CStore, cnum: ast::CrateNum)\n-    -> Vec<DefId>\n-{\n-    let cdata = cstore.get_crate_data(cnum);\n-    decoder::get_reachable_ids(&*cdata)\n-}\n-\n-pub fn is_typedef(cstore: &cstore::CStore, did: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::is_typedef(&*cdata, did.index)\n-}\n-\n-pub fn is_const_fn(cstore: &cstore::CStore, did: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::is_const_fn(&*cdata, did.index)\n-}\n-\n-pub fn is_static(cstore: &cstore::CStore, did: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::is_static(&*cdata, did.index)\n-}\n-\n-pub fn is_impl(cstore: &cstore::CStore, did: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::is_impl(&*cdata, did.index)\n-}\n-\n-pub fn get_stability(cstore: &cstore::CStore,\n-                     def: DefId)\n-                     -> Option<attr::Stability> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_stability(&*cdata, def.index)\n-}\n-\n-pub fn is_staged_api(cstore: &cstore::CStore, krate: ast::CrateNum) -> bool {\n-    cstore.get_crate_data(krate).staged_api\n-}\n-\n-pub fn get_repr_attrs(cstore: &cstore::CStore, def: DefId)\n-                      -> Vec<attr::ReprAttr> {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_repr_attrs(&*cdata, def.index)\n-}\n-\n-pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(trait_def_id.krate);\n-    decoder::is_defaulted_trait(&*cdata, trait_def_id.index)\n-}\n-\n-pub fn is_default_impl(cstore: &cstore::CStore, impl_did: DefId) -> bool {\n-    let cdata = cstore.get_crate_data(impl_did.krate);\n-    decoder::is_default_impl(&*cdata, impl_did.index)\n-}\n-\n-pub fn is_extern_fn(cstore: &cstore::CStore, did: DefId,\n-                    tcx: &ty::ctxt) -> bool {\n-    let cdata = cstore.get_crate_data(did.krate);\n-    decoder::is_extern_fn(&*cdata, did.index, tcx)\n-}\n-\n-pub fn closure_kind<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureKind {\n-    assert!(!def_id.is_local());\n-    let cdata = tcx.sess.cstore.get_crate_data(def_id.krate);\n-    decoder::closure_kind(&*cdata, def_id.index)\n-}\n-\n-pub fn closure_ty<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx> {\n-    assert!(!def_id.is_local());\n-    let cdata = tcx.sess.cstore.get_crate_data(def_id.krate);\n-    decoder::closure_ty(&*cdata, def_id.index, tcx)\n-}\n-\n-pub fn def_path(tcx: &ty::ctxt, def: DefId) -> ast_map::DefPath {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    let path = decoder::def_path(&*cdata, def.index);\n-    let local_path = cdata.local_def_path();\n-    local_path.into_iter().chain(path).collect()\n-}"}, {"sha": "e621a4166d719ae0d6385d46b97eac09d253505d", "filename": "src/librustc/metadata/inline.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Finline.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use middle::def_id::DefId;\n-use rustc_front::hir;\n-use rustc_front::util::IdVisitor;\n-use syntax::ast_util::{IdRange, IdRangeComputingVisitor, IdVisitingOperation};\n-use syntax::ptr::P;\n-use rustc_front::intravisit::Visitor;\n-use self::InlinedItem::*;\n-\n-/// The data we save and restore about an inlined item or method.  This is not\n-/// part of the AST that we parse from a file, but it becomes part of the tree\n-/// that we trans.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum InlinedItem {\n-    Item(P<hir::Item>),\n-    TraitItem(DefId /* impl id */, P<hir::TraitItem>),\n-    ImplItem(DefId /* impl id */, P<hir::ImplItem>),\n-    Foreign(P<hir::ForeignItem>),\n-}\n-\n-/// A borrowed version of `hir::InlinedItem`.\n-pub enum InlinedItemRef<'a> {\n-    Item(&'a hir::Item),\n-    TraitItem(DefId, &'a hir::TraitItem),\n-    ImplItem(DefId, &'a hir::ImplItem),\n-    Foreign(&'a hir::ForeignItem)\n-}\n-\n-impl InlinedItem {\n-    pub fn visit<'ast,V>(&'ast self, visitor: &mut V)\n-        where V: Visitor<'ast>\n-    {\n-        match *self {\n-            Item(ref i) => visitor.visit_item(&**i),\n-            Foreign(ref i) => visitor.visit_foreign_item(&**i),\n-            TraitItem(_, ref ti) => visitor.visit_trait_item(ti),\n-            ImplItem(_, ref ii) => visitor.visit_impl_item(ii),\n-        }\n-    }\n-\n-    pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) {\n-        let mut id_visitor = IdVisitor::new(operation);\n-        self.visit(&mut id_visitor);\n-    }\n-\n-    pub fn compute_id_range(&self) -> IdRange {\n-        let mut visitor = IdRangeComputingVisitor::new();\n-        self.visit_ids(&mut visitor);\n-        visitor.result()\n-    }\n-}"}, {"sha": "052ed81394b05cbca580fd379ab75dc39babfd6c", "filename": "src/librustc/metadata/mod.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fmetadata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmod.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub mod common;\n-pub mod tyencode;\n-pub mod tydecode;\n-pub mod encoder;\n-pub mod decoder;\n-pub mod creader;\n-pub mod cstore;\n-pub mod index;\n-pub mod loader;\n-pub mod filesearch;\n-pub mod macro_import;\n-pub mod inline;\n-pub mod util;"}, {"sha": "21ece8f381ebfb60a0d25e074c3f5891357af30c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -16,7 +16,7 @@ use self::EvalHint::*;\n \n use front::map as ast_map;\n use front::map::blocks::FnLikeNode;\n-use metadata::util::{self as mdutil, CrateStore, InlinedItem};\n+use middle::cstore::{self, CrateStore, InlinedItem};\n use middle::{def, infer, subst, traits};\n use middle::def_id::DefId;\n use middle::pat_util::def_to_path;\n@@ -145,11 +145,11 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n         }\n         let mut used_ref_id = false;\n         let expr_id = match tcx.sess.cstore.maybe_get_item_ast(tcx, def_id) {\n-            mdutil::FoundAst::Found(&InlinedItem::Item(ref item)) => match item.node {\n+            cstore::FoundAst::Found(&InlinedItem::Item(ref item)) => match item.node {\n                 hir::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None\n             },\n-            mdutil::FoundAst::Found(&InlinedItem::TraitItem(trait_id, ref ti)) => match ti.node {\n+            cstore::FoundAst::Found(&InlinedItem::TraitItem(trait_id, ref ti)) => match ti.node {\n                 hir::ConstTraitItem(_, _) => {\n                     used_ref_id = true;\n                     match maybe_ref_id {\n@@ -168,7 +168,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 }\n                 _ => None\n             },\n-            mdutil::FoundAst::Found(&InlinedItem::ImplItem(_, ref ii)) => match ii.node {\n+            cstore::FoundAst::Found(&InlinedItem::ImplItem(_, ref ii)) => match ii.node {\n                 hir::ImplItemKind::Const(_, ref expr) => Some(expr.id),\n                 _ => None\n             },\n@@ -200,8 +200,8 @@ fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: DefId)\n     }\n \n     let fn_id = match tcx.sess.cstore.maybe_get_item_ast(tcx, def_id) {\n-        mdutil::FoundAst::Found(&InlinedItem::Item(ref item)) => Some(item.id),\n-        mdutil::FoundAst::Found(&InlinedItem::ImplItem(_, ref item)) => Some(item.id),\n+        cstore::FoundAst::Found(&InlinedItem::Item(ref item)) => Some(item.id),\n+        cstore::FoundAst::Found(&InlinedItem::ImplItem(_, ref item)) => Some(item.id),\n         _ => None\n     };\n     tcx.extern_const_fns.borrow_mut().insert(def_id,"}, {"sha": "ee337f02ffc968a9a7b4173f26324b91092b32c0", "filename": "src/librustc/middle/cstore.rs", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -0,0 +1,277 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// the rustc crate store interface. This also includes types that\n+// are *mostly* used as a part of that interface, but these should\n+// probably get a better home if someone can find one.\n+\n+use back::svh::Svh;\n+use front::map as hir_map;\n+use middle::def;\n+use middle::lang_items;\n+use middle::ty::{self, Ty};\n+use middle::def_id::{DefId, DefIndex};\n+use session::Session;\n+use session::search_paths::PathKind;\n+use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use std::any::Any;\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::path::PathBuf;\n+use syntax::ast;\n+use syntax::ast_util::{IdVisitingOperation};\n+use syntax::attr;\n+use syntax::codemap::Span;\n+use syntax::ptr::P;\n+use rustc_back::target::Target;\n+use rustc_front::hir;\n+use rustc_front::visit::Visitor;\n+use rustc_front::util::IdVisitor;\n+\n+pub use self::DefLike::{DlDef, DlField, DlImpl};\n+pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n+\n+// lonely orphan structs and enums looking for a better home\n+\n+#[derive(Clone, Debug)]\n+pub struct LinkMeta {\n+    pub crate_name: String,\n+    pub crate_hash: Svh,\n+}\n+\n+// Where a crate came from on the local filesystem. One of these two options\n+// must be non-None.\n+#[derive(PartialEq, Clone, Debug)]\n+pub struct CrateSource {\n+    pub dylib: Option<(PathBuf, PathKind)>,\n+    pub rlib: Option<(PathBuf, PathKind)>,\n+    pub cnum: ast::CrateNum,\n+}\n+\n+#[derive(Copy, Debug, PartialEq, Clone)]\n+pub enum LinkagePreference {\n+    RequireDynamic,\n+    RequireStatic,\n+}\n+\n+enum_from_u32! {\n+    #[derive(Copy, Clone, PartialEq)]\n+    pub enum NativeLibraryKind {\n+        NativeStatic,    // native static library (.a archive)\n+        NativeFramework, // OSX-specific\n+        NativeUnknown,   // default way to specify a dynamic library\n+    }\n+}\n+\n+// Something that a name can resolve to.\n+#[derive(Copy, Clone, Debug)]\n+pub enum DefLike {\n+    DlDef(def::Def),\n+    DlImpl(DefId),\n+    DlField\n+}\n+\n+/// The data we save and restore about an inlined item or method.  This is not\n+/// part of the AST that we parse from a file, but it becomes part of the tree\n+/// that we trans.\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum InlinedItem {\n+    Item(P<hir::Item>),\n+    TraitItem(DefId /* impl id */, P<hir::TraitItem>),\n+    ImplItem(DefId /* impl id */, P<hir::ImplItem>),\n+    Foreign(P<hir::ForeignItem>),\n+}\n+\n+/// A borrowed version of `hir::InlinedItem`.\n+pub enum InlinedItemRef<'a> {\n+    Item(&'a hir::Item),\n+    TraitItem(DefId, &'a hir::TraitItem),\n+    ImplItem(DefId, &'a hir::ImplItem),\n+    Foreign(&'a hir::ForeignItem)\n+}\n+\n+/// Item definitions in the currently-compiled crate would have the CrateNum\n+/// LOCAL_CRATE in their DefId.\n+pub const LOCAL_CRATE: ast::CrateNum = 0;\n+\n+pub struct ChildItem {\n+    pub def: DefLike,\n+    pub name: ast::Name,\n+    pub vis: hir::Visibility\n+}\n+\n+pub enum FoundAst<'ast> {\n+    Found(&'ast InlinedItem),\n+    FoundParent(DefId, &'ast InlinedItem),\n+    NotFound,\n+}\n+\n+pub trait CrateStore<'tcx> : Any {\n+    // item info\n+    fn stability(&self, def: DefId) -> Option<attr::Stability>;\n+    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                    -> ty::ClosureKind;\n+    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                  -> ty::ClosureTy<'tcx>;\n+    fn item_variances(&self, def: DefId) -> ty::ItemVariances;\n+    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr>;\n+    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                 -> ty::TypeScheme<'tcx>;\n+    fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n+    fn item_name(&self, def: DefId) -> ast::Name;\n+    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                       -> ty::GenericPredicates<'tcx>;\n+    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                             -> ty::GenericPredicates<'tcx>;\n+    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n+    fn item_symbol(&self, def: DefId) -> String;\n+    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>;\n+    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;\n+    fn method_arg_names(&self, did: DefId) -> Vec<String>;\n+    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;\n+\n+    // trait info\n+    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>;\n+    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                              -> Vec<Rc<ty::Method<'tcx>>>;\n+    fn trait_item_def_ids(&self, def: DefId)\n+                          -> Vec<ty::ImplOrTraitItemId>;\n+\n+    // impl info\n+    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>;\n+    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                      -> Option<ty::TraitRef<'tcx>>;\n+    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>;\n+    fn custom_coerce_unsized_kind(&self, def: DefId)\n+                                  -> Option<ty::adjustment::CustomCoerceUnsized>;\n+    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                         -> Vec<Rc<ty::AssociatedConst<'tcx>>>;\n+\n+    // trait/impl-item info\n+    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                     -> Option<DefId>;\n+    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> ty::ImplOrTraitItem<'tcx>;\n+\n+    // flags\n+    fn is_const_fn(&self, did: DefId) -> bool;\n+    fn is_defaulted_trait(&self, did: DefId) -> bool;\n+    fn is_impl(&self, did: DefId) -> bool;\n+    fn is_default_impl(&self, impl_did: DefId) -> bool;\n+    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n+    fn is_static(&self, did: DefId) -> bool;\n+    fn is_static_method(&self, did: DefId) -> bool;\n+    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n+    fn is_typedef(&self, did: DefId) -> bool;\n+\n+    // crate metadata\n+    fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n+                                    -> Vec<(ast::CrateNum, LinkagePreference)>;\n+    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>;\n+    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>;\n+    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool;\n+    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;\n+    fn is_allocator(&self, cnum: ast::CrateNum) -> bool;\n+    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;\n+    fn crate_name(&self, cnum: ast::CrateNum) -> String;\n+    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;\n+    fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n+                                -> FnvHashMap<DefId, Vec<ast::Attribute>>;\n+    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n+    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>;\n+    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;\n+\n+    // resolve\n+    fn def_path(&self, def: DefId) -> hir_map::DefPath;\n+    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;\n+    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n+    fn item_children(&self, did: DefId) -> Vec<ChildItem>;\n+    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>;\n+\n+    // misc. metadata\n+    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> FoundAst<'tcx>;\n+    // This is basically a 1-based range of ints, which is a little\n+    // silly - I may fix that.\n+    fn crates(&self) -> Vec<ast::CrateNum>;\n+    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>;\n+    fn used_link_args(&self) -> Vec<String>;\n+\n+    // utility functions\n+    fn metadata_filename(&self) -> &str;\n+    fn metadata_section_name(&self, target: &Target) -> &str;\n+    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n+    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;\n+    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;\n+    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n+    fn encode_metadata(&self,\n+                       tcx: &ty::ctxt<'tcx>,\n+                       reexports: &def::ExportMap,\n+                       item_symbols: &RefCell<NodeMap<String>>,\n+                       link_meta: &LinkMeta,\n+                       reachable: &NodeSet,\n+                       krate: &hir::Crate) -> Vec<u8>;\n+    fn metadata_encoding_version(&self) -> &[u8];\n+}\n+\n+impl InlinedItem {\n+    pub fn visit<'ast,V>(&'ast self, visitor: &mut V)\n+        where V: Visitor<'ast>\n+    {\n+        match *self {\n+            InlinedItem::Item(ref i) => visitor.visit_item(&**i),\n+            InlinedItem::Foreign(ref i) => visitor.visit_foreign_item(&**i),\n+            InlinedItem::TraitItem(_, ref ti) => visitor.visit_trait_item(ti),\n+            InlinedItem::ImplItem(_, ref ii) => visitor.visit_impl_item(ii),\n+        }\n+    }\n+\n+    pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) {\n+        let mut id_visitor = IdVisitor {\n+            operation: operation,\n+            pass_through_items: true,\n+            visited_outermost: false,\n+        };\n+        self.visit(&mut id_visitor);\n+    }\n+}\n+\n+// FIXME: find a better place for this?\n+pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+    let say = |s: &str| {\n+        match (sp, sess) {\n+            (_, None) => panic!(\"{}\", s),\n+            (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+            (None, Some(sess)) => sess.err(s),\n+        }\n+    };\n+    if s.is_empty() {\n+        say(\"crate name must not be empty\");\n+    }\n+    for c in s.chars() {\n+        if c.is_alphanumeric() { continue }\n+        if c == '_'  { continue }\n+        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+    }\n+    match sess {\n+        Some(sess) => sess.abort_if_errors(),\n+        None => {}\n+    }\n+}"}, {"sha": "4d0005f47c4f200d9e210278b18e52ef95668bea", "filename": "src/librustc/middle/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef_id.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::ty;\n use syntax::ast::CrateNum;\n use std::fmt;"}, {"sha": "ab5153e1a61d4b86025656e4fb4a856034cd61af", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -65,8 +65,8 @@ use syntax::ast;\n \n use session;\n use session::config;\n-use metadata::util::CrateStore;\n-use metadata::util::LinkagePreference::{self, RequireStatic, RequireDynamic};\n+use middle::cstore::CrateStore;\n+use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n use util::nodemap::FnvHashMap;\n \n /// A list of dependencies for a certain crate type."}, {"sha": "5563cd8043819dbaa3251fcb3102dfb68bbec932", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -76,7 +76,7 @@ use front::map as ast_map;\n use rustc_front::hir;\n use rustc_front::print::pprust;\n \n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n use middle::def;\n use middle::def_id::DefId;\n use middle::infer::{self, TypeOrigin};"}, {"sha": "ec55daca9ecdf137dc42bbb9c58a4efe1f57eb78", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -23,7 +23,7 @@ pub use self::LangItem::*;\n \n use front::map as hir_map;\n use session::Session;\n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n use middle::def_id::DefId;\n use middle::ty;\n use middle::weak_lang_items;"}, {"sha": "e3504b6a744dcc46f813314d8efb284658525921", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -16,10 +16,10 @@\n //! Most of the documentation on regions can be found in\n //! `middle/typeck/infer/region_inference.rs`\n \n-use metadata::inline::InlinedItem;\n use front::map as ast_map;\n use session::Session;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use middle::cstore::InlinedItem;\n use middle::ty::{self, Ty};\n \n use std::cell::RefCell;"}, {"sha": "0d92c3da83c8bed89dde98903e70b2db4f213b63", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -15,8 +15,7 @@ pub use self::StabilityLevel::*;\n \n use session::Session;\n use lint;\n-use metadata::cstore::LOCAL_CRATE;\n-use metadata::util::CrateStore;\n+use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::ty;"}, {"sha": "56dc259b1c2f012b543c789915f7bc2fcb184c1a", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -17,7 +17,7 @@ use super::PredicateObligation;\n use super::project;\n use super::util;\n \n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, TypeSpace};\n use middle::ty::{self, Ty};"}, {"sha": "4b61453992111d7f96254b8bcbe64f6903d87784", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -16,8 +16,8 @@\n use front::map as ast_map;\n use session::Session;\n use lint;\n-use metadata::util::CrateStore;\n use middle;\n+use middle::cstore::CrateStore;\n use middle::def::DefMap;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;"}, {"sha": "71ae8e40b45f0ecbe7c331cb1602ee5626ecd906", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -21,9 +21,8 @@ pub use self::LvaluePreference::*;\n \n use front::map as ast_map;\n use front::map::LinkedPath;\n-use metadata::cstore::LOCAL_CRATE;\n-use metadata::util::CrateStore;\n use middle;\n+use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def::{self, ExportMap};\n use middle::def_id::DefId;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};"}, {"sha": "78cdc99f047d720c523cafa66dd93a188ed09dc1", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -12,7 +12,7 @@\n \n use session::config;\n use session::Session;\n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n use middle::lang_items;\n \n use syntax::ast;"}, {"sha": "5d691af49dccb30dca2f45a12e9a6a0905a5ee2e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -22,7 +22,7 @@ use session::search_paths::SearchPaths;\n \n use rustc_back::target::Target;\n use lint;\n-use metadata::cstore;\n+use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::attr;"}, {"sha": "09c6b54d99cf88242a6e5e09c9dc0690a650046b", "filename": "src/librustc/session/filesearch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "previous_filename": "src/librustc/metadata/filesearch.rs"}, {"sha": "7bf96b41dce7f4eb3e5242a713eb25b3caefe2ef", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use lint;\n-use metadata::filesearch;\n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeMap, FnvHashMap};\n@@ -34,6 +33,7 @@ use std::env;\n use std::rc::Rc;\n \n pub mod config;\n+pub mod filesearch;\n pub mod search_paths;\n \n // Represents the data associated with a compilation"}, {"sha": "1429a6a54a668bc3588262dac2fbae45213dd911", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -16,16 +16,16 @@ use rustc::session::Session;\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n-use rustc::metadata;\n-use rustc::metadata::creader::LocalCrateReader;\n-use rustc::metadata::cstore::CStore;\n use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n use rustc::util::nodemap::NodeMap;\n use rustc::util::common::time;\n use rustc_borrowck as borrowck;\n use rustc_resolve as resolve;\n+use rustc_metadata::macro_import;\n+use rustc_metadata::creader::LocalCrateReader;\n+use rustc_metadata::cstore::CStore;\n use rustc_trans::back::link;\n use rustc_trans::back::write;\n use rustc_trans::trans;\n@@ -482,7 +482,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let macros = time(time_passes,\n                       \"macro loading\",\n-                      || metadata::macro_import::read_macro_defs(sess, &cstore, &krate));\n+                      || macro_import::read_macro_defs(sess, &cstore, &krate));\n \n     let mut addl_plugins = Some(addl_plugins);\n     let registrars = time(time_passes, \"plugin loading\", || {"}, {"sha": "b77425e18092927c7f65de28b8867087e7fef03c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -47,6 +47,7 @@ extern crate rustc_front;\n extern crate rustc_lint;\n extern crate rustc_plugin;\n extern crate rustc_privacy;\n+extern crate rustc_metadata;\n extern crate rustc_mir;\n extern crate rustc_resolve;\n extern crate rustc_trans;\n@@ -68,11 +69,11 @@ use rustc_trans::back::link;\n use rustc_trans::save;\n use rustc::session::{config, Session, build_session};\n use rustc::session::config::{Input, PrintRequest, OutputType};\n+use rustc::middle::cstore::CrateStore;\n use rustc::lint::Lint;\n use rustc::lint;\n-use rustc::metadata;\n-use rustc::metadata::cstore::CStore;\n-use rustc::metadata::util::CrateStore;\n+use rustc_metadata::loader;\n+use rustc_metadata::cstore::CStore;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;\n@@ -448,7 +449,7 @@ impl RustcDefaultCalls {\n                 &Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n-                    metadata::loader::list_file_metadata(&sess.target.target, path, &mut v)\n+                    loader::list_file_metadata(&sess.target.target, path, &mut v)\n                         .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }"}, {"sha": "630c42db68c79051d987b8f4a1f3d34f411b912f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -19,7 +19,6 @@ use rustc_trans::back::link;\n \n use driver;\n \n-use rustc::metadata::cstore::CStore;\n use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n@@ -28,6 +27,7 @@ use rustc::session::config::Input;\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n use rustc_resolve as resolve;\n+use rustc_metadata::cstore::CStore;\n \n use syntax::ast;\n use syntax::codemap;"}, {"sha": "739c5f12ecb30ed35c9b343f5d6782eec1b55201", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -29,11 +29,11 @@\n //! a `pub fn new()`.\n \n use middle::{cfg, def, infer, stability, traits};\n+use middle::cstore::CrateStore;\n use middle::def_id::DefId;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n use middle::ty::adjustment;\n-use rustc::metadata::util::CrateStore;\n use rustc::front::map as hir_map;\n use util::nodemap::{NodeSet};\n use lint::{Level, LateContext, LintContext, LintArray, Lint};"}, {"sha": "1d7431404f54550148a1157a24ed940517316cb0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -50,7 +50,6 @@ extern crate rustc_front;\n extern crate rustc_back;\n \n pub use rustc::lint as lint;\n-pub use rustc::metadata as metadata;\n pub use rustc::middle as middle;\n pub use rustc::session as session;\n pub use rustc::util as util;"}, {"sha": "2ecf715424b16cbde1e4885f213146e7e5c8e1c9", "filename": "src/librustc_metadata/astencode.rs", "status": "renamed", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -12,19 +12,21 @@\n // FIXME: remove this after snapshot, and Results are handled\n #![allow(unused_must_use)]\n \n-use front::map as ast_map;\n+use rustc::front::map as ast_map;\n+use rustc::session::Session;\n+\n use rustc_front::hir;\n use rustc_front::fold;\n use rustc_front::fold::Folder;\n \n-use metadata::common as c;\n-use metadata::cstore as cstore;\n-use session::Session;\n-use metadata::decoder;\n-use metadata::encoder as e;\n-use metadata::inline::{InlinedItem, InlinedItemRef};\n-use metadata::tydecode;\n-use metadata::tyencode;\n+use common as c;\n+use cstore;\n+use decoder;\n+use encoder as e;\n+use tydecode;\n+use tyencode;\n+\n+use middle::cstore::{InlinedItem, InlinedItemRef};\n use middle::ty::adjustment;\n use middle::ty::cast;\n use middle::check_const::ConstQualif;\n@@ -89,7 +91,7 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n \n     // Folding could be avoided with a smarter encoder.\n     let ii = simplify_ast(ii);\n-    let id_range = ii.compute_id_range();\n+    let id_range = inlined_item_id_range(&ii);\n \n     rbml_w.start_tag(c::tag_ast as usize);\n     id_range.encode(rbml_w);\n@@ -1326,6 +1328,12 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n     }\n }\n \n+fn inlined_item_id_range(v: &InlinedItem) -> ast_util::IdRange {\n+    let mut visitor = ast_util::IdRangeComputingVisitor::new();\n+    v.visit_ids(&mut visitor);\n+    visitor.result()\n+}\n+\n // ______________________________________________________________________\n // Testing of astencode_gen\n ", "previous_filename": "src/librustc/middle/astencode.rs"}, {"sha": "b6454a4c81a2f8ce4aeee63dc3481ba7da670cdf", "filename": "src/librustc_metadata/common.rs", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -12,8 +12,6 @@\n \n pub use self::astencode_tag::*;\n \n-use back::svh::Svh;\n-\n // RBML enum definitions and utils shared by the encoder and decoder\n //\n // 0x00..0x1f: reserved for RBML generic type tags\n@@ -191,12 +189,6 @@ pub const tag_items_data_item_stability: usize = 0x88;\n \n pub const tag_items_data_item_repr: usize = 0x89;\n \n-#[derive(Clone, Debug)]\n-pub struct LinkMeta {\n-    pub crate_name: String,\n-    pub crate_hash: Svh,\n-}\n-\n pub const tag_struct_fields: usize = 0x10d; // top-level only\n pub const tag_struct_field: usize = 0x8a;\n ", "previous_filename": "src/librustc/metadata/common.rs"}, {"sha": "89aa3bf86611a3a983a2b6eaf16837266e3133cd", "filename": "src/librustc_metadata/creader.rs", "status": "renamed", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -12,17 +12,17 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use back::svh::Svh;\n-use session::{config, Session};\n-use session::search_paths::PathKind;\n-use metadata::common::rustc_version;\n-use metadata::cstore;\n-use metadata::cstore::{CStore, CrateSource, MetadataBlob};\n-use metadata::decoder;\n-use metadata::loader;\n-use metadata::loader::CratePaths;\n-use util::nodemap::FnvHashMap;\n-use front::map as hir_map;\n+use common::rustc_version;\n+use cstore::{self, CStore, CrateSource, MetadataBlob};\n+use decoder;\n+use loader::{self, CratePaths};\n+\n+use rustc::back::svh::Svh;\n+use rustc::session::{config, Session};\n+use rustc::session::search_paths::PathKind;\n+use rustc::middle::cstore::validate_crate_name;\n+use rustc::util::nodemap::FnvHashMap;\n+use rustc::front::map as hir_map;\n \n use std::cell::{RefCell, Cell};\n use std::path::PathBuf;\n@@ -91,29 +91,6 @@ struct CrateInfo {\n     should_link: bool,\n }\n \n-pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let say = |s: &str| {\n-        match (sp, sess) {\n-            (_, None) => panic!(\"{}\", s),\n-            (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-            (None, Some(sess)) => sess.err(s),\n-        }\n-    };\n-    if s.is_empty() {\n-        say(\"crate name must not be empty\");\n-    }\n-    for c in s.chars() {\n-        if c.is_alphanumeric() { continue }\n-        if c == '_'  { continue }\n-        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n-    }\n-    match sess {\n-        Some(sess) => sess.abort_if_errors(),\n-        None => {}\n-    }\n-}\n-\n-\n fn register_native_lib(sess: &Session,\n                        cstore: &CStore,\n                        span: Option<Span>,", "previous_filename": "src/librustc/metadata/creader.rs"}, {"sha": "99fa18837ebe6bd9b8468f8766f303b9036b07bb", "filename": "src/librustc_metadata/csearch.rs", "status": "renamed", "additions": 12, "deletions": 141, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -8,160 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use back::svh::Svh;\n-use front::map as ast_map;\n-use metadata::cstore;\n-use metadata::decoder;\n-use metadata::encoder;\n-use metadata::loader;\n-use middle::astencode;\n+use astencode;\n+use cstore;\n+use decoder;\n+use encoder;\n+use loader;\n+\n+use middle::cstore::{CrateStore, CrateSource, ChildItem, FoundAst};\n+use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use middle::def;\n use middle::lang_items;\n use middle::ty::{self, Ty};\n use middle::def_id::{DefId, DefIndex};\n-use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n-use std::any::Any;\n+use rustc::front::map as ast_map;\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::attr;\n+use rustc_back::svh::Svh;\n use rustc_back::target::Target;\n use rustc_front::hir;\n \n-pub use metadata::common::LinkMeta;\n-pub use metadata::creader::validate_crate_name;\n-pub use metadata::cstore::CrateSource;\n-pub use metadata::cstore::LinkagePreference;\n-pub use metadata::cstore::NativeLibraryKind;\n-pub use metadata::decoder::DecodeInlinedItem;\n-pub use metadata::decoder::DefLike;\n-pub use metadata::inline::InlinedItem;\n-\n-pub use self::DefLike::{DlDef, DlField, DlImpl};\n-pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n-\n-pub struct ChildItem {\n-    pub def: DefLike,\n-    pub name: ast::Name,\n-    pub vis: hir::Visibility\n-}\n-\n-pub enum FoundAst<'ast> {\n-    Found(&'ast InlinedItem),\n-    FoundParent(DefId, &'ast InlinedItem),\n-    NotFound,\n-}\n-\n-pub trait CrateStore<'tcx> : Any {\n-    // item info\n-    fn stability(&self, def: DefId) -> Option<attr::Stability>;\n-    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n-                    -> ty::ClosureKind;\n-    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n-                  -> ty::ClosureTy<'tcx>;\n-    fn item_variances(&self, def: DefId) -> ty::ItemVariances;\n-    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr>;\n-    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                 -> ty::TypeScheme<'tcx>;\n-    fn item_path(&self, def: DefId) -> Vec<ast_map::PathElem>;\n-    fn item_name(&self, def: DefId) -> ast::Name;\n-    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                       -> ty::GenericPredicates<'tcx>;\n-    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                             -> ty::GenericPredicates<'tcx>;\n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n-    fn item_symbol(&self, def: DefId) -> String;\n-    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>;\n-    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;\n-    fn method_arg_names(&self, did: DefId) -> Vec<String>;\n-    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;\n-\n-    // trait info\n-    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>;\n-    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                              -> Vec<Rc<ty::Method<'tcx>>>;\n-    fn trait_item_def_ids(&self, def: DefId)\n-                          -> Vec<ty::ImplOrTraitItemId>;\n-\n-    // impl info\n-    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>;\n-    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                      -> Option<ty::TraitRef<'tcx>>;\n-    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>;\n-    fn custom_coerce_unsized_kind(&self, def: DefId)\n-                                  -> Option<ty::adjustment::CustomCoerceUnsized>;\n-    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                         -> Vec<Rc<ty::AssociatedConst<'tcx>>>;\n-\n-    // trait/impl-item info\n-    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n-                     -> Option<DefId>;\n-    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                          -> ty::ImplOrTraitItem<'tcx>;\n-\n-    // flags\n-    fn is_const_fn(&self, did: DefId) -> bool;\n-    fn is_defaulted_trait(&self, did: DefId) -> bool;\n-    fn is_impl(&self, did: DefId) -> bool;\n-    fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n-    fn is_static(&self, did: DefId) -> bool;\n-    fn is_static_method(&self, did: DefId) -> bool;\n-    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n-    fn is_typedef(&self, did: DefId) -> bool;\n-\n-    // crate metadata\n-    fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n-                                    -> Vec<(ast::CrateNum, LinkagePreference)>;\n-    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>;\n-    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool;\n-    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;\n-    fn is_allocator(&self, cnum: ast::CrateNum) -> bool;\n-    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;\n-    fn crate_name(&self, cnum: ast::CrateNum) -> String;\n-    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;\n-    fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n-                                -> FnvHashMap<DefId, Vec<ast::Attribute>>;\n-    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n-    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>;\n-    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;\n-\n-    // resolve\n-    fn def_path(&self, def: DefId) -> ast_map::DefPath;\n-    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;\n-    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n-    fn item_children(&self, did: DefId) -> Vec<ChildItem>;\n-    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>;\n-\n-    // misc. metadata\n-    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n-                          -> FoundAst<'tcx>;\n-    // This is basically a 1-based range of ints, which is a little\n-    // silly - I may fix that.\n-    fn crates(&self) -> Vec<ast::CrateNum>;\n-    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>;\n-    fn used_link_args(&self) -> Vec<String>;\n-\n-    // utility functions\n-    fn metadata_filename(&self) -> &str;\n-    fn metadata_section_name(&self, target: &Target) -> &str;\n-    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n-    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;\n-    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;\n-    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n-    fn encode_metadata(&self,\n-                       tcx: &ty::ctxt<'tcx>,\n-                       reexports: &def::ExportMap,\n-                       item_symbols: &RefCell<NodeMap<String>>,\n-                       link_meta: &LinkMeta,\n-                       reachable: &NodeSet,\n-                       krate: &hir::Crate) -> Vec<u8>;\n-    fn metadata_encoding_version(&self) -> &[u8];\n-}\n-\n impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability>\n     {", "previous_filename": "src/librustc/metadata/util.rs"}, {"sha": "6a1f9d16fe7a403d065e4675a495f2a32522f03e", "filename": "src/librustc_metadata/cstore.rs", "status": "renamed", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -14,13 +14,15 @@\n // crates and libraries\n \n pub use self::MetadataBlob::*;\n-pub use self::LinkagePreference::*;\n-pub use self::NativeLibraryKind::*;\n \n-use back::svh::Svh;\n-use metadata::{creader, decoder, index, loader};\n-use session::search_paths::PathKind;\n-use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use creader;\n+use decoder;\n+use index;\n+use loader;\n+\n+use rustc::back::svh::Svh;\n+use rustc::front::map as ast_map;\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use std::cell::{RefCell, Ref, Cell};\n use std::rc::Rc;\n@@ -32,7 +34,10 @@ use syntax::codemap;\n use syntax::parse::token;\n use syntax::parse::token::IdentInterner;\n use syntax::util::small_vector::SmallVector;\n-use front::map as ast_map;\n+\n+pub use middle::cstore::{NativeLibraryKind, LinkagePreference};\n+pub use middle::cstore::{NativeStatic, NativeFramework, NativeUnknown};\n+pub use middle::cstore::{CrateSource, LinkMeta};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external\n@@ -77,30 +82,6 @@ pub struct crate_metadata {\n     pub explicitly_linked: Cell<bool>,\n }\n \n-#[derive(Copy, Debug, PartialEq, Clone)]\n-pub enum LinkagePreference {\n-    RequireDynamic,\n-    RequireStatic,\n-}\n-\n-enum_from_u32! {\n-    #[derive(Copy, Clone, PartialEq)]\n-    pub enum NativeLibraryKind {\n-        NativeStatic,    // native static library (.a archive)\n-        NativeFramework, // OSX-specific\n-        NativeUnknown,   // default way to specify a dynamic library\n-    }\n-}\n-\n-// Where a crate came from on the local filesystem. One of these two options\n-// must be non-None.\n-#[derive(PartialEq, Clone, Debug)]\n-pub struct CrateSource {\n-    pub dylib: Option<(PathBuf, PathKind)>,\n-    pub rlib: Option<(PathBuf, PathKind)>,\n-    pub cnum: ast::CrateNum,\n-}\n-\n pub struct CStore {\n     metas: RefCell<FnvHashMap<ast::CrateNum, Rc<crate_metadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n@@ -112,10 +93,6 @@ pub struct CStore {\n     pub intr: Rc<IdentInterner>,\n }\n \n-/// Item definitions in the currently-compiled crate would have the CrateNum\n-/// LOCAL_CRATE in their DefId.\n-pub const LOCAL_CRATE: ast::CrateNum = 0;\n-\n impl CStore {\n     pub fn new(intr: Rc<IdentInterner>) -> CStore {\n         CStore {\n@@ -218,8 +195,8 @@ impl CStore {\n         let mut libs = self.used_crate_sources.borrow()\n             .iter()\n             .map(|src| (src.cnum, match prefer {\n-                RequireDynamic => src.dylib.clone().map(|p| p.0),\n-                RequireStatic => src.rlib.clone().map(|p| p.0),\n+                LinkagePreference::RequireDynamic => src.dylib.clone().map(|p| p.0),\n+                LinkagePreference::RequireStatic => src.rlib.clone().map(|p| p.0),\n             }))\n             .collect::<Vec<_>>();\n         libs.sort_by(|&(a, _), &(b, _)| {", "previous_filename": "src/librustc/metadata/cstore.rs"}, {"sha": "092f7849115c3eed714dc13438f7462cf6c1319e", "filename": "src/librustc_metadata/decoder.rs", "status": "renamed", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -12,29 +12,27 @@\n \n #![allow(non_camel_case_types)]\n \n-pub use self::DefLike::*;\n use self::Family::*;\n \n-use front::map as hir_map;\n+use cstore::{self, crate_metadata};\n+use common::*;\n+use encoder::def_to_u64;\n+use index;\n+use tydecode::TyDecoder;\n+\n+use rustc::back::svh::Svh;\n+use rustc::front::map as hir_map;\n+use rustc::util::nodemap::FnvHashMap;\n use rustc_front::hir;\n \n-use back::svh::Svh;\n-use metadata::cstore::crate_metadata;\n-use metadata::cstore::LOCAL_CRATE;\n-use metadata::common::*;\n-use metadata::cstore;\n-use metadata::encoder::def_to_u64;\n-use metadata::index;\n-use metadata::inline::InlinedItem;\n-use metadata::tydecode::TyDecoder;\n-use metadata::util::FoundAst;\n+use middle::cstore::{LOCAL_CRATE, FoundAst, InlinedItem, LinkagePreference};\n+use middle::cstore::{DefLike, DlDef, DlField, DlImpl};\n use middle::def;\n use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{self, RegionEscape, Ty};\n-use util::nodemap::FnvHashMap;\n \n use std::cell::{Cell, RefCell};\n use std::io::prelude::*;\n@@ -590,14 +588,6 @@ pub fn get_symbol_from_buf(data: &[u8], id: DefIndex) -> String {\n     item_symbol(doc)\n }\n \n-// Something that a name can resolve to.\n-#[derive(Copy, Clone, Debug)]\n-pub enum DefLike {\n-    DlDef(def::Def),\n-    DlImpl(DefId),\n-    DlField\n-}\n-\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where\n     F: FnMut(DefIndex, usize) -> bool,\n@@ -1315,7 +1305,7 @@ pub fn each_exported_macro<F>(data: &[u8], intr: &IdentInterner, mut f: F) where\n }\n \n pub fn get_dylib_dependency_formats(cdata: Cmd)\n-    -> Vec<(ast::CrateNum, cstore::LinkagePreference)>\n+    -> Vec<(ast::CrateNum, LinkagePreference)>\n {\n     let formats = reader::get_doc(rbml::Doc::new(cdata.data()),\n                                   tag_dylib_dependency_formats);\n@@ -1332,9 +1322,9 @@ pub fn get_dylib_dependency_formats(cdata: Cmd)\n             None => panic!(\"didn't find a crate in the cnum_map\")\n         };\n         result.push((cnum, if link == \"d\" {\n-            cstore::RequireDynamic\n+            LinkagePreference::RequireDynamic\n         } else {\n-            cstore::RequireStatic\n+            LinkagePreference::RequireStatic\n         }));\n     }\n     return result;", "previous_filename": "src/librustc/metadata/decoder.rs"}, {"sha": "2340efd2cae7ae8d6e84d8102fb1093ad1bf6930", "filename": "src/librustc_metadata/diagnostics.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+E0454: r##\"\n+A link name was given with an empty name. Erroneous code example:\n+\n+```\n+#[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n+```\n+\n+The rust compiler cannot link to an external library if you don't give it its\n+name. Example:\n+\n+```\n+#[link(name = \"some_lib\")] extern {} // ok!\n+```\n+\"##,\n+\n+E0458: r##\"\n+An unknown \"kind\" was specified for a link attribute. Erroneous code example:\n+\n+```\n+#[link(kind = \"wonderful_unicorn\")] extern {}\n+// error: unknown kind: `wonderful_unicorn`\n+```\n+\n+Please specify a valid \"kind\" value, from one of the following:\n+ * static\n+ * dylib\n+ * framework\n+\"##,\n+\n+E0459: r##\"\n+A link was used without a name parameter. Erroneous code example:\n+\n+```\n+#[link(kind = \"dylib\")] extern {}\n+// error: #[link(...)] specified without `name = \"foo\"`\n+```\n+\n+Please add the name parameter to allow the rust compiler to find the library\n+you want. Example:\n+\n+```\n+#[link(kind = \"dylib\", name = \"some_lib\")] extern {} // ok!\n+```\n+\"##,\n+\n+}\n+\n+register_diagnostics! {\n+    E0455, // native frameworks are only available on OSX targets\n+    E0456, // plugin `..` is not available for triple `..`\n+    E0457, // plugin `..` only found in rlib format, but must be available...\n+    E0514, // metadata version mismatch\n+    E0460, // found possibly newer version of crate `..`\n+    E0461, // couldn't find crate `..` with expected target triple ..\n+    E0462, // found staticlib `..` instead of rlib or dylib\n+    E0463, // can't find crate for `..`\n+    E0464, // multiple matching crates for `..`\n+    E0465, // multiple .. candidates for `..` found\n+    E0466, // bad macro import\n+    E0467, // bad macro reexport\n+    E0468, // an `extern crate` loading macros must be at the crate root\n+    E0469, // imported macro not found\n+    E0470, // reexported macro not found\n+}"}, {"sha": "1d88fa4454bda19f1bff4bde693d4d3513e7dac3", "filename": "src/librustc_metadata/encoder.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -13,23 +13,25 @@\n #![allow(unused_must_use)] // everything is just a MemWriter, can't fail\n #![allow(non_camel_case_types)]\n \n-use back::svh::Svh;\n-use session::config;\n-use metadata::common::*;\n-use metadata::cstore;\n-use metadata::cstore::LOCAL_CRATE;\n-use metadata::decoder;\n-use metadata::tyencode;\n-use metadata::index::{self, IndexData};\n-use metadata::inline::InlinedItemRef;\n-use metadata::util::CrateStore;\n+use common::*;\n+use cstore;\n+use decoder;\n+use tyencode;\n+use index::{self, IndexData};\n+\n+use middle::cstore::{LOCAL_CRATE, CrateStore, InlinedItemRef, LinkMeta};\n use middle::def;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n use middle::stability;\n use middle::subst;\n use middle::ty::{self, Ty};\n-use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+\n+use rustc::back::svh::Svh;\n+use rustc::front::map::{LinkedPath, PathElem, PathElems};\n+use rustc::front::map as ast_map;\n+use rustc::session::config;\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use serialize::Encodable;\n use std::cell::RefCell;\n@@ -49,8 +51,6 @@ use rbml::writer::Encoder;\n use rustc_front::hir;\n use rustc_front::intravisit::Visitor;\n use rustc_front::intravisit;\n-use front::map::{LinkedPath, PathElem, PathElems};\n-use front::map as ast_map;\n \n pub type EncodeInlinedItem<'a> =\n     Box<FnMut(&EncodeContext, &mut Encoder, InlinedItemRef) + 'a>;", "previous_filename": "src/librustc/metadata/encoder.rs"}, {"sha": "60bbdaddd751607c7e75c1ffeade30db3d440852", "filename": "src/librustc_metadata/index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "previous_filename": "src/librustc/metadata/index.rs"}, {"sha": "6affbd2b5936c4323a08192352ee29e915860c1f", "filename": "src/librustc_metadata/lib.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(stage0, feature(custom_attribute))]\n+#![crate_name = \"rustc_metadata\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, staged_api)]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(box_patterns)]\n+#![feature(duration_span)]\n+#![feature(enumset)]\n+#![feature(quote)]\n+#![feature(staged_api)]\n+#![feature(vec_push_all)]\n+#![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_private)]\n+\n+#[macro_use] extern crate log;\n+#[macro_use] extern crate syntax;\n+#[macro_use] #[no_link] extern crate rustc_bitflags;\n+\n+extern crate flate;\n+extern crate rbml;\n+extern crate serialize;\n+\n+extern crate rustc;\n+extern crate rustc_back;\n+extern crate rustc_front;\n+extern crate rustc_llvm;\n+\n+pub use rustc::middle;\n+\n+#[macro_use]\n+mod macros;\n+\n+pub mod diagnostics;\n+\n+pub mod astencode;\n+pub mod common;\n+pub mod tyencode;\n+pub mod tydecode;\n+pub mod encoder;\n+pub mod decoder;\n+pub mod creader;\n+pub mod csearch;\n+pub mod cstore;\n+pub mod index;\n+pub mod loader;\n+pub mod macro_import;"}, {"sha": "72938a7660a53805c8d0ccc235ce8e59f1c97685", "filename": "src/librustc_metadata/loader.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -212,19 +212,21 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::loader or metadata::creader for all the juicy details!\n \n-use back::svh::Svh;\n-use session::Session;\n-use session::search_paths::PathKind;\n-use llvm;\n-use llvm::{False, ObjectFile, mk_section_iter};\n-use llvm::archive_ro::ArchiveRO;\n-use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n-use metadata::decoder;\n-use metadata::encoder;\n-use metadata::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n+use cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n+use decoder;\n+use encoder;\n+\n+use rustc::back::svh::Svh;\n+use rustc::session::Session;\n+use rustc::session::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n+use rustc::session::search_paths::PathKind;\n+use rustc::util::common;\n+\n+use rustc_llvm as llvm;\n+use rustc_llvm::{False, ObjectFile, mk_section_iter};\n+use rustc_llvm::archive_ro::ArchiveRO;\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n-use util::common;\n use rustc_back::target::Target;\n \n use std::cmp;", "previous_filename": "src/librustc/metadata/loader.rs"}, {"sha": "d67fc3a0eaba525acd0c792d8ff8af01f802fd47", "filename": "src/librustc_metadata/macro_import.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -10,9 +10,10 @@\n \n //! Used by `rustc` when loading a crate with exported macros.\n \n-use session::Session;\n-use metadata::creader::CrateReader;\n-use metadata::cstore::CStore;\n+use creader::CrateReader;\n+use cstore::CStore;\n+\n+use rustc::session::Session;\n \n use std::collections::{HashSet, HashMap};\n use syntax::codemap::Span;", "previous_filename": "src/librustc/metadata/macro_import.rs"}, {"sha": "ed764ebd9f95dd4e27b579342fc0f4c66e77a486", "filename": "src/librustc_metadata/macros.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacros.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! enum_from_u32 {\n+    ($(#[$attr:meta])* pub enum $name:ident {\n+        $($variant:ident = $e:expr,)*\n+    }) => {\n+        $(#[$attr])*\n+        pub enum $name {\n+            $($variant = $e),*\n+        }\n+\n+        impl $name {\n+            pub fn from_u32(u: u32) -> Option<$name> {\n+                $(if u == $name::$variant as u32 {\n+                    return Some($name::$variant)\n+                })*\n+                None\n+            }\n+        }\n+    };\n+    ($(#[$attr:meta])* pub enum $name:ident {\n+        $($variant:ident,)*\n+    }) => {\n+        $(#[$attr])*\n+        pub enum $name {\n+            $($variant,)*\n+        }\n+\n+        impl $name {\n+            pub fn from_u32(u: u32) -> Option<$name> {\n+                $(if u == $name::$variant as u32 {\n+                    return Some($name::$variant)\n+                })*\n+                None\n+            }\n+        }\n+    }\n+}"}, {"sha": "d03af6b672284b2accff9b886315e06aa71ad880", "filename": "src/librustc_metadata/tydecode.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "previous_filename": "src/librustc/metadata/tydecode.rs"}, {"sha": "bc1edd5c7671815d8fbb0ab473106ab95e6ee57a", "filename": "src/librustc_metadata/tyencode.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -23,7 +23,7 @@ use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::ParamTy;\n use middle::ty::{self, Ty};\n-use util::nodemap::FnvHashMap;\n+use rustc::util::nodemap::FnvHashMap;\n \n use rustc_front::hir;\n ", "previous_filename": "src/librustc/metadata/tyencode.rs"}, {"sha": "5dedef7ab6c79b6d85f3eb461916b842cf5d38eb", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -71,6 +71,7 @@\n \n extern crate rustc;\n extern crate rustc_front;\n+extern crate rustc_metadata;\n \n pub use self::registry::Registry;\n "}, {"sha": "51eec07505a4297af17a2188965e0ff9a9e39d65", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -11,8 +11,8 @@\n //! Used by `rustc` when loading a plugin.\n \n use rustc::session::Session;\n-use rustc::metadata::creader::CrateReader;\n-use rustc::metadata::cstore::CStore;\n+use rustc_metadata::creader::CrateReader;\n+use rustc_metadata::cstore::CStore;\n use registry::Registry;\n \n use std::borrow::ToOwned;"}, {"sha": "13f7e3181631a815b5975d77bc272471c42fda25", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -28,7 +28,7 @@ use {resolve_error, ResolutionError};\n \n use self::DuplicateCheckingMode::*;\n \n-use rustc::metadata::util::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n+use rustc::middle::cstore::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n use rustc::middle::def::*;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n "}, {"sha": "ef03ac520df46d699662fb098dc9505958dc045b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -54,7 +54,7 @@ use self::FallbackChecks::*;\n use rustc::front::map as hir_map;\n use rustc::session::Session;\n use rustc::lint;\n-use rustc::metadata::util::{CrateStore, DefLike, DlDef};\n+use rustc::middle::cstore::{CrateStore, DefLike, DlDef};\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::pat_util::pat_bindings_hygienic;"}, {"sha": "f5431554a75642547f975b38cd8237908199ef9d", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -21,7 +21,7 @@ use std::process::{Command, Output, Stdio};\n use std::ptr;\n use std::str;\n \n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n \n use libc;\n use llvm::archive_ro::{ArchiveRO, Child};"}, {"sha": "d7b4243afee21d8dbeb68eca822bde6a46343cdb", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -17,12 +17,11 @@ use super::svh::Svh;\n use session::config;\n use session::config::NoDebugInfo;\n use session::config::{OutputFilenames, Input, OutputType};\n+use session::filesearch;\n use session::search_paths::PathKind;\n use session::Session;\n-use metadata::{util as mdutil};\n-use metadata::filesearch;\n-use metadata::util::{CrateStore, LinkMeta};\n-use metadata::util::{LinkagePreference, NativeLibraryKind};\n+use middle::cstore::{self, CrateStore, LinkMeta};\n+use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::dependency_format::Linkage;\n use middle::ty::{self, Ty};\n use rustc::front::map::DefPath;\n@@ -138,7 +137,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        mdutil::validate_crate_name(sess, &s[..], span);\n+        cstore::validate_crate_name(sess, &s[..], span);\n         s\n     };\n "}, {"sha": "1ee1c9f1912c778f85c441160dbecf831ea1e7e8", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -16,7 +16,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use back::archive;\n-use metadata::util::CrateStore;\n+use middle::cstore::CrateStore;\n use middle::dependency_format::Linkage;\n use session::Session;\n use session::config::CrateTypeDylib;"}, {"sha": "b672c49bdca7e4567cde04c438c489e46c5726c9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -62,7 +62,6 @@ extern crate serialize;\n #[macro_use] extern crate syntax;\n \n pub use rustc::session;\n-pub use rustc::metadata;\n pub use rustc::middle;\n pub use rustc::lint;\n pub use rustc::util;"}, {"sha": "a95a4c052fa2e1f6e133bccf8f5ca28af4676027", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -13,7 +13,7 @@ pub use self::Row::*;\n use super::escape;\n use super::span_utils::SpanUtils;\n \n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::ty;\n "}, {"sha": "d6b33672df0a7074054d007ec2a2f5726663b1be", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -35,14 +35,14 @@ use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use middle::cfg;\n+use middle::cstore::CrateStore;\n use middle::def_id::DefId;\n use middle::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n use middle::subst::Substs;\n use middle::ty::{self, Ty, HasTypeFlags};\n-use metadata::util::CrateStore;\n use rustc::front::map as hir_map;\n use rustc_mir::mir_map::MirMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};"}, {"sha": "0c0bda45d8cd96715a42b6fd4335abf0b23f8f55", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -22,7 +22,7 @@ use arena::TypedArena;\n use back::link;\n use session;\n use llvm::{self, ValueRef, get_params};\n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def;\n use middle::def_id::DefId;\n use middle::infer;"}, {"sha": "6f40283064bd05011a3bfb4c659649f963d8f8da", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -13,8 +13,8 @@ use back::abi;\n use llvm;\n use llvm::{ConstFCmp, ConstICmp, SetLinkage, SetUnnamedAddr};\n use llvm::{InternalLinkage, ValueRef, Bool, True};\n-use metadata::cstore::LOCAL_CRATE;\n use middle::{check_const, def};\n+use middle::cstore::LOCAL_CRATE;\n use middle::const_eval::{self, ConstVal, ConstEvalErr};\n use middle::const_eval::{const_int_checked_neg, const_uint_checked_neg};\n use middle::const_eval::{const_int_checked_add, const_uint_checked_add};"}, {"sha": "c6ca2e176aa58913985241843d4d80bd3a73d350", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -10,7 +10,7 @@\n \n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n-use metadata::common::LinkMeta;\n+use middle::cstore::LinkMeta;\n use middle::def::ExportMap;\n use middle::def_id::DefId;\n use middle::traits;"}, {"sha": "29965755eac76c76cd7dd6257f14c154de96e7c8", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n-use metadata::util::{CrateStore, FoundAst, InlinedItem};\n+use middle::cstore::{CrateStore, FoundAst, InlinedItem};\n use middle::def_id::DefId;\n use middle::subst::Substs;\n use trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};"}, {"sha": "b102e96af20e2ae3e974316b55af3db7210062ec", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{ContextRef, ModuleRef};\n-use metadata::common::LinkMeta;\n+use middle::cstore::LinkMeta;\n \n pub use self::base::trans_crate;\n pub use self::context::CrateContext;"}, {"sha": "6a23be682e9d3cd0a0c1ff3c4ba7682bf74babd4", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -25,7 +25,7 @@ use super::UnresolvedTypeAction;\n use super::write_call;\n \n use CrateCtxt;\n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::infer;\n use middle::ty::{self, LvaluePreference, Ty};"}, {"sha": "955bc92a8f31e89bf1a9c982c4b98371ab793798", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -17,12 +17,12 @@ use astconv::AstConv;\n use check::{self, FnCtxt};\n use front::map as hir_map;\n use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, HasTypeFlags};\n+use middle::cstore::{self, CrateStore, DefLike};\n use middle::def;\n use middle::def_id::DefId;\n use middle::lang_items::FnOnceTraitLangItem;\n use middle::subst::Substs;\n use middle::traits::{Obligation, SelectionContext};\n-use metadata::util::{self as mdutil, CrateStore, DefLike};\n use util::nodemap::{FnvHashSet};\n \n use syntax::ast;\n@@ -418,13 +418,13 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         fn handle_external_def(traits: &mut AllTraitsVec,\n                                external_mods: &mut FnvHashSet<DefId>,\n                                ccx: &CrateCtxt,\n-                               cstore: &for<'a> mdutil::CrateStore<'a>,\n-                               dl: mdutil::DefLike) {\n+                               cstore: &for<'a> cstore::CrateStore<'a>,\n+                               dl: cstore::DefLike) {\n             match dl {\n-                mdutil::DlDef(def::DefTrait(did)) => {\n+                cstore::DlDef(def::DefTrait(did)) => {\n                     traits.push(TraitInfo::new(did));\n                 }\n-                mdutil::DlDef(def::DefMod(did)) => {\n+                cstore::DlDef(def::DefMod(did)) => {\n                     if !external_mods.insert(did) {\n                         return;\n                     }"}, {"sha": "be60d2f3dcf8e004cca1ef8cc67bf59c520d1e96", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -83,8 +83,8 @@ use self::TupleArgumentsFlag::*;\n use astconv::{self, ast_region_to_region, ast_ty_to_ty, AstConv, PathParamMode};\n use check::_match::pat_ctxt;\n use fmt_macros::{Parser, Piece, Position};\n-use metadata::cstore::LOCAL_CRATE;\n use middle::astconv_util::prohibit_type_params;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def;\n use middle::def_id::DefId;\n use middle::infer;"}, {"sha": "e6e31ba0819c5d605f1afeab1e4424ef1aeb2272", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -11,7 +11,7 @@\n //! Orphan checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use metadata::cstore::LOCAL_CRATE;\n+use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::traits;\n use middle::ty;"}, {"sha": "693c8716ab58acec4bdf1da31fe32cbb9094707b", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -11,8 +11,7 @@\n //! Overlap: No two impls for the same trait are implemented for the\n //! same type.\n \n-use metadata::cstore::LOCAL_CRATE;\n-use metadata::util::CrateStore;\n+use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def_id::DefId;\n use middle::traits;\n use middle::ty;"}, {"sha": "4c09df418950bd27ba36e7a7c65b13c6c4e61d36", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "patch": "@@ -99,7 +99,6 @@ extern crate rustc_back;\n \n pub use rustc::front;\n pub use rustc::lint;\n-pub use rustc::metadata;\n pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;"}]}