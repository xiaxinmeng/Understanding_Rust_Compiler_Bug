{"sha": "826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjE4OWVmNTFjNGYwYWQ1ZjZlMTBkNDRjZjhlOWU3YTIyOTg5MWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-09T11:37:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-09T11:37:39Z"}, "message": "Some clippy fixes", "tree": {"sha": "4452aeaa6435f2e55701ae89ceed173d2543de9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4452aeaa6435f2e55701ae89ceed173d2543de9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "html_url": "https://github.com/rust-lang/rust/commit/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f62149d071ad1a42deef3bd67c9a414d73559f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f62149d071ad1a42deef3bd67c9a414d73559f8", "html_url": "https://github.com/rust-lang/rust/commit/8f62149d071ad1a42deef3bd67c9a414d73559f8"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "7c275965199e056567512a0b71118943b80838cc", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -208,7 +208,7 @@ pub(super) fn from_casted_value<'tcx>(\n     });\n     let ptr = Pointer::new(fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0));\n     let mut offset = 0;\n-    let mut block_params_iter = block_params.into_iter().copied();\n+    let mut block_params_iter = block_params.iter().copied();\n     for param in abi_params {\n         let val = ptr.offset_i64(fx, offset).store(\n             fx,"}, {"sha": "e1c53224b4f841751bba96f80a37b99fbcdd9e93", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -142,7 +142,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, T>(\n                 let results = fx\n                     .bcx\n                     .inst_results(call_inst)\n-                    .into_iter()\n+                    .iter()\n                     .copied()\n                     .collect::<SmallVec<[Value; 2]>>();\n                 let result ="}, {"sha": "8578ab33ced680bb50340819c7aa2939ff6b9bef", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -39,11 +39,11 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n     #[cfg(unix)]\n     {\n         use std::os::unix::ffi::OsStrExt;\n-        return path.as_bytes();\n+        path.as_bytes()\n     }\n     #[cfg(not(unix))]\n     {\n-        return path.to_str().unwrap().as_bytes();\n+        path.to_str().unwrap().as_bytes()\n     }\n }\n "}, {"sha": "337f4d6766afa29f2602ff7e9a1b8878a476a0fc", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -88,7 +88,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_bytes = match idx_const.val {\n                     ty::ConstKind::Value(ConstValue::ByRef { alloc, offset }) => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n-                        let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n+                        let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),"}, {"sha": "650e5e04bdbd5312d9ec1b3b7e27d0ee78490b0f", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -240,9 +240,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         vec![]\n     }\n \n-    fn codegen_crate<'tcx>(\n+    fn codegen_crate(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n@@ -252,9 +252,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n                 .unwrap_or_else(|err| tcx.sess.fatal(&err))\n         };\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, config);\n-\n-        res\n+        driver::codegen_crate(tcx, metadata, need_metadata_module, config)\n     }\n \n     fn join_codegen("}, {"sha": "9ee564a9a541344a75a8a976430b086fd938db65", "filename": "src/num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -387,7 +387,7 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n                 let lhs = in_lhs.load_scalar(fx);\n                 let rhs = in_rhs.load_scalar(fx);\n \n-                return codegen_compare_bin_op(fx, bin_op, false, lhs, rhs);\n+                codegen_compare_bin_op(fx, bin_op, false, lhs, rhs)\n             }\n             BinOp::Offset => {\n                 let pointee_ty = in_lhs.layout().ty.builtin_deref(true).unwrap().ty;\n@@ -396,10 +396,10 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n                 let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n                 let base_val = base.load_scalar(fx);\n                 let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n-                return CValue::by_val(res, base.layout());\n+                CValue::by_val(res, base.layout())\n             }\n             _ => unreachable!(\"{:?}({:?}, {:?})\", bin_op, in_lhs, in_rhs),\n-        };\n+        }\n     } else {\n         let (lhs_ptr, lhs_extra) = in_lhs.load_scalar_pair(fx);\n         let (rhs_ptr, rhs_extra) = in_rhs.load_scalar_pair(fx);"}, {"sha": "855a0cc8e4a16e353b15f2f90ddd0c04bf3019a9", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826189ef51c4f0ad5f6e10d44cf8e9e7a229891e/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=826189ef51c4f0ad5f6e10d44cf8e9e7a229891e", "patch": "@@ -205,8 +205,8 @@ pub(crate) fn should_write_ir(tcx: TyCtxt<'_>) -> bool {\n     tcx.sess.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n }\n \n-pub(crate) fn write_ir_file<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn write_ir_file(\n+    tcx: TyCtxt<'_>,\n     name: &str,\n     write: impl FnOnce(&mut dyn Write) -> std::io::Result<()>,\n ) {"}]}