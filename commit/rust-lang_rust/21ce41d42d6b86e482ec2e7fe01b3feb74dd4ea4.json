{"sha": "21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxY2U0MWQ0MmQ2Yjg2ZTQ4MmVjMmU3ZmUwMWIzZmViNzRkZDRlYTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-10T14:50:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-11T12:20:33Z"}, "message": "extra: use a mutex to wrap linenoise calls and make them threadsafe.\n\nFixes #3921.", "tree": {"sha": "0d9f82bc7352ae3b0a913be17212f32beb0950f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9f82bc7352ae3b0a913be17212f32beb0950f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "html_url": "https://github.com/rust-lang/rust/commit/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb8aefed6994303aca9180958fcbd077c219cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb8aefed6994303aca9180958fcbd077c219cd1", "html_url": "https://github.com/rust-lang/rust/commit/5bb8aefed6994303aca9180958fcbd077c219cd1"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "f4ad07d464d02c43be7c68eb7f87757ccbffe951", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME #3921. This is unsafe because linenoise uses global mutable\n-// state without mutexes.\n-\n use std::c_str::ToCStr;\n use std::libc::{c_char, c_int};\n-use std::local_data;\n-use std::str;\n+use std::{local_data, str, rt};\n+use std::unstable::finally::Finally;\n \n #[cfg(stage0)]\n pub mod rustrt {\n@@ -28,6 +25,9 @@ pub mod rustrt {\n         fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n         fn linenoiseSetCompletionCallback(callback: *u8);\n         fn linenoiseAddCompletion(completions: *(), line: *c_char);\n+\n+        fn rust_take_linenoise_lock();\n+        fn rust_drop_linenoise_lock();\n     }\n }\n \n@@ -42,38 +42,53 @@ pub mod rustrt {\n     externfn!(fn linenoiseHistoryLoad(file: *c_char) -> c_int)\n     externfn!(fn linenoiseSetCompletionCallback(callback: extern \"C\" fn(*i8, *())))\n     externfn!(fn linenoiseAddCompletion(completions: *(), line: *c_char))\n+\n+    externfn!(fn rust_take_linenoise_lock())\n+    externfn!(fn rust_drop_linenoise_lock())\n+}\n+\n+macro_rules! locked {\n+    ($expr:expr) => {\n+        unsafe {\n+            // FIXME #9105: can't use a static mutex in pure Rust yet.\n+            rustrt::rust_take_linenoise_lock();\n+            let x = $expr;\n+            rustrt::rust_drop_linenoise_lock();\n+            x\n+        }\n+    }\n }\n \n /// Add a line to history\n-pub unsafe fn add_history(line: &str) -> bool {\n+pub fn add_history(line: &str) -> bool {\n     do line.with_c_str |buf| {\n-        rustrt::linenoiseHistoryAdd(buf) == 1 as c_int\n+        (locked!(rustrt::linenoiseHistoryAdd(buf))) == 1 as c_int\n     }\n }\n \n /// Set the maximum amount of lines stored\n-pub unsafe fn set_history_max_len(len: int) -> bool {\n-    rustrt::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n+pub fn set_history_max_len(len: int) -> bool {\n+    (locked!(rustrt::linenoiseHistorySetMaxLen(len as c_int))) == 1 as c_int\n }\n \n /// Save line history to a file\n-pub unsafe fn save_history(file: &str) -> bool {\n+pub fn save_history(file: &str) -> bool {\n     do file.with_c_str |buf| {\n-        rustrt::linenoiseHistorySave(buf) == 1 as c_int\n+        (locked!(rustrt::linenoiseHistorySave(buf))) == 1 as c_int\n     }\n }\n \n /// Load line history from a file\n-pub unsafe fn load_history(file: &str) -> bool {\n+pub fn load_history(file: &str) -> bool {\n     do file.with_c_str |buf| {\n-        rustrt::linenoiseHistoryLoad(buf) == 1 as c_int\n+        (locked!(rustrt::linenoiseHistoryLoad(buf))) == 1 as c_int\n     }\n }\n \n /// Print out a prompt and then wait for input and return it\n-pub unsafe fn read(prompt: &str) -> Option<~str> {\n+pub fn read(prompt: &str) -> Option<~str> {\n     do prompt.with_c_str |buf| {\n-        let line = rustrt::linenoise(buf);\n+        let line = locked!(rustrt::linenoise(buf));\n \n         if line.is_null() { None }\n         else { Some(str::raw::from_c_str(line)) }\n@@ -84,8 +99,13 @@ pub type CompletionCb = @fn(~str, @fn(~str));\n \n static complete_key: local_data::Key<@CompletionCb> = &local_data::Key;\n \n-/// Bind to the main completion callback\n-pub unsafe fn complete(cb: CompletionCb) {\n+/// Bind to the main completion callback.\n+///\n+/// The completion callback should not call any `extra::rl` functions\n+/// other than the closure that it receives as its second\n+/// argument. Calling such a function will deadlock on the mutex used\n+/// to ensure that the calls are thread-safe.\n+pub fn complete(cb: CompletionCb) {\n     local_data::set(complete_key, @cb);\n \n     extern fn callback(line: *c_char, completions: *()) {\n@@ -95,12 +115,16 @@ pub unsafe fn complete(cb: CompletionCb) {\n             unsafe {\n                 do cb(str::raw::from_c_str(line)) |suggestion| {\n                     do suggestion.with_c_str |buf| {\n+                        // This isn't locked, because `callback` gets\n+                        // called inside `rustrt::linenoise`, which\n+                        // *is* already inside the mutex, so\n+                        // re-locking would be a deadlock.\n                         rustrt::linenoiseAddCompletion(completions, buf);\n                     }\n                 }\n             }\n         }\n     }\n \n-    rustrt::linenoiseSetCompletionCallback(callback);\n+    locked!(rustrt::linenoiseSetCompletionCallback(callback));\n }"}, {"sha": "8d61a971157fc35e69687b423794dac6c797753e", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "patch": "@@ -355,12 +355,12 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n /// None if no input was read (e.g. EOF was reached).\n fn get_line(use_rl: bool, prompt: &str) -> Option<~str> {\n     if use_rl {\n-        let result = unsafe { rl::read(prompt) };\n+        let result = rl::read(prompt);\n \n         match result {\n             None => None,\n             Some(line) => {\n-                unsafe { rl::add_history(line) };\n+                rl::add_history(line);\n                 Some(line)\n             }\n         }\n@@ -525,14 +525,12 @@ pub fn main_args(args: &[~str]) {\n         println(\"unstable. If you encounter problems, please use the\");\n         println(\"compiler instead. Type :help for help.\");\n \n-        unsafe {\n-            do rl::complete |line, suggest| {\n-                if line.starts_with(\":\") {\n-                    suggest(~\":clear\");\n-                    suggest(~\":exit\");\n-                    suggest(~\":help\");\n-                    suggest(~\":load\");\n-                }\n+        do rl::complete |line, suggest| {\n+            if line.starts_with(\":\") {\n+                suggest(~\":clear\");\n+                suggest(~\":exit\");\n+                suggest(~\":help\");\n+                suggest(~\":load\");\n             }\n         }\n     }"}, {"sha": "1871e7f36b363a376591db071278e86e636a5280", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=21ce41d42d6b86e482ec2e7fe01b3feb74dd4ea4", "patch": "@@ -633,6 +633,18 @@ rust_drop_env_lock() {\n     env_lock.unlock();\n }\n \n+static lock_and_signal linenoise_lock;\n+\n+extern \"C\" CDECL void\n+rust_take_linenoise_lock() {\n+    linenoise_lock.lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_drop_linenoise_lock() {\n+    linenoise_lock.unlock();\n+}\n+\n extern \"C\" CDECL unsigned int\n rust_valgrind_stack_register(void *start, void *end) {\n   return VALGRIND_STACK_REGISTER(start, end);"}]}