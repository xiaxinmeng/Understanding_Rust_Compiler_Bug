{"sha": "b89c4f0a0529ca90dbe13d41fdd5e52331770900", "node_id": "C_kwDOAAsO6NoAKGI4OWM0ZjBhMDUyOWNhOTBkYmUxM2Q0MWZkZDVlNTIzMzE3NzA5MDA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-20T22:07:00Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-09T13:27:59Z"}, "message": "Implement postfix adjustment hints\n\nI'd say \"First stab at implementing...\" but I've been working on this\nfor a month already lol", "tree": {"sha": "015a8a739e51d6cdcda8200486949dc699f645b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015a8a739e51d6cdcda8200486949dc699f645b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b89c4f0a0529ca90dbe13d41fdd5e52331770900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b89c4f0a0529ca90dbe13d41fdd5e52331770900", "html_url": "https://github.com/rust-lang/rust/commit/b89c4f0a0529ca90dbe13d41fdd5e52331770900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b89c4f0a0529ca90dbe13d41fdd5e52331770900/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae659125a509967f09665b96d06f6ce6bf1ddd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae659125a509967f09665b96d06f6ce6bf1ddd1b", "html_url": "https://github.com/rust-lang/rust/commit/ae659125a509967f09665b96d06f6ce6bf1ddd1b"}], "stats": {"total": 273, "additions": 246, "deletions": 27}, "files": [{"sha": "7315a37ebc704c90552515d86062b76f80f39573", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -35,6 +35,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n+    pub adjustment_hints_postfix: bool,\n     pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n@@ -82,6 +83,7 @@ pub enum InlayKind {\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n     AdjustmentHint,\n+    AdjustmentHintPostfix,\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n@@ -446,6 +448,7 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n         adjustment_hints: AdjustmentHints::Never,\n+        adjustment_hints_postfix: false,\n         adjustment_hints_hide_outside_unsafe: false,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,"}, {"sha": "367bd2f6619efc72b96d959ddf69929bd22fc83e", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 225, "deletions": 27, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -5,7 +5,11 @@\n //! ```\n use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n use ide_db::RootDatabase;\n-use syntax::ast::{self, AstNode};\n+\n+use syntax::{\n+    ast::{self, make, AstNode},\n+    ted,\n+};\n \n use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n \n@@ -32,36 +36,47 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n     let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n-    let needs_parens = match parent {\n-        Some(parent) => {\n-            match parent {\n-                ast::Expr::AwaitExpr(_)\n-                | ast::Expr::CallExpr(_)\n-                | ast::Expr::CastExpr(_)\n-                | ast::Expr::FieldExpr(_)\n-                | ast::Expr::MethodCallExpr(_)\n-                | ast::Expr::TryExpr(_) => true,\n-                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n-                ast::Expr::RecordExpr(_) => false,\n-                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n-                _ => false,\n-            }\n-        }\n-        None => false,\n-    };\n-    if needs_parens {\n+\n+    let (needs_outer_parens, needs_inner_parens) =\n+        needs_parens_for_adjustment_hints(expr, config.adjustment_hints_postfix);\n+\n+    if needs_outer_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::OpeningParenthesis,\n             label: \"(\".into(),\n             tooltip: None,\n         });\n     }\n-    for adjustment in adjustments.into_iter().rev() {\n+\n+    if config.adjustment_hints_postfix && needs_inner_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::OpeningParenthesis,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n+    }\n+\n+    let (mut tmp0, mut tmp1);\n+    let iter: &mut dyn Iterator<Item = _> = if config.adjustment_hints_postfix {\n+        tmp0 = adjustments.into_iter();\n+        &mut tmp0\n+    } else {\n+        tmp1 = adjustments.into_iter().rev();\n+        &mut tmp1\n+    };\n+\n+    for adjustment in iter {\n         if adjustment.source == adjustment.target {\n             continue;\n         }\n@@ -97,12 +112,34 @@ pub(super) fn hints(\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n-            kind: InlayKind::AdjustmentHint,\n-            label: text.into(),\n+            kind: if config.adjustment_hints_postfix {\n+                InlayKind::AdjustmentHintPostfix\n+            } else {\n+                InlayKind::AdjustmentHint\n+            },\n+            label: if config.adjustment_hints_postfix {\n+                format!(\".{}\", text.trim_end()).into()\n+            } else {\n+                text.into()\n+            },\n             tooltip: None,\n         });\n     }\n-    if needs_parens {\n+    if !config.adjustment_hints_postfix && needs_inner_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::OpeningParenthesis,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n+    }\n+    if needs_outer_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::ClosingParenthesis,\n@@ -113,6 +150,69 @@ pub(super) fn hints(\n     Some(())\n }\n \n+/// Returns whatever we need to add paretheses on the inside and/or outside of `expr`,\n+/// if we are going to add (`postfix`) adjustments hints to it.\n+fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool, bool) {\n+    // This is a very miserable pile of hacks...\n+    //\n+    // `Expr::needs_parens_in` requires that the expression is the child of the other expression,\n+    // that is supposed to be its parent.\n+    //\n+    // But we want to check what would happen if we add `*`/`.*` to the inner expression.\n+    // To check for inner we need `` expr.needs_parens_in(`*expr`) ``,\n+    // to check for outer we need `` `*expr`.needs_parens_in(parent) ``,\n+    // where \"expr\" is the `expr` parameter, `*expr` is the editted `expr`,\n+    // and \"parent\" is the parent of the original expression...\n+    //\n+    // For this we utilize mutable mutable trees, which is a HACK, but it works.\n+\n+    // Make `&expr`/`expr?`\n+    let dummy_expr = {\n+        // `make::*` function go through a string, so they parse wrongly.\n+        // for example `` make::expr_try(`|| a`) `` would result in a\n+        // `|| (a?)` and not `(|| a)?`.\n+        //\n+        // Thus we need dummy parens to preserve the relationship we want.\n+        // The parens are then simply ignored by the following code.\n+        let dummy_paren = make::expr_paren(expr.clone());\n+        if postfix {\n+            make::expr_try(dummy_paren)\n+        } else {\n+            make::expr_ref(dummy_paren, false)\n+        }\n+    };\n+\n+    // Do the dark mutable tree magic.\n+    // This essentially makes `dummy_expr` and `expr` switch places (families),\n+    // so that `expr`'s parent is not `dummy_expr`'s parent.\n+    let dummy_expr = dummy_expr.clone_for_update();\n+    let expr = expr.clone_for_update();\n+    ted::replace(expr.syntax(), dummy_expr.syntax());\n+\n+    let parent = dummy_expr.syntax().parent();\n+    let expr = if postfix {\n+        let ast::Expr::TryExpr(e) = &dummy_expr else { unreachable!() };\n+        let Some(ast::Expr::ParenExpr(e)) = e.expr() else { unreachable!() };\n+\n+        e.expr().unwrap()\n+    } else {\n+        let ast::Expr::RefExpr(e) = &dummy_expr else { unreachable!() };\n+        let Some(ast::Expr::ParenExpr(e)) = e.expr() else { unreachable!() };\n+\n+        e.expr().unwrap()\n+    };\n+\n+    // At this point\n+    // - `parent`     is the parrent of the original expression\n+    // - `dummy_expr` is the original expression wrapped in the operator we want (`*`/`.*`)\n+    // - `expr`       is the clone of the original expression (with `dummy_expr` as the parent)\n+\n+    let needs_outer_parens = parent.map_or(false, |p| dummy_expr.needs_parens_in(p));\n+    let needs_inner_parens = expr.needs_parens_in(dummy_expr.syntax().clone());\n+\n+    (needs_outer_parens, needs_inner_parens)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n@@ -125,7 +225,7 @@ mod tests {\n         check_with_config(\n             InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n             r#\"\n-//- minicore: coerce_unsized\n+//- minicore: coerce_unsized, fn\n fn main() {\n     let _: u32         = loop {};\n                        //^^^^^^^<never-to-any>\n@@ -148,12 +248,16 @@ fn main() {\n                        //^^^^<fn-item-to-fn-pointer>\n     let _: unsafe fn() = main as fn();\n                        //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+                       //^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^)\n     let _: fn()        = || {};\n                        //^^^^^<closure-to-fn-pointer>\n     let _: unsafe fn() = || {};\n                        //^^^^^<closure-to-unsafe-fn-pointer>\n     let _: *const u32  = &mut 0u32 as *mut u32;\n                        //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+                       //^^^^^^^^^^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^^^^^^^^^^)\n     let _: &mut [_]    = &mut [0; 0];\n                        //^^^^^^^^^^^<unsize>\n                        //^^^^^^^^^^^&mut $\n@@ -206,6 +310,11 @@ fn main() {\n                                        //^^^^^^^<unsize>\n                                        //^^^^^^^&mut $\n                                        //^^^^^^^*\n+\n+    let _: &mut dyn Fn() = &mut || ();\n+                         //^^^^^^^^^^<unsize>\n+                         //^^^^^^^^^^&mut $\n+                         //^^^^^^^^^^*\n }\n \n #[derive(Copy, Clone)]\n@@ -215,12 +324,101 @@ impl Struct {\n     fn by_ref(&self) {}\n     fn by_ref_mut(&mut self) {}\n }\n-trait Trait {}\n-impl Trait for Struct {}\n \"#,\n         )\n     }\n \n+    #[test]\n+    fn adjustment_hints_postfix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_postfix: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: coerce_unsized, fn\n+fn main() {\n+\n+    Struct.consume();\n+    Struct.by_ref();\n+  //^^^^^^.&\n+    Struct.by_ref_mut();\n+  //^^^^^^.&mut\n+\n+    (&Struct).consume();\n+   //^^^^^^^(\n+   //^^^^^^^)\n+   //^^^^^^^.*\n+    (&Struct).by_ref();\n+\n+    (&mut Struct).consume();\n+   //^^^^^^^^^^^(\n+   //^^^^^^^^^^^)\n+   //^^^^^^^^^^^.*\n+    (&mut Struct).by_ref();\n+   //^^^^^^^^^^^(\n+   //^^^^^^^^^^^)\n+   //^^^^^^^^^^^.*\n+   //^^^^^^^^^^^.&\n+    (&mut Struct).by_ref_mut();\n+\n+    // Check that block-like expressions don't duplicate hints\n+    let _: &mut [u32] = (&mut []);\n+                       //^^^^^^^(\n+                       //^^^^^^^)\n+                       //^^^^^^^.*\n+                       //^^^^^^^.&mut\n+                       //^^^^^^^.<unsize>\n+    let _: &mut [u32] = { &mut [] };\n+                        //^^^^^^^(\n+                        //^^^^^^^)\n+                        //^^^^^^^.*\n+                        //^^^^^^^.&mut\n+                        //^^^^^^^.<unsize>\n+    let _: &mut [u32] = unsafe { &mut [] };\n+                               //^^^^^^^(\n+                               //^^^^^^^)\n+                               //^^^^^^^.*\n+                               //^^^^^^^.&mut\n+                               //^^^^^^^.<unsize>\n+    let _: &mut [u32] = if true {\n+        &mut []\n+      //^^^^^^^(\n+      //^^^^^^^)\n+      //^^^^^^^.*\n+      //^^^^^^^.&mut\n+      //^^^^^^^.<unsize>\n+    } else {\n+        loop {}\n+      //^^^^^^^.<never-to-any>\n+    };\n+    let _: &mut [u32] = match () { () => &mut [] }\n+                                       //^^^^^^^(\n+                                       //^^^^^^^)\n+                                       //^^^^^^^.*\n+                                       //^^^^^^^.&mut\n+                                       //^^^^^^^.<unsize>\n+\n+    let _: &mut dyn Fn() = &mut || ();\n+                         //^^^^^^^^^^(\n+                         //^^^^^^^^^^)\n+                         //^^^^^^^^^^.*\n+                         //^^^^^^^^^^.&mut\n+                         //^^^^^^^^^^.<unsize>\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Struct;\n+impl Struct {\n+    fn consume(self) {}\n+    fn by_ref(&self) {}\n+    fn by_ref_mut(&mut self) {}\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn never_to_never_is_never_shown() {\n         check_with_config("}, {"sha": "c6cca0d8698ef912034df7bf49d0a8678d933c01", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -115,6 +115,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     adjustment_hints: crate::AdjustmentHints::Never,\n+                    adjustment_hints_postfix: false,\n                     adjustment_hints_hide_outside_unsafe: false,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,"}, {"sha": "4d11a84091c54242ce29d085c1cebf45d54a8296", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -333,6 +333,8 @@ config_data! {\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n         inlayHints_expressionAdjustmentHints_hideOutsideUnsafe: bool = \"false\",\n+        /// Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\n+        inlayHints_expressionAdjustmentHints_postfix: bool = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1252,6 +1254,7 @@ impl Config {\n                 },\n                 AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n+            adjustment_hints_postfix: self.data.inlayHints_expressionAdjustmentHints_postfix,\n             adjustment_hints_hide_outside_unsafe: self\n                 .data\n                 .inlayHints_expressionAdjustmentHints_hideOutsideUnsafe,"}, {"sha": "e736b2ff9a3be63e62a0424151b5fa3d2ddc9f76", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -452,6 +452,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::ClosingParenthesis\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n@@ -465,6 +466,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::LifetimeHint\n             | InlayKind::ParameterHint => false,\n         }),\n@@ -475,6 +477,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::TypeHint\n             | InlayKind::DiscriminantHint\n             | InlayKind::ClosingBraceHint => false,\n@@ -493,6 +496,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,"}, {"sha": "60c16ecadf5e79aaa212df992274c65f7668d2c9", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -469,6 +469,11 @@ Whether to show inlay hints for type adjustments.\n --\n Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.postfix]]rust-analyzer.inlayHints.expressionAdjustmentHints.postfix (default: `false`)::\n++\n+--\n+Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "aeb1d97c5f6bbafbfb59b28ecc8c2b3f86f80bd4", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b89c4f0a0529ca90dbe13d41fdd5e52331770900/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b89c4f0a0529ca90dbe13d41fdd5e52331770900/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b89c4f0a0529ca90dbe13d41fdd5e52331770900", "patch": "@@ -1000,6 +1000,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.postfix\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\","}]}