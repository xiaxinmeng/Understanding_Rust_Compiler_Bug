{"sha": "a9dd4427333d410bebf8e0923d5907b2a31efb50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGQ0NDI3MzMzZDQxMGJlYmY4ZTA5MjNkNTkwN2IyYTMxZWZiNTA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-19T22:42:18Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Send the config from the client", "tree": {"sha": "02b7f03bd7db0331fa28f3c967eb33b9ae5c6e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b7f03bd7db0331fa28f3c967eb33b9ae5c6e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dd4427333d410bebf8e0923d5907b2a31efb50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4427333d410bebf8e0923d5907b2a31efb50", "html_url": "https://github.com/rust-lang/rust/commit/a9dd4427333d410bebf8e0923d5907b2a31efb50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4427333d410bebf8e0923d5907b2a31efb50/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019f269a0a4f42854c84e749fd5bb24177eafff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/019f269a0a4f42854c84e749fd5bb24177eafff9", "html_url": "https://github.com/rust-lang/rust/commit/019f269a0a4f42854c84e749fd5bb24177eafff9"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "0d0832c44fc77ae75494fe784a4b1c364c9303cf", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4427333d410bebf8e0923d5907b2a31efb50/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4427333d410bebf8e0923d5907b2a31efb50/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=a9dd4427333d410bebf8e0923d5907b2a31efb50", "patch": "@@ -5,6 +5,31 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n+export function configToOptions(config: Config): object {\n+    return {\n+        publishDecorations: !config.highlightingSemanticTokens,\n+        lruCapacity: config.lruCapacity,\n+\n+        inlayHintsType: config.inlayHints.typeHints,\n+        inlayHintsParameter: config.inlayHints.parameterHints,\n+        inlayHintsChaining: config.inlayHints.chainingHints,\n+        inlayHintsMaxLength: config.inlayHints.maxLength,\n+\n+        cargoWatchEnable: config.cargoWatchOptions.enable,\n+        cargoWatchArgs: config.cargoWatchOptions.arguments,\n+        cargoWatchCommand: config.cargoWatchOptions.command,\n+        cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n+\n+        excludeGlobs: config.excludeGlobs,\n+        useClientWatching: config.useClientWatching,\n+        featureFlags: config.featureFlags,\n+        withSysroot: config.withSysroot,\n+        cargoFeatures: config.cargoFeatures,\n+        rustfmtArgs: config.rustfmtArgs,\n+        vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n+    };\n+}\n+\n export async function createClient(config: Config, serverPath: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -22,32 +47,10 @@ export async function createClient(config: Config, serverPath: string): Promise<\n     const traceOutputChannel = vscode.window.createOutputChannel(\n         'Rust Analyzer Language Server Trace',\n     );\n-    const cargoWatchOpts = config.cargoWatchOptions;\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: {\n-            publishDecorations: !config.highlightingSemanticTokens,\n-            lruCapacity: config.lruCapacity,\n-\n-            inlayHintsType: config.inlayHints.typeHints,\n-            inlayHintsParameter: config.inlayHints.parameterHints,\n-            inlayHintsChaining: config.inlayHints.chainingHints,\n-            inlayHintsMaxLength: config.inlayHints.maxLength,\n-\n-            cargoWatchEnable: cargoWatchOpts.enable,\n-            cargoWatchArgs: cargoWatchOpts.arguments,\n-            cargoWatchCommand: cargoWatchOpts.command,\n-            cargoWatchAllTargets: cargoWatchOpts.allTargets,\n-\n-            excludeGlobs: config.excludeGlobs,\n-            useClientWatching: config.useClientWatching,\n-            featureFlags: config.featureFlags,\n-            withSysroot: config.withSysroot,\n-            cargoFeatures: config.cargoFeatures,\n-            rustfmtArgs: config.rustfmtArgs,\n-            vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n-        },\n+        initializationOptions: configToOptions(config),\n         traceOutputChannel,\n         middleware: {\n             // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576"}, {"sha": "934638c6df9e641e770249653aefd6b539e7dee9", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4427333d410bebf8e0923d5907b2a31efb50/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4427333d410bebf8e0923d5907b2a31efb50/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=a9dd4427333d410bebf8e0923d5907b2a31efb50", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n-import { createClient } from './client';\n+import { createClient, configToOptions } from './client';\n import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n@@ -20,6 +20,7 @@ export class Ctx {\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();\n+        client.onRequest('workspace/configuration', _ => [configToOptions(config)]);\n         return res;\n     }\n "}]}