{"sha": "8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODc4NDJlYjRiZGM1OWQ0MDdmZmNhZTI5YjBiNWU4YTRhYmIxYmU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-12T17:31:00Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-22T16:57:43Z"}, "message": "Use `Body` everywhere", "tree": {"sha": "1345af0a56c022a578d691f24ff29b1ceb02243d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1345af0a56c022a578d691f24ff29b1ceb02243d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "html_url": "https://github.com/rust-lang/rust/commit/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64db428967131be1f3966b82748fe8818eadb25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64db428967131be1f3966b82748fe8818eadb25b", "html_url": "https://github.com/rust-lang/rust/commit/64db428967131be1f3966b82748fe8818eadb25b"}], "stats": {"total": 541, "additions": 224, "deletions": 317}, "files": [{"sha": "dfb1656a6e0cb820d2aefd8aff04f392fc0f3d2f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     // a loop.\n     fn maybe_sideeffect<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        mir: mir::ReadOnlyBodyAndCache<'tcx, 'tcx>,\n+        mir: &'tcx mir::Body<'tcx>,\n         bx: &mut Bx,\n         targets: &[mir::BasicBlock],\n     ) {"}, {"sha": "cb6d2d297cd735afccac48dca0922c26b01be707", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -21,7 +21,7 @@ use self::operand::{OperandRef, OperandValue};\n pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n-    mir: mir::ReadOnlyBodyAndCache<'tcx, 'tcx>,\n+    mir: &'tcx mir::Body<'tcx>,\n \n     debug_context: Option<FunctionDebugContext<Bx::DIScope>>,\n \n@@ -169,7 +169,6 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         .collect();\n \n     let (landing_pads, funclets) = create_funclets(&mir, &mut bx, &cleanup_kinds, &block_bxs);\n-    let mir_body: &mir::Body<'_> = *mir;\n     let mut fx = FunctionCx {\n         instance,\n         mir,\n@@ -197,7 +196,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let args = arg_local_refs(&mut bx, &mut fx, &memory_locals);\n \n         let mut allocate_local = |local| {\n-            let decl = &mir_body.local_decls[local];\n+            let decl = &mir.local_decls[local];\n             let layout = bx.layout_of(fx.monomorphize(&decl.ty));\n             assert!(!layout.ty.has_erasable_regions());\n \n@@ -223,7 +222,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let retptr = allocate_local(mir::RETURN_PLACE);\n         iter::once(retptr)\n             .chain(args.into_iter())\n-            .chain(mir_body.vars_and_temps_iter().map(allocate_local))\n+            .chain(mir.vars_and_temps_iter().map(allocate_local))\n             .collect()\n     };\n \n@@ -235,8 +234,8 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.br(fx.blocks[mir::START_BLOCK]);\n     }\n \n-    let rpo = traversal::reverse_postorder(&mir_body);\n-    let mut visited = BitSet::new_empty(mir_body.basic_blocks().len());\n+    let rpo = traversal::reverse_postorder(&mir);\n+    let mut visited = BitSet::new_empty(mir.basic_blocks().len());\n \n     // Codegen the body of each block using reverse postorder\n     for (bb, _) in rpo {\n@@ -246,7 +245,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     // Remove blocks that haven't been visited, or have no\n     // predecessors.\n-    for bb in mir_body.basic_blocks().indices() {\n+    for bb in mir.basic_blocks().indices() {\n         // Unreachable block\n         if !visited.contains(bb.index()) {\n             debug!(\"codegen_mir: block {:?} was not visited\", bb);"}, {"sha": "1fb260f66fa3bb47223560a5998e86d0beb30a84", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::middle::cstore::{CrateSource, ExternCrate};\n use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLibrary};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n-use rustc_middle::mir::{self, interpret, BodyAndCache, Promoted};\n+use rustc_middle::mir::{self, interpret, Body, Promoted};\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util::common::record_time;\n@@ -1099,40 +1099,28 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         !self.is_proc_macro(id) && self.root.tables.mir.get(self, id).is_some()\n     }\n \n-    fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> BodyAndCache<'tcx> {\n-        let mut cache = self\n-            .root\n+    fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+        self.root\n             .tables\n             .mir\n             .get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n                 bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })\n-            .decode((self, tcx));\n-        cache.ensure_predecessors();\n-        cache\n+            .decode((self, tcx))\n     }\n \n-    fn get_promoted_mir(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        id: DefIndex,\n-    ) -> IndexVec<Promoted, BodyAndCache<'tcx>> {\n-        let mut cache = self\n-            .root\n+    fn get_promoted_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> IndexVec<Promoted, Body<'tcx>> {\n+        self.root\n             .tables\n             .promoted_mir\n             .get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n                 bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })\n-            .decode((self, tcx));\n-        for body in cache.iter_mut() {\n-            body.ensure_predecessors();\n-        }\n-        cache\n+            .decode((self, tcx))\n     }\n \n     fn mir_const_qualif(&self, id: DefIndex) -> mir::ConstQualifs {"}, {"sha": "e2d979ae48828adef114a5eb9315632ccddc97ec", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -275,8 +275,8 @@ define_tables! {\n     // Also, as an optimization, a missing entry indicates an empty `&[]`.\n     inferred_outlives: Table<DefIndex, Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>,\n     super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n-    mir: Table<DefIndex, Lazy!(mir::BodyAndCache<'tcx>)>,\n-    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>>)>,\n+    mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n+    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "0409f1f38e14a67a6538cae69b3bb9bdab4f9f60", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -15,17 +15,17 @@ macro_rules! arena_types {\n             [] generics: rustc_middle::ty::Generics,\n             [] trait_def: rustc_middle::ty::TraitDef,\n             [] adt_def: rustc_middle::ty::AdtDef,\n-            [] steal_mir: rustc_middle::ty::steal::Steal<rustc_middle::mir::BodyAndCache<$tcx>>,\n-            [] mir: rustc_middle::mir::BodyAndCache<$tcx>,\n+            [] steal_mir: rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n+            [] mir: rustc_middle::mir::Body<$tcx>,\n             [] steal_promoted: rustc_middle::ty::steal::Steal<\n                 rustc_index::vec::IndexVec<\n                     rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::BodyAndCache<$tcx>\n+                    rustc_middle::mir::Body<$tcx>\n                 >\n             >,\n             [] promoted: rustc_index::vec::IndexVec<\n                 rustc_middle::mir::Promoted,\n-                rustc_middle::mir::BodyAndCache<$tcx>\n+                rustc_middle::mir::Body<$tcx>\n             >,\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>,\n             [decode] borrowck_result: rustc_middle::mir::BorrowCheckResult<$tcx>,"}, {"sha": "edd9f8803b0cf21a587d7c775f0c58e9d3122f51", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -65,15 +65,6 @@ use rustc_span::Span;\n // variant argument) that does not require visiting, as in\n // `is_cleanup` above.\n \n-macro_rules! body_type {\n-    (mut $tcx:lifetime) => {\n-        &mut BodyAndCache<$tcx>\n-    };\n-    ($tcx:lifetime) => {\n-        &Body<$tcx>\n-    };\n-}\n-\n macro_rules! make_mir_visitor {\n     ($visitor_trait_name:ident, $($mutability:ident)?) => {\n         pub trait $visitor_trait_name<'tcx> {\n@@ -82,7 +73,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_body(\n                 &mut self,\n-                body: body_type!($($mutability)? 'tcx)\n+                body: &$($mutability)? Body<'tcx>,\n             ) {\n                 self.super_body(body);\n             }\n@@ -254,7 +245,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_body(\n                 &mut self,\n-                $($mutability)? body: body_type!($($mutability)? 'tcx)\n+                body: &$($mutability)? Body<'tcx>,\n             ) {\n                 let span = body.span;\n                 if let Some(yield_ty) = &$($mutability)? body.yield_ty {\n@@ -275,7 +266,6 @@ macro_rules! make_mir_visitor {\n                     self.visit_basic_block_data(bb, data);\n                 }\n \n-                let body: & $($mutability)? Body<'_> = & $($mutability)? body;\n                 for scope in &$($mutability)? body.source_scopes {\n                     self.visit_source_scope_data(scope);\n                 }\n@@ -819,10 +809,14 @@ macro_rules! make_mir_visitor {\n \n             fn visit_location(\n                 &mut self,\n-                body: body_type!($($mutability)? 'tcx),\n+                body: &$($mutability)? Body<'tcx>,\n                 location: Location\n             ) {\n-                let basic_block = & $($mutability)? body[location.block];\n+                macro_rules! basic_blocks {\n+                    (mut) => (body.basic_blocks_mut());\n+                    () => (body.basic_blocks());\n+                };\n+                let basic_block = & $($mutability)? basic_blocks!($($mutability)?)[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n                         self.visit_terminator(terminator, location)"}, {"sha": "c7eaf9cdbd0123d3d205f8530a36f4dbf17191d0", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -170,56 +170,46 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(_: DefId) -> &'tcx Steal<mir::BodyAndCache<'tcx>> {\n+        query mir_built(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n             desc { \"building MIR for\" }\n         }\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const evaluation.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(_: DefId) -> &'tcx Steal<mir::BodyAndCache<'tcx>> {\n+        query mir_const(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n         }\n \n         query mir_validated(_: DefId) ->\n             (\n-                &'tcx Steal<mir::BodyAndCache<'tcx>>,\n-                &'tcx Steal<IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>>>\n+                &'tcx Steal<mir::Body<'tcx>>,\n+                &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n             no_hash\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> &'tcx mir::BodyAndCache<'tcx> {\n+        query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n-                let mir: Option<crate::mir::BodyAndCache<'tcx>>\n+                let mir: Option<crate::mir::Body<'tcx>>\n                     = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n-                mir.map(|x| {\n-                    let cache = tcx.arena.alloc(x);\n-                    cache.ensure_predecessors();\n-                    &*cache\n-                })\n+                mir.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n \n-        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>> {\n+        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n                 let promoted: Option<\n                     rustc_index::vec::IndexVec<\n                         crate::mir::Promoted,\n-                        crate::mir::BodyAndCache<'tcx>\n+                        crate::mir::Body<'tcx>\n                     >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n-                promoted.map(|p| {\n-                    let cache = tcx.arena.alloc(p);\n-                    for body in cache.iter_mut() {\n-                        body.ensure_predecessors();\n-                    }\n-                    &*cache\n-                })\n+                promoted.map(|p| &*tcx.arena.alloc(p))\n             }\n         }\n     }\n@@ -618,7 +608,7 @@ rustc_queries! {\n         /// in the case of closures, this will be redirected to the enclosing function.\n         query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n-        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::BodyAndCache<'tcx> {\n+        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Body<'tcx> {\n             desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n         }\n "}, {"sha": "7f15179f7074f768f8c7af83f790d84d64e255a2", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -14,9 +14,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::interpret::{Allocation, ConstValue, Scalar};\n-use crate::mir::{\n-    interpret, BodyAndCache, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n-};\n+use crate::mir::{interpret, Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n use crate::ty::query;\n@@ -993,21 +991,21 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn alloc_steal_mir(self, mir: BodyAndCache<'tcx>) -> &'tcx Steal<BodyAndCache<'tcx>> {\n+    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {\n         self.arena.alloc(Steal::new(mir))\n     }\n \n     pub fn alloc_steal_promoted(\n         self,\n-        promoted: IndexVec<Promoted, BodyAndCache<'tcx>>,\n-    ) -> &'tcx Steal<IndexVec<Promoted, BodyAndCache<'tcx>>> {\n+        promoted: IndexVec<Promoted, Body<'tcx>>,\n+    ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n         self.arena.alloc(Steal::new(promoted))\n     }\n \n     pub fn intern_promoted(\n         self,\n-        promoted: IndexVec<Promoted, BodyAndCache<'tcx>>,\n-    ) -> &'tcx IndexVec<Promoted, BodyAndCache<'tcx>> {\n+        promoted: IndexVec<Promoted, Body<'tcx>>,\n+    ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n         self.arena.alloc(promoted)\n     }\n "}, {"sha": "97bc3fdb100a1f74699bf48cca378818b3fbe22b", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -11,8 +11,8 @@ use crate::infer::canonical::Canonical;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::interpret::ErrorHandled;\n+use crate::mir::Body;\n use crate::mir::GeneratorLayout;\n-use crate::mir::ReadOnlyBodyAndCache;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n@@ -2808,17 +2808,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n-    pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> ReadOnlyBodyAndCache<'tcx, 'tcx> {\n+    pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(did) => self.optimized_mir(did).unwrap_read_only(),\n+            ty::InstanceDef::Item(did) => self.optimized_mir(did),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)\n             | ty::InstanceDef::FnPtrShim(..)\n             | ty::InstanceDef::Virtual(..)\n             | ty::InstanceDef::ClosureOnceShim { .. }\n             | ty::InstanceDef::DropGlue(..)\n-            | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance).unwrap_read_only(),\n+            | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),\n         }\n     }\n "}, {"sha": "ef9af7bace96f4f1af8109c01a0bd34328281c59", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -8,7 +8,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{self, Body, Local, Location, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::fmt;\n use std::ops::Index;\n@@ -90,7 +90,7 @@ crate enum LocalsStateAtExit {\n impl LocalsStateAtExit {\n     fn build(\n         locals_are_invalidated_at_exit: bool,\n-        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+        body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n     ) -> Self {\n         struct HasStorageDead(BitSet<Local>);\n@@ -122,7 +122,7 @@ impl LocalsStateAtExit {\n impl<'tcx> BorrowSet<'tcx> {\n     pub fn build(\n         tcx: TyCtxt<'tcx>,\n-        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+        body: &Body<'tcx>,\n         locals_are_invalidated_at_exit: bool,\n         move_data: &MoveData<'tcx>,\n     ) -> Self {"}, {"sha": "22947610448d3123c759daae2898cedf58d016e3", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,3 +1,4 @@\n+use either::Either;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -1262,8 +1263,23 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     fn get_moved_indexes(&mut self, location: Location, mpi: MovePathIndex) -> Vec<MoveSite> {\n+        fn predecessor_locations(\n+            body: &'a mir::Body<'tcx>,\n+            location: Location,\n+        ) -> impl Iterator<Item = Location> + 'a {\n+            if location.statement_index == 0 {\n+                let predecessors = body.predecessors_for(location.block).to_vec();\n+                Either::Left(predecessors.into_iter().map(move |bb| body.terminator_loc(bb)))\n+            } else {\n+                Either::Right(std::iter::once(Location {\n+                    statement_index: location.statement_index - 1,\n+                    ..location\n+                }))\n+            }\n+        }\n+\n         let mut stack = Vec::new();\n-        stack.extend(self.body.predecessor_locations(location).map(|predecessor| {\n+        stack.extend(predecessor_locations(self.body, location).map(|predecessor| {\n             let is_back_edge = location.dominates(predecessor, &self.dominators);\n             (predecessor, is_back_edge)\n         }));\n@@ -1345,7 +1361,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 continue 'dfs;\n             }\n \n-            stack.extend(self.body.predecessor_locations(location).map(|predecessor| {\n+            stack.extend(predecessor_locations(self.body, location).map(|predecessor| {\n                 let back_edge = location.dominates(predecessor, &self.dominators);\n                 (predecessor, is_back_edge || back_edge)\n             }));"}, {"sha": "a8c7a959b28e23b67e5d9d301f003e991e650c29", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::TerminatorKind;\n-use rustc_middle::mir::{BasicBlock, Body, Location, Place, ReadOnlyBodyAndCache, Rvalue};\n+use rustc_middle::mir::{BasicBlock, Body, Location, Place, Rvalue};\n use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n@@ -18,7 +18,7 @@ pub(super) fn generate_invalidates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n     if all_facts.is_none() {\n@@ -37,7 +37,7 @@ pub(super) fn generate_invalidates<'tcx>(\n             body: &body,\n             dominators,\n         };\n-        ig.visit_body(&body);\n+        ig.visit_body(body);\n     }\n }\n "}, {"sha": "a330dc95f239a58060972fea6f18a24d3c75f9de", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -10,8 +10,8 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::{\n-    read_only, traversal, Body, BodyAndCache, ClearCrossCrate, Local, Location, Mutability,\n-    Operand, Place, PlaceElem, PlaceRef, ReadOnlyBodyAndCache,\n+    traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n+    PlaceRef,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n@@ -106,7 +106,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> &BorrowCheckResult<'_> {\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n-    input_promoted: &IndexVec<Promoted, BodyAndCache<'tcx>>,\n+    input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n     def_id: DefId,\n ) -> BorrowCheckResult<'tcx> {\n     debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n@@ -168,13 +168,11 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // requires first making our own copy of the MIR. This copy will\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n-    let body_clone: Body<'tcx> = input_body.clone();\n+    let mut body = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let mut body = BodyAndCache::new(body_clone);\n     let free_regions =\n         nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n-    let body = read_only!(body); // no further changes\n-    let promoted: IndexVec<_, _> = promoted.iter_mut().map(|body| read_only!(body)).collect();\n+    let body = &body; // no further changes\n \n     let location_table = &LocationTable::new(&body);\n \n@@ -415,7 +413,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n-    body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n+    body: &'cx Body<'tcx>,\n     mir_def_id: DefId,\n     move_data: &'cx MoveData<'tcx>,\n \n@@ -952,7 +950,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut error_reported = false;\n         let tcx = self.infcx.tcx;\n         let body = self.body;\n-        let body: &Body<'_> = &body;\n         let borrow_set = self.borrow_set.clone();\n \n         // Use polonius output if it has been enabled."}, {"sha": "141ed00e789dfb0cfd0fb7c2efcc6b7d778bcfe9", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -6,8 +6,8 @@ use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{\n-    BasicBlock, Body, BodyAndCache, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind,\n-    Location, Promoted, ReadOnlyBodyAndCache,\n+    BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n+    Promoted,\n };\n use rustc_middle::ty::{self, RegionKind, RegionVid};\n use rustc_span::symbol::sym;\n@@ -60,8 +60,8 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n-    promoted: &mut IndexVec<Promoted, BodyAndCache<'tcx>>,\n+    body: &mut Body<'tcx>,\n+    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n@@ -159,8 +159,8 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n+    body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'tcx>,\n     flow_inits: &mut ResultsCursor<'cx, 'tcx, MaybeInitializedPlaces<'cx, 'tcx>>,"}, {"sha": "a2475e0ff29fe3dce7236caa8c0e1398f355b53e", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -10,7 +10,7 @@\n use super::MirBorrowckCtxt;\n \n use rustc_hir as hir;\n-use rustc_middle::mir::{Place, PlaceRef, ProjectionElem, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{Body, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, TyCtxt};\n \n pub trait IsPrefixOf<'tcx> {\n@@ -26,7 +26,7 @@ impl<'tcx> IsPrefixOf<'tcx> for PlaceRef<'tcx> {\n }\n \n pub(super) struct Prefixes<'cx, 'tcx> {\n-    body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n+    body: &'cx Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,\n     next: Option<PlaceRef<'tcx>>,"}, {"sha": "57a3fa6f79b5043a70c2cac1fac146541f58dfba", "filename": "src/librustc_mir/borrow_check/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{HybridBitSet, SparseBitMatrix};\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::{BasicBlock, Body, Location, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{BasicBlock, Body, Location};\n use rustc_middle::ty::{self, RegionVid};\n use std::fmt::Debug;\n use std::rc::Rc;\n@@ -80,7 +80,7 @@ impl RegionValueElements {\n     /// Pushes all predecessors of `index` onto `stack`.\n     crate fn push_predecessors(\n         &self,\n-        body: ReadOnlyBodyAndCache<'_, '_>,\n+        body: &Body<'_>,\n         index: PointIndex,\n         stack: &mut Vec<PointIndex>,\n     ) {"}, {"sha": "5956896881941b9037de272a8ce8f935905e3aa4", "filename": "src/librustc_mir/borrow_check/renumber.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,16 +1,16 @@\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n-use rustc_middle::mir::{BodyAndCache, Location, PlaceElem, Promoted};\n+use rustc_middle::mir::{Body, Location, PlaceElem, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n pub fn renumber_mir<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n-    promoted: &mut IndexVec<Promoted, BodyAndCache<'tcx>>,\n+    body: &mut Body<'tcx>,\n+    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);"}, {"sha": "0fdf96710c6e8db0701a7fb87779e6010bacca6c", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::vec_linked_list as vll;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n-use rustc_middle::mir::{Local, Location, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{Body, Local, Location};\n \n use crate::util::liveness::{categorize, DefUse};\n \n@@ -62,7 +62,7 @@ impl LocalUseMap {\n     crate fn build(\n         live_locals: &Vec<Local>,\n         elements: &RegionValueElements,\n-        body: ReadOnlyBodyAndCache<'_, '_>,\n+        body: &Body<'_>,\n     ) -> Self {\n         let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n         let mut local_use_map = LocalUseMap {"}, {"sha": "717bfb8fe7de00c9c1f65e9368e26218b545665a", "filename": "src/librustc_mir/borrow_check/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::mir::{Body, Local, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::rc::Rc;\n \n@@ -32,7 +32,7 @@ mod trace;\n /// performed before\n pub(super) fn generate<'mir, 'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,"}, {"sha": "2e033896ce15dbf93dafbb9e9d4281db2aebceb6", "filename": "src/librustc_mir/borrow_check/type_check/liveness/polonius.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -3,7 +3,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::{LookupResult, MoveData};\n use crate::util::liveness::{categorize, DefUse};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{Local, Location, Place, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{Body, Local, Location, Place};\n use rustc_middle::ty::subst::GenericArg;\n \n use super::TypeChecker;\n@@ -85,7 +85,7 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n \n pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     location_table: &LocationTable,\n     move_data: &MoveData<'_>,\n     dropped_at: &mut Vec<(Local, Location)>,"}, {"sha": "af09dc5b8039e034abd8fea7d9bee47bf6c89807", "filename": "src/librustc_mir/borrow_check/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::HybridBitSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n-use rustc_middle::mir::{BasicBlock, ConstraintCategory, Local, Location, ReadOnlyBodyAndCache};\n+use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n@@ -37,7 +37,7 @@ use crate::borrow_check::{\n /// this respects `#[may_dangle]` annotations).\n pub(super) fn trace(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -76,7 +76,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     elements: &'me RegionValueElements,\n \n     /// MIR we are analyzing.\n-    body: ReadOnlyBodyAndCache<'me, 'tcx>,\n+    body: &'me Body<'tcx>,\n \n     /// Mapping to/from the various indices used for initialization tracking.\n     move_data: &'me MoveData<'tcx>,"}, {"sha": "796efd2bab976949c1ed5ad91ae39a958e70419f", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -122,8 +122,8 @@ mod relate_tys;\n pub(crate) fn type_check<'mir, 'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n+    body: &Body<'tcx>,\n+    promoted: &IndexVec<Promoted, Body<'tcx>>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -190,8 +190,8 @@ fn type_check_internal<'a, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: ReadOnlyBodyAndCache<'a, 'tcx>,\n-    promoted: &'a IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n+    body: &'a Body<'tcx>,\n+    promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -266,7 +266,7 @@ enum FieldAccessError {\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n-    promoted: &'b IndexVec<Promoted, ReadOnlyBodyAndCache<'b, 'tcx>>,\n+    promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -320,7 +320,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.literal.val {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n-                                     promoted: &ReadOnlyBodyAndCache<'_, 'tcx>,\n+                                     promoted: &Body<'tcx>,\n                                      ty,\n                                      san_ty| {\n                         if let Err(terr) = verifier.cx.eq_types(\n@@ -451,7 +451,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     fn new(\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n         body: &'b Body<'tcx>,\n-        promoted: &'b IndexVec<Promoted, ReadOnlyBodyAndCache<'b, 'tcx>>,\n+        promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     ) -> Self {\n         TypeVerifier {\n             body,\n@@ -525,11 +525,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         place_ty\n     }\n \n-    fn sanitize_promoted(\n-        &mut self,\n-        promoted_body: ReadOnlyBodyAndCache<'b, 'tcx>,\n-        location: Location,\n-    ) {\n+    fn sanitize_promoted(&mut self, promoted_body: &'b Body<'tcx>, location: Location) {\n         // Determine the constraints from the promoted MIR by running the type\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location.\n@@ -1396,12 +1392,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn check_stmt(\n-        &mut self,\n-        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n-        stmt: &Statement<'tcx>,\n-        location: Location,\n-    ) {\n+    fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {\n         debug!(\"check_stmt: {:?}\", stmt);\n         let tcx = self.tcx();\n         match stmt.kind {\n@@ -1973,12 +1964,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    fn check_rvalue(\n-        &mut self,\n-        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n-        rvalue: &Rvalue<'tcx>,\n-        location: Location,\n-    ) {\n+    fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n \n         match rvalue {\n@@ -2712,7 +2698,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         })\n     }\n \n-    fn typeck_mir(&mut self, body: ReadOnlyBodyAndCache<'_, 'tcx>) {\n+    fn typeck_mir(&mut self, body: &Body<'tcx>) {\n         self.last_span = body.span;\n         debug!(\"run_on_mir: {:?}\", body.span);\n "}, {"sha": "5d130213e1f92b5c6c6badaaf732586d8e22173f", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -84,13 +84,13 @@ type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorro\n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n pub struct MaybeRequiresStorage<'mir, 'tcx> {\n-    body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n+    body: &'mir Body<'tcx>,\n     borrowed_locals: RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n }\n \n impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     pub fn new(\n-        body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n+        body: &'mir Body<'tcx>,\n         borrowed_locals: &'mir Results<'tcx, MaybeBorrowedLocals>,\n     ) -> Self {\n         MaybeRequiresStorage {"}, {"sha": "ae4ad49fe667ff09f959ed17c61f4b79f1f25c04", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -405,7 +405,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n         promoted: Option<mir::Promoted>,\n-    ) -> InterpResult<'tcx, mir::ReadOnlyBodyAndCache<'tcx, 'tcx>> {\n+    ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n         if did.is_local() && self.tcx.has_typeck_tables(did) {\n@@ -415,12 +415,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(self.tcx.promoted_mir(did)[promoted].unwrap_read_only());\n+            return Ok(&self.tcx.promoted_mir(did)[promoted]);\n         }\n         match instance {\n             ty::InstanceDef::Item(def_id) => {\n                 if self.tcx.is_mir_available(did) {\n-                    Ok(self.tcx.optimized_mir(did).unwrap_read_only())\n+                    Ok(self.tcx.optimized_mir(did))\n                 } else {\n                     throw_unsup!(NoMirFor(def_id))\n                 }"}, {"sha": "6dc6935179be159a32fe026fd93c95f5c25465da", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -26,7 +26,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx BodyAndCache<'tcx> {\n+fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n     debug!(\"make_shim({:?})\", instance);\n \n     let mut result = match instance {\n@@ -128,7 +128,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n-    result.ensure_predecessors();\n     tcx.arena.alloc(result)\n }\n \n@@ -168,11 +167,7 @@ fn local_decls_for_sig<'tcx>(\n         .collect()\n }\n \n-fn build_drop_shim<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-    ty: Option<Ty<'tcx>>,\n-) -> BodyAndCache<'tcx> {\n+fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>) -> Body<'tcx> {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n     // Check if this is a generator, if so, return the drop glue for it\n@@ -204,9 +199,7 @@ fn build_drop_shim<'tcx>(\n     block(&mut blocks, TerminatorKind::Goto { target: return_block });\n     block(&mut blocks, TerminatorKind::Return);\n \n-    let body = new_body(blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);\n-\n-    let mut body = BodyAndCache::new(body);\n+    let mut body = new_body(blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);\n \n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n@@ -320,11 +313,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Builds a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-    self_ty: Ty<'tcx>,\n-) -> BodyAndCache<'tcx> {\n+fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> Body<'tcx> {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n \n     let param_env = tcx.param_env(def_id);\n@@ -348,7 +337,7 @@ fn build_clone_shim<'tcx>(\n         _ => bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty),\n     };\n \n-    BodyAndCache::new(builder.into_mir())\n+    builder.into_mir()\n }\n \n struct CloneShimBuilder<'tcx> {\n@@ -671,7 +660,7 @@ fn build_call_shim<'tcx>(\n     rcvr_adjustment: Option<Adjustment>,\n     call_kind: CallKind,\n     untuple_args: Option<&[Ty<'tcx>]>,\n-) -> BodyAndCache<'tcx> {\n+) -> Body<'tcx> {\n     debug!(\n         \"build_call_shim(instance={:?}, rcvr_adjustment={:?}, \\\n             call_kind={:?}, untuple_args={:?})\",\n@@ -835,10 +824,11 @@ fn build_call_shim<'tcx>(\n     if let Abi::RustCall = sig.abi {\n         body.spread_arg = Some(Local::new(sig.inputs().len()));\n     }\n-    BodyAndCache::new(body)\n+\n+    body\n }\n \n-pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyAndCache<'_> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span =\n@@ -905,7 +895,5 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyAndCache<'_> {\n         |_, _| Ok(()),\n     );\n \n-    let mut body = BodyAndCache::new(body);\n-    body.ensure_predecessors();\n     tcx.arena.alloc(body)\n }"}, {"sha": "33859115359e0ce46cd42f0c7a3c519638368580", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -31,13 +31,13 @@ pub use self::AddCallGuards::*;\n  */\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         self.add_call_guards(body);\n     }\n }\n \n impl AddCallGuards {\n-    pub fn add_call_guards(&self, body: &mut BodyAndCache<'_>) {\n+    pub fn add_call_guards(&self, body: &mut Body<'_>) {\n         let pred_count: IndexVec<_, _> = body.predecessors().iter().map(|ps| ps.len()).collect();\n \n         // We need a place to store the new blocks generated"}, {"sha": "39ce2340aed2198a67a46754a440dd01f15c023c", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -40,17 +40,13 @@ use crate::util::patch::MirPatch;\n pub struct AddMovesForPackedDrops;\n \n impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, body.span);\n         add_moves_for_packed_drops(tcx, body, src.def_id());\n     }\n }\n \n-pub fn add_moves_for_packed_drops<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n-    def_id: DefId,\n-) {\n+pub fn add_moves_for_packed_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, def_id: DefId) {\n     let patch = add_moves_for_packed_drops_patch(tcx, body, def_id);\n     patch.apply(body);\n }"}, {"sha": "6d5853def1e9c8096f28e9c7eb1d9b9f245a5a54", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -58,7 +58,7 @@ fn may_be_reference(ty: Ty<'tcx>) -> bool {\n }\n \n impl<'tcx> MirPass<'tcx> for AddRetag {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n             return;\n         }"}, {"sha": "8aac5c791ecd25d3c12ace23fd565848230b5e77", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -21,19 +21,15 @@ pub mod validation;\n /// Information about the item currently being const-checked, as well as a reference to the global\n /// context.\n pub struct Item<'mir, 'tcx> {\n-    pub body: mir::ReadOnlyBodyAndCache<'mir, 'tcx>,\n+    pub body: &'mir mir::Body<'tcx>,\n     pub tcx: TyCtxt<'tcx>,\n     pub def_id: DefId,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub const_kind: Option<ConstKind>,\n }\n \n impl Item<'mir, 'tcx> {\n-    pub fn new(\n-        tcx: TyCtxt<'tcx>,\n-        def_id: DefId,\n-        body: mir::ReadOnlyBodyAndCache<'mir, 'tcx>,\n-    ) -> Self {\n+    pub fn new(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'mir mir::Body<'tcx>) -> Self {\n         let param_env = tcx.param_env(def_id);\n         let const_kind = ConstKind::for_item(tcx, def_id);\n "}, {"sha": "5215c985107a0e5147fb6b341b6a4ae869db3189", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -502,9 +502,6 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n     let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n-    // mir_built ensures that body has a computed cache, so we don't (and can't) attempt to\n-    // recompute it here.\n-    let body = body.unwrap_read_only();\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "a3880d691b2d144e2756dfaec83b95a3bf81fa4c", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -18,7 +18,7 @@\n \n use crate::transform::{MirPass, MirSource};\n use rustc_middle::mir::visit::MutVisitor;\n-use rustc_middle::mir::{BodyAndCache, BorrowKind, Location, Rvalue};\n+use rustc_middle::mir::{Body, BorrowKind, Location, Rvalue};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n \n@@ -29,7 +29,7 @@ pub struct DeleteNonCodegenStatements<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements { tcx };\n         delete.visit_body(body);\n         body.user_type_annotations.raw.clear();"}, {"sha": "58a8d5eeb1e1f541ac3e25ad17240d2134aa01ae", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -14,10 +14,9 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    read_only, AggregateKind, AssertKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate,\n-    Constant, Local, LocalDecl, LocalKind, Location, Operand, Place, ReadOnlyBodyAndCache, Rvalue,\n-    SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n-    UnOp, RETURN_PLACE,\n+    AggregateKind, AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, Local,\n+    LocalDecl, LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope,\n+    SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -59,7 +58,7 @@ macro_rules! throw_machine_stop_str {\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;\n@@ -150,8 +149,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         // constants, instead of just checking for const-folding succeeding.\n         // That would require an uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n-        let mut optimization_finder =\n-            ConstPropagator::new(read_only!(body), dummy_body, tcx, source);\n+        let mut optimization_finder = ConstPropagator::new(body, dummy_body, tcx, source);\n         optimization_finder.visit_body(body);\n \n         trace!(\"ConstProp done for {:?}\", source.def_id());\n@@ -362,7 +360,7 @@ impl<'mir, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n-        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+        body: &Body<'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n@@ -782,7 +780,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(body: ReadOnlyBodyAndCache<'_, '_>) -> IndexVec<Local, ConstPropMode> {\n+    fn check(body: &Body<'_>) -> IndexVec<Local, ConstPropMode> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n             found_assignment: IndexVec::from_elem(false, &body.local_decls),"}, {"sha": "bc1cb52ae855f8ce0ac43bbd36ea06459788fe8f", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -23,15 +23,14 @@ use crate::transform::{MirPass, MirSource};\n use crate::util::def_use::DefUseAnalysis;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::{\n-    read_only, Body, BodyAndCache, Constant, Local, LocalKind, Location, Operand, Place, Rvalue,\n-    StatementKind,\n+    Body, Constant, Local, LocalKind, Location, Operand, Place, Rvalue, StatementKind,\n };\n use rustc_middle::ty::TyCtxt;\n \n pub struct CopyPropagation;\n \n impl<'tcx> MirPass<'tcx> for CopyPropagation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n@@ -40,10 +39,10 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n \n         let mut def_use_analysis = DefUseAnalysis::new(body);\n         loop {\n-            def_use_analysis.analyze(read_only!(body));\n+            def_use_analysis.analyze(body);\n \n             if eliminate_self_assignments(body, &def_use_analysis) {\n-                def_use_analysis.analyze(read_only!(body));\n+                def_use_analysis.analyze(body);\n             }\n \n             let mut changed = false;\n@@ -252,7 +251,7 @@ impl<'tcx> Action<'tcx> {\n \n     fn perform(\n         self,\n-        body: &mut BodyAndCache<'tcx>,\n+        body: &mut Body<'tcx>,\n         def_use_analysis: &DefUseAnalysis,\n         dest_local: Local,\n         location: Location,"}, {"sha": "2de701284e3f5815dfd7e7a9df876c1a84c78e71", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::TyCtxt;\n pub struct Deaggregator;\n \n impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "5ce6f4fa7414edf77f27a1305ffef440d832ae34", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -7,7 +7,7 @@ use std::io;\n \n use crate::transform::{MirPass, MirSource};\n use crate::util as mir_util;\n-use rustc_middle::mir::{Body, BodyAndCache};\n+use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};\n \n@@ -18,13 +18,7 @@ impl<'tcx> MirPass<'tcx> for Marker {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass(\n-        &self,\n-        _tcx: TyCtxt<'tcx>,\n-        _source: MirSource<'tcx>,\n-        _body: &mut BodyAndCache<'tcx>,\n-    ) {\n-    }\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut Body<'tcx>) {}\n }\n \n pub struct Disambiguator {"}, {"sha": "6074619dd1545e1bf9e671e2e24b94fbe19735b6", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -21,7 +21,7 @@ use std::fmt;\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, body.span);\n \n         let def_id = src.def_id();"}, {"sha": "6906d443735cc58edab2c2f105de8b3612336792", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -354,7 +354,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n     }\n }\n \n-fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let gen_ty = body.local_decls.raw[1].ty;\n \n     let ref_gen_ty =\n@@ -367,7 +367,7 @@ fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Bo\n     DerefArgVisitor { tcx }.visit_body(body);\n }\n \n-fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n     let pin_did = tcx.lang_items().pin_type().unwrap();\n@@ -391,7 +391,7 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n fn replace_local<'tcx>(\n     local: Local,\n     ty: Ty<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n@@ -436,7 +436,7 @@ struct LivenessInfo {\n \n fn locals_live_across_suspend_points(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     source: MirSource<'tcx>,\n     always_live_locals: &storage::AlwaysLiveLocals,\n     movable: bool,\n@@ -686,7 +686,7 @@ fn compute_layout<'tcx>(\n     interior: Ty<'tcx>,\n     always_live_locals: &storage::AlwaysLiveLocals,\n     movable: bool,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n ) -> (\n     FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n     GeneratorLayout<'tcx>,\n@@ -698,13 +698,7 @@ fn compute_layout<'tcx>(\n         live_locals_at_suspension_points,\n         storage_conflicts,\n         storage_liveness,\n-    } = locals_live_across_suspend_points(\n-        tcx,\n-        read_only!(body),\n-        source,\n-        always_live_locals,\n-        movable,\n-    );\n+    } = locals_live_across_suspend_points(tcx, body, source, always_live_locals, movable);\n \n     // Erase regions from the types passed in from typeck so we can compare them with\n     // MIR types\n@@ -779,7 +773,7 @@ fn compute_layout<'tcx>(\n ///\n /// After this function, the former entry point of the function will be bb1.\n fn insert_switch<'tcx>(\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     cases: Vec<(usize, BasicBlock)>,\n     transform: &TransformVisitor<'tcx>,\n     default: TerminatorKind<'tcx>,\n@@ -810,11 +804,7 @@ fn insert_switch<'tcx>(\n     }\n }\n \n-fn elaborate_generator_drops<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-    body: &mut BodyAndCache<'tcx>,\n-) {\n+fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, body: &mut Body<'tcx>) {\n     use crate::shim::DropShimElaborator;\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n     use crate::util::patch::MirPatch;\n@@ -865,9 +855,9 @@ fn create_generator_drop_shim<'tcx>(\n     transform: &TransformVisitor<'tcx>,\n     source: MirSource<'tcx>,\n     gen_ty: Ty<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     drop_clean: BasicBlock,\n-) -> BodyAndCache<'tcx> {\n+) -> Body<'tcx> {\n     let mut body = body.clone();\n     body.arg_count = 1; // make sure the resume argument is not included here\n \n@@ -934,10 +924,7 @@ fn create_generator_drop_shim<'tcx>(\n     body\n }\n \n-fn insert_term_block<'tcx>(\n-    body: &mut BodyAndCache<'tcx>,\n-    kind: TerminatorKind<'tcx>,\n-) -> BasicBlock {\n+fn insert_term_block<'tcx>(body: &mut Body<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n     let term_block = BasicBlock::new(body.basic_blocks().len());\n     let source_info = source_info(body);\n     body.basic_blocks_mut().push(BasicBlockData {\n@@ -950,7 +937,7 @@ fn insert_term_block<'tcx>(\n \n fn insert_panic_block<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     message: AssertMessage<'tcx>,\n ) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n@@ -1036,7 +1023,7 @@ fn create_generator_resume_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: TransformVisitor<'tcx>,\n     source: MirSource<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     can_return: bool,\n ) {\n     let can_unwind = can_unwind(tcx, body);\n@@ -1115,7 +1102,7 @@ fn source_info(body: &Body<'_>) -> SourceInfo {\n     SourceInfo { span: body.span, scope: OUTERMOST_SOURCE_SCOPE }\n }\n \n-fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n+fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n@@ -1152,7 +1139,7 @@ impl Operation {\n }\n \n fn create_cases<'tcx>(\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     transform: &TransformVisitor<'tcx>,\n     operation: Operation,\n ) -> Vec<(usize, BasicBlock)> {\n@@ -1215,7 +1202,7 @@ fn create_cases<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty {\n             yield_ty\n         } else {"}, {"sha": "d8bb8a0b52c66b73efbaf7f016fbc04dd50b089c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -38,7 +38,7 @@ struct CallSite<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for Inline {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(body);\n         }\n@@ -51,7 +51,7 @@ struct Inliner<'tcx> {\n }\n \n impl Inliner<'tcx> {\n-    fn run_pass(&self, caller_body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, caller_body: &mut Body<'tcx>) {\n         // Keep a queue of callsites to try inlining on. We take\n         // advantage of the fact that queries detect cycles here to\n         // allow us to try and fetch the fully optimized MIR of a\n@@ -405,8 +405,8 @@ impl Inliner<'tcx> {\n     fn inline_call(\n         &self,\n         callsite: CallSite<'tcx>,\n-        caller_body: &mut BodyAndCache<'tcx>,\n-        mut callee_body: BodyAndCache<'tcx>,\n+        caller_body: &mut Body<'tcx>,\n+        mut callee_body: Body<'tcx>,\n     ) -> bool {\n         let terminator = caller_body[callsite.bb].terminator.take().unwrap();\n         match terminator.kind {\n@@ -534,7 +534,7 @@ impl Inliner<'tcx> {\n         &self,\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut BodyAndCache<'tcx>,\n+        caller_body: &mut Body<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -601,7 +601,7 @@ impl Inliner<'tcx> {\n         &self,\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut BodyAndCache<'tcx>,\n+        caller_body: &mut Body<'tcx>,\n     ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries."}, {"sha": "d570e093353ab10c231ceb476369172f9ee55934", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -5,16 +5,15 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    read_only, Body, BodyAndCache, Constant, Local, Location, Operand, Place, PlaceRef,\n-    ProjectionElem, Rvalue,\n+    Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n \n pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return;\n@@ -24,9 +23,8 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Place::ty()`).\n         let optimizations = {\n-            let read_only_cache = read_only!(body);\n             let mut optimization_finder = OptimizationFinder::new(body, tcx);\n-            optimization_finder.visit_body(&read_only_cache);\n+            optimization_finder.visit_body(body);\n             optimization_finder.optimizations\n         };\n "}, {"sha": "b7b67f36ae42fcb779cceef3c29d00f2b0b8652e", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::{Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n@@ -131,12 +131,12 @@ pub trait MirPass<'tcx> {\n         default_name::<Self>()\n     }\n \n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>);\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n     promoted: Option<Promoted>,\n     mir_phase: MirPhase,\n@@ -194,13 +194,8 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n         return Default::default();\n     }\n \n-    let item = check_consts::Item {\n-        body: body.unwrap_read_only(),\n-        tcx,\n-        def_id,\n-        const_kind,\n-        param_env: tcx.param_env(def_id),\n-    };\n+    let item =\n+        check_consts::Item { body, tcx, def_id, const_kind, param_env: tcx.param_env(def_id) };\n \n     let mut validator = check_consts::validation::Validator::new(&item);\n     validator.check_body();\n@@ -210,7 +205,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place()\n }\n \n-fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -230,14 +225,13 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {\n             &rustc_peek::SanityCheck,\n         ],\n     );\n-    body.ensure_predecessors();\n     tcx.alloc_steal_mir(body)\n }\n \n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-) -> (&'tcx Steal<BodyAndCache<'tcx>>, &'tcx Steal<IndexVec<Promoted, BodyAndCache<'tcx>>>) {\n+) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     let _ = tcx.mir_const_qualif(def_id);\n@@ -263,7 +257,7 @@ fn mir_validated(\n \n fn run_optimization_passes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     def_id: DefId,\n     promoted: Option<Promoted>,\n ) {\n@@ -319,7 +313,7 @@ fn run_optimization_passes<'tcx>(\n     );\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyAndCache<'_> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n@@ -335,14 +329,13 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyAndCache<'_> {\n     let (body, _) = tcx.mir_validated(def_id);\n     let mut body = body.steal();\n     run_optimization_passes(tcx, &mut body, def_id, None);\n-    body.ensure_predecessors();\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n     tcx.arena.alloc(body)\n }\n \n-fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, BodyAndCache<'_>> {\n+fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, Body<'_>> {\n     if tcx.is_constructor(def_id) {\n         return tcx.intern_promoted(IndexVec::new());\n     }\n@@ -353,7 +346,6 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, BodyAndCa\n \n     for (p, mut body) in promoted.iter_enumerated_mut() {\n         run_optimization_passes(tcx, &mut body, def_id, Some(p));\n-        body.ensure_predecessors();\n     }\n \n     debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");"}, {"sha": "d89c8e72e526ab0d8412c3d468df4e68ed99311b", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -17,12 +17,12 @@ impl<'tcx> NoLandingPads<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n-pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         NoLandingPads::new(tcx).visit_body(body);\n     }"}, {"sha": "20576d82b1c7cae998285b0d66f75a84a32c8e56", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -42,11 +42,11 @@ use crate::transform::{MirPass, MirSource};\n /// newly created `Constant`.\n #[derive(Default)]\n pub struct PromoteTemps<'tcx> {\n-    pub promoted_fragments: Cell<IndexVec<Promoted, BodyAndCache<'tcx>>>,\n+    pub promoted_fragments: Cell<IndexVec<Promoted, Body<'tcx>>>,\n }\n \n impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         //\n         // This does not include MIR that failed const-checking, which we still try to promote.\n@@ -64,8 +64,7 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         let mut rpo = traversal::reverse_postorder(body);\n         let (temps, all_candidates) = collect_temps_and_candidates(tcx, body, &mut rpo);\n \n-        let promotable_candidates =\n-            validate_candidates(tcx, read_only!(body), def_id, &temps, &all_candidates);\n+        let promotable_candidates = validate_candidates(tcx, body, def_id, &temps, &all_candidates);\n \n         let promoted = promote_candidates(def_id, body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);\n@@ -719,7 +718,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.\n pub fn validate_candidates(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     def_id: DefId,\n     temps: &IndexVec<Local, TempState>,\n     candidates: &[Candidate],\n@@ -752,8 +751,8 @@ pub fn validate_candidates(\n \n struct Promoter<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    source: &'a mut BodyAndCache<'tcx>,\n-    promoted: BodyAndCache<'tcx>,\n+    source: &'a mut Body<'tcx>,\n+    promoted: Body<'tcx>,\n     temps: &'a mut IndexVec<Local, TempState>,\n     extra_statements: &'a mut Vec<(Location, Statement<'tcx>)>,\n \n@@ -901,7 +900,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         def_id: DefId,\n         candidate: Candidate,\n         next_promoted_id: usize,\n-    ) -> Option<BodyAndCache<'tcx>> {\n+    ) -> Option<Body<'tcx>> {\n         let mut rvalue = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n@@ -1044,11 +1043,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n \n pub fn promote_candidates<'tcx>(\n     def_id: DefId,\n-    body: &mut BodyAndCache<'tcx>,\n+    body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n     candidates: Vec<Candidate>,\n-) -> IndexVec<Promoted, BodyAndCache<'tcx>> {\n+) -> IndexVec<Promoted, Body<'tcx>> {\n     // Visit candidates in reverse, in case they're nested.\n     debug!(\"promote_candidates({:?})\", candidates);\n \n@@ -1093,7 +1092,7 @@ pub fn promote_candidates<'tcx>(\n         promoted.ignore_interior_mut_in_const_validation = true;\n \n         let promoter = Promoter {\n-            promoted: BodyAndCache::new(promoted),\n+            promoted,\n             tcx,\n             source: body,\n             temps: &mut temps,\n@@ -1150,7 +1149,7 @@ pub fn promote_candidates<'tcx>(\n crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_def_id: DefId,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    body: &Body<'tcx>,\n     operand: &Operand<'tcx>,\n ) -> bool {\n     let mut rpo = traversal::reverse_postorder(&body);"}, {"sha": "44a68a8040f15e6e27162d4fdbdc9e7e3ab108f0", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::TyCtxt;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n-pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         return;\n     }\n@@ -19,7 +19,7 @@ pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache\n }\n \n impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         remove_noop_landing_pads(tcx, body);\n     }\n }\n@@ -80,7 +80,7 @@ impl RemoveNoopLandingPads {\n         }\n     }\n \n-    fn remove_nop_landing_pads(&self, body: &mut BodyAndCache<'_>) {\n+    fn remove_nop_landing_pads(&self, body: &mut Body<'_>) {\n         // make sure there's a single resume block\n         let resume_block = {\n             let patch = MirPatch::new(body);"}, {"sha": "88af60dbeb6576ad6cd7135430a759c29da91ab2", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -6,7 +6,7 @@ use rustc_target::spec::abi::Abi;\n use crate::transform::{MirPass, MirSource};\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::mir::{self, Body, BodyAndCache, Local, Location};\n+use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n@@ -21,7 +21,7 @@ use crate::dataflow::{\n pub struct SanityCheck;\n \n impl<'tcx> MirPass<'tcx> for SanityCheck {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         use crate::dataflow::has_rustc_mir_with;\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {"}, {"sha": "e579950d8c0acb3460f1aebb32e08fcfe8315fd8", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -45,7 +45,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(body: &mut BodyAndCache<'_>) {\n+pub fn simplify_cfg(body: &mut Body<'_>) {\n     CfgSimplifier::new(body).simplify();\n     remove_dead_blocks(body);\n \n@@ -58,7 +58,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body);\n         simplify_cfg(body);\n     }\n@@ -70,7 +70,7 @@ pub struct CfgSimplifier<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n-    pub fn new(body: &'a mut BodyAndCache<'tcx>) -> Self {\n+    pub fn new(body: &'a mut Body<'tcx>) -> Self {\n         let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());\n \n         // we can't use mir.predecessors() here because that counts\n@@ -272,7 +272,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(body: &mut BodyAndCache<'_>) {\n+pub fn remove_dead_blocks(body: &mut Body<'_>) {\n     let mut seen = BitSet::new_empty(body.basic_blocks().len());\n     for (bb, _) in traversal::preorder(body) {\n         seen.insert(bb.index());\n@@ -304,15 +304,14 @@ pub fn remove_dead_blocks(body: &mut BodyAndCache<'_>) {\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n \n         // First, we're going to get a count of *actual* uses for every `Local`.\n         // Take a look at `DeclMarker::visit_local()` to see exactly what is ignored.\n         let mut used_locals = {\n-            let read_only_cache = read_only!(body);\n             let mut marker = DeclMarker::new(body);\n-            marker.visit_body(&read_only_cache);\n+            marker.visit_body(&body);\n \n             marker.local_counts\n         };"}, {"sha": "38e7f9d8ae45b6bf7671ebdf6a92187720684c8e", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n         for block in body.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "d22c2d906003541af875ec1ca7fd8824ba9653e7", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -33,7 +33,7 @@ use rustc_target::abi::VariantIdx;\n pub struct SimplifyArmIdentity;\n \n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for bb in basic_blocks {\n             // Need 3 statements:\n@@ -153,7 +153,7 @@ fn match_variant_field_place<'tcx>(place: Place<'tcx>) -> Option<(Local, VarFiel\n pub struct SimplifyBranchSame;\n \n impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut did_remove_blocks = false;\n         let bbs = body.basic_blocks_mut();\n         for bb_idx in bbs.indices() {"}, {"sha": "e3b182b88492f10e81f5b2e7430dd3c3a6114452", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -2,8 +2,7 @@\n \n use crate::transform::{MirPass, MirSource};\n use rustc_middle::mir::{\n-    BasicBlock, BasicBlockData, Body, BodyAndCache, Local, Operand, Rvalue, StatementKind,\n-    TerminatorKind,\n+    BasicBlock, BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{Ty, TyCtxt};\n@@ -67,7 +66,7 @@ fn variant_discriminants<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if source.promoted.is_some() {\n             return;\n         }"}, {"sha": "d9f2259030ff5b0b05ee715e8687b7405259bcb1", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n             // Enable only under -Zmir-opt-level=3 as in some cases (check the deeply-nested-opt\n             // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code."}, {"sha": "b4448ead8eb8124f4d304f1653e76514fe1ecb7a", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, BodyAndCache, Local, Location, ReadOnlyBodyAndCache, VarDebugInfo};\n+use rustc_middle::mir::{Body, Local, Location, VarDebugInfo};\n use rustc_middle::ty::TyCtxt;\n use std::mem;\n \n@@ -28,7 +28,7 @@ impl DefUseAnalysis {\n         DefUseAnalysis { info: IndexVec::from_elem_n(Info::new(), body.local_decls.len()) }\n     }\n \n-    pub fn analyze(&mut self, body: ReadOnlyBodyAndCache<'_, '_>) {\n+    pub fn analyze(&mut self, body: &Body<'_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n@@ -53,7 +53,7 @@ impl DefUseAnalysis {\n     fn mutate_defs_and_uses(\n         &self,\n         local: Local,\n-        body: &mut BodyAndCache<'tcx>,\n+        body: &mut Body<'tcx>,\n         new_local: Local,\n         tcx: TyCtxt<'tcx>,\n     ) {\n@@ -72,7 +72,7 @@ impl DefUseAnalysis {\n     pub fn replace_all_defs_and_uses_with(\n         &self,\n         local: Local,\n-        body: &mut BodyAndCache<'tcx>,\n+        body: &mut Body<'tcx>,\n         new_local: Local,\n         tcx: TyCtxt<'tcx>,\n     ) {"}, {"sha": "80b31be84caa2c7a8dcb8537e87a2662bc8e818d", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -56,7 +56,7 @@ pub struct LivenessResult {\n \n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n-pub fn liveness_of_locals(body: ReadOnlyBodyAndCache<'_, '_>) -> LivenessResult {\n+pub fn liveness_of_locals(body: &Body<'_>) -> LivenessResult {\n     let num_live_vars = body.local_decls.len();\n \n     let def_use: IndexVec<_, DefsUses> ="}, {"sha": "9153f82588b9ebcb5ff1e56fb072eb32b33fa02c", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> MirPatch<'tcx> {\n         self.make_nop.push(loc);\n     }\n \n-    pub fn apply(self, body: &mut BodyAndCache<'tcx>) {\n+    pub fn apply(self, body: &mut Body<'tcx>) {\n         debug!(\"MirPatch: make nops at: {:?}\", self.make_nop);\n         for loc in self.make_nop {\n             body.make_statement_nop(loc);"}, {"sha": "2a3e91884375a0fa78ee22a1c8715bb900a7e542", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8287842eb4bdc59d407ffcae29b0b5e8a4abb1be/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=8287842eb4bdc59d407ffcae29b0b5e8a4abb1be", "patch": "@@ -21,12 +21,12 @@ use rustc_target::spec::PanicStrategy;\n \n use super::lints;\n \n-crate fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::steal::Steal<BodyAndCache<'_>> {\n+crate fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::steal::Steal<Body<'_>> {\n     tcx.alloc_steal_mir(mir_build(tcx, def_id))\n }\n \n /// Construct the MIR for a given `DefId`.\n-fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n+fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -183,9 +183,6 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n \n         lints::check(tcx, &body, def_id);\n \n-        let mut body = BodyAndCache::new(body);\n-        body.ensure_predecessors();\n-\n         // The borrow checker will replace all the regions here with its own\n         // inference variables. There's no point having non-erased regions here.\n         // The exception is `body.user_type_annotations`, which is used unmodified"}]}