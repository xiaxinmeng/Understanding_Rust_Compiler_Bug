{"sha": "9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMDRhOTAyYzA1MmMxYWQ3ZmQ1YzEyNDVjYjFlMDNmODhhYTJmNzA=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-11T14:37:52Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-11T14:43:05Z"}, "message": "Avoid triggering a pathological case in the LLVM inliner\n\nWhen the inliner has to decided if it wants to inline a function A into an\ninternal function B, it first checks whether it would be more profitable\nto inline B into its callees instead. This means that it has to analyze\nB, which involves checking the assumption cache. Building the assumption\ncache requires scanning the whole function, and because inlining\ncurrently clears the assumption cache, this scan happens again and\nagain, getting even slower as the function grows from inlining.\n\nAs inlining the huge find functions isn't really useful anyway, we can\nmark them as noinline, which skips the cost analysis and reduces compile\ntimes by as much as 70%.\n\ncc #28273", "tree": {"sha": "f5a8e33b951c35f93adddbfc0fe366a354bb080d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5a8e33b951c35f93adddbfc0fe366a354bb080d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "html_url": "https://github.com/rust-lang/rust/commit/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "html_url": "https://github.com/rust-lang/rust/commit/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "1db5b3cb9ea30ee1bd7c20d420490de9c2abd2e2", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "patch": "@@ -17,6 +17,7 @@ use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n \n+#[inline(never)]\n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"aarch64_v\") { return None }\n     Some(match &name[\"aarch64_v\".len()..] {"}, {"sha": "eae5c520883db908e1b0234d86a3072cf2042dc3", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "patch": "@@ -17,6 +17,7 @@ use {Intrinsic, i, i_, u, u_, f, v, agg, p};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n \n+#[inline(never)]\n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"arm_v\") { return None }\n     Some(match &name[\"arm_v\".len()..] {"}, {"sha": "19aeb589e70eba6f3d7e90da2326f83e4c8c14c2", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9104a902c052c1ad7fd5c1245cb1e03f88aa2f70/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=9104a902c052c1ad7fd5c1245cb1e03f88aa2f70", "patch": "@@ -17,6 +17,7 @@ use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n \n+#[inline(never)]\n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"x86_mm\") { return None }\n     Some(match &name[\"x86_mm\".len()..] {"}]}