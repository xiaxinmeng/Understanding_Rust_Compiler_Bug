{"sha": "06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Yjk0NTA0OWI2ZTY3OTViY2ZiOWZiODAwN2E0NmM0NGE5M2MwYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-20T23:35:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-20T23:35:50Z"}, "message": "Auto merge of #68405 - JohnTitor:rollup-kj0x4za, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67734 (Remove appendix from Apache license)\n - #67795 (Cleanup formatting code)\n - #68290 (Fix some tests failing in `--pass check` mode)\n - #68297 ( Filter and test predicates using `normalize_and_test_predicates` for const-prop)\n - #68302 (Fix #[track_caller] and function pointers)\n - #68339 (Add `riscv64gc-unknown-linux-gnu` into target list in build-manifest)\n - #68381 (Added minor clarification to specification of GlobalAlloc::realloc.)\n - #68397 (rustdoc: Correct order of `async` and `unsafe` in `async unsafe fn`s)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e5ac89eda26500d49ee52698ed3d9b033cd2e05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ac89eda26500d49ee52698ed3d9b033cd2e05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "html_url": "https://github.com/rust-lang/rust/commit/06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a3341f1b8b475990e9d1b071b88d3c280936b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a3341f1b8b475990e9d1b071b88d3c280936b4", "html_url": "https://github.com/rust-lang/rust/commit/b5a3341f1b8b475990e9d1b071b88d3c280936b4"}, {"sha": "f6406f7f680d4f77144d22e1f74064e878213f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6406f7f680d4f77144d22e1f74064e878213f5c", "html_url": "https://github.com/rust-lang/rust/commit/f6406f7f680d4f77144d22e1f74064e878213f5c"}], "stats": {"total": 508, "additions": 266, "deletions": 242}, "files": [{"sha": "1b5ec8b78e237b5c3b3d812a7c0a6589d0f7161d", "filename": "LICENSE-APACHE", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/LICENSE-APACHE", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/LICENSE-APACHE", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSE-APACHE?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -174,28 +174,3 @@ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n    of your accepting any such warranty or additional liability.\n \n END OF TERMS AND CONDITIONS\n-\n-APPENDIX: How to apply the Apache License to your work.\n-\n-   To apply the Apache License to your work, attach the following\n-   boilerplate notice, with the fields enclosed by brackets \"[]\"\n-   replaced with your own identifying information. (Don't include\n-   the brackets!)  The text should be enclosed in the appropriate\n-   comment syntax for the file format. We also recommend that a\n-   file or class name and description of purpose be included on the\n-   same \"printed page\" as the copyright notice for easier\n-   identification within third-party archives.\n-\n-Copyright [yyyy] [name of copyright owner]\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-you may not use this file except in compliance with the License.\n-You may obtain a copy of the License at\n-\n-\thttp://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing, software\n-distributed under the License is distributed on an \"AS IS\" BASIS,\n-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-See the License for the specific language governing permissions and\n-limitations under the License."}, {"sha": "09f743fb81e4c53885434e20536640904ad3902d", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -525,7 +525,8 @@ pub unsafe trait GlobalAlloc {\n     /// The memory may or may not have been deallocated,\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n-    /// this method).\n+    /// this method). The new memory block is allocated with `layout`, but\n+    /// with the `size` updated to `new_size`.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}, {"sha": "900ef63f1dfcc3a3b2b263b463779307c26f3c3f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -10,7 +10,6 @@ use crate::mem;\n use crate::num::flt2dec;\n use crate::ops::Deref;\n use crate::result;\n-use crate::slice;\n use crate::str;\n \n mod builders;\n@@ -234,8 +233,6 @@ pub struct Formatter<'a> {\n     precision: Option<usize>,\n \n     buf: &'a mut (dyn Write + 'a),\n-    curarg: slice::Iter<'a, ArgumentV1<'a>>,\n-    args: &'a [ArgumentV1<'a>],\n }\n \n // NB. Argument is essentially an optimized partially applied formatting function,\n@@ -1043,8 +1040,6 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n         buf: output,\n         align: rt::v1::Alignment::Unknown,\n         fill: ' ',\n-        args: args.args,\n-        curarg: args.args.iter(),\n     };\n \n     let mut idx = 0;\n@@ -1063,7 +1058,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n             // a string piece.\n             for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n-                formatter.run(arg)?;\n+                run(&mut formatter, arg, &args.args)?;\n                 idx += 1;\n             }\n         }\n@@ -1077,6 +1072,39 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n+fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n+    fmt.fill = arg.format.fill;\n+    fmt.align = arg.format.align;\n+    fmt.flags = arg.format.flags;\n+    fmt.width = getcount(args, &arg.format.width);\n+    fmt.precision = getcount(args, &arg.format.precision);\n+\n+    // Extract the correct argument\n+    let value = {\n+        #[cfg(bootstrap)]\n+        {\n+            match arg.position {\n+                rt::v1::Position::At(i) => args[i],\n+            }\n+        }\n+        #[cfg(not(bootstrap))]\n+        {\n+            args[arg.position]\n+        }\n+    };\n+\n+    // Then actually do some printing\n+    (value.formatter)(value.value, fmt)\n+}\n+\n+fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+    match *cnt {\n+        rt::v1::Count::Is(n) => Some(n),\n+        rt::v1::Count::Implied => None,\n+        rt::v1::Count::Param(i) => args[i].as_usize(),\n+    }\n+}\n+\n /// Padding after the end of something. Returned by `Formatter::padding`.\n #[must_use = \"don't forget to write the post padding\"]\n struct PostPadding {\n@@ -1114,41 +1142,6 @@ impl<'a> Formatter<'a> {\n             align: self.align,\n             width: self.width,\n             precision: self.precision,\n-\n-            // These only exist in the struct for the `run` method,\n-            // which won\u2019t be used together with this method.\n-            curarg: self.curarg.clone(),\n-            args: self.args,\n-        }\n-    }\n-\n-    // First up is the collection of functions used to execute a format string\n-    // at runtime. This consumes all of the compile-time statics generated by\n-    // the format! syntax extension.\n-    fn run(&mut self, arg: &rt::v1::Argument) -> Result {\n-        // Fill in the format parameters into the formatter\n-        self.fill = arg.format.fill;\n-        self.align = arg.format.align;\n-        self.flags = arg.format.flags;\n-        self.width = self.getcount(&arg.format.width);\n-        self.precision = self.getcount(&arg.format.precision);\n-\n-        // Extract the correct argument\n-        let value = match arg.position {\n-            rt::v1::Position::Next => *self.curarg.next().unwrap(),\n-            rt::v1::Position::At(i) => self.args[i],\n-        };\n-\n-        // Then actually do some printing\n-        (value.formatter)(value.value, self)\n-    }\n-\n-    fn getcount(&mut self, cnt: &rt::v1::Count) -> Option<usize> {\n-        match *cnt {\n-            rt::v1::Count::Is(n) => Some(n),\n-            rt::v1::Count::Implied => None,\n-            rt::v1::Count::Param(i) => self.args[i].as_usize(),\n-            rt::v1::Count::NextParam => self.curarg.next()?.as_usize(),\n         }\n     }\n "}, {"sha": "fd81f93242b89e5cc8a31c8d547012424ce48697", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -7,7 +7,10 @@\n \n #[derive(Copy, Clone)]\n pub struct Argument {\n+    #[cfg(bootstrap)]\n     pub position: Position,\n+    #[cfg(not(bootstrap))]\n+    pub position: usize,\n     pub format: FormatSpec,\n }\n \n@@ -37,12 +40,11 @@ pub enum Alignment {\n pub enum Count {\n     Is(usize),\n     Param(usize),\n-    NextParam,\n     Implied,\n }\n \n+#[cfg(bootstrap)]\n #[derive(Copy, Clone)]\n pub enum Position {\n-    Next,\n     At(usize),\n }"}, {"sha": "51ce575e51f3b61aaec5fdd72cfc51d831a1abab", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,7 +1,6 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n-use crate::traits::TraitQueryMode;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_data_structures::base_n;\n@@ -168,9 +167,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => return true,\n         };\n \n-        // We shouldn't encounter any overflow here, so we use TraitQueryMode::Standard\\\n-        // to report an error if overflow somehow occurs.\n-        tcx.substitute_normalize_and_test_predicates((def_id, &substs, TraitQueryMode::Standard))\n+        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n     }\n \n     pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {"}, {"sha": "deb2d6ac630ac57534958e583400dcbd5e984ab8", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1156,11 +1156,11 @@ rustc_queries! {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n \n-        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>, traits::TraitQueryMode)) -> bool {\n+        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n             no_force\n             desc { |tcx|\n-                \"testing substituted normalized predicates in mode {:?}:`{}`\",\n-                key.2, tcx.def_path_str(key.0)\n+                \"testing substituted normalized predicates:`{}`\",\n+                tcx.def_path_str(key.0)\n             }\n         }\n "}, {"sha": "46ece6fc4059364039f0d72d885d6411476a39b3", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -16,7 +16,6 @@ use super::CodeSelectionError;\n use super::{ConstEvalFailure, Unimplemented};\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n-use crate::traits::TraitQueryMode;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     type Predicate = ty::Predicate<'tcx>;\n@@ -63,9 +62,6 @@ pub struct FulfillmentContext<'tcx> {\n     // a snapshot (they don't *straddle* a snapshot, so there\n     // is no trouble there).\n     usable_in_snapshot: bool,\n-\n-    // The `TraitQueryMode` used when constructing a `SelectionContext`\n-    query_mode: TraitQueryMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -79,26 +75,12 @@ pub struct PendingPredicateObligation<'tcx> {\n static_assert_size!(PendingPredicateObligation<'_>, 136);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n-    /// Creates a new fulfillment context with `TraitQueryMode::Standard`\n-    /// You almost always want to use this instead of `with_query_mode`\n+    /// Creates a new fulfillment context.\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: false,\n-            query_mode: TraitQueryMode::Standard,\n-        }\n-    }\n-\n-    /// Creates a new fulfillment context with the specified query mode.\n-    /// This should only be used when you want to ignore overflow,\n-    /// rather than reporting it as an error.\n-    pub fn with_query_mode(query_mode: TraitQueryMode) -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            register_region_obligations: true,\n-            usable_in_snapshot: false,\n-            query_mode,\n         }\n     }\n \n@@ -107,7 +89,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: true,\n-            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -116,7 +97,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: false,\n             usable_in_snapshot: false,\n-            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -237,7 +217,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        let mut selcx = SelectionContext::with_query_mode(infcx, self.query_mode);\n+        let mut selcx = SelectionContext::new(infcx);\n         self.select(&mut selcx)\n     }\n "}, {"sha": "e93529186ac86ebf8f6f0838e2f7ad8780e6763f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -95,7 +95,7 @@ pub enum IntercrateMode {\n }\n \n /// The mode that trait queries run in.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TraitQueryMode {\n     // Standard/un-canonicalized queries get accurate\n     // spans etc. passed in and hence can do reasonable\n@@ -1014,17 +1014,16 @@ where\n /// environment. If this returns false, then either normalize\n /// encountered an error or one of the predicates did not hold. Used\n /// when creating vtables to check for unsatisfiable methods.\n-fn normalize_and_test_predicates<'tcx>(\n+pub fn normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n-    mode: TraitQueryMode,\n ) -> bool {\n-    debug!(\"normalize_and_test_predicates(predicates={:?}, mode={:?})\", predicates, mode);\n+    debug!(\"normalize_and_test_predicates(predicates={:?})\", predicates);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::reveal_all();\n-        let mut selcx = SelectionContext::with_query_mode(&infcx, mode);\n-        let mut fulfill_cx = FulfillmentContext::with_query_mode(mode);\n+        let mut selcx = SelectionContext::new(&infcx);\n+        let mut fulfill_cx = FulfillmentContext::new();\n         let cause = ObligationCause::dummy();\n         let Normalized { value: predicates, obligations } =\n             normalize(&mut selcx, param_env, cause.clone(), &predicates);\n@@ -1044,12 +1043,12 @@ fn normalize_and_test_predicates<'tcx>(\n \n fn substitute_normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: (DefId, SubstsRef<'tcx>, TraitQueryMode),\n+    key: (DefId, SubstsRef<'tcx>),\n ) -> bool {\n     debug!(\"substitute_normalize_and_test_predicates(key={:?})\", key);\n \n     let predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    let result = normalize_and_test_predicates(tcx, predicates, key.2);\n+    let result = normalize_and_test_predicates(tcx, predicates);\n \n     debug!(\"substitute_normalize_and_test_predicates(key={:?}) = {:?}\", key, result);\n     result\n@@ -1102,10 +1101,7 @@ fn vtable_methods<'tcx>(\n             // Note that this method could then never be called, so we\n             // do not want to try and codegen it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            // We don't expect overflow here, so report an error if it somehow ends\n-            // up happening.\n-            if !normalize_and_test_predicates(tcx, predicates.predicates, TraitQueryMode::Standard)\n-            {\n+            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n                 debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }"}, {"sha": "1ea695e40b25556bfb95601e718266cb9395ca30", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -141,7 +141,12 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     pub fn requires_caller_location(&self, tcx: TyCtxt<'_>) -> bool {\n-        tcx.codegen_fn_attrs(self.def_id()).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+        match *self {\n+            InstanceDef::Item(def_id) => {\n+                tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+            }\n+            _ => false,\n+        }\n     }\n }\n "}, {"sha": "cbf335ad607ef3e9f1ae84ed3825cde3a0f32df9", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -125,15 +125,6 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (DefId, SubstsRef<'tcx>, traits::TraitQueryMode) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n-    }\n-    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        self.0.default_span(tcx)\n-    }\n-}\n-\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate"}, {"sha": "3f4e24ca993db4a14c5c619ba9b215c655400875", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -590,17 +590,6 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::NextArgument(ref arg) => {\n                 // Build the position\n                 let pos = {\n-                    let pos = |c, arg| {\n-                        let mut path = Context::rtpath(self.ecx, \"Position\");\n-                        path.push(self.ecx.ident_of(c, sp));\n-                        match arg {\n-                            Some(i) => {\n-                                let arg = self.ecx.expr_usize(sp, i);\n-                                self.ecx.expr_call_global(sp, path, vec![arg])\n-                            }\n-                            None => self.ecx.expr_path(self.ecx.path_global(sp, path)),\n-                        }\n-                    };\n                     match arg.position {\n                         parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => {\n                             // Map to index in final generated argument array\n@@ -615,7 +604,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                     arg_idx\n                                 }\n                             };\n-                            pos(\"At\", Some(arg_idx))\n+                            self.ecx.expr_usize(sp, arg_idx)\n                         }\n \n                         // should never be the case, because names are already"}, {"sha": "b84616142cb07d843c060e1a405b985545c0a8a9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 53, "deletions": 27, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -31,9 +31,13 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n     let mut result = match instance {\n         ty::InstanceDef::Item(..) => bug!(\"item {:?} passed to make_shim\", instance),\n-        ty::InstanceDef::VtableShim(def_id) => {\n-            build_call_shim(tcx, instance, Adjustment::DerefMove, CallKind::Direct(def_id), None)\n-        }\n+        ty::InstanceDef::VtableShim(def_id) => build_call_shim(\n+            tcx,\n+            instance,\n+            Some(Adjustment::DerefMove),\n+            CallKind::Direct(def_id),\n+            None,\n+        ),\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.lang_items().fn_trait_kind(trait_) {\n@@ -50,15 +54,15 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             let sig = tcx.erase_late_bound_regions(&ty.fn_sig(tcx));\n             let arg_tys = sig.inputs();\n \n-            build_call_shim(tcx, instance, adjustment, CallKind::Indirect, Some(arg_tys))\n+            build_call_shim(tcx, instance, Some(adjustment), CallKind::Indirect, Some(arg_tys))\n         }\n         // We are generating a call back to our def-id, which the\n         // codegen backend knows to turn to an actual call, be it\n         // a virtual call, or a direct call to a function for which\n         // indirect calls must be codegen'd differently than direct ones\n         // (such as `#[track_caller]`).\n         ty::InstanceDef::ReifyShim(def_id) => {\n-            build_call_shim(tcx, instance, Adjustment::Identity, CallKind::Direct(def_id), None)\n+            build_call_shim(tcx, instance, None, CallKind::Direct(def_id), None)\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n             let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n@@ -68,7 +72,13 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 .unwrap()\n                 .def_id;\n \n-            build_call_shim(tcx, instance, Adjustment::RefMut, CallKind::Direct(call_mut), None)\n+            build_call_shim(\n+                tcx,\n+                instance,\n+                Some(Adjustment::RefMut),\n+                CallKind::Direct(call_mut),\n+                None,\n+            )\n         }\n         ty::InstanceDef::DropGlue(def_id, ty) => build_drop_shim(tcx, def_id, ty),\n         ty::InstanceDef::CloneShim(def_id, ty) => {\n@@ -648,7 +658,7 @@ impl CloneShimBuilder<'tcx> {\n fn build_call_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n-    rcvr_adjustment: Adjustment,\n+    rcvr_adjustment: Option<Adjustment>,\n     call_kind: CallKind,\n     untuple_args: Option<&[Ty<'tcx>]>,\n ) -> BodyAndCache<'tcx> {\n@@ -680,14 +690,16 @@ fn build_call_shim<'tcx>(\n     let mut local_decls = local_decls_for_sig(&sig, span);\n     let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n \n-    let rcvr_arg = Local::new(1 + 0);\n-    let rcvr_l = Place::from(rcvr_arg);\n+    let rcvr_place = || {\n+        assert!(rcvr_adjustment.is_some());\n+        Place::from(Local::new(1 + 0))\n+    };\n     let mut statements = vec![];\n \n-    let rcvr = match rcvr_adjustment {\n-        Adjustment::Identity => Operand::Move(rcvr_l),\n-        Adjustment::Deref => Operand::Copy(tcx.mk_place_deref(rcvr_l)),\n-        Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_l)),\n+    let rcvr = rcvr_adjustment.map(|rcvr_adjustment| match rcvr_adjustment {\n+        Adjustment::Identity => Operand::Move(rcvr_place()),\n+        Adjustment::Deref => Operand::Copy(tcx.mk_place_deref(rcvr_place())),\n+        Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n             let ref_rcvr = local_decls.push(temp_decl(\n@@ -703,15 +715,15 @@ fn build_call_shim<'tcx>(\n                 source_info,\n                 kind: StatementKind::Assign(box (\n                     Place::from(ref_rcvr),\n-                    Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_l),\n+                    Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_place()),\n                 )),\n             });\n             Operand::Move(Place::from(ref_rcvr))\n         }\n-    };\n+    });\n \n     let (callee, mut args) = match call_kind {\n-        CallKind::Indirect => (rcvr, vec![]),\n+        CallKind::Indirect => (rcvr.unwrap(), vec![]),\n         CallKind::Direct(def_id) => {\n             let ty = tcx.type_of(def_id);\n             (\n@@ -720,21 +732,35 @@ fn build_call_shim<'tcx>(\n                     user_ty: None,\n                     literal: ty::Const::zero_sized(tcx, ty),\n                 }),\n-                vec![rcvr],\n+                rcvr.into_iter().collect::<Vec<_>>(),\n             )\n         }\n     };\n \n+    let mut arg_range = 0..sig.inputs().len();\n+\n+    // Take the `self` (\"receiver\") argument out of the range (it's adjusted above).\n+    if rcvr_adjustment.is_some() {\n+        arg_range.start += 1;\n+    }\n+\n+    // Take the last argument, if we need to untuple it (handled below).\n+    if untuple_args.is_some() {\n+        arg_range.end -= 1;\n+    }\n+\n+    // Pass all of the non-special arguments directly.\n+    args.extend(arg_range.map(|i| Operand::Move(Place::from(Local::new(1 + i)))));\n+\n+    // Untuple the last argument, if we have to.\n     if let Some(untuple_args) = untuple_args {\n+        let tuple_arg = Local::new(1 + (sig.inputs().len() - 1));\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n-            let arg_place = Place::from(Local::new(1 + 1));\n-            Operand::Move(tcx.mk_place_field(arg_place, Field::new(i), *ity))\n+            Operand::Move(tcx.mk_place_field(Place::from(tuple_arg), Field::new(i), *ity))\n         }));\n-    } else {\n-        args.extend((1..sig.inputs().len()).map(|i| Operand::Move(Place::from(Local::new(1 + i)))));\n     }\n \n-    let n_blocks = if let Adjustment::RefMut = rcvr_adjustment { 5 } else { 2 };\n+    let n_blocks = if let Some(Adjustment::RefMut) = rcvr_adjustment { 5 } else { 2 };\n     let mut blocks = IndexVec::with_capacity(n_blocks);\n     let block = |blocks: &mut IndexVec<_, _>, statements, kind, is_cleanup| {\n         blocks.push(BasicBlockData {\n@@ -752,7 +778,7 @@ fn build_call_shim<'tcx>(\n             func: callee,\n             args,\n             destination: Some((Place::return_place(), BasicBlock::new(1))),\n-            cleanup: if let Adjustment::RefMut = rcvr_adjustment {\n+            cleanup: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n                 Some(BasicBlock::new(3))\n             } else {\n                 None\n@@ -762,13 +788,13 @@ fn build_call_shim<'tcx>(\n         false,\n     );\n \n-    if let Adjustment::RefMut = rcvr_adjustment {\n+    if let Some(Adjustment::RefMut) = rcvr_adjustment {\n         // BB #1 - drop for Self\n         block(\n             &mut blocks,\n             vec![],\n             TerminatorKind::Drop {\n-                location: Place::from(rcvr_arg),\n+                location: rcvr_place(),\n                 target: BasicBlock::new(2),\n                 unwind: None,\n             },\n@@ -777,13 +803,13 @@ fn build_call_shim<'tcx>(\n     }\n     // BB #1/#2 - return\n     block(&mut blocks, vec![], TerminatorKind::Return, false);\n-    if let Adjustment::RefMut = rcvr_adjustment {\n+    if let Some(Adjustment::RefMut) = rcvr_adjustment {\n         // BB #3 - drop if closure panics\n         block(\n             &mut blocks,\n             vec![],\n             TerminatorKind::Drop {\n-                location: Place::from(rcvr_arg),\n+                location: rcvr_place(),\n                 target: BasicBlock::new(4),\n                 unwind: None,\n             },"}, {"sha": "d645f6cf183b4f435a1b33788de2256fa89edb6c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -14,7 +14,7 @@ use rustc::mir::{\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n-use rustc::traits::TraitQueryMode;\n+use rustc::traits;\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n };\n@@ -90,28 +90,28 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         // If there are unsatisfiable where clauses, then all bets are\n         // off, and we just give up.\n         //\n-        // Note that we use TraitQueryMode::Canonical here, which causes\n-        // us to treat overflow like any other error. This is because we\n-        // are \"speculatively\" evaluating this item with the default substs.\n-        // While this usually succeeds, it may fail with tricky impls\n-        // (e.g. the typenum crate). Const-propagation is fundamentally\n-        // \"best-effort\", and does not affect correctness in any way.\n-        // Therefore, it's perfectly fine to just \"give up\" if we're\n-        // unable to check the bounds with the default substs.\n+        // We manually filter the predicates, skipping anything that's not\n+        // \"global\". We are in a potentially generic context\n+        // (e.g. we are evaluating a function without substituting generic\n+        // parameters, so this filtering serves two purposes:\n         //\n-        // False negatives (failing to run const-prop on something when we actually\n-        // could) are fine. However, false positives (running const-prop on\n-        // an item with unsatisfiable bounds) can lead to us generating invalid\n-        // MIR.\n-        if !tcx.substitute_normalize_and_test_predicates((\n-            source.def_id(),\n-            InternalSubsts::identity_for_item(tcx, source.def_id()),\n-            TraitQueryMode::Canonical,\n-        )) {\n-            trace!(\n-                \"ConstProp skipped for item with unsatisfiable predicates: {:?}\",\n-                source.def_id()\n-            );\n+        // 1. We skip evaluating any predicates that we would\n+        // never be able prove are unsatisfiable (e.g. `<T as Foo>`\n+        // 2. We avoid trying to normalize predicates involving generic\n+        // parameters (e.g. `<T as Foo>::MyItem`). This can confuse\n+        // the normalization code (leading to cycle errors), since\n+        // it's usually never invoked in this way.\n+        let predicates = tcx\n+            .predicates_of(source.def_id())\n+            .predicates\n+            .iter()\n+            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None })\n+            .collect();\n+        if !traits::normalize_and_test_predicates(\n+            tcx,\n+            traits::elaborate_predicates(tcx, predicates).collect(),\n+        ) {\n+            trace!(\"ConstProp skipped for {:?}: found unsatisfiable predicates\", source.def_id());\n             return;\n         }\n "}, {"sha": "ab38eec5f3ea9f2b175e8305d62c52271e12b74b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -2321,8 +2321,8 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         \"{}{}{}{}{:#}fn {}{:#}\",\n         it.visibility.print_with_space(),\n         f.header.constness.print_with_space(),\n-        f.header.unsafety.print_with_space(),\n         f.header.asyncness.print_with_space(),\n+        f.header.unsafety.print_with_space(),\n         print_abi_with_space(f.header.abi),\n         it.name.as_ref().unwrap(),\n         f.generics.print()\n@@ -2332,12 +2332,12 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n     render_attributes(w, it, false);\n     write!(\n         w,\n-        \"{vis}{constness}{unsafety}{asyncness}{abi}fn \\\n+        \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n            {name}{generics}{decl}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n-        unsafety = f.header.unsafety.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n+        unsafety = f.header.unsafety.print_with_space(),\n         abi = print_abi_with_space(f.header.abi),\n         name = it.name.as_ref().unwrap(),\n         generics = f.generics.print(),\n@@ -2832,8 +2832,8 @@ fn render_assoc_item(\n             \"{}{}{}{}{}{:#}fn {}{:#}\",\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n-            header.unsafety.print_with_space(),\n             header.asyncness.print_with_space(),\n+            header.unsafety.print_with_space(),\n             print_default_space(meth.is_default()),\n             print_abi_with_space(header.abi),\n             name,\n@@ -2854,8 +2854,8 @@ fn render_assoc_item(\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n-            header.unsafety.print_with_space(),\n             header.asyncness.print_with_space(),\n+            header.unsafety.print_with_space(),\n             print_default_space(meth.is_default()),\n             print_abi_with_space(header.abi),\n             href = href,"}, {"sha": "5a03e821e8a2ff637b7adbc2117dd987652ba04a", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -15,6 +15,11 @@ pub async fn baz<T>(a: T) -> T {\n     a\n }\n \n+// @has async_fn/fn.qux.html '//pre[@class=\"rust fn\"]' 'pub async unsafe fn qux() -> char'\n+pub async unsafe fn qux() -> char {\n+    '\u26a0'\n+}\n+\n trait Bar {}\n \n impl Bar for () {}\n@@ -26,8 +31,10 @@ pub async fn quux() -> impl Bar {\n \n // @has async_fn/struct.Foo.html\n // @matches - '//code' 'pub async fn f\\(\\)$'\n+// @matches - '//code' 'pub async unsafe fn g\\(\\)$'\n pub struct Foo;\n \n impl Foo {\n     pub async fn f() {}\n+    pub async unsafe fn g() {}\n }"}, {"sha": "ceeebbca5195a3584af408e1ee3502588e542479", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -2,15 +2,15 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-use std::{\n-    cell::RefCell,\n-    fmt::Debug,\n-    rc::Rc,\n-};\n+use std::{cell::RefCell, fmt::Debug, rc::Rc};\n \n-fn non_sync() -> impl Debug { RefCell::new(()) }\n+fn non_sync() -> impl Debug {\n+    RefCell::new(())\n+}\n \n-fn non_send() -> impl Debug { Rc::new(()) }\n+fn non_send() -> impl Debug {\n+    Rc::new(())\n+}\n \n fn take_ref<T>(_: &T) {}\n \n@@ -53,5 +53,4 @@ pub fn pass_assert() {\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n     //~^ ERROR future cannot be sent between threads safely\n-    //~^^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "105fd23ecfb6639d5ea5cdcc28da7d3490fde923", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -62,27 +62,5 @@ LL |     }\n LL | }\n    | - `f` is later dropped here\n \n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |    -----------         ---- required by this bound in `assert_send`\n-...\n-LL |     assert_send(non_sync_with_method_call());\n-   |     ^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n-   |\n-   = help: within `std::fmt::ArgumentV1<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:43:9\n-   |\n-LL |     let f: &mut std::fmt::Formatter = panic!();\n-   |         - has type `&mut std::fmt::Formatter<'_>`\n-LL |     if non_sync().fmt(f).unwrap() == () {\n-LL |         fut().await;\n-   |         ^^^^^^^^^^^ await occurs here, with `f` maybe used later\n-LL |     }\n-LL | }\n-   | - `f` is later dropped here\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "af63d1f75a77022b0bd1a8894b12b40d4c76927a", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n \n #![warn(const_err)]\n "}, {"sha": "e93aa324784c3820629c81cfa1c7f99acb56d1ad", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,25 +1,25 @@\n warning: index out of bounds: the len is 3 but the index is 4\n-  --> $DIR/array-literal-index-oob.rs:6:8\n+  --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n    |        ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/array-literal-index-oob.rs:3:9\n+  --> $DIR/array-literal-index-oob.rs:4:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/array-literal-index-oob.rs:6:8\n+  --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n    |     ---^^^^^^^^^^^^--\n    |        |\n    |        indexing out of bounds: the len is 3 but the index is 4\n \n warning: erroneous constant used\n-  --> $DIR/array-literal-index-oob.rs:6:5\n+  --> $DIR/array-literal-index-oob.rs:7:5\n    |\n LL |     &{ [1, 2, 3][4] };\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "22f863fb15ac4ab887c4b6098d1592e5c68b33a2", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n // compile-flags: -O\n \n #![warn(const_err)]"}, {"sha": "b4330deb3ef10376e5c0d5ece726b913a15df298", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,59 +1,59 @@\n warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:8:14\n+  --> $DIR/promoted_errors.rs:9:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors.rs:4:9\n+  --> $DIR/promoted_errors.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:10:20\n+  --> $DIR/promoted_errors.rs:11:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:10:20\n+  --> $DIR/promoted_errors.rs:11:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^ dividing by zero\n \n warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:10:20\n+  --> $DIR/promoted_errors.rs:11:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^ referenced constant has errors\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:14:14\n+  --> $DIR/promoted_errors.rs:15:14\n    |\n LL |     let _x = 1 / (1 - 1);\n    |              ^^^^^^^^^^^\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:17:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:17:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n \n warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:17:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:20:14\n+  --> $DIR/promoted_errors.rs:21:14\n    |\n LL |     let _x = 1 / (false as u32);\n    |              ^^^^^^^^^^^^^^^^^^"}, {"sha": "62c77f76d9064ca7325cc14369ea7dc2b59ecb03", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n // compile-flags: -C overflow-checks=on -O\n \n #![warn(const_err)]"}, {"sha": "a4dad295edd793f22805c8b5ca10886f2ee55396", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -1,65 +1,65 @@\n warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:7:20\n+  --> $DIR/promoted_errors2.rs:8:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n    |                    ^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors2.rs:4:9\n+  --> $DIR/promoted_errors2.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:9:14\n+  --> $DIR/promoted_errors2.rs:10:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:11:20\n+  --> $DIR/promoted_errors2.rs:12:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:11:20\n+  --> $DIR/promoted_errors2.rs:12:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^ dividing by zero\n \n warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:11:20\n+  --> $DIR/promoted_errors2.rs:12:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n    |                    ^^^^^^^^^^^ referenced constant has errors\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:15:14\n+  --> $DIR/promoted_errors2.rs:16:14\n    |\n LL |     let _x = 1 / (1 - 1);\n    |              ^^^^^^^^^^^\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:17:20\n+  --> $DIR/promoted_errors2.rs:18:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:17:20\n+  --> $DIR/promoted_errors2.rs:18:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n \n warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:17:20\n+  --> $DIR/promoted_errors2.rs:18:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n    |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:21:14\n+  --> $DIR/promoted_errors2.rs:22:14\n    |\n LL |     let _x = 1 / (false as u32);\n    |              ^^^^^^^^^^^^^^^^^^"}, {"sha": "8f21e0648d4c73c012ec1f7f592fd64886f71beb", "filename": "src/test/ui/consts/issue-68264-overflow.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fissue-68264-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Fconsts%2Fissue-68264-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68264-overflow.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+// compile-flags: --emit=mir,link\n+// Regression test for issue #68264\n+// Checks that we don't encounter overflow\n+// when running const-prop on functions with\n+// complicated bounds\n+pub trait Query {}\n+\n+pub trait AsQuery {\n+    type Query: Query;\n+}\n+pub trait Table: AsQuery + Sized {}\n+\n+pub trait LimitDsl {\n+    type Output;\n+}\n+\n+pub(crate) trait LoadQuery<Conn, U>: RunQueryDsl<Conn> {}\n+\n+impl<T: Query> AsQuery for T {\n+    type Query = Self;\n+}\n+\n+impl<T> LimitDsl for T\n+where\n+    T: Table,\n+    T::Query: LimitDsl,\n+{\n+    type Output = <T::Query as LimitDsl>::Output;\n+}\n+\n+pub(crate) trait RunQueryDsl<Conn>: Sized {\n+    fn first<U>(self, _conn: &Conn) -> U\n+    where\n+        Self: LimitDsl,\n+        Self::Output: LoadQuery<Conn, U>,\n+    {\n+        // Overflow is caused by this function body\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0407eafbfd41c5f430f207a0ca28b5b4b3902067", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr-with-arg.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+fn pass_to_ptr_call<T>(f: fn(T), x: T) {\n+    f(x);\n+}\n+\n+#[track_caller]\n+fn tracked_unit(_: ()) {\n+    let expected_line = line!() - 1;\n+    let location = std::panic::Location::caller();\n+    assert_eq!(location.file(), file!());\n+    assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+}\n+\n+fn main() {\n+    pass_to_ptr_call(tracked_unit, ());\n+}"}, {"sha": "a4baaa26ced1eed7ae3d5f477ec23772408c2027", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+fn ptr_call(f: fn()) {\n+    f();\n+}\n+\n+#[track_caller]\n+fn tracked() {\n+    let expected_line = line!() - 1;\n+    let location = std::panic::Location::caller();\n+    assert_eq!(location.file(), file!());\n+    assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+}\n+\n+fn main() {\n+    ptr_call(tracked);\n+}"}, {"sha": "cff04e197e48a2c019c8a549ffdd3eedac7858f2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b945049b6e6795bcfb9fb8007a46c44a93c0aa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=06b945049b6e6795bcfb9fb8007a46c44a93c0aa", "patch": "@@ -110,6 +110,7 @@ static TARGETS: &[&str] = &[\n     \"riscv32imac-unknown-none-elf\",\n     \"riscv64imac-unknown-none-elf\",\n     \"riscv64gc-unknown-none-elf\",\n+    \"riscv64gc-unknown-linux-gnu\",\n     \"s390x-unknown-linux-gnu\",\n     \"sparc64-unknown-linux-gnu\",\n     \"sparcv9-sun-solaris\","}]}