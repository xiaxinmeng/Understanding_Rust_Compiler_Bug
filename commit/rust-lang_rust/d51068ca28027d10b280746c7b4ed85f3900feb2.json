{"sha": "d51068ca28027d10b280746c7b4ed85f3900feb2", "node_id": "C_kwDOAAsO6NoAKGQ1MTA2OGNhMjgwMjdkMTBiMjgwNzQ2YzdiNGVkODVmMzkwMGZlYjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-21T16:07:37Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:47Z"}, "message": "Use the constness from the param env instead of having a separate dimension for it\n\nThis breaks a ~const test that will be fixed in a follow up commit of this PR", "tree": {"sha": "9fc1ccb940b249b316506089cf15ccb98ab2c67b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc1ccb940b249b316506089cf15ccb98ab2c67b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51068ca28027d10b280746c7b4ed85f3900feb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk03MACgkQbQF6ltjm\nwvl6JRAAgtkW1IiHqKeuiCkyVkiuoj2Y8Jnf3yk4ZPYGAHHKcveETGjxug4SrODY\nwtlyQDIYVSnx6YMZ55QkvYzGZCpgH45wH2ntAV2rXSUofvIWe0jq/c7eyjp4EGWV\nGNC4+E/V7Zdsb+DBCJiO2sK63JfUBvVj4qFVb4yvPZWISg/exwrGwBb/nzer1Okj\n3A+y8OutNh2VrKQp5HHD8gwU9kYFt4jpVXsC8dRGJ5cQgT8vZlB3ShI6XGeUdOWN\nqyDW2JygCHutSxNskS54fBaf2P0x2+GuWXMd3vq0WjQ3Y0WbYiDmkZEBc6vCvjFr\n9zrKR0cD6HoD6RLf9GwJgaqCVbCqIJa6LZgZ4BFfatWYV3hnW239Iuu/8wYtL8Lo\n4HhlO8GTefyJoS0WVFhNv8+0PjgPTDSRuYsKE2ilODaU4x2wgN40FPJf5IoSFBiP\nSjYVGv7dcEz1LQBO1nWN+VjxWxHjl6TbCouQMCynsJ+bq31ZTEDBK9UAbfssTKXG\nxDUDt0OXlmtxiePZ18YJlc8dj+zAntlC3/gBJU2vpbYl3NXMCZcPVtaH0ypNWGEp\n+I9PVsVi745e6TGwb9XfkRiJnBhu1pY3F7+dqQwulwz0UyEjn9MyiMUVBA8KQREv\nmrCJ7fXrbq3wPkt8UekMNnHqXAuDjlw9f6B2nzz3PBMcLCERnVo=\n=4uB6\n-----END PGP SIGNATURE-----", "payload": "tree 9fc1ccb940b249b316506089cf15ccb98ab2c67b\nparent 19f2101272464465b7cd4758230a95d9f3486cbf\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1634832457 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191987 +0800\n\nUse the constness from the param env instead of having a separate dimension for it\n\nThis breaks a ~const test that will be fixed in a follow up commit of this PR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51068ca28027d10b280746c7b4ed85f3900feb2", "html_url": "https://github.com/rust-lang/rust/commit/d51068ca28027d10b280746c7b4ed85f3900feb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51068ca28027d10b280746c7b4ed85f3900feb2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f2101272464465b7cd4758230a95d9f3486cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f2101272464465b7cd4758230a95d9f3486cbf", "html_url": "https://github.com/rust-lang/rust/commit/19f2101272464465b7cd4758230a95d9f3486cbf"}], "stats": {"total": 167, "additions": 25, "deletions": 142}, "files": [{"sha": "f9e65ea907564f380adcca1ee25511772f7a6b19", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -817,8 +817,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                        let mut selcx =\n-                            SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+                        let mut selcx = SelectionContext::new(&infcx);\n                         selcx.select(&obligation)\n                     });\n "}, {"sha": "43612292f5283eb3937490e1fd6e7d86564d9383", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -3,7 +3,6 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n@@ -167,7 +166,7 @@ impl Qualif for NeedsNonConstDrop {\n         );\n \n         let implsrc = cx.tcx.infer_ctxt().enter(|infcx| {\n-            let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+            let mut selcx = SelectionContext::new(&infcx);\n             selcx.select(&obligation)\n         });\n         !matches!("}, {"sha": "d9ef60d3bfc95e03793e0fa57537c459093a5d2b", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -1,7 +1,6 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ToPredicate, Ty, WithConstness};\n \n@@ -48,25 +47,10 @@ pub trait TraitEngine<'tcx>: 'tcx {\n \n     fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n-    fn select_all_with_constness_or_error(\n+    fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        _constness: hir::Constness,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n-        self.select_all_or_error(infcx)\n-    }\n-\n-    fn select_where_possible(&mut self, infcx: &InferCtxt<'_, 'tcx>)\n-    -> Vec<FulfillmentError<'tcx>>;\n-\n-    // FIXME(fee1-dead) this should not provide a default body for chalk as chalk should be updated\n-    fn select_with_constness_where_possible(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        _constness: hir::Constness,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n-        self.select_where_possible(infcx)\n-    }\n+    ) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n "}, {"sha": "7e30f859dae4eaa52d4131bb839ff4bdfd95e03a", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -69,6 +69,16 @@ impl PredicateObligation<'tcx> {\n     }\n }\n \n+impl TraitObligation<'tcx> {\n+    /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n+    pub fn is_const(&self) -> bool {\n+        match (self.predicate.skip_binder().constness, self.param_env.constness()) {\n+            (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PredicateObligation<'_>, 32);"}, {"sha": "8a60f9b8602f6ed407236baa65ee4dde4fcc2861", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -4,7 +4,6 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n@@ -231,21 +230,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n-    fn select_all_with_constness_or_error(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        constness: rustc_hir::Constness,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n-        {\n-            let errors = self.select_with_constness_where_possible(infcx, constness);\n-            if !errors.is_empty() {\n-                return errors;\n-            }\n-        }\n-\n-        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n-    }\n-\n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n@@ -254,15 +238,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n-    fn select_with_constness_where_possible(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        constness: hir::Constness,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n-        let mut selcx = SelectionContext::with_constness(infcx, constness);\n-        self.select(&mut selcx)\n-    }\n-\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n@@ -679,12 +654,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_known_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            //\n-            // If the predicate is considered const, then we cannot use this because\n-            // it will cause false negatives in the ui tests.\n-            if !self.selcx.is_predicate_const(obligation.predicate)\n-                && infcx.predicate_must_hold_considering_regions(obligation)\n-            {\n+            if infcx.predicate_must_hold_considering_regions(obligation) {\n                 debug!(\n                     \"selecting trait at depth {} evaluated to holds\",\n                     obligation.recursion_depth\n@@ -738,12 +708,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_global(tcx) {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            //\n-            // If the predicate is considered const, then we cannot use this because\n-            // it will cause false negatives in the ui tests.\n-            if !self.selcx.is_predicate_const(obligation.predicate)\n-                && self.selcx.infcx().predicate_must_hold_considering_regions(obligation)\n-            {\n+            if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {\n                 return ProcessResult::Changed(vec![]);\n             } else {\n                 tracing::debug!(\"Does NOT hold: {:?}\", obligation);"}, {"sha": "5a857676a20c86105eccce4a6a92c2bc30bbe963", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -303,7 +303,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.drop_trait() == Some(def_id)\n                 && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n             {\n-                if self.is_in_const_context {\n+                if obligation.param_env.constness() == hir::Constness::Const {\n                     self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n                 } else {\n                     debug!(\"passing ~const Drop bound; in non-const context\");"}, {"sha": "173eb1c5894c45a9655f9a0fb8a9bb492e00f3aa", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -128,9 +128,6 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// and a negative impl\n     allow_negative_impls: bool,\n \n-    /// Are we in a const context that needs `~const` bounds to be const?\n-    is_in_const_context: bool,\n-\n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n     /// rather than immediately reported because we do not have accurate spans.\n@@ -222,7 +219,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -234,7 +230,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -250,7 +245,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n-            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -266,26 +260,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            is_in_const_context: false,\n             query_mode,\n         }\n     }\n \n-    pub fn with_constness(\n-        infcx: &'cx InferCtxt<'cx, 'tcx>,\n-        constness: hir::Constness,\n-    ) -> SelectionContext<'cx, 'tcx> {\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: false,\n-            intercrate_ambiguity_causes: None,\n-            allow_negative_impls: false,\n-            is_in_const_context: matches!(constness, hir::Constness::Const),\n-            query_mode: TraitQueryMode::Standard,\n-        }\n-    }\n-\n     /// Enables tracking of intercrate ambiguity causes. These are\n     /// used in coherence to give improved diagnostics. We don't do\n     /// this until we detect a coherence error because it can lead to\n@@ -318,20 +296,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.intercrate\n     }\n \n-    /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n-    pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n-        matches!(pred.constness, ty::BoundConstness::ConstIfConst) && self.is_in_const_context\n-    }\n-\n-    /// Returns `true` if the predicate is considered `const` to\n-    /// this selection context.\n-    pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n-        match pred.kind().skip_binder() {\n-            ty::PredicateKind::Trait(pred) => self.is_trait_predicate_const(pred),\n-            _ => false,\n-        }\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //\n@@ -1138,7 +1102,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         for candidate in candidates {\n             // Respect const trait obligations\n-            if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n+            if obligation.is_const() {\n                 match candidate {\n                     // const impl\n                     ImplCandidate(def_id)"}, {"sha": "8141950ee8dddb3261bb990f5d5aab004f664c8a", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -1388,13 +1388,7 @@ pub fn check_type_bounds<'tcx>(\n         impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n \n     tcx.infer_ctxt().enter(move |infcx| {\n-        let constness = impl_ty\n-            .container\n-            .impl_def_id()\n-            .map(|did| tcx.impl_constness(did))\n-            .unwrap_or(hir::Constness::NotConst);\n-\n-        let inh = Inherited::with_constness(infcx, impl_ty.def_id.expect_local(), constness);\n+        let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n         let infcx = &inh.infcx;\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n@@ -1439,7 +1433,7 @@ pub fn check_type_bounds<'tcx>(\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors =\n-            inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness);\n+            inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);"}, {"sha": "58a2f21d22e6700688db5002aa992e75bdc4c5e0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -613,7 +613,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let errors = self\n             .fulfillment_cx\n             .borrow_mut()\n-            .select_all_with_constness_or_error(&self, self.inh.constness);\n+            .select_all_or_error(&self);\n \n         if !errors.is_empty() {\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n@@ -629,7 +629,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut result = self\n             .fulfillment_cx\n             .borrow_mut()\n-            .select_with_constness_where_possible(self, self.inh.constness);\n+            .select_where_possible(self);\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);"}, {"sha": "bf52e7750433138689e5748b841307cda9ae8432", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -53,9 +53,6 @@ pub struct Inherited<'a, 'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n-    /// Reports whether this is in a const context.\n-    pub(super) constness: hir::Constness,\n-\n     pub(super) body_id: Option<hir::BodyId>,\n \n     /// Whenever we introduce an adjustment from `!` into a type variable,\n@@ -102,16 +99,6 @@ impl<'tcx> InheritedBuilder<'tcx> {\n \n impl Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n-        let tcx = infcx.tcx;\n-        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        Self::with_constness(infcx, def_id, tcx.hir().get(item_id).constness_for_typeck())\n-    }\n-\n-    pub(super) fn with_constness(\n-        infcx: InferCtxt<'a, 'tcx>,\n-        def_id: LocalDefId,\n-        constness: hir::Constness,\n-    ) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = tcx.hir().maybe_body_owned_by(item_id);\n@@ -128,7 +115,6 @@ impl Inherited<'a, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n-            constness,\n             body_id,\n         }\n     }"}, {"sha": "c65adc917847935b71d8357f2f4503a156017aaf", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d51068ca28027d10b280746c7b4ed85f3900feb2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51068ca28027d10b280746c7b4ed85f3900feb2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=d51068ca28027d10b280746c7b4ed85f3900feb2", "patch": "@@ -1,6 +1,6 @@\n // FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n-\n+// check-pass\n struct NonConstAdd(i32);\n \n impl std::ops::Add for NonConstAdd {\n@@ -29,3 +29,5 @@ impl const Baz for NonConstAdd {\n }\n \n fn main() {}\n+\n+// TODO: this test should not pass\n\\ No newline at end of file"}, {"sha": "b894092205e433448fc0c812770e9fbace38583b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19f2101272464465b7cd4758230a95d9f3486cbf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19f2101272464465b7cd4758230a95d9f3486cbf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=19f2101272464465b7cd4758230a95d9f3486cbf", "patch": "@@ -1,20 +0,0 @@\n-error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:19:5\n-   |\n-LL |     type Bar = NonConstAdd;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n-   |\n-   = help: the trait `Add` is not implemented for `NonConstAdd`\n-note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:15:15\n-   |\n-LL |     type Bar: ~const std::ops::Add;\n-   |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl const Foo for NonConstAdd where NonConstAdd: Add {\n-   |                                ++++++++++++++++++++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}]}