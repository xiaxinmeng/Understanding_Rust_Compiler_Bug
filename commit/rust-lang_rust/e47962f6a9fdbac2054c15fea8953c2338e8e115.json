{"sha": "e47962f6a9fdbac2054c15fea8953c2338e8e115", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Nzk2MmY2YTlmZGJhYzIwNTRjMTVmZWE4OTUzYzIzMzhlOGUxMTU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-01T02:07:00Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-01T02:07:24Z"}, "message": "Have lint build up a table of the warning settings on a per item basis for later use.", "tree": {"sha": "f17b62b08b8e536769379f9a43a5372de71f20ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17b62b08b8e536769379f9a43a5372de71f20ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47962f6a9fdbac2054c15fea8953c2338e8e115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47962f6a9fdbac2054c15fea8953c2338e8e115", "html_url": "https://github.com/rust-lang/rust/commit/e47962f6a9fdbac2054c15fea8953c2338e8e115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47962f6a9fdbac2054c15fea8953c2338e8e115/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a65da835730aa91a80cfc6011dd5a21f0a95e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a65da835730aa91a80cfc6011dd5a21f0a95e6", "html_url": "https://github.com/rust-lang/rust/commit/d1a65da835730aa91a80cfc6011dd5a21f0a95e6"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "019c40abe5d6c44787b5f255393ddc1dc5a6caa4", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e47962f6a9fdbac2054c15fea8953c2338e8e115/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47962f6a9fdbac2054c15fea8953c2338e8e115/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=e47962f6a9fdbac2054c15fea8953c2338e8e115", "patch": "@@ -205,8 +205,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_use_map, crate));\n \n-    time(time_passes, \"lint checking\",\n-         bind lint::check_crate(ty_cx, crate, sess.opts.lint_opts));\n+    let _warning_settings =\n+        time(time_passes, \"lint checking\",\n+             bind lint::check_crate(ty_cx, crate, sess.opts.lint_opts));\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx)}; }\n     let outputs = option::get(outputs);"}, {"sha": "be34fca12c35e9ba68416859d8767061b94578cf", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e47962f6a9fdbac2054c15fea8953c2338e8e115/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47962f6a9fdbac2054c15fea8953c2338e8e115/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=e47962f6a9fdbac2054c15fea8953c2338e8e115", "patch": "@@ -11,6 +11,7 @@ import syntax::print::pprust::expr_to_str;\n export lint, ctypes, unused_imports;\n export level, ignore, warn, error;\n export lookup_lint, lint_dict, get_lint_dict, check_crate;\n+export warning_settings;\n \n #[doc=\"\n \n@@ -91,6 +92,9 @@ fn get_lint_dict() -> lint_dict {\n type lint_modes = smallintmap<level>;\n type lint_mode_map = hashmap<ast::node_id, lint_modes>;\n \n+// settings_map maps node ids of items with non-default warning settings\n+// to their settings; default_settings contains the settings for everything\n+// not in the map.\n type warning_settings = {\n     default_settings: lint_modes,\n     settings_map: lint_mode_map\n@@ -104,6 +108,8 @@ fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n \n type ctxt = {dict: lint_dict,\n              curr: lint_modes,\n+             is_default: bool,\n+             lint_mode_map: lint_mode_map,\n              tcx: ty::ctxt};\n \n \n@@ -157,7 +163,8 @@ impl methods for ctxt {\n                             // we do multiple unneeded copies of the map\n                             // if many attributes are set, but this shouldn't\n                             // actually be a problem...\n-                            new_ctxt = {curr: clone_lint_modes(self.curr)\n+                            new_ctxt = {is_default: false,\n+                                        curr: clone_lint_modes(self.curr)\n                                         with new_ctxt};\n                             new_ctxt.set_level(lint, new_level);\n                           }\n@@ -210,6 +217,9 @@ fn check_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n               old_vecs { check_item_old_vecs(cx, level, i); }\n             }\n         }\n+        if !cx.is_default {\n+            cx.lint_mode_map.insert(i.id, cx.curr);\n+        }\n         visit::visit_item(i, cx, v);\n     }\n }\n@@ -357,15 +367,19 @@ fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n \n \n fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n-               lint_opts: [(lint, level)]) {\n+               lint_opts: [(lint, level)]) -> warning_settings {\n \n     fn hash_lint(&&lint: lint) -> uint { lint as uint }\n     fn eq_lint(&&a: lint, &&b: lint) -> bool { a == b }\n \n     let cx = {dict: get_lint_dict(),\n               curr: std::smallintmap::mk(),\n+              is_default: true,\n+              lint_mode_map: int_hash(),\n               tcx: tcx};\n \n+    let mut default_settings = cx.curr; // dummy value\n+\n     // Install defaults.\n     for cx.dict.each {|_k, spec| cx.set_level(spec.lint, spec.default); }\n \n@@ -376,6 +390,9 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n     }\n \n     cx.with_warn_attrs(crate.node.attrs) {|cx|\n+        default_settings = cx.curr;\n+        let cx = {is_default: true with cx};\n+\n         let visit = visit::mk_vt(@{\n             visit_item: check_item\n             with *visit::default_visitor()\n@@ -384,6 +401,9 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n     }\n \n     tcx.sess.abort_if_errors();\n+\n+    ret {default_settings: default_settings,\n+         settings_map: cx.lint_mode_map};\n }\n \n //"}]}