{"sha": "590dd7dfef3e835756edb5f920bf31cd19eef4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MGRkN2RmZWYzZTgzNTc1NmVkYjVmOTIwYmYzMWNkMTllZWY0ZDA=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-12-05T22:43:53Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-12-09T16:08:13Z"}, "message": "Add options to --extern flag.", "tree": {"sha": "c7b2838dc38c2a331b2771f83289e0bcc26a08cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b2838dc38c2a331b2771f83289e0bcc26a08cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590dd7dfef3e835756edb5f920bf31cd19eef4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590dd7dfef3e835756edb5f920bf31cd19eef4d0", "html_url": "https://github.com/rust-lang/rust/commit/590dd7dfef3e835756edb5f920bf31cd19eef4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590dd7dfef3e835756edb5f920bf31cd19eef4d0/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "html_url": "https://github.com/rust-lang/rust/commit/a0312c156d8470179101ab71ef6a69c0b9a8dd0b"}], "stats": {"total": 354, "additions": 254, "deletions": 100}, "files": [{"sha": "d4b5e833dfb23df34cf3304089b6df867c008b6a", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -7,7 +7,7 @@ use rustc::middle::cstore;\n use rustc::session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n-use rustc::session::config::{rustc_optgroups, Options, ErrorOutputType, Passes};\n+use rustc::session::config::{rustc_optgroups, Options, ErrorOutputType, Passes, ExternLocation};\n use rustc::session::{build_session, Session};\n use rustc::session::search_paths::SearchPath;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -38,14 +38,15 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n fn new_public_extern_entry<S, I>(locations: I) -> ExternEntry\n where\n     S: Into<String>,\n-    I: IntoIterator<Item = Option<S>>,\n+    I: IntoIterator<Item = S>,\n {\n-    let locations: BTreeSet<_> = locations.into_iter().map(|o| o.map(|s| s.into()))\n+    let locations: BTreeSet<_> = locations.into_iter().map(|s| s.into())\n         .collect();\n \n     ExternEntry {\n-        locations,\n-        is_private_dep: false\n+        location: ExternLocation::ExactPaths(locations),\n+        is_private_dep: false,\n+        add_prelude: true,\n     }\n }\n \n@@ -160,33 +161,33 @@ fn test_externs_tracking_hash_different_construction_order() {\n     v1.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"a\"),\n-            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![\"b\", \"c\"])\n         ),\n         (\n             String::from(\"d\"),\n-            new_public_extern_entry(vec![Some(\"e\"), Some(\"f\")])\n+            new_public_extern_entry(vec![\"e\", \"f\"])\n         ),\n     ]));\n \n     v2.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"d\"),\n-            new_public_extern_entry(vec![Some(\"e\"), Some(\"f\")])\n+            new_public_extern_entry(vec![\"e\", \"f\"])\n         ),\n         (\n             String::from(\"a\"),\n-            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![\"b\", \"c\"])\n         ),\n     ]));\n \n     v3.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"a\"),\n-            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![\"b\", \"c\"])\n         ),\n         (\n             String::from(\"d\"),\n-            new_public_extern_entry(vec![Some(\"f\"), Some(\"e\")])\n+            new_public_extern_entry(vec![\"f\", \"e\"])\n         ),\n     ]));\n "}, {"sha": "71871373e35e94d6841622ac548aa83d827568f6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -218,13 +218,14 @@ impl<'a> CrateLoader<'a> {\n             let source = self.cstore.get_crate_data(cnum).source();\n             if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n-                let found = entry.locations.iter().filter_map(|l| l.as_ref()).any(|l| {\n-                    let l = fs::canonicalize(l).ok();\n-                    source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n-                    source.rlib.as_ref().map(|p| &p.0) == l.as_ref()\n-                });\n-                if found {\n-                    ret = Some(cnum);\n+                if let Some(mut files) = entry.files() {\n+                    if files.any(|l| {\n+                        let l = fs::canonicalize(l).ok();\n+                        source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n+                        source.rlib.as_ref().map(|p| &p.0) == l.as_ref()\n+                    }) {\n+                        ret = Some(cnum);\n+                    }\n                 }\n                 return\n             }"}, {"sha": "8a1eeea02512e89f30693a62a075f4d79d1a6c25", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -328,8 +328,9 @@ impl<'a> CrateLocator<'a> {\n             crate_name,\n             exact_paths: if hash.is_none() {\n                 sess.opts.externs.get(&crate_name.as_str()).into_iter()\n-                    .flat_map(|entry| entry.locations.iter())\n-                    .filter_map(|location| location.clone().map(PathBuf::from)).collect()\n+                    .filter_map(|entry| entry.files())\n+                    .flatten()\n+                    .map(|location| PathBuf::from(location)).collect()\n             } else {\n                 // SVH being specified means this is a transitive dependency,\n                 // so `--extern` options do not apply."}, {"sha": "2aa79d7b0da50420563e8ccde8ca145a58d30bd2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -1126,8 +1126,10 @@ impl<'a> Resolver<'a> {\n         definitions.create_root_def(crate_name, session.local_crate_disambiguator());\n \n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> =\n-            session.opts.externs.iter().map(|kv| (Ident::from_str(kv.0), Default::default()))\n-                                       .collect();\n+            session.opts.externs.iter()\n+                .filter(|(_, entry)| entry.add_prelude)\n+                .map(|(name, _)| (Ident::from_str(name), Default::default()))\n+                .collect();\n \n         if !attr::contains_name(&krate.attrs, sym::no_core) {\n             extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());"}, {"sha": "7f3bab8f23299b0041127dadd3fddcb0f7a57a6e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 132, "deletions": 37, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n@@ -31,7 +33,7 @@ use std::fmt;\n use std::str::{self, FromStr};\n use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n-use std::iter::FromIterator;\n+use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n \n pub struct Config {\n@@ -322,10 +324,35 @@ impl OutputTypes {\n #[derive(Clone)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n-#[derive(Clone, Debug, Default)]\n+#[derive(Clone, Debug)]\n pub struct ExternEntry {\n-    pub locations: BTreeSet<Option<String>>,\n-    pub is_private_dep: bool\n+    pub location: ExternLocation,\n+    /// Indicates this is a \"private\" dependency for the\n+    /// `exported_private_dependencies` lint.\n+    ///\n+    /// This can be set with the `priv` option like\n+    /// `--extern priv:name=foo.rlib`.\n+    pub is_private_dep: bool,\n+    /// Add the extern entry to the extern prelude.\n+    ///\n+    /// This can be disabled with the `noprelude` option like\n+    /// `--extern noprelude:name`.\n+    pub add_prelude: bool,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum ExternLocation {\n+    /// Indicates to look for the library in the search paths.\n+    ///\n+    /// Added via `--extern name`.\n+    FoundInLibrarySearchDirectories,\n+    /// The locations where this extern entry must be found.\n+    ///\n+    /// The `CrateLoader` is responsible for loading these and figuring out\n+    /// which one to use.\n+    ///\n+    /// Added via `--extern prelude_name=some_file.rlib`\n+    ExactPaths(BTreeSet<String>),\n }\n \n impl Externs {\n@@ -342,6 +369,18 @@ impl Externs {\n     }\n }\n \n+impl ExternEntry {\n+    fn new(location: ExternLocation) -> ExternEntry {\n+        ExternEntry { location, is_private_dep: false, add_prelude: false }\n+    }\n+\n+    pub fn files(&self) -> Option<impl Iterator<Item = &String>> {\n+        match &self.location {\n+            ExternLocation::ExactPaths(set) => Some(set.iter()),\n+            _ => None,\n+        }\n+    }\n+}\n \n macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [UNTRACKED]) => ({});\n@@ -1869,12 +1908,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME[=PATH]\",\n         ),\n-        opt::multi_s(\n-            \"\",\n-            \"extern-private\",\n-            \"Specify where an extern rust library is located, marking it as a private dependency\",\n-            \"NAME=PATH\",\n-        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -2435,43 +2468,105 @@ fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType)\n     }\n }\n \n-fn parse_externs(\n+pub fn parse_externs(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n     error_format: ErrorOutputType,\n ) -> Externs {\n-    if matches.opt_present(\"extern-private\") && !debugging_opts.unstable_options {\n-        early_error(\n-            ErrorOutputType::default(),\n-            \"'--extern-private' is unstable and only \\\n-            available for nightly builds of rustc.\"\n-        )\n-    }\n-\n-    // We start out with a `Vec<(Option<String>, bool)>>`,\n-    // and later convert it into a `BTreeSet<(Option<String>, bool)>`\n-    // This allows to modify entries in-place to set their correct\n-    // 'public' value.\n+    let is_unstable_enabled = debugging_opts.unstable_options;\n     let mut externs: BTreeMap<String, ExternEntry> = BTreeMap::new();\n-    for (arg, private) in matches.opt_strs(\"extern\").into_iter().map(|v| (v, false))\n-        .chain(matches.opt_strs(\"extern-private\").into_iter().map(|v| (v, true))) {\n-\n+    for arg in matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().unwrap_or_else(||\n-            early_error(error_format, \"--extern value must not be empty\"));\n-        let location = parts.next().map(|s| s.to_string());\n+        let name = parts\n+            .next()\n+            .unwrap_or_else(|| early_error(error_format, \"--extern value must not be empty\"));\n+        let path = parts.next().map(|s| s.to_string());\n+\n+        let mut name_parts = name.splitn(2, ':');\n+        let first_part = name_parts.next();\n+        let second_part = name_parts.next();\n+        let (options, name) = match (first_part, second_part) {\n+            (Some(opts), Some(name)) => (Some(opts), name),\n+            (Some(name), None) => (None, name),\n+            (None, None) => early_error(error_format, \"--extern name must not be empty\"),\n+            _ => unreachable!(),\n+        };\n+\n+        let entry = externs.entry(name.to_owned());\n \n-        let entry = externs\n-            .entry(name.to_owned())\n-            .or_default();\n+        use std::collections::btree_map::Entry;\n \n+        let entry = if let Some(path) = path {\n+            // --extern prelude_name=some_file.rlib\n+            match entry {\n+                Entry::Vacant(vacant) => {\n+                    let files = BTreeSet::from_iter(iter::once(path));\n+                    vacant.insert(ExternEntry::new(ExternLocation::ExactPaths(files)))\n+                }\n+                Entry::Occupied(occupied) => {\n+                    let ext_ent = occupied.into_mut();\n+                    match ext_ent {\n+                        ExternEntry { location: ExternLocation::ExactPaths(files), .. } => {\n+                            files.insert(path);\n+                        }\n+                        ExternEntry {\n+                            location: location @ ExternLocation::FoundInLibrarySearchDirectories,\n+                            ..\n+                        } => {\n+                            // Exact paths take precedence over search directories.\n+                            let files = BTreeSet::from_iter(iter::once(path));\n+                            *location = ExternLocation::ExactPaths(files);\n+                        }\n+                    }\n+                    ext_ent\n+                }\n+            }\n+        } else {\n+            // --extern prelude_name\n+            match entry {\n+                Entry::Vacant(vacant) => {\n+                    vacant.insert(ExternEntry::new(ExternLocation::FoundInLibrarySearchDirectories))\n+                }\n+                Entry::Occupied(occupied) => {\n+                    // Ignore if already specified.\n+                    occupied.into_mut()\n+                }\n+            }\n+        };\n \n-        entry.locations.insert(location.clone());\n+        let mut is_private_dep = false;\n+        let mut add_prelude = true;\n+        if let Some(opts) = options {\n+            if !is_unstable_enabled {\n+                early_error(\n+                    error_format,\n+                    \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable `--extern options\",\n+                );\n+            }\n+            for opt in opts.split(',') {\n+                match opt {\n+                    \"priv\" => is_private_dep = true,\n+                    \"noprelude\" => {\n+                        if let ExternLocation::ExactPaths(_) = &entry.location {\n+                            add_prelude = false;\n+                        } else {\n+                            early_error(\n+                                error_format,\n+                                \"the `noprelude` --extern option requires a file path\",\n+                            );\n+                        }\n+                    }\n+                    _ => early_error(error_format, &format!(\"unknown --extern option `{}`\", opt)),\n+                }\n+            }\n+        }\n \n-        // Crates start out being not private,\n-        // and go to being private if we see an '--extern-private'\n-        // flag\n-        entry.is_private_dep |= private;\n+        // Crates start out being not private, and go to being private `priv`\n+        // is specified.\n+        entry.is_private_dep |= is_private_dep;\n+        // If any flag is missing `noprelude`, then add to the prelude.\n+        entry.add_prelude |= add_prelude;\n     }\n     Externs(externs)\n }"}, {"sha": "0db3d28bf0e3782d989cd785b2b3c9994a331734", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -7,10 +7,10 @@ use errors;\n use getopts;\n use rustc::lint::Level;\n use rustc::session;\n-use rustc::session::config::{CrateType, parse_crate_types_from_list};\n+use rustc::session::config::{CrateType, parse_crate_types_from_list, parse_externs};\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n-                             get_cmd_lint_options, host_triple, ExternEntry};\n+                             get_cmd_lint_options, host_triple};\n use rustc::session::search_paths::SearchPath;\n use rustc_driver;\n use rustc_target::spec::TargetTriple;\n@@ -320,13 +320,7 @@ impl Options {\n         let libs = matches.opt_strs(\"L\").iter()\n             .map(|s| SearchPath::from_cli_opt(s, error_format))\n             .collect();\n-        let externs = match parse_externs(&matches) {\n-            Ok(ex) => ex,\n-            Err(err) => {\n-                diag.struct_err(&err).emit();\n-                return Err(1);\n-            }\n-        };\n+        let externs = parse_externs(&matches, &debugging_options, error_format);\n         let extern_html_root_urls = match parse_extern_html_roots(&matches) {\n             Ok(ex) => ex,\n             Err(err) => {\n@@ -617,24 +611,3 @@ fn parse_extern_html_roots(\n \n     Ok(externs)\n }\n-\n-/// Extracts `--extern CRATE=PATH` arguments from `matches` and\n-/// returns a map mapping crate names to their paths or else an\n-/// error message.\n-/// Also handles `--extern-private` which for the purposes of rustdoc\n-/// we can treat as `--extern`\n-// FIXME(eddyb) This shouldn't be duplicated with `rustc::session`.\n-fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n-    let mut externs: BTreeMap<_, ExternEntry> = BTreeMap::new();\n-    for arg in matches.opt_strs(\"extern\").iter().chain(matches.opt_strs(\"extern-private\").iter()) {\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n-        let location = parts.next().map(|s| s.to_string());\n-        let name = name.to_string();\n-        // For Rustdoc purposes, we can treat all externs as public\n-        externs.entry(name)\n-            .or_default()\n-            .locations.insert(location.clone());\n-    }\n-    Ok(Externs::new(externs))\n-}"}, {"sha": "a524801bea6bf27b47dabb96fe13097a52b33f79", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -248,7 +248,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         ..\n     } = options;\n \n-    let extern_names: Vec<String> = externs.iter().map(|(s,_)| s).cloned().collect();\n+    let extern_names: Vec<String> = externs.iter()\n+        .filter(|(_, entry)| entry.add_prelude)\n+        .map(|(name, _)| name).cloned().collect();\n \n     // Add the doc cfg into the doc build.\n     cfgs.push(\"doc\".to_string());"}, {"sha": "a4be3dee938ed307ec4d5241f03659eba52590ec", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -145,10 +145,6 @@ fn opts() -> Vec<RustcOptGroup> {\n         stable(\"extern\", |o| {\n             o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME[=PATH]\")\n         }),\n-        unstable(\"extern-private\", |o| {\n-            o.optmulti(\"\", \"extern-private\",\n-                       \"pass an --extern to rustc (compatibility only)\", \"NAME=PATH\")\n-        }),\n         unstable(\"extern-html-root-url\", |o| {\n             o.optmulti(\"\", \"extern-html-root-url\",\n                        \"base URL to use for dependencies\", \"NAME=URL\")"}, {"sha": "18f9d8bab600498d429542aff5e0eb4e5fedf63e", "filename": "src/test/run-make-fulldeps/extern-flag-noprelude/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# Test --extern noprelude\n+\n+all:\n+\t$(RUSTC) dep.rs --crate-name=dep --crate-type=rlib\n+\t$(RUSTC) foo.rs --edition=2018 -Zunstable-options \\\n+\t\t--extern noprelude:dep=$(TMPDIR)/libdep.rlib 2>&1 | \\\n+\t\t$(CGREP) -e 'failed to resolve.*`dep`'\n+\t$(RUSTC) foo.rs --edition=2018 -Zunstable-options \\\n+\t\t--extern dep=$(TMPDIR)/libdep.rlib"}, {"sha": "dd2f373f849c65ce8d79232002a115d595962c7f", "filename": "src/test/run-make-fulldeps/extern-flag-noprelude/dep.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Fdep.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,3 @@\n+pub fn somefun() {}\n+\n+pub struct S;"}, {"sha": "9bb1b78409f860a0b3fdf7867d20e50d282c8c52", "filename": "src/test/run-make-fulldeps/extern-flag-noprelude/foo.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    dep::somefun();\n+}"}, {"sha": "3dc2f1d73f8e4b02219f5fcfc6be2284f435c6e8", "filename": "src/test/ui/extern-flag/multiple-opts.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,20 @@\n+// aux-crate:priv,noprelude:somedep=somedep.rs\n+// compile-flags: -Zunstable-options\n+// edition:2018\n+\n+// Test for multiple options to --extern. Can't test for errors from both\n+// options at the same time, so this only checks that noprelude is honored.\n+\n+#![warn(exported_private_dependencies)]\n+\n+// Module to avoid adding to prelude.\n+pub mod m {\n+    extern crate somedep;\n+    pub struct PublicType {\n+        pub field: somedep::S,\n+    }\n+}\n+\n+fn main() {\n+    somedep::somefun();  //~ ERROR failed to resolve\n+}"}, {"sha": "3bf73d11cfd2201239ad75018907e698a7312b14", "filename": "src/test/ui/extern-flag/multiple-opts.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fmultiple-opts.stderr?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `somedep`\n+  --> $DIR/multiple-opts.rs:19:5\n+   |\n+LL |     somedep::somefun();\n+   |     ^^^^^^^ use of undeclared type or module `somedep`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "e6a150b9e8b9e55bd984b105196a101884cbd69a", "filename": "src/test/ui/extern-flag/noprelude-and-prelude.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-and-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-and-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-and-prelude.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// aux-crate:noprelude:somedep=somedep.rs\n+// compile-flags: -Zunstable-options --extern somedep\n+// edition:2018\n+\n+// Having a flag with `noprelude` and one without, will add to the prelude.\n+\n+fn main() {\n+    somedep::somefun();\n+}"}, {"sha": "a3a81cbf37223e6503abb4c0bd520bb40006eebb", "filename": "src/test/ui/extern-flag/public-and-private.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,13 @@\n+// aux-crate:priv:somedep=somedep.rs\n+// compile-flags: -Zunstable-options --extern somedep\n+// edition:2018\n+\n+#![deny(exported_private_dependencies)]\n+\n+// Having a flag with `priv` and one without, will remain private (it is sticky).\n+\n+pub struct PublicType {\n+    pub field: somedep::S, //~ ERROR from private dependency\n+}\n+\n+fn main() {}"}, {"sha": "72f1bb2d26f1aefc081784a0d3c71127ea9d925c", "filename": "src/test/ui/extern-flag/public-and-private.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fpublic-and-private.stderr?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -0,0 +1,14 @@\n+error: type `somedep::S` from private dependency 'somedep' in public interface\n+  --> $DIR/public-and-private.rs:10:5\n+   |\n+LL |     pub field: somedep::S,\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/public-and-private.rs:5:9\n+   |\n+LL | #![deny(exported_private_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca30e782c505654ad20c088e560e215c838b32f3", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -311,7 +311,7 @@ pub struct TestProps {\n     // directory as the test, but for backwards compatibility reasons\n     // we also check the auxiliary directory)\n     pub aux_builds: Vec<String>,\n-    // A list of crates to pass '--extern-private name:PATH' flags for\n+    // A list of crates to pass '--extern priv:name=PATH' flags for\n     // This should be a subset of 'aux_build'\n     // FIXME: Replace this with a better solution: https://github.com/rust-lang/rust/pull/54020\n     pub extern_private: Vec<String>,"}, {"sha": "ca68fe3e39b96fc71c3a1b4e396753b2c1b0f23a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -1782,8 +1782,8 @@ impl<'test> TestCx<'test> {\n         let mut add_extern_priv = |priv_dep: &str, dylib: bool| {\n             let lib_name = get_lib_name(priv_dep, dylib);\n             rustc\n-                .arg(\"--extern-private\")\n-                .arg(format!(\"{}={}\", priv_dep, aux_dir.join(lib_name).to_str().unwrap()));\n+                .arg(\"--extern\")\n+                .arg(format!(\"priv:{}={}\", priv_dep, aux_dir.join(lib_name).to_str().unwrap()));\n         };\n \n         for rel_ab in &self.props.aux_builds {\n@@ -1829,9 +1829,9 @@ impl<'test> TestCx<'test> {\n \n             let trimmed = rel_ab.trim_end_matches(\".rs\").to_string();\n \n-            // Normally, every 'extern-private' has a correspodning 'aux-build'\n+            // Normally, every 'extern-private' has a corresponding 'aux-build'\n             // entry. If so, we remove it from our list of private crates,\n-            // and add an '--extern-private' flag to rustc\n+            // and add an '--extern priv:NAME=PATH' flag to rustc\n             if extern_priv.remove_item(&trimmed).is_some() {\n                 add_extern_priv(&trimmed, dylib);\n             }\n@@ -1859,7 +1859,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        // Add any '--extern-private' entries without a matching\n+        // Add any '--extern' private entries without a matching\n         // 'aux-build'\n         for private_lib in extern_priv {\n             add_extern_priv(&private_lib, true);"}]}