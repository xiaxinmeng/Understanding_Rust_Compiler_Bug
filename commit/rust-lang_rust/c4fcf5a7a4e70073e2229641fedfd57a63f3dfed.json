{"sha": "c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZmNmNWE3YTRlNzAwNzNlMjIyOTY0MWZlZGZkNTdhNjNmM2RmZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T20:19:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T20:19:37Z"}, "message": "Rollup merge of #74336 - davidtwco:issue-73112-cross-crate-packed-type-diagnostic, r=estebank\n\ntypeck: use `item_name` in cross-crate packed diag\n\nFixes #73112.\n\nThis PR replaces the use of `expect_local` and `hir().get` to fetch the identifier for a ADT with `item_name` - which works across crates.", "tree": {"sha": "150cf5fc747ac145b72e6bf3c17c83a2585d61ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150cf5fc747ac145b72e6bf3c17c83a2585d61ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDhNZCRBK7hj4Ov3rIwAAdHIIAJPFO3yDJ9yA7UC4ZnlsDXH3\n5Z3IpbH7aWLD6n+fuw15ca9XIVOBhhySQa6xdgE7hzNN252ng6z9zlqzf1PVIALI\ncIu5sawrGmuBdoqouHysL7wBT0dnRVMJS96eHvKPXt0NUgK6n7shy2mwdHk8ClCe\nyLvbL4W0MyKR7zt+GJiBn5vq8XRuUTLAJAM/nhvUEGzu7xfeDM5yV1wgSi0fMynm\nChacOtEJBrEKpadUadplxO4WNAxNbsJKfiPJyW7odDZzyjhlXZPA9XjzAhFh8Qb1\ndXODifSViphi19oPKV2Sfeyb0vJmkYBan8prdoYzv93Pmy9IhUt4ijBzOO7R7jo=\n=MrEo\n-----END PGP SIGNATURE-----\n", "payload": "tree 150cf5fc747ac145b72e6bf3c17c83a2585d61ff\nparent aedb7c37b8dff924cbb569601fa2bc3219a209bb\nparent d9485be595ee1655391697104b72ca005b0a9c80\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594757977 -0700\ncommitter GitHub <noreply@github.com> 1594757977 -0700\n\nRollup merge of #74336 - davidtwco:issue-73112-cross-crate-packed-type-diagnostic, r=estebank\n\ntypeck: use `item_name` in cross-crate packed diag\n\nFixes #73112.\n\nThis PR replaces the use of `expect_local` and `hir().get` to fetch the identifier for a ADT with `item_name` - which works across crates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "html_url": "https://github.com/rust-lang/rust/commit/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedb7c37b8dff924cbb569601fa2bc3219a209bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedb7c37b8dff924cbb569601fa2bc3219a209bb", "html_url": "https://github.com/rust-lang/rust/commit/aedb7c37b8dff924cbb569601fa2bc3219a209bb"}, {"sha": "d9485be595ee1655391697104b72ca005b0a9c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9485be595ee1655391697104b72ca005b0a9c80", "html_url": "https://github.com/rust-lang/rust/commit/d9485be595ee1655391697104b72ca005b0a9c80"}], "stats": {"total": 90, "additions": 65, "deletions": 25}, "files": [{"sha": "bc01da324b66fd4dab9457d5a892e4efb84a4b84", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "patch": "@@ -103,7 +103,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{\n     FutureTraitLangItem, PinTypeLangItem, SizedTraitLangItem, VaListTypeLangItem,\n };\n-use rustc_hir::{ExprKind, GenericArg, HirIdMap, Item, ItemKind, Node, PatKind, QPath};\n+use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_infer::infer;\n@@ -2625,34 +2625,31 @@ fn check_packed(tcx: TyCtxt<'_>, sp: Span, def: &ty::AdtDef) {\n                     \"packed type cannot transitively contain a `#[repr(align)]` type\"\n                 );\n \n-                let hir = tcx.hir();\n-                let hir_id = hir.as_local_hir_id(def_spans[0].0.expect_local());\n-                if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n-                    err.span_note(\n-                        tcx.def_span(def_spans[0].0),\n-                        &format!(\"`{}` has a `#[repr(align)]` attribute\", ident),\n-                    );\n-                }\n+                err.span_note(\n+                    tcx.def_span(def_spans[0].0),\n+                    &format!(\n+                        \"`{}` has a `#[repr(align)]` attribute\",\n+                        tcx.item_name(def_spans[0].0)\n+                    ),\n+                );\n \n                 if def_spans.len() > 2 {\n                     let mut first = true;\n                     for (adt_def, span) in def_spans.iter().skip(1).rev() {\n-                        let hir_id = hir.as_local_hir_id(adt_def.expect_local());\n-                        if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n-                            err.span_note(\n-                                *span,\n-                                &if first {\n-                                    format!(\n-                                        \"`{}` contains a field of type `{}`\",\n-                                        tcx.type_of(def.did),\n-                                        ident\n-                                    )\n-                                } else {\n-                                    format!(\"...which contains a field of type `{}`\", ident)\n-                                },\n-                            );\n-                            first = false;\n-                        }\n+                        let ident = tcx.item_name(*adt_def);\n+                        err.span_note(\n+                            *span,\n+                            &if first {\n+                                format!(\n+                                    \"`{}` contains a field of type `{}`\",\n+                                    tcx.type_of(def.did),\n+                                    ident\n+                                )\n+                            } else {\n+                                format!(\"...which contains a field of type `{}`\", ident)\n+                            },\n+                        );\n+                        first = false;\n                     }\n                 }\n "}, {"sha": "6210c29bbdc8c3dd69b28fd8de4f485efb19aa02", "filename": "src/test/ui/issues/auxiliary/issue-73112.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-73112.rs?ref=c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "patch": "@@ -0,0 +1,10 @@\n+#[repr(transparent)]\n+pub struct PageTableEntry {\n+    entry: u64,\n+}\n+\n+#[repr(align(4096))]\n+#[repr(C)]\n+pub struct PageTable {\n+    entries: [PageTableEntry; 512],\n+}"}, {"sha": "cc7be9c95aef6be2dc3012562bd7d2264f5e4854", "filename": "src/test/ui/issues/issue-73112.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73112.rs?ref=c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-73112.rs\n+\n+extern crate issue_73112;\n+\n+fn main() {\n+    use issue_73112::PageTable;\n+\n+    #[repr(C, packed)]\n+    struct SomeStruct {\n+    //~^ ERROR packed type cannot transitively contain a `#[repr(align)]` type [E0588]\n+        page_table: PageTable,\n+    }\n+}"}, {"sha": "5a548378c2687c7c7e7d2220d1d02b6ecae66d67", "filename": "src/test/ui/issues/issue-73112.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73112.stderr?ref=c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "patch": "@@ -0,0 +1,20 @@\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n+  --> $DIR/issue-73112.rs:9:5\n+   |\n+LL | /     struct SomeStruct {\n+LL | |\n+LL | |         page_table: PageTable,\n+LL | |     }\n+   | |_____^\n+   |\n+note: `PageTable` has a `#[repr(align)]` attribute\n+  --> $DIR/auxiliary/issue-73112.rs:8:1\n+   |\n+LL | / pub struct PageTable {\n+LL | |     entries: [PageTableEntry; 512],\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0588`."}]}