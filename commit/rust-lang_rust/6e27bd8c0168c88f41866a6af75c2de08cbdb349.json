{"sha": "6e27bd8c0168c88f41866a6af75c2de08cbdb349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMjdiZDhjMDE2OGM4OGY0MTg2NmE2YWY3NWMyZGUwOGNiZGIzNDk=", "commit": {"author": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-05-23T01:59:42Z"}, "committer": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-05-23T01:59:42Z"}, "message": "Adding links to option::Option", "tree": {"sha": "1e8bedc9bf345478fd9d30864778fc2806396ac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8bedc9bf345478fd9d30864778fc2806396ac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e27bd8c0168c88f41866a6af75c2de08cbdb349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e27bd8c0168c88f41866a6af75c2de08cbdb349", "html_url": "https://github.com/rust-lang/rust/commit/6e27bd8c0168c88f41866a6af75c2de08cbdb349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e27bd8c0168c88f41866a6af75c2de08cbdb349/comments", "author": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "html_url": "https://github.com/rust-lang/rust/commit/41976e25f1c9f2cf40cdd24691dc1f162a2860a2"}], "stats": {"total": 86, "additions": 60, "deletions": 26}, "files": [{"sha": "e825acad4713e2a6973b242a0e5f11be102d266f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6e27bd8c0168c88f41866a6af75c2de08cbdb349/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e27bd8c0168c88f41866a6af75c2de08cbdb349/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6e27bd8c0168c88f41866a6af75c2de08cbdb349", "patch": "@@ -174,7 +174,7 @@ impl<T> Option<T> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the option is a `Some` value.\n+    /// Returns `true` if the option is a [`Some`] value.\n     ///\n     /// # Examples\n     ///\n@@ -185,6 +185,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_some(), false);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -194,7 +196,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `true` if the option is a `None` value.\n+    /// Returns `true` if the option is a [`None`] value.\n     ///\n     /// # Examples\n     ///\n@@ -205,6 +207,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_none(), true);\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {\n@@ -269,13 +273,14 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps an option, yielding the content of a `Some`.\n+    /// Unwraps an option, yielding the content of a [`Some`].\n     ///\n     /// # Panics\n     ///\n     /// Panics if the value is a [`None`] with a custom panic message provided by\n     /// `msg`.\n     ///\n+    /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -298,16 +303,17 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Moves the value `v` out of the `Option<T>` if it is `Some(v)`.\n+    /// Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].\n     ///\n     /// In general, because this function may panic, its use is discouraged.\n-    /// Instead, prefer to use pattern matching and handle the `None`\n+    /// Instead, prefer to use pattern matching and handle the [`None`]\n     /// case explicitly.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the self value equals [`None`].\n     ///\n+    /// [`Some(v)`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -395,7 +401,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or returns a `default` (if not).\n+    /// or returns a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -416,7 +424,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or computes a `default` (if not).\n+    /// or computes a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -438,12 +448,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err)`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err)`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err)`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -463,12 +475,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err())`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err())`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err())`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -534,7 +548,9 @@ impl<T> Option<T> {\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `None` if the option is `None`, otherwise returns `optb`.\n+    /// Returns [`None`] if the option is [`None`], otherwise returns `optb`.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -564,11 +580,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `f` with the\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `f` with the\n     /// wrapped value and returns the result.\n     ///\n     /// Some languages call this operation flatmap.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -645,9 +663,11 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option if it is `None`, then\n+    /// Inserts `v` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -678,9 +698,11 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts a value computed from `f` into the option if it is `None`, then\n+    /// Inserts a value computed from `f` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -715,7 +737,9 @@ impl<T> Option<T> {\n     // Misc\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Takes the value out of the option, leaving a `None` in its place.\n+    /// Takes the value out of the option, leaving a [`None`] in its place.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -757,16 +781,16 @@ impl<'a, T: Clone> Option<&'a T> {\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n-    /// Consumes the `self` argument then, if `Some`, returns the contained\n-    /// value, otherwise if `None`, returns the default value for that\n+    /// Consumes the `self` argument then, if [`Some`], returns the contained\n+    /// value, otherwise if [`None`], returns the default value for that\n     /// type.\n     ///\n     /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n-    /// into 0 (the default value for integers). `parse` converts\n-    /// a string to any other type that implements `FromStr`, returning\n-    /// `None` on error.\n+    /// into 0 (the default value for integers). [`parse`] converts\n+    /// a string to any other type that implements [`FromStr`], returning\n+    /// [`None`] on error.\n     ///\n     /// ```\n     /// let good_year_from_input = \"1909\";\n@@ -777,6 +801,11 @@ impl<T: Default> Option<T> {\n     /// assert_eq!(1909, good_year);\n     /// assert_eq!(0, bad_year);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    /// [`parse`]: ../../std/primitive.str.html#method.parse\n+    /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_or_default(self) -> T {\n@@ -801,7 +830,9 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Returns None.\n+    /// Returns [`None`].\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -1020,8 +1051,8 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n-    /// Takes each element in the `Iterator`: if it is `None`, no further\n-    /// elements are taken, and the `None` is returned. Should no `None` occur, a\n+    /// Takes each element in the [`Iterator`]: if it is [`None`], no further\n+    /// elements are taken, and the [`None`] is returned. Should no [`None`] occur, a\n     /// container with the values of each `Option` is returned.\n     ///\n     /// Here is an example which increments every integer in a vector,\n@@ -1037,6 +1068,9 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ).collect();\n     /// assert!(res == Some(vec![2, 3]));\n     /// ```\n+    ///\n+    /// [`Iterator`]: ../iter/trait.Iterator.html\n+    /// [`None`]: enum.Option.html#variant.None\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}]}