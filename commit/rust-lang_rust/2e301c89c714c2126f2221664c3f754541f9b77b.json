{"sha": "2e301c89c714c2126f2221664c3f754541f9b77b", "node_id": "C_kwDOAAsO6NoAKDJlMzAxYzg5YzcxNGMyMTI2ZjIyMjE2NjRjM2Y3NTQ1NDFmOWI3N2I", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T16:44:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T17:03:18Z"}, "message": "Do not ICE when failing to normalize during inlining.", "tree": {"sha": "9e452333a969e7f261167cf87ade3078ea0281fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e452333a969e7f261167cf87ade3078ea0281fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e301c89c714c2126f2221664c3f754541f9b77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e301c89c714c2126f2221664c3f754541f9b77b", "html_url": "https://github.com/rust-lang/rust/commit/2e301c89c714c2126f2221664c3f754541f9b77b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e301c89c714c2126f2221664c3f754541f9b77b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1aeaeb827da7a10b7cfaccf0a1d6ebf414a7b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1aeaeb827da7a10b7cfaccf0a1d6ebf414a7b5", "html_url": "https://github.com/rust-lang/rust/commit/9d1aeaeb827da7a10b7cfaccf0a1d6ebf414a7b5"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "221f4b18a58a63f6094806fa0b8c842618dee29a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e301c89c714c2126f2221664c3f754541f9b77b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e301c89c714c2126f2221664c3f754541f9b77b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2e301c89c714c2126f2221664c3f754541f9b77b", "patch": "@@ -157,11 +157,13 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"optimization fuel exhausted\");\n         }\n \n-        let callee_body = callsite.callee.subst_mir_and_normalize_erasing_regions(\n+        let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n             callee_body.clone(),\n-        );\n+        ) else {\n+            return Err(\"failed to normalize callee body\");\n+        };\n \n         let old_blocks = caller_body.basic_blocks().next_index();\n         self.inline_call(caller_body, &callsite, callee_body);\n@@ -252,7 +254,7 @@ impl<'tcx> Inliner<'tcx> {\n             let func_ty = func.ty(caller_body, self.tcx);\n             if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n                 // To resolve an instance its substs have to be fully normalized.\n-                let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+                let substs = self.tcx.try_normalize_erasing_regions(self.param_env, substs).ok()?;\n                 let callee =\n                     Instance::resolve(self.tcx, self.param_env, def_id, substs).ok().flatten()?;\n \n@@ -407,14 +409,17 @@ impl<'tcx> Inliner<'tcx> {\n                     if let ty::FnDef(def_id, substs) =\n                         *callsite.callee.subst_mir(self.tcx, &f.literal.ty()).kind()\n                     {\n-                        let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n-                        if let Ok(Some(instance)) =\n-                            Instance::resolve(self.tcx, self.param_env, def_id, substs)\n+                        if let Ok(substs) =\n+                            self.tcx.try_normalize_erasing_regions(self.param_env, substs)\n                         {\n-                            if callsite.callee.def_id() == instance.def_id() {\n-                                return Err(\"self-recursion\");\n-                            } else if self.history.contains(&instance) {\n-                                return Err(\"already inlined\");\n+                            if let Ok(Some(instance)) =\n+                                Instance::resolve(self.tcx, self.param_env, def_id, substs)\n+                            {\n+                                if callsite.callee.def_id() == instance.def_id() {\n+                                    return Err(\"self-recursion\");\n+                                } else if self.history.contains(&instance) {\n+                                    return Err(\"already inlined\");\n+                                }\n                             }\n                         }\n                         // Don't give intrinsics the extra penalty for calls"}, {"sha": "213605b51142cc98463d2a1ea05142c8a3c92321", "filename": "src/test/ui/traits/issue-97695-double-trivial-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2e301c89c714c2126f2221664c3f754541f9b77b/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e301c89c714c2126f2221664c3f754541f9b77b/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs?ref=2e301c89c714c2126f2221664c3f754541f9b77b", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zinline-mir --emit=mir\n+// build-pass\n+\n+pub trait Associate {\n+    type Associated;\n+}\n+\n+pub struct Wrap<'a> {\n+    pub field: &'a i32,\n+}\n+\n+pub trait Create<T> {\n+    fn create() -> Self;\n+}\n+\n+pub fn oh_no<'a, T>()\n+where\n+    Wrap<'a>: Associate,\n+    <Wrap<'a> as Associate>::Associated: Create<T>,\n+{\n+    <Wrap<'a> as Associate>::Associated::create();\n+}\n+\n+pub fn main() {}"}]}