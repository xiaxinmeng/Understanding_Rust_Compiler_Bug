{"sha": "84556502e69e1741938610e4af5800fe0cee9975", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTU2NTAyZTY5ZTE3NDE5Mzg2MTBlNGFmNTgwMGZlMGNlZTk5NzU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-17T00:31:28Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:31Z"}, "message": "Handle statics in `Subst::subst()` by implementing `TypeFoldable`", "tree": {"sha": "555e9e8018ed51871faaace15535f0f5d7c7a86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555e9e8018ed51871faaace15535f0f5d7c7a86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84556502e69e1741938610e4af5800fe0cee9975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84556502e69e1741938610e4af5800fe0cee9975", "html_url": "https://github.com/rust-lang/rust/commit/84556502e69e1741938610e4af5800fe0cee9975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84556502e69e1741938610e4af5800fe0cee9975/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63b9920302e860b4f50968eb332f534d62b8055", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63b9920302e860b4f50968eb332f534d62b8055", "html_url": "https://github.com/rust-lang/rust/commit/e63b9920302e860b4f50968eb332f534d62b8055"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "60efeaab97602809ec5cbdacca8f4306e636dd1e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=84556502e69e1741938610e4af5800fe0cee9975", "patch": "@@ -1729,15 +1729,15 @@ pub enum PlaceBase<'tcx> {\n }\n \n /// We store the normalized type to avoid requiring normalization when reading MIR\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub kind: StaticKind<'tcx>,\n     pub def_id: DefId,\n }\n \n #[derive(\n-    Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n+    Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n )]\n pub enum StaticKind<'tcx> {\n     Promoted(Promoted, SubstsRef<'tcx>),\n@@ -3221,13 +3221,63 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Place {\n-            base: self.base.clone(),\n+            base: self.base.fold_with(folder),\n             projection: self.projection.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.projection.visit_with(visitor)\n+        self.base.visit_with(visitor) || self.projection.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for PlaceBase<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match self {\n+            PlaceBase::Local(local) => PlaceBase::Local(local.fold_with(folder)),\n+            PlaceBase::Static(static_) => PlaceBase::Static(static_.fold_with(folder)),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match self {\n+            PlaceBase::Local(local) => local.visit_with(visitor),\n+            PlaceBase::Static(static_) => (**static_).visit_with(visitor),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for Static<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        Static {\n+            ty: self.ty.fold_with(folder),\n+            kind: self.kind.fold_with(folder),\n+            def_id: self.def_id,\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        let Static { ty, kind, def_id: _ } = self;\n+\n+        ty.visit_with(visitor) || kind.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for StaticKind<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match self {\n+            StaticKind::Promoted(promoted, substs) =>\n+                StaticKind::Promoted(promoted.fold_with(folder), substs.fold_with(folder)),\n+            StaticKind::Static => StaticKind::Static\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match self {\n+            StaticKind::Promoted(promoted, substs) =>\n+                promoted.visit_with(visitor) || substs.visit_with(visitor),\n+            StaticKind::Static => { false }\n+        }\n     }\n }\n "}, {"sha": "ac72928a89677194376ca5af1ff377de00069545", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=84556502e69e1741938610e4af5800fe0cee9975", "patch": "@@ -1,5 +1,4 @@\n use rustc::ty::{self, Instance, Ty};\n-use rustc::ty::subst::Subst;\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n@@ -461,18 +460,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 projection: None,\n             } => {\n                 let param_env = ty::ParamEnv::reveal_all();\n-                let instance = Instance::new(*def_id, substs.subst(bx.tcx(), self.instance.substs));\n-                debug!(\"instance: {:?}\", instance);\n+                let instance = Instance::new(*def_id, self.monomorphize(substs));\n                 let cid = mir::interpret::GlobalId {\n                     instance: instance,\n                     promoted: Some(*promoted),\n                 };\n-                let mono_ty = tcx.subst_and_normalize_erasing_regions(\n-                    instance.substs,\n-                    param_env,\n-                    ty,\n-                );\n-                let layout = cx.layout_of(mono_ty);\n+                let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n                         mir::interpret::ConstValue::ByRef { alloc, offset } => {"}, {"sha": "f31303c642faa1ec34523b5ae3b87a6bb5645428", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84556502e69e1741938610e4af5800fe0cee9975/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=84556502e69e1741938610e4af5800fe0cee9975", "patch": "@@ -479,12 +479,10 @@ impl Inliner<'tcx> {\n                     args: &args,\n                     local_map,\n                     scope_map,\n-                    callsite,\n                     destination: dest,\n                     return_block,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n-                    tcx: self.tcx,\n                 };\n \n \n@@ -639,12 +637,10 @@ struct Integrator<'a, 'tcx> {\n     args: &'a [Local],\n     local_map: IndexVec<Local, Local>,\n     scope_map: IndexVec<SourceScope, SourceScope>,\n-    callsite: CallSite<'tcx>,\n     destination: Place<'tcx>,\n     return_block: BasicBlock,\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n-    tcx: TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -693,17 +689,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 // Return pointer; update the place itself\n                 *place = self.destination.clone();\n             },\n-            Place {\n-                base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_, substs),\n-                    ..\n-                }),\n-                projection: None,\n-            } => {\n-                let adjusted_substs = substs.subst(self.tcx, self.callsite.substs);\n-                debug!(\"replacing substs {:?} with {:?}\", substs, adjusted_substs);\n-                *substs = adjusted_substs;\n-            },\n             _ => self.super_place(place, _ctxt, _location)\n         }\n     }"}]}