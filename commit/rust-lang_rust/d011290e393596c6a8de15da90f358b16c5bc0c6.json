{"sha": "d011290e393596c6a8de15da90f358b16c5bc0c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTEyOTBlMzkzNTk2YzZhOGRlMTVkYTkwZjM1OGIxNmM1YmMwYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-24T22:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-24T22:42:13Z"}, "message": "Auto merge of #34401 - GuillaumeGomez:err-codes, r=brson\n\nAdd error code flags\n\nr? @brson\n\ncc @steveklabnik\ncc @jonathandturner", "tree": {"sha": "ba62eddb71102b0918279fa3799ed3aa5f2ecc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba62eddb71102b0918279fa3799ed3aa5f2ecc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d011290e393596c6a8de15da90f358b16c5bc0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d011290e393596c6a8de15da90f358b16c5bc0c6", "html_url": "https://github.com/rust-lang/rust/commit/d011290e393596c6a8de15da90f358b16c5bc0c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d011290e393596c6a8de15da90f358b16c5bc0c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9112f65b10bd8dcbf59901a68b99985b493e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9112f65b10bd8dcbf59901a68b99985b493e64", "html_url": "https://github.com/rust-lang/rust/commit/dc9112f65b10bd8dcbf59901a68b99985b493e64"}, {"sha": "8f987ab3f2d846b6f78e131f695716b6ca9cefdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f987ab3f2d846b6f78e131f695716b6ca9cefdb", "html_url": "https://github.com/rust-lang/rust/commit/8f987ab3f2d846b6f78e131f695716b6ca9cefdb"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "538613c7fac9126ced763527e6fea95ca5f6e727", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 59, "deletions": 43, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d011290e393596c6a8de15da90f358b16c5bc0c6/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d011290e393596c6a8de15da90f358b16c5bc0c6/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=d011290e393596c6a8de15da90f358b16c5bc0c6", "patch": "@@ -298,7 +298,7 @@ the pointer, the size of the type would need to be unbounded.\n \n Consider the following erroneous definition of a type for a list of bytes:\n \n-```compile_fail\n+```compile_fail,E0072\n // error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n@@ -331,7 +331,7 @@ E0109: r##\"\n You tried to give a type parameter to a type which doesn't need it. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0109\n type X = u32<i32>; // error: type parameters are not allowed on this type\n ```\n \n@@ -352,7 +352,7 @@ E0110: r##\"\n You tried to give a lifetime parameter to a type which doesn't need it.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0110\n type X = u32<'static>; // error: lifetime parameters are not allowed on\n                        //        this type\n ```\n@@ -370,7 +370,7 @@ Unsafe code was used outside of an unsafe function or block.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0133\n unsafe fn f() { return; } // This is the unsafe code\n \n fn main() {\n@@ -410,7 +410,7 @@ More than one function was declared with the `#[main]` attribute.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0137\n #![feature(main)]\n \n #[main]\n@@ -437,7 +437,7 @@ More than one function was declared with the `#[start]` attribute.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0138\n #![feature(start)]\n \n #[start]\n@@ -460,8 +460,7 @@ fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n ```\n \"##,\n \n-// FIXME link this to the relevant turpl chapters for instilling fear of the\n-//       transmute gods in the user\n+// isn't thrown anymore\n E0139: r##\"\n There are various restrictions on transmuting between types in Rust; for example\n types being transmuted must have the same size. To apply all these restrictions,\n@@ -470,11 +469,13 @@ parameters are involved, this cannot always be done.\n \n So, for example, the following is not allowed:\n \n-```compile_fail\n+```\n+use std::mem::transmute;\n+\n struct Foo<T>(Vec<T>);\n \n fn foo<T>(x: Vec<T>) {\n-    // we are transmuting between Vec<T> and Foo<T> here\n+    // we are transmuting between Vec<T> and Foo<F> here\n     let y: Foo<T> = unsafe { transmute(x) };\n     // do something with y\n }\n@@ -542,7 +543,7 @@ A lang item was redefined.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0152\n #![feature(lang_items)]\n \n #[lang = \"panic_fmt\"]\n@@ -567,7 +568,7 @@ E0229: r##\"\n An associated type binding was done outside of the type parameter declaration\n and `where` clause. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0229\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;\n@@ -604,7 +605,7 @@ used.\n \n These two examples illustrate the problem:\n \n-```compile_fail\n+```compile_fail,E0261\n // error, use of undeclared lifetime name `'a`\n fn foo(x: &'a str) { }\n \n@@ -630,7 +631,7 @@ Declaring certain lifetime names in parameters is disallowed. For example,\n because the `'static` lifetime is a special built-in lifetime name denoting\n the lifetime of the entire program, this is an error:\n \n-```compile_fail\n+```compile_fail,E0262\n // error, invalid lifetime parameter name `'static`\n fn foo<'static>(x: &'static str) { }\n ```\n@@ -640,7 +641,7 @@ E0263: r##\"\n A lifetime name cannot be declared more than once in the same scope. For\n example:\n \n-```compile_fail\n+```compile_fail,E0263\n // error, lifetime name `'a` declared twice in the same scope\n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }\n ```\n@@ -649,7 +650,7 @@ fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }\n E0264: r##\"\n An unknown external lang item was used. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0264\n #![feature(lang_items)]\n \n extern \"C\" {\n@@ -675,12 +676,9 @@ E0269: r##\"\n Functions must eventually return a value of their return type. For example, in\n the following function:\n \n-```compile_fail\n-fn foo(x: u8) -> u8 {\n-    if x > 0 {\n-        x // alternatively, `return x`\n-    }\n-    // nothing here\n+```compile_fail,E0269\n+fn abracada_FAIL() -> String {\n+    \"this won't work\".to_string();\n }\n ```\n \n@@ -806,7 +804,7 @@ Examples follow.\n \n Here is a basic example:\n \n-```compile_fail\n+```compile_fail,E0271\n trait Trait { type AssociatedType; }\n \n fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n@@ -947,6 +945,8 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n+#![feature(on_unimplemented)]\n+\n fn foo<T: Index<u8>>(x: T){}\n \n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n@@ -977,6 +977,8 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n+#![feature(on_unimplemented)]\n+\n fn foo<T: Index<u8>>(x: T){}\n \n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n@@ -1005,6 +1007,8 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n+#![feature(on_unimplemented)]\n+\n fn foo<T: Index<u8>>(x: T){}\n \n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n@@ -1028,7 +1032,7 @@ recursion in resolving some type bounds.\n \n For example, in the following code:\n \n-```compile_fail\n+```compile_fail,E0275\n trait Foo {}\n \n struct Bar<T>(T);\n@@ -1048,7 +1052,7 @@ E0276: r##\"\n This error occurs when a bound in an implementation of a trait does not match\n the bounds specified in the original trait. For example:\n \n-```compile_fail\n+```compile_fail,E0276\n trait Foo {\n     fn foo<T>(x: T);\n }\n@@ -1070,7 +1074,7 @@ E0277: r##\"\n You tried to use a type which doesn't implement some trait in a place which\n expected that trait. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0277\n // here we declare the Foo trait with a bar method\n trait Foo {\n     fn bar(&self);\n@@ -1113,7 +1117,7 @@ fn main() {\n \n Or in a generic context, an erroneous code example would look like:\n \n-```compile_fail\n+```compile_fail,E0277\n fn some_func<T>(foo: T) {\n     println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                            //        implemented for the type `T`\n@@ -1159,7 +1163,7 @@ You tried to supply a type which doesn't implement some trait in a location\n which expected that trait. This error typically occurs when working with\n `Fn`-based types. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0281\n fn foo<F: Fn()>(x: F) { }\n \n fn main() {\n@@ -1185,7 +1189,7 @@ parameter with a `FromIterator` bound, which for a `char` iterator is\n implemented by `Vec` and `String` among others. Consider the following snippet\n that reverses the characters of a string:\n \n-```compile_fail\n+```compile_fail,E0282\n let x = \"hello\".chars().rev().collect();\n ```\n \n@@ -1222,7 +1226,7 @@ occur when a type parameter of a struct or trait cannot be inferred. In that\n case it is not always possible to use a type annotation, because all candidates\n have the same return type. For instance:\n \n-```compile_fail\n+```compile_fail,E0282\n struct Foo<T> {\n     num: T,\n }\n@@ -1248,7 +1252,7 @@ to unambiguously choose an implementation.\n \n For example:\n \n-```compile_fail\n+```compile_fail,E0283\n trait Generator {\n     fn create() -> u32;\n }\n@@ -1296,10 +1300,22 @@ fn main() {\n \n E0296: r##\"\n This error indicates that the given recursion limit could not be parsed. Ensure\n-that the value provided is a positive integer between quotes, like so:\n+that the value provided is a positive integer between quotes.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0296\n+#![recursion_limit]\n+\n+fn main() {}\n+```\n+\n+And a working example:\n \n ```\n #![recursion_limit=\"1000\"]\n+\n+fn main() {}\n ```\n \"##,\n \n@@ -1312,7 +1328,7 @@ variable.\n \n For example:\n \n-```compile_fail\n+```compile_fail,E0308\n let x: i32 = \"I am not a number!\";\n //     ~~~   ~~~~~~~~~~~~~~~~~~~~\n //      |             |\n@@ -1325,7 +1341,7 @@ let x: i32 = \"I am not a number!\";\n Another situation in which this occurs is when you attempt to use the `try!`\n macro inside a function that does not return a `Result<T, E>`:\n \n-```compile_fail\n+```compile_fail,E0308\n use std::fs::File;\n \n fn main() {\n@@ -1353,7 +1369,7 @@ how long the data stored within them is guaranteed to be live. This lifetime\n must be as long as the data needs to be alive, and missing the constraint that\n denotes this will cause this error.\n \n-```compile_fail\n+```compile_fail,E0309\n // This won't compile because T is not constrained, meaning the data\n // stored in it is not guaranteed to last as long as the reference\n struct Foo<'a, T> {\n@@ -1376,7 +1392,7 @@ how long the data stored within them is guaranteed to be live. This lifetime\n must be as long as the data needs to be alive, and missing the constraint that\n denotes this will cause this error.\n \n-```compile_fail\n+```compile_fail,E0310\n // This won't compile because T is not constrained to the static lifetime\n // the reference needs\n struct Foo<T> {\n@@ -1430,7 +1446,7 @@ references (with a maximum lifetime of `'a`).\n E0452: r##\"\n An invalid lint attribute has been given. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0452\n #![allow(foo = \"\")] // error: malformed lint attribute\n ```\n \n@@ -1450,7 +1466,7 @@ attribute on an enclosing scope, or on the command line with the `-F` option.\n \n Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0453\n #![forbid(non_snake_case)]\n \n #[allow(non_snake_case)]\n@@ -1492,7 +1508,7 @@ fn main() {\n E0496: r##\"\n A lifetime name is shadowing another lifetime name. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0496\n struct Foo<'a> {\n     a: &'a i32,\n }\n@@ -1539,7 +1555,7 @@ E0512: r##\"\n Transmute with two differently sized types was attempted. Erroneous code\n example:\n \n-```compile_fail\n+```compile_fail,E0512\n fn takes_u8(_: u8) {}\n \n fn main() {\n@@ -1567,7 +1583,7 @@ unsupported item.\n \n Examples of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0517\n #[repr(C)]\n type Foo = u8;\n \n@@ -1615,7 +1631,7 @@ on something other than a function or method.\n \n Examples of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0518\n #[inline(always)]\n struct Foo;\n \n@@ -1642,7 +1658,7 @@ how the compiler behaves, as well as special functions that may be automatically\n invoked (such as the handler for out-of-bounds accesses when indexing a slice).\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0522\n #![feature(lang_items)]\n \n #[lang = \"cookie\"]"}]}