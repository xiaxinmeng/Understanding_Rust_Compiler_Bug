{"sha": "017dac23017e2dcf8fe350b66821a9e50d39bbd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxN2RhYzIzMDE3ZTJkY2Y4ZmUzNTBiNjY4MjFhOWU1MGQzOWJiZDE=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-21T17:49:00Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-22T12:34:39Z"}, "message": "new lint: using &Ref patterns instead of matching on *expr (fixes #187)", "tree": {"sha": "3982ec14b589e498a07fdf40ceb77a154a2c25a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3982ec14b589e498a07fdf40ceb77a154a2c25a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017dac23017e2dcf8fe350b66821a9e50d39bbd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017dac23017e2dcf8fe350b66821a9e50d39bbd1", "html_url": "https://github.com/rust-lang/rust/commit/017dac23017e2dcf8fe350b66821a9e50d39bbd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017dac23017e2dcf8fe350b66821a9e50d39bbd1/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5403e826818a3c669f476909b24b4470e6e3749c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5403e826818a3c669f476909b24b4470e6e3749c", "html_url": "https://github.com/rust-lang/rust/commit/5403e826818a3c669f476909b24b4470e6e3749c"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "72ce27392a72acceabe6c3f364cfabd67afab8c1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/017dac23017e2dcf8fe350b66821a9e50d39bbd1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/017dac23017e2dcf8fe350b66821a9e50d39bbd1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=017dac23017e2dcf8fe350b66821a9e50d39bbd1", "patch": "@@ -29,6 +29,7 @@ len_zero                 | warn    | checking `.len() == 0` or `.len() > 0` (or\n let_and_return           | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n let_unit_value           | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n linkedlist               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+match_ref_pats           | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n modulo_one               | warn    | taking a number modulo 1, which always returns 0\n mut_mut                  | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n needless_bool            | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`"}, {"sha": "26af063c9a5b04371e4bf821ca0a133b2a59da5f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/017dac23017e2dcf8fe350b66821a9e50d39bbd1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017dac23017e2dcf8fe350b66821a9e50d39bbd1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=017dac23017e2dcf8fe350b66821a9e50d39bbd1", "patch": "@@ -88,6 +88,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EXPLICIT_ITER_LOOP,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,"}, {"sha": "b704a2b47bbceed4354c1a6921b340b83a180711", "filename": "src/matches.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/017dac23017e2dcf8fe350b66821a9e50d39bbd1/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017dac23017e2dcf8fe350b66821a9e50d39bbd1/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=017dac23017e2dcf8fe350b66821a9e50d39bbd1", "patch": "@@ -3,23 +3,27 @@ use syntax::ast;\n use syntax::ast::*;\n use std::borrow::Cow;\n \n-use utils::{snippet, snippet_block, span_help_and_lint};\n+use utils::{snippet, snippet_block, span_lint, span_help_and_lint};\n \n declare_lint!(pub SINGLE_MATCH, Warn,\n               \"a match statement with a single nontrivial arm (i.e, where the other arm \\\n                is `_ => {}`) is used; recommends `if let` instead\");\n+declare_lint!(pub MATCH_REF_PATS, Warn,\n+              \"a match has all arms prefixed with `&`; the match expression can be \\\n+               dereferenced instead\");\n \n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n impl LintPass for MatchPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SINGLE_MATCH)\n+        lint_array!(SINGLE_MATCH, MATCH_REF_PATS)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprMatch(ref ex, ref arms, ast::MatchSource::Normal) = expr.node {\n-            // check preconditions: only two arms\n+            // check preconditions for SINGLE_MATCH\n+                // only two arms\n             if arms.len() == 2 &&\n                 // both of the arms have a single pattern and no guard\n                 arms[0].pats.len() == 1 && arms[0].guard.is_none() &&\n@@ -48,6 +52,13 @@ impl LintPass for MatchPass {\n                                 body_code)\n                 );\n             }\n+\n+            // check preconditions for MATCH_REF_PATS\n+            if has_only_ref_pats(arms) {\n+                span_lint(cx, MATCH_REF_PATS, expr.span, &format!(\n+                    \"instead of prefixing all patterns with `&`, you can dereference the \\\n+                     expression to match: `match *{} {{ ...`\", snippet(cx, ex.span, \"..\")));\n+            }\n         }\n     }\n }\n@@ -59,3 +70,16 @@ fn is_unit_expr(expr: &Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+fn has_only_ref_pats(arms: &[Arm]) -> bool {\n+    for arm in arms {\n+        for pat in &arm.pats {\n+            match pat.node {\n+                PatRegion(..) => (),  // &-patterns\n+                PatWild(..) => (),    // an \"anything\" wildcard is also fine\n+                _ => return false,\n+            }\n+        }\n+    }\n+    true\n+}"}, {"sha": "43cf43b68df5c9e24f666498972d9834738ba2ed", "filename": "tests/compile-fail/matches.rs", "status": "renamed", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/017dac23017e2dcf8fe350b66821a9e50d39bbd1/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017dac23017e2dcf8fe350b66821a9e50d39bbd1/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=017dac23017e2dcf8fe350b66821a9e50d39bbd1", "patch": "@@ -2,8 +2,9 @@\n \n #![plugin(clippy)]\n #![deny(clippy)]\n+#![allow(unused)]\n \n-fn main(){\n+fn single_match(){\n     let x = Some(1u8);\n     match x {  //~ ERROR you seem to be trying to use match\n                //~^ HELP try\n@@ -36,3 +37,23 @@ fn main(){\n         _ => println!(\"nope\"),\n     }\n }\n+\n+fn ref_pats() {\n+    let ref v = Some(0);\n+    match v {  //~ERROR instead of prefixing all patterns with `&`\n+        &Some(v) => println!(\"{:?}\", v),\n+        &None => println!(\"none\"),\n+    }\n+    match v {  // this doesn't trigger, we have a different pattern\n+        &Some(v) => println!(\"some\"),\n+        other => println!(\"other\"),\n+    }\n+    let ref tup = (1, 2);\n+    match tup {  //~ERROR instead of prefixing all patterns with `&`\n+        &(v, 1) => println!(\"{}\", v),\n+        _ => println!(\"none\"),\n+    }\n+}\n+\n+fn main() {\n+}", "previous_filename": "tests/compile-fail/match_if_let.rs"}]}