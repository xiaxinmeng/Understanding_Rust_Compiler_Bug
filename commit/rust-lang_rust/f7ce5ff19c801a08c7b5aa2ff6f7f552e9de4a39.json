{"sha": "f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2U1ZmYxOWM4MDFhMDhjN2I1YWEyZmY2ZjdmNTUyZTlkZTRhMzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-20T09:49:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T09:49:08Z"}, "message": "Rollup merge of #68705 - BijanT:ll_remove, r=Mark-Simulacrum\n\nAdd LinkedList::remove()\n\nLinkedList::remove() removes the element at the specified index and returns it.\n\nI added this because I think having a remove function would be useful to have, and similar functions are in other containers, like Vec and HashMap.\n\nI'm not sure if adding a feature like this requires an RFC or not, so I'm sorry if this PR is premature.", "tree": {"sha": "c85d40526c5596303aeac01d5f4a38e816bc3532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85d40526c5596303aeac01d5f4a38e816bc3532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTlYUCRBK7hj4Ov3rIwAAdHIIABFzDxiNVqlxeGFToCmmxeGr\nRipe57mgQuS+/cyKLP+7dK1vdSm+f2rbmiMB3jXJb3lrIkX/viROA8n9lWiuU0+I\nyWmD4y4ZiX0R80WgXM5x4VILmjvBTaKwZ3wtiGs1Ge24/gqeNc57c1kbMSN0mELO\nGPYfsleLkzEojLN6gI0/giGYTmH5sQn5uEPtnuSv35egEEJIc205VCOPT/nUlIcH\nzXjgFXCrESX3dKuwFt7bSlwNV7dnxKKDMjlKYuLXMxmX1+W3mlZjen0lQPgsnECE\neDxdtJpWwR87gxfQV3/0swXcX85028LhGewuF68CV60bCMZZhYn3niqKQtuieVM=\n=xfks\n-----END PGP SIGNATURE-----\n", "payload": "tree c85d40526c5596303aeac01d5f4a38e816bc3532\nparent de362d88ea17ab23ca2483cb798bc7aeb81a48f5\nparent c797ce7877dff9189d828247493dfcada9c10e43\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582192148 +0100\ncommitter GitHub <noreply@github.com> 1582192148 +0100\n\nRollup merge of #68705 - BijanT:ll_remove, r=Mark-Simulacrum\n\nAdd LinkedList::remove()\n\nLinkedList::remove() removes the element at the specified index and returns it.\n\nI added this because I think having a remove function would be useful to have, and similar functions are in other containers, like Vec and HashMap.\n\nI'm not sure if adding a feature like this requires an RFC or not, so I'm sorry if this PR is premature.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "html_url": "https://github.com/rust-lang/rust/commit/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de362d88ea17ab23ca2483cb798bc7aeb81a48f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/de362d88ea17ab23ca2483cb798bc7aeb81a48f5", "html_url": "https://github.com/rust-lang/rust/commit/de362d88ea17ab23ca2483cb798bc7aeb81a48f5"}, {"sha": "c797ce7877dff9189d828247493dfcada9c10e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/c797ce7877dff9189d828247493dfcada9c10e43", "html_url": "https://github.com/rust-lang/rust/commit/c797ce7877dff9189d828247493dfcada9c10e43"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "f8f987efeb891b434f4e72629d86ebfd0430628a", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=f7ce5ff19c801a08c7b5aa2ff6f7f552e9de4a39", "patch": "@@ -878,6 +878,52 @@ impl<T> LinkedList<T> {\n         unsafe { self.split_off_after_node(split_node, at) }\n     }\n \n+    /// Removes the element at the given index and returns it.\n+    ///\n+    /// This operation should compute in O(n) time.\n+    ///\n+    /// # Panics\n+    /// Panics if at >= len\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(linked_list_remove)]\n+    /// use std::collections::LinkedList;\n+    ///\n+    /// let mut d = LinkedList::new();\n+    ///\n+    /// d.push_front(1);\n+    /// d.push_front(2);\n+    /// d.push_front(3);\n+    ///\n+    /// assert_eq!(d.remove(1), 2);\n+    /// assert_eq!(d.remove(0), 3);\n+    /// assert_eq!(d.remove(0), 1);\n+    /// ```\n+    #[unstable(feature = \"linked_list_remove\", issue = \"69210\")]\n+    pub fn remove(&mut self, at: usize) -> T {\n+        let len = self.len();\n+        assert!(at < len, \"Cannot remove at an index outside of the list bounds\");\n+\n+        // Below, we iterate towards the node at the given index, either from\n+        // the start or the end, depending on which would be faster.\n+        let offset_from_end = len - at - 1;\n+        if at <= offset_from_end {\n+            let mut cursor = self.cursor_front_mut();\n+            for _ in 0..at {\n+                cursor.move_next();\n+            }\n+            cursor.remove_current().unwrap()\n+        } else {\n+            let mut cursor = self.cursor_back_mut();\n+            for _ in 0..offset_from_end {\n+                cursor.move_prev();\n+            }\n+            cursor.remove_current().unwrap()\n+        }\n+    }\n+\n     /// Creates an iterator which uses a closure to determine if an element should be removed.\n     ///\n     /// If the closure returns true, then the element is removed and yielded."}]}