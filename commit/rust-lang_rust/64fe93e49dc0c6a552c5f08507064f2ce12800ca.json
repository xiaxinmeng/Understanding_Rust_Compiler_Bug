{"sha": "64fe93e49dc0c6a552c5f08507064f2ce12800ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmU5M2U0OWRjMGM2YTU1MmM1ZjA4NTA3MDY0ZjJjZTEyODAwY2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-20T20:00:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-20T20:01:08Z"}, "message": "std: Tidy up some `unsafe impl`s for `sync`\n\nThis commit removes many unnecessary `unsafe impl` blocks as well as pushing the\nneeded implementations to the lowest level possible. I noticed that the bounds\nfor `RwLock` are a little off when reviewing #22574 and wanted to ensure that we\nhad our story straight on these implementations.", "tree": {"sha": "47b42afb310006fea769a9f02daf236651b55f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b42afb310006fea769a9f02daf236651b55f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64fe93e49dc0c6a552c5f08507064f2ce12800ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64fe93e49dc0c6a552c5f08507064f2ce12800ca", "html_url": "https://github.com/rust-lang/rust/commit/64fe93e49dc0c6a552c5f08507064f2ce12800ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64fe93e49dc0c6a552c5f08507064f2ce12800ca/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "fa45f72b3a1f36ee55e53c9bb5b50dffc7b07845", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -61,9 +61,6 @@ use sync::{mutex, MutexGuard, PoisonError};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Condvar { inner: Box<StaticCondvar> }\n \n-unsafe impl Send for Condvar {}\n-unsafe impl Sync for Condvar {}\n-\n /// Statically allocated condition variables.\n ///\n /// This structure is identical to `Condvar` except that it is suitable for use\n@@ -83,9 +80,6 @@ pub struct StaticCondvar {\n     mutex: AtomicUsize,\n }\n \n-unsafe impl Send for StaticCondvar {}\n-unsafe impl Sync for StaticCondvar {}\n-\n /// Constant initializer for a statically allocated condition variable.\n #[unstable(feature = \"std_misc\",\n            reason = \"may be merged with Condvar in the future\")]"}, {"sha": "a4129e315ffa6224abc52afaa474a9346104dbfb", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -152,8 +152,6 @@ pub struct StaticMutex {\n     poison: poison::Flag,\n }\n \n-unsafe impl Sync for StaticMutex {}\n-\n /// An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n /// dropped (falls out of scope), the lock will be unlocked.\n ///"}, {"sha": "d2054a1e819ab377d5204799f8e33e77e7bad937", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -13,10 +13,9 @@\n //! This primitive is meant to be used to run one-time initialization. An\n //! example use case would be for initializing an FFI library.\n \n+use prelude::v1::*;\n+\n use isize;\n-use marker::Sync;\n-use mem::drop;\n-use ops::FnOnce;\n use sync::atomic::{AtomicIsize, Ordering, ATOMIC_ISIZE_INIT};\n use sync::{StaticMutex, MUTEX_INIT};\n \n@@ -43,8 +42,6 @@ pub struct Once {\n     lock_cnt: AtomicIsize,\n }\n \n-unsafe impl Sync for Once {}\n-\n /// Initialization value for static `Once` values.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ONCE_INIT: Once = Once {"}, {"sha": "2587ff5238ea7b86eb29d107856be5ed31629198", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -16,6 +16,12 @@ use fmt;\n use thread;\n \n pub struct Flag { failed: UnsafeCell<bool> }\n+\n+// This flag is only ever accessed with a lock previously held. Note that this\n+// a totally private structure.\n+unsafe impl Send for Flag {}\n+unsafe impl Sync for Flag {}\n+\n pub const FLAG_INIT: Flag = Flag { failed: UnsafeCell { value: false } };\n \n impl Flag {"}, {"sha": "c32fd88ab2452cddb57b23b40f515bd23e7038bb", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -97,9 +97,6 @@ pub struct StaticRwLock {\n     poison: poison::Flag,\n }\n \n-unsafe impl Send for StaticRwLock {}\n-unsafe impl Sync for StaticRwLock {}\n-\n /// Constant initialization for a statically-initialized rwlock.\n #[unstable(feature = \"std_misc\",\n            reason = \"may be merged with RwLock in the future\")]"}, {"sha": "90dfebc4c454c7735808255c52a5994e08452f34", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n use libc;\n use ptr;\n-use std::option::Option::{Some, None};\n use sys::mutex::{self, Mutex};\n use sys::time;\n use sys::sync as ffi;\n@@ -20,6 +21,9 @@ use num::{Int, NumCast};\n \n pub struct Condvar { inner: UnsafeCell<ffi::pthread_cond_t> }\n \n+unsafe impl Send for Condvar {}\n+unsafe impl Sync for Condvar {}\n+\n pub const CONDVAR_INIT: Condvar = Condvar {\n     inner: UnsafeCell { value: ffi::PTHREAD_COND_INITIALIZER },\n };"}, {"sha": "f87c0339533dfb672273d881cbf9b7623e9b16c2", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n-use marker::Sync;\n use sys::sync as ffi;\n use sys_common::mutex;\n \n@@ -24,6 +25,7 @@ pub const MUTEX_INIT: Mutex = Mutex {\n     inner: UnsafeCell { value: ffi::PTHREAD_MUTEX_INITIALIZER },\n };\n \n+unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n impl Mutex {"}, {"sha": "b857f4ab75fed31160e45e63acdf887f545acdca", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n use sys::sync as ffi;\n \n@@ -17,6 +19,9 @@ pub const RWLOCK_INIT: RWLock = RWLock {\n     inner: UnsafeCell { value: ffi::PTHREAD_RWLOCK_INITIALIZER },\n };\n \n+unsafe impl Send for RWLock {}\n+unsafe impl Sync for RWLock {}\n+\n impl RWLock {\n     #[inline]\n     pub unsafe fn new() -> RWLock {"}, {"sha": "071637e3a939f82eda497d497dabdbef9e72ea31", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n use libc::{self, DWORD};\n use os;\n@@ -17,6 +19,9 @@ use time::Duration;\n \n pub struct Condvar { inner: UnsafeCell<ffi::CONDITION_VARIABLE> }\n \n+unsafe impl Send for Condvar {}\n+unsafe impl Sync for Condvar {}\n+\n pub const CONDVAR_INIT: Condvar = Condvar {\n     inner: UnsafeCell { value: ffi::CONDITION_VARIABLE_INIT }\n };"}, {"sha": "0847f3b52bfabe171e370bed4e1b6a43cb75bfa5", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use marker::Sync;\n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n use sys::sync as ffi;\n \n@@ -18,6 +19,7 @@ pub const MUTEX_INIT: Mutex = Mutex {\n     inner: UnsafeCell { value: ffi::SRWLOCK_INIT }\n };\n \n+unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n #[inline]\n@@ -27,14 +29,15 @@ pub unsafe fn raw(m: &Mutex) -> ffi::PSRWLOCK {\n \n // So you might be asking why we're using SRWLock instead of CriticalSection?\n //\n-// 1. SRWLock is several times faster than CriticalSection according to benchmarks performed on both\n-// Windows 8 and Windows 7.\n+// 1. SRWLock is several times faster than CriticalSection according to\n+//    benchmarks performed on both Windows 8 and Windows 7.\n //\n-// 2. CriticalSection allows recursive locking while SRWLock deadlocks. The Unix implementation\n-// deadlocks so consistency is preferred. See #19962 for more details.\n+// 2. CriticalSection allows recursive locking while SRWLock deadlocks. The Unix\n+//    implementation deadlocks so consistency is preferred. See #19962 for more\n+//    details.\n //\n-// 3. While CriticalSection is fair and SRWLock is not, the current Rust policy is there there are\n-// no guarantees of fairness.\n+// 3. While CriticalSection is fair and SRWLock is not, the current Rust policy\n+//    is there there are no guarantees of fairness.\n \n impl Mutex {\n     #[inline]"}, {"sha": "009605535a0237026d18ec29e0d783feb626a362", "filename": "src/libstd/sys/windows/rwlock.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use cell::UnsafeCell;\n use sys::sync as ffi;\n \n@@ -17,6 +19,9 @@ pub const RWLOCK_INIT: RWLock = RWLock {\n     inner: UnsafeCell { value: ffi::SRWLOCK_INIT }\n };\n \n+unsafe impl Send for RWLock {}\n+unsafe impl Sync for RWLock {}\n+\n impl RWLock {\n     #[inline]\n     pub unsafe fn read(&self) {"}, {"sha": "d2d72ed16618df6e74be3321eb5f9346043cc665", "filename": "src/test/run-pass/std-sync-right-kind-impls.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe93e49dc0c6a552c5f08507064f2ce12800ca/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs?ref=64fe93e49dc0c6a552c5f08507064f2ce12800ca", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync;\n+\n+fn assert_both<T: Sync + Send>() {}\n+\n+fn main() {\n+    assert_both::<sync::StaticMutex>();\n+    assert_both::<sync::StaticCondvar>();\n+    assert_both::<sync::StaticRwLock>();\n+    assert_both::<sync::Mutex<()>>();\n+    assert_both::<sync::Condvar>();\n+    assert_both::<sync::RwLock<()>>();\n+    assert_both::<sync::Semaphore>();\n+    assert_both::<sync::Barrier>();\n+    assert_both::<sync::Arc<()>>();\n+    assert_both::<sync::Weak<()>>();\n+    assert_both::<sync::Once>();\n+}"}]}