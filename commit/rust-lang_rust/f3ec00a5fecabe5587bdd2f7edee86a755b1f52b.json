{"sha": "f3ec00a5fecabe5587bdd2f7edee86a755b1f52b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWMwMGE1ZmVjYWJlNTU4N2JkZDJmN2VkZWU4NmE3NTViMWY1MmI=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-01T04:34:04Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-02T18:31:13Z"}, "message": "Add a fast code path to optimize `confusable_idents` lint for ASCII code base.", "tree": {"sha": "059f96d14e65ba3dd2474eb4013f61b118dfb3b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/059f96d14e65ba3dd2474eb4013f61b118dfb3b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b", "html_url": "https://github.com/rust-lang/rust/commit/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05961c2db4b02f599c8509031818339e10d592a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05961c2db4b02f599c8509031818339e10d592a", "html_url": "https://github.com/rust-lang/rust/commit/c05961c2db4b02f599c8509031818339e10d592a"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "94fc1a228df03a89f84e496ba0cf73d3f74c13d5", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec00a5fecabe5587bdd2f7edee86a755b1f52b/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=f3ec00a5fecabe5587bdd2f7edee86a755b1f52b", "patch": "@@ -2,6 +2,8 @@ use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::SymbolStr;\n+use std::hash::{Hash, Hasher};\n+use std::ops::Deref;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -24,9 +26,6 @@ declare_lint! {\n \n declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);\n \n-use std::hash::{Hash, Hasher};\n-use std::ops::Deref;\n-\n enum CowBoxSymStr {\n     Interned(SymbolStr),\n     Owned(Box<str>),\n@@ -73,6 +72,35 @@ fn calc_skeleton(symbol_str: SymbolStr, buffer: &'_ mut String) -> CowBoxSymStr\n     }\n }\n \n+fn is_in_ascii_confusable_closure(c: char) -> bool {\n+    // FIXME: move this table to `unicode_security` crate.\n+    // data here corresponds to Unicode 13.\n+    const ASCII_CONFUSABLE_CLOSURE: &[(u64, u64)] = &[(0x00, 0x7f), (0xba, 0xba), (0x2080, 0x2080)];\n+    let c = c as u64;\n+    for &(range_start, range_end) in ASCII_CONFUSABLE_CLOSURE {\n+        if c >= range_start && c <= range_end {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn is_in_ascii_confusable_closure_relevant_list(c: char) -> bool {\n+    // FIXME: move this table to `unicode_security` crate.\n+    // data here corresponds to Unicode 13.\n+    const ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST: &[u64] = &[\n+        0x22, 0x25, 0x27, 0x2f, 0x30, 0x31, 0x49, 0x4f, 0x60, 0x6c, 0x6d, 0x6e, 0x72, 0x7c, 0xba,\n+        0x2080,\n+    ];\n+    let c = c as u64;\n+    for &item in ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST {\n+        if c == item {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n impl EarlyLintPass for NonAsciiIdents {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n         use rustc_session::lint::Level;\n@@ -81,9 +109,26 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n         let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n         let mut symbol_strs_and_spans = Vec::with_capacity(symbols.len());\n+        let mut in_fast_path = true;\n         for (symbol, sp) in symbols.iter() {\n+            // fast path\n             let symbol_str = symbol.as_str();\n-            symbol_strs_and_spans.push((symbol_str, *sp));\n+            if !symbol_str.chars().all(is_in_ascii_confusable_closure) {\n+                // fallback to slow path.\n+                symbol_strs_and_spans.clear();\n+                in_fast_path = false;\n+                break;\n+            }\n+            if symbol_str.chars().any(is_in_ascii_confusable_closure_relevant_list) {\n+                symbol_strs_and_spans.push((symbol_str, *sp));\n+            }\n+        }\n+        if !in_fast_path {\n+            // slow path\n+            for (symbol, sp) in symbols.iter() {\n+                let symbol_str = symbol.as_str();\n+                symbol_strs_and_spans.push((symbol_str, *sp));\n+            }\n         }\n         drop(symbols);\n         symbol_strs_and_spans.sort_by_key(|x| x.0.clone());"}]}