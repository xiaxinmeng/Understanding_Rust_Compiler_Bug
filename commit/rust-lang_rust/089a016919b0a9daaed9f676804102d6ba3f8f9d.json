{"sha": "089a016919b0a9daaed9f676804102d6ba3f8f9d", "node_id": "C_kwDOAAsO6NoAKDA4OWEwMTY5MTliMGE5ZGFhZWQ5ZjY3NjgwNDEwMmQ2YmEzZjhmOWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-06T22:55:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-06T22:55:37Z"}, "message": "Auto merge of #90661 - matthiaskrgr:rollup-1umbdlx, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #90487 (Add a chapter on reading Rustdoc output)\n - #90508 (Apply adjustments for field expression even if inaccessible)\n - #90627 (Suggest dereference of `Box` when inner type is expected)\n - #90642 (use matches!() macro in more places)\n - #90646 (type error go brrrrrrrr)\n - #90649 (Run reveal_all on MIR when inlining is activated.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f46a71dfffab593de738042085740e615520c0a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46a71dfffab593de738042085740e615520c0a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089a016919b0a9daaed9f676804102d6ba3f8f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089a016919b0a9daaed9f676804102d6ba3f8f9d", "html_url": "https://github.com/rust-lang/rust/commit/089a016919b0a9daaed9f676804102d6ba3f8f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089a016919b0a9daaed9f676804102d6ba3f8f9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0727994435c75fdedd3e9d226cf434089b0ab585", "url": "https://api.github.com/repos/rust-lang/rust/commits/0727994435c75fdedd3e9d226cf434089b0ab585", "html_url": "https://github.com/rust-lang/rust/commit/0727994435c75fdedd3e9d226cf434089b0ab585"}, {"sha": "ec471de865b6f93f384d1903cc53c39a6057a8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec471de865b6f93f384d1903cc53c39a6057a8aa", "html_url": "https://github.com/rust-lang/rust/commit/ec471de865b6f93f384d1903cc53c39a6057a8aa"}], "stats": {"total": 397, "additions": 304, "deletions": 93}, "files": [{"sha": "742a7d1d2df70907fa087b4221fffbf816b835bf", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -212,7 +212,8 @@ impl AssocOp {\n     /// parentheses while having a high degree of confidence on the correctness of the suggestion.\n     pub fn can_continue_expr_unambiguously(&self) -> bool {\n         use AssocOp::*;\n-        match self {\n+        matches!(\n+            self,\n             BitXor | // `{ 42 } ^ 3`\n             Assign | // `{ 42 } = { 42 }`\n             Divide | // `{ 42 } / 42`\n@@ -225,9 +226,8 @@ impl AssocOp {\n             As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n             // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n-            Colon => true, // `{ 42 }: usize`\n-            _ => false,\n-        }\n+            Colon, // `{ 42 }: usize`\n+        )\n     }\n }\n "}, {"sha": "79973ab170cad8e362dd85199181b79b2e4c24ff", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -53,10 +53,7 @@ pub(crate) enum LaterUseKind {\n \n impl BorrowExplanation {\n     pub(crate) fn is_explained(&self) -> bool {\n-        match self {\n-            BorrowExplanation::Unexplained => false,\n-            _ => true,\n-        }\n+        !matches!(self, BorrowExplanation::Unexplained)\n     }\n     pub(crate) fn add_explanation_to_diagnostic<'tcx>(\n         &self,"}, {"sha": "f4a5da1fe36fa8d0f6d2c9465c9f56f65f6b5784", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -2110,14 +2110,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     _ => constraint_sup_scc != target_scc,\n                 }\n             } else {\n-                match categorized_path[*i].category {\n+                !matches!(\n+                    categorized_path[*i].category,\n                     ConstraintCategory::OpaqueType\n-                    | ConstraintCategory::Boring\n-                    | ConstraintCategory::BoringNoLocation\n-                    | ConstraintCategory::Internal\n-                    | ConstraintCategory::Predicate(_) => false,\n-                    _ => true,\n-                }\n+                        | ConstraintCategory::Boring\n+                        | ConstraintCategory::BoringNoLocation\n+                        | ConstraintCategory::Internal\n+                        | ConstraintCategory::Predicate(_)\n+                )\n             }\n         };\n "}, {"sha": "147e2aead648db509356fe9e77b8cd02f6f72c12", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -138,17 +138,11 @@ impl<'tcx> DefiningTy<'tcx> {\n     }\n \n     pub fn is_fn_def(&self) -> bool {\n-        match *self {\n-            DefiningTy::FnDef(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, DefiningTy::FnDef(..))\n     }\n \n     pub fn is_const(&self) -> bool {\n-        match *self {\n-            DefiningTy::Const(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, DefiningTy::Const(..))\n     }\n \n     pub fn def_id(&self) -> DefId {"}, {"sha": "ab119ae25f5e89d496b69388ce65ab9058b4131b", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -124,10 +124,7 @@ fn push_debuginfo_type_name<'tcx>(\n             // info for MSVC debugger. However, wrapping these types' names in a synthetic type\n             // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n             // types out to aid debugging in MSVC.\n-            let is_slice_or_str = match *inner_type.kind() {\n-                ty::Slice(_) | ty::Str => true,\n-                _ => false,\n-            };\n+            let is_slice_or_str = matches!(*inner_type.kind(), ty::Slice(_) | ty::Str);\n \n             if !cpp_like_names {\n                 output.push('&');"}, {"sha": "87298023980ed8c2ff2ccde238122e1a7556fb53", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -25,10 +25,7 @@ pub enum ConstEvalErrKind {\n \n impl MachineStopType for ConstEvalErrKind {\n     fn is_hard_err(&self) -> bool {\n-        match self {\n-            Self::Panic { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, Self::Panic { .. })\n     }\n }\n "}, {"sha": "821b048eb9bcfc80331ce6f46616bcd3b42babc1", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -51,10 +51,8 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         // If the function itself is not annotated with `const`, it may still be a `const fn`\n         // if it resides in a const trait impl.\n         is_parent_const_impl_raw(tcx, hir_id)\n-    } else if let hir::Node::Ctor(_) = node {\n-        true\n     } else {\n-        false\n+        matches!(node, hir::Node::Ctor(_))\n     }\n }\n "}, {"sha": "5b4a5ac3577224722763b872f6ede27acbac6b2d", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -138,10 +138,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n         args: &[GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n-        let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(_) => false,\n-            _ => true,\n-        });\n+        let args =\n+            args.iter().cloned().filter(|arg| !matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         if args.clone().next().is_some() {\n             self.generic_delimiters(|cx| cx.comma_sep(args))\n         } else {"}, {"sha": "00208574c555e9b77207dbb063a7041b2fba3427", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -345,10 +345,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                     // Figure out how to pass which arguments.\n                     // The Rust ABI is special: ZST get skipped.\n-                    let rust_abi = match caller_abi {\n-                        Abi::Rust | Abi::RustCall => true,\n-                        _ => false,\n-                    };\n+                    let rust_abi = matches!(caller_abi, Abi::Rust | Abi::RustCall);\n+\n                     // We have two iterators: Where the arguments come from,\n                     // and where they go to.\n "}, {"sha": "3785c170f6b2b9a931f2eb93143b7c6a6cb2a953", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -131,10 +131,7 @@ impl Qualifs<'mir, 'tcx> {\n             .body\n             .basic_blocks()\n             .iter_enumerated()\n-            .find(|(_, block)| match block.terminator().kind {\n-                TerminatorKind::Return => true,\n-                _ => false,\n-            })\n+            .find(|(_, block)| matches!(block.terminator().kind, TerminatorKind::Return))\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {"}, {"sha": "abc5a3c6a5206b352fe017a1f5dbef97b286d265", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -170,11 +170,12 @@ impl Qualif for NeedsNonConstDrop {\n             let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n             selcx.select(&obligation)\n         });\n-        match implsrc {\n-            Ok(Some(ImplSource::ConstDrop(_)))\n-            | Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            implsrc,\n+            Ok(Some(\n+                ImplSource::ConstDrop(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n+            ))\n+        )\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {"}, {"sha": "d789237e692d2beea5f514ee6f41b89080674be4", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -68,11 +68,10 @@ pub enum EscapeError {\n impl EscapeError {\n     /// Returns true for actual errors, as opposed to warnings.\n     pub fn is_fatal(&self) -> bool {\n-        match self {\n-            EscapeError::UnskippedWhitespaceWarning => false,\n-            EscapeError::MultipleSkippedLinesWarning => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self,\n+            EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning\n+        )\n     }\n }\n "}, {"sha": "7a51bb4a1f32ae828f9de259450a815ba37981c1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -538,12 +538,12 @@ impl InterpError<'_> {\n     /// To avoid performance issues, there are places where we want to be sure to never raise these formatting errors,\n     /// so this method lets us detect them and `bug!` on unexpected errors.\n     pub fn formatted_string(&self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure { .. })\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n-            _ => false,\n-        }\n+                | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure { .. })\n+                | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n+        )\n     }\n \n     /// Should this error be reported as a hard error, preventing compilation, or a soft error,"}, {"sha": "c7d8bec506f6b80af01ed5e80d120ea8879ac7bb", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -187,8 +187,12 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n             })\n             .enumerate()\n             .map(|(i, r)| match r {\n-                Err(TypeError::Sorts(exp_found)) => Err(TypeError::ArgumentSorts(exp_found, i)),\n-                Err(TypeError::Mutability) => Err(TypeError::ArgumentMutability(i)),\n+                Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {\n+                    Err(TypeError::ArgumentSorts(exp_found, i))\n+                }\n+                Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {\n+                    Err(TypeError::ArgumentMutability(i))\n+                }\n                 r => r,\n             });\n         Ok(ty::FnSig {"}, {"sha": "6807d02519e2b3305f46278f1b33f861fafb14bd", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -485,7 +485,7 @@ fn inject_statement(\n \n // Non-code expressions are injected into the coverage map, without generating executable code.\n fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n-    debug_assert!(if let CoverageKind::Expression { .. } = expression { true } else { false });\n+    debug_assert!(matches!(expression, CoverageKind::Expression { .. }));\n     debug!(\"  injecting non-code expression {:?}\", expression);\n     let inject_in_bb = mir::START_BLOCK;\n     let data = &mut mir_body[inject_in_bb];"}, {"sha": "d13fa0729cd9562a0306ef1be170dd3a302fb3a4", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -94,10 +94,9 @@ impl CoverageSpan {\n         stmt_index: usize,\n     ) -> Self {\n         let is_closure = match statement.kind {\n-            StatementKind::Assign(box (_, Rvalue::Aggregate(box ref kind, _))) => match kind {\n-                AggregateKind::Closure(_, _) | AggregateKind::Generator(_, _, _) => true,\n-                _ => false,\n-            },\n+            StatementKind::Assign(box (_, Rvalue::Aggregate(box ref kind, _))) => {\n+                matches!(kind, AggregateKind::Closure(_, _) | AggregateKind::Generator(_, _, _))\n+            }\n             _ => false,\n         };\n "}, {"sha": "6c423a2bb5756c79476adf6a8186781b61c29914", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -11,7 +11,7 @@ impl<'tcx> MirPass<'tcx> for RevealAll {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // This pass must run before inlining, since we insert callee bodies in RevealAll mode.\n         // Do not apply this transformation to generators.\n-        if (tcx.sess.mir_opt_level() >= 3 || !super::inline::is_enabled(tcx))\n+        if (tcx.sess.mir_opt_level() >= 3 || super::inline::is_enabled(tcx))\n             && body.generator.is_none()\n         {\n             let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());"}, {"sha": "64cd6f56a9ffa0a15d254c302587bb0f4e9cccc6", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -27,9 +27,8 @@ impl MirPass<'_> for UnreachablePropagation {\n             // This is a temporary solution that handles possibly diverging asm statements.\n             // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n             let asm_stmt_in_block = || {\n-                bb_data.statements.iter().any(|stmt: &Statement<'_>| match stmt.kind {\n-                    StatementKind::LlvmInlineAsm(..) => true,\n-                    _ => false,\n+                bb_data.statements.iter().any(|stmt: &Statement<'_>| {\n+                    matches!(stmt.kind, StatementKind::LlvmInlineAsm(..))\n                 })\n             };\n "}, {"sha": "481bfa4a26b36f6c79b1ce3db2833bebdcd8f085", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -320,10 +320,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n     pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n-        match pred.constness {\n-            ty::BoundConstness::ConstIfConst if self.is_in_const_context => true,\n-            _ => false,\n-        }\n+        matches!(pred.constness, ty::BoundConstness::ConstIfConst) && self.is_in_const_context\n     }\n \n     /// Returns `true` if the predicate is considered `const` to"}, {"sha": "511a2d7ddacf96e42f453690267c1094f0e995ef", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -436,11 +436,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     // Very crude check to see whether the expression must be wrapped\n                     // in parentheses for the suggestion to work (issue #89497).\n                     // Can/should be extended in the future.\n-                    let needs_parens = !has_parens\n-                        && match self.expr.kind {\n-                            hir::ExprKind::Cast(..) => true,\n-                            _ => false,\n-                        };\n+                    let needs_parens =\n+                        !has_parens && matches!(self.expr.kind, hir::ExprKind::Cast(..));\n \n                     let mut suggestion = vec![(self.expr.span.shrink_to_lo(), sugg)];\n                     if needs_parens {"}, {"sha": "7c262dcf723390fbe58ef980b862666e536d2986", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -453,6 +453,7 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     Ok(())\n }\n \n+#[instrument(level = \"debug\", skip(infcx))]\n fn extract_spans_for_error_reporting<'a, 'tcx>(\n     infcx: &infer::InferCtxt<'a, 'tcx>,\n     terr: &TypeError<'_>,"}, {"sha": "0cbbcdd107371d56c4c525ceae17595d6f9db697", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -29,6 +29,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         self.annotate_expected_due_to_let_ty(err, expr);\n+        self.suggest_box_deref(err, expr, expected, expr_ty);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n@@ -167,6 +168,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_box_deref(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        expr_ty: Ty<'tcx>,\n+    ) {\n+        if expr_ty.is_box() && expr_ty.boxed_ty() == expected {\n+            err.span_suggestion_verbose(\n+                expr.span.shrink_to_lo(),\n+                \"try dereferencing the `Box`\",\n+                \"*\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}, {"sha": "2d0a4068fbbe31ef00f16ef6ddf01effb2e23b25", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -1698,15 +1698,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // Save the index of all fields regardless of their visibility in case\n                         // of error recovery.\n                         self.write_field_index(expr.hir_id, index);\n+                        let adjustments = self.adjust_steps(&autoderef);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n-                            let adjustments = self.adjust_steps(&autoderef);\n                             self.apply_adjustments(base, adjustments);\n                             self.register_predicates(autoderef.into_obligations());\n \n                             self.tcx.check_stability(field.did, Some(expr.hir_id), expr.span, None);\n                             return field_ty;\n                         }\n-                        private_candidate = Some((base_def.did, field_ty));\n+                        private_candidate = Some((adjustments, base_def.did, field_ty));\n                     }\n                 }\n                 ty::Tuple(tys) => {\n@@ -1729,7 +1729,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n \n-        if let Some((did, field_ty)) = private_candidate {\n+        if let Some((adjustments, did, field_ty)) = private_candidate {\n+            // (#90483) apply adjustments to avoid ExprUseVisitor from\n+            // creating erroneous projection.\n+            self.apply_adjustments(base, adjustments);\n             self.ban_private_field_access(expr, expr_t, field, did);\n             return field_ty;\n         }"}, {"sha": "a1c2945770920c1f73dfa6743523e6ebfaa87148", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                     hir::TyKind::Path(hir::QPath::Resolved(\n                         None,\n                         hir::Path { res: hir::def::Res::Def(_, id), .. },\n-                    )) if *id == def_id => true,\n+                    )) => *id == def_id,\n                     _ => false,\n                 })\n             })"}, {"sha": "da95fe21ac9af8706e3d371d8b63382c1268efa7", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -878,12 +878,7 @@ impl Ipv4Addr {\n     #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n-        match self.octets() {\n-            [192, 0, 2, _] => true,\n-            [198, 51, 100, _] => true,\n-            [203, 0, 113, _] => true,\n-            _ => false,\n-        }\n+        matches!(self.octets(), [192, 0, 2, _] | [198, 51, 100, _] | [203, 0, 113, _])\n     }\n \n     /// Converts this address to an [IPv4-compatible] [`IPv6` address]."}, {"sha": "f450e41bfea1e539a0c7d0a2e476164b68dba909", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -159,7 +159,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n-        if let AddressKind::Unnamed = self.address() { true } else { false }\n+        matches!(self.address(), AddressKind::Unnamed)\n     }\n \n     /// Returns the contents of this address if it is a `pathname` address."}, {"sha": "eb18185945387cbaf5de34a8cfc6335ccfc89c9d", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -1,6 +1,7 @@\n # The Rustdoc Book\n \n - [What is rustdoc?](what-is-rustdoc.md)\n+- [How to read rustdoc output](how-to-read-rustdoc.md)\n - [How to write documentation](how-to-write-documentation.md)\n - [What to include (and exclude)](what-to-include.md)\n - [Command-line arguments](command-line-arguments.md)"}, {"sha": "99724d859ee75b81ca1a27a4d48cca446974e272", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,107 @@\n+# How to read rustdoc output\n+\n+Rustdoc's HTML output includes a friendly and useful navigation interface which\n+makes it easier for users to navigate and understand your code.\n+This chapter covers the major features of that interface,\n+and is a great starting point for documentation authors and users alike.\n+\n+## Structure\n+\n+The `rustdoc` output is divided into three sections.\n+Along the left side of each page is a quick navigation bar,\n+which shows contextual information about the current entry.\n+The rest of the page is taken up by the search interface at the top\n+and the documentation for the current item below that.\n+\n+## The Item Documentation\n+\n+The majority of the screen is taken up with the documentation text for the item\n+currently being viewed.\n+At the top is some at-a-glance info and controls:\n+\n+- the type and name of the item,\n+  such as \"Struct `std::time::Duration`\",\n+- a button to copy the item's path to the clipboard,\n+  which is a clipboard item\n+- a button to collapse or expand the top-level documentation for that item\n+  (`[+]` or `[-]`),\n+- a link to the source code (`[src]`),\n+  if [configured](the-doc-attribute.html#html_no_source),\n+  and present (the source may not be available if\n+  the documentation was created with `cargo doc --no-deps`),\n+- and the version in which the item became stable,\n+  if it's a stable item in the standard library.\n+\n+Below this is the main documentation for the item,\n+including a definition or function signature if appropriate,\n+followed by a list of fields or variants for Rust types.\n+Finally, the page lists associated functions and trait implementations,\n+including automatic and blanket implementations that `rustdoc` knows about.\n+\n+### Navigation\n+\n+Subheadings, variants, fields, and many other things in this documentation\n+are anchors and can be clicked on and deep-linked to,\n+which is a great way to communicate exactly what you're talking about.\n+The typograpical character \"\u00a7\" appears next to lines with anchors on them\n+when hovered or given keyboard focus.\n+\n+## The Navigation Bar\n+\n+For example, when looking at documentation for the crate root,\n+it shows all the crates documented in the documentation bundle,\n+and quick links to the modules, structs, traits, functions, and macros available\n+from the current crate.\n+At the top, it displays a [configurable logo](the-doc-attribute.html#html_logo_url)\n+alongside the current crate's name and version,\n+or the current item whose documentation is being displayed.\n+\n+## The Theme Picker and Search Interface\n+\n+When viewing `rustdoc`'s output in a browser with JavaScript enabled,\n+a dynamic interface appears at the top of the page.\n+To the left is the theme picker, denoted with a paint-brush icon,\n+and the search interface, help screen, and options appear to the right of that.\n+\n+### The Theme Picker\n+\n+Clicking on the theme picker provides a list of themes -\n+by default `ayu`, `light`, and `dark` -\n+which are available for viewing.\n+\n+### The Search Interface\n+\n+Typing in the search bar instantly searches the available documentation for\n+the string entered with a fuzzy matching algorithm that is tolerant of minor\n+typos.\n+\n+By default, the search results give are \"In Names\",\n+meaning that the fuzzy match is made against the names of items.\n+Matching names are shown on the left, and the first few words of their\n+descriptions are given on the right.\n+By clicking an item, you will navigate to its particular documentation.\n+\n+There are two other sets of results, shown as tabs in the search results pane.\n+\"In Parameters\" shows matches for the string in the types of parameters to\n+functions, and \"In Return Types\" shows matches in the return types of functions.\n+Both are very useful when looking for a function whose name you can't quite\n+bring to mind when you know the type you have or want.\n+\n+When typing in the search bar, you can prefix your search term with a type\n+followed by a colon (such as `mod:`) to restrict the results to just that\n+kind of item. (The available items are listed in the help popup.)\n+\n+### Shortcuts\n+\n+Pressing `S` while focused elsewhere on the page will move focus to the\n+search bar, and pressing `?` shows the help screen,\n+which includes all these shortcuts and more.\n+Pressing `T` focuses the theme picker.\n+\n+When the search results are focused,\n+the left and right arrows move between tabs and the up and down arrows move\n+among the results.\n+Pressing the enter or return key opens the highlighted result.\n+\n+When looking at the documentation for an item, the plus and minus keys expand\n+and collapse all sections in the document."}, {"sha": "39f665402b025cf12918fba727f95bc93ecf6410", "filename": "src/test/mir-opt/issue-78192.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fmir-opt%2Fissue-78192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fmir-opt%2Fissue-78192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-78192.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -1,4 +1,4 @@\n-// EMIT_MIR issue_78192.f.InstCombine.diff\n+// compile-flags: -Zmir-opt-level=1 -Zinline-mir\n pub fn f<T>(a: &T) -> *const T {\n     let b: &*const T = &(a as *const T);\n     *b\n@@ -7,3 +7,5 @@ pub fn f<T>(a: &T) -> *const T {\n fn main() {\n     f(&2);\n }\n+\n+// EMIT_MIR issue_78192.f.InstCombine.diff"}, {"sha": "6c287d9a707de2e456c51c4506609febb26c22c9", "filename": "src/test/ui/compare-method/issue-90444.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,17 @@\n+pub struct A;\n+impl From<fn((), (), &())> for A {\n+    fn from(_: fn((), (), &mut ())) -> Self {\n+        //~^ error: method `from` has an incompatible type for trait\n+        loop {}\n+    }\n+}\n+\n+pub struct B;\n+impl From<fn((), (), u32)> for B {\n+    fn from(_: fn((), (), u64)) -> Self {\n+        //~^ error: method `from` has an incompatible type for trait\n+        loop {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "84bbec0623fd8f56c72d45b5b6e75941bef8915a", "filename": "src/test/ui/compare-method/issue-90444.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,27 @@\n+error[E0053]: method `from` has an incompatible type for trait\n+  --> $DIR/issue-90444.rs:3:16\n+   |\n+LL |     fn from(_: fn((), (), &mut ())) -> Self {\n+   |                ^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                types differ in mutability\n+   |                help: change the parameter type to match the trait: `for<'r> fn((), (), &'r ())`\n+   |\n+   = note: expected fn pointer `fn(for<'r> fn((), (), &'r ())) -> A`\n+              found fn pointer `fn(for<'r> fn((), (), &'r mut ())) -> A`\n+\n+error[E0053]: method `from` has an incompatible type for trait\n+  --> $DIR/issue-90444.rs:11:16\n+   |\n+LL |     fn from(_: fn((), (), u64)) -> Self {\n+   |                ^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected `u32`, found `u64`\n+   |                help: change the parameter type to match the trait: `fn((), (), u32)`\n+   |\n+   = note: expected fn pointer `fn(fn((), (), u32)) -> B`\n+              found fn pointer `fn(fn((), (), u64)) -> B`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "d8f7fac15135635b10cb4d8b1df9772a35d594d0", "filename": "src/test/ui/suggestions/boxed-variant-field.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,16 @@\n+enum Ty {\n+    Unit,\n+    List(Box<Ty>),\n+}\n+\n+fn foo(x: Ty) -> Ty {\n+    match x {\n+        Ty::Unit => Ty::Unit,\n+        Ty::List(elem) => foo(elem),\n+        //~^ ERROR mismatched types\n+        //~| HELP try dereferencing the `Box`\n+        //~| HELP try using a variant of the expected enum\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d4ccb2ca490bc0f9fb0f899cda5fc8565645d71d", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/boxed-variant-field.rs:9:31\n+   |\n+LL |         Ty::List(elem) => foo(elem),\n+   |                               ^^^^ expected enum `Ty`, found struct `Box`\n+   |\n+   = note: expected enum `Ty`\n+            found struct `Box<Ty>`\n+help: try dereferencing the `Box`\n+   |\n+LL |         Ty::List(elem) => foo(*elem),\n+   |                               +\n+help: try using a variant of the expected enum\n+   |\n+LL |         Ty::List(elem) => foo(Ty::List(elem)),\n+   |                               ~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "65d90678040d5ff094278cde42b3bb483ad2d067", "filename": "src/test/ui/terr-sorts.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fterr-sorts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Fterr-sorts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.stderr?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -6,6 +6,10 @@ LL |     want_foo(b);\n    |\n    = note: expected struct `Foo`\n               found struct `Box<Foo>`\n+help: try dereferencing the `Box`\n+   |\n+LL |     want_foo(*b);\n+   |              +\n \n error: aborting due to previous error\n "}, {"sha": "74e50d46e8dcfa26d7e883f14ff582e0edf8c79c", "filename": "src/test/ui/typeck/issue-90483-inaccessible-field-adjustment.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.rs?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+\n+mod m {\n+  pub struct S { foo: i32 }\n+  impl S {\n+    pub fn foo(&self) -> i32 { 42 }\n+  }\n+}\n+\n+fn bar(s: &m::S) {\n+  || s.foo() + s.foo; //~ ERROR E0616\n+}\n+\n+fn main() {}"}, {"sha": "02cdc102c15baed86626b785b6f88304d0ec9166", "filename": "src/test/ui/typeck/issue-90483-inaccessible-field-adjustment.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089a016919b0a9daaed9f676804102d6ba3f8f9d/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90483-inaccessible-field-adjustment.stderr?ref=089a016919b0a9daaed9f676804102d6ba3f8f9d", "patch": "@@ -0,0 +1,14 @@\n+error[E0616]: field `foo` of struct `S` is private\n+  --> $DIR/issue-90483-inaccessible-field-adjustment.rs:11:18\n+   |\n+LL |   || s.foo() + s.foo;\n+   |                  ^^^ private field\n+   |\n+help: a method `foo` also exists, call it with parentheses\n+   |\n+LL |   || s.foo() + s.foo();\n+   |                     ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0616`."}]}