{"sha": "02118330084539fdc87533d46aabeef2257ee835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMTE4MzMwMDg0NTM5ZmRjODc1MzNkNDZhYWJlZWYyMjU3ZWU4MzU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T06:10:26Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T11:51:07Z"}, "message": "Move FuzzyEq trait into core::cmp and rename it to 'ApproxEq'", "tree": {"sha": "eb518dc22f21ed58165b43acada47e6d8fca7955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb518dc22f21ed58165b43acada47e6d8fca7955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02118330084539fdc87533d46aabeef2257ee835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02118330084539fdc87533d46aabeef2257ee835", "html_url": "https://github.com/rust-lang/rust/commit/02118330084539fdc87533d46aabeef2257ee835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02118330084539fdc87533d46aabeef2257ee835/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd", "html_url": "https://github.com/rust-lang/rust/commit/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd"}], "stats": {"total": 254, "additions": 114, "deletions": 140}, "files": [{"sha": "80f1f05961a5d8ac03d7ceb6393b0f44043c3f9f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -66,6 +66,13 @@ totaleq_impl!(uint)\n \n totaleq_impl!(char)\n \n+/// Trait for testing approximate equality\n+pub trait ApproxEq<Eps> {\n+    fn approx_epsilon() -> Eps;\n+    fn approx_eq(&self, other: &Self) -> bool;\n+    fn approx_eq_eps(&self, other: &Self, approx_epsilon: &Eps) -> bool;\n+}\n+\n #[deriving(Clone, Eq)]\n pub enum Ordering { Less = -1, Equal = 0, Greater = 1 }\n "}, {"sha": "feeb2c3f8360538d7ae88d70fdbe1d4df8f9e81a", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -210,6 +210,22 @@ impl Eq for f32 {\n     fn ne(&self, other: &f32) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n+impl ApproxEq<f32> for f32 {\n+    #[inline(always)]\n+    fn approx_epsilon() -> f32 { 1.0e-6 }\n+\n+    #[inline(always)]\n+    fn approx_eq(&self, other: &f32) -> bool {\n+        self.approx_eq_eps(other, &ApproxEq::approx_epsilon::<f32, f32>())\n+    }\n+\n+    #[inline(always)]\n+    fn approx_eq_eps(&self, other: &f32, approx_epsilon: &f32) -> bool {\n+        (*self - *other).abs() < *approx_epsilon\n+    }\n+}\n+\n #[cfg(notest)]\n impl Ord for f32 {\n     #[inline(always)]\n@@ -974,6 +990,15 @@ mod tests {\n         assert!(!NaN.is_negative());\n     }\n \n+    #[test]\n+    fn test_approx_eq() {\n+        assert!(1.0f32.approx_eq(&1f32));\n+        assert!(0.9999999f32.approx_eq(&1f32));\n+        assert!(1.000001f32.approx_eq_eps(&1f32, &1.0e-5));\n+        assert!(1.0000001f32.approx_eq_eps(&1f32, &1.0e-6));\n+        assert!(!1.0000001f32.approx_eq_eps(&1f32, &1.0e-7));\n+    }\n+\n     #[test]\n     fn test_primitive() {\n         assert_eq!(Primitive::bits::<f32>(), sys::size_of::<f32>() * 8);"}, {"sha": "08f9c341188ad4a7628b734f46090157efdc6d9c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -233,6 +233,22 @@ impl Eq for f64 {\n     fn ne(&self, other: &f64) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n+impl ApproxEq<f64> for f64 {\n+    #[inline(always)]\n+    fn approx_epsilon() -> f64 { 1.0e-6 }\n+\n+    #[inline(always)]\n+    fn approx_eq(&self, other: &f64) -> bool {\n+        self.approx_eq_eps(other, &ApproxEq::approx_epsilon::<f64, f64>())\n+    }\n+\n+    #[inline(always)]\n+    fn approx_eq_eps(&self, other: &f64, approx_epsilon: &f64) -> bool {\n+        (*self - *other).abs() < *approx_epsilon\n+    }\n+}\n+\n #[cfg(notest)]\n impl Ord for f64 {\n     #[inline(always)]\n@@ -1022,6 +1038,15 @@ mod tests {\n         assert!(!NaN.is_negative());\n     }\n \n+    #[test]\n+    fn test_approx_eq() {\n+        assert!(1.0f64.approx_eq(&1f64));\n+        assert!(0.9999999f64.approx_eq(&1f64));\n+        assert!(1.000001f64.approx_eq_eps(&1f64, &1.0e-5));\n+        assert!(1.0000001f64.approx_eq_eps(&1f64, &1.0e-6));\n+        assert!(!1.0000001f64.approx_eq_eps(&1f64, &1.0e-7));\n+    }\n+\n     #[test]\n     fn test_primitive() {\n         assert_eq!(Primitive::bits::<f64>(), sys::size_of::<f64>() * 8);"}, {"sha": "61dd741b671b569f2e4dd6421057014241f0e280", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -371,6 +371,22 @@ impl Eq for float {\n     fn ne(&self, other: &float) -> bool { (*self) != (*other) }\n }\n \n+#[cfg(notest)]\n+impl ApproxEq<float> for float {\n+    #[inline(always)]\n+    fn approx_epsilon() -> float { 1.0e-6 }\n+\n+    #[inline(always)]\n+    fn approx_eq(&self, other: &float) -> bool {\n+        self.approx_eq_eps(other, &ApproxEq::approx_epsilon::<float, float>())\n+    }\n+\n+    #[inline(always)]\n+    fn approx_eq_eps(&self, other: &float, approx_epsilon: &float) -> bool {\n+        (*self - *other).abs() < *approx_epsilon\n+    }\n+}\n+\n #[cfg(notest)]\n impl Ord for float {\n     #[inline(always)]\n@@ -985,6 +1001,15 @@ mod tests {\n         assert!(!NaN.is_negative());\n     }\n \n+    #[test]\n+    fn test_approx_eq() {\n+        assert!(1.0f.approx_eq(&1f));\n+        assert!(0.9999999f.approx_eq(&1f));\n+        assert!(1.000001f.approx_eq_eps(&1f, &1.0e-5));\n+        assert!(1.0000001f.approx_eq_eps(&1f, &1.0e-6));\n+        assert!(!1.0000001f.approx_eq_eps(&1f, &1.0e-7));\n+    }\n+\n     #[test]\n     fn test_primitive() {\n         assert_eq!(Primitive::bits::<float>(), sys::size_of::<float>() * 8);"}, {"sha": "caa14ea802f6cdc6c821e10fecbb058f2a4e988b", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! An interface for numeric types\n-use cmp::{Eq, Ord};\n+use cmp::{Eq, ApproxEq, Ord};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::Option;\n@@ -240,7 +240,8 @@ pub trait Int: Integer\n ///\n pub trait Float: Real\n                + Signed\n-               + Primitive {\n+               + Primitive\n+               + ApproxEq<Self> {\n     // FIXME (#5527): These should be associated constants\n     fn NaN() -> Self;\n     fn infinity() -> Self;"}, {"sha": "10b36d38d43ae77d30f0db60ec582da333b6b402", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -28,7 +28,7 @@ pub use io::{print, println};\n /* Reexported types and traits */\n \n pub use clone::Clone;\n-pub use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n+pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n pub use old_iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};"}, {"sha": "ea3793c13748358caabd93b41649447029430553", "filename": "src/libstd/cmp.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd", "patch": "@@ -1,102 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the\n-// COPYRIGHT file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Additional general-purpose comparison functionality.\n-\n-use core::f32;\n-use core::f64;\n-use core::float;\n-\n-pub static FUZZY_EPSILON: float = 1.0e-6;\n-\n-pub trait FuzzyEq<Eps> {\n-    fn fuzzy_eq(&self, other: &Self) -> bool;\n-    fn fuzzy_eq_eps(&self, other: &Self, epsilon: &Eps) -> bool;\n-}\n-\n-impl FuzzyEq<float> for float {\n-    fn fuzzy_eq(&self, other: &float) -> bool {\n-        self.fuzzy_eq_eps(other, &FUZZY_EPSILON)\n-    }\n-\n-    fn fuzzy_eq_eps(&self, other: &float, epsilon: &float) -> bool {\n-        float::abs(*self - *other) < *epsilon\n-    }\n-}\n-\n-impl FuzzyEq<f32> for f32 {\n-    fn fuzzy_eq(&self, other: &f32) -> bool {\n-        self.fuzzy_eq_eps(other, &(FUZZY_EPSILON as f32))\n-    }\n-\n-    fn fuzzy_eq_eps(&self, other: &f32, epsilon: &f32) -> bool {\n-        f32::abs(*self - *other) < *epsilon\n-    }\n-}\n-\n-impl FuzzyEq<f64> for f64 {\n-    fn fuzzy_eq(&self, other: &f64) -> bool {\n-        self.fuzzy_eq_eps(other, &(FUZZY_EPSILON as f64))\n-    }\n-\n-    fn fuzzy_eq_eps(&self, other: &f64, epsilon: &f64) -> bool {\n-        f64::abs(*self - *other) < *epsilon\n-    }\n-}\n-\n-#[test]\n-fn test_fuzzy_equals() {\n-    assert!((&1.0f).fuzzy_eq(&1.0));\n-    assert!((&1.0f32).fuzzy_eq(&1.0f32));\n-    assert!((&1.0f64).fuzzy_eq(&1.0f64));\n-}\n-\n-#[test]\n-fn test_fuzzy_eq_eps() {\n-    assert!((&1.2f).fuzzy_eq_eps(&0.9, &0.5));\n-    assert!(!(&1.5f).fuzzy_eq_eps(&0.9, &0.5));\n-}\n-\n-#[cfg(test)]\n-mod test_complex{\n-    use cmp::*;\n-\n-    struct Complex { r: float, i: float }\n-\n-    impl FuzzyEq<float> for Complex {\n-        fn fuzzy_eq(&self, other: &Complex) -> bool {\n-            self.fuzzy_eq_eps(other, &FUZZY_EPSILON)\n-        }\n-\n-        fn fuzzy_eq_eps(&self, other: &Complex,\n-                             epsilon: &float) -> bool {\n-            self.r.fuzzy_eq_eps(&other.r, epsilon) &&\n-            self.i.fuzzy_eq_eps(&other.i, epsilon)\n-        }\n-    }\n-\n-    #[test]\n-    fn test_fuzzy_equals() {\n-        let a = Complex {r: 0.9, i: 0.9};\n-        let b = Complex {r: 0.9, i: 0.9};\n-\n-        assert!((a.fuzzy_eq(&b)));\n-    }\n-\n-    #[test]\n-    fn test_fuzzy_eq_eps() {\n-        let other = Complex {r: 0.9, i: 0.9};\n-\n-        assert!((&Complex {r: 0.9, i: 1.2}).fuzzy_eq_eps(&other, &0.5));\n-        assert!((&Complex {r: 1.2, i: 0.9}).fuzzy_eq_eps(&other, &0.5));\n-        assert!(!(&Complex {r: 0.9, i: 1.5}).fuzzy_eq_eps(&other, &0.5));\n-        assert!(!(&Complex {r: 1.5, i: 0.9}).fuzzy_eq_eps(&other, &0.5));\n-    }\n-}"}, {"sha": "32c7c82a3127ee361ccac883e33ea61c203dbc6b", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -86,7 +86,6 @@ pub mod term;\n pub mod time;\n pub mod arena;\n pub mod par;\n-pub mod cmp;\n pub mod base64;\n pub mod rl;\n pub mod workcache;"}, {"sha": "c73df8209e8b94114faa55b3e4becab47b44fa83", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -10,10 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n-use std::cmp::FuzzyEq;\n-\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern \"rust-intrinsic\" {\n@@ -54,44 +50,44 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        assert!((sqrtf32(64f32).fuzzy_eq(&8f32)));\n-        assert!((sqrtf64(64f64).fuzzy_eq(&8f64)));\n+        assert!((sqrtf32(64f32).approx_eq(&8f32)));\n+        assert!((sqrtf64(64f64).approx_eq(&8f64)));\n \n-        assert!((powif32(25f32, -2i32).fuzzy_eq(&0.0016f32)));\n-        assert!((powif64(23.2f64, 2i32).fuzzy_eq(&538.24f64)));\n+        assert!((powif32(25f32, -2i32).approx_eq(&0.0016f32)));\n+        assert!((powif64(23.2f64, 2i32).approx_eq(&538.24f64)));\n \n-        assert!((sinf32(0f32).fuzzy_eq(&0f32)));\n-        assert!((sinf64(f64::consts::pi / 2f64).fuzzy_eq(&1f64)));\n+        assert!((sinf32(0f32).approx_eq(&0f32)));\n+        assert!((sinf64(f64::consts::pi / 2f64).approx_eq(&1f64)));\n \n-        assert!((cosf32(0f32).fuzzy_eq(&1f32)));\n-        assert!((cosf64(f64::consts::pi * 2f64).fuzzy_eq(&1f64)));\n+        assert!((cosf32(0f32).approx_eq(&1f32)));\n+        assert!((cosf64(f64::consts::pi * 2f64).approx_eq(&1f64)));\n \n-        assert!((powf32(25f32, -2f32).fuzzy_eq(&0.0016f32)));\n-        assert!((powf64(400f64, 0.5f64).fuzzy_eq(&20f64)));\n+        assert!((powf32(25f32, -2f32).approx_eq(&0.0016f32)));\n+        assert!((powf64(400f64, 0.5f64).approx_eq(&20f64)));\n \n-        assert!((fabsf32(expf32(1f32) - f32::consts::e).fuzzy_eq(&0f32)));\n-        assert!((expf64(1f64).fuzzy_eq(&f64::consts::e)));\n+        assert!((fabsf32(expf32(1f32) - f32::consts::e).approx_eq(&0f32)));\n+        assert!((expf64(1f64).approx_eq(&f64::consts::e)));\n \n-        assert!((exp2f32(10f32).fuzzy_eq(&1024f32)));\n-        assert!((exp2f64(50f64).fuzzy_eq(&1125899906842624f64)));\n+        assert!((exp2f32(10f32).approx_eq(&1024f32)));\n+        assert!((exp2f64(50f64).approx_eq(&1125899906842624f64)));\n \n-        assert!((fabsf32(logf32(f32::consts::e) - 1f32).fuzzy_eq(&0f32)));\n-        assert!((logf64(1f64).fuzzy_eq(&0f64)));\n+        assert!((fabsf32(logf32(f32::consts::e) - 1f32).approx_eq(&0f32)));\n+        assert!((logf64(1f64).approx_eq(&0f64)));\n \n-        assert!((log10f32(10f32).fuzzy_eq(&1f32)));\n-        assert!((log10f64(f64::consts::e).fuzzy_eq(&f64::consts::log10_e)));\n+        assert!((log10f32(10f32).approx_eq(&1f32)));\n+        assert!((log10f64(f64::consts::e).approx_eq(&f64::consts::log10_e)));\n \n-        assert!((log2f32(8f32).fuzzy_eq(&3f32)));\n-        assert!((log2f64(f64::consts::e).fuzzy_eq(&f64::consts::log2_e)));\n+        assert!((log2f32(8f32).approx_eq(&3f32)));\n+        assert!((log2f64(f64::consts::e).approx_eq(&f64::consts::log2_e)));\n \n-        assert!((fmaf32(1.0f32, 2.0f32, 5.0f32).fuzzy_eq(&7.0f32)));\n-        assert!((fmaf64(0.0f64, -2.0f64, f64::consts::e).fuzzy_eq(&f64::consts::e)));\n+        assert!((fmaf32(1.0f32, 2.0f32, 5.0f32).approx_eq(&7.0f32)));\n+        assert!((fmaf64(0.0f64, -2.0f64, f64::consts::e).approx_eq(&f64::consts::e)));\n \n-        assert!((fabsf32(-1.0f32).fuzzy_eq(&1.0f32)));\n-        assert!((fabsf64(34.2f64).fuzzy_eq(&34.2f64)));\n+        assert!((fabsf32(-1.0f32).approx_eq(&1.0f32)));\n+        assert!((fabsf64(34.2f64).approx_eq(&34.2f64)));\n \n-        assert!((floorf32(3.8f32).fuzzy_eq(&3.0f32)));\n-        assert!((floorf64(-1.1f64).fuzzy_eq(&-2.0f64)));\n+        assert!((floorf32(3.8f32).approx_eq(&3.0f32)));\n+        assert!((floorf64(-1.1f64).approx_eq(&-2.0f64)));\n \n         // Causes linker error\n         // undefined reference to llvm.ceil.f32/64"}, {"sha": "5179d13813cea4cddb23810b0ceb981f49827b2f", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -14,11 +14,10 @@ extern mod std;\n \n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n-use std::cmp::FuzzyEq;\n \n pub trait NumExt: Num + NumCast + Eq + Ord {}\n \n-pub trait FloatExt: NumExt + FuzzyEq<Self> {}\n+pub trait FloatExt: NumExt + ApproxEq<Self> {}\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool { *n > from(1) }\n fn greater_than_one_float<T:FloatExt>(n: &T) -> bool { *n > from(1) }"}, {"sha": "f7edd2855a4cde5a208faebc32fc7efbcacf2b0b", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02118330084539fdc87533d46aabeef2257ee835/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=02118330084539fdc87533d46aabeef2257ee835", "patch": "@@ -16,7 +16,6 @@ extern mod std;\n \n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n-use std::cmp::FuzzyEq;\n \n pub trait TypeExt {}\n \n@@ -94,7 +93,7 @@ impl IntegerExt for i64 {}\n impl IntegerExt for int {}\n \n \n-pub trait FloatExt: NumExt + FuzzyEq<Self> {}\n+pub trait FloatExt: NumExt + ApproxEq<Self> {}\n \n impl FloatExt for f32 {}\n impl FloatExt for f64 {}"}]}