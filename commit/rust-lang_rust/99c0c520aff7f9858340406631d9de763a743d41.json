{"sha": "99c0c520aff7f9858340406631d9de763a743d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzBjNTIwYWZmN2Y5ODU4MzQwNDA2NjMxZDlkZTc2M2E3NDNkNDE=", "commit": {"author": {"name": "Lucas Morales", "email": "lucas@lucasem.com", "date": "2017-09-23T22:28:08Z"}, "committer": {"name": "Lucas Morales", "email": "lucas@lucasem.com", "date": "2017-09-23T22:28:08Z"}, "message": "docs improvement std::sync::{PoisonError, TryLockError}", "tree": {"sha": "79a1a476bbf3c6731c1b4c5e9f7be621d6c894c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a1a476bbf3c6731c1b4c5e9f7be621d6c894c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c0c520aff7f9858340406631d9de763a743d41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExgMSdpt0+BFsq5IwqzHpWfdVnhkFAlnG3/gACgkQqzHpWfdV\nnhlZjA//eHU/ufudkX5P29Q22ZuV04LN3x6VXnepd0y51J0bCgB6DBbOPVEpkHmu\nondpwaPOMOkjfJ365FtANZ+0v3JXfjR28MG1l2C/FKu6+8an2l+y91M29RMS7dtw\nC/AwPlWQcmPkm6hXeA9pBf3rj3UjezTYi2BVV/l087wMocRarkvGT8N0nGNnbYr1\nfzpDVg7JxoWAw+adubmCFOGgD4BEa6zGPoMuS0v/t3Imcg+/sWAkoSy9vYAxf9jx\nvNro7AHh9OHqXV0LwZvpiXhEK6kZVgjPNB3YG9mpEHEDRyd07CkztlL3nebPBqvX\nGGr7kFZ11egFuhGcTgVbWCu4f6E463R8no0SxomXBLVoQqLqfEYl29LGIO8I1qgs\nyM42/E183r+83xrII4D0RCX52jjPPlng0N99U4Zm01arSPfBiaa8jAA/NtYI8RX+\nYJ/xO7Ai/gt61EEBcz4upl3N6gTfTMMVOMfq4yHAItKSIUAqLTSr8XLBqkU8xdIJ\nT6ij5twujmCuBF1q3Rli8arrnlnNnP02CF7P3BXPDnn7VF8OCiZ+bn01Pg7q2pMB\n+FoXJkqqB7VRSoHjuOxDBVPVyrrYORR58vimPAbJy0wu3rTbUl3g5+dLXeNAioJ2\nJ+xC8Ojty+USEua2NvzBAScM6PWo/tj/FSLHcEu5p4ryJThk3Yw=\n=pT5V\n-----END PGP SIGNATURE-----", "payload": "tree 79a1a476bbf3c6731c1b4c5e9f7be621d6c894c9\nparent a83c3e777145bd2fd127857b3b73d5a174e1f2dd\nauthor Lucas Morales <lucas@lucasem.com> 1506205688 -0400\ncommitter Lucas Morales <lucas@lucasem.com> 1506205688 -0400\n\ndocs improvement std::sync::{PoisonError, TryLockError}\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c0c520aff7f9858340406631d9de763a743d41", "html_url": "https://github.com/rust-lang/rust/commit/99c0c520aff7f9858340406631d9de763a743d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c0c520aff7f9858340406631d9de763a743d41/comments", "author": {"login": "lorepozo", "id": 859306, "node_id": "MDQ6VXNlcjg1OTMwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/859306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorepozo", "html_url": "https://github.com/lorepozo", "followers_url": "https://api.github.com/users/lorepozo/followers", "following_url": "https://api.github.com/users/lorepozo/following{/other_user}", "gists_url": "https://api.github.com/users/lorepozo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorepozo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorepozo/subscriptions", "organizations_url": "https://api.github.com/users/lorepozo/orgs", "repos_url": "https://api.github.com/users/lorepozo/repos", "events_url": "https://api.github.com/users/lorepozo/events{/privacy}", "received_events_url": "https://api.github.com/users/lorepozo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lorepozo", "id": 859306, "node_id": "MDQ6VXNlcjg1OTMwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/859306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorepozo", "html_url": "https://github.com/lorepozo", "followers_url": "https://api.github.com/users/lorepozo/followers", "following_url": "https://api.github.com/users/lorepozo/following{/other_user}", "gists_url": "https://api.github.com/users/lorepozo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorepozo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorepozo/subscriptions", "organizations_url": "https://api.github.com/users/lorepozo/orgs", "repos_url": "https://api.github.com/users/lorepozo/repos", "events_url": "https://api.github.com/users/lorepozo/events{/privacy}", "received_events_url": "https://api.github.com/users/lorepozo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83c3e777145bd2fd127857b3b73d5a174e1f2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83c3e777145bd2fd127857b3b73d5a174e1f2dd", "html_url": "https://github.com/rust-lang/rust/commit/a83c3e777145bd2fd127857b3b73d5a174e1f2dd"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "934ac3edbf1f18538481577ae91501f567cd8ab4", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/99c0c520aff7f9858340406631d9de763a743d41/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c0c520aff7f9858340406631d9de763a743d41/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=99c0c520aff7f9858340406631d9de763a743d41", "patch": "@@ -65,17 +65,48 @@ pub struct Guard {\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n ///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::{Arc, Mutex};\n+/// use std::thread;\n+///\n+/// let mutex = Arc::new(Mutex::new(1));\n+///\n+/// // poison the mutex\n+/// let c_mutex = mutex.clone();\n+/// let _ = thread::spawn(move || {\n+///     let mut data = c_mutex.lock().unwrap();\n+///     *data = 2;\n+///     panic!();\n+/// }).join();\n+///\n+/// match mutex.lock() {\n+///     Ok(_) => unreachable!(),\n+///     Err(p_err) => {\n+///         let data = p_err.get_ref();\n+///         println!(\"recovered: {}\", data);\n+///     }\n+/// };\n+/// ```\n+///\n /// [`Mutex`]: ../../std/sync/struct.Mutex.html\n /// [`RwLock`]: ../../std/sync/struct.RwLock.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n }\n \n-/// An enumeration of possible errors which can occur while calling the\n-/// [`try_lock`] method.\n+/// An enumeration of possible errors associated with a [`TryLockResult`] which\n+/// can occur while trying to aquire a lock, from the [`try_lock`] method on a\n+/// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n+/// [`Mutex`]: struct.Mutex.html\n+/// [`RwLock`]: struct.RwLock.html\n+/// [`TryLockResult`]: type.TryLockResult.html\n /// [`try_lock`]: struct.Mutex.html#method.try_lock\n+/// [`try_read`]: struct.RwLock.html#method.try_read\n+/// [`try_write`]: struct.RwLock.html#method.try_write\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n@@ -148,6 +179,28 @@ impl<T> PoisonError<T> {\n \n     /// Consumes this error indicating that a lock is poisoned, returning the\n     /// underlying guard to allow access regardless.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(HashSet::new()));\n+    ///\n+    /// // poison the mutex\n+    /// let c_mutex = mutex.clone();\n+    /// let _ = thread::spawn(move || {\n+    ///     let mut data = c_mutex.lock().unwrap();\n+    ///     data.insert(10);\n+    ///     panic!();\n+    /// }).join();\n+    ///\n+    /// let p_err = mutex.lock().unwrap_err();\n+    /// let data = p_err.into_inner();\n+    /// println!(\"recovered {} items\", data.len());\n+    /// ```\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn into_inner(self) -> T { self.guard }\n "}]}