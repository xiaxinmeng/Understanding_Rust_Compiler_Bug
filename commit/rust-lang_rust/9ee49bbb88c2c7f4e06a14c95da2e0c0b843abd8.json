{"sha": "9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTQ5YmJiODhjMmM3ZjRlMDZhMTRjOTVkYTJlMGMwYjg0M2FiZDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T02:47:21Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T04:54:51Z"}, "message": "Rollup merge of #55016 - oli-obk:vtables\ud83d\udca5_vtables_everywhere, r=RalfJung\n\nDeduplicate some code and compile-time values around vtables\n\nr? @RalfJung", "tree": {"sha": "f1c4dfbee148aea412f0ed6d32cede9afa268172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c4dfbee148aea412f0ed6d32cede9afa268172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvIEhsACgkQ/vbIBR0O\nATxWqA//ebKaOPDJgHXvry6SdHD2ys9fJIcA4gZz0PM0kACu0gdXNOT2+ovNN84S\ndp6SsU7RI8O9cdiQ2b+tVnmbbVVyCloZXNRlYWqFL2XMra7l1hV7rd0vbKLj121G\nbeAgGUdKciBARy5LRDVPcUdujDacDBVPmy7MlTVKXrPXSc8qCHXl9iEMOAU9CUTS\npWhWb5dF8SL4yXipsDRYD+2KjE1oJ7dhKBgoxCZGqX9tPjznYdJ9s+l2U5T78Slf\nsIiXPIFgziIywj+EOOFkxf6ctN3ZhobxKoGOnQavQcZxrVfpprZ1/sjLhss2+2wW\ngAFyOSrNMfWJBVEepk36b0DPmD+29pHgR13IQhU3Qeq452w5xm5KP8/GgUkIVugm\nUouVtPPi2fAjoQpn4z42oIdZmgDkU0Z3Wd8gqomALsn4g4b5/Z4k2iOxGXa1yFNE\nKWdK/h6Jqaq8VxnJK/ZYIWf4z+4xn4BOO+B7uYunbjap6g/PMTcM0urANSAlkQgX\nLo+i7iFwO33UCP/Y4bgRMfoLsf5p/myQcSnbR3hAR0dDWfko7FoTrIsp6Rf2t4ji\n95pzXH4clJUCN9FYV4yfwOQpzqxnzZ3+zAyhWdum0vh2whet3Om0SjWR7NmExXsA\nG7jTCpaTRXSWzNrzySAJxH2cqX78uC6ZMIoUkQyErh1dZgX3PjY=\n=1QtP\n-----END PGP SIGNATURE-----", "payload": "tree f1c4dfbee148aea412f0ed6d32cede9afa268172\nparent 43ac030d7e6848bf06298153471567525618f955\nparent b1d3111ba2f4c7d318632c330b4356fec52b4055\nauthor kennytm <kennytm@gmail.com> 1539830841 +0800\ncommitter kennytm <kennytm@gmail.com> 1539838491 +0800\n\nRollup merge of #55016 - oli-obk:vtables\ud83d\udca5_vtables_everywhere, r=RalfJung\n\nDeduplicate some code and compile-time values around vtables\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "html_url": "https://github.com/rust-lang/rust/commit/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ac030d7e6848bf06298153471567525618f955", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ac030d7e6848bf06298153471567525618f955", "html_url": "https://github.com/rust-lang/rust/commit/43ac030d7e6848bf06298153471567525618f955"}, {"sha": "b1d3111ba2f4c7d318632c330b4356fec52b4055", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d3111ba2f4c7d318632c330b4356fec52b4055", "html_url": "https://github.com/rust-lang/rust/commit/b1d3111ba2f4c7d318632c330b4356fec52b4055"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "14e4ddfcdd6361af1cebe7a8e0eb544da1a8cf52", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "patch": "@@ -369,16 +369,16 @@ define_queries! { <'tcx>\n             -> Lrc<specialization_graph::Graph>,\n         [] fn is_object_safe: ObjectSafety(DefId) -> bool,\n \n-        // Get the ParameterEnvironment for a given item; this environment\n-        // will be in \"user-facing\" mode, meaning that it is suitabe for\n-        // type-checking etc, and it does not normalize specializable\n-        // associated types. This is almost always what you want,\n-        // unless you are doing MIR optimizations, in which case you\n-        // might want to use `reveal_all()` method to change modes.\n+        /// Get the ParameterEnvironment for a given item; this environment\n+        /// will be in \"user-facing\" mode, meaning that it is suitabe for\n+        /// type-checking etc, and it does not normalize specializable\n+        /// associated types. This is almost always what you want,\n+        /// unless you are doing MIR optimizations, in which case you\n+        /// might want to use `reveal_all()` method to change modes.\n         [] fn param_env: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n-        // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n-        // `ty.is_copy()`, etc, since that will prune the environment where possible.\n+        /// Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n+        /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n         [] fn is_copy_raw: is_copy_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n         [] fn is_sized_raw: is_sized_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n         [] fn is_freeze_raw: is_freeze_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,"}, {"sha": "29c2e71960c2cdc9d5da061ff7a0f89f0147f8da", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "patch": "@@ -94,6 +94,10 @@ pub fn get_vtable(\n     });\n \n     let (size, align) = cx.size_and_align_of(ty);\n+    // /////////////////////////////////////////////////////////////////////////////////////////////\n+    // If you touch this code, be sure to also make the corresponding changes to\n+    // `get_vtable` in rust_mir/interpret/traits.rs\n+    // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n         callee::get_fn(cx, monomorphize::resolve_drop_in_place(cx.tcx, ty)),\n         C_usize(cx, size.bytes()),"}, {"sha": "f5e824b7628887724b86c80d240cc226f0da2e64", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "patch": "@@ -327,12 +327,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n             (_, &ty::Dynamic(ref data, _)) => {\n                 // Initial cast from sized to dyn trait\n-                let trait_ref = data.principal().with_self_ty(\n-                    *self.tcx,\n-                    src_pointee_ty,\n-                );\n-                let trait_ref = self.tcx.erase_regions(&trait_ref);\n-                let vtable = self.get_vtable(src_pointee_ty, trait_ref)?;\n+                let vtable = self.get_vtable(src_pointee_ty, data.principal())?;\n                 let ptr = self.read_value(src)?.to_scalar_ptr()?;\n                 let val = Value::new_dyn_trait(ptr, vtable);\n                 self.write_value(val, dest)"}, {"sha": "cf5358a9896720365448dc3b7f741eb56c608926", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "patch": "@@ -27,6 +27,7 @@ use rustc::mir::interpret::{\n     EvalResult, EvalErrorKind,\n     truncate, sign_extend,\n };\n+use rustc_data_structures::fx::FxHashMap;\n \n use syntax::source_map::{self, Span};\n \n@@ -50,6 +51,9 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n \n     /// The virtual call stack.\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag>>,\n+\n+    /// A cache for deduplicating vtables\n+    pub(super) vtables: FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), AllocId>,\n }\n \n /// A stack frame.\n@@ -209,6 +213,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             param_env,\n             memory: Memory::new(tcx, memory_data),\n             stack: Vec::new(),\n+            vtables: FxHashMap::default(),\n         }\n     }\n "}, {"sha": "2b0febc1ce717eb507740c88029c639dc9adc97c", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=9ee49bbb88c2c7f4e06a14c95da2e0c0b843abd8", "patch": "@@ -24,20 +24,32 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     pub fn get_vtable(\n         &mut self,\n         ty: Ty<'tcx>,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        poly_trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n     ) -> EvalResult<'tcx, Pointer<M::PointerTag>> {\n-        debug!(\"get_vtable(trait_ref={:?})\", trait_ref);\n+        debug!(\"get_vtable(trait_ref={:?})\", poly_trait_ref);\n \n-        // FIXME: Cache this!\n+        let (ty, poly_trait_ref) = self.tcx.erase_regions(&(ty, poly_trait_ref));\n \n-        let layout = self.layout_of(trait_ref.self_ty())?;\n+        if let Some(&vtable) = self.vtables.get(&(ty, poly_trait_ref)) {\n+            return Ok(Pointer::from(vtable).with_default_tag());\n+        }\n+\n+        let trait_ref = poly_trait_ref.with_self_ty(*self.tcx, ty);\n+        let trait_ref = self.tcx.erase_regions(&trait_ref);\n+\n+        let methods = self.tcx.vtable_methods(trait_ref);\n+\n+        let layout = self.layout_of(ty)?;\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n         let size = layout.size.bytes();\n         let align = layout.align.abi();\n \n         let ptr_size = self.pointer_size();\n         let ptr_align = self.tcx.data_layout.pointer_align;\n-        let methods = self.tcx.vtable_methods(trait_ref);\n+        // /////////////////////////////////////////////////////////////////////////////////////////\n+        // If you touch this code, be sure to also make the corresponding changes to\n+        // `get_vtable` in rust_codegen_llvm/meth.rs\n+        // /////////////////////////////////////////////////////////////////////////////////////////\n         let vtable = self.memory.allocate(\n             ptr_size * (3 + methods.len() as u64),\n             ptr_align,\n@@ -64,6 +76,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         }\n \n         self.memory.mark_immutable(vtable.alloc_id)?;\n+        assert!(self.vtables.insert((ty, poly_trait_ref), vtable.alloc_id).is_none());\n \n         Ok(vtable)\n     }"}]}