{"sha": "d1c9b160adf5f13bca690e114f254b5353fe798d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYzliMTYwYWRmNWYxM2JjYTY5MGUxMTRmMjU0YjUzNTNmZTc5OGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-15T15:57:37Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-17T01:30:56Z"}, "message": "core: slim down str.rs by importing some and none.", "tree": {"sha": "cbf658be649d1771b0103df111e3e079db07b943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbf658be649d1771b0103df111e3e079db07b943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c9b160adf5f13bca690e114f254b5353fe798d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c9b160adf5f13bca690e114f254b5353fe798d", "html_url": "https://github.com/rust-lang/rust/commit/d1c9b160adf5f13bca690e114f254b5353fe798d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c9b160adf5f13bca690e114f254b5353fe798d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75503570c79d461ccb6e4ef0a9ad872a77ba60c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/75503570c79d461ccb6e4ef0a9ad872a77ba60c4", "html_url": "https://github.com/rust-lang/rust/commit/75503570c79d461ccb6e4ef0a9ad872a77ba60c4"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "580e776355efd8ba6c16fbbc4012b01b3f21e4cb", "filename": "src/libcore/str.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d1c9b160adf5f13bca690e114f254b5353fe798d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c9b160adf5f13bca690e114f254b5353fe798d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d1c9b160adf5f13bca690e114f254b5353fe798d", "patch": "@@ -9,6 +9,8 @@ for correctness, but some UTF-8 unsafe functions are also provided.\n For some heavy-duty uses, we recommend trying std::rope.\n */\n \n+import option::{some, none};\n+\n export\n    // Creating a string\n    from_bytes,\n@@ -665,8 +667,8 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n     } else {\n         let idx;\n         alt find_bytes(s, from) {\n-            option::some(x) { idx = x; }\n-            option::none { ret s; }\n+            some(x) { idx = x; }\n+            none { ret s; }\n         }\n         let before = unsafe::slice_bytes(s, 0u, idx as uint);\n         let after  = unsafe::slice_bytes(s, idx as uint + len_bytes(from),\n@@ -842,15 +844,15 @@ fn index(ss: str, cc: char) -> option<uint> {\n \n         // found here?\n         if ch == cc {\n-            ret option::some(cii);\n+            ret some(cii);\n         }\n \n         cii += 1u;\n         bii = next;\n     }\n \n     // wasn't found\n-    ret option::none;\n+    ret none;\n }\n \n // Function: byte_index\n@@ -880,12 +882,12 @@ fn rindex(ss: str, cc: char) -> option<uint> {\n \n         // found here?\n         if ch == cc {\n-            ret option::some(cii);\n+            ret some(cii);\n         }\n     }\n \n     // wasn't found\n-    ret option::none;\n+    ret none;\n }\n \n //Function: find_bytes\n@@ -898,8 +900,8 @@ fn find_bytes(haystack: str, needle: str) -> option<uint> {\n     let haystack_len = len_bytes(haystack);\n     let needle_len   = len_bytes(needle);\n \n-    if needle_len == 0u { ret option::some(0u); }\n-    if needle_len > haystack_len { ret option::none; }\n+    if needle_len == 0u { ret some(0u); }\n+    if needle_len > haystack_len { ret none; }\n \n     fn match_at(haystack: str, needle: str, ii: uint) -> bool {\n         let jj = ii;\n@@ -909,11 +911,11 @@ fn find_bytes(haystack: str, needle: str) -> option<uint> {\n \n     let ii = 0u;\n     while ii <= haystack_len - needle_len {\n-        if match_at(haystack, needle, ii) { ret option::some(ii); }\n+        if match_at(haystack, needle, ii) { ret some(ii); }\n         ii += 1u;\n     }\n \n-    ret option::none;\n+    ret none;\n }\n \n // Function: find\n@@ -922,8 +924,8 @@ fn find_bytes(haystack: str, needle: str) -> option<uint> {\n // within another, or return option::none\n fn find(haystack: str, needle: str) -> option<uint> {\n    alt find_bytes(haystack, needle) {\n-      option::none { ret option::none; }\n-      option::some(nn) { ret option::some(b2c_pos(haystack, nn)); }\n+      none { ret none; }\n+      some(nn) { ret some(b2c_pos(haystack, nn)); }\n    }\n }\n \n@@ -1522,18 +1524,18 @@ mod tests {\n \n     #[test]\n     fn test_index() {\n-        assert ( index(\"hello\", 'h') == option::some(0u));\n-        assert ( index(\"hello\", 'e') == option::some(1u));\n-        assert ( index(\"hello\", 'o') == option::some(4u));\n-        assert ( index(\"hello\", 'z') == option::none);\n+        assert ( index(\"hello\", 'h') == some(0u));\n+        assert ( index(\"hello\", 'e') == some(1u));\n+        assert ( index(\"hello\", 'o') == some(4u));\n+        assert ( index(\"hello\", 'z') == none);\n     }\n \n     #[test]\n     fn test_rindex() {\n-        assert (rindex(\"hello\", 'l') == option::some(3u));\n-        assert (rindex(\"hello\", 'o') == option::some(4u));\n-        assert (rindex(\"hello\", 'h') == option::some(0u));\n-        assert (rindex(\"hello\", 'z') == option::none);\n+        assert (rindex(\"hello\", 'l') == some(3u));\n+        assert (rindex(\"hello\", 'o') == some(4u));\n+        assert (rindex(\"hello\", 'h') == some(0u));\n+        assert (rindex(\"hello\", 'z') == none);\n     }\n \n     #[test]\n@@ -1737,29 +1739,29 @@ mod tests {\n     #[test]\n     fn test_find_bytes() {\n         // byte positions\n-        assert (find_bytes(\"banana\", \"apple pie\") == option::none);\n-        assert (find_bytes(\"\", \"\") == option::some(0u));\n+        assert (find_bytes(\"banana\", \"apple pie\") == none);\n+        assert (find_bytes(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find_bytes(data, \"\")     == option::some(0u));\n-        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some( 0u));\n-        assert (find_bytes(data, \"\u0e30\u0e40\")   == option::some( 6u));\n-        assert (find_bytes(data, \"\u4e2d\u534e\") == option::some(27u));\n-        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == option::none);\n+        assert (find_bytes(data, \"\")     == some(0u));\n+        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some( 0u));\n+        assert (find_bytes(data, \"\u0e30\u0e40\")   == some( 6u));\n+        assert (find_bytes(data, \"\u4e2d\u534e\") == some(27u));\n+        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n     #[test]\n     fn test_find() {\n         // char positions\n-        assert (find(\"banana\", \"apple pie\") == option::none);\n-        assert (find(\"\", \"\") == option::some(0u));\n+        assert (find(\"banana\", \"apple pie\") == none);\n+        assert (find(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find(data, \"\")     == option::some(0u));\n-        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));\n-        assert (find(data, \"\u0e30\u0e40\")   == option::some(2u));\n-        assert (find(data, \"\u4e2d\u534e\") == option::some(9u));\n-        assert (find(data, \"\u0e44\u0e17\u534e\") == option::none);\n+        assert (find(data, \"\")     == some(0u));\n+        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some(0u));\n+        assert (find(data, \"\u0e30\u0e40\")   == some(2u));\n+        assert (find(data, \"\u4e2d\u534e\") == some(9u));\n+        assert (find(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n     #[test]"}]}