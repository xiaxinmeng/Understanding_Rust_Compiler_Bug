{"sha": "e9035f7bef47c21b575af517dce309d96df4eb51", "node_id": "C_kwDOAAsO6NoAKGU5MDM1ZjdiZWY0N2MyMWI1NzVhZjUxN2RjZTMwOWQ5NmRmNGViNTE", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-01-20T16:06:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-03-03T19:38:50Z"}, "message": "refactor: prepare to associate multiple spans with a module.", "tree": {"sha": "80f987621f14399c7966823d918f29fd767428bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f987621f14399c7966823d918f29fd767428bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9035f7bef47c21b575af517dce309d96df4eb51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9035f7bef47c21b575af517dce309d96df4eb51", "html_url": "https://github.com/rust-lang/rust/commit/e9035f7bef47c21b575af517dce309d96df4eb51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9035f7bef47c21b575af517dce309d96df4eb51/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45660949132222ba7ec0905649b2affd68e0e13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45660949132222ba7ec0905649b2affd68e0e13c", "html_url": "https://github.com/rust-lang/rust/commit/45660949132222ba7ec0905649b2affd68e0e13c"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "517d16cd5262d3bfbd46233e20c43b9ad61dcbb0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -2317,11 +2317,24 @@ pub enum ModKind {\n     /// or with definition outlined to a separate file `mod foo;` and already loaded from it.\n     /// The inner span is from the first token past `{` to the last token until `}`,\n     /// or from the first to the last token in the loaded file.\n-    Loaded(Vec<P<Item>>, Inline, Span),\n+    Loaded(Vec<P<Item>>, Inline, ModSpans),\n     /// Module with definition outlined to a separate file `mod foo;` but not yet loaded from it.\n     Unloaded,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct ModSpans {\n+    /// `inner_span` covers the body of the module; for a file module, its the whole file.\n+    /// For an inline module, its the span inside the `{ ... }`, not including the curly braces.\n+    pub inner_span: Span,\n+}\n+\n+impl Default for ModSpans {\n+    fn default() -> ModSpans {\n+        ModSpans { inner_span: Default::default() }\n+    }\n+}\n+\n /// Foreign module declaration.\n ///\n /// E.g., `extern { .. }` or `extern \"C\" { .. }`."}, {"sha": "8bc3afc500a48818776387f8bbca2e8cad2942dc", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -1009,7 +1009,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         ItemKind::Mod(unsafety, mod_kind) => {\n             visit_unsafety(unsafety, vis);\n             match mod_kind {\n-                ModKind::Loaded(items, _inline, inner_span) => {\n+                ModKind::Loaded(items, _inline, ModSpans { inner_span }) => {\n                     vis.visit_span(inner_span);\n                     items.flat_map_in_place(|item| vis.flat_map_item(item));\n                 }"}, {"sha": "aee117e554f17f9a70080f736f53b9c2e255cff1", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -263,7 +263,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(_, ref mod_kind) => match mod_kind {\n-                ModKind::Loaded(items, _, inner_span) => {\n+                ModKind::Loaded(items, _, ModSpans { inner_span }) => {\n                     hir::ItemKind::Mod(self.lower_mod(items, *inner_span))\n                 }\n                 ModKind::Unloaded => panic!(\"`mod` items should have been loaded by now\"),"}, {"sha": "a489b23bad8231cdd7c27dbc6353c9c284631abc", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -129,7 +129,9 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n \n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n-        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., span)) = item.kind {\n+        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., ast::ModSpans { inner_span: span })) =\n+            item.kind\n+        {\n             let prev_tests = mem::take(&mut self.tests);\n             noop_visit_item_kind(&mut item.kind, self);\n             self.add_test_cases(item.id, span, prev_tests);"}, {"sha": "dc4d4e90cd2338cb0611eb59084fa144174ed625", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -12,8 +12,8 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{AssocItemKind, AstLike, AstLikeWrapper, AttrStyle, ExprKind, ForeignItemKind};\n-use rustc_ast::{Inline, ItemKind, MacArgs, MacStmtStyle, MetaItemKind, ModKind, NestedMetaItem};\n-use rustc_ast::{NodeId, PatKind, StmtKind, TyKind};\n+use rustc_ast::{Inline, ItemKind, MacArgs, MacStmtStyle, MetaItemKind, ModKind, ModSpans};\n+use rustc_ast::{NestedMetaItem, NodeId, PatKind, StmtKind, TyKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -1112,7 +1112,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n                     );\n                 }\n \n-                *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);\n+                *mod_kind = ModKind::Loaded(items, Inline::No, ModSpans { inner_span });\n                 node.attrs = attrs;\n                 if node.attrs.len() > old_attrs_len {\n                     // If we loaded an out-of-line module and added some inner attributes,"}, {"sha": "a584c69fa708c22027bb6e4bb260fc907c554495", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -1,6 +1,6 @@\n use crate::base::ModuleData;\n use rustc_ast::ptr::P;\n-use rustc_ast::{token, Attribute, Inline, Item};\n+use rustc_ast::{token, Attribute, Inline, Item, ModSpans};\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_parse::new_parser_from_file;\n use rustc_parse::validate_attr;\n@@ -69,7 +69,7 @@ crate fn parse_external_mod(\n         (items, inner_span, mp.file_path)\n     };\n     // (1) ...instead, we return a dummy module.\n-    let (items, inner_span, file_path) =\n+    let (items, ModSpans { inner_span }, file_path) =\n         result.map_err(|err| err.report(sess, span)).unwrap_or_default();\n \n     // Extract the directory path for submodules of the module."}, {"sha": "aa0d8d68748726916aac8df3717ed37a1ac53947", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -26,7 +26,8 @@ use tracing::debug;\n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n-        let (attrs, items, span) = self.parse_mod(&token::Eof)?;\n+        let (attrs, items, spans) = self.parse_mod(&token::Eof)?;\n+        let span = spans.inner_span;\n         Ok(ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false })\n     }\n \n@@ -51,7 +52,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_mod(\n         &mut self,\n         term: &TokenKind,\n-    ) -> PResult<'a, (Vec<Attribute>, Vec<P<Item>>, Span)> {\n+    ) -> PResult<'a, (Vec<Attribute>, Vec<P<Item>>, ModSpans)> {\n         let lo = self.token.span;\n         let attrs = self.parse_inner_attributes()?;\n \n@@ -71,7 +72,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok((attrs, items, lo.to(self.prev_token.span)))\n+        Ok((attrs, items, ModSpans { inner_span: lo.to(self.prev_token.span) }))\n     }\n }\n "}, {"sha": "3b4e762b6dd158c0516ece2f00fb501e3ffca1b8", "filename": "src/tools/rustfmt/src/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -113,7 +113,7 @@ impl<'a> Parser<'a> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n-                Ok(result) => Some(result),\n+                Ok((a, i, ast::ModSpans { inner_span })) => Some((a, i, inner_span)),\n                 Err(mut e) => {\n                     e.emit();\n                     if sess.can_reset_errors() {"}, {"sha": "57a58c6048466d2e56c17f6016c48f23b575494c", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9035f7bef47c21b575af517dce309d96df4eb51/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9035f7bef47c21b575af517dce309d96df4eb51/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=e9035f7bef47c21b575af517dce309d96df4eb51", "patch": "@@ -915,7 +915,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let ident_str = rewrite_ident(&self.get_context(), ident).to_owned();\n         self.push_str(&ident_str);\n \n-        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, inner_span) = mod_kind {\n+        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, ast::ModSpans{ inner_span }) = mod_kind {\n             match self.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => {\n                     let indent_str = self.block_indent.to_string_with_newline(self.config);"}]}