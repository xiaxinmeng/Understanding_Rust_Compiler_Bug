{"sha": "b6844489f9dc3ca7aa23c3111a4576099919d65f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODQ0NDg5ZjlkYzNjYTdhYTIzYzMxMTFhNDU3NjA5OTkxOWQ2NWY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-17T22:28:12Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-17T23:04:13Z"}, "message": "Emit a better diagnostic when function actually has a 'self' parameter\n\nFixes #66898\n\nWhen we are unable to resolve a reference to `self`, we current assume\nthat the containing function doesn't have a `self` parameter, and\nemit an error message accordingly.\n\nHowever, if the reference to `self` was created by a macro invocation,\nthen resolution will correctly fail, due to hygiene. In this case, we\ndon't want to tell the user that the containing fuction doesn't have a\n'self' paramter if it actually has one.\n\nThis PR checks for the precense of a 'self' parameter, and adjusts the\nerror message we emit accordingly.\n\nTODO: The exact error message we emit could probably be improved. Should\nwe explicitly mention hygiene?", "tree": {"sha": "7a59d3dc84ac41af5b759a0b0da68078104d307c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a59d3dc84ac41af5b759a0b0da68078104d307c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6844489f9dc3ca7aa23c3111a4576099919d65f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7Bwu4ACgkQtAh+UQ6Y\nsWTJ6RAAkrUN6jWATxlgP0OodAEnA5CHqPHAlfN+G9jng0WZszoiJw9TNPv1h6/i\nri6UPacz06LRKplGMasThDJkOXDzU71x31BbMjJg1S2Pw38CQrv0TgR6YwNmbGKt\nipISKhTlMu+kRO505ohd3NDECMggyOEhEyN3xweJgzDRkbrjODUeSTSgsPlWlPsi\nKtt2k8pouFmAx2WyOSL7UjRZq+5y88/hSC894jLMCrug+WibkIQ5RXr3sGpeAVAO\navrsKnFtOKWl6e9XrDYN3+X/qW+5xLA2P8TpFmGeuXTiYpgxhMUFo2eXTTP7CEeA\n0DOCIG8lr+yiNyxc7KqRm6OoCnAe7rjP/Jh+JJ5/cY05tmXCp8HtGL0CY4XpQtHd\nqlrwV6w+xUTqj8nFm1wzfiPocKHoFUcQXQ5+Vv2KOrpWNc++qjNNv77syzEbYFOq\npu4a6tcu4Bkm+TlAQDdF2mIrzptacyBqPGG6QPfH4hovjEoGY9BK+3YFZm17gZuD\nDnpfa5Eml/62vJXHBu9LWW4JX2YuRcCn1CdIOjnV+ytZ18hCikArfTCrfqTzh3Gw\nwvBE2HRCf9U2C6NlTUDj3HlXCp7d6Ioi9NYxdD9Vwgvcf/bkcprGlCl85hAXf1Cf\ncQk4zTydd3sCuHkW+0sLjAK9rooGeaX171PTlYDLQI3Q8rRK2nE=\n=lK4o\n-----END PGP SIGNATURE-----", "payload": "tree 7a59d3dc84ac41af5b759a0b0da68078104d307c\nparent d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df\nauthor Aaron Hill <aa1ronham@gmail.com> 1589754492 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1589756653 -0400\n\nEmit a better diagnostic when function actually has a 'self' parameter\n\nFixes #66898\n\nWhen we are unable to resolve a reference to `self`, we current assume\nthat the containing function doesn't have a `self` parameter, and\nemit an error message accordingly.\n\nHowever, if the reference to `self` was created by a macro invocation,\nthen resolution will correctly fail, due to hygiene. In this case, we\ndon't want to tell the user that the containing fuction doesn't have a\n'self' paramter if it actually has one.\n\nThis PR checks for the precense of a 'self' parameter, and adjusts the\nerror message we emit accordingly.\n\nTODO: The exact error message we emit could probably be improved. Should\nwe explicitly mention hygiene?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6844489f9dc3ca7aa23c3111a4576099919d65f", "html_url": "https://github.com/rust-lang/rust/commit/b6844489f9dc3ca7aa23c3111a4576099919d65f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6844489f9dc3ca7aa23c3111a4576099919d65f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df", "html_url": "https://github.com/rust-lang/rust/commit/d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "477e3be5cc2f89df6b8cc39cef04a1436da592df", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b6844489f9dc3ca7aa23c3111a4576099919d65f", "patch": "@@ -347,7 +347,7 @@ struct DiagnosticMetadata<'ast> {\n     currently_processing_generics: bool,\n \n     /// The current enclosing function (used for better errors).\n-    current_function: Option<Span>,\n+    current_function: Option<(FnKind<'ast>, Span)>,\n \n     /// A list of labels as of yet unused. Labels will be removed from this map when\n     /// they are used (in a `break` or `continue` statement)\n@@ -466,7 +466,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             FnKind::Fn(FnCtxt::Free | FnCtxt::Foreign, ..) => FnItemRibKind,\n             FnKind::Fn(FnCtxt::Assoc(_), ..) | FnKind::Closure(..) => NormalRibKind,\n         };\n-        let previous_value = replace(&mut self.diagnostic_metadata.current_function, Some(sp));\n+        let previous_value =\n+            replace(&mut self.diagnostic_metadata.current_function, Some((fn_kind, sp)));\n         debug!(\"(resolving function) entering function\");\n         let declaration = fn_kind.decl();\n "}, {"sha": "b1a1f8725a1801024674d10a4c247696b226a1be", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=b6844489f9dc3ca7aa23c3111a4576099919d65f", "patch": "@@ -195,8 +195,15 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 _ => \"`self` value is a keyword only available in methods with a `self` parameter\"\n                      .to_string(),\n             });\n-            if let Some(span) = &self.diagnostic_metadata.current_function {\n-                err.span_label(*span, \"this function doesn't have a `self` parameter\");\n+            if let Some((fn_kind, span)) = &self.diagnostic_metadata.current_function {\n+                // The current function has a `self' parameter, but we were unable to resolve\n+                // a reference to `self`. This can only happen if the `self` identifier we\n+                // are resolving came from a different hygiene context.\n+                if fn_kind.decl().inputs.get(0).map(|p| p.is_self()).unwrap_or(false) {\n+                    err.span_label(*span, \"this function has a `self` parameter, but a macro invocation can only access identifiers it receives from parameters\");\n+                } else {\n+                    err.span_label(*span, \"this function doesn't have a `self` parameter\");\n+                }\n             }\n             return (err, Vec::new());\n         }"}, {"sha": "f934f793c7f2707b70a0a0fbad20682302a71f76", "filename": "src/test/ui/hygiene/missing-self-diag.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.rs?ref=b6844489f9dc3ca7aa23c3111a4576099919d65f", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for issue #66898\n+// Tests that we don't emit a nonsensical error message\n+// when a macro invocation tries to access `self` from a function\n+// that has a 'self' parameter\n+\n+pub struct Foo;\n+\n+macro_rules! call_bar {\n+    () => {\n+        self.bar(); //~ ERROR expected value\n+    }\n+}\n+\n+impl Foo {\n+    pub fn foo(&self) {\n+        call_bar!();\n+    }\n+\n+    pub fn bar(&self) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "075d6b76bb7b2bf017af7ed88353ed3e7dfc3ce9", "filename": "src/test/ui/hygiene/missing-self-diag.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6844489f9dc3ca7aa23c3111a4576099919d65f/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr?ref=b6844489f9dc3ca7aa23c3111a4576099919d65f", "patch": "@@ -0,0 +1,17 @@\n+error[E0424]: expected value, found module `self`\n+  --> $DIR/missing-self-diag.rs:10:9\n+   |\n+LL |           self.bar();\n+   |           ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+...\n+LL | /     pub fn foo(&self) {\n+LL | |         call_bar!();\n+   | |         ------------ in this macro invocation\n+LL | |     }\n+   | |_____- this function has a `self` parameter, but a macro invocation can only access identifiers it receives from parameters\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0424`."}]}