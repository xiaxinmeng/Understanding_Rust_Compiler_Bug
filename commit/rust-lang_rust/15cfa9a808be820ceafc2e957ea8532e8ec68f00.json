{"sha": "15cfa9a808be820ceafc2e957ea8532e8ec68f00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1Y2ZhOWE4MDhiZTgyMGNlYWZjMmU5NTdlYTg1MzJlOGVjNjhmMDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-30T19:36:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-30T20:08:50Z"}, "message": "Fix a bunch of false-positives in join-lines", "tree": {"sha": "1b6d98928ecc2a12c6385b01f8c2450b2af928bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6d98928ecc2a12c6385b01f8c2450b2af928bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15cfa9a808be820ceafc2e957ea8532e8ec68f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15cfa9a808be820ceafc2e957ea8532e8ec68f00", "html_url": "https://github.com/rust-lang/rust/commit/15cfa9a808be820ceafc2e957ea8532e8ec68f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15cfa9a808be820ceafc2e957ea8532e8ec68f00/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c889694e4d983dfda4956ae083cf9387316669", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c889694e4d983dfda4956ae083cf9387316669", "html_url": "https://github.com/rust-lang/rust/commit/23c889694e4d983dfda4956ae083cf9387316669"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "1a30b2b3ab8721e7f7249e3ded2070ad0d1c9738", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=15cfa9a808be820ceafc2e957ea8532e8ec68f00", "patch": "@@ -57,18 +57,17 @@ pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n             return None;\n         }\n         return Some(expr);\n-    } else {\n-        // Unwrap `{ continue; }`\n-        let (stmt,) = block.statements().next_tuple()?;\n-        if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n-            if has_anything_else(expr_stmt.syntax()) {\n-                return None;\n-            }\n-            let expr = expr_stmt.expr()?;\n-            match expr.syntax().kind() {\n-                CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n-                _ => (),\n-            }\n+    }\n+    // Unwrap `{ continue; }`\n+    let (stmt,) = block.statements().next_tuple()?;\n+    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+        if has_anything_else(expr_stmt.syntax()) {\n+            return None;\n+        }\n+        let expr = expr_stmt.expr()?;\n+        match expr.syntax().kind() {\n+            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+            _ => (),\n         }\n     }\n     None"}, {"sha": "d0def7eaafd091e3301f045a6cf2549abb66461f", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=15cfa9a808be820ceafc2e957ea8532e8ec68f00", "patch": "@@ -131,6 +131,9 @@ fn has_comma_after(node: &SyntaxNode) -> bool {\n fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Option<()> {\n     let block = ast::Block::cast(token.parent())?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n+    if !block_expr.is_standalone() {\n+        return None;\n+    }\n     let expr = extract_trivial_expression(&block_expr)?;\n \n     let block_range = block_expr.syntax().text_range();\n@@ -662,4 +665,67 @@ fn main() {\n         \",\n         )\n     }\n+\n+    #[test]\n+    fn join_lines_mandatory_blocks_block() {\n+        check_join_lines(\n+            r\"\n+<|>fn foo() {\n+    92\n+}\n+        \",\n+            r\"\n+<|>fn foo() { 92\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>if true {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>if true { 92\n+    }\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>loop {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>loop { 92\n+    }\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>unsafe {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>unsafe { 92\n+    }\n+}\n+        \",\n+        );\n+    }\n }"}, {"sha": "ecf74fd3662fdb1f7fd51d6d33a5fe05c1b3ffd1", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=15cfa9a808be820ceafc2e957ea8532e8ec68f00", "patch": "@@ -368,12 +368,15 @@ impl ast::BlockExpr {\n     /// const FOO: () = { stand_alone };\n     /// ```\n     pub fn is_standalone(&self) -> bool {\n+        if self.unsafe_token().is_some() || self.async_token().is_some() {\n+            return false;\n+        }\n         let kind = match self.syntax().parent() {\n             None => return true,\n             Some(it) => it.kind(),\n         };\n         match kind {\n-            FN_DEF | MATCH_ARM | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n+            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n             _ => true,\n         }\n     }"}, {"sha": "d2253d4af2710f89fc18aeee2a803bd9abe1e120", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cfa9a808be820ceafc2e957ea8532e8ec68f00/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=15cfa9a808be820ceafc2e957ea8532e8ec68f00", "patch": "@@ -554,6 +554,7 @@ impl ast::AttrsOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n     pub fn block(&self) -> Option<Block> { support::child(&self.syntax) }\n }\n "}, {"sha": "c14804aad67e5ebee2f6dae244f5db1149aac4a8", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15cfa9a808be820ceafc2e957ea8532e8ec68f00/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cfa9a808be820ceafc2e957ea8532e8ec68f00/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=15cfa9a808be820ceafc2e957ea8532e8ec68f00", "patch": "@@ -451,7 +451,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ContinueExpr: AttrsOwner { T![continue], T![lifetime] }\n         struct BreakExpr: AttrsOwner { T![break], T![lifetime], Expr }\n         struct Label { T![lifetime] }\n-        struct BlockExpr: AttrsOwner { Label, T![unsafe], Block  }\n+        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block  }\n         struct ReturnExpr: AttrsOwner { Expr }\n         struct CallExpr: ArgListOwner { Expr }\n         struct MethodCallExpr: AttrsOwner, ArgListOwner {"}]}