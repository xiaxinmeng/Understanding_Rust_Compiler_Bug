{"sha": "98295f7908549eb7d48c62b0b9c0ccbc0fded540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Mjk1Zjc5MDg1NDllYjdkNDhjNjJiMGI5YzBjY2JjMGZkZWQ1NDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T11:16:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-17T11:16:18Z"}, "message": "Rollup merge of #69956 - matthewjasper:fix-region-flags, r=nikomatsakis\n\nEnsure HAS_FREE_LOCAL_NAMES is set for ReFree\n\nThis fixes a bug introduced by #69469.\nI don't have any ideas on how to reate a regression test for this.", "tree": {"sha": "afba83fafb6ef59e4e1ab84c8121bdff38b02fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afba83fafb6ef59e4e1ab84c8121bdff38b02fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98295f7908549eb7d48c62b0b9c0ccbc0fded540", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecLGCCRBK7hj4Ov3rIwAAdHIIAFj7w5dA7Aa+vSBC2w9Y4OA7\nQeNBG6FumdltOWz/KUA08c591N5Vlyapuo8UkFecriDyYicUfRQ3snmallef2MMd\nhPKJnSfIMh1A/ZfPE4GuviHG0ba3Zz8zWOgMwOEbU9QvMXQDab/o750VmjwNLJxG\nTDWOeaggeMBdPSOo+/2UpwMMwzMgLK1zdvqz8K5B2q2K4Y0Z9IScQa2349IDTUZY\nKAX3kx84RWmtEOkLUIIrIx4QEr0cx8iP3NPXy23veSHI9ZqDPgo6MUMpwYcVkM1K\nCyIsWMuYBfS8DjWbRc/sn4Y6MCoO9tVTeL2C9pJk0U0TH5ADIdjPjgpfRzkEUcc=\n=5YAh\n-----END PGP SIGNATURE-----\n", "payload": "tree afba83fafb6ef59e4e1ab84c8121bdff38b02fff\nparent 7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673\nparent f4eb6ed6b407bcbbd7311a2983ff661b2cd15393\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584443778 +0100\ncommitter GitHub <noreply@github.com> 1584443778 +0100\n\nRollup merge of #69956 - matthewjasper:fix-region-flags, r=nikomatsakis\n\nEnsure HAS_FREE_LOCAL_NAMES is set for ReFree\n\nThis fixes a bug introduced by #69469.\nI don't have any ideas on how to reate a regression test for this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98295f7908549eb7d48c62b0b9c0ccbc0fded540", "html_url": "https://github.com/rust-lang/rust/commit/98295f7908549eb7d48c62b0b9c0ccbc0fded540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98295f7908549eb7d48c62b0b9c0ccbc0fded540/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673", "html_url": "https://github.com/rust-lang/rust/commit/7a7ca8238f3b1b09d18b3e0cc05f44095cfcb673"}, {"sha": "f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "html_url": "https://github.com/rust-lang/rust/commit/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "d622d6fbe2c1f1db0632d3cc41b0fc9f1cd4fad6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98295f7908549eb7d48c62b0b9c0ccbc0fded540/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98295f7908549eb7d48c62b0b9c0ccbc0fded540/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=98295f7908549eb7d48c62b0b9c0ccbc0fded540", "patch": "@@ -554,24 +554,26 @@ bitflags! {\n         /// Does this have [ConstKind::Placeholder]?\n         const HAS_CT_PLACEHOLDER        = 1 << 8;\n \n+        /// `true` if there are \"names\" of regions and so forth\n+        /// that are local to a particular fn/inferctxt\n+        const HAS_FREE_LOCAL_REGIONS    = 1 << 9;\n+\n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n         const HAS_FREE_LOCAL_NAMES      = TypeFlags::HAS_TY_PARAM.bits\n-                                        | TypeFlags::HAS_RE_PARAM.bits\n                                         | TypeFlags::HAS_CT_PARAM.bits\n                                         | TypeFlags::HAS_TY_INFER.bits\n-                                        | TypeFlags::HAS_RE_INFER.bits\n                                         | TypeFlags::HAS_CT_INFER.bits\n                                         | TypeFlags::HAS_TY_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_RE_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits;\n+                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have [Projection] or [UnnormalizedProjection]?\n-        const HAS_TY_PROJECTION         = 1 << 9;\n+        const HAS_TY_PROJECTION         = 1 << 10;\n         /// Does this have [Opaque]?\n-        const HAS_TY_OPAQUE             = 1 << 10;\n+        const HAS_TY_OPAQUE             = 1 << 11;\n         /// Does this have [ConstKind::Unevaluated]?\n-        const HAS_CT_PROJECTION         = 1 << 11;\n+        const HAS_CT_PROJECTION         = 1 << 12;\n \n         /// Could this type be normalized further?\n         const HAS_PROJECTION            = TypeFlags::HAS_TY_PROJECTION.bits\n@@ -580,21 +582,21 @@ bitflags! {\n \n         /// Present if the type belongs in a local type context.\n         /// Set for placeholders and inference variables that are not \"Fresh\".\n-        const KEEP_IN_LOCAL_TCX         = 1 << 12;\n+        const KEEP_IN_LOCAL_TCX         = 1 << 13;\n \n         /// Is an error type reachable?\n-        const HAS_TY_ERR                = 1 << 13;\n+        const HAS_TY_ERR                = 1 << 14;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but [ReLateBound] and [ReErased].\n-        const HAS_FREE_REGIONS          = 1 << 14;\n+        const HAS_FREE_REGIONS          = 1 << 15;\n \n         /// Does this have any [ReLateBound] regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND         = 1 << 15;\n+        const HAS_RE_LATE_BOUND         = 1 << 16;\n \n         /// Does this have any [ReErased] regions?\n-        const HAS_RE_ERASED             = 1 << 16;\n+        const HAS_RE_ERASED             = 1 << 17;\n \n         /// Flags representing the nominal content of a type,\n         /// computed by FlagsComputation. If you add a new nominal\n@@ -608,6 +610,7 @@ bitflags! {\n                                         | TypeFlags::HAS_TY_PLACEHOLDER.bits\n                                         | TypeFlags::HAS_RE_PLACEHOLDER.bits\n                                         | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n                                         | TypeFlags::HAS_TY_PROJECTION.bits\n                                         | TypeFlags::HAS_TY_OPAQUE.bits\n                                         | TypeFlags::HAS_CT_PROJECTION.bits"}, {"sha": "e265a2f8257fb77d50bb3ed29bac88ccad11bdf0", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98295f7908549eb7d48c62b0b9c0ccbc0fded540/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98295f7908549eb7d48c62b0b9c0ccbc0fded540/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=98295f7908549eb7d48c62b0b9c0ccbc0fded540", "patch": "@@ -1743,42 +1743,42 @@ impl RegionKind {\n         }\n     }\n \n-    pub fn keep_in_local_tcx(&self) -> bool {\n-        if let ty::ReVar(..) = self { true } else { false }\n-    }\n-\n     pub fn type_flags(&self) -> TypeFlags {\n         let mut flags = TypeFlags::empty();\n \n-        if self.keep_in_local_tcx() {\n-            flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n-        }\n-\n         match *self {\n             ty::ReVar(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n             }\n-            ty::ReLateBound(..) => {\n-                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n-            }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PARAM;\n             }\n-            ty::ReEmpty(_) | ty::ReStatic | ty::ReFree { .. } | ty::ReScope { .. } => {\n+            ty::ReFree { .. } | ty::ReScope { .. } => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n             }\n-            ty::ReErased => {\n-                flags = flags | TypeFlags::HAS_RE_ERASED;\n+            ty::ReEmpty(_) | ty::ReStatic => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n             ty::ReClosureBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n+            ty::ReLateBound(..) => {\n+                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n+            }\n+            ty::ReErased => {\n+                flags = flags | TypeFlags::HAS_RE_ERASED;\n+            }\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}]}