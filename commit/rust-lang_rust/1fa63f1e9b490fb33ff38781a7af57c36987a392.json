{"sha": "1fa63f1e9b490fb33ff38781a7af57c36987a392", "node_id": "C_kwDOAAsO6NoAKDFmYTYzZjFlOWI0OTBmYjMzZmYzODc4MWE3YWY1N2MzNjk4N2EzOTI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:29:01Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:38:12Z"}, "message": "Resolve clippy::extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/helpers.rs:46:20\n       |\n    46 | fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n       |                    ^^^^\n       |\n       = note: `-D clippy::extra-unused-lifetimes` implied by `-D clippy::all`\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/shims/posix/fs.rs:49:12\n       |\n    49 |     fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n       |            ^^^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/shims/os_str.rs:81:41\n       |\n    81 |         pub fn u16vec_to_osstring<'tcx, 'a>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n       |                                         ^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/thread.rs:72:26\n       |\n    72 |     pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Tag> {\n       |                          ^^^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes", "tree": {"sha": "996e572fc92787b63c424b8c248b1aba97847c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/996e572fc92787b63c424b8c248b1aba97847c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa63f1e9b490fb33ff38781a7af57c36987a392", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmJsaOAACgkQ+boUO5X/\nbYLZDA/+OQgZmrRAl5X+nR75CEdOe44hXLyHsH+QD/4LS1qcVjjnA3kfSrLZfWWW\nyT+6kCAbw1gqBEwMy39jTgJOobnZROcx/Q5KU5EgVA4sGbHsAPl/vRKyhqzM0i9S\nH0zMEiMcZWwQqXdgPEw4ckrqb2Wl0/fZgaML9iPNCmTVcm8PMvP/MqLe7geBqERh\nAkM4avJ8hi9wSdayvIg6Q0nBXOEaqFoX5Ychwr6iRuNK6CkF+hFJ2IdewW1Y8BhS\nyp+7gc5aG7kX/1d1R243+9qDjEDtfXGQ+cF2Q3/cKHt0D6TG0T/pKv3MTmO+icdQ\nQkyZHjEeO3ESji9H262LzNmrz413LlVxkTqwUC+zUId9fezTLHjH32X1To5Y9737\nqXgr9VIMKw9PdbCGLtZW+5VW019AgrqEtRwGkEyHGalN7JQLA8pjp+MjVKsfpcBm\naYn8fIcExUdcz8OQUJKpdStEqpQ8dF3j4lYujFG5sJRkaZjwHRRwxpjfWp6o8bFy\nx+1ctnWyeUC/hkjo2OFjSRZ7ndGSbEmfbFSKFlgTEGNo4TQBGHRckNX+QBoAo711\nu6E0gXHe8YprNxSktHpeBWaMr/9XJ4sJQMy/xyGiJraRoSs0IrfK1yOco0arEi4f\nTmio5PqQaOZaYzBB96qp7Gnspr8urkJAD774GsRqp9KDALY3y3Q=\n=FJql\n-----END PGP SIGNATURE-----", "payload": "tree 996e572fc92787b63c424b8c248b1aba97847c93\nparent 9125cc1c280ca9c13ae341a4cf12eee30c52f76d\nauthor David Tolnay <dtolnay@gmail.com> 1651271341 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1651271892 -0700\n\nResolve clippy::extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/helpers.rs:46:20\n       |\n    46 | fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n       |                    ^^^^\n       |\n       = note: `-D clippy::extra-unused-lifetimes` implied by `-D clippy::all`\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/shims/posix/fs.rs:49:12\n       |\n    49 |     fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n       |            ^^^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/shims/os_str.rs:81:41\n       |\n    81 |         pub fn u16vec_to_osstring<'tcx, 'a>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n       |                                         ^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n    error: this lifetime isn't used in the function definition\n      --> src/thread.rs:72:26\n       |\n    72 |     pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Tag> {\n       |                          ^^^^\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa63f1e9b490fb33ff38781a7af57c36987a392", "html_url": "https://github.com/rust-lang/rust/commit/1fa63f1e9b490fb33ff38781a7af57c36987a392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa63f1e9b490fb33ff38781a7af57c36987a392/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9125cc1c280ca9c13ae341a4cf12eee30c52f76d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9125cc1c280ca9c13ae341a4cf12eee30c52f76d", "html_url": "https://github.com/rust-lang/rust/commit/9125cc1c280ca9c13ae341a4cf12eee30c52f76d"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "a2073066fac0e2c3928d8fb1ec8e0a7a35474663", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1fa63f1e9b490fb33ff38781a7af57c36987a392", "patch": "@@ -43,7 +43,7 @@ const UNIX_IO_ERROR_TABLE: &[(std::io::ErrorKind, &str)] = {\n };\n \n /// Gets an instance for a path.\n-fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n+fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n     tcx.crates(()).iter().find(|&&krate| tcx.crate_name(krate).as_str() == path[0]).and_then(\n         |krate| {\n             let krate = DefId { krate: *krate, index: CRATE_DEF_INDEX };"}, {"sha": "0063753418b833a3a5aa1e8dd3935ca1b3e5d2ce", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1fa63f1e9b490fb33ff38781a7af57c36987a392", "patch": "@@ -14,7 +14,6 @@\n     clippy::collapsible_if,\n     clippy::comparison_chain,\n     clippy::enum_variant_names,\n-    clippy::extra_unused_lifetimes,\n     clippy::field_reassign_with_default,\n     clippy::from_over_into,\n     clippy::if_same_then_else,"}, {"sha": "d6669b21a731a8fde8b7e59d5d964bb7d3881b1e", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=1fa63f1e9b490fb33ff38781a7af57c36987a392", "patch": "@@ -78,7 +78,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Ok(OsString::from_wide(&u16_vec[..]))\n         }\n         #[cfg(not(windows))]\n-        pub fn u16vec_to_osstring<'tcx, 'a>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n+        pub fn u16vec_to_osstring<'tcx>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n             let s = String::from_utf16(&u16_vec[..])\n                 .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-16 string\", u16_vec))?;\n             Ok(s.into())"}, {"sha": "93ca3c80198b41bae9f5b892ce5d273192ffd412", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=1fa63f1e9b490fb33ff38781a7af57c36987a392", "patch": "@@ -46,7 +46,7 @@ trait FileDescriptor: std::fmt::Debug {\n         _communicate_allowed: bool,\n     ) -> InterpResult<'tcx, io::Result<i32>>;\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n }\n \n impl FileDescriptor for FileHandle {\n@@ -107,7 +107,7 @@ impl FileDescriptor for FileHandle {\n         }\n     }\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         let duplicated = self.file.try_clone()?;\n         Ok(Box::new(FileHandle { file: duplicated, writable: self.writable }))\n     }\n@@ -153,7 +153,7 @@ impl FileDescriptor for io::Stdin {\n         throw_unsup_format!(\"stdin cannot be closed\");\n     }\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdin()))\n     }\n }\n@@ -203,7 +203,7 @@ impl FileDescriptor for io::Stdout {\n         throw_unsup_format!(\"stdout cannot be closed\");\n     }\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdout()))\n     }\n }\n@@ -246,7 +246,7 @@ impl FileDescriptor for io::Stderr {\n         throw_unsup_format!(\"stderr cannot be closed\");\n     }\n \n-    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+    fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stderr()))\n     }\n }"}, {"sha": "fc2c9ed779b6c39ee1a69f485c0d4fdeb06554d6", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa63f1e9b490fb33ff38781a7af57c36987a392/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=1fa63f1e9b490fb33ff38781a7af57c36987a392", "patch": "@@ -69,7 +69,7 @@ impl From<u32> for ThreadId {\n }\n \n impl ThreadId {\n-    pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Tag> {\n+    pub fn to_u32_scalar(&self) -> Scalar<Tag> {\n         Scalar::from_u32(u32::try_from(self.0).unwrap())\n     }\n }"}]}