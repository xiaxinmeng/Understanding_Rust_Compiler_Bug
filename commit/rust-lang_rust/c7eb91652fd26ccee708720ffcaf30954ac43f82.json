{"sha": "c7eb91652fd26ccee708720ffcaf30954ac43f82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWI5MTY1MmZkMjZjY2VlNzA4NzIwZmZjYWYzMDk1NGFjNDNmODI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-29T07:53:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-30T17:42:14Z"}, "message": "deduplicate warnings", "tree": {"sha": "3f19269c6f4ff6794a11ec401efa6f5107f0b52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f19269c6f4ff6794a11ec401efa6f5107f0b52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7eb91652fd26ccee708720ffcaf30954ac43f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb91652fd26ccee708720ffcaf30954ac43f82", "html_url": "https://github.com/rust-lang/rust/commit/c7eb91652fd26ccee708720ffcaf30954ac43f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb91652fd26ccee708720ffcaf30954ac43f82/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9273962aef4451e67b72539feb463f74e8e790ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/9273962aef4451e67b72539feb463f74e8e790ac", "html_url": "https://github.com/rust-lang/rust/commit/9273962aef4451e67b72539feb463f74e8e790ac"}], "stats": {"total": 462, "additions": 235, "deletions": 227}, "files": [{"sha": "712f365e72b71e0d158ba7c9292a71fdc62dc451", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -253,7 +253,7 @@ impl Validator<'mir, 'tcx> {\n         let is_unleashable = O::IS_SUPPORTED_IN_MIRI;\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-            self.tcx.sess.span_warn(span, \"skipping const checks\");\n+            self.tcx.sess.span_warn(self.tcx.def_span(self.def_id), \"skipping const checks\");\n             return;\n         }\n "}, {"sha": "4d9a5838071eaf109bd016ffe4d8c8e9ddbaf3a0", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -8,16 +8,16 @@ const fn double_const(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n const X_CONST: fn(usize) -> usize = double_const;\n \n-const fn bar(x: usize) -> usize {\n-    X(x) //~ WARNING skipping const checks\n+const fn bar(x: usize) -> usize { //~ WARNING skipping const checks\n+    X(x)\n }\n \n-const fn bar_const(x: usize) -> usize {\n-    X_CONST(x) //~ WARNING skipping const checks\n+const fn bar_const(x: usize) -> usize { //~ WARNING skipping const checks\n+    X_CONST(x)\n }\n \n-const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n-    x(y) //~ WARNING skipping const checks\n+const fn foo(x: fn(usize) -> usize, y: usize)  -> usize { //~ WARNING skipping const checks\n+    x(y)\n }\n \n fn main() {"}, {"sha": "d129954c775231b81d134449d060e7d995b9754c", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,20 +1,26 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:12:5\n+  --> $DIR/const_fn_ptr.rs:11:1\n    |\n-LL |     X(x)\n-   |     ^^^^\n+LL | / const fn bar(x: usize) -> usize {\n+LL | |     X(x)\n+LL | | }\n+   | |_^\n \n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:16:5\n+  --> $DIR/const_fn_ptr.rs:15:1\n    |\n-LL |     X_CONST(x)\n-   |     ^^^^^^^^^^\n+LL | / const fn bar_const(x: usize) -> usize {\n+LL | |     X_CONST(x)\n+LL | | }\n+   | |_^\n \n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:20:5\n+  --> $DIR/const_fn_ptr.rs:19:1\n    |\n-LL |     x(y)\n-   |     ^^^^\n+LL | / const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+LL | |     x(y)\n+LL | | }\n+   | |_^\n \n warning: 3 warnings emitted\n "}, {"sha": "23ed003db26355a1d470c1ff801ab7a3a41bd560", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -6,9 +6,8 @@\n fn double(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n \n-const fn bar(x: usize) -> usize {\n+const fn bar(x: usize) -> usize { //~ WARNING skipping const checks\n     X(x) // FIXME: this should error someday\n-    //~^ WARN: skipping const checks\n }\n \n fn main() {}"}, {"sha": "232ae750db285457bd4b328f5e310f83f7547ddf", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail.rs:10:5\n+  --> $DIR/const_fn_ptr_fail.rs:9:1\n    |\n-LL |     X(x) // FIXME: this should error someday\n-   |     ^^^^\n+LL | / const fn bar(x: usize) -> usize {\n+LL | |     X(x) // FIXME: this should error someday\n+LL | | }\n+   | |_^\n \n warning: 1 warning emitted\n "}, {"sha": "fb58b0f287d011366e106dcaf901b4fcbdb7a3de", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -9,8 +9,8 @@ fn double(x: usize) -> usize {\n }\n const X: fn(usize) -> usize = double;\n \n-const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n-    x(y) //~ WARN skipping const checks\n+const fn bar(x: fn(usize) -> usize, y: usize) -> usize { //~ WARN skipping const checks\n+    x(y)\n }\n \n const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday"}, {"sha": "28ed7566fdc40266b4835972f6e3b4d4e191d32e", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+  --> $DIR/const_fn_ptr_fail2.rs:12:1\n    |\n-LL |     x(y)\n-   |     ^^^^\n+LL | / const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+LL | |     x(y)\n+LL | | }\n+   | |_^\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:20:5"}, {"sha": "b31e3020b83c5da969c93c29dafc5b0847111b3b", "filename": "src/test/ui/consts/const-points-to-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/const-points-to-static.rs:5:20\n+  --> $DIR/const-points-to-static.rs:5:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n-   |                    ^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:5:1"}, {"sha": "953483a8add94fb85a60ec144b3bbbf59ea25dd8", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+  --> $DIR/const-prop-read-static-in-const.rs:5:1\n    |\n LL | const TEST: u8 = MY_STATIC;\n-   |                  ^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: any use of this value will cause an error\n   --> $DIR/const-prop-read-static-in-const.rs:5:18"}, {"sha": "7297e91e69785984e2b5d7d9979904885fa1e204", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -7,9 +7,9 @@\n const extern \"C\" fn c_fn() {}\n \n const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n+//~^ WARN skipping const checks\n     my_fn();\n-    //~^ WARN skipping const checks\n-    //~| ERROR could not evaluate static initializer\n+    //~^ ERROR could not evaluate static initializer\n     //~| NOTE calling a function with ABI C using caller ABI Rust\n     //~| NOTE inside `call_rust_fn`\n }"}, {"sha": "6f9681e3981058c54f2199ecb34c6cd70ad65ecb", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,23 +1,29 @@\n warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:10:5\n+  --> $DIR/abi-mismatch.rs:9:1\n    |\n-LL |     my_fn();\n-   |     ^^^^^^^\n+LL | / const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n+LL | |\n+LL | |     my_fn();\n+LL | |\n+LL | |\n+LL | |\n+LL | | }\n+   | |_^\n \n warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:17:40\n+  --> $DIR/abi-mismatch.rs:17:1\n    |\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/abi-mismatch.rs:10:5\n+  --> $DIR/abi-mismatch.rs:11:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with ABI C using caller ABI Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:11:5\n ...\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n    |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:17:18"}, {"sha": "60fec1fb092fbb68a38678c7e11809569a0c75aa", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/assoc_const.rs:14:20\n+  --> $DIR/assoc_const.rs:14:5\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |                    ^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n   --> $DIR/assoc_const.rs:31:13"}, {"sha": "98dea797b69a1796f0bec737d64ae7a79bec299f", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,17 +1,13 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n+// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n #![feature(box_syntax)]\n #![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n \n fn main() {}\n \n-static TEST_BAD: &mut i32 = {\n+static TEST_BAD: &mut i32 = { //~ WARN skipping const checks\n     &mut *(box 0)\n-    //~^ WARN skipping const check\n-    //~| ERROR could not evaluate static initializer\n+    //~^ ERROR could not evaluate static initializer\n     //~| NOTE heap allocations\n-    //~| WARN skipping const checks\n-    //~| WARN skipping const checks\n-    //~| WARN skipping const checks\n };"}, {"sha": "cf405d06b8297337f9295f44ca1508a503799c4a", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,33 +1,19 @@\n warning: skipping const checks\n-  --> $DIR/box.rs:10:11\n-   |\n-LL |     &mut *(box 0)\n-   |           ^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/box.rs:10:16\n-   |\n-LL |     &mut *(box 0)\n-   |                ^\n-\n-warning: skipping const checks\n-  --> $DIR/box.rs:10:5\n+  --> $DIR/box.rs:9:1\n    |\n-LL |     &mut *(box 0)\n-   |     ^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/box.rs:10:5\n-   |\n-LL |     &mut *(box 0)\n-   |     ^^^^^^^^^^^^^\n+LL | / static TEST_BAD: &mut i32 = {\n+LL | |     &mut *(box 0)\n+LL | |\n+LL | |\n+LL | | };\n+   | |__^\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n    |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n \n-error: aborting due to previous error; 4 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "7c8cdaec4a11a704994dd803343f3ca473495328", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n+// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n #![allow(const_err)]\n \n use std::sync::atomic::AtomicUsize;\n@@ -9,23 +9,20 @@ use std::sync::atomic::Ordering;\n // when *using* the const.\n \n const MUTATE_INTERIOR_MUT: usize = {\n+//~^ WARN skipping const checks\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     FOO.fetch_add(1, Ordering::Relaxed)\n-    //~^ WARN skipping const checks\n-    //~| WARN skipping const checks\n };\n \n const READ_INTERIOR_MUT: usize = {\n+//~^ WARN skipping const checks\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { *(&FOO as *const _ as *const usize) }\n-    //~^ WARN skipping const checks\n-    //~| WARN skipping const checks\n };\n \n static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE };\n //~^ WARN skipping const checks\n-//~| WARN skipping const checks\n \n fn main() {\n     MUTATE_INTERIOR_MUT;"}, {"sha": "7e049647cfddb62af38a5e37cdaa08a3675e7d3e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,57 +1,47 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:13:5\n+  --> $DIR/const_refers_to_static.rs:11:1\n    |\n-LL |     FOO.fetch_add(1, Ordering::Relaxed)\n-   |     ^^^\n+LL | / const MUTATE_INTERIOR_MUT: usize = {\n+LL | |\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n+LL | | };\n+   | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:13:5\n+  --> $DIR/const_refers_to_static.rs:17:1\n    |\n-LL |     FOO.fetch_add(1, Ordering::Relaxed)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const READ_INTERIOR_MUT: usize = {\n+LL | |\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n+LL | | };\n+   | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:20:17\n-   |\n-LL |     unsafe { *(&FOO as *const _ as *const usize) }\n-   |                 ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:20:14\n-   |\n-LL |     unsafe { *(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:26:32\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   |                                ^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:26:32\n+  --> $DIR/const_refers_to_static.rs:24:1\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   |                                ^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:31:5\n+  --> $DIR/const_refers_to_static.rs:28:5\n    |\n LL |     MUTATE_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:33:5\n+  --> $DIR/const_refers_to_static.rs:30:5\n    |\n LL |     READ_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:35:5\n+  --> $DIR/const_refers_to_static.rs:32:5\n    |\n LL |     READ_MUT;\n    |     ^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 3 previous errors; 6 warnings emitted\n+error: aborting due to 3 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b8eccdb53eaaf5ebbf3cd3083c62ed0aabaf5ec9", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n+// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n #![allow(const_err)]\n \n use std::sync::atomic::AtomicUsize;\n@@ -8,21 +8,20 @@ use std::sync::atomic::Ordering;\n // so they cause an immediate error when *defining* the const.\n \n const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n+//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n-    //~^ WARN skipping const checks\n-    //~| WARN skipping const checks\n };\n \n // ok some day perhaps\n const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n+//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     static FOO: usize = 0;\n     &FOO\n-    //~^ WARN skipping const checks\n };\n \n fn main() {}"}, {"sha": "bb197884141a1205ffb3f029bf05b8c1fcd56dbe", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,49 +1,55 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:14:18\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |                  ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:14:14\n+  --> $DIR/const_refers_to_static2.rs:10:1\n    |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const REF_INTERIOR_MUT: &usize = {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n+LL | | };\n+   | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:24:6\n+  --> $DIR/const_refers_to_static2.rs:19:1\n    |\n-LL |     &FOO\n-   |      ^^^\n+LL | / const READ_IMMUT: &usize = {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     static FOO: usize = 0;\n+LL | |     &FOO\n+LL | | };\n+   | |__^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:10:1\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-...  |\n LL | |\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:20:1\n+  --> $DIR/const_refers_to_static2.rs:19:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n LL | |\n+LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n-LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 2 previous errors; 3 warnings emitted\n+error: aborting due to 2 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "81a15afed8bf2b77992bb546a21ed9963a333764", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -9,33 +9,32 @@ extern crate static_cross_crate;\n // Sneaky: reference to a mutable static.\n // Allowing this would be a disaster for pattern matching, we could violate exhaustiveness checking!\n const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n+//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO }\n-    //~^ WARN skipping const checks\n };\n \n const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n+//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO[0] }\n-    //~^ WARN skipping const checks\n };\n \n // Also test indirection that reads from other static. This causes a const_err.\n #[warn(const_err)] //~ NOTE\n const U8_MUT2: &u8 = { //~ NOTE\n+//~^ WARN skipping const checks\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-    //~^ WARN skipping const checks\n-    //~| WARN [const_err]\n+    //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n };\n #[warn(const_err)] //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n+//~^ WARN skipping const checks\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-    //~^ WARN skipping const checks\n-    //~| WARN skipping const checks\n-    //~| WARN [const_err]\n+    //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n };\n "}, {"sha": "ffb428506ea1bcfd6fa92e582e7726acf72bdc57", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,68 +1,83 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n    |\n-LL |     unsafe { &static_cross_crate::ZERO }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const SLICE_MUT: &[u8; 1] = {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     unsafe { &static_cross_crate::ZERO }\n+LL | | };\n+   | |__^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO }\n LL | |\n+LL | |     unsafe { &static_cross_crate::ZERO }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n    |\n-LL |     unsafe { &static_cross_crate::ZERO[0] }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const U8_MUT: &u8 = {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     unsafe { &static_cross_crate::ZERO[0] }\n+LL | | };\n+   | |__^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | |\n+LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:52:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:51:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:1\n    |\n-LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const U8_MUT2: &u8 = {\n+LL | |\n+LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+LL | |\n+LL | |\n+LL | | };\n+   | |__^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:29:14\n    |\n LL | / const U8_MUT2: &u8 = {\n+LL | |\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n@@ -73,35 +88,31 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:61:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:20\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:77\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                                                                             ^^^^^^^^\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:1\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / const U8_MUT3: &u8 = {\n+LL | |\n+LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+LL | |\n+LL | |\n+LL | | };\n+   | |__^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:36:51\n    |\n LL | / const U8_MUT3: &u8 = {\n+LL | |\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n@@ -112,11 +123,11 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:69:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n-error: aborting due to 6 previous errors; 7 warnings emitted\n+error: aborting due to 6 previous errors; 6 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b873b9723079b106519e3069352f0b4d9f87d60e", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -13,7 +13,6 @@ static TEST_OK: () = {\n \n // Make sure we catch executing bad drop functions.\n // The actual error is tested by the error-pattern above.\n-static TEST_BAD: () = {\n+static TEST_BAD: () = { //~ WARN skipping const checks\n     let _v: Vec<i32> = Vec::new();\n-    //~^ WARN skipping const check\n };"}, {"sha": "dfefd7f2d3169bbb63288c927cbe7c7e8c4be608", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/drop.rs:17:9\n+  --> $DIR/drop.rs:16:1\n    |\n-LL |     let _v: Vec<i32> = Vec::new();\n-   |         ^^\n+LL | / static TEST_BAD: () = {\n+LL | |     let _v: Vec<i32> = Vec::new();\n+LL | | };\n+   | |__^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n@@ -17,10 +19,10 @@ LL | | }\n    | |_calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n    |   inside `std::intrinsics::drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    | \n-  ::: $DIR/drop.rs:19:1\n+  ::: $DIR/drop.rs:18:1\n    |\n LL |   };\n-   |   - inside `TEST_BAD` at $DIR/drop.rs:19:1\n+   |   - inside `TEST_BAD` at $DIR/drop.rs:18:1\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "c8c6553ed39a097e32de21cb0cf00eccbd603d78", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -6,11 +6,9 @@\n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD: () = {\n+static TEST_BAD: () = { //~ WARN skipping const checks\n     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE inline assembly is not supported\n-    //~| WARN skipping const checks\n     //~| NOTE in this expansion of llvm_asm!\n };"}, {"sha": "ef11c5b1d1ab880ae3fca3c353c9a59f91a52396", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,10 +1,13 @@\n warning: skipping const checks\n-  --> $DIR/inline_asm.rs:10:14\n-   |\n-LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/inline_asm.rs:9:1\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / static TEST_BAD: () = {\n+LL | |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__^\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:10:14"}, {"sha": "955ba90674bf442b26e887d612e9cad606664cca", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n+// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n // normalize-stderr-test \"alloc[0-9]+\" -> \"allocN\"\n \n #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n@@ -14,12 +14,11 @@ const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n //~^ WARN: skipping const checks\n \n const MUTATING_BEHIND_RAW: () = { //~ NOTE\n+//~^ WARN skipping const checks\n     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n     unsafe {\n         *MUTABLE_BEHIND_RAW = 99 //~ ERROR any use of this value will cause an error\n         //~^ NOTE: which is read-only\n-        //~| WARN skipping const checks\n-        //~| WARN skipping const checks\n         // FIXME would be good to match more of the error message here, but looks like we\n         // normalize *after* checking the annoations here.\n     }"}, {"sha": "a1d9e7f1d5f1ea967a2fc085d9fe24447dc392a2", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,25 +1,26 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const.rs:13:38\n+  --> $DIR/mutable_const.rs:13:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/mutable_const.rs:19:9\n+  --> $DIR/mutable_const.rs:16:1\n    |\n-LL |         *MUTABLE_BEHIND_RAW = 99\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_const.rs:19:9\n-   |\n-LL |         *MUTABLE_BEHIND_RAW = 99\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / const MUTATING_BEHIND_RAW: () = {\n+LL | |\n+LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n+LL | |     unsafe {\n+...  |\n+LL | |     }\n+LL | | };\n+   | |__^\n \n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:19:9\n+  --> $DIR/mutable_const.rs:20:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n+LL | |\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n@@ -35,5 +36,5 @@ note: the lint level is defined here\n LL | #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "329805a48a3ae0273e54d82674606bb04fb9562f", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const2.rs:13:38\n+  --> $DIR/mutable_const2.rs:13:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "ca6b4286dc2483348b3eb473c4f8c49acc533f49", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -26,9 +26,8 @@ struct Meh {\n \n unsafe impl Sync for Meh {}\n \n-static MEH: Meh = Meh {\n+static MEH: Meh = Meh { //~ WARN skipping const checks\n     x: &UnsafeCell::new(42),\n-    //~^ WARN: skipping const checks\n };\n \n // this is fine for the same reason as `BAR`."}, {"sha": "119f1ec3d5d0427b03c01c7e357c27927a855d9f", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,35 +1,37 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:9:26\n+  --> $DIR/mutable_references.rs:9:1\n    |\n LL | static FOO: &&mut u32 = &&mut 42;\n-   |                          ^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:14:23\n+  --> $DIR/mutable_references.rs:14:1\n    |\n LL | static BAR: &mut () = &mut ();\n-   |                       ^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:20:28\n+  --> $DIR/mutable_references.rs:20:1\n    |\n LL | static BOO: &mut Foo<()> = &mut Foo(());\n-   |                            ^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:30:8\n+  --> $DIR/mutable_references.rs:29:1\n    |\n-LL |     x: &UnsafeCell::new(42),\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+LL | / static MEH: Meh = Meh {\n+LL | |     x: &UnsafeCell::new(42),\n+LL | | };\n+   | |__^\n \n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:35:27\n+  --> $DIR/mutable_references.rs:34:1\n    |\n LL | static OH_YES: &mut i32 = &mut 42;\n-   |                           ^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:42:5\n+  --> $DIR/mutable_references.rs:41:5\n    |\n LL |     *OH_YES = 99;\n    |     ^^^^^^^^^^^^ cannot assign"}, {"sha": "0d2bb021251d323629b52e0dc7bd5ccf0949a0d7", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -18,8 +18,8 @@ struct Meh {\n unsafe impl Sync for Meh {}\n \n // the following will never be ok!\n-const MUH: Meh = Meh {\n-    x: &UnsafeCell::new(42), //~ WARN: skipping const checks\n+const MUH: Meh = Meh { //~ WARN skipping const checks\n+    x: &UnsafeCell::new(42),\n };\n \n fn main() {"}, {"sha": "88da046ea006708cfce82820af273758b5d4e9b2", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references_ice.rs:22:8\n+  --> $DIR/mutable_references_ice.rs:21:1\n    |\n-LL |     x: &UnsafeCell::new(42),\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+LL | / const MUH: Meh = Meh {\n+LL | |     x: &UnsafeCell::new(42),\n+LL | | };\n+   | |__^\n \n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,"}, {"sha": "5b60774849304cc36abd7ff1531f73c90c2249e3", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/non_const_fn.rs:9:16\n+  --> $DIR/non_const_fn.rs:9:1\n    |\n LL | static C: () = foo();\n-   |                ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/non_const_fn.rs:9:16"}, {"sha": "13646f09a00fe07bd9feeaf8d1cc63b4c6308489", "filename": "src/test/ui/consts/miri_unleashed/read_from_static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/read_from_static.rs:5:27\n+  --> $DIR/read_from_static.rs:5:1\n    |\n LL | static OH_YES: &mut i32 = &mut 42;\n-   |                           ^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "4b7253ce1cc064043ed007a2262cab78435539e4", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -15,10 +15,10 @@ const fn attributed() -> L {\n     std::intrinsics::caller_location()\n }\n \n-const fn calling_attributed() -> L {\n+const fn calling_attributed() -> L { //~ WARN skipping const checks\n     // We need `-Z unleash-the-miri-inside-of-you` for this as we don't have `const fn` pointers.\n     let ptr: fn() -> L = attributed;\n-    ptr() //~ WARN skipping const checks\n+    ptr()\n }\n \n fn main() {"}, {"sha": "c47638d4276af85f33742dd2036f56ead93769ec", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +1,12 @@\n warning: skipping const checks\n-  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:18:1\n    |\n-LL |     ptr()\n-   |     ^^^^^\n+LL | / const fn calling_attributed() -> L {\n+LL | |     // We need `-Z unleash-the-miri-inside-of-you` for this as we don't have `const fn` pointers.\n+LL | |     let ptr: fn() -> L = attributed;\n+LL | |     ptr()\n+LL | | }\n+   | |_^\n \n warning: 1 warning emitted\n "}]}