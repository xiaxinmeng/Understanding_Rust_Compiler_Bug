{"sha": "37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmExZTJhZDlhNTJhYjljNTdkOTBiODg2MzlkNGYzZDExMjQ5MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T21:27:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T21:27:26Z"}, "message": "Auto merge of #4795 - HMPerson1:rustup, r=matthiaskrgr\n\nRustup rust-lang/rust#66188\n\nchangelog: none", "tree": {"sha": "ae436d34a903a01a643bf316f2078e99ff764b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae436d34a903a01a643bf316f2078e99ff764b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "html_url": "https://github.com/rust-lang/rust/commit/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4192dbedcbcaed7f9329e1a45085ce4ff4c2170b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4192dbedcbcaed7f9329e1a45085ce4ff4c2170b", "html_url": "https://github.com/rust-lang/rust/commit/4192dbedcbcaed7f9329e1a45085ce4ff4c2170b"}, {"sha": "94b36d9ca4167b50c05122eaf7f82f00c6cb90aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b36d9ca4167b50c05122eaf7f82f00c6cb90aa", "html_url": "https://github.com/rust-lang/rust/commit/94b36d9ca4167b50c05122eaf7f82f00c6cb90aa"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "5c881adca2cf7a297e9ed6ef6abdb67780a9b055", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -355,7 +355,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n }\n \n fn is_relevant_item(cx: &LateContext<'_, '_>, item: &Item) -> bool {\n-    if let ItemKind::Fn(_, _, _, eid) = item.kind {\n+    if let ItemKind::Fn(_, _, eid) = item.kind {\n         is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value)\n     } else {\n         true"}, {"sha": "e014d191276c8a294ca1ed11abc89d9ebfd12545", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -126,8 +126,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         }\n         // no safety header\n         match item.kind {\n-            hir::ItemKind::Fn(_, ref header, ..) => {\n-                if cx.access_levels.is_exported(item.hir_id) && header.unsafety == hir::Unsafety::Unsafe {\n+            hir::ItemKind::Fn(ref sig, ..) => {\n+                if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n                     span_lint(\n                         cx,\n                         MISSING_SAFETY_DOC,"}, {"sha": "8c3306f6d121d815e68def97e55b0401b6654883", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             match kind {\n                 hir::intravisit::FnKind::Method(\n                     _,\n-                    &hir::MethodSig {\n+                    &hir::FnSig {\n                         header: hir::FnHeader { abi: Abi::Rust, .. },\n                         ..\n                     },\n@@ -228,20 +228,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n \n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         let attr = must_use_attr(&item.attrs);\n-        if let hir::ItemKind::Fn(ref decl, ref _header, ref _generics, ref body_id) = item.kind {\n+        if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             if let Some(attr) = attr {\n-                let fn_header_span = item.span.with_hi(decl.output.span().hi());\n-                check_needless_must_use(cx, decl, item.hir_id, item.span, fn_header_span, attr);\n+                let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n                 return;\n             }\n             if cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n                 check_must_use_candidate(\n                     cx,\n-                    decl,\n+                    &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n                     item.hir_id,\n-                    item.span.with_hi(decl.output.span().hi()),\n+                    item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this function could have a `#[must_use]` attribute\",\n                 );\n             }"}, {"sha": "fad54c3de6591b82792a82edf8ef9ada166c40e8", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -59,8 +59,8 @@ declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemKind::Fn(ref decl, _, ref generics, id) = item.kind {\n-            check_fn_inner(cx, decl, Some(id), generics, item.span, true);\n+        if let ItemKind::Fn(ref sig, ref generics, id) = item.kind {\n+            check_fn_inner(cx, &sig.decl, Some(id), generics, item.span, true);\n         }\n     }\n "}, {"sha": "8ac31743a62459a17999a805c9e257b134f067cd", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -352,8 +352,8 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n \n impl EarlyLintPass for NonExpressiveNames {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Fn(ref decl, _, _, ref blk) = item.kind {\n-            do_check(self, cx, &item.attrs, decl, blk);\n+        if let ItemKind::Fn(ref sig, _, ref blk) = item.kind {\n+            do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n "}, {"sha": "55662a1ad8319e74768e330e43e97fd58ea8ee64", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -101,8 +101,8 @@ declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemKind::Fn(ref decl, _, _, body_id) = item.kind {\n-            check_fn(cx, decl, item.hir_id, Some(body_id));\n+        if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n+            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n         }\n     }\n "}, {"sha": "c303445f7d174216a57afe91de9956c1299a0d5e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -1408,7 +1408,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n-            TraitItemKind::Method(MethodSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n+            TraitItemKind::Method(FnSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n             _ => (),\n         }\n@@ -2118,10 +2118,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                     );\n                 }\n             },\n-            ItemKind::Fn(ref decl, .., ref generics, body_id) => {\n+            ItemKind::Fn(ref sig, ref generics, body_id) => {\n                 let body = cx.tcx.hir().body(body_id);\n \n-                for ty in &decl.inputs {\n+                for ty in &sig.decl.inputs {\n                     let mut vis = ImplicitHasherTypeVisitor::new(cx);\n                     vis.visit_ty(ty);\n "}, {"sha": "98a78895421549177b42281361ae884e02cc5d2c", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                     if let Some(impl_trait_ref) = impl_trait_ref {\n                         for impl_item_ref in refs {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n-                            if let ImplItemKind::Method(MethodSig{ decl: impl_decl, .. }, impl_body_id)\n+                            if let ImplItemKind::Method(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n                                 let item_type = cx.tcx.type_of(impl_def_id);\n                                 check_trait_method_impl_decl(cx, item_type, impl_item, impl_decl, &impl_trait_ref);"}, {"sha": "c75b61c6718c78be9796a41b4398c9162db633d0", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fa1e2ad9a52ab9c57d90b88639d4f3d1124916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=37fa1e2ad9a52ab9c57d90b88639d4f3d1124916", "patch": "@@ -87,10 +87,10 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n             ..\n         }) => true,\n         Node::Item(&Item {\n-            kind: ItemKind::Fn(_, header, ..),\n+            kind: ItemKind::Fn(ref sig, ..),\n             ..\n-        }) => header.constness == Constness::Const,\n-        Node::ImplItem(&ImplItem {\n+        })\n+        | Node::ImplItem(&ImplItem {\n             kind: ImplItemKind::Method(ref sig, _),\n             ..\n         }) => sig.header.constness == Constness::Const,\n@@ -635,7 +635,7 @@ pub fn get_enclosing_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, hir_id: HirId)\n         match node {\n             Node::Block(block) => Some(block),\n             Node::Item(&Item {\n-                kind: ItemKind::Fn(_, _, _, eid),\n+                kind: ItemKind::Fn(_, _, eid),\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {"}]}