{"sha": "d1330a4a65f0113c687716a5a679239af4df9c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzMwYTRhNjVmMDExM2M2ODc3MTZhNWE2NzkyMzlhZjRkZjljMTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-26T13:17:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-26T13:17:19Z"}, "message": "Merge #2906\n\n2906: Fix thread priority problems on windows r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e32c7483d541e3d38668f44d2ed61a21151dbed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32c7483d541e3d38668f44d2ed61a21151dbed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1330a4a65f0113c687716a5a679239af4df9c11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeLZFfCRBK7hj4Ov3rIwAAdHIIAHMNiQDmBR33QZrcBZLacTVb\n/ApsS3CQX3Q4/hkaHsAENOilTygpFMso/G+L8K6XYvxKt8wmm5Alj9Brgg9/XG6k\neDlvdiUt1ls1BzIWbcdh8y0Mq0Opf2CiYhTHhcTmm46v1B4t/jeUVR8oIxbyHzNw\nPzLU8UBWJoqD3nB6dADTODkJwq7CMnxqVkuhBJBYt6m6CWc8CMAt/53glfq9oFtv\nDyL1uV0v3/xmJqiuuljD6BJyvehtv7AZTASkJ1nWsdoL8M3zN3Fo1lG7rRRmhu/x\nsWr8klvKPlbBWnR+czOPP68L+VW4Yt00lGIP2ZOVNHrQQ852Fe1Mox9bcFJDVn0=\n=W9FY\n-----END PGP SIGNATURE-----\n", "payload": "tree e32c7483d541e3d38668f44d2ed61a21151dbed8\nparent 13743d10734018b1765b26993044cd4f455fff5a\nparent 9faebd9d646e54aaec81a36ff08b45389344e23b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580044639 +0000\ncommitter GitHub <noreply@github.com> 1580044639 +0000\n\nMerge #2906\n\n2906: Fix thread priority problems on windows r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1330a4a65f0113c687716a5a679239af4df9c11", "html_url": "https://github.com/rust-lang/rust/commit/d1330a4a65f0113c687716a5a679239af4df9c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1330a4a65f0113c687716a5a679239af4df9c11/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13743d10734018b1765b26993044cd4f455fff5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13743d10734018b1765b26993044cd4f455fff5a", "html_url": "https://github.com/rust-lang/rust/commit/13743d10734018b1765b26993044cd4f455fff5a"}, {"sha": "9faebd9d646e54aaec81a36ff08b45389344e23b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faebd9d646e54aaec81a36ff08b45389344e23b", "html_url": "https://github.com/rust-lang/rust/commit/9faebd9d646e54aaec81a36ff08b45389344e23b"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "8e320458bf82bc0669bb0ded14e72ab60fc80257", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1330a4a65f0113c687716a5a679239af4df9c11/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d1330a4a65f0113c687716a5a679239af4df9c11/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d1330a4a65f0113c687716a5a679239af4df9c11", "patch": "@@ -1079,6 +1079,7 @@ dependencies = [\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "0bc71860f2a91add5b2d12c4eeabeee37d3e9e72", "filename": "bors.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1330a4a65f0113c687716a5a679239af4df9c11/bors.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1330a4a65f0113c687716a5a679239af4df9c11/bors.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bors.toml?ref=d1330a4a65f0113c687716a5a679239af4df9c11", "patch": "@@ -1,6 +1,6 @@\n status = [\n     \"Rust (ubuntu-latest)\",\n-    # \"Rust (windows-latest)\",\n+    \"Rust (windows-latest)\",\n     \"Rust (macos-latest)\",\n     \"TypeScript\"\n ]"}, {"sha": "fdf81ed87c9fe72feb95ecd6c88d2dadeba57559", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1330a4a65f0113c687716a5a679239af4df9c11/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1330a4a65f0113c687716a5a679239af4df9c11/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=d1330a4a65f0113c687716a5a679239af4df9c11", "patch": "@@ -30,6 +30,9 @@ env_logger = { version = \"0.7.1\", default-features = false }\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n either = \"1.5\"\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = \"0.3\"\n+\n [dev-dependencies]\n tempfile = \"3\"\n test_utils = { path = \"../test_utils\" }"}, {"sha": "15bf519c9a7d4affc9825c23fd00c0235af2a095", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1330a4a65f0113c687716a5a679239af4df9c11/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1330a4a65f0113c687716a5a679239af4df9c11/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=d1330a4a65f0113c687716a5a679239af4df9c11", "patch": "@@ -29,9 +29,6 @@ use crate::{\n     Result, ServerConfig,\n };\n \n-const THREADPOOL_SIZE: usize = 8;\n-const MAX_IN_FLIGHT_LIBS: usize = THREADPOOL_SIZE - 3;\n-\n #[derive(Debug)]\n pub struct LspError {\n     pub code: i32,\n@@ -60,6 +57,25 @@ pub fn main_loop(\n ) -> Result<()> {\n     log::info!(\"server_config: {:#?}\", config);\n \n+    // Windows scheduler implements priority boosts: if thread waits for an\n+    // event (like a condvar), and event fires, priority of the thread is\n+    // temporary bumped. This optimization backfires in our case: each time the\n+    // `main_loop` schedules a task to run on a threadpool, the worker threads\n+    // gets a higher priority, and (on a machine with fewer cores) displaces the\n+    // main loop! We work-around this by marking the main loop as a\n+    // higher-priority thread.\n+    //\n+    // https://docs.microsoft.com/en-us/windows/win32/procthread/scheduling-priorities\n+    // https://docs.microsoft.com/en-us/windows/win32/procthread/priority-boosts\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/2835\n+    #[cfg(windows)]\n+    unsafe {\n+        use winapi::um::processthreadsapi::*;\n+        let thread = GetCurrentThread();\n+        let thread_priority_above_normal = 1;\n+        SetThreadPriority(thread, thread_priority_above_normal);\n+    }\n+\n     let mut loop_state = LoopState::default();\n     let mut world_state = {\n         let feature_flags = {\n@@ -168,7 +184,7 @@ pub fn main_loop(\n         )\n     };\n \n-    let pool = ThreadPool::new(THREADPOOL_SIZE);\n+    let pool = ThreadPool::default();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (libdata_sender, libdata_receiver) = unbounded::<LibraryData>();\n \n@@ -371,7 +387,8 @@ fn loop_turn(\n         loop_state.pending_libraries.extend(changes);\n     }\n \n-    while loop_state.in_flight_libraries < MAX_IN_FLIGHT_LIBS\n+    let max_in_flight_libs = pool.max_count().saturating_sub(2).max(1);\n+    while loop_state.in_flight_libraries < max_in_flight_libs\n         && !loop_state.pending_libraries.is_empty()\n     {\n         let (root, files) = loop_state.pending_libraries.pop().unwrap();"}]}