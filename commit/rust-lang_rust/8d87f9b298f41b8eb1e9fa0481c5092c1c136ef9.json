{"sha": "8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODdmOWIyOThmNDFiOGViMWU5ZmEwNDgxYzUwOTJjMWMxMzZlZjk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-06T13:51:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-06T15:03:37Z"}, "message": "Handle attribute macros in `descend_into_macros`", "tree": {"sha": "a594d707ee2b6fe6b49296ad02b72c02e494236c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a594d707ee2b6fe6b49296ad02b72c02e494236c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "html_url": "https://github.com/rust-lang/rust/commit/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13da28cc2bc1b59f7af817eca36927a71edb023c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13da28cc2bc1b59f7af817eca36927a71edb023c", "html_url": "https://github.com/rust-lang/rust/commit/13da28cc2bc1b59f7af817eca36927a71edb023c"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "0d55e4a3e0b7306f638f0abc0d126715b43aa319", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -362,25 +362,57 @@ impl<'db> SemanticsImpl<'db> {\n \n         let token = successors(Some(InFile::new(sa.file_id, token)), |token| {\n             self.db.unwind_if_cancelled();\n-            let macro_call = token.value.ancestors().find_map(ast::MacroCall::cast)?;\n-            let tt = macro_call.token_tree()?;\n-            if !tt.syntax().text_range().contains_range(token.value.text_range()) {\n-                return None;\n-            }\n-            let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n-            let token = self\n-                .expansion_info_cache\n-                .borrow_mut()\n-                .entry(file_id)\n-                .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                .as_ref()?\n-                .map_token_down(token.as_ref())?;\n-\n-            if let Some(parent) = token.value.parent() {\n-                self.cache(find_root(&parent), token.file_id);\n+\n+            for node in token.value.ancestors() {\n+                match_ast! {\n+                    match node {\n+                        ast::MacroCall(macro_call) => {\n+                            let tt = macro_call.token_tree()?;\n+                            if !tt.syntax().text_range().contains_range(token.value.text_range()) {\n+                                return None;\n+                            }\n+                            let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n+                            let token = self\n+                                .expansion_info_cache\n+                                .borrow_mut()\n+                                .entry(file_id)\n+                                .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                                .as_ref()?\n+                                .map_token_down(token.as_ref())?;\n+\n+                            if let Some(parent) = token.value.parent() {\n+                                self.cache(find_root(&parent), token.file_id);\n+                            }\n+\n+                            return Some(token);\n+                        },\n+                        ast::Item(item) => {\n+                            match self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item))) {\n+                                Some(call_id) => {\n+                                    let file_id = call_id.as_file();\n+                                    let token = self\n+                                        .expansion_info_cache\n+                                        .borrow_mut()\n+                                        .entry(file_id)\n+                                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                                        .as_ref()?\n+                                        .map_token_down(token.as_ref())?;\n+\n+                                    if let Some(parent) = token.value.parent() {\n+                                        self.cache(find_root(&parent), token.file_id);\n+                                    }\n+\n+                                    return Some(token);\n+                                }\n+                                None => {}\n+                            }\n+                        },\n+                        _ => {}\n+                    }\n+                }\n             }\n \n-            Some(token)\n+            None\n         })\n         .last()\n         .unwrap();"}, {"sha": "22e196196ded02fc80bff4367e9cfb5b41506286", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     ImplId, LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n     UnionId, VariantId,\n };\n-use hir_expand::{name::AsName, AstId, MacroDefKind};\n+use hir_expand::{name::AsName, AstId, MacroCallId, MacroDefKind};\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n use stdx::impl_from;\n@@ -145,16 +145,25 @@ impl SourceToDefCtx<'_, '_> {\n         Some((container, label_id))\n     }\n \n+    pub(super) fn item_to_macro_call(&mut self, src: InFile<ast::Item>) -> Option<MacroCallId> {\n+        let map = self.dyn_map(src.as_ref())?;\n+        map[keys::ATTR_MACRO].get(&src).copied()\n+    }\n+\n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n         &mut self,\n         src: InFile<Ast>,\n         key: Key<Ast, ID>,\n     ) -> Option<ID> {\n-        let container = self.find_container(src.as_ref().map(|it| it.syntax()))?;\n+        self.dyn_map(src.as_ref())?[key].get(&src).copied()\n+    }\n+\n+    fn dyn_map<Ast: AstNode + 'static>(&mut self, src: InFile<&Ast>) -> Option<&DynMap> {\n+        let container = self.find_container(src.map(|it| it.syntax()))?;\n         let db = self.db;\n         let dyn_map =\n             &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n-        dyn_map[key].get(&src).copied()\n+        Some(dyn_map)\n     }\n \n     pub(super) fn type_param_to_def(&mut self, src: InFile<ast::TypeParam>) -> Option<TypeParamId> {"}, {"sha": "f22383e221d9bb8abcfbbc4862842c2da00223cb", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -85,6 +85,10 @@ impl ChildBySource for ItemScope {\n             res[keys::CONST].insert(src, konst);\n         });\n         self.impls().for_each(|imp| add_impl(db, res, imp));\n+        self.attr_macro_invocs().for_each(|(ast_id, call_id)| {\n+            let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n+            res[keys::ATTR_MACRO].insert(item, call_id);\n+        });\n \n         fn add_module_def(db: &dyn DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n             match item {"}, {"sha": "0f74f050da627251bd0063fb0015a91509e6ddec", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -4,11 +4,11 @@\n use std::collections::hash_map::Entry;\n \n use base_db::CrateId;\n-use hir_expand::name::Name;\n-use hir_expand::MacroDefKind;\n+use hir_expand::{name::Name, AstId, MacroCallId, MacroDefKind};\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n+use syntax::ast;\n \n use crate::{\n     db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, ConstId, ImplId,\n@@ -53,6 +53,7 @@ pub struct ItemScope {\n     // FIXME: Macro shadowing in one module is not properly handled. Non-item place macros will\n     // be all resolved to the last one defined if shadowing happens.\n     legacy_macros: FxHashMap<Name, MacroDefId>,\n+    attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -169,6 +170,16 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n+    pub(crate) fn add_attr_macro_invoc(&mut self, item: AstId<ast::Item>, call: MacroCallId) {\n+        self.attr_macros.insert(item, call);\n+    }\n+\n+    pub(crate) fn attr_macro_invocs(\n+        &self,\n+    ) -> impl Iterator<Item = (AstId<ast::Item>, MacroCallId)> + '_ {\n+        self.attr_macros.iter().map(|(k, v)| (*k, *v))\n+    }\n+\n     pub(crate) fn unnamed_trait_vis(&self, tr: TraitId) -> Option<Visibility> {\n         self.unnamed_trait_imports.get(&tr).copied()\n     }\n@@ -307,6 +318,7 @@ impl ItemScope {\n             unnamed_consts,\n             unnamed_trait_imports,\n             legacy_macros,\n+            attr_macros,\n         } = self;\n         types.shrink_to_fit();\n         values.shrink_to_fit();\n@@ -317,6 +329,7 @@ impl ItemScope {\n         unnamed_consts.shrink_to_fit();\n         unnamed_trait_imports.shrink_to_fit();\n         legacy_macros.shrink_to_fit();\n+        attr_macros.shrink_to_fit();\n     }\n }\n "}, {"sha": "688cd9fcff6a55cf2be3a2ae6b4ff685267b10c2", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -2,7 +2,7 @@\n \n use std::marker::PhantomData;\n \n-use hir_expand::{InFile, MacroDefId};\n+use hir_expand::{InFile, MacroCallId, MacroDefId};\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n \n@@ -32,6 +32,7 @@ pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n+pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "d019ba3a9626c45afbe7f46e8c5d32ed727440d5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8d87f9b298f41b8eb1e9fa0481c5092c1c136ef9", "patch": "@@ -1112,6 +1112,11 @@ impl DefCollector<'_> {\n                                     return false;\n                                 }\n                             }\n+\n+                            self.def_map.modules[directive.module_id]\n+                                .scope\n+                                .add_attr_macro_invoc(ast_id.ast_id, call_id);\n+\n                             resolved.push((directive.module_id, call_id, directive.depth));\n                             res = ReachedFixedPoint::No;\n                             return false;"}]}