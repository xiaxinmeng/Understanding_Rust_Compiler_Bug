{"sha": "1bc3305d9596d790817b388cd62ecdc7572c912f", "node_id": "C_kwDOAAsO6NoAKDFiYzMzMDVkOTU5NmQ3OTA4MTdiMzg4Y2Q2MmVjZGM3NTcyYzkxMmY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-04T14:51:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-05T14:28:58Z"}, "message": "Split float literal tokens at the `.`", "tree": {"sha": "9d0c9b3b96ea773c8fd9119748fd98e935840aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0c9b3b96ea773c8fd9119748fd98e935840aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc3305d9596d790817b388cd62ecdc7572c912f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc3305d9596d790817b388cd62ecdc7572c912f", "html_url": "https://github.com/rust-lang/rust/commit/1bc3305d9596d790817b388cd62ecdc7572c912f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc3305d9596d790817b388cd62ecdc7572c912f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502c519e7d15ca6d015b4ca48951e43e893c8cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/502c519e7d15ca6d015b4ca48951e43e893c8cba", "html_url": "https://github.com/rust-lang/rust/commit/502c519e7d15ca6d015b4ca48951e43e893c8cba"}], "stats": {"total": 229, "additions": 157, "deletions": 72}, "files": [{"sha": "f061e8637ecd3ad3d0cd5d6d9a0a0e017cdcd5df", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -30,7 +30,7 @@ pub(super) fn token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Optio\n         INT_NUMBER if token.ancestors().nth(1).map(|it| it.kind()) == Some(FIELD_EXPR) => {\n             SymbolKind::Field.into()\n         }\n-        INT_NUMBER | FLOAT_NUMBER => HlTag::NumericLiteral.into(),\n+        INT_NUMBER | FLOAT_NUMBER_PART => HlTag::NumericLiteral.into(),\n         BYTE => HlTag::ByteLiteral.into(),\n         CHAR => HlTag::CharLiteral.into(),\n         IDENT if token.parent().and_then(ast::TokenTree::cast).is_some() => {"}, {"sha": "329184730e0dc72edce87c092d91e63708e4d0f1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -119,13 +119,13 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"operator\">.</span><span class=\"numeric_literal\">01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234</span><span class=\"operator\">.</span><span class=\"numeric_literal\">56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "8b8577986dab4fa2cf675fd3ea4872a0c3153431", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -260,6 +260,35 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 IDENT => make_leaf!(Ident),\n                 UNDERSCORE => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n+                FLOAT_NUMBER_PART => {\n+                    // Reassemble a split-up float token.\n+                    let mut range = range;\n+                    let mut text = token.to_text(conv).to_string();\n+                    if let Some(dot) = conv.peek() {\n+                        if dot.kind(conv) == DOT {\n+                            let (_, dot_range) = conv.bump().unwrap();\n+                            text += &*dot.to_text(conv);\n+                            range = TextRange::new(range.start(), dot_range.end());\n+\n+                            if let Some(tail) = conv.peek() {\n+                                if tail.kind(conv) == FLOAT_NUMBER_PART {\n+                                    let (_, tail_range) = conv.bump().unwrap();\n+                                    text += &*tail.to_text(conv);\n+                                    range = TextRange::new(range.start(), tail_range.end());\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    result.push(\n+                        tt::Leaf::from(tt::Literal {\n+                            id: conv.id_alloc().alloc(range, synth_id),\n+                            text: text.into(),\n+                        })\n+                        .into(),\n+                    );\n+                    continue;\n+                }\n                 k if k.is_literal() => make_leaf!(Literal),\n                 LIFETIME_IDENT => {\n                     let char_unit = TextSize::of('\\'');"}, {"sha": "958f6433206a22d60305fee447d6ab7ddbe81828", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -35,15 +35,13 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer) -> parser::Input {\n                         let is_negated = lit.text.starts_with('-');\n                         let inner_text = &lit.text[if is_negated { 1 } else { 0 }..];\n \n-                        let kind = parser::LexedStr::single_token(inner_text)\n-                            .map(|(kind, _error)| kind)\n-                            .filter(|kind| {\n-                                kind.is_literal()\n-                                    && (!is_negated || matches!(kind, FLOAT_NUMBER | INT_NUMBER))\n-                            })\n-                            .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &lit));\n-\n-                        res.push(kind);\n+                        let lexed_str = parser::LexedStr::new(inner_text);\n+                        if lexed_str.is_empty() {\n+                            panic!(\"failed to convert literal: {:?}\", lit);\n+                        }\n+                        for i in 0..lexed_str.len() {\n+                            res.push(lexed_str.kind(i));\n+                        }\n                     }\n                     tt::Leaf::Ident(ident) => match ident.text.as_ref() {\n                         \"_\" => res.push(T![_]),"}, {"sha": "45d9b2e4e0db8cbf05bbb5112c71186445fd4630", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -318,7 +318,7 @@ fn name_ref(p: &mut Parser) {\n }\n \n fn name_ref_or_index(p: &mut Parser) {\n-    assert!(p.at(IDENT) || p.at(INT_NUMBER));\n+    assert!(p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART));\n     let m = p.start();\n     p.bump_any();\n     m.complete(p, NAME_REF);"}, {"sha": "85f53dd2375b096e250f7ac46136ca632f28ddc2", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -475,11 +475,8 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n-    if p.at(IDENT) || p.at(INT_NUMBER) {\n+    if p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) {\n         name_ref_or_index(p);\n-    } else if p.at(FLOAT_NUMBER) {\n-        // FIXME: How to recover and instead parse INT + T![.]?\n-        p.bump_any();\n     } else {\n         p.error(\"expected field name or number\");\n     }"}, {"sha": "07b0a2aee585b125509be03038bef6cdf38b7b6e", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -17,7 +17,7 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n     T![false],\n     INT_NUMBER,\n-    FLOAT_NUMBER,\n+    FLOAT_NUMBER_PART,\n     BYTE,\n     CHAR,\n     STRING,\n@@ -29,11 +29,19 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n         return None;\n     }\n     let m = p.start();\n-    if p.at(FLOAT_NUMBER) {\n+    if p.at(FLOAT_NUMBER_PART) {\n+        // Floats can be up to 3 tokens: 2 `FLOAT_NUMBER_PART`s separated by 1 `DOT`\n         let f = p.start();\n-        p.bump(FLOAT_NUMBER);\n+        p.bump(FLOAT_NUMBER_PART);\n+        if p.at(DOT) {\n+            p.bump(DOT);\n+            if p.at(FLOAT_NUMBER_PART) {\n+                p.bump(FLOAT_NUMBER_PART);\n+            }\n+        }\n         f.complete(p, FLOAT_LITERAL);\n     } else {\n+        // Everything else is just one token.\n         p.bump_any();\n     }\n     Some(m.complete(p, LITERAL))"}, {"sha": "c16bd8d0c7afa8766b12f3b6ec66e0a80fb2ca55", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -140,7 +140,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n }\n \n fn is_literal_pat_start(p: &Parser) -> bool {\n-    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n+    p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER_PART)\n         || p.at_ts(expressions::LITERAL_FIRST)\n }\n "}, {"sha": "fae5d8884becbe7138fa6784ad852e08cda120a4", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -177,7 +177,7 @@ impl<'a> Converter<'a> {\n \n                 rustc_lexer::TokenKind::RawIdent => IDENT,\n                 rustc_lexer::TokenKind::Literal { kind, .. } => {\n-                    self.extend_literal(token_text.len(), kind);\n+                    self.extend_literal(token_text, kind);\n                     return;\n                 }\n \n@@ -223,7 +223,7 @@ impl<'a> Converter<'a> {\n         self.push(syntax_kind, token_text.len(), err);\n     }\n \n-    fn extend_literal(&mut self, len: usize, kind: &rustc_lexer::LiteralKind) {\n+    fn extend_literal(&mut self, token_text: &str, kind: &rustc_lexer::LiteralKind) {\n         let mut err = \"\";\n \n         let syntax_kind = match *kind {\n@@ -237,7 +237,22 @@ impl<'a> Converter<'a> {\n                 if empty_exponent {\n                     err = \"Missing digits after the exponent symbol\";\n                 }\n-                FLOAT_NUMBER\n+\n+                // In order to correctly parse nested tuple accesses like `tup.0.0`, where the `0.0`\n+                // is lexed as a float, we split floats that contain a `.` into 3 tokens.\n+                if let Some((before, after)) = token_text.split_once('.') {\n+                    let err = if err.is_empty() { None } else { Some(err) };\n+                    if !before.is_empty() {\n+                        self.push(FLOAT_NUMBER_PART, before.len(), None);\n+                    }\n+                    self.push(DOT, 1, None);\n+                    if !after.is_empty() {\n+                        self.push(FLOAT_NUMBER_PART, after.len(), err);\n+                    }\n+                    return;\n+                }\n+\n+                FLOAT_NUMBER_PART\n             }\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n@@ -295,6 +310,6 @@ impl<'a> Converter<'a> {\n         };\n \n         let err = if err.is_empty() { None } else { Some(err) };\n-        self.push(syntax_kind, len, err);\n+        self.push(syntax_kind, token_text.len(), err);\n     }\n }"}, {"sha": "31fe1b2aba21d08deec65d1270c31e710b5cc3e7", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -110,7 +110,7 @@ pub enum SyntaxKind {\n     RAW_KW,\n     MACRO_RULES_KW,\n     INT_NUMBER,\n-    FLOAT_NUMBER,\n+    FLOAT_NUMBER_PART,\n     CHAR,\n     BYTE,\n     STRING,\n@@ -287,7 +287,7 @@ impl SyntaxKind {\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n+            INT_NUMBER | FLOAT_NUMBER_PART | CHAR | BYTE | STRING | BYTE_STRING => true,\n             _ => false,\n         }\n     }\n@@ -387,5 +387,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number] => { $ crate :: SyntaxKind :: FLOAT_NUMBER } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number_part] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_PART } ; }\n pub use T;"}, {"sha": "d0a268b8c14fe8c6b14bf79dae1389333add5b71", "filename": "crates/parser/test_data/lexer/err/empty_exponent.rast", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -1,14 +1,14 @@\n-FLOAT_NUMBER \"0e\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"0e\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0E\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"0E\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n INT_NUMBER \"42\"\n DOT \".\"\n@@ -30,19 +30,35 @@ DOT \".\"\n IDENT \"E\"\n MINUS \"-\"\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42.2e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER \"42.2e+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2e-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2e-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E+f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"42.2E-f32\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_PART \"42\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"2E-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\""}, {"sha": "689422933c4d0a2d5a8c3dce5e7472ec09b9ad0a", "filename": "crates/parser/test_data/lexer/ok/numbers.rast", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -4,7 +4,8 @@ INT_NUMBER \"00\"\n WHITESPACE \" \"\n INT_NUMBER \"0_\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0.\"\n+FLOAT_NUMBER_PART \"0\"\n+DOT \".\"\n WHITESPACE \" \"\n INT_NUMBER \"0z\"\n WHITESPACE \"\\n\"\n@@ -20,11 +21,13 @@ INT_NUMBER \"001279\"\n WHITESPACE \" \"\n INT_NUMBER \"0_1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0.1279\"\n+FLOAT_NUMBER_PART \"0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0e1279\"\n+FLOAT_NUMBER_PART \"0e1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"0E1279\"\n+FLOAT_NUMBER_PART \"0E1279\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n@@ -37,21 +40,27 @@ IDENT \"foo\"\n L_PAREN \"(\"\n R_PAREN \")\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0e+1\"\n+FLOAT_NUMBER_PART \"0e+1\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n IDENT \"e\"\n PLUS \"+\"\n INT_NUMBER \"1\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0.0E-2\"\n+FLOAT_NUMBER_PART \"0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"0E-2\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER \"0___0.10000____0000e+111__\"\n+FLOAT_NUMBER_PART \"0___0\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"10000____0000e+111__\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"1i64\"\n WHITESPACE \" \"\n-FLOAT_NUMBER \"92.0f32\"\n+FLOAT_NUMBER_PART \"92\"\n+DOT \".\"\n+FLOAT_NUMBER_PART \"0f32\"\n WHITESPACE \" \"\n INT_NUMBER \"11__s\"\n WHITESPACE \"\\n\""}, {"sha": "f57e58a4b7f12e440faf7842b47057b48dbbd939", "filename": "crates/parser/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -32,7 +32,9 @@ SOURCE_FILE\n               INT_NUMBER \"1\"\n               COMMA \",\"\n               WHITESPACE \" \"\n-              FLOAT_NUMBER \"2.0\"\n+              FLOAT_NUMBER_PART \"2\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n         WHITESPACE \"\\n    \"\n         R_CURLY \"}\"\n   WHITESPACE \" \""}, {"sha": "367aff324a722d6ecdd96f41b30054dfd0b10e49", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -58,7 +58,9 @@ SOURCE_FILE\n           WHITESPACE \" \"\n           LITERAL\n             FLOAT_LITERAL\n-              FLOAT_NUMBER \"2.0\"\n+              FLOAT_NUMBER_PART \"2\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         LET_STMT"}, {"sha": "5fd9271c629a848ed305d16de980a7e0fb837b0e", "filename": "crates/parser/test_data/parser/ok/0056_neq_in_type.rast", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -20,7 +20,9 @@ SOURCE_FILE\n               METHOD_CALL_EXPR\n                 LITERAL\n                   FLOAT_LITERAL\n-                    FLOAT_NUMBER \"1.0f32\"\n+                    FLOAT_NUMBER_PART \"1\"\n+                    DOT \".\"\n+                    FLOAT_NUMBER_PART \"0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\"\n@@ -42,7 +44,9 @@ SOURCE_FILE\n               METHOD_CALL_EXPR\n                 LITERAL\n                   FLOAT_LITERAL\n-                    FLOAT_NUMBER \"1.0f32\"\n+                    FLOAT_NUMBER_PART \"1\"\n+                    DOT \".\"\n+                    FLOAT_NUMBER_PART \"0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\""}, {"sha": "8e4f07d3b5bfeec9f25aa42bb8ebe1fcba78c81c", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -373,7 +373,9 @@ Literal =\n   )\n \n FloatLiteral =\n-  'float_number'\n+  'float_number_part'\n+  '.'?\n+  'float_number_part'?\n \n PathExpr =\n   Attr* Path"}, {"sha": "11d81d47783fbd85de2594fb7d7dbec533253206", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -345,7 +345,7 @@ impl ast::Literal {\n \n impl ast::FloatLiteral {\n     pub fn suffix(&self) -> Option<String> {\n-        ast::FloatNumber::cast(self.syntax().last_token()?)?.suffix().map(|s| s.to_string())\n+        ast::FloatNumberPart::cast(self.syntax().last_token()?)?.suffix().map(|s| s.to_string())\n     }\n }\n "}, {"sha": "7c82372aa2dcc5441efc108b1e9af51f0a0c0542", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -1090,9 +1090,10 @@ pub struct FloatLiteral {\n     pub(crate) syntax: SyntaxNode,\n }\n impl FloatLiteral {\n-    pub fn float_number_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![float_number])\n+    pub fn float_number_part_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_part])\n     }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "1e1a55e3269368efe9462ae51d16bbc62f299201", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -112,16 +112,16 @@ impl AstToken for IntNumber {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatNumber {\n+pub struct FloatNumberPart {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for FloatNumber {\n+impl std::fmt::Display for FloatNumberPart {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for FloatNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n+impl AstToken for FloatNumberPart {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER_PART }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "5b19b5ed2c2860af5379f059df8df8e0bb7da20c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -555,7 +555,9 @@ impl ast::FieldExpr {\n         self.syntax\n             .children_with_tokens()\n             // FIXME: Accepting floats here to reject them in validation later\n-            .find(|c| c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER)\n+            .find(|c| {\n+                c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER_PART\n+            })\n             .as_ref()\n             .and_then(SyntaxElement::as_token)\n             .cloned()"}, {"sha": "5f2e7231d9302d44909738b4e75f780a2d707fb7", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -321,7 +321,7 @@ impl ast::IntNumber {\n     }\n }\n \n-impl ast::FloatNumber {\n+impl ast::FloatNumberPart {\n     pub fn suffix(&self) -> Option<&str> {\n         let text = self.text();\n         let mut indices = text.char_indices();"}, {"sha": "0a0632da74ebab27a53814334c194639b5aec248", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -71,7 +71,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n-    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n+    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER_PART\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\","}, {"sha": "eb6a5f63eaa5a3ffc7030ed3e3c76099e59c36c2", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc3305d9596d790817b388cd62ecdc7572c912f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=1bc3305d9596d790817b388cd62ecdc7572c912f", "patch": "@@ -462,7 +462,7 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n             [lifetime_ident] => { $crate::SyntaxKind::LIFETIME_IDENT };\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n-            [float_number] => { $crate::SyntaxKind::FLOAT_NUMBER };\n+            [float_number_part] => { $crate::SyntaxKind::FLOAT_NUMBER_PART };\n         }\n         pub use T;\n     };\n@@ -586,7 +586,7 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumberPart Char Byte Ident\"\n             .split_ascii_whitespace()\n             .map(|it| it.to_string())\n             .collect::<Vec<_>>(),"}]}