{"sha": "f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZGZiZTdiMWI4ZDYzMDQ4ODQ0MTk4MmNmM2Q0NmY4MmEzYTg5ZGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T01:53:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T01:53:53Z"}, "message": "Register new snapshots, purge log_err and log_full in favour of log(...).", "tree": {"sha": "8e26605c3d3628cd336e566b8ec7391c058c3a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e26605c3d3628cd336e566b8ec7391c058c3a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "html_url": "https://github.com/rust-lang/rust/commit/f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb5b6fb259d5de9be751175fc53df1eaea4cd2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5b6fb259d5de9be751175fc53df1eaea4cd2c", "html_url": "https://github.com/rust-lang/rust/commit/ccb5b6fb259d5de9be751175fc53df1eaea4cd2c"}], "stats": {"total": 1437, "additions": 720, "deletions": 717}, "files": [{"sha": "f3eaacb2ba3bf397a15b5bdf923ecc68877f7729", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -269,11 +269,11 @@ fn load_one_source_package(&src: source, p: map::hashmap<str, json::json>) {\n         ref: ref,\n         tags: tags\n     });\n-    log_full(core::debug, \"  Loaded package: \" + src.name + \"/\" + name);\n+    log(debug, \"  Loaded package: \" + src.name + \"/\" + name);\n }\n \n fn load_source_packages(&c: cargo, &src: source) {\n-    log_full(core::debug, \"Loading source: \" + src.name);\n+    log(debug, \"Loading source: \" + src.name);\n     let dir = fs::connect(c.sourcedir, src.name);\n     let pkgfile = fs::connect(dir, \"packages.json\");\n     if !fs::path_exists(pkgfile) { ret; }"}, {"sha": "98917342c2d68a57c9f748a744a501f5e10c0693", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -596,7 +596,7 @@ fn link_binary(sess: session::session,\n         fs::connect(fs::dirname(out_filename), long_libname)\n     } else { out_filename };\n \n-    log_full(core::debug, \"output: \" + output);\n+    log(debug, \"output: \" + output);\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed."}, {"sha": "b19b33c79db794e1cec4fc8f72a02d42b46f06a3", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -211,7 +211,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n               'a' { kind_noncopyable }\n               c {\n                 #error(\"unexpected char in encoded type param: \");\n-                log_full(core::error, c);\n+                log(error, c);\n                 fail\n               }\n             };"}, {"sha": "b97b9a65510f0173fbda453154c068b58b3f2937", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -715,8 +715,8 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n     let dbg_cx = option::get(cx.dbg_cx);\n \n     #debug(\"~~\");\n-    log_full(core::debug, fcx.id);\n-    log_full(core::debug, cx.sess.span_str(fcx.sp));\n+    log(debug, fcx.id);\n+    log(debug, cx.sess.span_str(fcx.sp));\n \n     let (ident, ret_ty, id) = alt cx.ast_map.get(fcx.id) {\n       ast_map::node_item(item) {\n@@ -746,8 +746,8 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n       }\n     };\n \n-    log_full(core::debug, ident);\n-    log_full(core::debug, id);\n+    log(debug, ident);\n+    log(debug, id);\n \n     let path = str::connect(fcx.lcx.path + [ident], \"::\");\n "}, {"sha": "51858e2b8b7bf312e770df8f9fb7ac2e9f5c39c8", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -20,7 +20,7 @@ fn fn_usage_expr(expr: @ast::expr,\n             alt ctx.tcx.def_map.find(expr.id) {\n               some(ast::def_fn(_, ast::unsafe_fn.)) |\n               some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n-                log_full(core::error, (\"expr=\", expr_to_str(expr)));\n+                log(error, (\"expr=\", expr_to_str(expr)));\n                 ctx.tcx.sess.span_fatal(\n                     expr.span,\n                     \"unsafe functions can only be called\");"}, {"sha": "393c7000bce6703d8cbc1a7ebab507133eaffb23", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -447,9 +447,9 @@ fn visit_fn_block_with_scope(_e: @env, decl: fn_decl, blk: ast::blk,\n                              span: span, id: node_id,\n                              sc: scopes, v: vt<scopes>) {\n     let scope = scope_fn_expr(decl, id, []);\n-    log_full(core::debug, (\"scope=\", scope));\n+    log(debug, (\"scope=\", scope));\n     visit::visit_fn_block(decl, blk, span, id, cons(scope, @sc), v);\n-    log_full(core::debug, (\"unscope\"));\n+    log(debug, (\"unscope\"));\n }\n \n fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {"}, {"sha": "5df9f3fed8b5813eec5f4959f9607f2d6dcb5deb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1120,7 +1120,7 @@ fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {\n fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n                   is_obj_body: bool) ->\n    @tydesc_info {\n-    log_full(core::debug, \"+++ declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n+    log(debug, \"+++ declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n     let ccx = cx.ccx;\n     let llsize;\n     let llalign;\n@@ -1156,7 +1156,7 @@ fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n           mutable cmp_glue: none::<ValueRef>,\n           ty_params: ty_params,\n           is_obj_body: is_obj_body};\n-    log_full(core::debug, \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n+    log(debug, \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n     ret info;\n }\n "}, {"sha": "40c13d64b4a74ab505f155cef5338a8ad1cf250e", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -516,7 +516,7 @@ fn add_span_comment(bcx: @block_ctxt, sp: span, text: str) {\n     let ccx = bcx_ccx(bcx);\n     if (!ccx.sess.get_opts().no_asm_comments) {\n         let s = text + \" (\" + ccx.sess.span_str(sp) + \")\";\n-        log_full(core::debug, s);\n+        log(debug, s);\n         add_comment(bcx, s);\n     }\n }"}, {"sha": "65988ef917e4f304c537da166504a73aaa749299", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -15,12 +15,12 @@ fn collect_ids_block(b: blk, rs: @mutable [node_id]) { *rs += [b.node.id]; }\n fn collect_ids_stmt(s: @stmt, rs: @mutable [node_id]) {\n     alt s.node {\n       stmt_decl(_, id) {\n-        log_full(core::debug, \"node_id \" + int::str(id));\n+        log(debug, \"node_id \" + int::str(id));\n         log_stmt(*s);;\n         *rs += [id];\n       }\n       stmt_expr(_, id) {\n-        log_full(core::debug, \"node_id \" + int::str(id));\n+        log(debug, \"node_id \" + int::str(id));\n         log_stmt(*s);;\n         *rs += [id];\n       }\n@@ -44,7 +44,7 @@ fn node_ids_in_fn(body: blk, rs: @mutable [node_id]) {\n \n fn init_vecs(ccx: crate_ctxt, node_ids: [node_id], len: uint) {\n     for i: node_id in node_ids {\n-        log_full(core::debug, int::str(i) + \" |-> \" + uint::str(len));\n+        log(debug, int::str(i) + \" |-> \" + uint::str(len));\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "baba4faa463ac42045564b914e909f5ee682eb9b", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -78,7 +78,7 @@ fn tritv_to_str(fcx: fn_ctxt, v: tritv::t) -> str {\n }\n \n fn log_tritv(fcx: fn_ctxt, v: tritv::t) {\n-    log_full(core::debug, tritv_to_str(fcx, v));\n+    log(debug, tritv_to_str(fcx, v));\n }\n \n fn first_difference_string(fcx: fn_ctxt, expected: tritv::t, actual: tritv::t)\n@@ -94,7 +94,7 @@ fn first_difference_string(fcx: fn_ctxt, expected: tritv::t, actual: tritv::t)\n }\n \n fn log_tritv_err(fcx: fn_ctxt, v: tritv::t) {\n-    log_full(core::error, tritv_to_str(fcx, v));\n+    log(error, tritv_to_str(fcx, v));\n }\n \n fn tos(v: [uint]) -> str {\n@@ -107,9 +107,9 @@ fn tos(v: [uint]) -> str {\n     ret rslt;\n }\n \n-fn log_cond(v: [uint]) { log_full(core::debug, tos(v)); }\n+fn log_cond(v: [uint]) { log(debug, tos(v)); }\n \n-fn log_cond_err(v: [uint]) { log_full(core::error, tos(v)); }\n+fn log_cond_err(v: [uint]) { log(error, tos(v)); }\n \n fn log_pp(pp: pre_and_post) {\n     let p1 = tritv::to_vec(pp.precondition);\n@@ -147,11 +147,11 @@ fn log_states_err(pp: pre_and_post_state) {\n     log_cond_err(p2);\n }\n \n-fn print_ident(i: ident) { log_full(core::debug, \" \" + i + \" \"); }\n+fn print_ident(i: ident) { log(debug, \" \" + i + \" \"); }\n \n fn print_idents(&idents: [ident]) {\n     if vec::len::<ident>(idents) == 0u { ret; }\n-    log_full(core::debug, \"an ident: \" + vec::pop::<ident>(idents));\n+    log(debug, \"an ident: \" + vec::pop::<ident>(idents));\n     print_idents(idents);\n }\n \n@@ -550,7 +550,7 @@ fn match_args(fcx: fn_ctxt, occs: @mutable [pred_args],\n     #debug(\"match_args: looking at %s\",\n            constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, occ));\n     for pd: pred_args in *occs {\n-        log_full(core::debug,\n+        log(debug,\n                  \"match_args: candidate \" + pred_args_to_str(pd));\n         fn eq(p: inst, q: inst) -> bool { ret p.node == q.node; }\n         if ty::args_eq(eq, pd.node.args, occ) { ret pd.node.bit_num; }\n@@ -765,7 +765,7 @@ fn replace(subst: subst, d: pred_args) -> [constr_arg_general_<inst>] {\n     for (constr_arg_general_<tup(ident, def_id)> p in rslt) {\n         alt (p) {\n             case (carg_ident(?p)) {\n-                log_full(core::error, p._0);\n+                log(error, p._0);\n             }\n             case (_) {}\n         }\n@@ -980,7 +980,7 @@ fn args_mention<T>(args: [@constr_arg_use], q: fn([T], node_id) -> bool,\n         alt (a.node) {\n             case (carg_ident(?p1)) {\n                 auto res = q(s, p1._1);\n-                log_full(core::error, (res));\n+                log(error, (res));\n                 res\n                     }\n             case (_)               { false }"}, {"sha": "0b2f9a3e9a557311fab6d2008701e8274e7299c2", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -72,7 +72,7 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n \n \n     #debug(\"check_states_stmt:\");\n-    log_full(core::debug, print::pprust::stmt_to_str(*s));\n+    log(debug, print::pprust::stmt_to_str(*s));\n     #debug(\"prec = \");\n     log_tritv(fcx, prec);\n     #debug(\"pres = \");"}, {"sha": "b853643362b85e58894a43d8bc2ce24a4755aeb7", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,7 +13,7 @@ type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n fn collect_local(loc: @local, cx: ctxt, v: visit::vt<ctxt>) {\n     pat_bindings(loc.node.pat) {|p|\n         let ident = alt p.node { pat_bind(id, _) { id } };\n-        log_full(core::debug, \"collect_local: pushing \" + ident);;\n+        log(debug, \"collect_local: pushing \" + ident);;\n         *cx.cs += [respan(loc.span, ninit(p.id, ident))];\n     };\n     visit::visit_local(loc, cx, v);\n@@ -65,7 +65,7 @@ fn find_locals(tcx: ty::ctxt,\n \n fn add_constraint(tcx: ty::ctxt, c: sp_constr, next: uint, tbl: constr_map) ->\n    uint {\n-    log_full(core::debug,\n+    log(debug,\n              constraint_to_str(tcx, c) + \" |-> \" + uint::str(next));\n     alt c.node {\n       ninit(id, i) { tbl.insert(local_def(id), cinit(next, c.span, i)); }"}, {"sha": "83acaaa590251fff05858e9fce5ab939def0291f", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -276,7 +276,7 @@ fn handle_var(fcx: fn_ctxt, rslt: pre_and_post, id: node_id, name: ident) {\n }\n \n fn handle_var_def(fcx: fn_ctxt, rslt: pre_and_post, def: def, name: ident) {\n-    log_full(core::debug, (\"handle_var_def: \", def, name));\n+    log(debug, (\"handle_var_def: \", def, name));\n     alt def {\n       def_local(d_id, _) | def_arg(d_id, _) {\n         use_var(fcx, d_id.node);\n@@ -302,7 +302,7 @@ fn find_pre_post_expr_fn_upvars(fcx: fn_ctxt, e: @expr) {\n     let rslt = expr_pp(fcx.ccx, e);\n     clear_pp(rslt);\n     for def in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n-        log_full(core::debug, (\"handle_var_def: def=\", def));\n+        log(debug, (\"handle_var_def: def=\", def));\n         handle_var_def(fcx, rslt, def.def, \"upvar\");\n     }\n }\n@@ -358,7 +358,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         vec::iter(cap_clause.moves, use_cap_item);\n \n         vec::iter(cap_clause.moves) { |cap_item|\n-            log_full(core::debug, (\"forget_in_postcond: \", cap_item));\n+            log(debug, (\"forget_in_postcond: \", cap_item));\n             forget_in_postcond(fcx, e.id, cap_item.id);\n         }\n       }"}, {"sha": "492570e9123faad1d936dbce56f5e85415059072", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -621,7 +621,7 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n \n     /*\n-        log_full(core::error, (\"[\" + fcx.name + \"]\"));\n+        log(error, (\"[\" + fcx.name + \"]\"));\n         #error(\"*At beginning: stmt = \");\n         log_stmt_err(*s);\n         #error(\"*prestate = \");\n@@ -653,7 +653,7 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n                             #error(\"poststate =\");\n                             log_tritv_err(fcx, stmt_ann.states.poststate);\n                             #error(\"changed =\");\n-                            log_full(core::error, changed);\n+                            log(error, changed);\n             */\n \n             ret changed;\n@@ -727,7 +727,7 @@ fn find_pre_post_state_block(fcx: fn_ctxt, pres0: prestate, b: blk) -> bool {\n         #error(\"post:\");\n         log_tritv_err(fcx, post);\n         #error(\"changed = \");\n-        log_full(core::error, changed);\n+        log(error, changed);\n     */\n \n     ret changed;\n@@ -774,7 +774,7 @@ fn find_pre_post_state_fn(fcx: fn_ctxt,\n \n     /*\n         #error(\"find_pre_post_state_fn\");\n-        log_full(core::error, changed);\n+        log(error, changed);\n         fcx.ccx.tcx.sess.span_note(f_body.span, fcx.name);\n     */\n "}, {"sha": "0530b743eefdf143789158afbb70448789d674b4", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -29,7 +29,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n                     \"first argument to #fmt must be a \" + \"string literal.\");\n     let fmtspan = args[0].span;\n     #debug(\"Format string:\");\n-    log_full(core::debug, fmt);\n+    log(debug, fmt);\n     fn parse_fmt_err_(cx: ext_ctxt, sp: span, msg: str) -> ! {\n         cx.span_fatal(sp, msg);\n     }\n@@ -252,7 +252,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n     }\n     fn log_conv(c: conv) {\n         alt c.param {\n-          some(p) { log_full(core::debug, \"param: \" + int::to_str(p, 10u)); }\n+          some(p) { log(debug, \"param: \" + int::to_str(p, 10u)); }\n           _ { #debug(\"param: none\"); }\n         }\n         for f: flag in c.flags {\n@@ -265,20 +265,20 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n             }\n         }\n         alt c.width {\n-          count_is(i) { log_full(core::debug,\n+          count_is(i) { log(debug,\n                                  \"width: count is \" + int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log_full(core::debug,\n+            log(debug,\n                      \"width: count is param \" + int::to_str(i, 10u));\n           }\n           count_is_next_param. { #debug(\"width: count is next param\"); }\n           count_implied. { #debug(\"width: count is implied\"); }\n         }\n         alt c.precision {\n-          count_is(i) { log_full(core::debug,\n+          count_is(i) { log(debug,\n                                  \"prec: count is \" + int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log_full(core::debug,\n+            log(debug,\n                      \"prec: count is param \" + int::to_str(i, 10u));\n           }\n           count_is_next_param. { #debug(\"prec: count is next param\"); }"}, {"sha": "338c29ddb071eb61d718107e8f1438544088272b", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -580,7 +580,7 @@ fn read_line_comments(rdr: reader, code_to_the_left: bool) -> cmnt {\n     let lines: [str] = [];\n     while rdr.curr() == '/' && rdr.next() == '/' {\n         let line = read_one_line_comment(rdr);\n-        log_full(core::debug, line);\n+        log(debug, line);\n         lines += [line];\n         consume_non_eol_whitespace(rdr);\n     }\n@@ -603,7 +603,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: [str], s: str, col: uint) {\n             s1 = str::slice(s, col, str::byte_len(s));\n         } else { s1 = \"\"; }\n     } else { s1 = s; }\n-    log_full(core::debug, \"pushing line: \" + s1);\n+    log(debug, \"pushing line: \" + s1);\n     lines += [s1];\n }\n \n@@ -707,7 +707,7 @@ fn gather_comments_and_literals(cm: codemap::codemap, path: str,\n         if is_lit(tok.tok) {\n             literals += [{lit: rdr.get_str_from(tok.bpos), pos: tok.chpos}];\n         }\n-        log_full(core::debug, \"tok: \" + token::to_str(rdr, tok.tok));\n+        log(debug, \"tok: \" + token::to_str(rdr, tok.tok));\n         first_read = false;\n     }\n     ret {cmnts: comments, lits: literals};"}, {"sha": "3f2c11dd821875ad0f9bbc39804bf1b62034df6f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -165,8 +165,7 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n                  \"assert\", \"claim\", \"native\", \"fn\", \"lambda\", \"pure\",\n                  \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n-                 \"log\", \"log_err\", \"log_full\",\n-                 \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\"] {\n+                 \"log\", \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\"] {\n         words.insert(word, ());\n     }\n     words\n@@ -910,10 +909,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             hi = e.span.hi;\n             ex = ast::expr_fail(some(e));\n         } else { ex = ast::expr_fail(none); }\n-    } else if\n-        (eat_word(p, \"log_full\")\n-         || eat_word(p, \"log\")\n-         || eat_word(p, \"log_err\")) {\n+    } else if eat_word(p, \"log\") {\n         expect(p, token::LPAREN);\n         let lvl = parse_expr(p);\n         expect(p, token::COMMA);"}, {"sha": "02e34ccee888e5a1a90e67f643a3417566641d19", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -413,7 +413,7 @@ obj printer(out: io::writer,\n     fn print(x: token, L: int) {\n         #debug(\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n                space);\n-        log_full(core::debug, buf_str(token, size, left, right, 6u));\n+        log(debug, buf_str(token, size, left, right, 6u));\n         alt x {\n           BEGIN(b) {\n             if L > space {"}, {"sha": "ac032ffa76a234344d999c80884f720d48522ad7", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -916,7 +916,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n           1 { word_nbsp(s, \"log\"); print_expr(s, expr); }\n           0 { word_nbsp(s, \"log_err\"); print_expr(s, expr); }\n           2 {\n-            word_nbsp(s, \"log_full\");\n+            word_nbsp(s, \"log\");\n             popen(s);\n             print_expr(s, lexp);\n             word(s.s, \",\");"}, {"sha": "03a6136656a09c99b3f3a0349bda8adf512e156d", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -36,38 +36,38 @@ fn field_exprs(fields: [ast::field]) -> [@ast::expr] {\n }\n \n fn log_expr(e: ast::expr) {\n-    log_full(core::debug, print::pprust::expr_to_str(@e));\n+    log(debug, print::pprust::expr_to_str(@e));\n }\n \n fn log_expr_err(e: ast::expr) {\n-    log_full(core::error, print::pprust::expr_to_str(@e));\n+    log(error, print::pprust::expr_to_str(@e));\n }\n \n fn log_ty_err(t: @ty) {\n-    log_full(core::error, print::pprust::ty_to_str(t));\n+    log(error, print::pprust::ty_to_str(t));\n }\n \n fn log_pat_err(p: @pat) {\n-    log_full(core::error, print::pprust::pat_to_str(p));\n+    log(error, print::pprust::pat_to_str(p));\n }\n \n fn log_block(b: ast::blk) {\n-    log_full(core::debug, print::pprust::block_to_str(b));\n+    log(debug, print::pprust::block_to_str(b));\n }\n \n fn log_block_err(b: ast::blk) {\n-    log_full(core::error, print::pprust::block_to_str(b));\n+    log(error, print::pprust::block_to_str(b));\n }\n \n fn log_item_err(i: @ast::item) {\n-    log_full(core::error, print::pprust::item_to_str(i));\n+    log(error, print::pprust::item_to_str(i));\n }\n fn log_stmt(st: ast::stmt) {\n-    log_full(core::debug, print::pprust::stmt_to_str(st));\n+    log(debug, print::pprust::stmt_to_str(st));\n }\n \n fn log_stmt_err(st: ast::stmt) {\n-    log_full(core::error, print::pprust::stmt_to_str(st));\n+    log(error, print::pprust::stmt_to_str(st));\n }\n \n fn has_nonlocal_exits(b: ast::blk) -> bool {"}, {"sha": "6ffe1bda6b83499b0a1edc1629e992ff4c0f9d85", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -33,6 +33,6 @@ fn path_div() -> str { \":\" }\n fn path_div() -> str { \";\" }\n \n fn logv(config: config, s: str) {\n-    log_full(core::debug, s);\n+    log(debug, s);\n     if config.verbose { io::stdout().write_line(s); }\n }"}, {"sha": "91cb090b83cd8b31d0510ee808762fd3b898bb50", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -242,9 +242,9 @@ fn check_variants_T<copy T>(\n \n     if L < 100u {\n         under(float::min(L, 20u)) {|i|\n-            log_full(core::error, \"Replacing... #\" + uint::str(i));\n+            log(error, \"Replacing... #\" + uint::str(i));\n             under(float::min(L, 30u)) {|j|\n-                log_full(core::error, \"With... \" + stringifier(@things[j]));\n+                log(error, \"With... \" + stringifier(@things[j]));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the\n                 // string for stability is easier and ok for now.\n@@ -298,8 +298,8 @@ fn check_whole_compiler(code: str, suggested_filename_prefix: str, allow_running\n         removeDirIfExists(suggested_filename_prefix + \".dSYM\");\n       }\n       failed(s) {\n-        log_full(core::error, \"check_whole_compiler failure: \" + s);\n-        log_full(core::error, \"Saved as: \" + filename);\n+        log(error, \"check_whole_compiler failure: \" + s);\n+        log(error, \"Saved as: \" + filename);\n       }\n     }\n }\n@@ -320,7 +320,7 @@ fn check_running(exe_filename: str) -> happiness {\n     let p = std::run::program_output(\"/Users/jruderman/scripts/timed_run_rust_program.py\", [exe_filename]);\n     let comb = p.out + \"\\n\" + p.err;\n     if str::byte_len(comb) > 1u {\n-        log_full(core::error, \"comb comb comb: \" + comb);\n+        log(error, \"comb comb comb: \" + comb);\n     }\n \n     if contains(comb, \"Assertion failed: (0), function alloc, file ../src/rt/rust_obstack.cpp\") {\n@@ -369,7 +369,7 @@ fn check_compiling(filename: str) -> happiness {\n         } else if contains(p.err, \"cast<Ty>() argument of incompatible type!\") {\n             known_bug(\"https://github.com/graydon/rust/issues/973\")\n         } else {\n-            log_full(core::error, \"Stderr: \" + p.err);\n+            log(error, \"Stderr: \" + p.err);\n             failed(\"Unfamiliar error message\")\n         }\n     } else if p.status == 0 {\n@@ -382,7 +382,7 @@ fn check_compiling(filename: str) -> happiness {\n     } else if contains(p.out, \"trans_rec expected a rec but found _|_\") {\n         known_bug(\"https://github.com/graydon/rust/issues/924\")\n     } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n-        log_full(core::error, \"Stdout: \" + p.out);\n+        log(error, \"Stdout: \" + p.out);\n         failed(\"Looks like an llvm assertion failure\")\n \n     } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n@@ -396,14 +396,14 @@ fn check_compiling(filename: str) -> happiness {\n     } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(\"Something unimplemented\")\n     } else if contains(p.out, \"internal compiler error\") {\n-        log_full(core::error, \"Stdout: \" + p.out);\n+        log(error, \"Stdout: \" + p.out);\n         failed(\"internal compiler error\")\n \n     } else if contains(p.out, \"error:\") {\n         cleanly_rejected(\"rejected with span_error\")\n     } else {\n-        log_full(core::error, p.status);\n-        log_full(core::error, \"!Stdout: \" + p.out);\n+        log(error, p.status);\n+        log(error, \"!Stdout: \" + p.out);\n         failed(\"What happened?\")\n     }\n }\n@@ -543,7 +543,7 @@ fn check_variants(files: [str], cx: context) {\n             cont;\n         }\n \n-        log_full(core::error, \"check_variants: \" + file);\n+        log(error, \"check_variants: \" + file);\n         let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n         let crate =\n             parser::parse_crate_from_source_str("}, {"sha": "29ab66872ce57751204f089cc596b8eea997c60d", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -91,9 +91,9 @@ fn vec_to_str(v: [int]) -> str {\n }\n \n fn show_edits(a: [int], xs: [int]) {\n-    log_full(core::error, \"=== Edits of \" + vec_to_str(a) + \" ===\");\n+    log(error, \"=== Edits of \" + vec_to_str(a) + \" ===\");\n     let b = vec_edits(a, xs);\n-    ix(0u, 1u, len(b)) {|i| log_full(core::error, vec_to_str(b[i])); }\n+    ix(0u, 1u, len(b)) {|i| log(error, vec_to_str(b[i])); }\n }\n \n fn demo_edits() {"}, {"sha": "de5f9e66f28ec54fbbe367c16e4315fb85651665", "filename": "src/fuzzer/rand_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -69,13 +69,13 @@ fn main()\n {\n     let r = rand::mk_rng();\n \n-    log_full(core::error, under(r, 5u));\n-    log_full(core::error, choice(r, [10, 20, 30]));\n-    log_full(core::error, if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" });\n+    log(error, under(r, 5u));\n+    log(error, choice(r, [10, 20, 30]));\n+    log(error, if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" });\n \n     let a = [mutable 1, 2, 3];\n     shuffle(r, a);\n-    log_full(core::error, a);\n+    log(error, a);\n \n     let i = 0u;\n     let v = [\n@@ -86,8 +86,8 @@ fn main()\n     let w = weighted_vec(v);\n \n     while i < 1000u {\n-        log_full(core::error, \"Immed: \" + weighted_choice(r, v));\n-        log_full(core::error, \"Fast: \" + choice(r, w));\n+        log(error, \"Immed: \" + weighted_choice(r, v));\n+        log(error, \"Fast: \" + choice(r, w));\n         i += 1u;\n     }\n }"}, {"sha": "6cb3ada6a8808fd6b10b460cb90e8375305a518c", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -287,7 +287,7 @@ Example:\n > let i = 0;\n > while i < len(s) {\n >   let {ch, next} = char_range_at(s, i);\n->   log_full(core::debug, ch);\n+>   log(debug, ch);\n >   i = next;\n > }\n "}, {"sha": "503a336f7cd49d1bfe1dd437354f3f03cb8d48fe", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -22,7 +22,7 @@ Tasks may execute in parallel and are scheduled automatically by the runtime.\n Example:\n \n > spawn(\"Hello, World\", fn (&&msg: str) {\n->   log_full(core::debug, msg);\n+>   log(debug, msg);\n > });\n \n */"}, {"sha": "deb31f59ba0dcbc703bc9a0c6c40ef433cfabca7", "filename": "src/libstd/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -292,7 +292,7 @@ obj fd_buf_writer(fd: fd_t, res: option::t<@fd_res>) {\n             let nout = os::libc::write(fd, vbuf, len);\n             if nout < 0 {\n                 #error(\"error dumping buffer\");\n-                log_full(core::error, sys::last_os_error());\n+                log(error, sys::last_os_error());\n                 fail;\n             }\n             count += nout as uint;\n@@ -334,7 +334,7 @@ fn file_buf_writer(path: str,\n                                            os::libc_constants::S_IWUSR)\n                     });\n     ret if fd < 0i32 {\n-        log_full(core::error, sys::last_os_error());\n+        log(error, sys::last_os_error());\n         result::err(\"error opening \" + path)\n     } else {\n         result::ok(fd_buf_writer(fd, option::some(@fd_res(fd))))"}, {"sha": "543b3f5109d6a5fa7c068845ab99ceb4f819563e", "filename": "src/snapshots.txt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,10 @@\n+S 2011-12-22 ccb5b6f\n+  winnt-i386 35be60caa888246e9710bd34ccbbe8a322d3c6de\n+  linux-i386 8f88a285fa86613e268503a310e32cb053c2e300\n+  macos-i386 c4cdd0a41fedb6d58d2a503ee3000c51d7878679\n+  linux-x86_64 9c78b05bf4fba7d42e1d41c92790d018f98336ef\n+  macos-x86_64 40d3bce53fefcd07e4f35b926e89fac2213792c1\n+\n S 2011-12-22 3b61064\n   winnt-i386 800fdc0e15f6917ff4318812edac611ca0162b5e\n   linux-i386 468d13787022414aeb7f8ca755a4559691728a49"}, {"sha": "eaab9d6b7310616f708e56ac9c5dc20640085dbf", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -47,10 +47,10 @@ fn ninetynine(it: block(int)) {\n \n fn main() {\n     ninetynine {|n|\n-        log_full(core::debug, sub(b1(), n));\n-        log_full(core::debug, sub(b2(), n - 1));\n+        log(debug, sub(b1(), n));\n+        log(debug, sub(b2(), n - 1));\n         #debug(\"\");\n     };\n-    log_full(core::debug, b7());\n-    log_full(core::debug, b8());\n+    log(debug, b7());\n+    log(debug, b8());\n }"}, {"sha": "6d8a17cc93218a5b47c5eb39e11106965d30bc73", "filename": "src/test/bench/99bob-simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2F99bob-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2F99bob-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-simple.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -43,10 +43,10 @@ fn sub(t: str, n: int) -> str {\n fn main() {\n     let n: int = 99;\n     while n > 0 {\n-        log_full(core::debug, sub(b1(), n));\n-        log_full(core::debug, sub(b2(), n - 1));\n+        log(debug, sub(b1(), n));\n+        log(debug, sub(b2(), n - 1));\n         #debug(\"\"); n -= 1;\n     }\n-    log_full(core::debug, b7());\n-    log_full(core::debug, sub(b8(), 99));\n+    log(debug, b7());\n+    log(debug, sub(b8(), 99));\n }"}, {"sha": "c833cc92f800c7a84c3e45a3632de4024d0cc3ab", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -43,7 +43,7 @@ fn fannkuch(n: int) -> int {\n \n         let go = true;\n         while go {\n-            if r == n { log_full(core::debug, checksum); ret flips; }\n+            if r == n { log(debug, checksum); ret flips; }\n             let p0 = perm1[0];\n             i = 0;\n             while i < r { let j = i + 1; perm1[i] = perm1[j]; i = j; }"}, {"sha": "a47c0548a271962b14cdf9330c3ff2e6fb14996b", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -44,31 +44,31 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n }\n \n fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n-    log_full(core::debug, \">\" + id + \" \" + desc);\n+    log(debug, \">\" + id + \" \" + desc);\n     let rng = myrandom(std::rand::mk_rng().next());\n     let op: str = \"\";\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, select_random(rng.next(100u32), genelist) as u8);\n         if str::byte_len(op) >= LINE_LENGTH() {\n-            log_full(core::debug, op);\n+            log(debug, op);\n             op = \"\";\n         }\n     }\n-    if str::byte_len(op) > 0u { log_full(core::debug, op); }\n+    if str::byte_len(op) > 0u { log(debug, op); }\n }\n \n fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n-    log_full(core::debug, \">\" + id + \" \" + desc);\n+    log(debug, \">\" + id + \" \" + desc);\n     let op: str = \"\";\n     let sl: uint = str::byte_len(s);\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, s[i % sl]);\n         if str::byte_len(op) >= LINE_LENGTH() {\n-            log_full(core::debug, op);\n+            log(debug, op);\n             op = \"\";\n         }\n     }\n-    if str::byte_len(op) > 0u { log_full(core::debug, op); }\n+    if str::byte_len(op) > 0u { log(debug, op); }\n }\n \n fn acid(ch: char, prob: u32) -> aminoacids { ret {ch: ch, prob: prob}; }"}, {"sha": "afb1b4a9289917991def9008e9e5fa2db81a123d", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,6 +14,6 @@ fn fib(n: int) -> int {\n fn main() {\n     assert (fib(8) == 21);\n     assert (fib(15) == 610);\n-    log_full(core::debug, fib(8));\n-    log_full(core::debug, fib(15));\n+    log(debug, fib(8));\n+    log(debug, fib(15));\n }"}, {"sha": "136d1057d2038ccc784e1a792242c2b7e1b0e7ff", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -20,11 +20,11 @@ fn main() {\n \n \n     for n: int in inputs {\n-        log_full(core::debug, NBodySystem::energy(bodies));\n+        log(debug, NBodySystem::energy(bodies));\n \n         let i: int = 0;\n         while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n-        log_full(core::debug, NBodySystem::energy(bodies));\n+        log(debug, NBodySystem::energy(bodies));\n     }\n }\n "}, {"sha": "3ba6a6f7e2e92f4d02ecf5329e65ee8f974e38d9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -87,7 +87,7 @@ fn stress(num_tasks: int) {\n fn main(argv: [str]) {\n     if vec::len(argv) == 1u {\n         assert (fib(8) == 21);\n-        log_full(core::debug, fib(8));\n+        log(debug, fib(8));\n     } else {\n         // Interactive mode! Wooo!!!!\n         let opts = parse_opts(argv);"}, {"sha": "cf8986aa0f7337509cd0f421c628127699573abd", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -88,7 +88,7 @@ mod map_reduce {\n                 send V>(-map: mapper<K1, K2, V>,\n                           -ctrl: chan<ctrl_proto<K2, V>>,\n                     -input: K1) {\n-        // log_full(core::error, \"map_task \" + input);\n+        // log(error, \"map_task \" + input);\n         let intermediates = treemap::init();\n \n         fn emit<send K2,\n@@ -172,15 +172,15 @@ mod map_reduce {\n               }\n               find_reducer(k, cc) {\n                 let c;\n-                // log_full(core::error, \"finding reducer for \" + k);\n+                // log(error, \"finding reducer for \" + k);\n                 alt treemap::find(reducers, k) {\n                   some(_c) {\n-                    // log_full(core::error,\n+                    // log(error,\n                     // \"reusing existing reducer for \" + k);\n                     c = _c;\n                   }\n                   none. {\n-                    // log_full(core::error, \"creating new reducer for \" + k);\n+                    // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n                     let r = reduce, kk = k;\n                     tasks +=\n@@ -229,7 +229,7 @@ fn main(argv: [str]) {\n     let elapsed = stop - start;\n     elapsed /= 1000000u64;\n \n-    log_full(core::error, \"MapReduce completed in \"\n+    log(error, \"MapReduce completed in \"\n              + u64::str(elapsed) + \"ms\");\n }\n "}, {"sha": "26d40d9c731fabb3e91f40bd5b03e56730102662", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -78,7 +78,7 @@ mod map_reduce {\n \n     fn map_task(args: (chan<ctrl_proto>, str)) {\n         let (ctrl, input) = args;\n-        // log_full(core::error, \"map_task \" + input);\n+        // log(error, \"map_task \" + input);\n         let intermediates = map::new_str_hash();\n \n         fn emit(im: map::hashmap<str, chan<reduce_proto>>,\n@@ -158,15 +158,15 @@ mod map_reduce {\n               }\n               find_reducer(k, cc) {\n                 let c;\n-                // log_full(core::error, \"finding reducer for \" + k);\n+                // log(error, \"finding reducer for \" + k);\n                 alt reducers.find(k) {\n                   some(_c) {\n-                    // log_full(core::error,\n+                    // log(error,\n                     // \"reusing existing reducer for \" + k);\n                     c = _c;\n                   }\n                   none. {\n-                    // log_full(core::error, \"creating new reducer for \" + k);\n+                    // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n                     tasks +=\n                         [task::spawn_joinable((k, chan(p)), reduce_task)];\n@@ -201,7 +201,7 @@ fn main(argv: [str]) {\n     let elapsed = stop - start;\n     elapsed /= 1000000u64;\n \n-    log_full(core::error, \"MapReduce completed in \"\n+    log(error, \"MapReduce completed in \"\n              + u64::str(elapsed) + \"ms\");\n }\n "}, {"sha": "0845b33eacfec99041467cab5b39ad0c67bfe19a", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,6 +7,6 @@ fn my_fail() -> ! { fail; }\n fn main() {\n     alt true { false { my_fail(); } true { } }\n \n-    log_full(core::debug, x);\n+    log(debug, x);\n     let x: int;\n }"}, {"sha": "b0b4c0da5e30f8d695463386503e0c5740520e30", "filename": "src/test/compile-fail/and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fand-init.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let i: int;\n \n-    log_full(core::debug, false && { i = 5; true });\n-    log_full(core::debug, i);\n+    log(debug, false && { i = 5; true });\n+    log(debug, i);\n }"}, {"sha": "764cb7bdb41c80c2c8ee4790520339f3a59b483b", "filename": "src/test/compile-fail/anon-obj-overriding-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -18,5 +18,5 @@ fn main() {\n             my_a\n         };\n \n-    log_full(core::error, my_b.foo());\n+    log(error, my_b.foo());\n }"}, {"sha": "112066d1dea5c6167192bc6811ef4a34017dfc84", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,11 +7,11 @@ fn main() {\n     let a: clam = {x: @1, y: @2};\n     let b: clam = {x: @10, y: @20};\n     let z: int = a.x + b.y;\n-    log_full(core::debug, z);\n+    log(debug, z);\n     assert (z == 21);\n     let forty: fish = {a: @40};\n     let two: fish = {a: @2};\n     let answer: int = forty.a + two.a;\n-    log_full(core::debug, answer);\n+    log(debug, answer);\n     assert (answer == 42);\n }"}, {"sha": "8fb6a9e873705df230ffdc1131a7b29862139e2f", "filename": "src/test/compile-fail/bad-bang-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,6 +2,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { log_full(core::debug, 3); }\n+fn bad_bang(i: uint) -> ! { log(debug, 3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "c849c17a9cbb2ffe632c72f097789cf2db0fb840", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:expected str but found int\n \n const i: str = 10;\n-fn main() { log_full(core::debug, i); }\n+fn main() { log(debug, i); }"}, {"sha": "0246580db1a26ffd40f6e2a31aaa0fdaf329f6c2", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: attempted dynamic environment-capture\n fn foo() {\n     let x: int;\n-    fn bar() { log_full(core::debug, x); }\n+    fn bar() { log(debug, x); }\n }\n fn main() { foo(); }"}, {"sha": "9c50d29fa4eb1ad04a29f39257c0fdd74dca2b66", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: attempted dynamic environment-capture\n fn foo(x: int) {\n-    fn bar() { log_full(core::debug, x); }\n+    fn bar() { log(debug, x); }\n }\n fn main() { foo(2); }"}, {"sha": "673a22ce11ab6f9477d7f85a3ca9a68193a765ce", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: attempted dynamic environment-capture\n obj foo(x: int) {\n     fn mth() {\n-        fn bar() { log_full(core::debug, x); }\n+        fn bar() { log(debug, x); }\n     }\n }\n "}, {"sha": "d70d935f602a3177063ed2ce8f69221d2ed3c12d", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,4 +2,4 @@\n \n mod m1 { }\n \n-fn main(args: [str]) { log_full(core::debug, m1::a); }\n+fn main(args: [str]) { log(debug, m1::a); }"}, {"sha": "da6cfb652b5c078f8b3390e677302e1d54d277d0", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,4 +4,4 @@ mod m1 {\n     mod a { }\n }\n \n-fn main(args: [str]) { log_full(core::debug, m1::a); }\n+fn main(args: [str]) { log(debug, m1::a); }"}, {"sha": "2985d98a34aac4ee553b39c6fde992d9f2cd30a6", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -12,5 +12,5 @@ fn coerce(b: block()) -> fn() {\n \n fn main() {\n     let i = 8;\n-    let f = coerce(block () { log_full(core::error, i); });\n+    let f = coerce(block () { log(error, i); });\n     f(); }"}, {"sha": "63a2e9bcb391cd5f603482742454a9cf958c9690", "filename": "src/test/compile-fail/block-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,6 +3,6 @@\n fn lol(f: block()) -> block() { ret f; }\n fn main() {\n     let i = 8;\n-    let f = lol(block () { log_full(core::error, i); });\n+    let f = lol(block () { log(error, i); });\n     f();\n }"}, {"sha": "dc14053084dd217560bab3820d515c61befbb884", "filename": "src/test/compile-fail/block-require-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n // error-pattern: not all control paths return\n fn force(f: block() -> int) -> int { f() }\n-fn main() { log_full(core::error, force({|| })); }\n+fn main() { log(error, force({|| })); }"}, {"sha": "4d7f73b341c79c9d3b4ca71d6d6757f87a6ccf75", "filename": "src/test/compile-fail/block-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: Unsatisfied precondition constraint\n \n fn force(f: block()) { f(); }\n-fn main() { let x: int; force(block () { log_full(core::error, x); }); }\n+fn main() { let x: int; force(block () { log(error, x); }); }"}, {"sha": "b5e8d2a909fdca73966c34eba2f8a13231f0a3bc", "filename": "src/test/compile-fail/break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,9 +6,9 @@ fn foo() -> int {\n \n     do  { i = 0; break; x = 0; } while x != 0\n \n-    log_full(core::debug, x);\n+    log(debug, x);\n \n     ret 17;\n }\n \n-fn main() { log_full(core::debug, foo()); }\n+fn main() { log(debug, foo()); }"}, {"sha": "262e536b44542cbc69f74f15335691234bbc1c8f", "filename": "src/test/compile-fail/break-uninit2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,9 +6,9 @@ fn foo() -> int {\n \n     do  { i = 0; break; x = 0; } while 1 != 2\n \n-    log_full(core::debug, x);\n+    log(debug, x);\n \n     ret 17;\n }\n \n-fn main() { log_full(core::debug, foo()); }\n+fn main() { log(debug, foo()); }"}, {"sha": "bed10a12de5644ba4c630957c0b0490a4235a43d", "filename": "src/test/compile-fail/constrained-type-missing-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let a: int = 1;\n     let b: int = 2;\n     let c: ordered_range = {low: a, high: b};\n-    log_full(core::debug, c.low);\n+    log(debug, c.low);\n }"}, {"sha": "c37ccd29f0db33160b7036ded8bf63c178774d2d", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,4 +2,4 @@\n \n resource foo(i: int) { }\n \n-fn main() { let x <- foo(10); let y = x; log_full(core::error, x); }\n+fn main() { let x <- foo(10); let y = x; log(error, x); }"}, {"sha": "bc7ec4491eeab10917847c24a16b37740201227a", "filename": "src/test/compile-fail/dead-code-be.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@\n \n // error-pattern: dead\n \n-fn f(caller: str) { log_full(core::debug, caller); }\n+fn f(caller: str) { log(debug, caller); }\n \n fn main() { be f(\"main\"); #debug(\"Paul is dead\"); }\n "}, {"sha": "3d9ec1dfad3db6fb23436be1b018e401e81df3ff", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@\n \n // error-pattern: dead\n \n-fn f(caller: str) { log_full(core::debug, caller); }\n+fn f(caller: str) { log(debug, caller); }\n \n fn main() { ret f(\"main\"); #debug(\"Paul is dead\"); }\n "}, {"sha": "20bd01fb2acf0a64354ccfa92bfc19848bf6b5ed", "filename": "src/test/compile-fail/do-while-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let y: int = 42;\n     let x: int;\n     do  {\n-        log_full(core::debug, y);\n+        log(debug, y);\n         do  { do  { do  { x <- y; } while true } while true } while true\n     } while true\n }"}, {"sha": "b044d56944bb0238fa1bf58f9b676da9fb5b034e", "filename": "src/test/compile-fail/do-while-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: Unsatisfied precondition constraint (for example, even(y\n \n-fn print_even(y: int) : even(y) { log_full(core::debug, y); }\n+fn print_even(y: int) : even(y) { log(debug, y); }\n \n pure fn even(y: int) -> bool { true }\n "}, {"sha": "bda344587d9eb9fa550434dc63f95b482c802be6", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,8 +1,8 @@\n // error-pattern: unresolved name\n mod foo {\n     export x;\n-    fn x(y: int) { log_full(core::debug, y); }\n-    fn z(y: int) { log_full(core::debug, y); }\n+    fn x(y: int) { log(debug, y); }\n+    fn z(y: int) { log(debug, y); }\n }\n \n fn main() { foo::z(10); }"}, {"sha": "aadbecc40a7c185600b19c7ab617d78c387a691c", "filename": "src/test/compile-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,5 +5,5 @@ import str::*;\n fn main() {\n     let a: uint = 4u;\n     let b: uint = 1u;\n-    log_full(core::error, safe_slice(\"kitties\", a, b));\n+    log(error, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "5eb7541a520339fa381351e80caecefefec5b75e", "filename": "src/test/compile-fail/fn-expr-type-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     // Typestate should work even in a lambda. we should reject this program.\n     let f = fn () -> int { let i: int; ret i; };\n-    log_full(core::error, f());\n+    log(error, f());\n }"}, {"sha": "8e35bc341b1a10bbdf565ebd415aad6dcae2a372", "filename": "src/test/compile-fail/fn-expr-typestate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let j = fn () -> int { let i: int; ret i; }();\n-    log_full(core::error, j);\n+    log(error, j);\n }"}, {"sha": "cd6ebeb126b2a463e3fc726627d1c3986bc6b8b5", "filename": "src/test/compile-fail/if-check-precond-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,7 +5,7 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn print_even(x: uint) : even(x) { log_full(core::debug, x); }\n+fn print_even(x: uint) : even(x) { log(debug, x); }\n \n fn foo(x: uint) { if check even(x) { fail; } else { print_even(x); } }\n "}, {"sha": "0ff469a871c080c488f41f15523f9698b73514cb", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let a = if true { true };\n-    log_full(core::debug, a);\n+    log(debug, a);\n }\n\\ No newline at end of file"}, {"sha": "0a733687aa3373b17030a4940a0f2b6a9fde4486", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,10 +6,10 @@ fn f2(x: block()) { x(); }\n fn main() {\n     let i = 0;\n     let ctr = lambda () -> int { f2({|| i = i + 1; }); ret i; };\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, i);\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, i);\n }"}, {"sha": "6ba1cfc5401e9b25913f9b4bf998722f2778e647", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,10 +3,10 @@\n fn main() {\n     let i = 0;\n     let ctr = lambda () -> int { i = i + 1; ret i; };\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, ctr());\n-    log_full(core::error, i);\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, ctr());\n+    log(error, i);\n }"}, {"sha": "711e9a7095c16e55fbea6e36232c3b7838706763", "filename": "src/test/compile-fail/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: Unsatisfied precondition constraint\n fn test(-foo: int) { assert (foo == 10); }\n \n-fn main() { let x = 10; test(x); log_full(core::debug, x); }\n+fn main() { let x = 10; test(x); log(debug, x); }"}, {"sha": "2a03395f1c161a96fa0496bcc98825b0f007caef", "filename": "src/test/compile-fail/no-constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     // the next statement, since it's not true in the\n     // prestate.\n     let d <- a;\n-    log_full(core::debug, safe_slice(\"kitties\", b, d));\n+    log(debug, safe_slice(\"kitties\", b, d));\n }"}, {"sha": "4347044d2a334616b57c0ad541546d934e8ac3b8", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,5 +4,5 @@ use std;\n import std::os;\n \n fn main() {\n-  log_full(core::debug, { x: 1 } as int);\n+  log(debug, { x: 1 } as int);\n }"}, {"sha": "08b261a2ccd9644ff5d1c1757ca6799ce580bf02", "filename": "src/test/compile-fail/nonsense-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,4 +10,4 @@ fn enum_chars(start: u8, end: u8) : uint::le(start, end) -> [char] {\n     ret r;\n }\n \n-fn main() { log_full(core::debug, enum_chars('a' as u8, 'z' as u8)); }\n+fn main() { log(debug, enum_chars('a' as u8, 'z' as u8)); }"}, {"sha": "778a9d8cb7bc3b29862b742dfc6bfe2a4abcfbf3", "filename": "src/test/compile-fail/or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2For-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2For-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-init.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let i: int;\n \n-    log_full(core::debug, false || { i = 5; true });\n-    log_full(core::debug, i);\n+    log(debug, false || { i = 5; true });\n+    log(debug, i);\n }"}, {"sha": "005a29cc435c21aab1679d4a15cdc3a72fb4bf8d", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:literal out of range\n \n-fn main() { log_full(core::debug, 300u8); }\n+fn main() { log(debug, 300u8); }"}, {"sha": "8190b74efc76cc7f46747682857a751e52a540fd", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,7 +10,7 @@ tag bar { t1((), option::t<[int]>); t2; }\n fn foo(t: bar) {\n     alt t {\n       t1(_, some::<int>(x)) {\n-        log_full(core::debug, x);\n+        log(debug, x);\n       }\n       _ { fail; }\n     }"}, {"sha": "9244b4b73b3f34bbdf54c92312496ea949f506ad", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,7 +10,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~{y: r(i)};\n         let z = x;\n-        log_full(core::debug, x);\n+        log(debug, x);\n     }\n-    log_full(core::error, *i);\n+    log(error, *i);\n }\n\\ No newline at end of file"}, {"sha": "fad12e24a7cdd5800c2ee742ae30ca71e90a6c96", "filename": "src/test/compile-fail/rec-missing-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,4 +6,4 @@\n \n type point = {x: int, y: int};\n \n-fn main() { let p: point = {x: 10}; log_full(core::debug, p.y); }\n+fn main() { let p: point = {x: 10}; log(debug, p.y); }"}, {"sha": "6cdaafb22a5747bb76a40993322c0be64c3204aa", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,13 +1,13 @@\n // error-pattern: copying a noncopyable value\n \n resource my_resource(x: int) {\n-    log_full(core::error, x);\n+    log(error, x);\n }\n \n fn main() {\n     {\n         let a = {x: 0, y: my_resource(20)};\n         let b = {x: 2 with a};\n-        log_full(core::error, (a, b));\n+        log(error, (a, b));\n     }\n }"}, {"sha": "403e0bb07cb78134ab561b7ee03f1160957c8848", "filename": "src/test/compile-fail/reference-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = [];\n     let &y = x;\n     while true {\n-        log_full(core::error, y);\n+        log(error, y);\n         x = [1];\n     }\n }"}, {"sha": "3456a4f6a1af5f1e4167cd0a52bb05caa726d3c9", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,5 +6,5 @@ fn test(f: lambda(uint) -> uint) -> uint {\n \n fn main() {\n     let f = sendfn(x: uint) -> uint { ret 4u; };\n-    log_full(core::debug, test(f));\n+    log(debug, test(f));\n }\n\\ No newline at end of file"}, {"sha": "97e4515d98d3657ea20e138380713cb12959165a", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,5 +6,5 @@ resource r(b: bool) {\n fn main() {\n     let i <- ~r(true);\n     let j = i;\n-    log_full(core::debug, i);\n+    log(debug, i);\n }\n\\ No newline at end of file"}, {"sha": "fdc9072fd930e7c159a7ad10c2130498927a90d8", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let r1 <- [~r(i1)];\n     let r2 <- [~r(i2)];\n     f(r1, r2);\n-    log_full(core::debug, (r2, *i1));\n-    log_full(core::debug, (r1, *i2));\n+    log(debug, (r2, *i1));\n+    log(debug, (r1, *i2));\n }\n\\ No newline at end of file"}, {"sha": "ec1e5c01ffb7b4c506fde3abe6067ae72fabefd2", "filename": "src/test/compile-fail/unsafe-alias-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,5 +4,5 @@ fn whoknows(x: @mutable {mutable x: int}) { x.x = 10; }\n \n fn main() {\n     let box = @mutable {mutable x: 1};\n-    alt *box { x { whoknows(box); log_full(core::error, x); } }\n+    alt *box { x { whoknows(box); log(error, x); } }\n }"}, {"sha": "905a6a922f16a0e6a1cd1d5eae9c81147330ca58", "filename": "src/test/compile-fail/unsafe-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:may alias with argument\n \n-fn foo(x: {mutable x: int}, f: fn@()) { log_full(core::debug, x); }\n+fn foo(x: {mutable x: int}, f: fn@()) { log(debug, x); }\n \n fn whoknows(x: @mutable {mutable x: int}) { *x = {mutable x: 10}; }\n "}, {"sha": "56adb4411ba698d45ad4588970524dbbda3d22b1", "filename": "src/test/compile-fail/unsafe-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,5 +4,5 @@ tag foo { left({mutable x: int}); right(bool); }\n \n fn main() {\n     let x = left({mutable x: 10});\n-    alt x { left(i) { x = right(false); log_full(core::debug, i); } _ { } }\n+    alt x { left(i) { x = right(false); log(debug, i); } _ { } }\n }"}, {"sha": "05bad8ee833da30d0095545cfd341f9ee09871e5", "filename": "src/test/compile-fail/unsafe-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let v: [mutable {mutable x: int}] = [mutable {mutable x: 1}];\n-    for x in v { v[0] = {mutable x: 2}; log_full(core::debug, x); }\n+    for x in v { v[0] = {mutable x: 2}; log(debug, x); }\n }"}, {"sha": "3ab7fe974a534cb2f704ffba8d60930cf74fbf51", "filename": "src/test/compile-fail/unsafe-mutable-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,4 +5,4 @@ fn f(a: {mutable x: int}, &b: {mutable x: int}) -> int {\n     ret a.x + b.x;\n }\n \n-fn main() { let i = {mutable x: 4}; log_full(core::debug, f(i, i)); }\n+fn main() { let i = {mutable x: 4}; log(debug, f(i, i)); }"}, {"sha": "6beb247e931225c10aaf2691bd52c6212218efbc", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,5 +4,5 @@ use std;\n import std::os;\n \n fn main() {\n-  log_full(core::debug, 1.0 as os::libc::FILE); // Can't cast float to native.\n+  log(debug, 1.0 as os::libc::FILE); // Can't cast float to native.\n }"}, {"sha": "d4d42b555381904a4074d2dd0b4258b745b082a6", "filename": "src/test/compile-fail/use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,2 +1,2 @@\n // error-pattern: Unsatisfied precondition constraint (for example, init(x\n-fn main() { let x = @5; let y <- x; log_full(core::debug, *x); }\n+fn main() { let x = @5; let y <- x; log(debug, *x); }"}, {"sha": "7dc3f7b4a329b5ebdeeab980c0916c2b2bd029bb", "filename": "src/test/compile-fail/use-after-send.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,16 +1,16 @@\n // error-pattern: Unsatisfied precondition constraint\n fn send<send T>(ch: _chan<T>, -data: T) {\n-    log_full(core::debug, ch);\n-    log_full(core::debug, data);\n+    log(debug, ch);\n+    log(debug, data);\n     fail;\n }\n type _chan<T> = int;\n \n-// Tests that \"log_full(core::debug, message);\" is flagged as using\n+// Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it\n fn test00_start(ch: _chan<int>, message: int, count: int) {\n     send(ch, message);\n-    log_full(core::debug, message);\n+    log(debug, message);\n }\n \n fn main() { fail; }"}, {"sha": "be9494536993e75c0a41b829fda98bd9a7624116", "filename": "src/test/compile-fail/use-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log_full(core::debug, x); }\n+fn foo(x: int) { log(debug, x); }\n \n fn main() { let x: int; if 1 > 2 { x = 10; } foo(x); }"}, {"sha": "b824567133a0020a9fb56f02d6296dc20ae017e1", "filename": "src/test/compile-fail/use-uninit-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log_full(core::debug, x); }\n+fn foo(x: int) { log(debug, x); }\n \n fn main() {\n     let x: int;"}, {"sha": "5c3c9a3cda763ae6eae0d4b19b1ec554f8fc2b80", "filename": "src/test/compile-fail/use-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log_full(core::debug, x); }\n+fn foo(x: int) { log(debug, x); }\n \n fn main() { let x: int; foo(x); }"}, {"sha": "df697c8af67bcd777ecb38fe537d4b8b2e62db5e", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@\n \n fn f() {\n     let v = [1];\n-    log_full(core::debug, v.some_field_name); //type error\n+    log(debug, v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "ce1aae2fa8a238677fece0d3f12243436ed09dc4", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let i <- [r(0)];\n     let j <- [r(1)];\n     let k = i + j;\n-    log_full(core::debug, j);\n+    log(debug, j);\n }"}, {"sha": "287ee2d684cc579957c09ad3c08cf167ee390dcb", "filename": "src/test/compile-fail/while-loop-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let y: int = 42;\n     let x: int;\n     while true {\n-        log_full(core::debug, y);\n+        log(debug, y);\n         while true {\n             while true {\n                 while true { x <- y; }"}, {"sha": "aa31a3857dce0190f79fe84dc19e8a7fce78d51f", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: Unsatisfied precondition constraint (for example, even(y\n \n-fn print_even(y: int) : even(y) { log_full(core::debug, y); }\n+fn print_even(y: int) : even(y) { log(debug, y); }\n \n pure fn even(y: int) -> bool { true }\n "}, {"sha": "adef5da4d0e6d8cd81a89d2cac925c976f3080df", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n+fn my_err(s: str) -> ! { log(error, s); fail \"quux\"; }\n fn main() { 3u == my_err(\"bye\"); }"}, {"sha": "83368cd1a07ceaf8bbefcf9cccc8570e6d773099", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n+fn my_err(s: str) -> ! { log(error, s); fail \"quux\"; }\n fn main() { my_err(\"bye\") == 3u; }"}, {"sha": "a5d14f143039ce045fd1d76e517bb9dd5bd2b40e", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:woe\n-fn f(a: int) { log_full(core::debug, a); }\n+fn f(a: int) { log(debug, a); }\n \n fn main() { f(fail \"woe\"); }"}, {"sha": "40e259a0446a030b5aa18b6d7874e315b908d546", "filename": "src/test/run-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffn-constraint.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let a: uint = 4u;\n     let b: uint = 1u;\n     check (le(a, b));\n-    log_full(core::error, safe_slice(\"kitties\", a, b));\n+    log(error, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "31e95d5c385dfc56fce74b02c82eb319854bda23", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ pure fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if check even(x) {\n-        log_full(core::debug, x);\n+        log(debug, x);\n     } else {\n         fail \"Number is odd\";\n     }"}, {"sha": "71b7323240dbaf1082d73c1813cf65e6af666247", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n+fn my_err(s: str) -> ! { log(error, s); fail \"quux\"; }\n fn main() { if my_err(\"bye\") { } }"}, {"sha": "ca9e0482519213d70113dd70111505b2b4389529", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n     let i: int =\n         alt some::<int>(3) { none::<int>. { fail } some::<int>(_) { 5 } };\n-    log_full(core::debug, i);\n+    log(debug, i);\n }"}, {"sha": "d6af174757cecd67101b700098ffbd05fbd1b3a9", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,12 +13,12 @@ fn foo(s: @int) {\n \n     alt x {\n       make_t(y) {\n-        log_full(core::debug, y); // ref up then down\n+        log(debug, y); // ref up then down\n \n       }\n       _ { #debug(\"?\"); fail; }\n     }\n-    log_full(core::debug, dbg::refcount(s));\n+    log(debug, dbg::refcount(s));\n     assert (dbg::refcount(s) == count + 1u);\n }\n \n@@ -27,6 +27,6 @@ fn main() {\n \n     foo(s); // ref up then down\n \n-    log_full(core::debug, dbg::refcount(s));\n+    log(debug, dbg::refcount(s));\n     assert (dbg::refcount(s) == 1u);\n }"}, {"sha": "462e6acda4e047422df386c1df01b182f0a01a23", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,9 +11,9 @@ tag color {\n fn process(c: color) -> int {\n     let x: int;\n     alt c {\n-      rgb(r, _, _) { #debug(\"rgb\"); log_full(core::debug, r); x = r; }\n-      rgba(_, _, _, a) { #debug(\"rgba\"); log_full(core::debug, a); x = a; }\n-      hsl(_, s, _) { #debug(\"hsl\"); log_full(core::debug, s); x = s; }\n+      rgb(r, _, _) { #debug(\"rgb\"); log(debug, r); x = r; }\n+      rgba(_, _, _, a) { #debug(\"rgba\"); log(debug, a); x = a; }\n+      hsl(_, s, _) { #debug(\"hsl\"); log(debug, s); x = s; }\n     }\n     ret x;\n }"}, {"sha": "7ed3bc4505d888a316e57b6bce5c2dba6c4e5dab", "filename": "src/test/run-pass/argv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n fn main(args: [str]) {\n     let vs: [str] = [\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"];\n     let vvs: [[str]] = [args, vs];\n-    for vs: [str] in vvs { for s: str in vs { log_full(core::debug, s); } }\n+    for vs: [str] in vvs { for s: str in vs { log(debug, s); } }\n }"}, {"sha": "d86349346bd4b00718ac85ea2b8aab3020ad3162", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let a: int = 10;\n-    log_full(core::debug, a);\n+    log(debug, a);\n     assert (a * (a - 1) == 90);\n }"}, {"sha": "f815c2e4801d377371e84ed643b6013f2a6e5331", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     assert (i32_b << 1 == i32_b << 1);\n     assert (i32_b >> 1 == i32_b >> 1);\n     assert (i32_b & i32_b << 1 == 0);\n-    log_full(core::debug, i32_b | i32_b << 1);\n+    log(debug, i32_b | i32_b << 1);\n     assert (i32_b | i32_b << 1 == 0x30303030);\n }"}, {"sha": "ed8c71aecbadee88e82caa2427882ac351c79442", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,6 +5,6 @@\n fn f<copy T, copy U>(x: T, y: U) -> {a: T, b: U} { ret {a: x, b: y}; }\n \n fn main() {\n-    log_full(core::debug, f({x: 3, y: 4, z: 5}, 4).a.x);\n-    log_full(core::debug, f(5, 6).a);\n+    log(debug, f({x: 3, y: 4, z: 5}, 4).a.x);\n+    log(debug, f(5, 6).a);\n }"}, {"sha": "efeb8b88b156cf5c3d14bf6f11fa64017975ee03", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -21,8 +21,8 @@ fn a(c: chan<int>) {\n fn k(x: int) -> int { ret 15; }\n \n fn g(x: int, y: str) -> int {\n-    log_full(core::debug, x);\n-    log_full(core::debug, y);\n+    log(debug, x);\n+    log(debug, y);\n     let z: int = k(1);\n     ret z;\n }\n@@ -35,7 +35,7 @@ fn main() {\n     task::spawn(chan(p), b);\n     let x: int = 10;\n     x = g(n, s);\n-    log_full(core::debug, x);\n+    log(debug, x);\n     n = recv(p);\n     n = recv(p);\n     // FIXME: use signal-channel for this."}, {"sha": "e12caefe1401c41fa695f72a65d3b8a409600d3c", "filename": "src/test/run-pass/bind-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-generic.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n fn wrapper3<copy T>(i: T, j: int) {\n-    log_full(core::debug, i);\n-    log_full(core::debug, j);\n+    log(debug, i);\n+    log(debug, j);\n     // This is a regression test that the spawn3 thunk to wrapper3\n     // correctly finds the value of j\n     assert j == 123456789;"}, {"sha": "9c2ff78248caca90d6db357ef596d1165ac66270", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -18,8 +18,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    log_full(core::debug, a);\n-    log_full(core::debug, b);\n+    log(debug, a);\n+    log(debug, b);\n     assert (b == 1);\n     assert (a == 2);\n     assert (!0xf0 & 0xff == 0xf);"}, {"sha": "85bb68e7387bd2c0448a70402d72f6b545412eca", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     fn as_buf<T>(s: str, f: block(str) -> T) -> T { f(s) }\n-    as_buf(\"foo\", {|foo: str| -> () log_full(core::error, foo);});\n+    as_buf(\"foo\", {|foo: str| -> () log(error, foo);});\n }"}, {"sha": "0f09aae2409b6064855c91101c5574c994566aa1", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,12 +4,12 @@ fn main() {\n     let v = [1, 2, 3, 4, 5, 6, 7];\n     let odds = 0;\n     iter_vec(v, {|i|\n-        log_full(core::error, i);\n+        log(error, i);\n         if i % 2 == 1 {\n             odds += 1;\n         }\n-        log_full(core::error, odds);\n+        log(error, odds);\n     });\n-    log_full(core::error, odds);\n+    log(error, odds);\n     assert (odds == 4);\n }"}, {"sha": "bec21791c9055130dc66a8684b2bb3bbfa93631b", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,10 +5,10 @@ fn main() {\n     let sum = 0;\n     iter_vec(v, {|i|\n         iter_vec(v, {|j|\n-            log_full(core::error, i * j);\n+            log(error, i * j);\n             sum += i * j;\n         });\n     });\n-    log_full(core::error, sum);\n+    log(error, sum);\n     assert (sum == 225);\n }"}, {"sha": "0532f0133836fe08036008851eb1d3cef37fb615", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         vec::map2([1, 2, 3, 4, 5],\n                   [true, false, false, true, true],\n                   {|i, b| if b { -i } else { i } });\n-    log_full(core::error, v);\n+    log(error, v);\n     assert (v == [-1, 2, 3, -4, -5]);\n }"}, {"sha": "8172cae6b47e070db09a3b0092b4df396b1294b2", "filename": "src/test/run-pass/bug-862.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbug-862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fbug-862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-862.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,4 +4,4 @@ fn f(i: int, j: int) : p(j) -> int { j }\n \n fn g(i: int, j: int) : p(j) -> int { f(i, j) }\n \n-fn main() { let x = 1; check (p(x)); log_full(core::debug, g(x, x)); }\n+fn main() { let x = 1; check (p(x)); log(debug, g(x, x)); }"}, {"sha": "14b21a242bddd890f3054f4ebbefdcba7c7bc819", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let t = task::spawn(chan(p), child);\n     let y = recv(p);\n     #error(\"received\");\n-    log_full(core::error, y);\n+    log(error, y);\n     assert (y == 10);\n }\n "}, {"sha": "02ba8f16996da283c42c818b5ec175e1d1ae920b", "filename": "src/test/run-pass/command-line-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main(args: [str]) { log_full(core::debug, args[0]); }\n+fn main(args: [str]) { log(debug, args[0]); }"}, {"sha": "854711286ddb50a30e8778ba3cf5e219fdfe176a", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -27,7 +27,7 @@ fn foo(x: int) -> int {\n \n fn main() {\n     let x: int = 2 + 2;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     #debug(\"hello, world\");\n-    log_full(core::debug, 10);\n+    log(debug, 10);\n }"}, {"sha": "6f33b369620cfd9e18b38bfb6c95d3a5c8c2638f", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,4 +2,4 @@\n \n const i: int = 10;\n \n-fn main() { log_full(core::debug, i); }\n+fn main() { log(debug, i); }"}, {"sha": "7848d9b9bd5392f9c9c826d3f1f640835b4b34e0", "filename": "src/test/run-pass/constraint-prop-expr-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let c: uint = 17u;\n     check (le(a, b));\n     c <- a;\n-    log_full(core::debug, safe_slice(\"kitties\", c, b));\n+    log(debug, safe_slice(\"kitties\", c, b));\n }"}, {"sha": "347ea13f0051d5c93863af6033513949ce53e16e", "filename": "src/test/run-pass/constraint-prop-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c <- a;\n-    log_full(core::debug, safe_slice(\"kitties\", c, b));\n+    log(debug, safe_slice(\"kitties\", c, b));\n }"}, {"sha": "748044893ed5f53928c7f5c9e2412a16bc3548fb", "filename": "src/test/run-pass/constraint-prop-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 1u;\n     check (le(b, a));\n     b <-> a;\n-    log_full(core::debug, safe_slice(\"kitties\", a, b));\n+    log(debug, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "f15c0f4121d77000c6dfa1f2c39c6edd61f63efd", "filename": "src/test/run-pass/constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c = b;\n-    log_full(core::debug, safe_slice(\"kitties\", a, c));\n+    log(debug, safe_slice(\"kitties\", a, c));\n }"}, {"sha": "2784b16b99a2e1230271fadede8df8294a2dac99", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let x = @mutable 5; *x = 1000; log_full(core::debug, *x); }\n+fn main() { let x = @mutable 5; *x = 1000; log(debug, *x); }"}, {"sha": "768f2aba16d6f853296d25109bd8cefda68b37ea", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,8 +11,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        log_full(core::debug, *b1);\n-        log_full(core::debug, *b2);\n+        log(debug, *b1);\n+        log(debug, *b2);\n         ret *b1 == *b2;\n     }\n     let eq = bind compare_box(_, _);"}, {"sha": "8942201fa9c26efeab988044fadf126f9e57063d", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,8 +10,8 @@ fn test_generic<copy T>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        log_full(core::debug, *b1);\n-        log_full(core::debug, *b2);\n+        log(debug, *b1);\n+        log(debug, *b2);\n         ret *b1 == *b2;\n     }\n     let eq = bind compare_box(_, _);"}, {"sha": "082a7d65bca1296a7d593de25e2d3137f6bde155", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,7 +5,7 @@\n fn f(x: int) -> int {\n     // #debug(\"in f:\");\n \n-    log_full(core::debug, x);\n+    log(debug, x);\n     if x == 1 {\n         // #debug(\"bottoming out\");\n \n@@ -16,7 +16,7 @@ fn f(x: int) -> int {\n         let y: int = x * f(x - 1);\n         // #debug(\"returned\");\n \n-        log_full(core::debug, y);\n+        log(debug, y);\n         ret y;\n     }\n }"}, {"sha": "c9cfbe40e0eaeb2261065dd20ba05d8737e4e218", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     fn foo(n: float) -> float { ret n + 0.12345; }\n     let n: float = 0.1;\n     let m: float = foo(n);\n-    log_full(core::debug, m);\n+    log(debug, m);\n }"}, {"sha": "d13e08c7ed3b918accf6b4ccb3143c7afa2b7336", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     let pi = 3.1415927;\n-    log_full(core::debug, -pi * (pi + 2.0 / pi) - pi * 5.0);\n+    log(debug, -pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n         #debug(\"yes\");"}, {"sha": "68106f298617f2ccfb8c566982f2e09b7bf86647", "filename": "src/test/run-pass/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-constraint.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let a: uint = 1u;\n     let b: uint = 4u;\n     check (le(a, b));\n-    log_full(core::debug, safe_slice(\"kitties\", a, b));\n+    log(debug, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "5919ee91b441e08b0b8689574e283ac2524a107c", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     let j: int = 0;\n     pairs() {|p|\n         let (_0, _1) = p;\n-        log_full(core::debug, _0);\n-        log_full(core::debug, _1);\n+        log(debug, _0);\n+        log(debug, _1);\n         assert (_0 + 10 == i);\n         i += 1;\n         j = _1;"}, {"sha": "90356d15b4b8a7de609d65fcb38cfe35da8bf822", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,9 +4,9 @@\n // -*- rust -*-\n fn main() {\n     let sum: int = 0;\n-    first_ten {|i| #debug(\"main\"); log_full(core::debug, i); sum = sum + i; };\n+    first_ten {|i| #debug(\"main\"); log(debug, i); sum = sum + i; };\n     #debug(\"sum\");\n-    log_full(core::debug, sum);\n+    log(debug, sum);\n     assert (sum == 45);\n }\n "}, {"sha": "f44ef370e2ccdb7880510a540d0fd032afb36e53", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,6 +5,6 @@ fn id<copy T>(t: T) -> T { ret t; }\n fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    log_full(core::debug, *actual);\n+    log(debug, *actual);\n     assert (*expected == *actual);\n }"}, {"sha": "4746a588a56b8f8e14ce70cb2fe35cafedfb1332", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,6 +5,6 @@ fn id<send T>(t: T) -> T { ret t; }\n fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(expected);\n-    log_full(core::debug, *actual);\n+    log(debug, *actual);\n     assert (*expected == *actual);\n }"}, {"sha": "032a5c3f9d69e28ba6f6b3dbdc4429367b1fa0ce", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,8 +11,8 @@ fn f<copy T>(t: T) -> {a: T, b: T} {\n \n fn main() {\n     let b = f::<int>(10);\n-    log_full(core::debug, b.a);\n-    log_full(core::debug, b.b);\n+    log(debug, b.a);\n+    log(debug, b.b);\n     assert (b.a == 10);\n     assert (b.b == 10);\n }"}, {"sha": "4f0bd22944ede3647134cd476a5b60fbcdb36a8b", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,4 +2,4 @@\n \n fn f<T>(x: @T) -> @T { ret x; }\n \n-fn main() { let x = f(@3); log_full(core::debug, *x); }\n+fn main() { let x = f(@3); log(debug, *x); }"}, {"sha": "7333350e3b22d4b92ffa9ae71e7e2448f2cb402e", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n \n fn f<copy T>(x: ~T) -> ~T { ret x; }\n \n-fn main() { let x = f(~3); log_full(core::debug, *x); }\n+fn main() { let x = f(~3); log(debug, *x); }"}, {"sha": "ac2d6f5aad337938d37c2a63d8bb469b7851ee02", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,14 +14,14 @@ fn main() {\n     let p: triple = {x: 65, y: 66, z: 67};\n     let q: triple = {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    log_full(core::debug, y);\n+    log(debug, y);\n     assert (x == y);\n     b = id::<char>(a);\n-    log_full(core::debug, b);\n+    log(debug, b);\n     assert (a == b);\n     q = id::<triple>(p);\n     x = p.z;\n     y = q.z;\n-    log_full(core::debug, y);\n+    log(debug, y);\n     assert (x == y);\n }"}, {"sha": "2186b12022d7ffe8ee7668574c95d67ef017a29b", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -9,9 +9,9 @@ fn main() {\n \n     let h: handle<rgb> = handle::<rgb>({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n     #debug(\"constructed object\");\n-    log_full(core::debug, h.get().x);\n-    log_full(core::debug, h.get().y);\n-    log_full(core::debug, h.get().z);\n+    log(debug, h.get().x);\n+    log(debug, h.get().y);\n+    log(debug, h.get().z);\n     assert (h.get().x == 1 as u8);\n     assert (h.get().y == 2 as u8);\n     assert (h.get().z == 3 as u8);"}, {"sha": "ab693787182dcf04311b70b2ae823dbf36467422", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,9 +13,9 @@ obj buf<copy T>(data: {_0: T, _1: T, _2: T}) {\n fn main() {\n     let b: buf<int> = buf::<int>({_0: 1, _1: 2, _2: 3});\n     #debug(\"constructed object\");\n-    log_full(core::debug, b.get(0));\n-    log_full(core::debug, b.get(1));\n-    log_full(core::debug, b.get(2));\n+    log(debug, b.get(0));\n+    log(debug, b.get(1));\n+    log(debug, b.get(2));\n     assert (b.get(0) == 1);\n     assert (b.get(1) == 2);\n     assert (b.get(2) == 3);"}, {"sha": "7b03e75ef082b0c59bfc87aa50da8b90505472a5", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,12 +6,12 @@ tag noption<T> { some(T); }\n \n fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    alt nop { some::<int>(n) { log_full(core::debug, n); assert (n == 5); } }\n+    alt nop { some::<int>(n) { log(debug, n); assert (n == 5); } }\n     let nop2: noption<{x: int, y: int}> = some({x: 17, y: 42});\n     alt nop2 {\n       some(t) {\n-        log_full(core::debug, t.x);\n-        log_full(core::debug, t.y);\n+        log(debug, t.x);\n+        log(debug, t.y);\n         assert (t.x == 17);\n         assert (t.y == 42);\n       }"}, {"sha": "b648583424124b14d92fd22a7438e682d8617614", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,7 +2,7 @@\n \n fn mk() -> int { ret 1; }\n \n-fn chk(&&a: int) { log_full(core::debug, a); assert (a == 1); }\n+fn chk(&&a: int) { log(debug, a); assert (a == 1); }\n \n fn apply<T>(produce: fn() -> T, consume: fn(T)) { consume(produce()); }\n "}, {"sha": "2b5f81d526d5432e88095fe0d8780281978e8b9d", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,7 +1,7 @@\n fn get_third<copy T>(t: (T, T, T)) -> T { let (_, _, x) = t; ret x; }\n \n fn main() {\n-    log_full(core::debug, get_third((1, 2, 3)));\n+    log(debug, get_third((1, 2, 3)));\n     assert (get_third((1, 2, 3)) == 3);\n     assert (get_third((5u8, 6u8, 7u8)) == 7u8);\n }"}, {"sha": "8670a53ac335e11befacc9bd6a9b7528fe723a63", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -52,7 +52,7 @@ mod map_reduce {\n                 send(ctrl, find_reducer(str::bytes(key), chan(p)));\n                 #error(\"receiving\");\n                 c = recv(p);\n-                log_full(core::error, c);\n+                log(error, c);\n                 im.insert(key, c);\n               }\n             }"}, {"sha": "11ebbcea822fb32be5dc01687f6e6cf751e28fb5", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let i: int = if false { fail } else { 5 };\n-    log_full(core::debug, i);\n+    log(debug, i);\n }"}, {"sha": "f3d35f52a3aa450dc9963aa6eed041e86cceece9", "filename": "src/test/run-pass/if-check-precond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check-precond.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn print_even(x: uint) : even(x) { log_full(core::debug, x); }\n+fn print_even(x: uint) : even(x) { log(debug, x); }\n \n fn foo(x: uint) { if check even(x) { print_even(x); } else { fail; } }\n "}, {"sha": "59766164018409e200e5b79f12b0e3e2f89a1397", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ pure fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if check even(x) {\n-        log_full(core::debug, x);\n+        log(debug, x);\n     } else {\n         fail;\n     }"}, {"sha": "b8a74753895f9124ee5cb83692e0faaefe26036b", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,9 +3,9 @@ use std;\n fn main() {\n     import vec;\n     import vec::to_mut;\n-    log_full(core::debug, vec::len(to_mut([1, 2])));\n+    log(debug, vec::len(to_mut([1, 2])));\n     {\n         import vec::*;\n-        log_full(core::debug, len([2]));\n+        log(debug, len([2]));\n     }\n }"}, {"sha": "49a576ac1b17320cc296b4871d67a9ef0155bef6", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n mod foo {\n-    fn x(y: int) { log_full(core::debug, y); }\n+    fn x(y: int) { log(debug, y); }\n }\n \n mod bar {"}, {"sha": "f7d9c761af7478d94956964979a4c297729759db", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@ import foo::x;\n import z = foo::x;\n \n mod foo {\n-    fn x(y: int) { log_full(core::debug, y); }\n+    fn x(y: int) { log(debug, y); }\n }\n \n fn main() { x(10); z(10); }"}, {"sha": "0351736b2a3dfe54c7f5b5bae3c0516e25a47699", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,11 +10,11 @@ fn main() {\n     assert (v[3i8] == 3);\n     assert (v[3u32] == 3);\n     assert (v[3i32] == 3);\n-    log_full(core::debug, v[3u8]);\n+    log(debug, v[3u8]);\n     assert (s[3u] == 'd' as u8);\n     assert (s[3u8] == 'd' as u8);\n     assert (s[3i8] == 'd' as u8);\n     assert (s[3u32] == 'd' as u8);\n     assert (s[3i32] == 'd' as u8);\n-    log_full(core::debug, s[3u8]);\n+    log(debug, s[3u8]);\n }"}, {"sha": "716b9dd16db0fb9402dff5a1a9fce0e665ea249e", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -29,7 +29,7 @@ fn main() {\n \n     let x: int = recv(p);\n \n-    log_full(core::debug, x);\n+    log(debug, x);\n \n     assert (x == 42);\n "}, {"sha": "2c0a2ae7afc719547bd65d81c59d959a5fc2b690", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -28,7 +28,7 @@ fn packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n             break;\n         }\n         #debug(\"sending non-empty buffer of length\");\n-        log_full(core::debug, vec::len(data));\n+        log(debug, vec::len(data));\n         send(msg, received(data));\n         #debug(\"sent non-empty buffer\");\n     }\n@@ -51,7 +51,7 @@ fn main() {\n           closed. { #debug(\"Got close message\"); break; }\n           received(data) {\n             #debug(\"Got data. Length is:\");\n-            log_full(core::debug, vec::len::<u8>(data));\n+            log(debug, vec::len::<u8>(data));\n           }\n         }\n     }"}, {"sha": "c01457ed491365f2a75604cef3ba93c496549a87", "filename": "src/test/run-pass/issue-898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fissue-898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-898.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@ fn even(&&e: int) -> bool {\n }\n \n fn log_if<T>(c: fn(T)->bool, e: T) {\n-    if c(e) { log_full(core::debug, e); }\n+    if c(e) { log(debug, e); }\n }\n \n fn main() {"}, {"sha": "db54df099672bb8c6d5af16b48684e32224f34c7", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,6 +1,6 @@\n fn test_stack_assign() {\n     let s: str = \"a\";\n-    log_full(core::debug, s);\n+    log(debug, s);\n     let t: str = \"a\";\n     assert (s == t);\n     let u: str = \"b\";\n@@ -17,7 +17,7 @@ fn test_heap_assign() {\n     assert (s != u);\n }\n \n-fn test_heap_log() { let s = \"a big ol' string\"; log_full(core::debug, s); }\n+fn test_heap_log() { let s = \"a big ol' string\"; log(debug, s); }\n \n fn test_stack_add() {\n     assert (\"a\" + \"b\" == \"ab\");\n@@ -39,7 +39,7 @@ fn test_append() {\n \n     let s = \"a\";\n     s += \"b\";\n-    log_full(core::debug, s);\n+    log(debug, s);\n     assert (s == \"ab\");\n \n     let s = \"c\";"}, {"sha": "c02fc34ae8b7708fbcb77f62e67f5b07c7935c50", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -9,5 +9,5 @@ fn range(a: int, b: int, it: block(int)) {\n fn main() {\n     let sum: int = 0;\n     range(0, 100) {|x| sum += x; }\n-    log_full(core::debug, sum);\n+    log(debug, sum);\n }"}, {"sha": "87dc1e6d89be529c27a9beb18a921205990ad236", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,6 +2,6 @@\n // resolved when we finish typechecking the lambda.\n fn main() {\n     let e = @{mutable refs: [], n: 0};\n-    let f = lambda () { log_full(core::error, e.n); };\n+    let f = lambda () { log(error, e.n); };\n     e.refs += [1];\n }"}, {"sha": "0eeb306d4fda370490537601a0a6690281f3f5a4", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,6 +2,6 @@\n fn force(f: fn@()) { f() }\n fn main() {\n     let x = 7;\n-    lambda () { log_full(core::error, x); };\n-    force(lambda () { log_full(core::error, x); });\n+    lambda () { log(error, x); };\n+    force(lambda () { log(error, x); });\n }"}, {"sha": "2639e9e2a0a18049ee7c3d8ea7314a4fb9b3be17", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert (x);\n     let y: int = 10;\n-    log_full(core::debug, x || incr(y));\n+    log(debug, x || incr(y));\n     assert (y == 10);\n     if true && x { assert (true); } else { assert (false); }\n }"}, {"sha": "392665eee067150e05802988484a0773ba59952a", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn foo(x: int) { log_full(core::debug, x); }\n+fn foo(x: int) { log(debug, x); }\n \n fn main() { let x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "67ec699e070105b2c9280cf43b5df1dc3a8fe5af", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,13 +11,13 @@ fn main() {\n     task::spawn(chan(p), child);\n     y = recv(p);\n     #debug(\"received 1\");\n-    log_full(core::debug, y);\n+    log(debug, y);\n     assert (y == 10);\n \n     task::spawn(chan(p), child);\n     y = recv(p);\n     #debug(\"received 2\");\n-    log_full(core::debug, y);\n+    log(debug, y);\n     assert (y == 10);\n }\n "}, {"sha": "d36551c723e885a1fb8c2eb48522fcd64e46db18", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,8 +3,8 @@\n fn main() {\n     let x = [1, 2, 3];\n     let y = 0;\n-    for i: int in x { log_full(core::debug, i); y += i; }\n-    log_full(core::debug, y);\n+    for i: int in x { log(debug, i); y += i; }\n+    log(debug, y);\n     assert (y == 6);\n     let s = \"hello there\";\n     let i: int = 0;\n@@ -17,8 +17,8 @@ fn main() {\n         // ...\n \n         i += 1;\n-        log_full(core::debug, i);\n-        log_full(core::debug, c);\n+        log(debug, i);\n+        log(debug, c);\n     }\n     assert (i == 11);\n }"}, {"sha": "5b4ae8799c8e03be256515e2e501912543af74a4", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { if false { log_full(core::error, \"foo\" + \"bar\"); } }\n+fn main() { if false { log(error, \"foo\" + \"bar\"); } }"}, {"sha": "984683d8ad22d18693b0f9dadb6ba8909f3c72f5", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,7 +14,7 @@ fn mk<T>() -> smallintmap<T> {\n \n fn f<T,U>() {\n     let sim = mk::<U>();\n-    log_full(core::error, sim);\n+    log(error, sim);\n }\n \n fn main() {"}, {"sha": "856682dca07c5395d398a44a495abf942febc4f4", "filename": "src/test/run-pass/main-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1 +1 @@\n-fn main(args: [str]) { for s in args { log_full(core::debug, s); } }\n+fn main(args: [str]) { for s in args { log(debug, s); } }"}, {"sha": "044e77d5f1e153dc6bb8b3c47801c9709545a548", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -21,6 +21,6 @@ fn main() {\n     let child = task::spawn((comm::chan(p), 200), sub);\n     let y = comm::recv(p);\n     #debug(\"transmission complete\");\n-    log_full(core::debug, y);\n+    log(debug, y);\n     assert (y == 200);\n }"}, {"sha": "e5afe657142f58d3a92276b9d10b6cbed591bd79", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,7 +10,7 @@ fn len(v: [const int]) -> uint {\n \n fn main() {\n     let v0 = [1, 2, 3, 4, 5];\n-    log_full(core::debug, len(v0));\n+    log(debug, len(v0));\n     let v1 = [mutable 1, 2, 3, 4, 5];\n-    log_full(core::debug, len(v1));\n+    log(debug, len(v1));\n }"}, {"sha": "f0493017671684c2338dc620997405bacf03ec6b", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     grow(v);\n     grow(v);\n     let len = vec::len::<int>(v);\n-    log_full(core::debug, len);\n+    log(debug, len);\n     assert (len == 3 as uint);\n }"}, {"sha": "09481d7e08438bc6ccd29a3133bd54e808bb24d3", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ fn foo() {\n       some::<int>(x) {\n         let bar;\n         alt none::<int> { none::<int>. { bar = 5; } _ { baz(); } }\n-        log_full(core::debug, bar);\n+        log(debug, bar);\n       }\n       none::<int>. { #debug(\"hello\"); }\n     }"}, {"sha": "f1f998b376f1aacedf73cba50a12a46c3cbacbbb", "filename": "src/test/run-pass/obj-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-recursion.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ type adder =\n     };\n \n obj leaf_adder(x: int) {\n-    fn add() { #debug(\"leaf\"); log_full(core::debug, x); }\n+    fn add() { #debug(\"leaf\"); log(debug, x); }\n }\n \n obj delegate_adder(a: adder) {"}, {"sha": "5ceab392c2e914c6e0a4aa99e99bcd5faa9eb63d", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         fn get(i: int) -> u8 { ret data[i]; }\n     }\n     let b = buf([1 as u8, 2 as u8, 3 as u8]);\n-    log_full(core::debug, b.get(1));\n+    log(debug, b.get(1));\n     assert (b.get(1) == 2 as u8);\n }"}, {"sha": "75fb607b866f8935558f77a1274b07d037a41c03", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,15 +5,15 @@\n fn main() {\n     let x: int = 1;\n     x *= 2;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     assert (x == 2);\n     x += 3;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     assert (x == 5);\n     x *= x;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     assert (x == 25);\n     x /= 5;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     assert (x == 5);\n }"}, {"sha": "b2bea85db4c05a76d6551e994563265b12e5297f", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        log_full(core::debug, b);\n+        log(debug, b);\n     }\n }"}, {"sha": "e6a14e9128d5b4c5b1900dbe249c71f9176244bb", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-fn dont_call_me() { fail; log_full(core::debug, 1); }\n+fn dont_call_me() { fail; log(debug, 1); }\n \n fn main() { }"}, {"sha": "98a137d3eb57ae8915fc2e111c395ae7a5019693", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n-fn magic(+x: {a: @int}) { log_full(core::debug, x); }\n-fn magic2(+x: @int) { log_full(core::debug, x); }\n+fn magic(+x: {a: @int}) { log(debug, x); }\n+fn magic2(+x: @int) { log(debug, x); }\n \n fn main() {\n     let a = {a: @10}, b = @10;"}, {"sha": "8b2274817f74c0e2cea80f1e20ed375c7c054a69", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,6 +6,6 @@\n // Issue #50.\n fn main() {\n     let x = {foo: \"hello\", bar: \"world\"};\n-    log_full(core::debug, x.foo);\n-    log_full(core::debug, x.bar);\n+    log(debug, x.foo);\n+    log(debug, x.bar);\n }"}, {"sha": "20e4f27627edc520c7047ed95ea4515749feeff1", "filename": "src/test/run-pass/reference-branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Freference-branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Freference-branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freference-branch.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let x = [];\n     let &y = x;\n     if true { x = [1]; }\n-    else { log_full(core::error, y); }\n+    else { log(error, y); }\n }"}, {"sha": "1261878db2e633f897965cda617741d26a91d4f5", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ fn main() {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n-        log_full(core::debug, c);\n+        log(debug, c);\n     }\n     assert *i == 1;\n }"}, {"sha": "db8b86fe4a4173bde1cf80a3e831125a8d5ea688", "filename": "src/test/run-pass/ret-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fret-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fret-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-bang.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn my_err(s: str) -> ! { log_full(core::error, s); fail; }\n+fn my_err(s: str) -> ! { log(error, s); fail; }\n \n fn okay(i: uint) -> int {\n     if i == 3u { my_err(\"I don't like three\"); } else { ret 42; }"}, {"sha": "3c19958fa3110690dc57a3844a8c98c09900ebf8", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,12 +14,12 @@ fn make_generic_record<copy A,copy B>(a: A, b: B) -> pair<A,B> {\n \n fn test05_start(&&f: sendfn(&&float, &&str) -> pair<float, str>) {\n     let p = f(22.22f, \"Hi\");\n-    log_full(core::debug, p);\n+    log(debug, p);\n     assert p.a == 22.22f;\n     assert p.b == \"Hi\";\n \n     let q = f(44.44f, \"Ho\");\n-    log_full(core::debug, q);\n+    log(debug, q);\n     assert q.a == 44.44f;\n     assert q.b == \"Ho\";\n }"}, {"sha": "84bc0759502114ca08517f515987b8efdf3673b3", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,7 +13,7 @@ fn test05_start(&&f: sendfn(int)) {\n fn test05() {\n     let three = ~3;\n     let fn_to_send = sendfn(n: int) {\n-        log_full(core::error, *three + n); // will copy x into the closure\n+        log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n     task::spawn(fn_to_send, test05_start);"}, {"sha": "dd430bc7089c47161c60fafebebfc04925cc9715", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ fn foo(c: [int]) {\n     alt none::<int> {\n       some::<int>(_) {\n         for i: int in c {\n-            log_full(core::debug, a);\n+            log(debug, a);\n             let a = 17;\n             b += [a];\n         }"}, {"sha": "a50e5ed82d74d17051a3d3848e2cf8f58fe5cbb2", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -26,6 +26,6 @@ fn main() {\n     let p_: path_ = { global: true, idents: [\"hi\"], types: [t] };\n     let p: path = { data: p_, span: sp };\n     let x = { sp: sp, path: p };\n-    log_full(core::error, x.path);\n-    log_full(core::error, x);\n+    log(error, x.path);\n+    log(error, x);\n }"}, {"sha": "e320d1b6d01ecdb0eff2cf91e2d5106f999916b0", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let n; n = 1; log_full(core::debug, n); }\n+fn main() { let n; n = 1; log(debug, n); }"}, {"sha": "d0c4a2f270b9a679495fdd9c78ff68a09a8c9a64", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ tag clam<T> { a(T, int); b; }\n \n fn uhoh<T>(v: [clam<T>]) {\n     alt v[1] {\n-      a::<T>(t, u) { #debug(\"incorrect\"); log_full(core::debug, u); fail; }\n+      a::<T>(t, u) { #debug(\"incorrect\"); log(debug, u); fail; }\n       b::<T>. { #debug(\"correct\"); }\n     }\n }"}, {"sha": "68e0f22f2f83ebaf3d6fbea2568cd144149fa828", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ import task;\n \n fn x(&&args: (str, int)) {\n     let (s, n) = args;\n-    log_full(core::debug, s); log_full(core::debug, n);\n+    log(debug, s); log(debug, n);\n }\n \n fn main() {"}, {"sha": "413474efd929f4a0d272085f0af1483655f307c1", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,5 +5,5 @@ import task::spawn_joinable;\n fn main() { let x = spawn_joinable(10, m::child); join(x); }\n \n mod m {\n-    fn child(&&i: int) { log_full(core::debug, i); }\n+    fn child(&&i: int) { log(debug, i); }\n }"}, {"sha": "52ceb4c27abef239553db7029e5008153d1ae7af", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ import task;\n \n fn main() { let t = task::spawn_joinable(10, child); task::join(t); }\n \n-fn child(&&i: int) { log_full(core::error, i); assert (i == 10); }\n+fn child(&&i: int) { log(error, i); assert (i == 10); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "6d22149824fd89b09d5dfc2fe26a63283e6818d0", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,15 +7,15 @@ fn main() { spawn((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n \n fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n-    log_full(core::error, i1);\n-    log_full(core::error, i2);\n-    log_full(core::error, i3);\n-    log_full(core::error, i4);\n-    log_full(core::error, i5);\n-    log_full(core::error, i6);\n-    log_full(core::error, i7);\n-    log_full(core::error, i8);\n-    log_full(core::error, i9);\n+    log(error, i1);\n+    log(error, i2);\n+    log(error, i3);\n+    log(error, i4);\n+    log(error, i5);\n+    log(error, i6);\n+    log(error, i7);\n+    log(error, i8);\n+    log(error, i9);\n     assert (i1 == 10);\n     assert (i2 == 20);\n     assert (i3 == 30);"}, {"sha": "102a226e2986789f2953ee6d0e60eac8fe65331e", "filename": "src/test/run-pass/stateful-obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstateful-obj.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,9 +11,9 @@ obj counter(mutable x: int) {\n fn main() {\n     let y = counter(0);\n     assert (y.hello() == 12345);\n-    log_full(core::debug, y.get());\n+    log(debug, y.get());\n     y.incr();\n     y.incr();\n-    log_full(core::debug, y.get());\n+    log(debug, y.get());\n     assert (y.get() == 2);\n }"}, {"sha": "dd689afff95324ea0379c3b1d23d15e3f1b45f82", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ import str;\n fn test1() {\n     let s: str = \"hello\";\n     s += \"world\";\n-    log_full(core::debug, s);\n+    log(debug, s);\n     assert (s[9] == 'd' as u8);\n }\n \n@@ -17,8 +17,8 @@ fn test2() {\n     let ff: str = \"abc\";\n     let a: str = ff + \"ABC\" + ff;\n     let b: str = \"ABC\" + ff + \"ABC\";\n-    log_full(core::debug, a);\n-    log_full(core::debug, b);\n+    log(debug, a);\n+    log(debug, b);\n     assert (str::eq(a, \"abcABCabc\"));\n     assert (str::eq(b, \"ABCabcABC\"));\n }"}, {"sha": "69d26469677c22709db24119cdec61bc7d103a24", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a: str = \"hello\";\n     let b: str = \"world\";\n     let s: str = a + b;\n-    log_full(core::debug, s);\n+    log(debug, s);\n     assert (s[9] == 'd' as u8);\n }"}, {"sha": "ef7e2c71eaa44a89a0d715a4e7cde0659762a33e", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let s = \"hello\";\n     let c: u8 = s[4];\n-    log_full(core::debug, c);\n+    log(debug, c);\n     assert (c == 0x6f as u8);\n }"}, {"sha": "30ea8e0efc4372744fa064f2b89ca8398ff99fa9", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let i = 20;\n     let expected_len = 1u;\n     while i > 0 {\n-        log_full(core::error, str::byte_len(a));\n+        log(error, str::byte_len(a));\n         assert (str::byte_len(a) == expected_len);\n         a += a;\n         i -= 1;"}, {"sha": "de9dffbaca33951a3cfa81eabda68e9115464867", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 247, "deletions": 247, "changes": 494, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,251 +3,251 @@ import std::os;\n \n fn main() {\n   let f = 1 as os::libc::FILE;\n-  log_full(core::debug, f as int);\n-  log_full(core::debug, f as uint);\n-  log_full(core::debug, f as i8);\n-  log_full(core::debug, f as i16);\n-  log_full(core::debug, f as i32);\n-  log_full(core::debug, f as i64);\n-  log_full(core::debug, f as u8);\n-  log_full(core::debug, f as u16);\n-  log_full(core::debug, f as u32);\n-  log_full(core::debug, f as u64);\n-\n-  log_full(core::debug, 1 as int);\n-  log_full(core::debug, 1 as uint);\n-  log_full(core::debug, 1 as float);\n-  log_full(core::debug, 1 as bool);\n-  log_full(core::debug, 1 as os::libc::FILE);\n-  log_full(core::debug, 1 as i8);\n-  log_full(core::debug, 1 as i16);\n-  log_full(core::debug, 1 as i32);\n-  log_full(core::debug, 1 as i64);\n-  log_full(core::debug, 1 as u8);\n-  log_full(core::debug, 1 as u16);\n-  log_full(core::debug, 1 as u32);\n-  log_full(core::debug, 1 as u64);\n-  log_full(core::debug, 1 as f32);\n-  log_full(core::debug, 1 as f64);\n-\n-  log_full(core::debug, 1u as int);\n-  log_full(core::debug, 1u as uint);\n-  log_full(core::debug, 1u as float);\n-  log_full(core::debug, 1u as bool);\n-  log_full(core::debug, 1u as os::libc::FILE);\n-  log_full(core::debug, 1u as i8);\n-  log_full(core::debug, 1u as i16);\n-  log_full(core::debug, 1u as i32);\n-  log_full(core::debug, 1u as i64);\n-  log_full(core::debug, 1u as u8);\n-  log_full(core::debug, 1u as u16);\n-  log_full(core::debug, 1u as u32);\n-  log_full(core::debug, 1u as u64);\n-  log_full(core::debug, 1u as f32);\n-  log_full(core::debug, 1u as f64);\n-\n-  log_full(core::debug, 1i8 as int);\n-  log_full(core::debug, 1i8 as uint);\n-  log_full(core::debug, 1i8 as float);\n-  log_full(core::debug, 1i8 as bool);\n-  log_full(core::debug, 1i8 as os::libc::FILE);\n-  log_full(core::debug, 1i8 as i8);\n-  log_full(core::debug, 1i8 as i16);\n-  log_full(core::debug, 1i8 as i32);\n-  log_full(core::debug, 1i8 as i64);\n-  log_full(core::debug, 1i8 as u8);\n-  log_full(core::debug, 1i8 as u16);\n-  log_full(core::debug, 1i8 as u32);\n-  log_full(core::debug, 1i8 as u64);\n-  log_full(core::debug, 1i8 as f32);\n-  log_full(core::debug, 1i8 as f64);\n-\n-  log_full(core::debug, 1u8 as int);\n-  log_full(core::debug, 1u8 as uint);\n-  log_full(core::debug, 1u8 as float);\n-  log_full(core::debug, 1u8 as bool);\n-  log_full(core::debug, 1u8 as os::libc::FILE);\n-  log_full(core::debug, 1u8 as i8);\n-  log_full(core::debug, 1u8 as i16);\n-  log_full(core::debug, 1u8 as i32);\n-  log_full(core::debug, 1u8 as i64);\n-  log_full(core::debug, 1u8 as u8);\n-  log_full(core::debug, 1u8 as u16);\n-  log_full(core::debug, 1u8 as u32);\n-  log_full(core::debug, 1u8 as u64);\n-  log_full(core::debug, 1u8 as f32);\n-  log_full(core::debug, 1u8 as f64);\n-\n-  log_full(core::debug, 1i16 as int);\n-  log_full(core::debug, 1i16 as uint);\n-  log_full(core::debug, 1i16 as float);\n-  log_full(core::debug, 1i16 as bool);\n-  log_full(core::debug, 1i16 as os::libc::FILE);\n-  log_full(core::debug, 1i16 as i8);\n-  log_full(core::debug, 1i16 as i16);\n-  log_full(core::debug, 1i16 as i32);\n-  log_full(core::debug, 1i16 as i64);\n-  log_full(core::debug, 1i16 as u8);\n-  log_full(core::debug, 1i16 as u16);\n-  log_full(core::debug, 1i16 as u32);\n-  log_full(core::debug, 1i16 as u64);\n-  log_full(core::debug, 1i16 as f32);\n-  log_full(core::debug, 1i16 as f64);\n-\n-  log_full(core::debug, 1u16 as int);\n-  log_full(core::debug, 1u16 as uint);\n-  log_full(core::debug, 1u16 as float);\n-  log_full(core::debug, 1u16 as bool);\n-  log_full(core::debug, 1u16 as os::libc::FILE);\n-  log_full(core::debug, 1u16 as i8);\n-  log_full(core::debug, 1u16 as i16);\n-  log_full(core::debug, 1u16 as i32);\n-  log_full(core::debug, 1u16 as i64);\n-  log_full(core::debug, 1u16 as u8);\n-  log_full(core::debug, 1u16 as u16);\n-  log_full(core::debug, 1u16 as u32);\n-  log_full(core::debug, 1u16 as u64);\n-  log_full(core::debug, 1u16 as f32);\n-  log_full(core::debug, 1u16 as f64);\n-\n-  log_full(core::debug, 1i32 as int);\n-  log_full(core::debug, 1i32 as uint);\n-  log_full(core::debug, 1i32 as float);\n-  log_full(core::debug, 1i32 as bool);\n-  log_full(core::debug, 1i32 as os::libc::FILE);\n-  log_full(core::debug, 1i32 as i8);\n-  log_full(core::debug, 1i32 as i16);\n-  log_full(core::debug, 1i32 as i32);\n-  log_full(core::debug, 1i32 as i64);\n-  log_full(core::debug, 1i32 as u8);\n-  log_full(core::debug, 1i32 as u16);\n-  log_full(core::debug, 1i32 as u32);\n-  log_full(core::debug, 1i32 as u64);\n-  log_full(core::debug, 1i32 as f32);\n-  log_full(core::debug, 1i32 as f64);\n-\n-  log_full(core::debug, 1u32 as int);\n-  log_full(core::debug, 1u32 as uint);\n-  log_full(core::debug, 1u32 as float);\n-  log_full(core::debug, 1u32 as bool);\n-  log_full(core::debug, 1u32 as os::libc::FILE);\n-  log_full(core::debug, 1u32 as i8);\n-  log_full(core::debug, 1u32 as i16);\n-  log_full(core::debug, 1u32 as i32);\n-  log_full(core::debug, 1u32 as i64);\n-  log_full(core::debug, 1u32 as u8);\n-  log_full(core::debug, 1u32 as u16);\n-  log_full(core::debug, 1u32 as u32);\n-  log_full(core::debug, 1u32 as u64);\n-  log_full(core::debug, 1u32 as f32);\n-  log_full(core::debug, 1u32 as f64);\n-\n-  log_full(core::debug, 1i64 as int);\n-  log_full(core::debug, 1i64 as uint);\n-  log_full(core::debug, 1i64 as float);\n-  log_full(core::debug, 1i64 as bool);\n-  log_full(core::debug, 1i64 as os::libc::FILE);\n-  log_full(core::debug, 1i64 as i8);\n-  log_full(core::debug, 1i64 as i16);\n-  log_full(core::debug, 1i64 as i32);\n-  log_full(core::debug, 1i64 as i64);\n-  log_full(core::debug, 1i64 as u8);\n-  log_full(core::debug, 1i64 as u16);\n-  log_full(core::debug, 1i64 as u32);\n-  log_full(core::debug, 1i64 as u64);\n-  log_full(core::debug, 1i64 as f32);\n-  log_full(core::debug, 1i64 as f64);\n-\n-  log_full(core::debug, 1u64 as int);\n-  log_full(core::debug, 1u64 as uint);\n-  log_full(core::debug, 1u64 as float);\n-  log_full(core::debug, 1u64 as bool);\n-  log_full(core::debug, 1u64 as os::libc::FILE);\n-  log_full(core::debug, 1u64 as i8);\n-  log_full(core::debug, 1u64 as i16);\n-  log_full(core::debug, 1u64 as i32);\n-  log_full(core::debug, 1u64 as i64);\n-  log_full(core::debug, 1u64 as u8);\n-  log_full(core::debug, 1u64 as u16);\n-  log_full(core::debug, 1u64 as u32);\n-  log_full(core::debug, 1u64 as u64);\n-  log_full(core::debug, 1u64 as f32);\n-  log_full(core::debug, 1u64 as f64);\n-\n-  log_full(core::debug, 1u64 as int);\n-  log_full(core::debug, 1u64 as uint);\n-  log_full(core::debug, 1u64 as float);\n-  log_full(core::debug, 1u64 as bool);\n-  log_full(core::debug, 1u64 as os::libc::FILE);\n-  log_full(core::debug, 1u64 as i8);\n-  log_full(core::debug, 1u64 as i16);\n-  log_full(core::debug, 1u64 as i32);\n-  log_full(core::debug, 1u64 as i64);\n-  log_full(core::debug, 1u64 as u8);\n-  log_full(core::debug, 1u64 as u16);\n-  log_full(core::debug, 1u64 as u32);\n-  log_full(core::debug, 1u64 as u64);\n-  log_full(core::debug, 1u64 as f32);\n-  log_full(core::debug, 1u64 as f64);\n-\n-  log_full(core::debug, true as int);\n-  log_full(core::debug, true as uint);\n-  log_full(core::debug, true as float);\n-  log_full(core::debug, true as bool);\n-  log_full(core::debug, true as os::libc::FILE);\n-  log_full(core::debug, true as i8);\n-  log_full(core::debug, true as i16);\n-  log_full(core::debug, true as i32);\n-  log_full(core::debug, true as i64);\n-  log_full(core::debug, true as u8);\n-  log_full(core::debug, true as u16);\n-  log_full(core::debug, true as u32);\n-  log_full(core::debug, true as u64);\n-  log_full(core::debug, true as f32);\n-  log_full(core::debug, true as f64);\n-\n-  log_full(core::debug, 1. as int);\n-  log_full(core::debug, 1. as uint);\n-  log_full(core::debug, 1. as float);\n-  log_full(core::debug, 1. as bool);\n-  log_full(core::debug, 1. as i8);\n-  log_full(core::debug, 1. as i16);\n-  log_full(core::debug, 1. as i32);\n-  log_full(core::debug, 1. as i64);\n-  log_full(core::debug, 1. as u8);\n-  log_full(core::debug, 1. as u16);\n-  log_full(core::debug, 1. as u32);\n-  log_full(core::debug, 1. as u64);\n-  log_full(core::debug, 1. as f32);\n-  log_full(core::debug, 1. as f64);\n-\n-  log_full(core::debug, 1f32 as int);\n-  log_full(core::debug, 1f32 as uint);\n-  log_full(core::debug, 1f32 as float);\n-  log_full(core::debug, 1f32 as bool);\n-  log_full(core::debug, 1f32 as i8);\n-  log_full(core::debug, 1f32 as i16);\n-  log_full(core::debug, 1f32 as i32);\n-  log_full(core::debug, 1f32 as i64);\n-  log_full(core::debug, 1f32 as u8);\n-  log_full(core::debug, 1f32 as u16);\n-  log_full(core::debug, 1f32 as u32);\n-  log_full(core::debug, 1f32 as u64);\n-  log_full(core::debug, 1f32 as f32);\n-  log_full(core::debug, 1f32 as f64);\n-\n-  log_full(core::debug, 1f64 as int);\n-  log_full(core::debug, 1f64 as uint);\n-  log_full(core::debug, 1f64 as float);\n-  log_full(core::debug, 1f64 as bool);\n-  log_full(core::debug, 1f64 as i8);\n-  log_full(core::debug, 1f64 as i16);\n-  log_full(core::debug, 1f64 as i32);\n-  log_full(core::debug, 1f64 as i64);\n-  log_full(core::debug, 1f64 as u8);\n-  log_full(core::debug, 1f64 as u16);\n-  log_full(core::debug, 1f64 as u32);\n-  log_full(core::debug, 1f64 as u64);\n-  log_full(core::debug, 1f64 as f32);\n-  log_full(core::debug, 1f64 as f64);\n+  log(debug, f as int);\n+  log(debug, f as uint);\n+  log(debug, f as i8);\n+  log(debug, f as i16);\n+  log(debug, f as i32);\n+  log(debug, f as i64);\n+  log(debug, f as u8);\n+  log(debug, f as u16);\n+  log(debug, f as u32);\n+  log(debug, f as u64);\n+\n+  log(debug, 1 as int);\n+  log(debug, 1 as uint);\n+  log(debug, 1 as float);\n+  log(debug, 1 as bool);\n+  log(debug, 1 as os::libc::FILE);\n+  log(debug, 1 as i8);\n+  log(debug, 1 as i16);\n+  log(debug, 1 as i32);\n+  log(debug, 1 as i64);\n+  log(debug, 1 as u8);\n+  log(debug, 1 as u16);\n+  log(debug, 1 as u32);\n+  log(debug, 1 as u64);\n+  log(debug, 1 as f32);\n+  log(debug, 1 as f64);\n+\n+  log(debug, 1u as int);\n+  log(debug, 1u as uint);\n+  log(debug, 1u as float);\n+  log(debug, 1u as bool);\n+  log(debug, 1u as os::libc::FILE);\n+  log(debug, 1u as i8);\n+  log(debug, 1u as i16);\n+  log(debug, 1u as i32);\n+  log(debug, 1u as i64);\n+  log(debug, 1u as u8);\n+  log(debug, 1u as u16);\n+  log(debug, 1u as u32);\n+  log(debug, 1u as u64);\n+  log(debug, 1u as f32);\n+  log(debug, 1u as f64);\n+\n+  log(debug, 1i8 as int);\n+  log(debug, 1i8 as uint);\n+  log(debug, 1i8 as float);\n+  log(debug, 1i8 as bool);\n+  log(debug, 1i8 as os::libc::FILE);\n+  log(debug, 1i8 as i8);\n+  log(debug, 1i8 as i16);\n+  log(debug, 1i8 as i32);\n+  log(debug, 1i8 as i64);\n+  log(debug, 1i8 as u8);\n+  log(debug, 1i8 as u16);\n+  log(debug, 1i8 as u32);\n+  log(debug, 1i8 as u64);\n+  log(debug, 1i8 as f32);\n+  log(debug, 1i8 as f64);\n+\n+  log(debug, 1u8 as int);\n+  log(debug, 1u8 as uint);\n+  log(debug, 1u8 as float);\n+  log(debug, 1u8 as bool);\n+  log(debug, 1u8 as os::libc::FILE);\n+  log(debug, 1u8 as i8);\n+  log(debug, 1u8 as i16);\n+  log(debug, 1u8 as i32);\n+  log(debug, 1u8 as i64);\n+  log(debug, 1u8 as u8);\n+  log(debug, 1u8 as u16);\n+  log(debug, 1u8 as u32);\n+  log(debug, 1u8 as u64);\n+  log(debug, 1u8 as f32);\n+  log(debug, 1u8 as f64);\n+\n+  log(debug, 1i16 as int);\n+  log(debug, 1i16 as uint);\n+  log(debug, 1i16 as float);\n+  log(debug, 1i16 as bool);\n+  log(debug, 1i16 as os::libc::FILE);\n+  log(debug, 1i16 as i8);\n+  log(debug, 1i16 as i16);\n+  log(debug, 1i16 as i32);\n+  log(debug, 1i16 as i64);\n+  log(debug, 1i16 as u8);\n+  log(debug, 1i16 as u16);\n+  log(debug, 1i16 as u32);\n+  log(debug, 1i16 as u64);\n+  log(debug, 1i16 as f32);\n+  log(debug, 1i16 as f64);\n+\n+  log(debug, 1u16 as int);\n+  log(debug, 1u16 as uint);\n+  log(debug, 1u16 as float);\n+  log(debug, 1u16 as bool);\n+  log(debug, 1u16 as os::libc::FILE);\n+  log(debug, 1u16 as i8);\n+  log(debug, 1u16 as i16);\n+  log(debug, 1u16 as i32);\n+  log(debug, 1u16 as i64);\n+  log(debug, 1u16 as u8);\n+  log(debug, 1u16 as u16);\n+  log(debug, 1u16 as u32);\n+  log(debug, 1u16 as u64);\n+  log(debug, 1u16 as f32);\n+  log(debug, 1u16 as f64);\n+\n+  log(debug, 1i32 as int);\n+  log(debug, 1i32 as uint);\n+  log(debug, 1i32 as float);\n+  log(debug, 1i32 as bool);\n+  log(debug, 1i32 as os::libc::FILE);\n+  log(debug, 1i32 as i8);\n+  log(debug, 1i32 as i16);\n+  log(debug, 1i32 as i32);\n+  log(debug, 1i32 as i64);\n+  log(debug, 1i32 as u8);\n+  log(debug, 1i32 as u16);\n+  log(debug, 1i32 as u32);\n+  log(debug, 1i32 as u64);\n+  log(debug, 1i32 as f32);\n+  log(debug, 1i32 as f64);\n+\n+  log(debug, 1u32 as int);\n+  log(debug, 1u32 as uint);\n+  log(debug, 1u32 as float);\n+  log(debug, 1u32 as bool);\n+  log(debug, 1u32 as os::libc::FILE);\n+  log(debug, 1u32 as i8);\n+  log(debug, 1u32 as i16);\n+  log(debug, 1u32 as i32);\n+  log(debug, 1u32 as i64);\n+  log(debug, 1u32 as u8);\n+  log(debug, 1u32 as u16);\n+  log(debug, 1u32 as u32);\n+  log(debug, 1u32 as u64);\n+  log(debug, 1u32 as f32);\n+  log(debug, 1u32 as f64);\n+\n+  log(debug, 1i64 as int);\n+  log(debug, 1i64 as uint);\n+  log(debug, 1i64 as float);\n+  log(debug, 1i64 as bool);\n+  log(debug, 1i64 as os::libc::FILE);\n+  log(debug, 1i64 as i8);\n+  log(debug, 1i64 as i16);\n+  log(debug, 1i64 as i32);\n+  log(debug, 1i64 as i64);\n+  log(debug, 1i64 as u8);\n+  log(debug, 1i64 as u16);\n+  log(debug, 1i64 as u32);\n+  log(debug, 1i64 as u64);\n+  log(debug, 1i64 as f32);\n+  log(debug, 1i64 as f64);\n+\n+  log(debug, 1u64 as int);\n+  log(debug, 1u64 as uint);\n+  log(debug, 1u64 as float);\n+  log(debug, 1u64 as bool);\n+  log(debug, 1u64 as os::libc::FILE);\n+  log(debug, 1u64 as i8);\n+  log(debug, 1u64 as i16);\n+  log(debug, 1u64 as i32);\n+  log(debug, 1u64 as i64);\n+  log(debug, 1u64 as u8);\n+  log(debug, 1u64 as u16);\n+  log(debug, 1u64 as u32);\n+  log(debug, 1u64 as u64);\n+  log(debug, 1u64 as f32);\n+  log(debug, 1u64 as f64);\n+\n+  log(debug, 1u64 as int);\n+  log(debug, 1u64 as uint);\n+  log(debug, 1u64 as float);\n+  log(debug, 1u64 as bool);\n+  log(debug, 1u64 as os::libc::FILE);\n+  log(debug, 1u64 as i8);\n+  log(debug, 1u64 as i16);\n+  log(debug, 1u64 as i32);\n+  log(debug, 1u64 as i64);\n+  log(debug, 1u64 as u8);\n+  log(debug, 1u64 as u16);\n+  log(debug, 1u64 as u32);\n+  log(debug, 1u64 as u64);\n+  log(debug, 1u64 as f32);\n+  log(debug, 1u64 as f64);\n+\n+  log(debug, true as int);\n+  log(debug, true as uint);\n+  log(debug, true as float);\n+  log(debug, true as bool);\n+  log(debug, true as os::libc::FILE);\n+  log(debug, true as i8);\n+  log(debug, true as i16);\n+  log(debug, true as i32);\n+  log(debug, true as i64);\n+  log(debug, true as u8);\n+  log(debug, true as u16);\n+  log(debug, true as u32);\n+  log(debug, true as u64);\n+  log(debug, true as f32);\n+  log(debug, true as f64);\n+\n+  log(debug, 1. as int);\n+  log(debug, 1. as uint);\n+  log(debug, 1. as float);\n+  log(debug, 1. as bool);\n+  log(debug, 1. as i8);\n+  log(debug, 1. as i16);\n+  log(debug, 1. as i32);\n+  log(debug, 1. as i64);\n+  log(debug, 1. as u8);\n+  log(debug, 1. as u16);\n+  log(debug, 1. as u32);\n+  log(debug, 1. as u64);\n+  log(debug, 1. as f32);\n+  log(debug, 1. as f64);\n+\n+  log(debug, 1f32 as int);\n+  log(debug, 1f32 as uint);\n+  log(debug, 1f32 as float);\n+  log(debug, 1f32 as bool);\n+  log(debug, 1f32 as i8);\n+  log(debug, 1f32 as i16);\n+  log(debug, 1f32 as i32);\n+  log(debug, 1f32 as i64);\n+  log(debug, 1f32 as u8);\n+  log(debug, 1f32 as u16);\n+  log(debug, 1f32 as u32);\n+  log(debug, 1f32 as u64);\n+  log(debug, 1f32 as f32);\n+  log(debug, 1f32 as f64);\n+\n+  log(debug, 1f64 as int);\n+  log(debug, 1f64 as uint);\n+  log(debug, 1f64 as float);\n+  log(debug, 1f64 as bool);\n+  log(debug, 1f64 as i8);\n+  log(debug, 1f64 as i16);\n+  log(debug, 1f64 as i32);\n+  log(debug, 1f64 as i64);\n+  log(debug, 1f64 as u8);\n+  log(debug, 1f64 as u16);\n+  log(debug, 1f64 as u32);\n+  log(debug, 1f64 as u64);\n+  log(debug, 1f64 as f32);\n+  log(debug, 1f64 as f64);\n }"}, {"sha": "c5a26bcaad20b72be0260ef9b37b64ef35a22e80", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -2,8 +2,8 @@ use std;\n import str;\n \n fn test(actual: str, expected: str) {\n-    log_full(core::debug, actual);\n-    log_full(core::debug, expected);\n+    log(debug, actual);\n+    log(debug, expected);\n     assert (str::eq(actual, expected));\n }\n "}, {"sha": "6ec80db8d55bfe1a3600d571c646a589d6dd5883", "filename": "src/test/run-pass/syntax-extension-shell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,5 +1,5 @@\n // xfail-test\n fn main() {\n   auto s = #shell { uname -a };\n-  log_full(core::debug, s);\n+  log(debug, s);\n }"}, {"sha": "992fe0986ca433974c45367c236dbba0948ac044", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,12 +8,12 @@ fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: fn(bool) -> bool) -> bool {\n     #debug(\"evenk\");\n-    log_full(core::debug, n);\n+    log(debug, n);\n     if n == 0 { be k(true); } else { be oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: fn(bool) -> bool) -> bool {\n     #debug(\"oddk\");\n-    log_full(core::debug, n);\n+    log(debug, n);\n     if n == 0 { be k(false); } else { be evenk(n - 1, k); }\n }"}, {"sha": "d54b31b07b512bcd751e4fe1337ed12bf2576f94", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,7 +8,7 @@ import task;\n fn main() { test05(); }\n \n fn test05_start(ch : chan<int>) {\n-    log_full(core::error, ch);\n+    log(error, ch);\n     send(ch, 10);\n     #error(\"sent 10\");\n     send(ch, 20);\n@@ -22,10 +22,10 @@ fn test05() {\n     let ch = comm::chan(po);\n     task::spawn(ch, test05_start);\n     let value = comm::recv(po);\n-    log_full(core::error, value);\n+    log(error, value);\n     value = comm::recv(po);\n-    log_full(core::error, value);\n+    log(error, value);\n     value = comm::recv(po);\n-    log_full(core::error, value);\n+    log(error, value);\n     assert (value == 30);\n }"}, {"sha": "84e4825ec9be0f742b59bcb8c061edb1b86f039d", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,10 +10,10 @@ fn start(c: comm::chan<comm::chan<str>>) {\n     let b;\n     a = comm::recv(p);\n     assert a == \"A\";\n-    log_full(core::error, a);\n+    log(error, a);\n     b = comm::recv(p);\n     assert b == \"B\";\n-    log_full(core::error, b);\n+    log(error, b);\n }\n \n fn main() {"}, {"sha": "e37eb15ce39e74c16f0314bcf23e3e02ea741f10", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     // Spawn 10 tasks each sending us back one int.\n     let i = 10;\n     while (i > 0) {\n-        log_full(core::debug, i);\n+        log(debug, i);\n         task::spawn((i, comm::chan(po)), child);\n         i = i - 1;\n     }\n@@ -19,7 +19,7 @@ fn main() {\n     i = 10;\n     let value = 0;\n     while (i > 0) {\n-        log_full(core::debug, i);\n+        log(debug, i);\n         value = comm::recv(po);\n         i = i - 1;\n     }\n@@ -29,6 +29,6 @@ fn main() {\n \n fn child(&&args: (int, comm::chan<int>)) {\n     let (x, ch) = args;\n-    log_full(core::debug, x);\n+    log(debug, x);\n     comm::send(ch, x);\n }"}, {"sha": "407939c9e657100c9032ae8ff84daa53b291317b", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -53,7 +53,7 @@ fn test00() {\n     for t in tasks { task::join(t); }\n \n     #debug(\"Completed: Final number is: \");\n-    log_full(core::error, sum);\n+    log(error, sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert (sum == 480);"}, {"sha": "b27d0669c6143fd0099f54d5d49ead02698b328a", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -15,31 +15,31 @@ fn test00() {\n     send(c, 4);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     send(c, 5);\n     send(c, 6);\n     send(c, 7);\n     send(c, 8);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log_full(core::debug, r);\n+    log(debug, r);\n     assert (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);\n }"}, {"sha": "703fb3fc2a0112c8d27541de5bb37cd5abefffd9", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -22,7 +22,7 @@ fn test00() {\n     let i: int = 0;\n     while i < number_of_messages {\n         sum += comm::recv(p);\n-        log_full(core::debug, r);\n+        log(debug, r);\n         i += 1;\n     }\n "}, {"sha": "85a9fb8dfbda4c57a1584d74f93796bb6a6d2226", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -65,7 +65,7 @@ fn test01() {\n     let p = port();\n     #debug(\"Reading from a port that is never written to.\");\n     let value: int = recv(p);\n-    log_full(core::debug, value);\n+    log(debug, value);\n }\n \n fn test02() {\n@@ -75,7 +75,7 @@ fn test02() {\n     send(c, 42);\n     #debug(\"Reading from a local task port.\");\n     let value: int = recv(p);\n-    log_full(core::debug, value);\n+    log(debug, value);\n }\n \n obj vector(mutable x: int, y: int) {\n@@ -87,7 +87,7 @@ fn test03() {\n     let v: vector = vector(1, 2);\n     #debug(\"created object ...\");\n     let t: vector = v;\n-    log_full(core::debug, v.length());\n+    log(debug, v.length());\n }\n \n fn test04_start(&&_args: ()) {\n@@ -120,7 +120,7 @@ fn test05() {\n     value = recv(po);\n     value = recv(po);\n     value = recv(po);\n-    log_full(core::debug, value);\n+    log(debug, value);\n }\n \n fn test06_start(&&task_number: int) {"}, {"sha": "2f09d1c6b4fd48930c8da4c9a455b06ab09b169d", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     #debug(\"main thread exiting\");\n }\n \n-fn child(&&x: int) { log_full(core::debug, x); }\n+fn child(&&x: int) { log(debug, x); }\n "}, {"sha": "487b440ee420f6a6982b9ae9b0b5025a3f00004d", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let ch = chan(po);\n     send(ch, 42);\n     let r = recv(po);\n-    log_full(core::error, r);\n+    log(error, r);\n }"}, {"sha": "bcf3469281bf9f79ce5f2d39464bd874fda5fdc6", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ fn test1() {\n     let x = u(~10);\n     assert alt x {\n       u(a) {\n-        log_full(core::error, a);\n+        log(error, a);\n         *a\n       }\n       _ { 66 }"}, {"sha": "ef74e70eede759b6c9357b521f52c51a348bcca0", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let i = ~100;\n-    log_full(core::error, i);\n+    log(error, i);\n }\n\\ No newline at end of file"}, {"sha": "a8ca302b3952638ce29645f6d8e60d15d6c6be85", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ tag bar { u(~int); w(int); }\n fn main() {\n     assert alt u(~10) {\n       u(a) {\n-        log_full(core::error, a);\n+        log(error, a);\n         *a\n       }\n       _ { 66 }"}, {"sha": "2ccf2394beda6849fc9ba0323ab04d9b00ef720b", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -19,13 +19,13 @@ fn bind_id_2() { bind id(ret); }\n \n fn fail_fail() { fail fail; }\n \n-fn log_fail() { log_full(core::error, fail); }\n+fn log_fail() { log(error, fail); }\n \n-fn log_ret() { log_full(core::error, ret); }\n+fn log_ret() { log(error, ret); }\n \n-fn log_break() { while true { log_full(core::error, break); } }\n+fn log_break() { while true { log(error, break); } }\n \n-fn log_cont() { do { log_full(core::error, cont); } while false }\n+fn log_cont() { do { log(error, cont); } while false }\n \n fn ret_ret() -> int { ret (ret 2) + 3; }\n "}, {"sha": "5e77cf8f684677fc58c06c308fa27951adc8ef2a", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,4 +8,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n tag myoption<T> { none; some(T); }\n \n-fn main() { log_full(core::debug, 5); }\n+fn main() { log(debug, 5); }"}, {"sha": "cd54239ec563572ea699d934032bc0d4a0c959d4", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,4 +8,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n tag myoption<T> { none; some(T); }\n \n-fn main() { log_full(core::debug, 5); }\n+fn main() { log(debug, 5); }"}, {"sha": "7dd73a14342342293a686110cb31e028f9546332", "filename": "src/test/run-pass/user.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fuser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuser.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,8 +8,8 @@ use std (name = \"std\",\n fn main() {\n   auto s = str.alloc(10 as uint);\n   s += \"hello \";\n-  log_full(core::debug, s);\n+  log(debug, s);\n   s += \"there\";\n-  log_full(core::debug, s);\n+  log(debug, s);\n   auto z = vec.alloc::<int>(10 as uint);\n }"}, {"sha": "b2288162bd6bfb3387d8c3b368014c127eaad011", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -32,10 +32,10 @@ fn main() {\n     fn check_str_eq(a: str, b: str) {\n         let i: int = 0;\n         for ab: u8 in a {\n-            log_full(core::debug, i);\n-            log_full(core::debug, ab);\n+            log(debug, i);\n+            log(debug, ab);\n             let bb: u8 = b[i];\n-            log_full(core::debug, bb);\n+            log(debug, bb);\n             assert (ab == bb);\n             i += 1;\n         }"}, {"sha": "08a81ba6e92b9115d042ab44fc259733ab081386", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let a: [int] = [1, 2, 3, 4, 5];\n     let b: [int] = [6, 7, 8, 9, 0];\n     let v: [int] = a + b;\n-    log_full(core::debug, v[9]);\n+    log(debug, v[9]);\n     assert (v[0] == 1);\n     assert (v[7] == 8);\n     assert (v[9] == 0);"}, {"sha": "7b27feab6f460178f0965381307a018fde499153", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let later: [int];\n     if true { later = [1]; } else { later = [2]; }\n-    log_full(core::debug, later[0]);\n+    log(debug, later[0]);\n }"}, {"sha": "e8a39b2a0553cedb8da9f191c0c3f495018d2482", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -38,7 +38,7 @@ fn test_loop() {\n     let i = 20;\n     let expected_len = 1u;\n     while i > 0 {\n-        log_full(core::error, vec::len(a));\n+        log(error, vec::len(a));\n         assert (vec::len(a) == expected_len);\n         a += a;\n         i -= 1;"}, {"sha": "6b110e9e275a62038df0209842048040baae12dc", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -36,14 +36,14 @@ fn notsure() {\n }\n \n fn hammertime() -> int {\n-    let _x = log_full(core::debug, true == (ret 0));\n+    let _x = log(debug, true == (ret 0));\n }\n \n fn canttouchthis() -> uint {\n     pure fn p() -> bool { true }\n     let _a = (assert (true)) == (check (p()));\n     let _c = (check (p())) == ();\n-    let _b = (log_full(core::debug, 0) == (ret 0u));\n+    let _b = (log(debug, 0) == (ret 0u));\n }\n \n fn angrydome() {"}, {"sha": "336633623be4273e519370497dbbbd1786458f5c", "filename": "src/test/run-pass/while-and-do-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,10 +3,10 @@\n fn main() {\n     let x: int = 10;\n     let y: int = 0;\n-    while y < x { log_full(core::debug, y); #debug(\"hello\"); y = y + 1; }\n+    while y < x { log(debug, y); #debug(\"hello\"); y = y + 1; }\n     do {\n         #debug(\"goodbye\");\n         x = x - 1;\n-        log_full(core::debug, x);\n+        log(debug, x);\n     } while x > 0\n }"}, {"sha": "9054d765e04739cccfa3af11359f2a2efff184fb", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let i = 1;\n     while i > 0 {\n         assert (i > 0);\n-        log_full(core::debug, i);\n+        log(debug, i);\n         i -= 1;\n         cont;\n     }"}, {"sha": "4f207a431545d1b02aea735966bc8e24d58c0e8b", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     while z < 50 {\n         z += 1;\n         while false { x <- y; y = z; }\n-        log_full(core::debug, y);\n+        log(debug, y);\n     }\n     assert (y == 42 && z == 50);\n }"}, {"sha": "2fe5f8b432b1e9525bc925d3a74f5807adb95a08", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     let i: int = 90;\n     while i < 100 {\n-        log_full(core::debug, i);\n+        log(debug, i);\n         i = i + 1;\n         if i == 95 {\n             let v: [int] ="}, {"sha": "765f87de7b290d0ff0289d216e9fe71c7ad70f35", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let expected = 1234u;\n     kernel32::SetLastError(expected);\n     let actual = kernel32::GetLastError();\n-    log_full(core::error, actual);\n+    log(error, actual);\n     assert (expected == actual);\n }\n "}, {"sha": "ba5145870e1764d6c87a8d2959037cc043f38065", "filename": "src/test/run-pass/yield2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fyield2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Frun-pass%2Fyield2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield2.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -3,5 +3,5 @@ use std;\n \n fn main() {\n     let i: int = 0;\n-    while i < 100 { i = i + 1; log_full(core::error, i); task::yield(); }\n+    while i < 100 { i = i + 1; log(error, i); task::yield(); }\n }"}, {"sha": "a94b1739b32454a8098d8ea1819490fa896c4d76", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -14,21 +14,21 @@ fn test_simple() {\n     assert (d.size() == 3u);\n     d.add_back(137);\n     assert (d.size() == 4u);\n-    log_full(core::debug, d.peek_front());\n+    log(debug, d.peek_front());\n     assert (d.peek_front() == 42);\n-    log_full(core::debug, d.peek_back());\n+    log(debug, d.peek_back());\n     assert (d.peek_back() == 137);\n     let i: int = d.pop_front();\n-    log_full(core::debug, i);\n+    log(debug, i);\n     assert (i == 42);\n     i = d.pop_back();\n-    log_full(core::debug, i);\n+    log(debug, i);\n     assert (i == 137);\n     i = d.pop_back();\n-    log_full(core::debug, i);\n+    log(debug, i);\n     assert (i == 137);\n     i = d.pop_back();\n-    log_full(core::debug, i);\n+    log(debug, i);\n     assert (i == 17);\n     assert (d.size() == 0u);\n     d.add_back(3);\n@@ -39,10 +39,10 @@ fn test_simple() {\n     assert (d.size() == 3u);\n     d.add_front(1);\n     assert (d.size() == 4u);\n-    log_full(core::debug, d.get(0));\n-    log_full(core::debug, d.get(1));\n-    log_full(core::debug, d.get(2));\n-    log_full(core::debug, d.get(3));\n+    log(debug, d.get(0));\n+    log(debug, d.get(1));\n+    log(debug, d.get(2));\n+    log(debug, d.get(3));\n     assert (d.get(0) == 1);\n     assert (d.get(1) == 2);\n     assert (d.get(2) == 3);"}, {"sha": "0810253c9fd48203d42b9c4b5ff9b35286564730", "filename": "src/test/stdtest/four.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ffour.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ffour.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffour.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -139,7 +139,7 @@ fn test_four_to_tri() {\n     assert tri::eq( four::to_trit(four::true), tri::true );\n     assert tri::eq( four::to_trit(four::false), tri::false );\n     assert tri::eq( four::to_trit(four::none), tri::unknown );\n-    log_full(core::debug, four::to_trit(four::both));\n+    log(debug, four::to_trit(four::both));\n     assert tri::eq( four::to_trit(four::both), tri::unknown );\n }\n "}, {"sha": "a0ab02a898f26e57c804c7076b98135e1d2676eb", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -7,7 +7,7 @@ import vec;\n #[test]\n fn test_connect() {\n     let slash = fs::path_sep();\n-    log_full(core::error, fs::connect(\"a\", \"b\"));\n+    log(error, fs::connect(\"a\", \"b\"));\n     assert (fs::connect(\"a\", \"b\") == \"a\" + slash + \"b\");\n     assert (fs::connect(\"a\" + slash, \"b\") == \"a\" + slash + \"b\");\n }\n@@ -22,7 +22,7 @@ fn list_dir() {\n     // Just assuming that we've got some contents in the current directory\n     assert (vec::len(dirs) > 0u);\n \n-    for dir in dirs { log_full(core::debug, dir); }\n+    for dir in dirs { log(debug, dir); }\n }\n \n #[test]\n@@ -140,7 +140,7 @@ fn normalize9() {\n fn normalize10() {\n     let actual = fs::normalize(\"/a/b/c/../d/./../../e/\");\n     let expected = \"/a/e/\";\n-    log_full(core::error, actual);\n+    log(error, actual);\n     assert actual == expected;\n }\n \n@@ -156,7 +156,7 @@ fn normalize11() {\n fn normalize12() {\n    let actual = fs::normalize(\"C:/whatever\");\n    let expected = \"C:/whatever\";\n-   log_full(core::error, actual);\n+   log(error, actual);\n    assert actual == expected;\n }\n "}, {"sha": "52b68f888c48c3ac6ab601464d44bb8f547be786", "filename": "src/test/stdtest/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fgetopts.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -246,7 +246,7 @@ fn test_optflag_long_arg() {\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       err(f) {\n-        log_full(core::error, opt::fail_str(f));\n+        log(error, opt::fail_str(f));\n         check_fail_type(f, unexpected_argument);\n       }\n       _ { fail; }"}, {"sha": "7e481fabea029a5bba413fbed05dd3b9a1bc7d6c", "filename": "src/test/stdtest/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fio.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -9,17 +9,17 @@ import result;\n #[test]\n fn test_simple() {\n     let tmpfile: str = \"tmp/lib-io-test-simple.tmp\";\n-    log_full(core::debug, tmpfile);\n+    log(debug, tmpfile);\n     let frood: str = \"A hoopy frood who really knows where his towel is.\";\n-    log_full(core::debug, frood);\n+    log(debug, frood);\n     {\n         let out: io::writer =\n             result::get(io::file_writer(tmpfile, [io::create, io::truncate]));\n         out.write_str(frood);\n     }\n     let inp: io::reader = result::get(io::file_reader(tmpfile));\n     let frood2: str = inp.read_c_str();\n-    log_full(core::debug, frood2);\n+    log(debug, frood2);\n     assert (str::eq(frood, frood2));\n }\n "}, {"sha": "7f7b2c4f3b392f9f95195169515cc47fccce0af4", "filename": "src/test/stdtest/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fos.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -36,7 +36,7 @@ fn get_exe_path() {\n     let path = std::os::get_exe_path();\n     assert option::is_some(path);\n     let path = option::get(path);\n-    log_full(core::debug, path);\n+    log(debug, path);\n \n     // Hard to test this function\n     if std::os::target_os() != \"win32\" {"}, {"sha": "e711288c6152c616fdbf1b62f20e16263844865c", "filename": "src/test/stdtest/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fpath.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,8 +11,8 @@ import std::os;\n fn test() {\n     assert (!fs::path_is_absolute(\"test-path\"));\n \n-    log_full(core::debug, \"Current working directory: \" + os::getcwd());\n+    log(debug, \"Current working directory: \" + os::getcwd());\n \n-    log_full(core::debug, fs::make_absolute(\"test-path\"));\n-    log_full(core::debug, fs::make_absolute(\"/usr/bin\"));\n+    log(debug, fs::make_absolute(\"test-path\"));\n+    log(debug, fs::make_absolute(\"/usr/bin\"));\n }"}, {"sha": "67e16942e41111a047ac800274c30f070bc53761", "filename": "src/test/stdtest/qsort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fqsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fqsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -13,7 +13,7 @@ fn check_sort(v1: [mutable int], v2: [mutable int]) {\n     std::sort::quick_sort::<int>(f, v1);\n     let i = 0u;\n     while i < len {\n-        log_full(core::debug, v2[i]);\n+        log(debug, v2[i]);\n         assert (v2[i] == v1[i]);\n         i += 1u;\n     }"}, {"sha": "b4371b2c3b45b37171a3f6b75c372386d280e013", "filename": "src/test/stdtest/qsort3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fqsort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fqsort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort3.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -11,7 +11,7 @@ fn check_sort(v1: [mutable int], v2: [mutable int]) {\n     std::sort::quick_sort3::<int>(f1, f2, v1);\n     let i = 0u;\n     while i < len {\n-        log_full(core::debug, v2[i]);\n+        log(debug, v2[i]);\n         assert (v2[i] == v1[i]);\n         i += 1u;\n     }"}, {"sha": "1460fb87f808f4524b31f9c78f867116555cc7a0", "filename": "src/test/stdtest/rand.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frand.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -8,33 +8,33 @@ import str;\n #[test]\n fn test() {\n     let r1: rand::rng = rand::mk_rng();\n-    log_full(core::debug, r1.next());\n-    log_full(core::debug, r1.next());\n+    log(debug, r1.next());\n+    log(debug, r1.next());\n     {\n         let r2 = rand::mk_rng();\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r2.next());\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r2.next());\n-        log_full(core::debug, r2.next());\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r1.next());\n-        log_full(core::debug, r2.next());\n-        log_full(core::debug, r2.next());\n-        log_full(core::debug, r2.next());\n+        log(debug, r1.next());\n+        log(debug, r2.next());\n+        log(debug, r1.next());\n+        log(debug, r1.next());\n+        log(debug, r2.next());\n+        log(debug, r2.next());\n+        log(debug, r1.next());\n+        log(debug, r1.next());\n+        log(debug, r1.next());\n+        log(debug, r2.next());\n+        log(debug, r2.next());\n+        log(debug, r2.next());\n     }\n-    log_full(core::debug, r1.next());\n-    log_full(core::debug, r1.next());\n+    log(debug, r1.next());\n+    log(debug, r1.next());\n }\n \n #[test]\n fn genstr() {\n     let r: rand::rng = rand::mk_rng();\n-    log_full(core::debug, r.gen_str(10u));\n-    log_full(core::debug, r.gen_str(10u));\n-    log_full(core::debug, r.gen_str(10u));\n+    log(debug, r.gen_str(10u));\n+    log(debug, r.gen_str(10u));\n+    log(debug, r.gen_str(10u));\n     assert(str::char_len(r.gen_str(10u)) == 10u);\n     assert(str::char_len(r.gen_str(16u)) == 16u);\n }"}, {"sha": "fae791c3d9cfaae33376f298982893cee99e9a4f", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -35,8 +35,8 @@ fn test_pipes() {\n     readclose(pipe_err.in);\n     os::waitpid(pid);\n \n-    log_full(core::debug, expected);\n-    log_full(core::debug, actual);\n+    log(debug, expected);\n+    log(debug, actual);\n     assert (expected == actual);\n \n     fn writeclose(fd: fd_t, s: str) {"}, {"sha": "83d885797bfc1ce11c96b681505d3579f74e9a0b", "filename": "src/test/stdtest/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsort.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -9,7 +9,7 @@ fn check_sort(v1: [int], v2: [int]) {\n     let v3 = std::sort::merge_sort::<int>(f, v1);\n     let i = 0u;\n     while i < len {\n-        log_full(core::debug, v3[i]);\n+        log(debug, v3[i]);\n         assert (v3[i] == v2[i]);\n         i += 1u;\n     }"}, {"sha": "c3f0e53bac59aef29a463bf35a6130d8f4e29f93", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -42,10 +42,10 @@ fn test_index_and_rindex() {\n #[test]\n fn test_split() {\n     fn t(s: str, c: char, u: [str]) {\n-        log_full(core::debug, \"split: \" + s);\n+        log(debug, \"split: \" + s);\n         let v = str::split(s, c as u8);\n         #debug(\"split to: \");\n-        log_full(core::debug, v);\n+        log(debug, v);\n         assert (vec::all2(v, u, { |a,b| a == b }));\n     }\n     t(\"abc.hello.there\", '.', [\"abc\", \"hello\", \"there\"]);\n@@ -56,12 +56,12 @@ fn test_split() {\n #[test]\n fn test_splitn() {\n     fn t(s: str, c: char, n: uint, u: [str]) {\n-        log_full(core::debug, \"splitn: \" + s);\n+        log(debug, \"splitn: \" + s);\n         let v = str::splitn(s, c as u8, n);\n         #debug(\"split to: \");\n-        log_full(core::debug, v);\n+        log(debug, v);\n         #debug(\"comparing vs. \");\n-        log_full(core::debug, u);\n+        log(debug, u);\n         assert (vec::all2(v, u, { |a,b| a == b }));\n     }\n     t(\"abc.hello.there\", '.', 0u, [\"abc.hello.there\"]);\n@@ -92,8 +92,8 @@ fn test_split_str() {\n fn test_find() {\n     fn t(haystack: str, needle: str, i: int) {\n         let j: int = str::find(haystack, needle);\n-        log_full(core::debug, \"searched for \" + needle);\n-        log_full(core::debug, j);\n+        log(debug, \"searched for \" + needle);\n+        log(debug, j);\n         assert (i == j);\n     }\n     t(\"this is a simple\", \"is a\", 5);\n@@ -329,8 +329,8 @@ fn vec_str_conversions() {\n     while i < n1 {\n         let a: u8 = s1[i];\n         let b: u8 = s2[i];\n-        log_full(core::debug, a);\n-        log_full(core::debug, b);\n+        log(debug, a);\n+        log(debug, b);\n         assert (a == b);\n         i += 1u;\n     }"}, {"sha": "632f42c0f6be1abb03240bcd2155d3737561b33d", "filename": "src/test/stdtest/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsys.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -4,7 +4,7 @@ import sys;\n \n #[test]\n fn last_os_error() {\n-    log_full(core::debug, sys::last_os_error());\n+    log(debug, sys::last_os_error());\n }\n \n #[test]"}, {"sha": "31299e703be3589be5212a07a5ba2fa952ab741d", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dfbe7b1b8d630488441982cf3d46f82a3a89db/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "patch": "@@ -35,7 +35,7 @@ fn test_join_chan() {\n     task::spawn_notify((), winner, comm::chan(p));\n     let s = comm::recv(p);\n     #error(\"received task status message\");\n-    log_full(core::error, s);\n+    log(error, s);\n     alt s {\n       task::exit(_, task::tr_success.) {/* yay! */ }\n       _ { fail \"invalid task status received\" }\n@@ -52,7 +52,7 @@ fn test_join_chan_fail() {\n     task::spawn_notify((), failer, comm::chan(p));\n     let s = comm::recv(p);\n     #error(\"received task status message\");\n-    log_full(core::error, s);\n+    log(error, s);\n     alt s {\n       task::exit(_, task::tr_failure.) {/* yay! */ }\n       _ { fail \"invalid task status received\" }\n@@ -70,7 +70,7 @@ fn test_join_convenient() {\n #[ignore]\n fn spawn_polymorphic() {\n     // FIXME #1038: Can't spawn palymorphic functions\n-    /*fn foo<send T>(x: T) { log_full(core::error, x); }\n+    /*fn foo<send T>(x: T) { log(error, x); }\n \n     task::spawn(true, foo);\n     task::spawn(42, foo);*/"}]}