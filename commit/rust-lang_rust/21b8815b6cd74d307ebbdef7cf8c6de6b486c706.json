{"sha": "21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "node_id": "C_kwDOAAsO6NoAKDIxYjg4MTViNmNkNzRkMzA3ZWJiZGVmN2NmOGM2ZGU2YjQ4NmM3MDY", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@fb.com", "date": "2022-11-17T23:24:39Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-05-20T22:12:54Z"}, "message": "Apply `noalias`, `nonnull`, `dereferenceable`, and `align` attributes unconditionally.\n\nWe've done measurements with Miri and have determined that `noalias` shouldn't\nbreak code. The requirements that allow us to add dereferenceable and align\nhave been long documented in the standard library documentation.", "tree": {"sha": "e28380f508bcfb0c3f4ee2f1d5a10639b5461a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28380f508bcfb0c3f4ee2f1d5a10639b5461a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "html_url": "https://github.com/rust-lang/rust/commit/21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b8815b6cd74d307ebbdef7cf8c6de6b486c706/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74dd3cb15931d8d7785b14b12500f190adae2b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dd3cb15931d8d7785b14b12500f190adae2b5e", "html_url": "https://github.com/rust-lang/rust/commit/74dd3cb15931d8d7785b14b12500f190adae2b5e"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "5bfb48cb5e005c10b5b08e9464aa0751638338fe", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21b8815b6cd74d307ebbdef7cf8c6de6b486c706/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8815b6cd74d307ebbdef7cf8c6de6b486c706/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "patch": "@@ -307,24 +307,17 @@ fn adjust_for_rust_scalar<'tcx>(\n                 attrs.set(ArgAttribute::ReadOnly);\n             }\n         }\n-    }\n \n-    // If this is the argument to `drop_in_place`, the contents of which we fully control as the\n-    // compiler, then we may be able to mark that argument `noalias`. Currently, we're conservative\n-    // and do so only if `drop_in_place` results in a direct call to the programmer's `drop` method.\n-    // The `drop` method requires `&mut self`, so we're effectively just propagating the `noalias`\n-    // guarantee from `drop` upward to `drop_in_place` in this case.\n-    if is_drop_target {\n-        match *layout.ty.kind() {\n-            ty::RawPtr(inner) => {\n-                if let ty::Adt(adt_def, _) = inner.ty.kind() {\n-                    if adt_def.destructor(cx.tcx()).is_some() {\n-                        debug!(\"marking drop_in_place argument as noalias\");\n-                        attrs.set(ArgAttribute::NoAlias);\n-                    }\n-                }\n-            }\n-            _ => bug!(\"drop target isn't a raw pointer\"),\n+        // If this is the argument to `drop_in_place`, the contents of which we fully control as the\n+        // compiler, then we mark this argument as `noalias`, aligned, and dereferenceable. (The\n+        // standard library documents the necessary requirements to uphold these attributes for code\n+        // that calls this method directly.) This can enable better optimizations, such as argument\n+        // promotion.\n+        if is_drop_target {\n+            attrs.set(ArgAttribute::NoAlias);\n+            attrs.set(ArgAttribute::NonNull);\n+            attrs.pointee_size = pointee.size;\n+            attrs.pointee_align = Some(pointee.align);\n         }\n     }\n }"}, {"sha": "64ac8760456cf26f49a1ab243b5d3185b82a88d9", "filename": "tests/codegen/drop-in-place-noalias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b8815b6cd74d307ebbdef7cf8c6de6b486c706/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8815b6cd74d307ebbdef7cf8c6de6b486c706/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop-in-place-noalias.rs?ref=21b8815b6cd74d307ebbdef7cf8c6de6b486c706", "patch": "@@ -4,7 +4,7 @@\n \n use std::hint::black_box;\n \n-// CHECK: define{{.*}}drop_in_place{{.*}}Foo{{.*}}({{.*}}noalias{{.*}})\n+// CHECK: define{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}Foo{{.*}}({{.*}}noalias {{.*}} align 4 dereferenceable(12){{.*}})\n \n #[repr(C)]\n pub struct Foo {"}]}