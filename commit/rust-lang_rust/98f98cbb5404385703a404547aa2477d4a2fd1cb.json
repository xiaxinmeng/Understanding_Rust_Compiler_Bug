{"sha": "98f98cbb5404385703a404547aa2477d4a2fd1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Zjk4Y2JiNTQwNDM4NTcwM2E0MDQ1NDdhYTI0NzdkNGEyZmQxY2I=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-13T13:53:34Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-13T13:53:34Z"}, "message": "Refactor tt::Delimiter", "tree": {"sha": "fe84a7b9a434cb268faea247d9d6dbffed894696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe84a7b9a434cb268faea247d9d6dbffed894696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f98cbb5404385703a404547aa2477d4a2fd1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f98cbb5404385703a404547aa2477d4a2fd1cb", "html_url": "https://github.com/rust-lang/rust/commit/98f98cbb5404385703a404547aa2477d4a2fd1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f98cbb5404385703a404547aa2477d4a2fd1cb/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16cf6bcf4b614a7a1a3a3f3659f7bb3df7cff086", "url": "https://api.github.com/repos/rust-lang/rust/commits/16cf6bcf4b614a7a1a3a3f3659f7bb3df7cff086", "html_url": "https://github.com/rust-lang/rust/commit/16cf6bcf4b614a7a1a3a3f3659f7bb3df7cff086"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "aa8a5f23fd6e7f12908b8f4bc8ea4de43ca35c14", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -16,7 +16,7 @@ macro_rules! __quote {\n         {\n             let children = $crate::__quote!($($tt)*);\n             let subtree = tt::Subtree {\n-                delimiter: tt::Delimiter::$delim,\n+                delimiter: Some(tt::Delimiter::$delim),\n                 token_trees: $crate::quote::IntoTt::to_tokens(children),\n             };\n             subtree\n@@ -124,7 +124,7 @@ pub(crate) trait IntoTt {\n \n impl IntoTt for Vec<tt::TokenTree> {\n     fn to_subtree(self) -> tt::Subtree {\n-        tt::Subtree { delimiter: tt::Delimiter::None, token_trees: self }\n+        tt::Subtree { delimiter: None, token_trees: self }\n     }\n \n     fn to_tokens(self) -> Vec<tt::TokenTree> {\n@@ -254,7 +254,8 @@ mod tests {\n         let fields =\n             fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone()).flatten();\n \n-        let list = tt::Subtree { delimiter: tt::Delimiter::Brace, token_trees: fields.collect() };\n+        let list =\n+            tt::Subtree { delimiter: Some(tt::Delimiter::Brace), token_trees: fields.collect() };\n \n         let quoted = quote! {\n             impl Clone for #struct_name {"}, {"sha": "0d2d43bef411450e59597b6f72ce5662d7f05011", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -159,14 +159,14 @@ impl Rule {\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?\n             .clone();\n-        lhs.delimiter = tt::Delimiter::None;\n+        lhs.delimiter = None;\n         src.expect_char('=').map_err(|()| ParseError::Expected(\"expected `=`\".to_string()))?;\n         src.expect_char('>').map_err(|()| ParseError::Expected(\"expected `>`\".to_string()))?;\n         let mut rhs = src\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?\n             .clone();\n-        rhs.delimiter = tt::Delimiter::None;\n+        rhs.delimiter = None;\n         Ok(crate::Rule { lhs, rhs })\n     }\n }"}, {"sha": "3f51364780a083713440f5f7252d5a70f4f4dd4e", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -16,7 +16,7 @@ impl Bindings {\n     fn push_optional(&mut self, name: &SmolStr) {\n         // FIXME: Do we have a better way to represent an empty token ?\n         // Insert an empty subtree for empty token\n-        let tt = tt::Subtree { delimiter: tt::Delimiter::None, token_trees: vec![] }.into();\n+        let tt = tt::Subtree::default().into();\n         self.inner.insert(name.clone(), Binding::Fragment(Fragment::Tokens(tt)));\n     }\n \n@@ -65,7 +65,7 @@ macro_rules! bail {\n }\n \n pub(super) fn match_(pattern: &tt::Subtree, src: &tt::Subtree) -> Result<Bindings, ExpandError> {\n-    assert!(pattern.delimiter == tt::Delimiter::None);\n+    assert!(pattern.delimiter == None);\n \n     let mut res = Bindings::default();\n     let mut src = TtIter::new(src);\n@@ -210,7 +210,7 @@ impl<'a> TtIter<'a> {\n             0 => Err(()),\n             1 => Ok(res[0].clone()),\n             _ => Ok(tt::TokenTree::Subtree(tt::Subtree {\n-                delimiter: tt::Delimiter::None,\n+                delimiter: None,\n                 token_trees: res.into_iter().cloned().collect(),\n             })),\n         }"}, {"sha": "f7636db11b8abd031686b3bccf37348281729749", "filename": "crates/ra_mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -50,7 +50,7 @@ pub(super) fn transcribe(\n     template: &tt::Subtree,\n     bindings: &Bindings,\n ) -> Result<tt::Subtree, ExpandError> {\n-    assert!(template.delimiter == tt::Delimiter::None);\n+    assert!(template.delimiter == None);\n     let mut ctx = ExpandCtx { bindings: &bindings, nesting: Vec::new(), var_expanded: false };\n     expand_subtree(&mut ctx, template)\n }\n@@ -106,7 +106,7 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> Result<Fragment, ExpandError>\n         // ```\n         // We just treat it a normal tokens\n         let tt = tt::Subtree {\n-            delimiter: tt::Delimiter::None,\n+            delimiter: None,\n             token_trees: vec![\n                 tt::Leaf::from(tt::Punct { char: '$', spacing: tt::Spacing::Alone }).into(),\n                 tt::Leaf::from(tt::Ident { text: v.clone(), id: tt::TokenId::unspecified() })\n@@ -147,7 +147,7 @@ fn expand_repeat(\n     ctx.var_expanded = false;\n \n     while let Ok(mut t) = expand_subtree(ctx, template) {\n-        t.delimiter = tt::Delimiter::None;\n+        t.delimiter = None;\n         // if no var expanded in the child, we count it as a fail\n         if !ctx.var_expanded {\n             break;\n@@ -212,7 +212,7 @@ fn expand_repeat(\n \n     // Check if it is a single token subtree without any delimiter\n     // e.g {Delimiter:None> ['>'] /Delimiter:None>}\n-    let tt = tt::Subtree { delimiter: tt::Delimiter::None, token_trees: buf }.into();\n+    let tt = tt::Subtree { delimiter: None, token_trees: buf }.into();\n     Ok(Fragment::Tokens(tt))\n }\n \n@@ -225,7 +225,7 @@ fn push_fragment(buf: &mut Vec<tt::TokenTree>, fragment: Fragment) {\n \n fn push_subtree(buf: &mut Vec<tt::TokenTree>, tt: tt::Subtree) {\n     match tt.delimiter {\n-        tt::Delimiter::None => buf.extend(tt.token_trees),\n+        None => buf.extend(tt.token_trees),\n         _ => buf.push(tt.into()),\n     }\n }"}, {"sha": "061e9f20b2b6f2c47965ed3f5d2030b3b12557e9", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -114,12 +114,12 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n     }\n }\n \n-fn convert_delim(d: tt::Delimiter, closing: bool) -> TtToken {\n+fn convert_delim(d: Option<tt::Delimiter>, closing: bool) -> TtToken {\n     let (kinds, texts) = match d {\n-        tt::Delimiter::Parenthesis => ([T!['('], T![')']], \"()\"),\n-        tt::Delimiter::Brace => ([T!['{'], T!['}']], \"{}\"),\n-        tt::Delimiter::Bracket => ([T!['['], T![']']], \"[]\"),\n-        tt::Delimiter::None => ([L_DOLLAR, R_DOLLAR], \"\"),\n+        Some(tt::Delimiter::Parenthesis) => ([T!['('], T![')']], \"()\"),\n+        Some(tt::Delimiter::Brace) => ([T!['{'], T!['}']], \"{}\"),\n+        Some(tt::Delimiter::Bracket) => ([T!['['], T![']']], \"[]\"),\n+        None => ([L_DOLLAR, R_DOLLAR], \"\"),\n     };\n \n     let idx = closing as usize;"}, {"sha": "b8e2cfc1d8c2ab8c1fd44f37ff9ed44dc201c8fb", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -51,7 +51,7 @@ pub fn token_tree_to_syntax_node(\n ) -> Result<(Parse<SyntaxNode>, TokenMap), ExpandError> {\n     let tmp;\n     let tokens = match tt {\n-        tt::Subtree { delimiter: tt::Delimiter::None, token_trees } => token_trees.as_slice(),\n+        tt::Subtree { delimiter: None, token_trees } => token_trees.as_slice(),\n         _ => {\n             tmp = [tt.clone().into()];\n             &tmp[..]\n@@ -121,7 +121,7 @@ fn convert_doc_comment(token: &ra_syntax::SyntaxToken) -> Option<Vec<tt::TokenTr\n         token_trees.push(mk_punct('!'));\n     }\n     token_trees.push(tt::TokenTree::from(tt::Subtree {\n-        delimiter: tt::Delimiter::Bracket,\n+        delimiter: Some(tt::Delimiter::Bracket),\n         token_trees: meta_tkns,\n     }));\n \n@@ -156,7 +156,7 @@ impl Convertor {\n     fn go(&mut self, tt: &SyntaxNode) -> Option<tt::Subtree> {\n         // This tree is empty\n         if tt.first_child_or_token().is_none() {\n-            return Some(tt::Subtree { token_trees: vec![], delimiter: tt::Delimiter::None });\n+            return Some(tt::Subtree { token_trees: vec![], delimiter: None });\n         }\n \n         let first_child = tt.first_child_or_token()?;\n@@ -173,7 +173,7 @@ impl Convertor {\n         .last()\n         .unwrap();\n         if first_child.kind().is_trivia() {\n-            return Some(tt::Subtree { token_trees: vec![], delimiter: tt::Delimiter::None });\n+            return Some(tt::Subtree { token_trees: vec![], delimiter: None });\n         }\n \n         let last_child = successors(Some(last_child), |it| {\n@@ -187,10 +187,10 @@ impl Convertor {\n         .unwrap();\n \n         let (delimiter, skip_first) = match (first_child.kind(), last_child.kind()) {\n-            (T!['('], T![')']) => (tt::Delimiter::Parenthesis, true),\n-            (T!['{'], T!['}']) => (tt::Delimiter::Brace, true),\n-            (T!['['], T![']']) => (tt::Delimiter::Bracket, true),\n-            _ => (tt::Delimiter::None, false),\n+            (T!['('], T![')']) => (Some(tt::Delimiter::Parenthesis), true),\n+            (T!['{'], T!['}']) => (Some(tt::Delimiter::Brace), true),\n+            (T!['['], T![']']) => (Some(tt::Delimiter::Bracket), true),\n+            _ => (None, false),\n         };\n \n         let mut token_trees = Vec::new();\n@@ -246,9 +246,7 @@ impl Convertor {\n                 }\n                 NodeOrToken::Node(node) => {\n                     let child_subtree = self.go(&node)?;\n-                    if child_subtree.delimiter == tt::Delimiter::None\n-                        && node.kind() != SyntaxKind::TOKEN_TREE\n-                    {\n+                    if child_subtree.delimiter.is_none() && node.kind() != SyntaxKind::TOKEN_TREE {\n                         token_trees.extend(child_subtree.token_trees);\n                     } else {\n                         token_trees.push(child_subtree.into());\n@@ -299,16 +297,16 @@ impl<'a> TtTreeSink<'a> {\n     }\n }\n \n-fn delim_to_str(d: tt::Delimiter, closing: bool) -> SmolStr {\n+fn delim_to_str(d: Option<tt::Delimiter>, closing: bool) -> SmolStr {\n     let texts = match d {\n-        tt::Delimiter::Parenthesis => \"()\",\n-        tt::Delimiter::Brace => \"{}\",\n-        tt::Delimiter::Bracket => \"[]\",\n-        tt::Delimiter::None => \"\",\n+        Some(tt::Delimiter::Parenthesis) => \"()\",\n+        Some(tt::Delimiter::Brace) => \"{}\",\n+        Some(tt::Delimiter::Bracket) => \"[]\",\n+        None => return \"\".into(),\n     };\n \n     let idx = closing as usize;\n-    let text = if !texts.is_empty() { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n+    let text = &texts[idx..texts.len() - (1 - idx)];\n     text.into()\n }\n \n@@ -497,7 +495,7 @@ mod tests {\n         let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n         let tt = ast_to_token_tree(&token_tree).unwrap().0;\n \n-        assert_eq!(tt.delimiter, tt::Delimiter::Brace);\n+        assert_eq!(tt.delimiter, Some(tt::Delimiter::Brace));\n     }\n \n     #[test]"}, {"sha": "148cc262547cca2510c3a433254d573d557f0b7e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -1463,7 +1463,7 @@ pub(crate) fn assert_expansion(\n         let wrapped = ast::SourceFile::parse(&wrapped);\n         let wrapped = wrapped.tree().syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n         let mut wrapped = ast_to_token_tree(&wrapped).unwrap().0;\n-        wrapped.delimiter = tt::Delimiter::None;\n+        wrapped.delimiter = None;\n         wrapped\n     };\n     let (expanded_tree, expected_tree) = match kind {"}, {"sha": "e7bfd5fd294e6274f09c21b23ec8093fafe541f2", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f98cbb5404385703a404547aa2477d4a2fd1cb/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=98f98cbb5404385703a404547aa2477d4a2fd1cb", "patch": "@@ -48,9 +48,9 @@ pub enum Leaf {\n }\n impl_froms!(Leaf: Literal, Punct, Ident);\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]\n pub struct Subtree {\n-    pub delimiter: Delimiter,\n+    pub delimiter: Option<Delimiter>,\n     pub token_trees: Vec<TokenTree>,\n }\n \n@@ -59,7 +59,6 @@ pub enum Delimiter {\n     Parenthesis,\n     Brace,\n     Bracket,\n-    None,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -97,10 +96,10 @@ impl fmt::Display for TokenTree {\n impl fmt::Display for Subtree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let (l, r) = match self.delimiter {\n-            Delimiter::Parenthesis => (\"(\", \")\"),\n-            Delimiter::Brace => (\"{\", \"}\"),\n-            Delimiter::Bracket => (\"[\", \"]\"),\n-            Delimiter::None => (\"\", \"\"),\n+            Some(Delimiter::Parenthesis) => (\"(\", \")\"),\n+            Some(Delimiter::Brace) => (\"{\", \"}\"),\n+            Some(Delimiter::Bracket) => (\"[\", \"]\"),\n+            None => (\"\", \"\"),\n         };\n         f.write_str(l)?;\n         let mut needs_space = false;"}]}