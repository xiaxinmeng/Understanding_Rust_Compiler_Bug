{"sha": "1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTUyNGJiNDJjNmRkMmUyNGU4ZWU4NTYxNDI3ZTBhOTk5MWU2MmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-04T13:06:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-04T13:06:04Z"}, "message": "Merge #5220\n\n5220: Fix lookup in tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e6d02b96f801cf835eb65d5e8b0dce38eb48fbeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6d02b96f801cf835eb65d5e8b0dce38eb48fbeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAH68CRBK7hj4Ov3rIwAAdHIIABRAHVPbpW+Y73/ld2V+FIPR\nB+YhK5hpFIZmVEtEDYL2OaxroRuW9ucCa+AVKTx76pNzTqY5w12U/rtta4Kbg7DH\n+QFhqyMsAXootXxDZNxErWje9V8bM6XwL7XPTquDyw3thCOsmtSVFQWsY4DuIZv+\ns+7mpmyIls/qypr2/z8TvHDuWQPCIzU8A34yhQ4/5SphxFeZPpMfOWqgTzrqd/55\nz8+Vrgb99zsagOFcios9dGYDTszeFtY+2DXFg2jkhKPEsEPqUNiMdibQb+8pQ5M7\nYpvNymNmvSPlQIc4aDjp93uMoLVltlDO9Ro7vsc3yJohoWsM/OzEseq38dUsYRE=\n=hcbC\n-----END PGP SIGNATURE-----\n", "payload": "tree e6d02b96f801cf835eb65d5e8b0dce38eb48fbeb\nparent 9f754e0518e7f2860891079a117a3e4bc6f4a8fd\nparent 9dacd2338cbc7b414fc7a22be108500abfa826f4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593867964 +0000\ncommitter GitHub <noreply@github.com> 1593867964 +0000\n\nMerge #5220\n\n5220: Fix lookup in tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "html_url": "https://github.com/rust-lang/rust/commit/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f754e0518e7f2860891079a117a3e4bc6f4a8fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f754e0518e7f2860891079a117a3e4bc6f4a8fd", "html_url": "https://github.com/rust-lang/rust/commit/9f754e0518e7f2860891079a117a3e4bc6f4a8fd"}, {"sha": "9dacd2338cbc7b414fc7a22be108500abfa826f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dacd2338cbc7b414fc7a22be108500abfa826f4", "html_url": "https://github.com/rust-lang/rust/commit/9dacd2338cbc7b414fc7a22be108500abfa826f4"}], "stats": {"total": 324, "additions": 141, "deletions": 183}, "files": [{"sha": "9fb5c050e0f0559a4f1bc5ff3f44dbd81bb6f831", "filename": "crates/ra_ide/src/completion/complete_fn_param.rs", "status": "modified", "additions": 60, "deletions": 64, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -54,85 +54,81 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    fn do_magic_completion(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Magic)\n+    use crate::completion::{test_utils::do_completion, CompletionKind};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = do_completion(ra_fixture, CompletionKind::Magic);\n+        expect.assert_debug_eq(&actual);\n     }\n \n     #[test]\n     fn test_param_completion_last_param() {\n-        assert_debug_snapshot!(\n-        do_magic_completion(\n-                r\"\n-                fn foo(file_id: FileId) {}\n-                fn bar(file_id: FileId) {}\n-                fn baz(file<|>) {}\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"file_id: FileId\",\n-                source_range: 61..65,\n-                delete: 61..65,\n-                insert: \"file_id: FileId\",\n-                lookup: \"file_id\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn foo(file_id: FileId) {}\n+fn bar(file_id: FileId) {}\n+fn baz(file<|>) {}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"file_id: FileId\",\n+                        source_range: 61..65,\n+                        delete: 61..65,\n+                        insert: \"file_id: FileId\",\n+                        lookup: \"file_id\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_param_completion_nth_param() {\n-        assert_debug_snapshot!(\n-        do_magic_completion(\n-                r\"\n-                fn foo(file_id: FileId) {}\n-                fn bar(file_id: FileId) {}\n-                fn baz(file<|>, x: i32) {}\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"file_id: FileId\",\n-                source_range: 61..65,\n-                delete: 61..65,\n-                insert: \"file_id: FileId\",\n-                lookup: \"file_id\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn foo(file_id: FileId) {}\n+fn bar(file_id: FileId) {}\n+fn baz(file<|>, x: i32) {}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"file_id: FileId\",\n+                        source_range: 61..65,\n+                        delete: 61..65,\n+                        insert: \"file_id: FileId\",\n+                        lookup: \"file_id\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn test_param_completion_trait_param() {\n-        assert_debug_snapshot!(\n-        do_magic_completion(\n-                r\"\n-                pub(crate) trait SourceRoot {\n-                    pub fn contains(&self, file_id: FileId) -> bool;\n-                    pub fn module_map(&self) -> &ModuleMap;\n-                    pub fn lines(&self, file_id: FileId) -> &LineIndex;\n-                    pub fn syntax(&self, file<|>)\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"file_id: FileId\",\n-                source_range: 208..212,\n-                delete: 208..212,\n-                insert: \"file_id: FileId\",\n-                lookup: \"file_id\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+pub(crate) trait SourceRoot {\n+    pub fn contains(&self, file_id: FileId) -> bool;\n+    pub fn module_map(&self) -> &ModuleMap;\n+    pub fn lines(&self, file_id: FileId) -> &LineIndex;\n+    pub fn syntax(&self, file<|>)\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"file_id: FileId\",\n+                        source_range: 208..212,\n+                        delete: 208..212,\n+                        insert: \"file_id: FileId\",\n+                        lookup: \"file_id\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n }"}, {"sha": "d6613ed7bd8bcfe91a9801c0dc779bae5082c6ed", "filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 16, "deletions": 119, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -15,130 +15,27 @@ pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &Compl\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n \n-    fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Reference)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn completes_macros_as_item() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn foo() {}\n-\n-                <|>\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 48..48,\n-                delete: 48..48,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                detail: \"macro_rules! foo\",\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_vec_macros_with_square_brackets() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                /// Creates a [`Vec`] containing the arguments.\n-                ///\n-                /// - Create a [`Vec`] containing a given list of elements:\n-                ///\n-                /// ```\n-                /// let v = vec![1, 2, 3];\n-                /// assert_eq!(v[0], 1);\n-                /// assert_eq!(v[1], 2);\n-                /// assert_eq!(v[2], 3);\n-                /// ```\n-                macro_rules! vec {\n-                    () => {}\n-                }\n-\n-                fn foo() {}\n-\n-                <|>\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"vec![\u2026]\",\n-                source_range: 282..282,\n-                delete: 282..282,\n-                insert: \"vec![$0]\",\n-                kind: Macro,\n-                detail: \"macro_rules! vec\",\n-                documentation: Documentation(\n-                    \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n-                ),\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_macros_braces_guessing() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                /// Foo\n-                ///\n-                /// Not call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\n-                /// Call as `let _=foo!  { hello world };`\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn main() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo! {\u2026}\",\n-                source_range: 164..164,\n-                delete: 164..164,\n-                insert: \"foo! {$0}\",\n-                kind: Macro,\n-                detail: \"macro_rules! foo\",\n-                documentation: Documentation(\n-                    \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n-                ),\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 164..164,\n-                delete: 164..164,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n-        );\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n+fn foo() {}\n+\n+<|>\n+\"#,\n+            expect![[r#\"\n+                ma foo!(\u2026) macro_rules! foo\n+            \"#]],\n+        )\n     }\n }"}, {"sha": "9b79e7a095898fdd25115c9a94eb31c92f4e4f8b", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -130,6 +130,7 @@ mod tests {\n                 delete: 90..90,\n                 insert: \"m!($0)\",\n                 kind: Macro,\n+                lookup: \"m!\",\n                 detail: \"macro_rules! m\",\n             },\n         ]"}, {"sha": "5175c8afe2741fbc9d3f2fb1a6c677d8c7967656", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -1189,6 +1189,7 @@ mod tests {\n                 delete: 82..82,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n+                lookup: \"foo!\",\n                 detail: \"#[macro_export]\\nmacro_rules! foo\",\n             },\n             CompletionItem {"}, {"sha": "0d1e9f8ea2a9e62931b4e8c5b88aeb393e4778ce", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -785,6 +785,7 @@ mod tests {\n                 delete: 256..256,\n                 insert: \"bar!($0)\",\n                 kind: Macro,\n+                lookup: \"bar!\",\n                 detail: \"macro_rules! bar\",\n             },\n             CompletionItem {\n@@ -793,6 +794,7 @@ mod tests {\n                 delete: 256..256,\n                 insert: \"baz!($0)\",\n                 kind: Macro,\n+                lookup: \"baz!\",\n                 detail: \"#[macro_export]\\nmacro_rules! baz\",\n             },\n             CompletionItem {\n@@ -801,6 +803,7 @@ mod tests {\n                 delete: 256..256,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n+                lookup: \"foo!\",\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n@@ -854,6 +857,7 @@ mod tests {\n                 delete: 50..50,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n+                lookup: \"foo!\",\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n@@ -893,6 +897,7 @@ mod tests {\n                 delete: 58..58,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n+                lookup: \"foo!\",\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n@@ -932,6 +937,7 @@ mod tests {\n                 delete: 51..51,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n+                lookup: \"foo!\",\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n@@ -1005,6 +1011,7 @@ mod tests {\n                 delete: 80..80,\n                 insert: \"m!($0)\",\n                 kind: Macro,\n+                lookup: \"m!\",\n                 detail: \"macro_rules! m\",\n             },\n             CompletionItem {\n@@ -1058,6 +1065,7 @@ mod tests {\n                 delete: 80..81,\n                 insert: \"m!($0)\",\n                 kind: Macro,\n+                lookup: \"m!\",\n                 detail: \"macro_rules! m\",\n             },\n             CompletionItem {\n@@ -1111,6 +1119,7 @@ mod tests {\n                 delete: 80..81,\n                 insert: \"m!($0)\",\n                 kind: Macro,\n+                lookup: \"m!\",\n                 detail: \"macro_rules! m\",\n             },\n             CompletionItem {"}, {"sha": "946bbef7c94a09c7f06767ba86b100c15bdc9cba", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee524bb42c6dd2e24e8ee8561427e0a9991e62f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=1ee524bb42c6dd2e24e8ee8561427e0a9991e62f", "patch": "@@ -174,6 +174,7 @@ impl Completions {\n                 builder\n                     .insert_snippet(cap, format!(\"{}!{}$0{}\", name, bra, ket))\n                     .label(format!(\"{}!{}\u2026{}\", name, bra, ket))\n+                    .lookup_by(format!(\"{}!\", name))\n             }\n             None if needs_bang => builder.insert_text(format!(\"{}!\", name)),\n             _ => {\n@@ -1079,4 +1080,57 @@ fn go(world: &WorldSnapshot) { go(w<|>) }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn guesses_macro_braces() {\n+        check_edit(\n+            \"vec!\",\n+            r#\"\n+/// Creates a [`Vec`] containing the arguments.\n+///\n+/// ```\n+/// let v = vec![1, 2, 3];\n+/// assert_eq!(v[0], 1);\n+/// assert_eq!(v[1], 2);\n+/// assert_eq!(v[2], 3);\n+/// ```\n+macro_rules! vec { () => {} }\n+\n+fn fn main() { v<|> }\n+\"#,\n+            r#\"\n+/// Creates a [`Vec`] containing the arguments.\n+///\n+/// ```\n+/// let v = vec![1, 2, 3];\n+/// assert_eq!(v[0], 1);\n+/// assert_eq!(v[1], 2);\n+/// assert_eq!(v[2], 3);\n+/// ```\n+macro_rules! vec { () => {} }\n+\n+fn fn main() { vec![$0] }\n+\"#,\n+        );\n+\n+        check_edit(\n+            \"foo!\",\n+            r#\"\n+/// Foo\n+///\n+/// Don't call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`,\n+/// call as `let _=foo!  { hello world };`\n+macro_rules! foo { () => {} }\n+fn main() { <|> }\n+\"#,\n+            r#\"\n+/// Foo\n+///\n+/// Don't call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`,\n+/// call as `let _=foo!  { hello world };`\n+macro_rules! foo { () => {} }\n+fn main() { foo! {$0} }\n+\"#,\n+        )\n+    }\n }"}]}