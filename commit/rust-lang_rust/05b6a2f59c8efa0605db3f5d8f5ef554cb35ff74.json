{"sha": "05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YjZhMmY1OWM4ZWZhMDYwNWRiM2Y1ZDhmNWVmNTU0Y2IzNWZmNzQ=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-08-12T06:27:46Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-08-26T13:15:45Z"}, "message": "std: Add Win64 support\n\nSome extern blobs are duplicated without \"stdcall\" abi,\nsince Win64 does not use any calling convention.\n(Giving any abi to them causes llvm producing wrong bytecode.)", "tree": {"sha": "bee06074fc13f9987282722381c8c241b38ba377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee06074fc13f9987282722381c8c241b38ba377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "html_url": "https://github.com/rust-lang/rust/commit/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aff4c67f607a38bc4d95e132fe40563e7422beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aff4c67f607a38bc4d95e132fe40563e7422beb", "html_url": "https://github.com/rust-lang/rust/commit/6aff4c67f607a38bc4d95e132fe40563e7422beb"}], "stats": {"total": 165, "additions": 162, "deletions": 3}, "files": [{"sha": "790dc886c0497d94f010622fa53d78213ee8cf1e", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "patch": "@@ -3259,6 +3259,7 @@ pub mod funcs {\n                                                LPSYSTEM_INFO};\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n+            #[cfg(target_arch = \"x86\")]\n             #[abi = \"stdcall\"]\n             extern \"stdcall\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n@@ -3363,6 +3364,111 @@ pub mod funcs {\n                                      -> LPVOID;\n                 pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n+\n+            #[cfg(target_arch = \"x86_64\")]\n+            extern {\n+                pub fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                               v: LPWSTR,\n+                                               nsize: DWORD)\n+                                               -> DWORD;\n+                pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n+                                               -> BOOL;\n+                pub fn GetEnvironmentStringsA() -> LPTCH;\n+                pub fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n+                pub fn GetModuleFileNameW(hModule: HMODULE,\n+                                          lpFilename: LPWSTR,\n+                                          nSize: DWORD)\n+                                          -> DWORD;\n+                pub fn CreateDirectoryW(lpPathName: LPCWSTR,\n+                                        lpSecurityAttributes:\n+                                        LPSECURITY_ATTRIBUTES)\n+                                        -> BOOL;\n+                pub fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                                        lpNewFileName: LPCWSTR,\n+                                        bFailIfExists: BOOL)\n+                                        -> BOOL;\n+                pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn GetLastError() -> DWORD;\n+                pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)\n+                                      -> HANDLE;\n+                pub fn FindNextFileW(findFile: HANDLE, findFileData: HANDLE)\n+                                     -> BOOL;\n+                pub fn FindClose(findFile: HANDLE) -> BOOL;\n+                pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n+                                       hSourceHandle: HANDLE,\n+                                       hTargetProcessHandle: HANDLE,\n+                                       lpTargetHandle: LPHANDLE,\n+                                       dwDesiredAccess: DWORD,\n+                                       bInheritHandle: BOOL,\n+                                       dwOptions: DWORD)\n+                                       -> BOOL;\n+                pub fn CloseHandle(hObject: HANDLE) -> BOOL;\n+                pub fn OpenProcess(dwDesiredAccess: DWORD,\n+                                   bInheritHandle: BOOL,\n+                                   dwProcessId: DWORD)\n+                                   -> HANDLE;\n+                pub fn GetCurrentProcess() -> HANDLE;\n+                pub fn CreateProcessA(lpApplicationName: LPCTSTR,\n+                                      lpCommandLine: LPTSTR,\n+                                      lpProcessAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      lpThreadAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      bInheritHandles: BOOL,\n+                                      dwCreationFlags: DWORD,\n+                                      lpEnvironment: LPVOID,\n+                                      lpCurrentDirectory: LPCTSTR,\n+                                      lpStartupInfo: LPSTARTUPINFO,\n+                                      lpProcessInformation:\n+                                      LPPROCESS_INFORMATION)\n+                                      -> BOOL;\n+                pub fn WaitForSingleObject(hHandle: HANDLE,\n+                                           dwMilliseconds: DWORD)\n+                                           -> DWORD;\n+                pub fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint)\n+                                        -> BOOL;\n+                pub fn GetExitCodeProcess(hProcess: HANDLE,\n+                                          lpExitCode: LPDWORD)\n+                                          -> BOOL;\n+                pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n+                pub fn VirtualAlloc(lpAddress: LPVOID,\n+                                    dwSize: SIZE_T,\n+                                    flAllocationType: DWORD,\n+                                    flProtect: DWORD)\n+                                    -> LPVOID;\n+                pub fn VirtualFree(lpAddress: LPVOID,\n+                                   dwSize: SIZE_T,\n+                                   dwFreeType: DWORD)\n+                                   -> BOOL;\n+                pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n+                pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                                     -> BOOL;\n+                pub fn VirtualProtect(lpAddress: LPVOID,\n+                                      dwSize: SIZE_T,\n+                                      flNewProtect: DWORD,\n+                                      lpflOldProtect: LPDWORD)\n+                                      -> BOOL;\n+                pub fn VirtualQuery(lpAddress: LPCVOID,\n+                                    lpBuffer: LPMEMORY_BASIC_INFORMATION,\n+                                    dwLength: SIZE_T)\n+                                    -> SIZE_T;\n+                pub fn CreateFileMappingW(hFile: HANDLE,\n+                                          lpAttributes: LPSECURITY_ATTRIBUTES,\n+                                          flProtect: DWORD,\n+                                          dwMaximumSizeHigh: DWORD,\n+                                          dwMaximumSizeLow: DWORD,\n+                                          lpName: LPCTSTR)\n+                                          -> HANDLE;\n+                pub fn MapViewOfFile(hFileMappingObject: HANDLE,\n+                                     dwDesiredAccess: DWORD,\n+                                     dwFileOffsetHigh: DWORD,\n+                                     dwFileOffsetLow: DWORD,\n+                                     dwNumberOfBytesToMap: SIZE_T)\n+                                     -> LPVOID;\n+                pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n+            }\n         }\n \n         pub mod msvcrt {"}, {"sha": "e7caf3f23abae8697754909d85ea9a49cb5f23cf", "filename": "src/libstd/os.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "patch": "@@ -1042,12 +1042,19 @@ pub fn errno() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n     use libc::types::os::arch::extra::DWORD;\n \n+    #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n     #[abi = \"stdcall\"]\n     extern \"stdcall\" {\n         fn GetLastError() -> DWORD;\n     }\n \n+    #[cfg(target_arch = \"x86_64\")]\n+    #[link_name = \"kernel32\"]\n+    extern {\n+        fn GetLastError() -> DWORD;\n+    }\n+\n     unsafe {\n         GetLastError() as uint\n     }\n@@ -1113,6 +1120,7 @@ pub fn last_os_error() -> ~str {\n         use libc::types::os::arch::extra::LPSTR;\n         use libc::types::os::arch::extra::LPVOID;\n \n+        #[cfg(target_arch = \"x86\")]\n         #[link_name = \"kernel32\"]\n         #[abi = \"stdcall\"]\n         extern \"stdcall\" {\n@@ -1126,6 +1134,19 @@ pub fn last_os_error() -> ~str {\n                               -> DWORD;\n         }\n \n+        #[cfg(target_arch = \"x86_64\")]\n+        #[link_name = \"kernel32\"]\n+        extern {\n+            fn FormatMessageA(flags: DWORD,\n+                              lpSrc: LPVOID,\n+                              msgId: DWORD,\n+                              langId: DWORD,\n+                              buf: LPSTR,\n+                              nsize: DWORD,\n+                              args: *c_void)\n+                              -> DWORD;\n+        }\n+\n         static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n         static FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n@@ -1241,21 +1262,34 @@ fn real_args() -> ~[~str] {\n \n type LPCWSTR = *u16;\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86\")]\n #[link_name=\"kernel32\"]\n #[abi=\"stdcall\"]\n extern \"stdcall\" {\n     fn GetCommandLineW() -> LPCWSTR;\n     fn LocalFree(ptr: *c_void);\n }\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+#[link_name=\"kernel32\"]\n+extern {\n+    fn GetCommandLineW() -> LPCWSTR;\n+    fn LocalFree(ptr: *c_void);\n+}\n+\n+#[cfg(windows, target_arch = \"x86\")]\n #[link_name=\"shell32\"]\n #[abi=\"stdcall\"]\n extern \"stdcall\" {\n     fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n }\n \n+#[cfg(windows, target_arch = \"x86_64\")]\n+#[link_name=\"shell32\"]\n+extern {\n+    fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n+}\n+\n struct OverriddenArgs {\n     val: ~[~str]\n }"}, {"sha": "b2c2c670b5558eec4482738cb44789622a9967b0", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "patch": "@@ -86,14 +86,21 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n     TlsGetValue(key)\n }\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86\")]\n #[abi = \"stdcall\"]\n extern \"stdcall\" {\n        fn TlsAlloc() -> DWORD;\n        fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n        fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;\n }\n \n+#[cfg(windows, target_arch = \"x86_64\")]\n+extern {\n+       fn TlsAlloc() -> DWORD;\n+       fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n+       fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;\n+}\n+\n #[test]\n fn tls_smoke_test() {\n     use cast::transmute;"}, {"sha": "90cf49cad1ccf2a9553507091bfa31c925ee146b", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=05b6a2f59c8efa0605db3f5d8f5ef554cb35ff74", "patch": "@@ -252,6 +252,7 @@ mod dl {\n         FreeLibrary(handle); ()\n     }\n \n+    #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n     extern \"stdcall\" {\n         fn SetLastError(error: u32);\n@@ -261,4 +262,15 @@ mod dl {\n         fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n         fn FreeLibrary(handle: *libc::c_void);\n     }\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    #[link_name = \"kernel32\"]\n+    extern {\n+        fn SetLastError(error: u32);\n+        fn LoadLibraryW(name: *u16) -> *libc::c_void;\n+        fn GetModuleHandleExW(dwFlags: libc::DWORD, name: *u16,\n+                              handle: **libc::c_void) -> *libc::c_void;\n+        fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n+        fn FreeLibrary(handle: *libc::c_void);\n+    }\n }"}]}