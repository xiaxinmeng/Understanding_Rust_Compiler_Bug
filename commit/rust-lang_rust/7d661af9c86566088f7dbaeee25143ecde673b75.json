{"sha": "7d661af9c86566088f7dbaeee25143ecde673b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjYxYWY5Yzg2NTY2MDg4ZjdkYmFlZWUyNTE0M2VjZGU2NzNiNzU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-26T20:46:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-29T12:47:37Z"}, "message": "`for x in range(a, b)` -> `for x in a..b`\n\nsed -i 's/in range(\\([^,]*\\), *\\([^()]*\\))/in \\1\\.\\.\\2/g' **/*.rs", "tree": {"sha": "54aa9b410d06064bdc893f034e1b86921698aea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54aa9b410d06064bdc893f034e1b86921698aea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d661af9c86566088f7dbaeee25143ecde673b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d661af9c86566088f7dbaeee25143ecde673b75", "html_url": "https://github.com/rust-lang/rust/commit/7d661af9c86566088f7dbaeee25143ecde673b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d661af9c86566088f7dbaeee25143ecde673b75/comments", "author": null, "committer": null, "parents": [{"sha": "c300d681bd2e901ef39591bbfb1ea4568ac6be70", "url": "https://api.github.com/repos/rust-lang/rust/commits/c300d681bd2e901ef39591bbfb1ea4568ac6be70", "html_url": "https://github.com/rust-lang/rust/commit/c300d681bd2e901ef39591bbfb1ea4568ac6be70"}], "stats": {"total": 980, "additions": 490, "deletions": 490}, "files": [{"sha": "90e761a4f1eb15685b8ab7c2fed3ade09f4a0644", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -37,7 +37,7 @@\n //!\n //! let five = Arc::new(5i);\n //!\n-//! for _ in range(0u, 10) {\n+//! for _ in 0u..10 {\n //!     let five = five.clone();\n //!\n //!     Thread::spawn(move || {\n@@ -54,7 +54,7 @@\n //!\n //! let five = Arc::new(Mutex::new(5i));\n //!\n-//! for _ in range(0u, 10) {\n+//! for _ in 0u..10 {\n //!     let five = five.clone();\n //!\n //!     Thread::spawn(move || {\n@@ -98,7 +98,7 @@ use heap::deallocate;\n ///     let numbers: Vec<_> = (0..100u32).map(|i| i as f32).collect();\n ///     let shared_numbers = Arc::new(numbers);\n ///\n-///     for _ in range(0u, 10) {\n+///     for _ in 0u..10 {\n ///         let child_numbers = shared_numbers.clone();\n ///\n ///         Thread::spawn(move || {"}, {"sha": "9744feb4ee7642e97c6c8651a6f1dc3eb2ed228d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -311,7 +311,7 @@ impl Arena {\n #[test]\n fn test_arena_destructors() {\n     let arena = Arena::new();\n-    for i in range(0u, 10) {\n+    for i in 0u..10 {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n         arena.alloc(|| Rc::new(i));\n@@ -340,7 +340,7 @@ fn test_arena_alloc_nested() {\n fn test_arena_destructors_fail() {\n     let arena = Arena::new();\n     // Put some stuff in the arena.\n-    for i in range(0u, 10) {\n+    for i in 0u..10 {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n         arena.alloc(|| { Rc::new(i) });\n@@ -410,7 +410,7 @@ impl<T> TypedArenaChunk<T> {\n         // Destroy all the allocated objects.\n         if intrinsics::needs_drop::<T>() {\n             let mut start = self.start();\n-            for _ in range(0, len) {\n+            for _ in 0..len {\n                 ptr::read(start as *const T); // run the destructor on the pointer\n                 start = start.offset(mem::size_of::<T>() as int)\n             }\n@@ -530,7 +530,7 @@ mod tests {\n     #[test]\n     pub fn test_copy() {\n         let arena = TypedArena::new();\n-        for _ in range(0u, 100000) {\n+        for _ in 0u..100000 {\n             arena.alloc(Point {\n                 x: 1,\n                 y: 2,\n@@ -585,7 +585,7 @@ mod tests {\n     #[test]\n     pub fn test_noncopy() {\n         let arena = TypedArena::new();\n-        for _ in range(0u, 100000) {\n+        for _ in 0u..100000 {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),\n                 array: vec!( 1, 2, 3, 4, 5 ),"}, {"sha": "d03fbf008470381cc57e16c0344e3c90608d79df", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -24,7 +24,7 @@ pub fn insert_rand_n<M, I, R>(n: uint,\n     // setup\n     let mut rng = rand::weak_rng();\n \n-    for _ in range(0, n) {\n+    for _ in 0..n {\n         insert(map, rng.gen::<uint>() % n);\n     }\n \n@@ -46,7 +46,7 @@ pub fn insert_seq_n<M, I, R>(n: uint,\n     R: FnMut(&mut M, uint),\n {\n     // setup\n-    for i in range(0u, n) {\n+    for i in 0u..n {\n         insert(map, i * 2);\n     }\n \n@@ -97,7 +97,7 @@ pub fn find_seq_n<M, T, I, F>(n: uint,\n     F: FnMut(&M, uint) -> T,\n {\n     // setup\n-    for i in range(0u, n) {\n+    for i in 0u..n {\n         insert(map, i);\n     }\n "}, {"sha": "56663f23a7e97bf6f4b2cdd35bb9ed3b96f1ef82", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -68,7 +68,7 @@\n //! // Simple primality tests below our max bound\n //! let print_primes = 20;\n //! print!(\"The primes below {} are: \", print_primes);\n-//! for x in range(0, print_primes) {\n+//! for x in 0..print_primes {\n //!     if primes.contains(&x) {\n //!         print!(\"{} \", x);\n //!     }\n@@ -104,7 +104,7 @@ type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u3\n \n fn reverse_bits(byte: u8) -> u8 {\n     let mut result = 0;\n-    for i in range(0, u8::BITS) {\n+    for i in 0..u8::BITS {\n         result |= ((byte >> i) & 1) << (u8::BITS - 1 - i);\n     }\n     result\n@@ -320,7 +320,7 @@ impl Bitv {\n \n         bitv.nbits = len;\n \n-        for i in range(0, complete_words) {\n+        for i in 0..complete_words {\n             bitv.storage.push(\n                 ((reverse_bits(bytes[i * 4 + 0]) as u32) << 0) |\n                 ((reverse_bits(bytes[i * 4 + 1]) as u32) << 8) |\n@@ -353,7 +353,7 @@ impl Bitv {\n     /// ```\n     pub fn from_fn<F>(len: uint, mut f: F) -> Bitv where F: FnMut(uint) -> bool {\n         let mut bitv = Bitv::from_elem(len, false);\n-        for i in range(0u, len) {\n+        for i in 0u..len {\n             bitv.set(i, f(i));\n         }\n         bitv\n@@ -830,7 +830,7 @@ impl Bitv {\n \n         // Fill in words after the old tail word\n         let stop_idx = cmp::min(self.storage.len(), new_nblocks);\n-        for idx in range(old_last_word + 1, stop_idx) {\n+        for idx in old_last_word + 1..stop_idx {\n             self.storage[idx] = full_value;\n         }\n \n@@ -2232,12 +2232,12 @@ mod tests {\n     #[test]\n     fn test_equal_sneaky_big() {\n         let mut a = Bitv::from_elem(100, false);\n-        for i in range(0u, 100) {\n+        for i in 0u..100 {\n             a.set(i, true);\n         }\n \n         let mut b = Bitv::from_elem(100, true);\n-        for i in range(0u, 100) {\n+        for i in 0u..100 {\n             b.set(i, true);\n         }\n \n@@ -2526,7 +2526,7 @@ mod bitv_bench {\n         let mut r = rng();\n         let mut bitv = 0 as uint;\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv |= 1 << ((r.next_u32() as uint) % u32::BITS);\n             }\n             black_box(&bitv);\n@@ -2538,7 +2538,7 @@ mod bitv_bench {\n         let mut r = rng();\n         let mut bitv = Bitv::from_elem(BENCH_BITS, false);\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n             }\n             black_box(&bitv);\n@@ -2550,7 +2550,7 @@ mod bitv_bench {\n         let mut r = rng();\n         let mut bitv = Bitv::from_elem(BENCH_BITS, false);\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, r.gen());\n             }\n             black_box(&bitv);\n@@ -2562,7 +2562,7 @@ mod bitv_bench {\n         let mut r = rng();\n         let mut bitv = Bitv::from_elem(u32::BITS, false);\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv.set((r.next_u32() as uint) % u32::BITS, true);\n             }\n             black_box(&bitv);\n@@ -2583,7 +2583,7 @@ mod bitv_bench {\n         let bitv = Bitv::from_elem(u32::BITS, false);\n         b.iter(|| {\n             let mut sum = 0u;\n-            for _ in range(0u, 10) {\n+            for _ in 0u..10 {\n                 for pres in bitv.iter() {\n                     sum += pres as uint;\n                 }\n@@ -3021,7 +3021,7 @@ mod bitv_set_bench {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv.insert((r.next_u32() as uint) % u32::BITS);\n             }\n             black_box(&bitv);\n@@ -3033,7 +3033,7 @@ mod bitv_set_bench {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n             }\n             black_box(&bitv);"}, {"sha": "b916ba8cbf6370c274dc18420bff24fbd441d039", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1601,39 +1601,39 @@ mod test {\n         let size = 10000u;\n         assert_eq!(map.len(), 0);\n \n-        for i in range(0, size) {\n+        for i in 0..size {\n             assert_eq!(map.insert(i, 10*i), None);\n             assert_eq!(map.len(), i + 1);\n         }\n \n-        for i in range(0, size) {\n+        for i in 0..size {\n             assert_eq!(map.get(&i).unwrap(), &(i*10));\n         }\n \n-        for i in range(size, size*2) {\n+        for i in size..size*2 {\n             assert_eq!(map.get(&i), None);\n         }\n \n-        for i in range(0, size) {\n+        for i in 0..size {\n             assert_eq!(map.insert(i, 100*i), Some(10*i));\n             assert_eq!(map.len(), size);\n         }\n \n-        for i in range(0, size) {\n+        for i in 0..size {\n             assert_eq!(map.get(&i).unwrap(), &(i*100));\n         }\n \n-        for i in range(0, size/2) {\n+        for i in 0..size/2 {\n             assert_eq!(map.remove(&(i*2)), Some(i*200));\n             assert_eq!(map.len(), size - i - 1);\n         }\n \n-        for i in range(0, size/2) {\n+        for i in 0..size/2 {\n             assert_eq!(map.get(&(2*i)), None);\n             assert_eq!(map.get(&(2*i+1)).unwrap(), &(i*200 + 100));\n         }\n \n-        for i in range(0, size/2) {\n+        for i in 0..size/2 {\n             assert_eq!(map.remove(&(2*i)), None);\n             assert_eq!(map.remove(&(2*i+1)), Some(i*200 + 100));\n             assert_eq!(map.len(), size/2 - i - 1);\n@@ -1664,7 +1664,7 @@ mod test {\n         let mut map: BTreeMap<uint, uint> = (0..size).map(|i| (i, i)).collect();\n \n         fn test<T>(size: uint, mut iter: T) where T: Iterator<Item=(uint, uint)> {\n-            for i in range(0, size) {\n+            for i in 0..size {\n                 assert_eq!(iter.size_hint(), (size - i, Some(size - i)));\n                 assert_eq!(iter.next().unwrap(), (i, i));\n             }\n@@ -1684,7 +1684,7 @@ mod test {\n         let mut map: BTreeMap<uint, uint> = (0..size).map(|i| (i, i)).collect();\n \n         fn test<T>(size: uint, mut iter: T) where T: Iterator<Item=(uint, uint)> {\n-            for i in range(0, size) {\n+            for i in 0..size {\n                 assert_eq!(iter.size_hint(), (size - i, Some(size - i)));\n                 assert_eq!(iter.next().unwrap(), (size - i - 1, size - i - 1));\n             }\n@@ -1705,12 +1705,12 @@ mod test {\n \n         fn test<T>(size: uint, mut iter: T)\n                 where T: Iterator<Item=(uint, uint)> + DoubleEndedIterator {\n-            for i in range(0, size / 4) {\n+            for i in 0..size / 4 {\n                 assert_eq!(iter.size_hint(), (size - i * 2, Some(size - i * 2)));\n                 assert_eq!(iter.next().unwrap(), (i, i));\n                 assert_eq!(iter.next_back().unwrap(), (size - i - 1, size - i - 1));\n             }\n-            for i in range(size / 4, size * 3 / 4) {\n+            for i in size / 4..size * 3 / 4 {\n                 assert_eq!(iter.size_hint(), (size * 3 / 4 - i, Some(size * 3 / 4 - i)));\n                 assert_eq!(iter.next().unwrap(), (i, i));\n             }\n@@ -1766,8 +1766,8 @@ mod test {\n         let size = 200u;\n         let map: BTreeMap<uint, uint> = (0..size).map(|i| (i, i)).collect();\n \n-        for i in range(0, size) {\n-            for j in range(i, size) {\n+        for i in 0..size {\n+            for j in i..size {\n                 let mut kvs = map.range(Included(&i), Included(&j)).map(|(&k, &v)| (k, v));\n                 let mut pairs = range_inclusive(i, j).map(|i| (i, i));\n \n@@ -1917,7 +1917,7 @@ mod bench {\n         let mut map = BTreeMap::<uint, uint>::new();\n         let mut rng = weak_rng();\n \n-        for _ in range(0, size) {\n+        for _ in 0..size {\n             map.insert(rng.gen(), rng.gen());\n         }\n "}, {"sha": "ea167348a644cf7f4ebdc644b526bbfab87b181a", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -501,7 +501,7 @@ impl<K: Clone, V: Clone> Clone for Node<K, V> {\n ///     let mut small_node = Node::make_leaf_root(3);\n ///     let mut large_node = Node::make_leaf_root(100);\n ///\n-///     for i in range(0, 100) {\n+///     for i in 0..100 {\n ///         // Insert to the end\n ///         large_node.edge_handle(i).insert_as_leaf(i, i);\n ///     }"}, {"sha": "60f3413ebdc5da9b820cd7d5ece3394e48975b15", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -592,7 +592,7 @@ impl<T> DList<T> {\n             // instead of skipping using .skip() (which creates a new struct),\n             // we skip manually so we can access the head field without\n             // depending on implementation details of Skip\n-            for _ in range(0, at - 1) {\n+            for _ in 0..at - 1 {\n                 iter.next();\n             }\n             iter.head\n@@ -1070,10 +1070,10 @@ mod tests {\n             let mut n = m.split_off(2);\n             assert_eq!(m.len(), 2);\n             assert_eq!(n.len(), 3);\n-            for elt in range(1i, 3) {\n+            for elt in 1i..3 {\n                 assert_eq!(m.pop_front(), Some(elt));\n             }\n-            for elt in range(3i, 6) {\n+            for elt in 3i..6 {\n                 assert_eq!(n.pop_front(), Some(elt));\n             }\n         }\n@@ -1084,10 +1084,10 @@ mod tests {\n             let mut n = m.split_off(4);\n             assert_eq!(m.len(), 4);\n             assert_eq!(n.len(), 1);\n-            for elt in range(1i, 5) {\n+            for elt in 1i..5 {\n                 assert_eq!(m.pop_front(), Some(elt));\n             }\n-            for elt in range(5i, 6) {\n+            for elt in 5i..6 {\n                 assert_eq!(n.pop_front(), Some(elt));\n             }\n         }\n@@ -1325,7 +1325,7 @@ mod tests {\n \n     #[test]\n     fn test_fuzz() {\n-        for _ in range(0u, 25) {\n+        for _ in 0u..25 {\n             fuzz_test(3);\n             fuzz_test(16);\n             fuzz_test(189);\n@@ -1347,7 +1347,7 @@ mod tests {\n     fn fuzz_test(sz: int) {\n         let mut m: DList<int> = DList::new();\n         let mut v = vec![];\n-        for i in range(0, sz) {\n+        for i in 0..sz {\n             check_links(&m);\n             let r: u8 = rand::random();\n             match r % 6 {"}, {"sha": "6d0911ad9ab0ba0518f95c0ace2e8149c00f0abe", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1719,29 +1719,29 @@ mod tests {\n     #[test]\n     fn test_push_front_grow() {\n         let mut deq = RingBuf::new();\n-        for i in range(0u, 66) {\n+        for i in 0u..66 {\n             deq.push_front(i);\n         }\n         assert_eq!(deq.len(), 66);\n \n-        for i in range(0u, 66) {\n+        for i in 0u..66 {\n             assert_eq!(deq[i], 65 - i);\n         }\n \n         let mut deq = RingBuf::new();\n-        for i in range(0u, 66) {\n+        for i in 0u..66 {\n             deq.push_back(i);\n         }\n \n-        for i in range(0u, 66) {\n+        for i in 0u..66 {\n             assert_eq!(deq[i], i);\n         }\n     }\n \n     #[test]\n     fn test_index() {\n         let mut deq = RingBuf::new();\n-        for i in range(1u, 4) {\n+        for i in 1u..4 {\n             deq.push_front(i);\n         }\n         assert_eq!(deq[1], 2);\n@@ -1751,7 +1751,7 @@ mod tests {\n     #[should_fail]\n     fn test_index_out_of_bounds() {\n         let mut deq = RingBuf::new();\n-        for i in range(1u, 4) {\n+        for i in 1u..4 {\n             deq.push_front(i);\n         }\n         deq[3];\n@@ -1769,7 +1769,7 @@ mod tests {\n     fn bench_push_back_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in range(0i, 100) {\n+            for i in 0i..100 {\n                 deq.push_back(i);\n             }\n             deq.head = 0;\n@@ -1781,7 +1781,7 @@ mod tests {\n     fn bench_push_front_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in range(0i, 100) {\n+            for i in 0i..100 {\n                 deq.push_front(i);\n             }\n             deq.head = 0;\n@@ -1819,7 +1819,7 @@ mod tests {\n     fn bench_grow_1025(b: &mut test::Bencher) {\n         b.iter(|| {\n             let mut deq = RingBuf::new();\n-            for i in range(0i, 1025) {\n+            for i in 0i..1025 {\n                 deq.push_front(i);\n             }\n             test::black_box(deq);\n@@ -1989,15 +1989,15 @@ mod tests {\n         assert_eq!(d.iter().next(), None);\n         assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n-        for i in range(0i, 5) {\n+        for i in 0i..5 {\n             d.push_back(i);\n         }\n         {\n             let b: &[_] = &[&0,&1,&2,&3,&4];\n             assert_eq!(d.iter().collect::<Vec<&int>>(), b);\n         }\n \n-        for i in range(6i, 9) {\n+        for i in 6i..9 {\n             d.push_front(i);\n         }\n         {\n@@ -2020,15 +2020,15 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert_eq!(d.iter().rev().next(), None);\n \n-        for i in range(0i, 5) {\n+        for i in 0i..5 {\n             d.push_back(i);\n         }\n         {\n             let b: &[_] = &[&4,&3,&2,&1,&0];\n             assert_eq!(d.iter().rev().collect::<Vec<&int>>(), b);\n         }\n \n-        for i in range(6i, 9) {\n+        for i in 6i..9 {\n             d.push_front(i);\n         }\n         let b: &[_] = &[&4,&3,&2,&1,&0,&6,&7,&8];\n@@ -2055,7 +2055,7 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert!(d.iter_mut().next().is_none());\n \n-        for i in range(0u, 3) {\n+        for i in 0u..3 {\n             d.push_front(i);\n         }\n \n@@ -2078,7 +2078,7 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert!(d.iter_mut().rev().next().is_none());\n \n-        for i in range(0u, 3) {\n+        for i in 0u..3 {\n             d.push_front(i);\n         }\n \n@@ -2112,7 +2112,7 @@ mod tests {\n         // simple iter\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n \n@@ -2123,10 +2123,10 @@ mod tests {\n         // wrapped iter\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in range(6, 9) {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2137,10 +2137,10 @@ mod tests {\n         // partially used\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in range(6, 9) {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2176,7 +2176,7 @@ mod tests {\n         // simple iter\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n \n@@ -2187,10 +2187,10 @@ mod tests {\n         // wrapped iter\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in range(6, 9) {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2201,10 +2201,10 @@ mod tests {\n         // partially used\n         {\n             let mut d = RingBuf::new();\n-            for i in range(0i, 5) {\n+            for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in range(6, 9) {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2389,41 +2389,41 @@ mod tests {\n         // test growth path A\n         // [T o o H] -> [T o o H . . . . ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n \n         // test growth path B\n         // [H T o o] -> [. T o o H . . . ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in range(0i, 1) {\n+        for i in 0i..1 {\n             ring.push_back(i);\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n \n         // test growth path C\n         // [o o H T] -> [o o H . . . . T ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             ring.push_back(i);\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n     }\n@@ -2463,7 +2463,7 @@ mod tests {\n     #[test]\n     fn test_get_mut() {\n         let mut ring = RingBuf::new();\n-        for i in range(0i, 3) {\n+        for i in 0i..3 {\n             ring.push_back(i);\n         }\n \n@@ -2492,27 +2492,27 @@ mod tests {\n             let usable_cap = tester.capacity();\n             let final_len = usable_cap / 2;\n \n-            for len in range(0, final_len) {\n+            for len in 0..final_len {\n                 let expected = if back {\n                     (0..len).collect()\n                 } else {\n                     (0..len).rev().collect()\n                 };\n-                for tail_pos in range(0, usable_cap) {\n+                for tail_pos in 0..usable_cap {\n                     tester.tail = tail_pos;\n                     tester.head = tail_pos;\n                     if back {\n-                        for i in range(0, len * 2) {\n+                        for i in 0..len * 2 {\n                             tester.push_front(i);\n                         }\n-                        for i in range(0, len) {\n+                        for i in 0..len {\n                             assert_eq!(tester.swap_back_remove(i), Some(len * 2 - 1 - i));\n                         }\n                     } else {\n-                        for i in range(0, len * 2) {\n+                        for i in 0..len * 2 {\n                             tester.push_back(i);\n                         }\n-                        for i in range(0, len) {\n+                        for i in 0..len {\n                             let idx = tester.len() - 1 - i;\n                             assert_eq!(tester.swap_front_remove(idx), Some(len * 2 - 1 - i));\n                         }\n@@ -2540,14 +2540,14 @@ mod tests {\n \n \n         // len is the length *after* insertion\n-        for len in range(1, cap) {\n+        for len in 1..cap {\n             // 0, 1, 2, .., len - 1\n             let expected = iter::count(0, 1).take(len).collect();\n-            for tail_pos in range(0, cap) {\n-                for to_insert in range(0, len) {\n+            for tail_pos in 0..cap {\n+                for to_insert in 0..len {\n                     tester.tail = tail_pos;\n                     tester.head = tail_pos;\n-                    for i in range(0, len) {\n+                    for i in 0..len {\n                         if i != to_insert {\n                             tester.push_back(i);\n                         }\n@@ -2573,14 +2573,14 @@ mod tests {\n         let cap = tester.capacity();\n \n         // len is the length *after* removal\n-        for len in range(0, cap - 1) {\n+        for len in 0..cap - 1 {\n             // 0, 1, 2, .., len - 1\n             let expected = iter::count(0, 1).take(len).collect();\n-            for tail_pos in range(0, cap) {\n-                for to_remove in range(0, len + 1) {\n+            for tail_pos in 0..cap {\n+                for to_remove in 0..len + 1 {\n                     tester.tail = tail_pos;\n                     tester.head = tail_pos;\n-                    for i in range(0, len) {\n+                    for i in 0..len {\n                         if i == to_remove {\n                             tester.push_back(1234);\n                         }\n@@ -2611,14 +2611,14 @@ mod tests {\n         tester.reserve(63);\n         let max_cap = tester.capacity();\n \n-        for len in range(0, cap + 1) {\n+        for len in 0..cap + 1 {\n             // 0, 1, 2, .., len - 1\n             let expected = iter::count(0, 1).take(len).collect();\n-            for tail_pos in range(0, max_cap + 1) {\n+            for tail_pos in 0..max_cap + 1 {\n                 tester.tail = tail_pos;\n                 tester.head = tail_pos;\n                 tester.reserve(63);\n-                for i in range(0, len) {\n+                for i in 0..len {\n                     tester.push_back(i);\n                 }\n                 tester.shrink_to_fit();\n@@ -2648,7 +2648,7 @@ mod tests {\n         let cap = ring.capacity() as int;\n         let first = cap/2;\n         let last  = cap - first;\n-        for i in range(0, first) {\n+        for i in 0..first {\n             ring.push_back(i);\n \n             let (left, right) = ring.as_slices();\n@@ -2657,7 +2657,7 @@ mod tests {\n             assert_eq!(right, []);\n         }\n \n-        for j in range(-last, 0) {\n+        for j in -last..0 {\n             ring.push_front(j);\n             let (left, right) = ring.as_slices();\n             let expected_left: Vec<_> = (-last..j+1).rev().collect();\n@@ -2676,7 +2676,7 @@ mod tests {\n         let cap = ring.capacity() as int;\n         let first = cap/2;\n         let last  = cap - first;\n-        for i in range(0, first) {\n+        for i in 0..first {\n             ring.push_back(i);\n \n             let (left, right) = ring.as_mut_slices();\n@@ -2685,7 +2685,7 @@ mod tests {\n             assert_eq!(right, []);\n         }\n \n-        for j in range(-last, 0) {\n+        for j in -last..0 {\n             ring.push_front(j);\n             let (left, right) = ring.as_mut_slices();\n             let expected_left: Vec<_> = (-last..j+1).rev().collect();"}, {"sha": "8f8f9588924326292531bc8d10ac7390df598ade", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1305,7 +1305,7 @@ fn insertion_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> O\n     let buf_v = v.as_mut_ptr();\n \n     // 1 <= i < len;\n-    for i in range(1, len) {\n+    for i in 1..len {\n         // j satisfies: 0 <= j <= i;\n         let mut j = i;\n         unsafe {\n@@ -2097,8 +2097,8 @@ mod tests {\n \n     #[test]\n     fn test_sort() {\n-        for len in range(4u, 25) {\n-            for _ in range(0i, 100) {\n+        for len in 4u..25 {\n+            for _ in 0i..100 {\n                 let mut v = thread_rng().gen_iter::<uint>().take(len)\n                                       .collect::<Vec<uint>>();\n                 let mut v1 = v.clone();\n@@ -2125,8 +2125,8 @@ mod tests {\n \n     #[test]\n     fn test_sort_stability() {\n-        for len in range(4i, 25) {\n-            for _ in range(0u, 10) {\n+        for len in 4i..25 {\n+            for _ in 0u..10 {\n                 let mut counts = [0i; 10];\n \n                 // create a vector like [(6, 1), (5, 1), (6, 2), ...],\n@@ -2717,7 +2717,7 @@ mod tests {\n     #[test]\n     fn test_shrink_to_fit() {\n         let mut xs = vec![0, 1, 2, 3];\n-        for i in range(4i, 100) {\n+        for i in 4i..100 {\n             xs.push(i)\n         }\n         assert_eq!(xs.capacity(), 128);\n@@ -2993,7 +2993,7 @@ mod bench {\n             unsafe {\n                 v.set_len(1024);\n             }\n-            for i in range(0u, 1024) {\n+            for i in 0u..1024 {\n                 v[i] = 0;\n             }\n         });\n@@ -3018,7 +3018,7 @@ mod bench {\n         let mut rng = weak_rng();\n         b.iter(|| {\n             let mut v = repeat((0u, 0u)).take(30).collect::<Vec<_>>();\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 let l = v.len();\n                 v.insert(rng.gen::<uint>() % (l + 1),\n                          (1, 1));\n@@ -3030,7 +3030,7 @@ mod bench {\n         let mut rng = weak_rng();\n         b.iter(|| {\n             let mut v = repeat((0u, 0u)).take(130).collect::<Vec<_>>();\n-            for _ in range(0u, 100) {\n+            for _ in 0u..100 {\n                 let l = v.len();\n                 v.remove(rng.gen::<uint>() % l);\n             }"}, {"sha": "e560f29f36af194b19c8fa939b0deb633035e8ed", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -142,9 +142,9 @@ Section: Iterators\n // Helper functions used for Unicode normalization\n fn canonical_sort(comb: &mut [(char, u8)]) {\n     let len = comb.len();\n-    for i in range(0, len) {\n+    for i in 0..len {\n         let mut swapped = false;\n-        for j in range(1, len-i) {\n+        for j in 1..len-i {\n             let class_a = comb[j-1].1;\n             let class_b = comb[j].1;\n             if class_a != 0 && class_b != 0 && class_a > class_b {"}, {"sha": "36688652a4792d78bb5520e0280cb6262eb4770b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1354,7 +1354,7 @@ mod tests {\n         b.bytes = REPETITIONS;\n         b.iter(|| {\n             let mut r = String::new();\n-            for _ in range(0, REPETITIONS) {\n+            for _ in 0..REPETITIONS {\n                 r.push_str(\"a\")\n             }\n         });\n@@ -1365,7 +1365,7 @@ mod tests {\n         b.bytes = REPETITIONS;\n         b.iter(|| {\n             let mut r = String::new();\n-            for _ in range(0, REPETITIONS) {\n+            for _ in 0..REPETITIONS {\n                 r.push('a')\n             }\n         });\n@@ -1376,7 +1376,7 @@ mod tests {\n         b.bytes = REPETITIONS * 2;\n         b.iter(|| {\n             let mut r = String::new();\n-            for _ in range(0, REPETITIONS) {\n+            for _ in 0..REPETITIONS {\n                 r.push('\u00e2')\n             }\n         });"}, {"sha": "8775a6d112088ad95b760cac53a77087806e0890", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -186,7 +186,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec.len(), 0);\n     ///\n     /// // These are all done without reallocating...\n-    /// for i in range(0i, 10) {\n+    /// for i in 0i..10 {\n     ///     vec.push(i);\n     /// }\n     ///\n@@ -233,7 +233,7 @@ impl<T> Vec<T> {\n     ///         mem::forget(v);\n     ///\n     ///         // Overwrite memory with 4, 5, 6\n-    ///         for i in range(0, len as int) {\n+    ///         for i in 0..len as int {\n     ///             ptr::write(p.offset(i), 4 + i);\n     ///         }\n     ///\n@@ -605,7 +605,7 @@ impl<T> Vec<T> {\n         {\n             let v = self.as_mut_slice();\n \n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 if !f(&v[i]) {\n                     del += 1;\n                 } else if del > 0 {\n@@ -1969,7 +1969,7 @@ mod tests {\n         v.reserve(2);\n         assert!(v.capacity() >= 2);\n \n-        for i in range(0i, 16) {\n+        for i in 0i..16 {\n             v.push(i);\n         }\n \n@@ -1989,12 +1989,12 @@ mod tests {\n         let mut w = Vec::new();\n \n         v.extend(range(0i, 3));\n-        for i in range(0i, 3) { w.push(i) }\n+        for i in 0i..3 { w.push(i) }\n \n         assert_eq!(v, w);\n \n         v.extend(range(3i, 10));\n-        for i in range(3i, 10) { w.push(i) }\n+        for i in 3i..10 { w.push(i) }\n \n         assert_eq!(v, w);\n     }\n@@ -2750,7 +2750,7 @@ mod tests {\n         b.iter(|| {\n             let mut dst = dst.clone();\n \n-            for _ in range(0, times) {\n+            for _ in 0..times {\n                 dst.clone_from(&src);\n \n                 assert_eq!(dst.len(), src_len);"}, {"sha": "e4101c104ee4306e23c6bb695ec19dd3d2a5ed00", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -596,13 +596,13 @@ impl<'a> Formatter<'a> {\n         let len = self.fill.encode_utf8(&mut fill).unwrap_or(0);\n         let fill = unsafe { str::from_utf8_unchecked(&fill[..len]) };\n \n-        for _ in range(0, pre_pad) {\n+        for _ in 0..pre_pad {\n             try!(self.buf.write_str(fill));\n         }\n \n         try!(f(self));\n \n-        for _ in range(0, post_pad) {\n+        for _ in 0..post_pad {\n             try!(self.buf.write_str(fill));\n         }\n "}, {"sha": "5ef5ac95e243daddfbc7c6319a5fd35b533a76e5", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1509,9 +1509,9 @@ impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n         if a_sz != b_sz {\n             // Adjust a, b to equal length\n             if a_sz > b_sz {\n-                for _ in range(0, a_sz - b_sz) { self.a.next_back(); }\n+                for _ in 0..a_sz - b_sz { self.a.next_back(); }\n             } else {\n-                for _ in range(0, b_sz - a_sz) { self.b.next_back(); }\n+                for _ in 0..b_sz - a_sz { self.b.next_back(); }\n             }\n         }\n         match (self.a.next_back(), self.b.next_back()) {\n@@ -2539,7 +2539,7 @@ pub struct Range<A> {\n /// ```\n /// let array = [0, 1, 2, 3, 4];\n ///\n-/// for i in range(0, 5) {\n+/// for i in 0..5 {\n ///     println!(\"{}\", i);\n ///     assert_eq!(i,  array[i]);\n /// }"}, {"sha": "b1e9084d210f5c77d5f6258c012ecae0e5b64ce1", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -482,7 +482,7 @@ impl<T> SliceExt for [T] {\n         let min = cmp::min(self.len(), src.len());\n         let dst = &mut self[.. min];\n         let src = &src[.. min];\n-        for i in range(0, min) {\n+        for i in 0..min {\n             dst[i].clone_from(&src[i]);\n         }\n         min"}, {"sha": "fe8a12436ff66299a69860f4f7e435d62536db49", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -903,7 +903,7 @@ fn bench_multiple_take(b: &mut Bencher) {\n     let mut it = (0u..42).cycle();\n     b.iter(|| {\n         let n = it.next().unwrap();\n-        for _ in range(0u, n) {\n+        for _ in 0u..n {\n             it.take(it.next().unwrap()).all(|_| true);\n         }\n     });"}, {"sha": "5c868ce6910e7cc828ff587d421c29113132c6bb", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -138,14 +138,14 @@ mod tests {\n     fn test_flate_round_trip() {\n         let mut r = rand::thread_rng();\n         let mut words = vec!();\n-        for _ in range(0u, 20) {\n+        for _ in 0u..20 {\n             let range = r.gen_range(1u, 10);\n             let v = r.gen_iter::<u8>().take(range).collect::<Vec<u8>>();\n             words.push(v);\n         }\n-        for _ in range(0u, 20) {\n+        for _ in 0u..20 {\n             let mut input = vec![];\n-            for _ in range(0u, 2000) {\n+            for _ in 0u..2000 {\n                 input.push_all(r.choose(words.as_slice()).unwrap().as_slice());\n             }\n             debug!(\"de/inflate of {} bytes of random word-sequences\","}, {"sha": "425b1c5b0144cb96ac168effa50a7947464d9dab", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -693,7 +693,7 @@ pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n         }\n         i += 1;\n     }\n-    for i in range(0u, n_opts) {\n+    for i in 0u..n_opts {\n         let n = vals[i].len();\n         let occ = opts[i].occur;\n         if occ == Req && n == 0 {\n@@ -761,7 +761,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         // here we just need to indent the start of the description\n         let rowlen = row.chars().count();\n         if rowlen < 24 {\n-            for _ in range(0, 24 - rowlen) {\n+            for _ in 0..24 - rowlen {\n                 row.push(' ');\n             }\n         } else {"}, {"sha": "6bd971e7b5d62f7640362d21af69eb664901368b", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -69,11 +69,11 @@ macro_rules! double_round{\n fn core(output: &mut [u32; STATE_WORDS], input: &[u32; STATE_WORDS]) {\n     *output = *input;\n \n-    for _ in range(0, CHACHA_ROUNDS / 2) {\n+    for _ in 0..CHACHA_ROUNDS / 2 {\n         double_round!(output);\n     }\n \n-    for i in range(0, STATE_WORDS) {\n+    for i in 0..STATE_WORDS {\n         output[i] += input[i];\n     }\n }\n@@ -128,7 +128,7 @@ impl ChaChaRng {\n         self.state[2] = 0x79622D32;\n         self.state[3] = 0x6B206574;\n \n-        for i in range(0, KEY_WORDS) {\n+        for i in 0..KEY_WORDS {\n             self.state[4+i] = key[i];\n         }\n \n@@ -268,9 +268,9 @@ mod test {\n         // Store the 17*i-th 32-bit word,\n         // i.e., the i-th word of the i-th 16-word block\n         let mut v : Vec<u32> = Vec::new();\n-        for _ in range(0u, 16) {\n+        for _ in 0u..16 {\n             v.push(ra.next_u32());\n-            for _ in range(0u, 16) {\n+            for _ in 0u..16 {\n                 ra.next_u32();\n             }\n         }\n@@ -287,7 +287,7 @@ mod test {\n         let seed : &[_] = &[0u32; 8];\n         let mut rng: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut clone = rng.clone();\n-        for _ in range(0u, 16) {\n+        for _ in 0u..16 {\n             assert_eq!(rng.next_u64(), clone.next_u64());\n         }\n     }"}, {"sha": "d7f80c00c90b579c58b8ceeab17e13a1027a3a31", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -103,7 +103,7 @@ mod test {\n     fn test_exp() {\n         let mut exp = Exp::new(10.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             assert!(exp.sample(&mut rng) >= 0.0);\n             assert!(exp.ind_sample(&mut rng) >= 0.0);\n         }\n@@ -137,7 +137,7 @@ mod bench {\n         let mut exp = Exp::new(2.71828 * 3.14159);\n \n         b.iter(|| {\n-            for _ in range(0, ::RAND_BENCH_N) {\n+            for _ in 0..::RAND_BENCH_N {\n                 exp.sample(&mut rng);\n             }\n         });"}, {"sha": "19586cbbd691b6ae75edb458f0f840131036f9e8", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -332,7 +332,7 @@ mod test {\n     fn test_chi_squared_one() {\n         let mut chi = ChiSquared::new(1.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             chi.sample(&mut rng);\n             chi.ind_sample(&mut rng);\n         }\n@@ -341,7 +341,7 @@ mod test {\n     fn test_chi_squared_small() {\n         let mut chi = ChiSquared::new(0.5);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             chi.sample(&mut rng);\n             chi.ind_sample(&mut rng);\n         }\n@@ -350,7 +350,7 @@ mod test {\n     fn test_chi_squared_large() {\n         let mut chi = ChiSquared::new(30.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             chi.sample(&mut rng);\n             chi.ind_sample(&mut rng);\n         }\n@@ -365,7 +365,7 @@ mod test {\n     fn test_f() {\n         let mut f = FisherF::new(2.0, 32.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             f.sample(&mut rng);\n             f.ind_sample(&mut rng);\n         }\n@@ -375,7 +375,7 @@ mod test {\n     fn test_t() {\n         let mut t = StudentT::new(11.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             t.sample(&mut rng);\n             t.ind_sample(&mut rng);\n         }\n@@ -398,7 +398,7 @@ mod bench {\n         let mut rng = ::test::weak_rng();\n \n         b.iter(|| {\n-            for _ in range(0, ::RAND_BENCH_N) {\n+            for _ in 0..::RAND_BENCH_N {\n                 gamma.ind_sample(&mut rng);\n             }\n         });\n@@ -411,7 +411,7 @@ mod bench {\n         let mut rng = ::test::weak_rng();\n \n         b.iter(|| {\n-            for _ in range(0, ::RAND_BENCH_N) {\n+            for _ in 0..::RAND_BENCH_N {\n                 gamma.ind_sample(&mut rng);\n             }\n         });"}, {"sha": "77157e2c8ba20bd81f82f5202c43aa2fe7a26fa8", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -97,7 +97,7 @@ pub struct Weighted<T> {\n ///                      Weighted { weight: 1, item: 'c' });\n /// let wc = WeightedChoice::new(items.as_mut_slice());\n /// let mut rng = rand::thread_rng();\n-/// for _ in range(0u, 16) {\n+/// for _ in 0u..16 {\n ///      // on average prints 'a' 4 times, 'b' 8 and 'c' twice.\n ///      println!(\"{}\", wc.ind_sample(&mut rng));\n /// }"}, {"sha": "8fda21e604db38c055948feaf2c0adcc0788eb92", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -169,7 +169,7 @@ mod tests {\n     fn test_normal() {\n         let mut norm = Normal::new(10.0, 10.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             norm.sample(&mut rng);\n             norm.ind_sample(&mut rng);\n         }\n@@ -185,7 +185,7 @@ mod tests {\n     fn test_log_normal() {\n         let mut lnorm = LogNormal::new(10.0, 10.0);\n         let mut rng = ::test::rng();\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             lnorm.sample(&mut rng);\n             lnorm.ind_sample(&mut rng);\n         }\n@@ -212,7 +212,7 @@ mod bench {\n         let mut normal = Normal::new(-2.71828, 3.14159);\n \n         b.iter(|| {\n-            for _ in range(0, ::RAND_BENCH_N) {\n+            for _ in 0..::RAND_BENCH_N {\n                 normal.sample(&mut rng);\n             }\n         });"}, {"sha": "e8dedeb8d606bfd594944c17022c04f765d3e1e2", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -41,7 +41,7 @@ use distributions::{Sample, IndependentSample};\n ///     let between = Range::new(10u, 10000u);\n ///     let mut rng = std::rand::thread_rng();\n ///     let mut sum = 0;\n-///     for _ in range(0u, 1000) {\n+///     for _ in 0u..1000 {\n ///         sum += between.ind_sample(&mut rng);\n ///     }\n ///     println!(\"{}\", sum);\n@@ -190,7 +190,7 @@ mod tests {\n                                             (Int::min_value(), Int::max_value())];\n                    for &(low, high) in v.iter() {\n                         let mut sampler: Range<$ty> = Range::new(low, high);\n-                        for _ in range(0u, 1000) {\n+                        for _ in 0u..1000 {\n                             let v = sampler.sample(&mut rng);\n                             assert!(low <= v && v < high);\n                             let v = sampler.ind_sample(&mut rng);\n@@ -216,7 +216,7 @@ mod tests {\n                                             (-1e35, 1e35)];\n                    for &(low, high) in v.iter() {\n                         let mut sampler: Range<$ty> = Range::new(low, high);\n-                        for _ in range(0u, 1000) {\n+                        for _ in 0u..1000 {\n                             let v = sampler.sample(&mut rng);\n                             assert!(low <= v && v < high);\n                             let v = sampler.ind_sample(&mut rng);"}, {"sha": "a22ef704fa5f6c7d5375af41599786672720d5b7", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -82,7 +82,7 @@ impl IsaacRng {\n             }}\n         }\n \n-        for _ in range(0u, 4) {\n+        for _ in 0u..4 {\n             mix!();\n         }\n \n@@ -323,7 +323,7 @@ impl Isaac64Rng {\n             }}\n         }\n \n-        for _ in range(0u, 4) {\n+        for _ in 0u..4 {\n             mix!();\n         }\n \n@@ -581,7 +581,7 @@ mod test {\n         let seed: &[_] = &[12345, 67890, 54321, 9876];\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n         // skip forward to the 10000th number\n-        for _ in range(0u, 10000) { rb.next_u32(); }\n+        for _ in 0u..10000 { rb.next_u32(); }\n \n         let v = (0..10).map(|_| rb.next_u32()).collect::<Vec<_>>();\n         assert_eq!(v,\n@@ -603,7 +603,7 @@ mod test {\n         let seed: &[_] = &[12345, 67890, 54321, 9876];\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n         // skip forward to the 10000th number\n-        for _ in range(0u, 10000) { rb.next_u64(); }\n+        for _ in 0u..10000 { rb.next_u64(); }\n \n         let v = (0..10).map(|_| rb.next_u64()).collect::<Vec<_>>();\n         assert_eq!(v,\n@@ -618,7 +618,7 @@ mod test {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut rng: Isaac64Rng = SeedableRng::from_seed(seed);\n         let mut clone = rng.clone();\n-        for _ in range(0u, 16) {\n+        for _ in 0u..16 {\n             assert_eq!(rng.next_u64(), clone.next_u64());\n         }\n     }"}, {"sha": "3d2368a4a912e371bd789a34e786154fcd682d44", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -241,7 +241,7 @@ mod tests {\n         // this is unlikely to catch an incorrect implementation that\n         // generates exactly 0 or 1, but it keeps it sane.\n         let mut rng = thread_rng();\n-        for _ in range(0u, 1_000) {\n+        for _ in 0u..1_000 {\n             // strict inequalities\n             let Open01(f) = rng.gen::<Open01<f64>>();\n             assert!(0.0 < f && f < 1.0);\n@@ -254,7 +254,7 @@ mod tests {\n     #[test]\n     fn rand_closed() {\n         let mut rng = thread_rng();\n-        for _ in range(0u, 1_000) {\n+        for _ in 0u..1_000 {\n             // strict inequalities\n             let Closed01(f) = rng.gen::<Closed01<f64>>();\n             assert!(0.0 <= f && f <= 1.0);"}, {"sha": "57e901398767678ac6e417c2e7d0cacb1e969cb9", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -187,7 +187,7 @@ mod test {\n         let mut rs = ReseedingRng::new(Counter {i:0}, 400, ReseedWithDefault);\n \n         let mut i = 0;\n-        for _ in range(0u, 1000) {\n+        for _ in 0u..1000 {\n             assert_eq!(rs.next_u32(), i % 100);\n             i += 1;\n         }"}, {"sha": "fff28a95c4e13eb8d7e7722baeb3dcdd2fd9ebdc", "filename": "src/librbml/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -189,7 +189,7 @@ mod tests {\n         b.bytes = (times * len) as u64;\n         b.iter(|| {\n             let mut wr = SeekableMemWriter::new();\n-            for _ in range(0, times) {\n+            for _ in 0..times {\n                 wr.write(src.as_slice()).unwrap();\n             }\n "}, {"sha": "f57d7956edfe5846614cb7d3b152456abd52730d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n         run_lints!(self, exit_lint_attrs, attrs);\n \n         // rollback\n-        for _ in range(0, pushed) {\n+        for _ in 0..pushed {\n             let (lint, lvlsrc) = self.level_stack.pop().unwrap();\n             self.lints.set_level(lint, lvlsrc);\n         }"}, {"sha": "8fcf06e0bad39d48965707f0a825b48800fea905", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1293,7 +1293,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             }\n             ty::AdjustDerefRef(ref adj) => {\n                 assert!(!ty::adjust_is_object(adjustment));\n-                for autoderef in range(0, adj.autoderefs) {\n+                for autoderef in 0..adj.autoderefs {\n                     let method_call = MethodCall::autoderef(id, autoderef);\n                     for &method in tcx.method_map.borrow().get(&method_call).iter() {\n                         rbml_w.tag(c::tag_table_method_map, |rbml_w| {\n@@ -1529,7 +1529,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n         fn type_string(doc: rbml::Doc) -> String {\n             let mut str = String::new();\n-            for i in range(doc.start, doc.end) {\n+            for i in doc.start..doc.end {\n                 str.push(doc.data[i] as char);\n             }\n             str"}, {"sha": "7b3530c129aa53c7f62c69eed61e881741b0be5c", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         for (word_index, &word) in words.iter().enumerate() {\n             if word != 0 {\n                 let base_index = word_index * uint::BITS;\n-                for offset in range(0u, uint::BITS) {\n+                for offset in 0u..uint::BITS {\n                     let bit = 1 << offset;\n                     if (word & bit) != 0 {\n                         // NB: we round up the total number of bits\n@@ -552,7 +552,7 @@ fn bits_to_string(words: &[uint]) -> String {\n \n     for &word in words.iter() {\n         let mut v = word;\n-        for _ in range(0u, uint::BYTES) {\n+        for _ in 0u..uint::BYTES {\n             result.push(sep);\n             result.push_str(&format!(\"{:02x}\", v & 0xFF)[]);\n             v >>= 8;"}, {"sha": "430381696c08b545621c013ca14414c68a8923e2", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -842,7 +842,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                        autoderefs: uint) {\n         debug!(\"walk_autoderefs expr={} autoderefs={}\", expr.repr(self.tcx()), autoderefs);\n \n-        for i in range(0, autoderefs) {\n+        for i in 0..autoderefs {\n             let deref_id = ty::MethodCall::autoderef(expr.id, i);\n             match self.typer.node_method_ty(deref_id) {\n                 None => {}"}, {"sha": "e286855c285487bc3a814820ddd3094f67eabee4", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -176,7 +176,7 @@ pub trait Combine<'tcx> : Sized {\n             assert_eq!(num_region_params, a_rs.len());\n             assert_eq!(num_region_params, b_rs.len());\n             let mut rs = vec!();\n-            for i in range(0, num_region_params) {\n+            for i in 0..num_region_params {\n                 let a_r = a_rs[i];\n                 let b_r = b_rs[i];\n                 let variance = variances[i];"}, {"sha": "a236eb807ecb1eadb5318f36c1fe7b8dc6ae501f", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1347,7 +1347,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         indexes.contains(&i)\n                     });\n                     if need_insert {\n-                        for i in range(0, expected) {\n+                        for i in 0..expected {\n                             if indexes.contains(&i) {\n                                 new_lts.push(lifetime);\n                             } else {\n@@ -1767,7 +1767,7 @@ impl LifeGiver {\n             let mut s = String::new();\n             let (n, r) = (counter/26 + 1, counter % 26);\n             let letter: char = from_u32((r+97) as u32).unwrap();\n-            for _ in range(0, n) {\n+            for _ in 0..n {\n                 s.push(letter);\n             }\n             s"}, {"sha": "ca3806229c0e9634fed4540f3ae9f4d31339a220", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1328,7 +1328,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         let mut graph = graph::Graph::with_capacity(num_vars as uint + 1,\n                                                     num_edges);\n \n-        for _ in range(0, num_vars) {\n+        for _ in 0..num_vars {\n             graph.add_node(());\n         }\n         let dummy_idx = graph.add_node(());"}, {"sha": "67609402649ade275f63521be5d386d0a06d08d1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -687,7 +687,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     {\n         let node_base_idx = self.idx(ln, Variable(0u));\n         let succ_base_idx = self.idx(succ_ln, Variable(0u));\n-        for var_idx in range(0u, self.ir.num_vars) {\n+        for var_idx in 0u..self.ir.num_vars {\n             op(self, node_base_idx + var_idx, succ_base_idx + var_idx);\n         }\n     }\n@@ -700,7 +700,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         F: FnMut(uint) -> LiveNode,\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n-        for var_idx in range(0u, self.ir.num_vars) {\n+        for var_idx in 0u..self.ir.num_vars {\n             let idx = node_base_idx + var_idx;\n             if test(idx).is_valid() {\n                 try!(write!(wr, \" {:?}\", Variable(var_idx)));\n@@ -860,7 +860,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // hack to skip the loop unless debug! is enabled:\n         debug!(\"^^ liveness computation results for body {} (entry={:?})\",\n                {\n-                   for ln_idx in range(0u, self.ir.num_live_nodes) {\n+                   for ln_idx in 0u..self.ir.num_live_nodes {\n                        debug!(\"{:?}\", self.ln_str(LiveNode(ln_idx)));\n                    }\n                    body.id"}, {"sha": "b7f07a874191d4ea5e09603e44a886cb496779ec", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -456,7 +456,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         debug!(\"cat_expr_autoderefd: autoderefs={}, cmt={}\",\n                autoderefs,\n                cmt.repr(self.tcx()));\n-        for deref in range(1u, autoderefs + 1) {\n+        for deref in 1u..autoderefs + 1 {\n             cmt = try!(self.cat_deref(expr, cmt, deref));\n         }\n         return Ok(cmt);"}, {"sha": "2ca4fd7a0d66408f37291946fbd94ba7c355161a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -4344,7 +4344,7 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n                     let mut adjusted_ty = unadjusted_ty;\n \n                     if !ty::type_is_error(adjusted_ty) {\n-                        for i in range(0, adj.autoderefs) {\n+                        for i in 0..adj.autoderefs {\n                             let method_call = MethodCall::autoderef(expr_id, i);\n                             match method_type(method_call) {\n                                 Some(method_ty) => {"}, {"sha": "ef08617181005dfebc3351dea55e2027cf6e36de", "filename": "src/librustc/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Flev_distance.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -45,7 +45,7 @@ pub fn lev_distance(me: &str, t: &str) -> uint {\n fn test_lev_distance() {\n     use std::char::{ from_u32, MAX };\n     // Test bytelength agnosticity\n-    for c in range(0u32, MAX as u32)\n+    for c in 0u32..MAX as u32\n              .filter_map(|i| from_u32(i))\n              .map(|i| i.to_string()) {\n         assert_eq!(lev_distance(&c[], &c[]), 0);"}, {"sha": "6e71da198e3599964edb0f7ccb5770b89cd76e2b", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -358,7 +358,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                            parent_ty.repr(tcx)),\n             };\n             let tuple_len = v.len();\n-            for i in range(0, tuple_len) {\n+            for i in 0..tuple_len {\n                 if i == tuple_idx { continue }\n                 let field_name = mc::PositionalField(i);\n                 add_fragment_sibling_local(field_name, None);"}, {"sha": "7b7a743e7e63518461916cb32a2a9f1e25721c11", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -601,7 +601,7 @@ fn link_rlib<'a>(sess: &'a Session,\n             // For LTO purposes, the bytecode of this library is also inserted\n             // into the archive.  If codegen_units > 1, we insert each of the\n             // bitcode files.\n-            for i in range(0, sess.opts.cg.codegen_units) {\n+            for i in 0..sess.opts.cg.codegen_units {\n                 // Note that we make sure that the bytecode filename in the\n                 // archive is never exactly 16 bytes long by adding a 16 byte\n                 // extension to it. This is to work around a bug in LLDB that"}, {"sha": "65d41d86bc0f3ac965557f7326bd89ca786b527b", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -901,7 +901,7 @@ fn run_work_multithreaded(sess: &Session,\n     let mut diag_emitter = SharedEmitter::new();\n     let mut futures = Vec::with_capacity(num_workers);\n \n-    for i in range(0, num_workers) {\n+    for i in 0..num_workers {\n         let work_items_arc = work_items_arc.clone();\n         let diag_emitter = diag_emitter.clone();\n         let remark = sess.opts.cg.remark.clone();"}, {"sha": "0403a2f2e3c679d9d4447c79db69b76c045a4046", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -195,7 +195,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n                     let mut ty = ety;\n                     // Save the last autoderef in case we can avoid it.\n                     if adj.autoderefs > 0 {\n-                        for _ in range(0, adj.autoderefs-1) {\n+                        for _ in 0..adj.autoderefs-1 {\n                             let (dv, dt) = const_deref(cx, llconst, ty, false);\n                             llconst = dv;\n                             ty = dt;"}, {"sha": "16a93489f3f14744034dd38acc73108fecbd741c", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             available_drop_glues: RefCell::new(FnvHashMap()),\n         };\n \n-        for i in range(0, local_count) {\n+        for i in 0..local_count {\n             // Append \".rs\" to crate name as LLVM module identifier.\n             //\n             // LLVM code generator emits a \".file filename\" directive"}, {"sha": "02df8826fa151a60fee2d377f814a6361dca1c67", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -2117,7 +2117,7 @@ fn deref_multiple<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                               -> DatumBlock<'blk, 'tcx, Expr> {\n     let mut bcx = bcx;\n     let mut datum = datum;\n-    for i in range(0, times) {\n+    for i in 0..times {\n         let method_call = MethodCall::autoderef(expr.id, i);\n         datum = unpack_datum!(bcx, deref_once(bcx, expr, datum, method_call));\n     }"}, {"sha": "15602505d90d4e4bf3e67553adfa2e40a67ef790", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -948,7 +948,7 @@ fn constrain_autoderefs<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n            derefd_ty.repr(rcx.tcx()));\n \n     let r_deref_expr = ty::ReScope(CodeExtent::from_node_id(deref_expr.id));\n-    for i in range(0u, derefs) {\n+    for i in 0u..derefs {\n         let method_call = MethodCall::autoderef(deref_expr.id, i);\n         debug!(\"constrain_autoderefs: method_call={:?} (of {:?} total)\", method_call, derefs);\n "}, {"sha": "a5a600c5748b32a6fe8d588c2fa280a30a9ac3ae", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -263,7 +263,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     }\n \n                     ty::AdjustDerefRef(adj) => {\n-                        for autoderef in range(0, adj.autoderefs) {\n+                        for autoderef in 0..adj.autoderefs {\n                             let method_call = MethodCall::autoderef(id, autoderef);\n                             self.visit_method_map_entry(reason, method_call);\n                         }"}, {"sha": "2d0b4947e97b2c93b2ae5759b640e6df01ed0748", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -2251,7 +2251,7 @@ impl<'a> fmt::Display for Source<'a> {\n             tmp /= 10;\n         }\n         try!(write!(fmt, \"<pre class=\\\"line-numbers\\\">\"));\n-        for i in range(1, lines + 1) {\n+        for i in 1..lines + 1 {\n             try!(write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols));\n         }\n         try!(write!(fmt, \"</pre>\"));"}, {"sha": "9143baf9ed949f9c6e35ca85ce7a98b60588eb19", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -154,7 +154,7 @@ impl TocBuilder {\n             // fill in any missing zeros, e.g. for\n             // # Foo (1)\n             // ### Bar (1.0.1)\n-            for _ in range(toc_level, level - 1) {\n+            for _ in toc_level..level - 1 {\n                 sec_number.push_str(\"0.\");\n             }\n             let number = toc.count_entries_with_level(level);"}, {"sha": "8b39d91ffaeb0f029af4ad0493e2089cf9634b8c", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -36,7 +36,7 @@ impl<T:Decodable> Decodable for DList<T> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<DList<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut list = DList::new();\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 list.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(list)\n@@ -59,7 +59,7 @@ impl<T:Decodable> Decodable for RingBuf<T> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<RingBuf<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut deque: RingBuf<T> = RingBuf::new();\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 deque.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(deque)\n@@ -91,7 +91,7 @@ impl<\n     fn decode<D: Decoder>(d: &mut D) -> Result<BTreeMap<K, V>, D::Error> {\n         d.read_map(|d, len| {\n             let mut map = BTreeMap::new();\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));\n                 let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));\n                 map.insert(key, val);\n@@ -122,7 +122,7 @@ impl<\n     fn decode<D: Decoder>(d: &mut D) -> Result<BTreeSet<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut set = BTreeSet::new();\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(set)\n@@ -148,7 +148,7 @@ impl<\n     fn decode<D: Decoder>(d: &mut D) -> Result<EnumSet<T>, D::Error> {\n         let bits = try!(d.read_uint());\n         let mut set = EnumSet::new();\n-        for bit in range(0, uint::BITS) {\n+        for bit in 0..uint::BITS {\n             if bits & (1 << bit) != 0 {\n                 set.insert(CLike::from_uint(1 << bit));\n             }\n@@ -186,7 +186,7 @@ impl<K, V, S> Decodable for HashMap<K, V, S>\n         d.read_map(|d, len| {\n             let state = Default::default();\n             let mut map = HashMap::with_capacity_and_hash_state(len, state);\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));\n                 let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));\n                 map.insert(key, val);\n@@ -222,7 +222,7 @@ impl<T, S> Decodable for HashSet<T, S>\n         d.read_seq(|d, len| {\n             let state = Default::default();\n             let mut set = HashSet::with_capacity_and_hash_state(len, state);\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(set)\n@@ -246,7 +246,7 @@ impl<V: Decodable> Decodable for VecMap<V> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<VecMap<V>, D::Error> {\n         d.read_map(|d, len| {\n             let mut map = VecMap::new();\n-            for i in range(0u, len) {\n+            for i in 0u..len {\n                 let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));\n                 let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));\n                 map.insert(key, val);"}, {"sha": "91c2561753b2e3e47a9389fe897c667b0eaf0ef5", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -185,14 +185,14 @@ mod tests {\n \n     #[test]\n     pub fn test_to_hex_all_bytes() {\n-        for i in range(0u, 256) {\n+        for i in 0u..256 {\n             assert_eq!([i as u8].to_hex(), format!(\"{:02x}\", i as uint));\n         }\n     }\n \n     #[test]\n     pub fn test_from_hex_all_bytes() {\n-        for i in range(0u, 256) {\n+        for i in 0u..256 {\n             let ii: &[u8] = &[i as u8];\n             assert_eq!(format!(\"{:02x}\", i as uint).from_hex()\n                                                    .unwrap(),"}, {"sha": "18949f1a267641aa17353dfcd1377684b2375917", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -3513,7 +3513,7 @@ mod tests {\n         }\n \n         // Test up to 4 spaces of indents (more?)\n-        for i in range(0, 4u) {\n+        for i in 0..4u {\n             let mut writer = Vec::new();\n             write!(&mut writer, \"{}\",\n                    super::as_pretty_json(&json).indent(i)).unwrap();\n@@ -3982,7 +3982,7 @@ mod tests {\n \n     fn big_json() -> string::String {\n         let mut src = \"[\\n\".to_string();\n-        for _ in range(0i, 500) {\n+        for _ in 0i..500 {\n             src.push_str(r#\"{ \"a\": true, \"b\": null, \"c\":3.1415, \"d\": \"Hello world\", \"e\": \\\n                             [1,2,3]},\"#);\n         }"}, {"sha": "f963d0ce813ee790eb360dfa38aed139b634a093", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -461,7 +461,7 @@ impl<T:Decodable> Decodable for Vec<T> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Vec<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut v = Vec::with_capacity(len);\n-            for i in range(0, len) {\n+            for i in 0..len {\n                 v.push(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(v)\n@@ -641,7 +641,7 @@ impl<D: Decoder> DecoderHelpers for D {\n     {\n         self.read_seq(|this, len| {\n             let mut v = Vec::with_capacity(len);\n-            for i in range(0, len) {\n+            for i in 0..len {\n                 v.push(try!(this.read_seq_elt(i, |this| f(this))));\n             }\n             Ok(v)"}, {"sha": "f5937e5f902fa47dd969adc51ef71a45e288a9fa", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -89,7 +89,7 @@ impl DefaultResizePolicy {\n fn test_resize_policy() {\n     use prelude::v1::*;\n     let rp = DefaultResizePolicy;\n-    for n in range(0u, 1000) {\n+    for n in 0u..1000 {\n         assert!(rp.min_capacity(rp.usable_capacity(n)) <= n);\n         assert!(rp.usable_capacity(rp.min_capacity(n)) <= n);\n     }\n@@ -1681,24 +1681,24 @@ mod test_map {\n             let mut m = HashMap::new();\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 200) {\n+                for i in 0u..200 {\n                     assert_eq!(v.borrow()[i], 0);\n                 }\n             });\n \n-            for i in range(0u, 100) {\n+            for i in 0u..100 {\n                 let d1 = Dropable::new(i);\n                 let d2 = Dropable::new(i+100);\n                 m.insert(d1, d2);\n             }\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 200) {\n+                for i in 0u..200 {\n                     assert_eq!(v.borrow()[i], 1);\n                 }\n             });\n \n-            for i in range(0u, 50) {\n+            for i in 0u..50 {\n                 let k = Dropable::new(i);\n                 let v = m.remove(&k);\n \n@@ -1711,20 +1711,20 @@ mod test_map {\n             }\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 50) {\n+                for i in 0u..50 {\n                     assert_eq!(v.borrow()[i], 0);\n                     assert_eq!(v.borrow()[i+100], 0);\n                 }\n \n-                for i in range(50u, 100) {\n+                for i in 50u..100 {\n                     assert_eq!(v.borrow()[i], 1);\n                     assert_eq!(v.borrow()[i+100], 1);\n                 }\n             });\n         }\n \n         DROP_VECTOR.with(|v| {\n-            for i in range(0u, 200) {\n+            for i in 0u..200 {\n                 assert_eq!(v.borrow()[i], 0);\n             }\n         });\n@@ -1740,19 +1740,19 @@ mod test_map {\n             let mut hm = HashMap::new();\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 200) {\n+                for i in 0u..200 {\n                     assert_eq!(v.borrow()[i], 0);\n                 }\n             });\n \n-            for i in range(0u, 100) {\n+            for i in 0u..100 {\n                 let d1 = Dropable::new(i);\n                 let d2 = Dropable::new(i+100);\n                 hm.insert(d1, d2);\n             }\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 200) {\n+                for i in 0u..200 {\n                     assert_eq!(v.borrow()[i], 1);\n                 }\n             });\n@@ -1767,7 +1767,7 @@ mod test_map {\n             let mut half = hm.into_iter().take(50);\n \n             DROP_VECTOR.with(|v| {\n-                for i in range(0u, 200) {\n+                for i in 0u..200 {\n                     assert_eq!(v.borrow()[i], 1);\n                 }\n             });\n@@ -1789,7 +1789,7 @@ mod test_map {\n         };\n \n         DROP_VECTOR.with(|v| {\n-            for i in range(0u, 200) {\n+            for i in 0u..200 {\n                 assert_eq!(v.borrow()[i], 0);\n             }\n         });\n@@ -1807,7 +1807,7 @@ mod test_map {\n \n         // Try this a few times to make sure we never screw up the hashmap's\n         // internal state.\n-        for _ in range(0i, 10) {\n+        for _ in 0i..10 {\n             assert!(m.is_empty());\n \n             for i in range_inclusive(1i, 1000) {\n@@ -1934,7 +1934,7 @@ mod test_map {\n     #[test]\n     fn test_iterate() {\n         let mut m = HashMap::with_capacity(4);\n-        for i in range(0u, 32) {\n+        for i in 0u..32 {\n             assert!(m.insert(i, i*2).is_none());\n         }\n         assert_eq!(m.len(), 32);\n@@ -2050,7 +2050,7 @@ mod test_map {\n         assert_eq!(cap, initial_cap * 2);\n \n         let mut i = 0u;\n-        for _ in range(0, cap * 3 / 4) {\n+        for _ in 0..cap * 3 / 4 {\n             m.insert(i, i);\n             i += 1;\n         }\n@@ -2059,7 +2059,7 @@ mod test_map {\n         assert_eq!(m.len(), i);\n         assert_eq!(m.table.capacity(), cap);\n \n-        for _ in range(0, cap / 4) {\n+        for _ in 0..cap / 4 {\n             m.insert(i, i);\n             i += 1;\n         }\n@@ -2068,7 +2068,7 @@ mod test_map {\n         let new_cap = m.table.capacity();\n         assert_eq!(new_cap, cap * 2);\n \n-        for _ in range(0, cap / 2 - 1) {\n+        for _ in 0..cap / 2 - 1 {\n             i -= 1;\n             m.remove(&i);\n             assert_eq!(m.table.capacity(), new_cap);\n@@ -2077,7 +2077,7 @@ mod test_map {\n         m.shrink_to_fit();\n         assert_eq!(m.table.capacity(), cap);\n         // again, a little more than half full\n-        for _ in range(0, cap / 2 - 1) {\n+        for _ in 0..cap / 2 - 1 {\n             i -= 1;\n             m.remove(&i);\n         }\n@@ -2094,18 +2094,18 @@ mod test_map {\n         m.insert(0u, 0u);\n         m.remove(&0);\n         assert!(m.capacity() >= m.len());\n-        for i in range(0, 128) {\n+        for i in 0..128 {\n             m.insert(i, i);\n         }\n         m.reserve(256);\n \n         let usable_cap = m.capacity();\n-        for i in range(128, 128+256) {\n+        for i in 128..128+256 {\n             m.insert(i, i);\n             assert_eq!(m.capacity(), usable_cap);\n         }\n \n-        for i in range(100, 128+256) {\n+        for i in 100..128+256 {\n             assert_eq!(m.remove(&i), Some(i));\n         }\n         m.shrink_to_fit();\n@@ -2114,7 +2114,7 @@ mod test_map {\n         assert!(!m.is_empty());\n         assert!(m.capacity() >= m.len());\n \n-        for i in range(0, 100) {\n+        for i in 0..100 {\n             assert_eq!(m.remove(&i), Some(i));\n         }\n         m.shrink_to_fit();\n@@ -2277,12 +2277,12 @@ mod test_map {\n         let mut rng = weak_rng();\n \n         // Populate the map with some items.\n-        for _ in range(0u, 50) {\n+        for _ in 0u..50 {\n             let x = rng.gen_range(-10, 10);\n             m.insert(x, ());\n         }\n \n-        for i in range(0u, 1000) {\n+        for i in 0u..1000 {\n             let x = rng.gen_range(-10, 10);\n             match m.entry(x) {\n                 Vacant(_) => {},"}, {"sha": "ad0cb3c1a7a15c1fe3e6538d95714ca0daf1a658", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1003,7 +1003,7 @@ mod test_set {\n     #[test]\n     fn test_iterate() {\n         let mut a = HashSet::new();\n-        for i in range(0u, 32) {\n+        for i in 0u..32 {\n             assert!(a.insert(i));\n         }\n         let mut observed: u32 = 0;\n@@ -1201,7 +1201,7 @@ mod test_set {\n         let mut s: HashSet<int> = (1..100).collect();\n \n         // try this a bunch of times to make sure we don't screw up internal state.\n-        for _ in range(0i, 20) {\n+        for _ in 0i..20 {\n             assert_eq!(s.len(), 99);\n \n             {"}, {"sha": "99c7e399b1c72817443c8e6a8578831e85356c5a", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1101,7 +1101,7 @@ mod test {\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(mkdir(dir, old_io::USER_RWX));\n         let prefix = \"foo\";\n-        for n in range(0i,3) {\n+        for n in 0i..3 {\n             let f = dir.join(format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n             let msg_str = format!(\"{}{}\", prefix, n.to_string());"}, {"sha": "ddb364a703a3a23186856f323666a41f17dfa580", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -663,7 +663,7 @@ mod test {\n         b.bytes = (times * len) as u64;\n         b.iter(|| {\n             let mut wr = MemWriter::new();\n-            for _ in range(0, times) {\n+            for _ in 0..times {\n                 wr.write(src.as_slice()).unwrap();\n             }\n \n@@ -719,7 +719,7 @@ mod test {\n             let buf = [5 as u8; 100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n-                for _i in range(0u, 10) {\n+                for _i in 0u..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf.as_slice(), [5; 10].as_slice());\n@@ -734,7 +734,7 @@ mod test {\n             let mut buf = [0 as u8; 100];\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n-                for _i in range(0u, 10) {\n+                for _i in 0u..10 {\n                     wr.write(&[5; 10]).unwrap();\n                 }\n             }\n@@ -748,7 +748,7 @@ mod test {\n             let buf = [5 as u8; 100];\n             {\n                 let mut rdr = BufReader::new(&buf);\n-                for _i in range(0u, 10) {\n+                for _i in 0u..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf, [5; 10]);"}, {"sha": "0da7670c5b49cf2a2eda037c8557a45824a27f0f", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -390,7 +390,7 @@ mod tests {\n         };\n \n         let _t = Thread::spawn(move|| {\n-            for _ in range(0u, times) {\n+            for _ in 0u..times {\n                 let mut stream = UnixStream::connect(&path2);\n                 match stream.write(&[100]) {\n                     Ok(..) => {}\n@@ -399,7 +399,7 @@ mod tests {\n             }\n         });\n \n-        for _ in range(0, times) {\n+        for _ in 0..times {\n             let mut client = acceptor.accept();\n             let mut buf = [0];\n             match client.read(&mut buf) {\n@@ -555,7 +555,7 @@ mod tests {\n             tx.send(UnixStream::connect(&addr2).unwrap()).unwrap();\n         });\n         let l = rx.recv().unwrap();\n-        for i in range(0u, 1001) {\n+        for i in 0u..1001 {\n             match a.accept() {\n                 Ok(..) => break,\n                 Err(ref e) if e.kind == TimedOut => {}\n@@ -683,7 +683,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in range(0u, 1001) {\n+        for i in 0u..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -727,7 +727,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         tx.send(()).unwrap();\n-        for _ in range(0u, 100) {\n+        for _ in 0u..100 {\n             assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n@@ -746,7 +746,7 @@ mod tests {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in range(0u, 1001) {\n+        for i in 0u..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "e0feaa4e558e49ee4f2c3c85310fb83d47028fac", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -748,7 +748,7 @@ mod test {\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = Thread::spawn(move|| {\n-            for _ in range(0, max) {\n+            for _ in 0..max {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write(&[99]).unwrap();\n             }\n@@ -768,7 +768,7 @@ mod test {\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = Thread::spawn(move|| {\n-            for _ in range(0, max) {\n+            for _ in 0..max {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write(&[99]).unwrap();\n             }\n@@ -1160,7 +1160,7 @@ mod test {\n                 tx.send(TcpStream::connect(addr).unwrap()).unwrap();\n             });\n             let _l = rx.recv().unwrap();\n-            for i in range(0i, 1001) {\n+            for i in 0i..1001 {\n                 match a.accept() {\n                     Ok(..) => break,\n                     Err(ref e) if e.kind == TimedOut => {}\n@@ -1260,7 +1260,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in range(0i, 1001) {\n+        for i in 0i..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1299,7 +1299,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         tx.send(()).unwrap();\n-        for _ in range(0i, 100) {\n+        for _ in 0i..100 {\n             assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n@@ -1318,7 +1318,7 @@ mod test {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in range(0i, 1001) {\n+        for i in 0i..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1388,7 +1388,7 @@ mod test {\n         });\n \n         // Try to ensure that the reading clone is indeed reading\n-        for _ in range(0i, 50) {\n+        for _ in 0i..50 {\n             ::thread::Thread::yield_now();\n         }\n "}, {"sha": "5f1089bc63b99fe6c57e1959d5a330aaa2991bfc", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -448,7 +448,7 @@ mod test {\n         let _b = UdpSocket::bind(addr2).unwrap();\n \n         a.set_write_timeout(Some(1000));\n-        for _ in range(0u, 100) {\n+        for _ in 0u..100 {\n             match a.send_to(&[0;4*1024], addr2) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "e6037d12c2802e3a48a682b98d671eb37aef94a2", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1142,7 +1142,7 @@ mod tests {\n     fn test_zero() {\n         let mut p = sleeper();\n         p.signal_kill().unwrap();\n-        for _ in range(0i, 20) {\n+        for _ in 0i..20 {\n             if p.signal(0).is_err() {\n                 assert!(!p.wait().unwrap().success());\n                 return"}, {"sha": "88d4e5aa0588e685fada8960dbfbb4fd60e1b208", "filename": "src/libstd/old_io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftempfile.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -102,7 +102,7 @@ impl TempDir {\n         }\n \n         let mut rng = thread_rng();\n-        for _ in range(0, NUM_RETRIES) {\n+        for _ in 0..NUM_RETRIES {\n             let suffix: String = rng.gen_ascii_chars().take(NUM_RAND_CHARS).collect();\n             let leaf = if prefix.len() > 0 {\n                 format!(\"{}.{}\", prefix, suffix)"}, {"sha": "35f0bcb21d94b4a5b5e8c0ec35baaf81903ba7a4", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -121,7 +121,7 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.oneshot(Duration::milliseconds(10));\n     ///\n-    /// for _ in range(0u, 100) { /* do work */ }\n+    /// for _ in 0u..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `oneshot` call\n     /// ten_milliseconds.recv().unwrap();\n@@ -173,12 +173,12 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.periodic(Duration::milliseconds(10));\n     ///\n-    /// for _ in range(0u, 100) { /* do work */ }\n+    /// for _ in 0u..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `periodic` call\n     /// ten_milliseconds.recv().unwrap();\n     ///\n-    /// for _ in range(0u, 100) { /* do work */ }\n+    /// for _ in 0u..100 { /* do work */ }\n     ///\n     /// // blocks until 20 ms after the `periodic` call (*not* 10ms after the\n     /// // previous `recv`)"}, {"sha": "fc5ac861b3060916ce52e889a7bd1a7729743112", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -643,7 +643,7 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n // In general it looks like:\n // res = Vec::new()\n // let args = [[NSProcessInfo processInfo] arguments]\n-// for i in range(0, [args count])\n+// for i in 0..[args count]\n //      res.push([args objectAtIndex:i])\n // res\n #[cfg(target_os = \"ios\")]\n@@ -679,7 +679,7 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n         let args = objc_msgSend(info, argumentsSel);\n \n         let cnt: int = mem::transmute(objc_msgSend(args, countSel));\n-        for i in range(0, cnt) {\n+        for i in 0..cnt {\n             let tmp = objc_msgSend(args, objectAtSel, i);\n             let utf_c_str: *const libc::c_char =\n                 mem::transmute(objc_msgSend(tmp, utf8Sel));"}, {"sha": "a27c217f86d7415c011ce912c3345452beea8ade", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -102,7 +102,7 @@\n //!    let total = 1_000_000;\n //!    let mut in_circle = 0;\n //!\n-//!    for _ in range(0, total) {\n+//!    for _ in 0u..total {\n //!        let a = between.ind_sample(&mut rng);\n //!        let b = between.ind_sample(&mut rng);\n //!        if a*a + b*b <= 1. {\n@@ -190,7 +190,7 @@\n //!     let (mut keep_wins, mut keep_losses) = (0, 0);\n //!\n //!     println!(\"Running {} simulations...\", num_simulations);\n-//!     for _ in range(0, num_simulations) {\n+//!     for _ in 0..num_simulations {\n //!         let result = simulate(&random_door, &mut rng);\n //!\n //!         match (result.win, result.switch) {\n@@ -480,14 +480,14 @@ mod test {\n     #[test]\n     fn test_gen_range() {\n         let mut r = thread_rng();\n-        for _ in range(0, 1000) {\n+        for _ in 0u..1000 {\n             let a = r.gen_range(-3i, 42);\n             assert!(a >= -3 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n             assert_eq!(r.gen_range(-12i, -11), -12);\n         }\n \n-        for _ in range(0, 1000) {\n+        for _ in 0u..1000 {\n             let a = r.gen_range(10i, 42);\n             assert!(a >= 10 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n@@ -652,7 +652,7 @@ mod bench {\n     fn rand_xorshift(b: &mut Bencher) {\n         let mut rng: XorShiftRng = OsRng::new().unwrap().gen();\n         b.iter(|| {\n-            for _ in range(0, RAND_BENCH_N) {\n+            for _ in 0..RAND_BENCH_N {\n                 rng.gen::<uint>();\n             }\n         });\n@@ -663,7 +663,7 @@ mod bench {\n     fn rand_isaac(b: &mut Bencher) {\n         let mut rng: IsaacRng = OsRng::new().unwrap().gen();\n         b.iter(|| {\n-            for _ in range(0, RAND_BENCH_N) {\n+            for _ in 0..RAND_BENCH_N {\n                 rng.gen::<uint>();\n             }\n         });\n@@ -674,7 +674,7 @@ mod bench {\n     fn rand_isaac64(b: &mut Bencher) {\n         let mut rng: Isaac64Rng = OsRng::new().unwrap().gen();\n         b.iter(|| {\n-            for _ in range(0, RAND_BENCH_N) {\n+            for _ in 0..RAND_BENCH_N {\n                 rng.gen::<uint>();\n             }\n         });\n@@ -685,7 +685,7 @@ mod bench {\n     fn rand_std(b: &mut Bencher) {\n         let mut rng = StdRng::new().unwrap();\n         b.iter(|| {\n-            for _ in range(0, RAND_BENCH_N) {\n+            for _ in 0..RAND_BENCH_N {\n                 rng.gen::<uint>();\n             }\n         });"}, {"sha": "992afb2d10fc487232c6235c0e59bd6359b69b89", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -378,7 +378,7 @@ mod test {\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();\n-        for _ in range(0, 20) {\n+        for _ in 0u..20 {\n             let (tx, rx) = channel();\n             txs.push(tx);\n \n@@ -392,7 +392,7 @@ mod test {\n                 Thread::yield_now();\n                 let mut v = [0u8; 1000];\n \n-                for _ in range(0, 100) {\n+                for _ in 0u..100 {\n                     r.next_u32();\n                     Thread::yield_now();\n                     r.next_u64();"}, {"sha": "581e540d3b6ed6686a0ce7aaf60d0fc8088de2ea", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -18,7 +18,7 @@ use sync::{Mutex, Condvar};\n /// use std::thread::Thread;\n ///\n /// let barrier = Arc::new(Barrier::new(10));\n-/// for _ in range(0u, 10) {\n+/// for _ in 0u..10 {\n ///     let c = barrier.clone();\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n@@ -121,7 +121,7 @@ mod tests {\n         let barrier = Arc::new(Barrier::new(N));\n         let (tx, rx) = channel();\n \n-        for _ in range(0u, N - 1) {\n+        for _ in 0u..N - 1 {\n             let c = barrier.clone();\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n@@ -139,7 +139,7 @@ mod tests {\n         let mut leader_found = barrier.wait().is_leader();\n \n         // Now, the barrier is cleared and we should get data.\n-        for _ in range(0u, N - 1) {\n+        for _ in 0u..N - 1 {\n             if rx.recv().unwrap() {\n                 assert!(!leader_found);\n                 leader_found = true;"}, {"sha": "2ae81ad7dffe2fe2f20a6f4046439c3fbf30c28a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -392,7 +392,7 @@ mod tests {\n \n         let data = Arc::new((Mutex::new(0), Condvar::new()));\n         let (tx, rx) = channel();\n-        for _ in range(0, N) {\n+        for _ in 0..N {\n             let data = data.clone();\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n@@ -417,7 +417,7 @@ mod tests {\n         cond.notify_all();\n         drop(cnt);\n \n-        for _ in range(0, N) {\n+        for _ in 0..N {\n             rx.recv().unwrap();\n         }\n     }"}, {"sha": "29ab7979e0451e31a69053b975d58b91759bed82", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -74,14 +74,14 @@\n //! // where tx is the sending half (tx for transmission), and rx is the receiving\n //! // half (rx for receiving).\n //! let (tx, rx) = channel();\n-//! for i in range(0i, 10i) {\n+//! for i in 0i..10i {\n //!     let tx = tx.clone();\n //!     Thread::spawn(move|| {\n //!         tx.send(i).unwrap();\n //!     });\n //! }\n //!\n-//! for _ in range(0i, 10i) {\n+//! for _ in 0i..10i {\n //!     let j = rx.recv().unwrap();\n //!     assert!(0 <= j && j < 10);\n //! }\n@@ -1147,9 +1147,9 @@ mod test {\n     fn stress() {\n         let (tx, rx) = channel::<int>();\n         let t = Thread::scoped(move|| {\n-            for _ in range(0u, 10000) { tx.send(1i).unwrap(); }\n+            for _ in 0u..10000 { tx.send(1i).unwrap(); }\n         });\n-        for _ in range(0u, 10000) {\n+        for _ in 0u..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n         t.join().ok().unwrap();\n@@ -1162,7 +1162,7 @@ mod test {\n         let (tx, rx) = channel::<int>();\n \n         let t = Thread::scoped(move|| {\n-            for _ in range(0, AMT * NTHREADS) {\n+            for _ in 0..AMT * NTHREADS {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n             match rx.try_recv() {\n@@ -1171,10 +1171,10 @@ mod test {\n             }\n         });\n \n-        for _ in range(0, NTHREADS) {\n+        for _ in 0..NTHREADS {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n-                for _ in range(0, AMT) { tx.send(1).unwrap(); }\n+                for _ in 0..AMT { tx.send(1).unwrap(); }\n             });\n         }\n         drop(tx);\n@@ -1187,13 +1187,13 @@ mod test {\n         let (tx2, rx2) = channel::<int>();\n         let t1 = Thread::scoped(move|| {\n             tx1.send(()).unwrap();\n-            for _ in range(0i, 40) {\n+            for _ in 0i..40 {\n                 assert_eq!(rx2.recv().unwrap(), 1);\n             }\n         });\n         rx1.recv().unwrap();\n         let t2 = Thread::scoped(move|| {\n-            for _ in range(0i, 40) {\n+            for _ in 0i..40 {\n                 tx2.send(1).unwrap();\n             }\n         });\n@@ -1205,11 +1205,11 @@ mod test {\n     fn recv_from_outside_runtime() {\n         let (tx, rx) = channel::<int>();\n         let t = Thread::scoped(move|| {\n-            for _ in range(0i, 40) {\n+            for _ in 0i..40 {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n         });\n-        for _ in range(0u, 40) {\n+        for _ in 0u..40 {\n             tx.send(1).unwrap();\n         }\n         t.join().ok().unwrap();\n@@ -1429,22 +1429,22 @@ mod test {\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = channel();\n-        for _ in range(0i, 10000) { tx.send(()).unwrap(); }\n-        for _ in range(0i, 10000) { rx.recv().unwrap(); }\n+        for _ in 0i..10000 { tx.send(()).unwrap(); }\n+        for _ in 0i..10000 { rx.recv().unwrap(); }\n     }\n \n     #[test]\n     fn shared_chan_stress() {\n         let (tx, rx) = channel();\n         let total = stress_factor() + 100;\n-        for _ in range(0, total) {\n+        for _ in 0..total {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 tx.send(()).unwrap();\n             });\n         }\n \n-        for _ in range(0, total) {\n+        for _ in 0..total {\n             rx.recv().unwrap();\n         }\n     }\n@@ -1530,7 +1530,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in range(0u, 5000) { Thread::yield_now(); }\n+        for _ in 0u..5000 { Thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -1654,9 +1654,9 @@ mod sync_tests {\n     fn stress() {\n         let (tx, rx) = sync_channel::<int>(0);\n         Thread::spawn(move|| {\n-            for _ in range(0u, 10000) { tx.send(1).unwrap(); }\n+            for _ in 0u..10000 { tx.send(1).unwrap(); }\n         });\n-        for _ in range(0u, 10000) {\n+        for _ in 0u..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n     }\n@@ -1669,7 +1669,7 @@ mod sync_tests {\n         let (dtx, drx) = sync_channel::<()>(0);\n \n         Thread::spawn(move|| {\n-            for _ in range(0, AMT * NTHREADS) {\n+            for _ in 0..AMT * NTHREADS {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n             match rx.try_recv() {\n@@ -1679,10 +1679,10 @@ mod sync_tests {\n             dtx.send(()).unwrap();\n         });\n \n-        for _ in range(0, NTHREADS) {\n+        for _ in 0..NTHREADS {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n-                for _ in range(0, AMT) { tx.send(1).unwrap(); }\n+                for _ in 0..AMT { tx.send(1).unwrap(); }\n             });\n         }\n         drop(tx);\n@@ -1893,22 +1893,22 @@ mod sync_tests {\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = sync_channel(10000);\n-        for _ in range(0u, 10000) { tx.send(()).unwrap(); }\n-        for _ in range(0u, 10000) { rx.recv().unwrap(); }\n+        for _ in 0u..10000 { tx.send(()).unwrap(); }\n+        for _ in 0u..10000 { rx.recv().unwrap(); }\n     }\n \n     #[test]\n     fn shared_chan_stress() {\n         let (tx, rx) = sync_channel(0);\n         let total = stress_factor() + 100;\n-        for _ in range(0, total) {\n+        for _ in 0..total {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 tx.send(()).unwrap();\n             });\n         }\n \n-        for _ in range(0, total) {\n+        for _ in 0..total {\n             rx.recv().unwrap();\n         }\n     }\n@@ -1994,7 +1994,7 @@ mod sync_tests {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in range(0u, 5000) { Thread::yield_now(); }\n+        for _ in 0u..5000 { Thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -2082,7 +2082,7 @@ mod sync_tests {\n             rx2.recv().unwrap();\n         }\n \n-        for _ in range(0u, 100) {\n+        for _ in 0u..100 {\n             repro()\n         }\n     }"}, {"sha": "53eba131674cf6b45d79ddd084fe9181138eba1b", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -181,11 +181,11 @@ mod tests {\n         let (tx, rx) = channel();\n         let q = Arc::new(q);\n \n-        for _ in range(0, nthreads) {\n+        for _ in 0..nthreads {\n             let tx = tx.clone();\n             let q = q.clone();\n             Thread::spawn(move|| {\n-                for i in range(0, nmsgs) {\n+                for i in 0..nmsgs {\n                     q.push(i);\n                 }\n                 tx.send(()).unwrap();\n@@ -200,7 +200,7 @@ mod tests {\n             }\n         }\n         drop(tx);\n-        for _ in range(0, nthreads) {\n+        for _ in 0..nthreads {\n             rx.recv().unwrap();\n         }\n     }"}, {"sha": "f70e2dee8ee42c1e51bb126297f2d03a9d7a7b81", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -421,10 +421,10 @@ mod test {\n         let (tx3, rx3) = channel::<int>();\n \n         let _t = Thread::spawn(move|| {\n-            for _ in range(0u, 20) { Thread::yield_now(); }\n+            for _ in 0u..20 { Thread::yield_now(); }\n             tx1.send(1).unwrap();\n             rx3.recv().unwrap();\n-            for _ in range(0u, 20) { Thread::yield_now(); }\n+            for _ in 0u..20 { Thread::yield_now(); }\n         });\n \n         select! {\n@@ -445,7 +445,7 @@ mod test {\n         let (tx3, rx3) = channel::<()>();\n \n         let _t = Thread::spawn(move|| {\n-            for _ in range(0u, 20) { Thread::yield_now(); }\n+            for _ in 0u..20 { Thread::yield_now(); }\n             tx1.send(1).unwrap();\n             tx2.send(2).unwrap();\n             rx3.recv().unwrap();\n@@ -472,7 +472,7 @@ mod test {\n         let (tx3, rx3) = channel::<()>();\n \n         let _t = Thread::spawn(move|| {\n-            for i in range(0, AMT) {\n+            for i in 0..AMT {\n                 if i % 2 == 0 {\n                     tx1.send(i).unwrap();\n                 } else {\n@@ -482,7 +482,7 @@ mod test {\n             }\n         });\n \n-        for i in range(0, AMT) {\n+        for i in 0..AMT {\n             select! {\n                 i1 = rx1.recv() => { assert!(i % 2 == 0 && i == i1.unwrap()); },\n                 i2 = rx2.recv() => { assert!(i % 2 == 1 && i == i2.unwrap()); }\n@@ -550,7 +550,7 @@ mod test {\n             tx3.send(()).unwrap();\n         });\n \n-        for _ in range(0u, 1000) { Thread::yield_now(); }\n+        for _ in 0u..1000 { Thread::yield_now(); }\n         drop(tx1.clone());\n         tx2.send(()).unwrap();\n         rx3.recv().unwrap();\n@@ -663,7 +663,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in range(0u, 100) { Thread::yield_now() }\n+        for _ in 0u..100 { Thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -683,7 +683,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in range(0u, 100) { Thread::yield_now() }\n+        for _ in 0u..100 { Thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -702,7 +702,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in range(0u, 100) { Thread::yield_now() }\n+        for _ in 0u..100 { Thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -720,7 +720,7 @@ mod test {\n     fn sync2() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let _t = Thread::spawn(move|| {\n-            for _ in range(0u, 100) { Thread::yield_now() }\n+            for _ in 0u..100 { Thread::yield_now() }\n             tx.send(1).unwrap();\n         });\n         select! {"}, {"sha": "45503f0b58e9150b2c25cba3aeace45a0edaafeb", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -325,7 +325,7 @@ mod test {\n             let (tx, rx) = channel();\n             let q2 = q.clone();\n             let _t = Thread::spawn(move|| {\n-                for _ in range(0u, 100000) {\n+                for _ in 0u..100000 {\n                     loop {\n                         match q2.pop() {\n                             Some(1i) => break,\n@@ -336,7 +336,7 @@ mod test {\n                 }\n                 tx.send(()).unwrap();\n             });\n-            for _ in range(0i, 100000) {\n+            for _ in 0i..100000 {\n                 q.push(1);\n             }\n             rx.recv().unwrap();"}, {"sha": "c31010c170db9347379a5315032966fe16642fb3", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -60,7 +60,7 @@ use sys_common::mutex as sys;\n /// let data = Arc::new(Mutex::new(0));\n ///\n /// let (tx, rx) = channel();\n-/// for _ in range(0u, 10) {\n+/// for _ in 0u..10 {\n ///     let (data, tx) = (data.clone(), tx.clone());\n ///     Thread::spawn(move || {\n ///         // The shared static can only be accessed once the lock is held.\n@@ -371,7 +371,7 @@ mod test {\n         static K: uint = 3;\n \n         fn inc() {\n-            for _ in range(0, J) {\n+            for _ in 0..J {\n                 unsafe {\n                     let _g = M.lock().unwrap();\n                     CNT += 1;\n@@ -380,15 +380,15 @@ mod test {\n         }\n \n         let (tx, rx) = channel();\n-        for _ in range(0, K) {\n+        for _ in 0..K {\n             let tx2 = tx.clone();\n             Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); });\n             let tx2 = tx.clone();\n             Thread::spawn(move|| { inc(); tx2.send(()).unwrap(); });\n         }\n \n         drop(tx);\n-        for _ in range(0, 2 * K) {\n+        for _ in 0..2 * K {\n             rx.recv().unwrap();\n         }\n         assert_eq!(unsafe {CNT}, J * K * 2);"}, {"sha": "0604003cecda56856e393d60c60d509660111f56", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -147,10 +147,10 @@ mod test {\n         static mut run: bool = false;\n \n         let (tx, rx) = channel();\n-        for _ in range(0u, 10) {\n+        for _ in 0u..10 {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n-                for _ in range(0u, 4) { Thread::yield_now() }\n+                for _ in 0u..4 { Thread::yield_now() }\n                 unsafe {\n                     O.call_once(|| {\n                         assert!(!run);\n@@ -170,7 +170,7 @@ mod test {\n             assert!(run);\n         }\n \n-        for _ in range(0u, 10) {\n+        for _ in 0u..10 {\n             rx.recv().unwrap();\n         }\n     }"}, {"sha": "b5817ad64f612d01887df4a79bc70c6d58118c78", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -416,11 +416,11 @@ mod tests {\n         static M: uint = 1000;\n \n         let (tx, rx) = channel::<()>();\n-        for _ in range(0, N) {\n+        for _ in 0..N {\n             let tx = tx.clone();\n             Thread::spawn(move|| {\n                 let mut rng = rand::thread_rng();\n-                for _ in range(0, M) {\n+                for _ in 0..M {\n                     if rng.gen_weighted_bool(N) {\n                         drop(R.write().unwrap());\n                     } else {\n@@ -488,7 +488,7 @@ mod tests {\n \n         Thread::spawn(move|| {\n             let mut lock = arc2.write().unwrap();\n-            for _ in range(0u, 10) {\n+            for _ in 0u..10 {\n                 let tmp = *lock;\n                 *lock = -1;\n                 Thread::yield_now();\n@@ -499,7 +499,7 @@ mod tests {\n \n         // Readers try to catch the writer in the act\n         let mut children = Vec::new();\n-        for _ in range(0u, 5) {\n+        for _ in 0u..5 {\n             let arc3 = arc.clone();\n             children.push(Thread::scoped(move|| {\n                 let lock = arc3.read().unwrap();"}, {"sha": "1bfcbcf96f1443cbbd78a721ac6dece674c4c96b", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -66,7 +66,7 @@ impl<'a> Drop for Sentinel<'a> {\n /// let pool = TaskPool::new(4u);\n ///\n /// let (tx, rx) = channel();\n-/// for _ in range(0, 8u) {\n+/// for _ in 0..8u {\n ///     let tx = tx.clone();\n ///     pool.execute(move|| {\n ///         tx.send(1u).unwrap();\n@@ -96,7 +96,7 @@ impl TaskPool {\n         let rx = Arc::new(Mutex::new(rx));\n \n         // Threadpool threads\n-        for _ in range(0, threads) {\n+        for _ in 0..threads {\n             spawn_in_pool(rx.clone());\n         }\n \n@@ -151,7 +151,7 @@ mod test {\n         let pool = TaskPool::new(TEST_TASKS);\n \n         let (tx, rx) = channel();\n-        for _ in range(0, TEST_TASKS) {\n+        for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n                 tx.send(1u).unwrap();\n@@ -174,13 +174,13 @@ mod test {\n         let pool = TaskPool::new(TEST_TASKS);\n \n         // Panic all the existing threads.\n-        for _ in range(0, TEST_TASKS) {\n+        for _ in 0..TEST_TASKS {\n             pool.execute(move|| -> () { panic!() });\n         }\n \n         // Ensure new threads were spawned to compensate.\n         let (tx, rx) = channel();\n-        for _ in range(0, TEST_TASKS) {\n+        for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n                 tx.send(1u).unwrap();\n@@ -198,7 +198,7 @@ mod test {\n         let waiter = Arc::new(Barrier::new(TEST_TASKS + 1));\n \n         // Panic all the existing threads in a bit.\n-        for _ in range(0, TEST_TASKS) {\n+        for _ in 0..TEST_TASKS {\n             let waiter = waiter.clone();\n             pool.execute(move|| {\n                 waiter.wait();"}, {"sha": "655195a3c28c0cbe8238678209f09b80a429237a", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -235,7 +235,7 @@ unsafe extern \"system\" fn on_tls_callback(h: LPVOID,\n \n unsafe fn run_dtors() {\n     let mut any_run = true;\n-    for _ in range(0, 5i) {\n+    for _ in 0..5i {\n         if !any_run { break }\n         any_run = false;\n         let dtors = {"}, {"sha": "f93a8b4b317ddafe4a50d83b2ed1aa8b9842086c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -431,7 +431,7 @@ impl CodeMap {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         let mut lines = Vec::new();\n-        for i in range(lo.line - 1us, hi.line as usize) {\n+        for i in lo.line - 1us..hi.line as usize {\n             lines.push(i);\n         };\n         FileLines {file: lo.file, lines: lines}"}, {"sha": "4ffa055188178f143341f260efcfa51709c5405d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -490,11 +490,11 @@ fn highlight_lines(err: &mut EmitterWriter,\n         // Skip is the number of characters we need to skip because they are\n         // part of the 'filename:line ' part of the previous line.\n         let skip = fm.name.len() + digits + 3us;\n-        for _ in range(0, skip) {\n+        for _ in 0..skip {\n             s.push(' ');\n         }\n         if let Some(orig) = fm.get_line(lines.lines[0]) {\n-            for pos in range(0us, left - skip) {\n+            for pos in 0us..left - skip {\n                 let cur_char = orig.as_bytes()[pos] as char;\n                 // Whenever a tab occurs on the previous line, we insert one on\n                 // the error-point-squiggly-line as well (instead of a space).\n@@ -513,7 +513,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squigglies = hi.col.to_usize() - lo.col.to_usize() - 1us;\n-            for _ in range(0, num_squigglies) {\n+            for _ in 0..num_squigglies {\n                 s.push('~');\n             }\n         }\n@@ -563,7 +563,7 @@ fn custom_highlight_lines(w: &mut EmitterWriter,\n     // Span seems to use half-opened interval, so subtract 1\n     let skip = last_line_start.len() + hi.col.to_usize() - 1;\n     let mut s = String::new();\n-    for _ in range(0, skip) {\n+    for _ in 0..skip {\n         s.push(' ');\n     }\n     s.push('^');"}, {"sha": "a718cc597c4378c47e6a61558b0e6d2ae1aff339", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -339,7 +339,7 @@ pub fn parse(sess: &ParseSess,\n                         // most of the time.\n \n                         // Only touch the binders we have actually bound\n-                        for idx in range(ei.match_lo, ei.match_hi) {\n+                        for idx in ei.match_lo..ei.match_hi {\n                             let sub = (ei.matches[idx]).clone();\n                             (&mut new_pos.matches[idx])\n                                    .push(Rc::new(MatchedSeq(sub, mk_sp(ei.sp_lo,\n@@ -385,7 +385,7 @@ pub fn parse(sess: &ParseSess,\n                             new_ei.match_cur += seq.num_captures;\n                             new_ei.idx += 1us;\n                             //we specifically matched zero repeats.\n-                            for idx in range(ei.match_cur, ei.match_cur + seq.num_captures) {\n+                            for idx in ei.match_cur..ei.match_cur + seq.num_captures {\n                                 (&mut new_ei.matches[idx]).push(Rc::new(MatchedSeq(vec![], sp)));\n                             }\n \n@@ -495,7 +495,7 @@ pub fn parse(sess: &ParseSess,\n                 }\n                 cur_eis.push(ei);\n \n-                for _ in range(0, rust_parser.tokens_consumed) {\n+                for _ in 0..rust_parser.tokens_consumed {\n                     let _ = rdr.next_token();\n                 }\n             }"}, {"sha": "417e440844acaddf9b1ea141cc4376df60e9a60e", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -732,7 +732,7 @@ impl<'a> StringReader<'a> {\n         let start_bpos = self.last_pos;\n         let mut accum_int = 0;\n \n-        for _ in range(0, n_digits) {\n+        for _ in 0..n_digits {\n             if self.is_eof() {\n                 let last_bpos = self.last_pos;\n                 self.fatal_span_(start_bpos, last_bpos, \"unterminated numeric character escape\");\n@@ -1217,15 +1217,15 @@ impl<'a> StringReader<'a> {\n                 }\n                 //if self.curr_is('\"') {\n                     //content_end_bpos = self.last_pos;\n-                    //for _ in range(0, hash_count) {\n+                    //for _ in 0..hash_count {\n                         //self.bump();\n                         //if !self.curr_is('#') {\n                             //continue 'outer;\n                 let c = self.curr.unwrap();\n                 match c {\n                     '\"' => {\n                         content_end_bpos = self.last_pos;\n-                        for _ in range(0, hash_count) {\n+                        for _ in 0..hash_count {\n                             self.bump();\n                             if !self.curr_is('#') {\n                                 continue 'outer;\n@@ -1402,7 +1402,7 @@ impl<'a> StringReader<'a> {\n                 },\n                 Some('\"') => {\n                     content_end_bpos = self.last_pos;\n-                    for _ in range(0, hash_count) {\n+                    for _ in 0..hash_count {\n                         self.bump();\n                         if !self.curr_is('#') {\n                             continue 'outer;"}, {"sha": "7834fae6276a293b3fa53ec1e3470f4f9de42a9c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -472,7 +472,7 @@ pub fn str_lit(lit: &str) -> String {\n                         } else {\n                             // otherwise, a normal escape\n                             let (c, n) = char_lit(&lit[i..]);\n-                            for _ in range(0, n - 1) { // we don't need to move past the first \\\n+                            for _ in 0..n - 1 { // we don't need to move past the first \\\n                                 chars.next();\n                             }\n                             res.push(c);\n@@ -635,7 +635,7 @@ pub fn binary_lit(lit: &str) -> Rc<Vec<u8>> {\n                         // otherwise, a normal escape\n                         let (c, n) = byte_lit(&lit[i..]);\n                         // we don't need to move past the first \\\n-                        for _ in range(0, n - 1) {\n+                        for _ in 0..n - 1 {\n                             chars.next();\n                         }\n                         res.push(c);"}, {"sha": "fe46830c50d1e87b617b90bdb72b9a8ed8cd781d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -2457,7 +2457,7 @@ impl<'a> State<'a> {\n         try!(word(&mut self.s, \"<\"));\n \n         let mut ints = Vec::new();\n-        for i in range(0us, total) {\n+        for i in 0us..total {\n             ints.push(i);\n         }\n "}, {"sha": "a5571076aabe2ee11424d9adec8930637297a183", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -226,7 +226,7 @@ pub fn parse(file: &mut old_io::Reader, longnames: bool)\n \n     let mut bools_map = HashMap::new();\n     if bools_bytes != 0 {\n-        for i in range(0, bools_bytes) {\n+        for i in 0..bools_bytes {\n             let b = try!(file.read_byte());\n             if b == 1 {\n                 bools_map.insert(bnames[i as uint].to_string(), true);\n@@ -240,7 +240,7 @@ pub fn parse(file: &mut old_io::Reader, longnames: bool)\n \n     let mut numbers_map = HashMap::new();\n     if numbers_count != 0 {\n-        for i in range(0, numbers_count) {\n+        for i in 0..numbers_count {\n             let n = try!(file.read_le_u16());\n             if n != 0xFFFF {\n                 numbers_map.insert(nnames[i as uint].to_string(), n);\n@@ -252,7 +252,7 @@ pub fn parse(file: &mut old_io::Reader, longnames: bool)\n \n     if string_offsets_count != 0 {\n         let mut string_offsets = Vec::with_capacity(10);\n-        for _ in range(0, string_offsets_count) {\n+        for _ in 0..string_offsets_count {\n             string_offsets.push(try!(file.read_le_u16()));\n         }\n "}, {"sha": "14bedec04844ce864a8182967aaf8103e62ba959", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -1008,7 +1008,7 @@ impl Bencher {\n     pub fn iter<T, F>(&mut self, mut inner: F) where F: FnMut() -> T {\n         self.dur = Duration::span(|| {\n             let k = self.iterations;\n-            for _ in range(0u64, k) {\n+            for _ in 0u64..k {\n                 black_box(inner());\n             }\n         });"}, {"sha": "8330c159769fd06dd5a2610ddebef910c46bdd55", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -40,19 +40,19 @@ fn ascending<M: MutableMap>(map: &mut M, n_keys: uint) {\n     println!(\" Ascending integers:\");\n \n     timed(\"insert\", || {\n-        for i in range(0u, n_keys) {\n+        for i in 0u..n_keys {\n             map.insert(i, i + 1);\n         }\n     });\n \n     timed(\"search\", || {\n-        for i in range(0u, n_keys) {\n+        for i in 0u..n_keys {\n             assert_eq!(map.find(&i).unwrap(), &(i + 1));\n         }\n     });\n \n     timed(\"remove\", || {\n-        for i in range(0, n_keys) {\n+        for i in 0..n_keys {\n             assert!(map.remove(&i));\n         }\n     });\n@@ -74,27 +74,27 @@ fn descending<M: MutableMap>(map: &mut M, n_keys: uint) {\n     });\n \n     timed(\"remove\", || {\n-        for i in range(0, n_keys) {\n+        for i in 0..n_keys {\n             assert!(map.remove(&i));\n         }\n     });\n }\n \n fn vector<M: MutableMap>(map: &mut M, n_keys: uint, dist: &[uint]) {\n     timed(\"insert\", || {\n-        for i in range(0u, n_keys) {\n+        for i in 0u..n_keys {\n             map.insert(dist[i], i + 1);\n         }\n     });\n \n     timed(\"search\", || {\n-        for i in range(0u, n_keys) {\n+        for i in 0u..n_keys {\n             assert_eq!(map.find(&dist[i]).unwrap(), &(i + 1));\n         }\n     });\n \n     timed(\"remove\", || {\n-        for i in range(0u, n_keys) {\n+        for i in 0u..n_keys {\n             assert!(map.remove(&dist[i]));\n         }\n     });"}, {"sha": "b78b147348a8cf0bfceb1d4b04da8e3bee63612b", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -71,11 +71,11 @@ impl Results {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_ints, || {\n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     set.insert(i);\n                 }\n \n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     assert!(set.contains(&i));\n                 }\n             })\n@@ -84,20 +84,20 @@ impl Results {\n         {\n             let mut set = f();\n             timed(&mut self.random_ints, || {\n-                for _ in range(0, num_keys) {\n+                for _ in 0..num_keys {\n                     set.insert(rng.gen::<uint>() % rand_cap);\n                 }\n             })\n         }\n \n         {\n             let mut set = f();\n-            for i in range(0u, num_keys) {\n+            for i in 0u..num_keys {\n                 set.insert(i);\n             }\n \n             timed(&mut self.delete_ints, || {\n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     assert!(set.remove(&i));\n                 }\n             })\n@@ -114,11 +114,11 @@ impl Results {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_strings, || {\n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     set.insert(i.to_string());\n                 }\n \n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     assert!(set.contains(&i.to_string()));\n                 }\n             })\n@@ -127,7 +127,7 @@ impl Results {\n         {\n             let mut set = f();\n             timed(&mut self.random_strings, || {\n-                for _ in range(0, num_keys) {\n+                for _ in 0..num_keys {\n                     let s = rng.gen::<uint>().to_string();\n                     set.insert(s);\n                 }\n@@ -136,11 +136,11 @@ impl Results {\n \n         {\n             let mut set = f();\n-            for i in range(0u, num_keys) {\n+            for i in 0u..num_keys {\n                 set.insert(i.to_string());\n             }\n             timed(&mut self.delete_strings, || {\n-                for i in range(0u, num_keys) {\n+                for i in 0u..num_keys {\n                     assert!(set.remove(&i.to_string()));\n                 }\n             })"}, {"sha": "6d12d84f652165f4ba73ef97f96269b2b69650a7", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -76,7 +76,7 @@ fn read_line() {\n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");\n \n-    for _ in range(0u, 3) {\n+    for _ in 0u..3 {\n         let mut reader = BufferedReader::new(File::open(&path).unwrap());\n         for _line in reader.lines() {\n         }\n@@ -126,7 +126,7 @@ fn vec_push_all() {\n     let mut r = rand::thread_rng();\n \n     let mut v = Vec::new();\n-    for i in range(0u, 1500) {\n+    for i in 0u..1500 {\n         let mut rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             v.push_all(rv.as_slice());\n@@ -140,7 +140,7 @@ fn vec_push_all() {\n \n fn is_utf8_ascii() {\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in range(0u, 20000) {\n+    for _ in 0u..20000 {\n         v.push('b' as u8);\n         if str::from_utf8(v.as_slice()).is_err() {\n             panic!(\"from_utf8 panicked\");\n@@ -151,7 +151,7 @@ fn is_utf8_ascii() {\n fn is_utf8_multibyte() {\n     let s = \"b\u00a2\u20ac\ud852\udf62\";\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in range(0u, 5000) {\n+    for _ in 0u..5000 {\n         v.push_all(s.as_bytes());\n         if str::from_utf8(v.as_slice()).is_err() {\n             panic!(\"from_utf8 panicked\");"}, {"sha": "99d83d761df66dd3ebac84aca8aec6e91036939f", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -22,7 +22,7 @@ fn main() {\n \n     let n = args[1].parse().unwrap();\n \n-    for i in range(0u, n) {\n+    for i in 0u..n {\n         let x = i.to_string();\n         println!(\"{}\", x);\n     }"}, {"sha": "6928397566dd0cee7cc619b1358d3972dc1cf870", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -61,10 +61,10 @@ fn run(args: &[String]) {\n     let dur = Duration::span(|| {\n         let (to_child, to_parent, from_parent) = p.take().unwrap();\n         let mut worker_results = Vec::new();\n-        for _ in range(0u, workers) {\n+        for _ in 0u..workers {\n             let to_child = to_child.clone();\n             worker_results.push(Thread::scoped(move|| {\n-                for _ in range(0u, size / workers) {\n+                for _ in 0u..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes)).unwrap();\n                 }"}, {"sha": "9bf0ce1a59099a782f5b6addab025138dc8c4104", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -57,7 +57,7 @@ fn run(args: &[String]) {\n         let from_parent = if workers == 1 {\n             let (to_child, from_parent) = channel();\n             worker_results.push(Thread::scoped(move|| {\n-                for _ in range(0u, size / workers) {\n+                for _ in 0u..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes));\n                 }\n@@ -66,10 +66,10 @@ fn run(args: &[String]) {\n             from_parent\n         } else {\n             let (to_child, from_parent) = channel();\n-            for _ in range(0u, workers) {\n+            for _ in 0u..workers {\n                 let to_child = to_child.clone();\n                 worker_results.push(Thread::scoped(move|| {\n-                    for _ in range(0u, size / workers) {\n+                    for _ in 0u..size / workers {\n                         //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                         to_child.send(request::bytes(num_bytes));\n                     }"}, {"sha": "c344084a4c02bd9ab1cc4e0b4b2e970d36e267fc", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -50,7 +50,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_chan = Some(num_chan);\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n-    for j in range(0u, count) {\n+    for j in 0u..count {\n         //println!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take().unwrap();\n         let num_port2 = num_port.take().unwrap();\n@@ -84,7 +84,7 @@ fn main() {\n         // create the ring\n         let mut futures = Vec::new();\n \n-        for i in range(1u, num_tasks) {\n+        for i in 1u..num_tasks {\n             //println!(\"spawning %?\", i);\n             let (new_chan, num_port) = init();\n             let num_chan_2 = num_chan.clone();"}, {"sha": "664491eed7d67028ad487f456818b1027be890f0", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -104,17 +104,17 @@ fn main() {\n     let mut pixels = [0f32; 256*256];\n     let n2d = Noise2DContext::new();\n \n-    for _ in range(0u, 100) {\n-        for y in range(0u, 256) {\n-            for x in range(0u, 256) {\n+    for _ in 0u..100 {\n+        for y in 0u..256 {\n+            for x in 0u..256 {\n                 let v = n2d.get(x as f32 * 0.1, y as f32 * 0.1);\n                 pixels[y*256+x] = v * 0.5 + 0.5;\n             }\n         }\n     }\n \n-    for y in range(0u, 256) {\n-        for x in range(0u, 256) {\n+    for y in 0u..256 {\n+        for x in 0u..256 {\n             let idx = (pixels[y*256+x] / 0.2) as uint;\n             print!(\"{}\", symbols[idx]);\n         }"}, {"sha": "a67deac67db6cf3c348944f1e739f223c45da828", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -37,15 +37,15 @@ fn ping_pong_bench(n: uint, m: uint) {\n \n         let guard_a = Thread::scoped(move|| {\n             let (tx, rx) = (atx, brx);\n-            for _ in range(0, n) {\n+            for _ in 0..n {\n                 tx.send(()).unwrap();\n                 rx.recv().unwrap();\n             }\n         });\n \n         let guard_b = Thread::scoped(move|| {\n             let (tx, rx) = (btx, arx);\n-            for _ in range(0, n) {\n+            for _ in 0..n {\n                 rx.recv().unwrap();\n                 tx.send(()).unwrap();\n             }\n@@ -55,7 +55,7 @@ fn ping_pong_bench(n: uint, m: uint) {\n         guard_b.join().ok();\n     }\n \n-    for _ in range(0, m) {\n+    for _ in 0..m {\n         run_pair(n)\n     }\n }"}, {"sha": "c30b68dbe682566abfee5c9c78fbd470798b7620", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -200,7 +200,7 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n     let mut creatures_met = 0;\n \n     // set up meetings...\n-    for _ in range(0, nn) {\n+    for _ in 0..nn {\n         let fst_creature = from_creatures.recv().unwrap();\n         let snd_creature = from_creatures.recv().unwrap();\n "}, {"sha": "cd65b8e7d811e1e1e232700d2eb233a61b393a1c", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -78,7 +78,7 @@ struct Perm {\n impl Perm {\n     fn new(n: u32) -> Perm {\n         let mut fact = [1; 16];\n-        for i in range(1, n as uint + 1) {\n+        for i in 1..n as uint + 1 {\n             fact[i] = fact[i - 1] * i as u32;\n         }\n         Perm {\n@@ -106,7 +106,7 @@ impl Perm {\n             }\n \n             let d = d as uint;\n-            for j in range(0, i + 1) {\n+            for j in 0..i + 1 {\n                 self.perm.p[j] = if j + d <= i {pp[j + d]} else {pp[j+d-i-1]} as i32;\n             }\n         }"}, {"sha": "f32e98ef17d851e529948a274e7913de0d0c343a", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -193,14 +193,14 @@ impl<'a, W: Writer> RandomFasta<'a, W> {\n         let chars_left = n % LINE_LEN;\n         let mut buf = [0;LINE_LEN + 1];\n \n-        for _ in range(0, lines) {\n-            for i in range(0u, LINE_LEN) {\n+        for _ in 0..lines {\n+            for i in 0u..LINE_LEN {\n                 buf[i] = self.nextc();\n             }\n             buf[LINE_LEN] = '\\n' as u8;\n             try!(self.out.write(&buf));\n         }\n-        for i in range(0u, chars_left) {\n+        for i in 0u..chars_left {\n             buf[i] = self.nextc();\n         }\n         self.out.write(&buf[..chars_left])"}, {"sha": "8a2a8453a9ef533c8a81fb6d38c88ed30b18e1b1", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -92,7 +92,7 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n     let mut line = [0u8; LINE_LENGTH + 1];\n     while n > 0 {\n         let nb = min(LINE_LENGTH, n);\n-        for i in range(0, nb) {\n+        for i in 0..nb {\n             line[i] = it.next().unwrap();\n         }\n         n -= nb;"}, {"sha": "2c3ade63f06d3ad1345540cb2b46264657efca3d", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -84,7 +84,7 @@ impl Code {\n     fn unpack(&self, frame: uint) -> String {\n         let mut key = self.hash();\n         let mut result = Vec::new();\n-        for _ in range(0, frame) {\n+        for _ in 0..frame {\n             result.push(unpack_symbol((key as u8) & 3));\n             key >>= 2;\n         }\n@@ -242,7 +242,7 @@ fn generate_frequencies(mut input: &[u8], frame: uint) -> Table {\n     let mut code = Code(0);\n \n     // Pull first frame.\n-    for _ in range(0, frame) {\n+    for _ in 0..frame {\n         code = code.push_char(input[0]);\n         input = &input[1..];\n     }"}, {"sha": "4a9c5a91dcf0bb5cbe976946e7782e8f9225c627", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -93,7 +93,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n             };\n \n             // This assumes w == h\n-            for x in range(start, end) {\n+            for x in start..end {\n                 let xf = x as f64;\n                 let xy = f64x2(xf, xf);\n \n@@ -165,7 +165,7 @@ fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n             let mut i_sq = v_init_i * v_init_i;\n \n             let mut b = 0;\n-            for _ in range(0, ITER) {\n+            for _ in 0..ITER {\n                 let r = cur_r;\n                 let i = cur_i;\n "}, {"sha": "3717221e0f4d1a57ddf50de3bdc879606fd018f4", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -211,7 +211,7 @@ fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n \n // Gets the identifier of a mask.\n fn get_id(m: u64) -> u8 {\n-    for id in range(0u8, 10) {\n+    for id in 0u8..10 {\n         if m & (1 << (id + 50) as uint) != 0 {return id;}\n     }\n     panic!(\"{:016x} does not have a valid identifier\", m);\n@@ -222,7 +222,7 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        for i in range(0u, 50) {\n+        for i in 0u..50 {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }"}, {"sha": "7325b8a4738f2460c723e66d1336e26d5c1ca3ca", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -102,7 +102,7 @@ struct Planet {\n }\n \n fn advance(bodies: &mut [Planet;N_BODIES], dt: f64, steps: int) {\n-    for _ in range(0, steps) {\n+    for _ in 0..steps {\n         let mut b_slice = bodies.as_mut_slice();\n         loop {\n             let bi = match shift_mut_ref(&mut b_slice) {"}, {"sha": "2f68262b608c677abf7b500875885181e1df64fb", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -77,7 +77,7 @@ fn stress_task(id: int) {\n \n fn stress(num_tasks: int) {\n     let mut results = Vec::new();\n-    for i in range(0, num_tasks) {\n+    for i in 0..num_tasks {\n         results.push(Thread::scoped(move|| {\n             stress_task(i);\n         }));\n@@ -106,8 +106,8 @@ fn main() {\n \n         let num_trials = 10;\n \n-        for n in range(1, max + 1) {\n-            for _ in range(0u, num_trials) {\n+        for n in 1..max + 1 {\n+            for _ in 0u..num_trials {\n                 let mut fibn = None;\n                 let dur = Duration::span(|| fibn = Some(fib(n)));\n                 let fibn = fibn.unwrap();"}, {"sha": "ec85ba18f900a1fd136f0e169162a212846b8685", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -68,7 +68,7 @@ fn spectralnorm(n: uint) -> f64 {\n     let mut u = repeat(1.0).take(n).collect::<Vec<_>>();\n     let mut v = u.clone();\n     let mut tmp = v.clone();\n-    for _ in range(0u, 10) {\n+    for _ in 0u..10 {\n         mult_AtAv(u.as_slice(), v.as_mut_slice(), tmp.as_mut_slice());\n         mult_AtAv(v.as_slice(), u.as_mut_slice(), tmp.as_mut_slice());\n     }"}, {"sha": "562b82a92a31c9dd029e48e515480ad0c0c405cf", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -15,13 +15,13 @@ use std::os;\n use std::time::Duration;\n \n fn append_sequential(min: uint, max: uint, map: &mut VecMap<uint>) {\n-    for i in range(min, max) {\n+    for i in min..max {\n         map.insert(i, i + 22u);\n     }\n }\n \n fn check_sequential(min: uint, max: uint, map: &VecMap<uint>) {\n-    for i in range(min, max) {\n+    for i in min..max {\n         assert_eq!(map[i], i + 22u);\n     }\n }\n@@ -41,7 +41,7 @@ fn main() {\n     let mut checkf = Duration::seconds(0);\n     let mut appendf = Duration::seconds(0);\n \n-    for _ in range(0u, rep) {\n+    for _ in 0u..rep {\n         let mut map = VecMap::new();\n         let d1 = Duration::span(|| append_sequential(0u, max, &mut map));\n         let d2 = Duration::span(|| check_sequential(0u, max, &map));"}, {"sha": "75126973cd9f4b579bcd2700e6e4efddfa4ae163", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -81,9 +81,9 @@ impl Sudoku {\n     }\n \n     pub fn write(&self, writer: &mut old_io::Writer) {\n-        for row in range(0u8, 9u8) {\n+        for row in 0u8..9u8 {\n             write!(writer, \"{}\", self.grid[row as uint][0]);\n-            for col in range(1u8, 9u8) {\n+            for col in 1u8..9u8 {\n                 write!(writer, \" {}\", self.grid[row as uint][col as uint]);\n             }\n             write!(writer, \"\\n\");\n@@ -93,8 +93,8 @@ impl Sudoku {\n     // solve sudoku grid\n     pub fn solve(&mut self) {\n         let mut work: Vec<(u8, u8)> = Vec::new(); /* queue of uncolored fields */\n-        for row in range(0u8, 9u8) {\n-            for col in range(0u8, 9u8) {\n+        for row in 0u8..9u8 {\n+            for col in 0u8..9u8 {\n                 let color = self.grid[row as uint][col as uint];\n                 if color == 0u8 {\n                     work.push((row, col));\n@@ -139,7 +139,7 @@ impl Sudoku {\n \n     // find colors available in neighbourhood of (row, col)\n     fn drop_colors(&mut self, avail: &mut Colors, row: u8, col: u8) {\n-        for idx in range(0u8, 9u8) {\n+        for idx in 0u8..9u8 {\n             /* check same column fields */\n             avail.remove(self.grid[idx as uint][col as uint]);\n             /* check same row fields */\n@@ -149,8 +149,8 @@ impl Sudoku {\n         // check same block fields\n         let row0 = (row / 3u8) * 3u8;\n         let col0 = (col / 3u8) * 3u8;\n-        for alt_row in range(row0, row0 + 3u8) {\n-            for alt_col in range(col0, col0 + 3u8) {\n+        for alt_row in row0..row0 + 3u8 {\n+            for alt_col in col0..col0 + 3u8 {\n                 avail.remove(self.grid[alt_row as uint][alt_col as uint]);\n             }\n         }"}, {"sha": "216745ca1105838b60bc41531dbff5687e713df0", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -30,7 +30,7 @@ fn main() {\n }\n \n fn run(repeat: int, depth: int) {\n-    for _ in range(0, repeat) {\n+    for _ in 0..repeat {\n         let dur = Duration::span(|| {\n             let _ = Thread::scoped(move|| {\n                 recurse_or_panic(depth, None)"}, {"sha": "545c766308545aad252ebe754ecc6a8f15cf06aa", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -41,7 +41,7 @@ fn block_overarching_alias_mut() {\n \n     let mut v = box 3;\n     let mut x = &mut v;\n-    for _ in range(0is, 3) {\n+    for _ in 0is..3 {\n         borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;"}, {"sha": "e58cd09a84c0d8e61eb8482f46cf45b056b766bd", "filename": "src/test/compile-fail/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -13,7 +13,7 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    'x: for _ in range(0,1) {\n+    'x: for _ in 0..1 {\n         foo!() //~ ERROR use of undeclared label `'x`\n     };\n }"}, {"sha": "5bfcb6360e4528b81a354252c792d8e3d06c318f", "filename": "src/test/compile-fail/hygienic-label-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n macro_rules! foo {\n-    ($e: expr) => { 'x: for _ in range(0,1) { $e } }\n+    ($e: expr) => { 'x: for _ in 0..1 { $e } }\n }\n \n pub fn main() {"}, {"sha": "c98c543462e974e34d468c7bc2d0f55b0931a731", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -18,7 +18,7 @@\n macro_rules! f { () => (n) }\n \n fn main() -> (){\n-    for n in range(0is, 1) {\n+    for n in 0is..1 {\n         println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n     }\n }"}, {"sha": "f336fdbfbed9552d6210296fc14b52aefccd51f6", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -12,7 +12,7 @@\n #![feature(core)]\n \n fn main() {\n-    for _ in range(1is, 101) {\n+    for _ in 1is..101 {\n         let x = (); //~ ERROR: unused variable: `x`\n         match () {\n             a => {} //~ ERROR: unused variable: `a`"}, {"sha": "ebcf46f7277d6f41e23d5cdf0c02ef3c28258198", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -85,7 +85,7 @@ fn f4b() -> isize {\n }\n \n fn f5a() {\n-    for x in range(1is, 10) { }\n+    for x in 1is..10 { }\n     //~^ ERROR unused variable: `x`\n }\n "}, {"sha": "38f8f859d39760d444a33320bcce7fb3e82f7d5e", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -202,7 +202,7 @@ fn main() {\n         zzz(); // #break\n     }\n \n-    for i in range(1234, 1235i) {\n+    for i in 1234..1235i {\n         zzz(); // #break\n     }\n "}, {"sha": "e1aec83714d031c00584b2d0a1afbc85c61a1840", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -49,7 +49,7 @@ fn some_function(a: int, b: int) {\n     let some_variable = Struct { a: 11, b: 22 };\n     let some_other_variable = 23i;\n \n-    for x in range(0, 1) {\n+    for x in 0..1 {\n         zzz(); // #break\n     }\n }"}, {"sha": "70f8b1ccd96715b37a1afde8566cdfb64b10700b", "filename": "src/test/debuginfo/unreachable-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -62,7 +62,7 @@ fn after_break() {\n }\n \n fn after_continue() {\n-    for _ in range(0, 10i32) {\n+    for _ in 0..10i32 {\n         break;\n         let x = \"0\";\n         let (ref y,z) = (1i32, 2u32);"}, {"sha": "f45c36023d218201dae23fe8640afeaa7967bad4", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -41,7 +41,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for _ in range(0, 10u) {\n+    for _ in 0..10u {\n         task::spawn(move|| {\n             let result = count(5u);\n             println!(\"result = %?\", result);"}, {"sha": "6cad55e6358203b0aae4ddade9650d0f3b387f32", "filename": "src/test/run-fail/for-each-loop-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n \n-fn main() { for _ in range(0u, 10u) { panic!(\"moop\"); } }\n+fn main() { for _ in 0u..10u { panic!(\"moop\"); } }"}, {"sha": "f9ffdffb4647ae98daace7106d7d5800d4633b73", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -43,11 +43,11 @@ fn main() {\n             .write_str(\"mod unicode_input_multiple_files_chars;\");\n     }\n \n-    for _ in range(0u, 100) {\n+    for _ in 0u..100 {\n         {\n             let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n             let mut w = File::create(&randoms).unwrap();\n-            for _ in range(0u, 30) {\n+            for _ in 0u..30 {\n                 let _ = w.write_char(random_char());\n             }\n         }"}, {"sha": "01e2c1f29730beab99535782beb7167401c4a394", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     let tmpdir = Path::new(args[2].as_slice());\n     let main_file = tmpdir.join(\"span_main.rs\");\n \n-    for _ in range(0u, 100) {\n+    for _ in 0u..100 {\n         let n = thread_rng().gen_range(3u, 20);\n \n         {"}, {"sha": "af1cc3b1f4dd24845628ace506b7563478b0a965", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -77,7 +77,7 @@ fn runtest(me: &str) {\n     assert!(!out.status.success());\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     let mut i = 0;\n-    for _ in range(0i, 2) {\n+    for _ in 0i..2 {\n         i += s[i + 10..].find_str(\"stack backtrace\").unwrap() + 10;\n     }\n     assert!(s[i + 10..].find_str(\"stack backtrace\").is_none(),"}, {"sha": "167d0ace159a9751766d62380e79acc8f6ee40e9", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -22,5 +22,5 @@ fn bitv_test() {\n }\n \n pub fn main() {\n-    for _ in range(0i, 10000) { bitv_test(); }\n+    for _ in 0i..10000 { bitv_test(); }\n }"}, {"sha": "8aca51cab546e9143e62366a7ea42c45c1687d63", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -88,7 +88,7 @@ fn cat(in_x: uint, in_y: int, in_name: String) -> cat {\n \n \n fn annoy_neighbors(critter: &mut noisy) {\n-    for _i in range(0u, 10) { critter.speak(); }\n+    for _i in 0u..10 { critter.speak(); }\n }\n \n pub fn main() {"}, {"sha": "7e7c1638e7395698a2dcdf14787c55d937cb67d7", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -103,11 +103,11 @@ impl<T> cat<T> {\n \n pub fn main() {\n     let mut nyan: cat<String> = cat::new(0, 2, \"nyan\".to_string());\n-    for _ in range(1u, 5) { nyan.speak(); }\n+    for _ in 1u..5 { nyan.speak(); }\n     assert!(*nyan.find(&1).unwrap() == \"nyan\".to_string());\n     assert_eq!(nyan.find(&10), None);\n     let mut spotty: cat<cat_type> = cat::new(2, 57, cat_type::tuxedo);\n-    for _ in range(0u, 6) { spotty.speak(); }\n+    for _ in 0u..6 { spotty.speak(); }\n     assert_eq!(spotty.len(), 8);\n     assert!((spotty.contains_key(&2)));\n     assert_eq!(spotty.get(&3), &cat_type::tuxedo);"}, {"sha": "b2804a417891c9a683fb49fb27e32ca70ac6739f", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -60,6 +60,6 @@ pub fn main() {\n   let mut nyan = cat(0u, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in range(1u, 10u) { nyan.speak(); };\n+  for _ in 1u..10u { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "172df8c2afd2856f4e2cfeb3ee6a2d6d1df524fd", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -65,7 +65,7 @@ pub fn main() {\n     let mut nyan = cat(0u, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in range(1u, 10u) {\n+    for _ in 1u..10u {\n         make_speak(nyan.clone());\n     }\n }"}, {"sha": "abf6968662cc2b466ae7d2e275d414743de24039", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     let mut nyan = cat(0u, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in range(1u, 10u) { nyan.speak(); };\n+    for _ in 1u..10u { nyan.speak(); };\n     assert!((nyan.eat()));\n }"}, {"sha": "413e59633cd5603d5387d9e5cf139609306863fc", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -52,6 +52,6 @@ pub fn main() {\n   let mut nyan = cat(0u, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in range(1u, 10u) { nyan.speak(); };\n+  for _ in 1u..10u { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "8c93f1ec78dc1f0849834b265db35c362dd6aedc", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -71,7 +71,7 @@ pub fn main() {\n     roundtrip::<C>();\n     roundtrip::<D>();\n \n-    for _ in range(0, 20) {\n+    for _ in 0..20 {\n         roundtrip::<E>();\n         roundtrip::<F>();\n         roundtrip::<G<int>>();"}, {"sha": "36b6b3cbeea8352a678942222d0cf95546ff6ac8", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -31,7 +31,7 @@ enum D {\n \n pub fn main() {\n     // check there's no segfaults\n-    for _ in range(0i, 20) {\n+    for _ in 0i..20 {\n         rand::random::<A>();\n         rand::random::<B>();\n         rand::random::<C>();"}, {"sha": "d8c08a0e4ef722138f580b3139dac5bd4d940de3", "filename": "src/test/run-pass/hygienic-labels-in-let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -27,7 +27,7 @@ macro_rules! while_true {\n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in range(0i, 1) { $e }\n+        'x: for _ in 0i..1 { $e }\n     }\n }\n \n@@ -45,7 +45,7 @@ pub fn main() {\n     assert_eq!(j, 1i);\n \n     let k: int = {\n-        'x: for _ in range(0i, 1) {\n+        'x: for _ in 0i..1 {\n             // ditto\n             loop_x!(break 'x);\n             i += 1;\n@@ -55,7 +55,7 @@ pub fn main() {\n     assert_eq!(k, 1i);\n \n     let l: int = {\n-        'x: for _ in range(0i, 1) {\n+        'x: for _ in 0i..1 {\n             // ditto\n             while_true!(break 'x);\n             i += 1;\n@@ -65,7 +65,7 @@ pub fn main() {\n     assert_eq!(l, 1i);\n \n     let n: int = {\n-        'x: for _ in range(0i, 1) {\n+        'x: for _ in 0i..1 {\n             // ditto\n             run_once!(continue 'x);\n             i += 1;"}, {"sha": "ff8f248a082cae3518b9e8cec758dd1aff3349ff", "filename": "src/test/run-pass/hygienic-labels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -18,7 +18,7 @@ macro_rules! loop_x {\n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in range(0i, 1) { $e }\n+        'x: for _ in 0i..1 { $e }\n     }\n }\n \n@@ -30,7 +30,7 @@ macro_rules! while_x {\n }\n \n pub fn main() {\n-    'x: for _ in range(0i, 1) {\n+    'x: for _ in 0i..1 {\n         // this 'x should refer to the outer loop, lexically\n         loop_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside for loop\");\n@@ -47,7 +47,7 @@ pub fn main() {\n         panic!(\"break doesn't act hygienically inside infinite while loop\");\n     }\n \n-    'x: for _ in range(0i, 1) {\n+    'x: for _ in 0i..1 {\n         // ditto\n         run_once!(continue 'x);\n         panic!(\"continue doesn't act hygienically inside for loop\");"}, {"sha": "880a8b4d2e025c12ccddcdf78cd73b97985971ac", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -19,10 +19,10 @@ pub fn main () {\n     let args = os::args();\n     let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n-        for _ in range(0i, 1000i) {\n+        for _ in 0i..1000i {\n             println!(\"hello?\");\n         }\n-        for _ in range(0i, 1000i) {\n+        for _ in 0i..1000i {\n             println!(\"hello?\");\n         }\n         return;"}, {"sha": "e75d118f36d4de07884a7d0fdb4057164dd882e2", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let n = 1000000u;\n     let mut sieve = Bitv::from_elem(n+1, true);\n     let limit: uint = (n as f32).sqrt() as uint;\n-    for i in range(2, limit+1) {\n+    for i in 2..limit+1 {\n         if sieve[i] {\n             let mut j = 0;\n             while i*i + j*i <= n {\n@@ -27,7 +27,7 @@ fn main() {\n             }\n         }\n     }\n-    for i in range(2, n+1) {\n+    for i in 2..n+1 {\n         if sieve[i] {\n         }\n     }"}, {"sha": "c10fd7328a1705f23c91c816eeaaee58eb08f32b", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     let (tx, rx) = channel();\n     let _t = Thread::spawn(move|| { helper(rx) });\n     let (snd, rcv) = channel::<int>();\n-    for _ in range(1i, 100000i) {\n+    for _ in 1i..100000i {\n         snd.send(1i).unwrap();\n         let (tx2, rx2) = channel();\n         tx.send(tx2).unwrap();"}, {"sha": "cdb7a3ea5d17b3a5769b6eb548b9314c8265455b", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n     let bools = vec!(false, false, true, false, false, true, true, false);\n     let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n \n-    for i in range(0u, 8) {\n+    for i in 0u..8 {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);\n     }\n "}, {"sha": "c908c073d4f44542a4a7adc7e3a5f05f769abd0d", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let mut x = 0i;\n-    for _ in range(0i, 4096) { x += 1; }\n+    for _ in 0i..4096 { x += 1; }\n     assert_eq!(x, 4096);\n     println!(\"x = {}\", x);\n }"}, {"sha": "426a8ccf7e7caa7269de8544aa2ce37d116b7961", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -69,7 +69,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n     let mut lines = Vec::new();\n-    for _ in range(0, height) {\n+    for _ in 0..height {\n         lines.push(repeat('.').take(width).collect::<Vec<_>>());\n     }\n \n@@ -136,13 +136,13 @@ impl Canvas for AsciiArt {\n \n     fn add_rect(&mut self, shape: Rect) {\n         // Add the top and bottom lines.\n-        for x in range(shape.top_left.x, shape.top_left.x + shape.size.width) {\n+        for x in shape.top_left.x..shape.top_left.x + shape.size.width {\n             self.add_pt(x, shape.top_left.y);\n             self.add_pt(x, shape.top_left.y + shape.size.height - 1);\n         }\n \n         // Add the left and right lines.\n-        for y in range(shape.top_left.y, shape.top_left.y + shape.size.height) {\n+        for y in shape.top_left.y..shape.top_left.y + shape.size.height {\n             self.add_pt(shape.top_left.x, y);\n             self.add_pt(shape.top_left.x + shape.size.width - 1, y);\n         }"}, {"sha": "19622cb88e35688f2a88e6319e5841be382d0b40", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -44,7 +44,7 @@ priv fn parse_data(len: uint, io: @io::Reader) -> Result {\n \n priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n     let mut list: ~[Result] = ~[];\n-    for _ in range(0, len) {\n+    for _ in 0..len {\n         let v = match io.read_char() {\n             '$' => parse_bulk(io),\n             ':' => parse_int(io),"}, {"sha": "a03253b8efb06d48c79db4aeb82c2d421c383e27", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let mut count = 0i;\n-    for _ in range(0i, 999_999) { count += 1; }\n+    for _ in 0i..999_999 { count += 1; }\n     assert_eq!(count, 999_999);\n     println!(\"{}\", count);\n }"}, {"sha": "2ab41f7783862860932f85db8ca8815cd9071147", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -16,7 +16,7 @@ trait Fooable {\n \n impl Fooable for uint {\n     fn yes(self) {\n-        for _ in range(0, self) { println!(\"yes\"); }\n+        for _ in 0..self { println!(\"yes\"); }\n     }\n }\n "}, {"sha": "80beeb7275c03b6fb215a450fb1b3b78296a4e1c", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -15,7 +15,7 @@ fn periodical(n: int) -> Receiver<bool> {\n     let (chan, port) = channel();\n     Thread::spawn(move|| {\n         loop {\n-            for _ in range(1, n) {\n+            for _ in 1..n {\n                 match chan.send(false) {\n                     Ok(()) => {}\n                     Err(..) => break,\n@@ -49,7 +49,7 @@ fn main() {\n     let ints = integers();\n     let threes = periodical(3);\n     let fives = periodical(5);\n-    for _ in range(1i, 100i) {\n+    for _ in 1i..100i {\n         match (ints.recv().unwrap(), threes.recv().unwrap(), fives.recv().unwrap()) {\n             (_, true, true) => println!(\"FizzBuzz\"),\n             (_, true, false) => println!(\"Fizz\"),"}, {"sha": "ebfe1e353d8e6f06157f73ee01b3c5a8b1e9d56a", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n         }\n     }\n \n-    'bar: for _ in range(0i, 100i) {\n+    'bar: for _ in 0i..100i {\n         loop {\n             break 'bar;\n         }"}, {"sha": "42959f82972e73a32d9eeb7503a7a6c0868736e4", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -27,7 +27,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n \n pub fn main() {\n     let x = box Triple{x: 1, y: 2, z: 3};\n-    for _ in range(0u, 10000u) {\n+    for _ in 0u..10000u {\n         assert_eq!(test(true, x.clone()), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "14607c9e24a0ad86f5fd21a67f8d9eb3b486197e", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n     assert_eq!(mem::size_of::<[Foo; 10]>(), 90);\n \n-    for i in range(0u, 10) {\n+    for i in 0u..10 {\n         assert_eq!(foos[i], Foo { bar: 1, baz: 2});\n     }\n "}, {"sha": "28a1a8dba9e1b5b9d1992b28491ccad5387320e9", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -16,7 +16,7 @@ fn foo(src: uint) {\n \n     match Some(src) {\n       Some(src_id) => {\n-        for _i in range(0u, 10u) {\n+        for _i in 0u..10u {\n             let yyy = src_id;\n             assert_eq!(yyy, 0u);\n         }"}, {"sha": "03566281bc4e33f8bff17580e16c793e49257ad7", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -22,7 +22,7 @@ impl cat {\n }\n \n impl cat {\n-    fn nap(&mut self) { for _ in range(1u, 10u) { } }\n+    fn nap(&mut self) { for _ in 1u..10u { } }\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "c932116243bffc15bce07f8e5cd22b5094a35db7", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -35,9 +35,9 @@ unsafe fn test_triangle() -> bool {\n     // from pairs of rows (where each pair of rows is equally sized),\n     // and the elements of the triangle match their row-pair index.\n     unsafe fn sanity_check(ascend: &[*mut u8]) {\n-        for i in range(0u, COUNT / 2) {\n+        for i in 0u..COUNT / 2 {\n             let (p0, p1, size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n-            for j in range(0u, size) {\n+            for j in 0u..size {\n                 assert_eq!(*p0.offset(j as int), i as u8);\n                 assert_eq!(*p1.offset(j as int), i as u8);\n             }\n@@ -88,16 +88,16 @@ unsafe fn test_triangle() -> bool {\n     // that at least two rows will be allocated near each other, so\n     // that we trigger the bug (a buffer overrun) in an observable\n     // way.)\n-    for i in range(0u, COUNT / 2) {\n+    for i in 0u..COUNT / 2 {\n         let size = idx_to_size(i);\n         ascend[2*i]   = allocate(size, ALIGN);\n         ascend[2*i+1] = allocate(size, ALIGN);\n     }\n \n     // Initialize each pair of rows to distinct value.\n-    for i in range(0u, COUNT / 2) {\n+    for i in 0u..COUNT / 2 {\n         let (p0, p1, size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n-        for j in range(0, size) {\n+        for j in 0..size {\n             *p0.offset(j as int) = i as u8;\n             *p1.offset(j as int) = i as u8;\n         }\n@@ -109,7 +109,7 @@ unsafe fn test_triangle() -> bool {\n     test_3(ascend); // triangle -> square\n     test_4(ascend); // square -> triangle\n \n-    for i in range(0u, COUNT / 2) {\n+    for i in 0u..COUNT / 2 {\n         let size = idx_to_size(i);\n         deallocate(ascend[2*i], size, ALIGN);\n         deallocate(ascend[2*i+1], size, ALIGN);\n@@ -123,7 +123,7 @@ unsafe fn test_triangle() -> bool {\n     // rows as we go.\n     unsafe fn test_1(ascend: &mut [*mut u8]) {\n         let new_size = idx_to_size(COUNT-1);\n-        for i in range(0u, COUNT / 2) {\n+        for i in 0u..COUNT / 2 {\n             let (p0, p1, old_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(old_size < new_size);\n \n@@ -138,7 +138,7 @@ unsafe fn test_triangle() -> bool {\n     // Test 2: turn the square back into a triangle, top to bottom.\n     unsafe fn test_2(ascend: &mut [*mut u8]) {\n         let old_size = idx_to_size(COUNT-1);\n-        for i in range(0u, COUNT / 2) {\n+        for i in 0u..COUNT / 2 {\n             let (p0, p1, new_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(new_size < old_size);\n "}, {"sha": "dcf694899c1ba27722b554d90a51155e4546f4a4", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -13,7 +13,7 @@ use std::mem::swap;\n pub fn main() {\n     let mut x = 4;\n \n-    for i in range(0u, 3) {\n+    for i in 0u..3 {\n         // ensure that the borrow in this alt\n         // does not interfere with the swap\n         // below.  note that it would it you"}, {"sha": "c22b476e59cd129d77adc03d0a99940df1e8349b", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n             Err(..) => unreachable!(),\n             Ok(f) => {\n                 let mut f = f;\n-                for _ in range(0u, 1000) {\n+                for _ in 0u..1000 {\n                     f.write(&[0]);\n                 }\n             }"}, {"sha": "b87718ba4680c00e83bf2db4db6b53224943a943", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -58,7 +58,7 @@ fn test() {\n     let _t = (0..N).map(|_| {\n         let cli_tx = cli_tx.clone();\n         Thread::scoped(move|| {\n-            for _ in range(0, M) {\n+            for _ in 0..M {\n                 let _s = TcpStream::connect(addr).unwrap();\n             }\n             cli_tx.send(());"}, {"sha": "69ae2521f9a6830b5e2485e41bafc7bd45b83747", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -41,7 +41,7 @@ fn eventual_timeout() {\n     rx1.recv().unwrap();\n \n     let mut v = Vec::new();\n-    for _ in range(0u, 10000) {\n+    for _ in 0u..10000 {\n         match TcpStream::connect_timeout(addr, Duration::milliseconds(100)) {\n             Ok(e) => v.push(e),\n             Err(ref e) if e.kind == old_io::TimedOut => return,"}, {"sha": "f5f013d1711716a2c1b03106b45d967bc42596ff", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -51,7 +51,7 @@ fn main() {\n     let addr = rx.recv().unwrap();\n \n     let (tx, rx) = channel();\n-    for _ in range(0u, 1000) {\n+    for _ in 0u..1000 {\n         let tx = tx.clone();\n         Builder::new().stack_size(64 * 1024).spawn(move|| {\n             match TcpStream::connect(addr) {\n@@ -70,7 +70,7 @@ fn main() {\n     // Wait for all clients to exit, but don't wait for the server to exit. The\n     // server just runs infinitely.\n     drop(tx);\n-    for _ in range(0u, 1000) {\n+    for _ in 0u..1000 {\n         rx.recv().unwrap();\n     }\n     unsafe { libc::exit(0) }"}, {"sha": "f0b634c0d44a752f26a81a464343b9cdec547ad5", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n     }).collect::<Vec<_>>();\n \n     let mut actual = 0u;\n-    for _ in range(0u, n) {\n+    for _ in 0u..n {\n         let j = rx.recv().unwrap();\n         actual += *j;\n     }"}, {"sha": "250bafc712d381bf73ca013a641f8d0f8fccf8a7", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d661af9c86566088f7dbaeee25143ecde673b75/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=7d661af9c86566088f7dbaeee25143ecde673b75", "patch": "@@ -55,8 +55,8 @@ impl Drop for DropCounter {\n pub fn main() {\n     assert!(MAX_LEN <= std::uint::BITS);\n     // len can't go above 64.\n-    for len in range(2, MAX_LEN) {\n-        for _ in range(0, REPEATS) {\n+    for len in 2..MAX_LEN {\n+        for _ in 0..REPEATS {\n             // reset the count for these new DropCounters, so their\n             // IDs start from 0.\n             creation_count.store(0, Ordering::Relaxed);\n@@ -71,7 +71,7 @@ pub fn main() {\n             main.clone().as_mut_slice().sort_by(|a, b| { count += 1; a.cmp(b) });\n \n             // ... and then panic on each and every single one.\n-            for panic_countdown in range(0i, count) {\n+            for panic_countdown in 0i..count {\n                 // refresh the counters.\n                 for c in drop_counts.iter() {\n                     c.store(0, Ordering::Relaxed);"}]}