{"sha": "2d4df9584bebbdc72db77f550a6786819a3a791f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGRmOTU4NGJlYmJkYzcyZGI3N2Y1NTBhNjc4NjgxOWEzYTc5MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T19:04:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T19:04:25Z"}, "message": "Auto merge of #46232 - canndrew:never-docs, r=QuietMisdreavus\n\nAdd docs for never primitive\n\ncc @nikomatsakis, @QuietMisdreavus", "tree": {"sha": "e33d4d136d7072c37404d16b8685f8c9090f6d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33d4d136d7072c37404d16b8685f8c9090f6d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4df9584bebbdc72db77f550a6786819a3a791f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4df9584bebbdc72db77f550a6786819a3a791f", "html_url": "https://github.com/rust-lang/rust/commit/2d4df9584bebbdc72db77f550a6786819a3a791f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4df9584bebbdc72db77f550a6786819a3a791f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "html_url": "https://github.com/rust-lang/rust/commit/2537a499c2f1983011ad04ba2e59e5ff2e2989b6"}, {"sha": "172f16bc9dcaa928af973f693589754d86473435", "url": "https://api.github.com/repos/rust-lang/rust/commits/172f16bc9dcaa928af973f693589754d86473435", "html_url": "https://github.com/rust-lang/rust/commit/172f16bc9dcaa928af973f693589754d86473435"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "0e25d639e45d8eddff2d6c14a5e68a802916b7f7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2d4df9584bebbdc72db77f550a6786819a3a791f", "patch": "@@ -1802,6 +1802,7 @@ pub enum PrimitiveType {\n     RawPointer,\n     Reference,\n     Fn,\n+    Never,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1843,6 +1844,7 @@ impl Type {\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n+            Never => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1891,6 +1893,7 @@ impl GetDefId for Type {\n                 Primitive(PrimitiveType::Tuple).def_id()\n             },\n             BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n+            Never => Primitive(PrimitiveType::Never).def_id(),\n             Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n             Array(..) => Primitive(PrimitiveType::Array).def_id(),\n             RawPointer(..) => Primitive(PrimitiveType::RawPointer).def_id(),\n@@ -1927,6 +1930,7 @@ impl PrimitiveType {\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n             \"reference\" => Some(PrimitiveType::Reference),\n             \"fn\" => Some(PrimitiveType::Fn),\n+            \"never\" => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1958,6 +1962,7 @@ impl PrimitiveType {\n             RawPointer => \"pointer\",\n             Reference => \"reference\",\n             Fn => \"fn\",\n+            Never => \"never\",\n         }\n     }\n \n@@ -2892,6 +2897,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             RawPointer => tcx.lang_items().const_ptr_impl(),\n             Reference => None,\n             Fn => None,\n+            Never => None,\n         };\n         if let Some(did) = did {\n             if !did.is_local() {"}, {"sha": "53c10d101d0c45f88fe1bbf9ed9076b7acdd26a0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2d4df9584bebbdc72db77f550a6786819a3a791f", "patch": "@@ -636,7 +636,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             fmt::Display::fmt(t, f)?;\n             primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", n))\n         }\n-        clean::Never => f.write_str(\"!\"),\n+        clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n         clean::RawPointer(m, ref t) => {\n             match **t {\n                 clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {"}, {"sha": "a456e4663418500b8ffbfa44357eaea4018c19fd", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4df9584bebbdc72db77f550a6786819a3a791f/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=2d4df9584bebbdc72db77f550a6786819a3a791f", "patch": "@@ -67,6 +67,134 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool { }\n \n+#[doc(primitive = \"never\")]\n+//\n+/// The `!` type, also called \"never\".\n+///\n+/// `!` represents the type of computations which never resolve to any value at all. For example,\n+/// the [`exit`] function `fn exit(code: i32) -> !` exits the process without ever returning, and\n+/// so returns `!`.\n+///\n+/// `break`, `continue` and `return` expressions also have type `!`. For example we are allowed to\n+/// write:\n+///\n+/// ```\n+/// #![feature(never_type)]\n+/// # fn foo() -> u32 {\n+/// let x: ! = {\n+///     return 123\n+/// };\n+/// # }\n+/// ```\n+///\n+/// Although the `let` is pointless here, it illustrates the meaning of `!`. Since `x` is never\n+/// assigned a value (because `return` returns from the entire function), `x` can be given type\n+/// `!`. We could also replace `return 123` with a `panic!` or a never-ending `loop` and this code\n+/// would still be valid.\n+///\n+/// A more realistic usage of `!` is in this code:\n+///\n+/// ```\n+/// # fn get_a_number() -> Option<u32> { None }\n+/// # loop {\n+/// let num: u32 = match get_a_number() {\n+///     Some(num) => num,\n+///     None => break,\n+/// };\n+/// # }\n+/// ```\n+///\n+/// Both match arms must produce values of type [`u32`], but since `break` never produces a value\n+/// at all we know it can never produce a value which isn't a [`u32`]. This illustrates another\n+/// behaviour of the `!` type - expressions with type `!` will coerce into any other type.\n+///\n+/// [`u32`]: primitive.str.html\n+/// [`exit`]: process/fn.exit.html\n+///\n+/// # `!` and generics\n+///\n+/// The main place you'll see `!` used explicitly is in generic code. Consider the [`FromStr`]\n+/// trait:\n+///\n+/// ```\n+/// trait FromStr: Sized {\n+///     type Err;\n+///     fn from_str(s: &str) -> Result<Self, Self::Err>;\n+/// }\n+/// ```\n+///\n+/// When implementing this trait for [`String`] we need to pick a type for [`Err`]. And since\n+/// converting a string into a string will never result in an error, the appropriate type is `!`.\n+/// (Currently the type actually used is an enum with no variants, though this is only because `!`\n+/// was added to Rust at a later date and it may change in the future). With an [`Err`] type of\n+/// `!`, if we have to call [`String::from_str`] for some reason the result will be a\n+/// [`Result<String, !>`] which we can unpack like this:\n+///\n+/// ```ignore (string-from-str-error-type-is-not-never-yet)\n+/// // NOTE: This does not work today!\n+/// let Ok(s) = String::from_str(\"hello\");\n+/// ```\n+///\n+/// Since the [`Err`] variant contains a `!`, it can never occur. So we can exhaustively match on\n+/// [`Result<T, !>`] by just taking the [`Ok`] variant. This illustrates another behaviour of `!` -\n+/// it can be used to \"delete\" certain enum variants from generic types like `Result`.\n+///\n+/// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n+/// [`Result<String, !>`]: result/enum.Result.html\n+/// [`Result<T, !>`]: result/enum.Result.html\n+/// [`Ok`]: result/enum.Result.html#variant.Ok\n+/// [`String`]: string/struct.String.html\n+/// [`Err`]: result/enum.Result.html#variant.Err\n+/// [`FromStr`]: str/trait.FromStr.html\n+///\n+/// # `!` and traits\n+///\n+/// When writing your own traits, `!` should have an `impl` whenever there is an obvious `impl`\n+/// which doesn't `panic!`. As is turns out, most traits can have an `impl` for `!`. Take [`Debug`]\n+/// for example:\n+///\n+/// ```\n+/// # #![feature(never_type)]\n+/// # use std::fmt;\n+/// # trait Debug {\n+/// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n+/// # }\n+/// impl Debug for ! {\n+///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+///         *self\n+///     }\n+/// }\n+/// ```\n+///\n+/// Once again we're using `!`'s ability to coerce into any other type, in this case\n+/// [`fmt::Result`]. Since this method takes a `&!` as an argument we know that it can never be\n+/// called (because there is no value of type `!` for it to be called with). Writing `*self`\n+/// essentially tells the compiler \"We know that this code can never be run, so just treat the\n+/// entire function body has having type [`fmt::Result`]\". This pattern can be used a lot when\n+/// implementing traits for `!`. Generally, any trait which only has methods which take a `self`\n+/// parameter should have such as impl.\n+///\n+/// On the other hand, one trait which would not be appropriate to implement is [`Default`]:\n+///\n+/// ```\n+/// trait Default {\n+///     fn default() -> Self;\n+/// }\n+/// ```\n+///\n+/// Since `!` has no values, it has no default value either. It's true that we could write an\n+/// `impl` for this which simply panics, but the same is true for any type (we could `impl\n+/// Default` for (eg.) [`File`] by just making [`default()`] panic.)\n+///\n+/// [`fmt::Result`]: fmt/type.Result.html\n+/// [`File`]: fs/struct.File.html\n+/// [`Debug`]: fmt/trait.Debug.html\n+/// [`Default`]: default/trait.Default.html\n+/// [`default()`]: default/trait.Default.html#tymethod.default\n+///\n+#[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n+mod prim_never { }\n+\n #[doc(primitive = \"char\")]\n //\n /// A character type."}]}