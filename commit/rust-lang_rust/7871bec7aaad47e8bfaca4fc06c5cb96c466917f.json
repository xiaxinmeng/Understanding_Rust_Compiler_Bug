{"sha": "7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "node_id": "C_kwDOAAsO6NoAKDc4NzFiZWM3YWFhZDQ3ZThiZmFjYTRmYzA2YzVjYjk2YzQ2NjkxN2Y", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-04-28T07:17:29Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-05-10T16:03:46Z"}, "message": "add test", "tree": {"sha": "91b9e49af9c5f97227f494f28a547cd65d0b5ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b9e49af9c5f97227f494f28a547cd65d0b5ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "html_url": "https://github.com/rust-lang/rust/commit/7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7871bec7aaad47e8bfaca4fc06c5cb96c466917f/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930c39aa8fa73f915894bf6f3330c2880e8a1547", "url": "https://api.github.com/repos/rust-lang/rust/commits/930c39aa8fa73f915894bf6f3330c2880e8a1547", "html_url": "https://github.com/rust-lang/rust/commit/930c39aa8fa73f915894bf6f3330c2880e8a1547"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "35f9c7e8d9be668edf42b69bce77e14e544c20ec", "filename": "tests/ui/drop/issue-110682.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7871bec7aaad47e8bfaca4fc06c5cb96c466917f/tests%2Fui%2Fdrop%2Fissue-110682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871bec7aaad47e8bfaca4fc06c5cb96c466917f/tests%2Fui%2Fdrop%2Fissue-110682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fissue-110682.rs?ref=7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "patch": "@@ -0,0 +1,92 @@\n+// build-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+use std::fmt::Debug;\n+use std::mem::ManuallyDrop;\n+use std::ptr;\n+\n+pub trait BitRegister {}\n+\n+macro_rules! register {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitRegister for $t {\n+        }\n+    )* };\n+}\n+\n+register!(u8, u16, u32);\n+\n+pub trait BitStore: Sized + Debug {\n+    /// The register type that the implementor describes.\n+    type Mem: BitRegister + Into<Self>;\n+}\n+\n+macro_rules! store {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitStore for $t {\n+            type Mem = Self;\n+        }\n+    )+ };\n+}\n+\n+store!(u8, u16, u32,);\n+\n+#[repr(C)]\n+pub struct BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    /// Region pointer describing the live portion of the owned buffer.\n+    pointer: ptr::NonNull<T>,\n+    /// Allocated capacity, in elements `T`, of the owned buffer.\n+    capacity: usize,\n+}\n+\n+impl<T> BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    pub fn new() -> Self {\n+        let pointer = ptr::NonNull::<T>::new(ptr::null_mut()).unwrap();\n+\n+        BitVec { pointer, capacity: 10 }\n+    }\n+\n+    pub fn clear(&mut self) {\n+        unsafe {\n+            self.set_len(0);\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn set_len(&mut self, new_len: usize) {}\n+\n+    fn with_vec<F, R>(&mut self, func: F) -> R\n+    where\n+        F: FnOnce(&mut ManuallyDrop<Vec<T::Mem>>) -> R,\n+    {\n+        let cap = self.capacity;\n+        let elts = 10;\n+        let mut vec = ManuallyDrop::new(unsafe { Vec::from_raw_parts(ptr::null_mut(), elts, cap) });\n+        let out = func(&mut vec);\n+\n+        out\n+    }\n+}\n+\n+impl<T> Drop for BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    #[inline]\n+    fn drop(&mut self) {\n+        //  The buffer elements do not have destructors.\n+        self.clear();\n+        //  Run the `Vec` destructor to de\u00e4llocate the buffer.\n+        self.with_vec(|vec| unsafe { ManuallyDrop::drop(vec) });\n+    }\n+}\n+\n+fn main() {\n+    let bitvec = BitVec::<u32>::new();\n+}"}]}