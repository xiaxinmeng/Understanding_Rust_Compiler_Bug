{"sha": "3f917120a09459c649cccf903752b2addb1c9a01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTE3MTIwYTA5NDU5YzY0OWNjY2Y5MDM3NTJiMmFkZGIxYzlhMDE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-17T23:36:29Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-21T11:20:46Z"}, "message": "Reuse pat_constructor in split_grouped_ctors", "tree": {"sha": "131b255f0fa8ef0a88d584ab911c1e564f80f6ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131b255f0fa8ef0a88d584ab911c1e564f80f6ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f917120a09459c649cccf903752b2addb1c9a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f917120a09459c649cccf903752b2addb1c9a01", "html_url": "https://github.com/rust-lang/rust/commit/3f917120a09459c649cccf903752b2addb1c9a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f917120a09459c649cccf903752b2addb1c9a01/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e5513894ff6438a11c1805b4cc8983dada2f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e5513894ff6438a11c1805b4cc8983dada2f7d", "html_url": "https://github.com/rust-lang/rust/commit/e6e5513894ff6438a11c1805b4cc8983dada2f7d"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "5db567dae29c11638413f481758467406764c060", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3f917120a09459c649cccf903752b2addb1c9a01/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f917120a09459c649cccf903752b2addb1c9a01/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3f917120a09459c649cccf903752b2addb1c9a01", "patch": "@@ -2096,32 +2096,19 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 let mut max_suffix_len = self_suffix;\n                 let mut max_fixed_len = 0;\n \n-                for row in matrix.heads() {\n-                    match *row.kind {\n-                        PatKind::Constant { value } => {\n-                            // extract the length of an array/slice from a constant\n-                            match (value.val, &value.ty.kind) {\n-                                (_, ty::Array(_, n)) => {\n-                                    max_fixed_len =\n-                                        cmp::max(max_fixed_len, n.eval_usize(tcx, param_env))\n-                                }\n-                                (\n-                                    ty::ConstKind::Value(ConstValue::Slice { start, end, .. }),\n-                                    ty::Slice(_),\n-                                ) => max_fixed_len = cmp::max(max_fixed_len, (end - start) as u64),\n-                                _ => {}\n+                let head_ctors =\n+                    matrix.heads().filter_map(|pat| pat_constructor(tcx, param_env, pat));\n+                for ctor in head_ctors {\n+                    match ctor {\n+                        Slice(slice) => match slice.pattern_kind() {\n+                            FixedLen(len) => {\n+                                max_fixed_len = cmp::max(max_fixed_len, len);\n                             }\n-                        }\n-                        PatKind::Slice { ref prefix, slice: None, ref suffix }\n-                        | PatKind::Array { ref prefix, slice: None, ref suffix } => {\n-                            let fixed_len = prefix.len() as u64 + suffix.len() as u64;\n-                            max_fixed_len = cmp::max(max_fixed_len, fixed_len);\n-                        }\n-                        PatKind::Slice { ref prefix, slice: Some(_), ref suffix }\n-                        | PatKind::Array { ref prefix, slice: Some(_), ref suffix } => {\n-                            max_prefix_len = cmp::max(max_prefix_len, prefix.len() as u64);\n-                            max_suffix_len = cmp::max(max_suffix_len, suffix.len() as u64);\n-                        }\n+                            VarLen(prefix, suffix) => {\n+                                max_prefix_len = cmp::max(max_prefix_len, prefix);\n+                                max_suffix_len = cmp::max(max_suffix_len, suffix);\n+                            }\n+                        },\n                         _ => {}\n                     }\n                 }"}]}