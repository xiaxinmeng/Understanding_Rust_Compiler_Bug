{"sha": "b0d47829489d44512c01868d6985cf1e86de3673", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDQ3ODI5NDg5ZDQ0NTEyYzAxODY4ZDY5ODVjZjFlODZkZTM2NzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T01:44:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T00:38:02Z"}, "message": "Stabilize 'async_await'.", "tree": {"sha": "747bcc6de911cfcc61dadf8be1eb1c935721e422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747bcc6de911cfcc61dadf8be1eb1c935721e422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d47829489d44512c01868d6985cf1e86de3673", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d47829489d44512c01868d6985cf1e86de3673", "html_url": "https://github.com/rust-lang/rust/commit/b0d47829489d44512c01868d6985cf1e86de3673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d47829489d44512c01868d6985cf1e86de3673/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b08dd26036e14f061b99b20cd6f169e29046f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b08dd26036e14f061b99b20cd6f169e29046f3", "html_url": "https://github.com/rust-lang/rust/commit/c1b08dd26036e14f061b99b20cd6f169e29046f3"}], "stats": {"total": 32, "additions": 4, "deletions": 28}, "files": [{"sha": "a200a058f4f99bbd7a7e30e06a81c82fba8a4593", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=b0d47829489d44512c01868d6985cf1e86de3673", "patch": "@@ -2088,7 +2088,6 @@ generator can be constructed.\n Erroneous code example:\n \n ```edition2018,compile-fail,E0698\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n@@ -2101,7 +2100,6 @@ To fix this you must bind `T` to a concrete type such as `String`\n so that a generator can then be constructed:\n \n ```edition2018\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "9c7ac83e82e9712d10de1bc31b0930a5788cebc7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b0d47829489d44512c01868d6985cf1e86de3673", "patch": "@@ -4197,8 +4197,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// A possible error is to forget to add `.await` when using futures:\n     ///\n     /// ```\n-    /// #![feature(async_await)]\n-    ///\n     /// async fn make_u32() -> u32 {\n     ///     22\n     /// }"}, {"sha": "b52183d4b1b56de2e6aaec4ea4d2ddc93e218560", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=b0d47829489d44512c01868d6985cf1e86de3673", "patch": "@@ -4751,7 +4751,6 @@ E0733: r##\"\n Recursion in an `async fn` requires boxing. For example, this will not compile:\n \n ```edition2018,compile_fail,E0733\n-#![feature(async_await)]\n async fn foo(n: usize) {\n     if n > 0 {\n         foo(n - 1).await;\n@@ -4763,12 +4762,11 @@ To achieve async recursion, the `async fn` needs to be desugared\n such that the `Future` is explicit in the return type:\n \n ```edition2018,compile_fail,E0720\n-# #![feature(async_await)]\n use std::future::Future;\n-fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n+fn foo_desugared(n: usize) -> impl Future<Output = ()> {\n     async move {\n         if n > 0 {\n-            foo_desugered(n - 1).await;\n+            foo_desugared(n - 1).await;\n         }\n     }\n }\n@@ -4777,7 +4775,6 @@ fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n Finally, the future is wrapped in a pinned box:\n \n ```edition2018\n-# #![feature(async_await)]\n use std::future::Future;\n use std::pin::Pin;\n fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {"}, {"sha": "85a9dea09ed0d7500433340a5352a1bbc0cd1dcf", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=b0d47829489d44512c01868d6985cf1e86de3673", "patch": "@@ -984,7 +984,6 @@ mod where_keyword { }\n \n // 2018 Edition keywords\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"async\")]\n //\n /// Return a [`Future`] instead of blocking the current thread.\n@@ -995,7 +994,6 @@ mod where_keyword { }\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod async_keyword { }\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"await\")]\n //\n /// Suspend execution until the result of a [`Future`] is ready."}, {"sha": "bce0b07db1c233b3f84bd207eb78dadf83bbc05c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d47829489d44512c01868d6985cf1e86de3673/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b0d47829489d44512c01868d6985cf1e86de3673", "patch": "@@ -461,9 +461,6 @@ declare_features! (\n     // Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n-    // Allows async and await syntax.\n-    (active, async_await, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -857,6 +854,8 @@ declare_features! (\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n     // Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n+    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    (accepted, async_await, \"1.38.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features\n@@ -2100,12 +2099,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     \"labels on blocks are unstable\");\n                 }\n             }\n-            ast::ExprKind::Async(..) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n-            }\n-            ast::ExprKind::Await(_) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -2154,11 +2147,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         if let Some(header) = fn_kind.header() {\n-            // Check for const fn and async fn declarations.\n-            if header.asyncness.node.is_async() {\n-                gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n-            }\n-\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n@@ -2198,9 +2186,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.header.asyncness.node.is_async() {\n-                    gate_feature_post!(&self, async_await, ti.span, \"async fn is unstable\");\n-                }\n                 if sig.decl.c_variadic {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n                                        \"C-variadic functions are unstable\");"}]}