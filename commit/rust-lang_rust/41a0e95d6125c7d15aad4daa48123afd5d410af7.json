{"sha": "41a0e95d6125c7d15aad4daa48123afd5d410af7", "node_id": "C_kwDOAAsO6NoAKDQxYTBlOTVkNjEyNWM3ZDE1YWFkNGRhYTQ4MTIzYWZkNWQ0MTBhZjc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T18:06:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T18:06:33Z"}, "message": "Merge #11230\n\n11230: fix: Fix attribute stripping ignoring doc comments r=Veykril a=Veykril\n\nFollow up to https://github.com/rust-analyzer/rust-analyzer/pull/11225#pullrequestreview-846779237\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f073e50d50bbdf8eb14ce27f3c813c2d5069adc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f073e50d50bbdf8eb14ce27f3c813c2d5069adc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a0e95d6125c7d15aad4daa48123afd5d410af7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2IEpCRBK7hj4Ov3rIwAALvAIAJpA+N2MAAV51ON+XdPKGORo\nn5L9YuEhWLW8/hPKSZe7UB4qJl0Gnoo0mXb8IsKAg8alaLp/rWjnCBsdEDQqxyKA\n2JXTbaGes86aSCxhTad+O9QG5xSWycnjEucSoCoS0UWaGUJENL5OmI5O87VF8tgl\ntdzOpQXQPkkzsh6lCUErAStqwX2uimcLfnSeLMqbSbQ1UqHoi7OEt4uQ/cE6A2se\nAIh0vhAXvLazs7MRX4RLaRDq+c97q59mpeu4dOtwgaxz+O26x1F9XuqzLE5zT+gi\n7abqYN1A74TezOMuAfHO4eglx8gqt7WflbauLqOjS6lQenFf+tAedSekQtxti4A=\n=7d7I\n-----END PGP SIGNATURE-----\n", "payload": "tree f073e50d50bbdf8eb14ce27f3c813c2d5069adc8\nparent 40009e07d002bf676b4b32e90a858aed37ea4cc2\nparent 81163b8cd4a03ac0d37807e02de20ad2605e26dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641578793 +0000\ncommitter GitHub <noreply@github.com> 1641578793 +0000\n\nMerge #11230\n\n11230: fix: Fix attribute stripping ignoring doc comments r=Veykril a=Veykril\n\nFollow up to https://github.com/rust-analyzer/rust-analyzer/pull/11225#pullrequestreview-846779237\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a0e95d6125c7d15aad4daa48123afd5d410af7", "html_url": "https://github.com/rust-lang/rust/commit/41a0e95d6125c7d15aad4daa48123afd5d410af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a0e95d6125c7d15aad4daa48123afd5d410af7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40009e07d002bf676b4b32e90a858aed37ea4cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/40009e07d002bf676b4b32e90a858aed37ea4cc2", "html_url": "https://github.com/rust-lang/rust/commit/40009e07d002bf676b4b32e90a858aed37ea4cc2"}, {"sha": "81163b8cd4a03ac0d37807e02de20ad2605e26dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/81163b8cd4a03ac0d37807e02de20ad2605e26dd", "html_url": "https://github.com/rust-lang/rust/commit/81163b8cd4a03ac0d37807e02de20ad2605e26dd"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "b0ff7972757c33d811b1e2c54f43d35a67fc6c6b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=41a0e95d6125c7d15aad4daa48123afd5d410af7", "patch": "@@ -68,7 +68,7 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n use syntax::{\n-    ast::{self, HasAttrs as _, HasName},\n+    ast::{self, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxKind, SyntaxNodePtr,\n };\n use tt::{Ident, Leaf, Literal, TokenTree};\n@@ -612,10 +612,13 @@ impl Module {\n                         }\n                         MacroCallKind::Attr { ast_id, invoc_attr_index, attr_name, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n-                            let attr =\n-                                node.attrs().nth((*invoc_attr_index) as usize).unwrap_or_else(\n-                                    || panic!(\"cannot find attribute #{}\", invoc_attr_index),\n-                                );\n+                            let attr = node\n+                                .doc_comments_and_attrs()\n+                                .nth((*invoc_attr_index) as usize)\n+                                .and_then(Either::right)\n+                                .unwrap_or_else(|| {\n+                                    panic!(\"cannot find attribute #{}\", invoc_attr_index)\n+                                });\n                             (\n                                 ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),\n                                 Some(attr_name.clone()),"}, {"sha": "c39825b591c2af1a26a72726d363550064098672", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=41a0e95d6125c7d15aad4daa48123afd5d410af7", "patch": "@@ -3,12 +3,13 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n+use either::Either;\n use limit::Limit;\n use mbe::{syntax_node_to_token_tree, ExpandError, ExpandResult};\n use rustc_hash::FxHashSet;\n use syntax::{\n     algo::diff,\n-    ast::{self, HasAttrs},\n+    ast::{self, HasAttrs, HasDocComments},\n     AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, T,\n };\n \n@@ -153,7 +154,10 @@ pub fn expand_speculative(\n             // Attributes may have an input token tree, build the subtree and map for this as well\n             // then try finding a token id for our token if it is inside this input subtree.\n             let item = ast::Item::cast(speculative_args.clone())?;\n-            let attr = item.attrs().nth(invoc_attr_index as usize)?;\n+            let attr = item\n+                .doc_comments_and_attrs()\n+                .nth(invoc_attr_index as usize)\n+                .and_then(Either::right)?;\n             match attr.token_tree() {\n                 Some(token_tree) => {\n                     let (mut tree, map) = syntax_node_to_token_tree(attr.token_tree()?.syntax());\n@@ -328,8 +332,9 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n             MacroCallKind::Attr { invoc_attr_index, .. } => {\n                 cov_mark::hit!(attribute_macro_attr_censoring);\n                 ast::Item::cast(node.clone())?\n-                    .attrs()\n+                    .doc_comments_and_attrs()\n                     .nth(invoc_attr_index as usize)\n+                    .and_then(Either::right)\n                     .map(|attr| attr.syntax().clone())\n                     .into_iter()\n                     .collect()"}, {"sha": "d7dc0443b211d931cd8c4e60baf6c770f80528ba", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=41a0e95d6125c7d15aad4daa48123afd5d410af7", "patch": "@@ -9,7 +9,7 @@ use db::TokenExpander;\n use either::Either;\n use mbe::Origin;\n use syntax::{\n-    ast::{self, HasAttrs},\n+    ast::{self, HasDocComments},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n \n@@ -187,7 +187,12 @@ fn make_hygiene_info(\n     });\n     let attr_input_or_mac_def = def.or_else(|| match loc.kind {\n         MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n-            let tt = ast_id.to_node(db).attrs().nth(invoc_attr_index as usize)?.token_tree()?;\n+            let tt = ast_id\n+                .to_node(db)\n+                .doc_comments_and_attrs()\n+                .nth(invoc_attr_index as usize)\n+                .and_then(Either::right)?\n+                .token_tree()?;\n             Some(InFile::new(ast_id.file_id, tt))\n         }\n         _ => None,"}, {"sha": "5f190b87277923fd65176c988a580afa9cc229fb", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=41a0e95d6125c7d15aad4daa48123afd5d410af7", "patch": "@@ -25,7 +25,7 @@ use std::{hash::Hash, iter, sync::Arc};\n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n     algo::{self, skip_trivia_token},\n-    ast::{self, AstNode, HasAttrs},\n+    ast::{self, AstNode, HasDocComments},\n     Direction, SyntaxNode, SyntaxToken,\n };\n \n@@ -201,8 +201,9 @@ impl HirFileId {\n                     MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n                         let tt = ast_id\n                             .to_node(db)\n-                            .attrs()\n-                            .nth(invoc_attr_index as usize)?\n+                            .doc_comments_and_attrs()\n+                            .nth(invoc_attr_index as usize)\n+                            .and_then(Either::right)?\n                             .token_tree()?;\n                         Some(InFile::new(ast_id.file_id, tt))\n                     }\n@@ -429,8 +430,11 @@ impl ExpansionInfo {\n \n             let token_range = token.value.text_range();\n             match &loc.kind {\n-                MacroCallKind::Attr { attr_args, invoc_attr_index, .. } => {\n-                    let attr = item.attrs().nth(*invoc_attr_index as usize)?;\n+                MacroCallKind::Attr { attr_args: (_, map), invoc_attr_index, .. } => {\n+                    let attr = item\n+                        .doc_comments_and_attrs()\n+                        .nth(*invoc_attr_index as usize)\n+                        .and_then(Either::right)?;\n                     match attr.token_tree() {\n                         Some(token_tree)\n                             if token_tree.syntax().text_range().contains_range(token_range) =>\n@@ -440,9 +444,8 @@ impl ExpansionInfo {\n                             let relative_range =\n                                 token.value.text_range().checked_sub(attr_input_start)?;\n                             // shift by the item's tree's max id\n-                            let token_id = self\n-                                .macro_arg_shift\n-                                .shift(attr_args.1.token_by_range(relative_range)?);\n+                            let token_id =\n+                                self.macro_arg_shift.shift(map.token_by_range(relative_range)?);\n                             Some(token_id)\n                         }\n                         _ => None,"}, {"sha": "470e9a04b32dee398716fa3169d1b9a7fea1263b", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0e95d6125c7d15aad4daa48123afd5d410af7/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=41a0e95d6125c7d15aad4daa48123afd5d410af7", "patch": "@@ -772,6 +772,7 @@ impl ast::HasLoopBody for ast::ForExpr {\n }\n \n impl ast::HasAttrs for ast::AnyHasDocComments {}\n+impl ast::HasDocComments for ast::Item {}\n \n impl From<ast::Adt> for ast::Item {\n     fn from(it: ast::Adt) -> Self {"}]}