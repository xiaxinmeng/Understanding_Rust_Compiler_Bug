{"sha": "2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNTcyNGYwYzQyOGU1MzY0NDAyZDBmZTdiOGU5ZWIzOTk4YTViYzQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T15:05:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T15:05:46Z"}, "message": "Rollup merge of #33926 - jseyfried:fix_derive_span, r=nrc\n\nFix the span of generated `#[derive_*]` attributes\n\nFixes #33571.\nr? @nrc", "tree": {"sha": "2a1c57dbe3c67ec6b32b4fad15ab4ebe55f76487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1c57dbe3c67ec6b32b4fad15ab4ebe55f76487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "html_url": "https://github.com/rust-lang/rust/commit/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653ce3e52575ef716390b93a180d3db0728a67a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/653ce3e52575ef716390b93a180d3db0728a67a0", "html_url": "https://github.com/rust-lang/rust/commit/653ce3e52575ef716390b93a180d3db0728a67a0"}, {"sha": "a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "html_url": "https://github.com/rust-lang/rust/commit/a0e606c380ebd56f3d30501d7ccb94d9f11b9643"}], "stats": {"total": 98, "additions": 38, "deletions": 60}, "files": [{"sha": "d6adec84e8440787716ffbc04e1f14923b3a1847", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "patch": "@@ -201,7 +201,7 @@ use syntax::codemap::{self, respan, DUMMY_SP};\n use syntax::codemap::Span;\n use syntax::errors::Handler;\n use syntax::util::move_map::MoveMap;\n-use syntax::parse::token::{intern, keywords, InternedString};\n+use syntax::parse::token::{keywords, InternedString};\n use syntax::ptr::P;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n@@ -1420,31 +1420,13 @@ impl<'a> MethodDef<'a> {\n \n // general helper methods.\n impl<'a> TraitDef<'a> {\n-    fn set_expn_info(&self,\n-                     cx: &mut ExtCtxt,\n-                     mut to_set: Span) -> Span {\n-        let trait_name = match self.path.path.last() {\n-            None => cx.span_bug(self.span, \"trait with empty path in generic `derive`\"),\n-            Some(name) => *name\n-        };\n-        to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n-            call_site: to_set,\n-            callee: codemap::NameAndSpan {\n-                format: codemap::MacroAttribute(intern(&format!(\"derive({})\", trait_name))),\n-                span: Some(self.span),\n-                allow_internal_unstable: false,\n-            }\n-        });\n-        to_set\n-    }\n-\n     fn summarise_struct(&self,\n                         cx: &mut ExtCtxt,\n                         struct_def: &VariantData) -> StaticFields {\n         let mut named_idents = Vec::new();\n         let mut just_spans = Vec::new();\n         for field in struct_def.fields(){\n-            let sp = self.set_expn_info(cx, field.span);\n+            let sp = Span { expn_id: self.span.expn_id, ..field.span };\n             match field.ident {\n                 Some(ident) => named_idents.push((ident, sp)),\n                 _ => just_spans.push(sp),\n@@ -1486,7 +1468,7 @@ impl<'a> TraitDef<'a> {\n         let mut paths = Vec::new();\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n-            let sp = self.set_expn_info(cx, struct_field.span);\n+            let sp = Span { expn_id: self.span.expn_id, ..struct_field.span };\n             let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n             paths.push(codemap::Spanned{span: sp, node: ident});\n             let val = cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp,ident)));"}, {"sha": "6fb6dee94ed35af77cc9adba72888b10f2084ff6", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "patch": "@@ -16,7 +16,7 @@ use syntax::ext::base::{ExtCtxt, SyntaxEnv, Annotatable};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n-use syntax::codemap::Span;\n+use syntax::codemap::{self, Span};\n use syntax::parse::token::{intern, intern_and_get_ident};\n use syntax::ptr::P;\n \n@@ -94,37 +94,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n             }\n \n             let mut found_partial_eq = false;\n-            let mut found_eq = false;\n-\n-            // This span is **very** sensitive and crucial to\n-            // getting the stability behavior we want. What we are\n-            // doing is marking the generated `#[derive_*]` with the\n-            // span of the `#[deriving(...)]` attribute (the\n-            // entire attribute, not just the `PartialEq` or `Eq`\n-            // part), but with the current backtrace. The current\n-            // backtrace will contain a topmost entry that IS this\n-            // `#[deriving(...)]` attribute and with the\n-            // \"allow-unstable\" flag set to true.\n-            //\n-            // Note that we do NOT use the span of the `Eq`\n-            // text itself. You might think this is\n-            // equivalent, because the `Eq` appears within the\n-            // `#[deriving(Eq)]` attribute, and hence we would\n-            // inherit the \"allows unstable\" from the\n-            // backtrace.  But in fact this is not always the\n-            // case. The actual source text that led to\n-            // deriving can be `#[$attr]`, for example, where\n-            // `$attr == deriving(Eq)`. In that case, the\n-            // \"#[derive_*]\" would be considered to\n-            // originate not from the deriving call but from\n-            // text outside the deriving call, and hence would\n-            // be forbidden from using unstable\n-            // content.\n-            //\n-            // See tests src/run-pass/rfc1445 for\n-            // examples. --nmatsakis\n-            let span = Span { expn_id: cx.backtrace(), .. span };\n-            assert!(cx.parse_sess.codemap().span_allows_unstable(span));\n+            let mut eq_span = None;\n \n             for titem in traits.iter().rev() {\n                 let tname = match titem.node {\n@@ -144,8 +114,19 @@ fn expand_derive(cx: &mut ExtCtxt,\n                     continue;\n                 }\n \n+                let span = Span {\n+                    expn_id: cx.codemap().record_expansion(codemap::ExpnInfo {\n+                        call_site: titem.span,\n+                        callee: codemap::NameAndSpan {\n+                            format: codemap::MacroAttribute(intern(&format!(\"derive({})\", tname))),\n+                            span: Some(titem.span),\n+                            allow_internal_unstable: true,\n+                        },\n+                    }), ..titem.span\n+                };\n+\n                 if &tname[..] == \"Eq\" {\n-                    found_eq = true;\n+                    eq_span = Some(span);\n                 } else if &tname[..] == \"PartialEq\" {\n                     found_partial_eq = true;\n                 }\n@@ -157,12 +138,13 @@ fn expand_derive(cx: &mut ExtCtxt,\n \n             // RFC #1445. `#[derive(PartialEq, Eq)]` adds a (trusted)\n             // `#[structural_match]` attribute.\n-            if found_partial_eq && found_eq {\n-                debug!(\"inserting structural_match with span {:?}\", span);\n-                let structural_match = intern_and_get_ident(\"structural_match\");\n-                item.attrs.push(cx.attribute(span,\n-                                             cx.meta_word(span,\n-                                                          structural_match)));\n+            if let Some(eq_span) = eq_span {\n+                if found_partial_eq {\n+                    let structural_match = intern_and_get_ident(\"structural_match\");\n+                    item.attrs.push(cx.attribute(eq_span,\n+                                                 cx.meta_word(eq_span,\n+                                                              structural_match)));\n+                }\n             }\n \n             item"}, {"sha": "5dfc41c8f4a48f8c4b405be460edbf76a342136a", "filename": "src/test/compile-fail/issue-33571.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Ftest%2Fcompile-fail%2Fissue-33571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4/src%2Ftest%2Fcompile-fail%2Fissue-33571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33571.rs?ref=2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Clone,\n+         Sync, //~ ERROR this unsafe trait should be implemented explicitly\n+         Copy)]\n+enum Foo {}"}]}