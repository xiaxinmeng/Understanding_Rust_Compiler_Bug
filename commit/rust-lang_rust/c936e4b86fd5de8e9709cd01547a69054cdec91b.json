{"sha": "c936e4b86fd5de8e9709cd01547a69054cdec91b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MzZlNGI4NmZkNWRlOGU5NzA5Y2QwMTU0N2E2OTA1NGNkZWM5MWI=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T04:02:39Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:52Z"}, "message": "source_old -> source for cases that can be handled by simple bubbling", "tree": {"sha": "da2e5ac682091deafecc9177b6bfa8e008541bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2e5ac682091deafecc9177b6bfa8e008541bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c936e4b86fd5de8e9709cd01547a69054cdec91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c936e4b86fd5de8e9709cd01547a69054cdec91b", "html_url": "https://github.com/rust-lang/rust/commit/c936e4b86fd5de8e9709cd01547a69054cdec91b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c936e4b86fd5de8e9709cd01547a69054cdec91b/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562e2ee28a4397878accfde014d68ab17d1b504a", "url": "https://api.github.com/repos/rust-lang/rust/commits/562e2ee28a4397878accfde014d68ab17d1b504a", "html_url": "https://github.com/rust-lang/rust/commit/562e2ee28a4397878accfde014d68ab17d1b504a"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "f9a62b9facd54e722696517ed4773c93891c7d50", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=c936e4b86fd5de8e9709cd01547a69054cdec91b", "patch": "@@ -196,8 +196,7 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::Variant) -> Optio\n     let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n-    #[allow(deprecated)]\n-    let pat: ast::Pat = match var.source_old(db).value.kind() {\n+    let pat: ast::Pat = match var.source(db)?.value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             let pats = iter::repeat(make::wildcard_pat().into()).take(field_list.fields().count());\n             make::tuple_struct_pat(path, pats).into()"}, {"sha": "aa6aed9c24c9c18ae329b6a349c5f8a9d986e0fe", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=c936e4b86fd5de8e9709cd01547a69054cdec91b", "patch": "@@ -98,7 +98,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let target_module = parent.module(ctx.db());\n \n     #[allow(deprecated)]\n-    let in_file_source = record_field_def.source_old(ctx.db());\n+    let in_file_source = record_field_def.source(ctx.db())?;\n     let (offset, current_visibility, target) = match in_file_source.value {\n         hir::FieldSource::Named(it) => {\n             let s = it.syntax();\n@@ -151,8 +151,7 @@ fn target_data_for_def(\n         S: HasSource<Ast = Ast>,\n         Ast: AstNode + ast::VisibilityOwner,\n     {\n-        #[allow(deprecated)]\n-        let source = x.source_old(db);\n+        let source = x.source(db)?;\n         let in_file_syntax = source.syntax();\n         let file_id = in_file_syntax.file_id;\n         let syntax = in_file_syntax.value;"}, {"sha": "3c83231cf1c32d8a4ab3cbc83670fa0f919714cd", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=c936e4b86fd5de8e9709cd01547a69054cdec91b", "patch": "@@ -1372,8 +1372,7 @@ impl Impl {\n     }\n \n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+        let src = self.source(db)?;\n         let item = src.file_id.is_builtin_derive(db.upcast())?;\n         let hygenic = hir_expand::hygiene::Hygiene::new(db.upcast(), item.file_id);\n "}, {"sha": "ec0f840e9d726550f3dd9c1c647c0f375c32a917", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=c936e4b86fd5de8e9709cd01547a69054cdec91b", "patch": "@@ -157,22 +157,22 @@ fn missing_record_expr_field_fix(\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n             #[allow(deprecated)]\n-            let source = s.source_old(sema.db);\n+            let source = s.source(sema.db)?;\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;\n             record_field_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n             #[allow(deprecated)]\n-            let source = u.source_old(sema.db);\n+            let source = u.source(sema.db)?;\n             def_file_id = source.file_id;\n             source.value.record_field_list()?\n         }\n         VariantDef::Variant(e) => {\n             module = e.module(sema.db);\n             #[allow(deprecated)]\n-            let source = e.source_old(sema.db);\n+            let source = e.source(sema.db)?;\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;\n             record_field_list(fields)?"}, {"sha": "d2a0cfcd402e0ce48741e8a09924ab141a5d1903", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c936e4b86fd5de8e9709cd01547a69054cdec91b/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c936e4b86fd5de8e9709cd01547a69054cdec91b", "patch": "@@ -207,7 +207,7 @@ fn runnable_action(\n             },\n             ModuleDef::Function(it) => {\n                 #[allow(deprecated)]\n-                let src = it.source_old(sema.db);\n+                let src = it.source(sema.db)?;\n                 if src.file_id != file_id.into() {\n                     mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n                     mark::hit!(hover_macro_generated_struct_fn_doc_attr);\n@@ -332,7 +332,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         }\n         Definition::Field(def) => {\n             #[allow(deprecated)]\n-            let src = def.source_old(db).value;\n+            let src = def.source(db)?.value;\n             if let FieldSource::Named(it) = src {\n                 from_def_source_labeled(db, def, it.short_label(), mod_path)\n             } else {\n@@ -382,7 +382,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         A: ShortLabel,\n     {\n         #[allow(deprecated)]\n-        let short_label = def.source_old(db).value.short_label();\n+        let short_label = def.source(db)?.value.short_label();\n         from_def_source_labeled(db, def, short_label, mod_path)\n     }\n "}]}