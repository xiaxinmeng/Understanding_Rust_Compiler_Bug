{"sha": "4e0e1889990bdf1d6f10c9071144c44eebc80e97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMGUxODg5OTkwYmRmMWQ2ZjEwYzkwNzExNDRjNDRlZWJjODBlOTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T13:59:59Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:03:20Z"}, "message": "Make name resolution handle consts in GenericParamsFromOuterFunction properly", "tree": {"sha": "1725c5b9ebdc5044476c96c8baaaf01579943bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1725c5b9ebdc5044476c96c8baaaf01579943bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0e1889990bdf1d6f10c9071144c44eebc80e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0e1889990bdf1d6f10c9071144c44eebc80e97", "html_url": "https://github.com/rust-lang/rust/commit/4e0e1889990bdf1d6f10c9071144c44eebc80e97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0e1889990bdf1d6f10c9071144c44eebc80e97/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451f1287839451fc097a406fad1a9160c22c280a", "url": "https://api.github.com/repos/rust-lang/rust/commits/451f1287839451fc097a406fad1a9160c22c280a", "html_url": "https://github.com/rust-lang/rust/commit/451f1287839451fc097a406fad1a9160c22c280a"}], "stats": {"total": 213, "additions": 120, "deletions": 93}, "files": [{"sha": "365ba974d5aea53b2b57d09d93b66b31b37e07ce", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -142,8 +142,8 @@ impl Ord for BindingError {\n }\n \n enum ResolutionError<'a> {\n-    /// error E0401: can't use type parameters from outer function\n-    TypeParametersFromOuterFunction(Def),\n+    /// error E0401: can't use type or const parameters from outer function\n+    GenericParamsFromOuterFunction(Def),\n     /// error E0403: the name is already used for a type/const parameter in this list of\n     /// generic parameters\n     NameAlreadyUsedInParameterList(Name, &'a Span),\n@@ -196,13 +196,13 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                                    resolution_error: ResolutionError<'a>)\n                                    -> DiagnosticBuilder<'sess> {\n     match resolution_error {\n-        ResolutionError::TypeParametersFromOuterFunction(outer_def) => {\n+        ResolutionError::GenericParamsFromOuterFunction(outer_def) => {\n             let mut err = struct_span_err!(resolver.session,\n                 span,\n                 E0401,\n-                \"can't use type parameters from outer function\",\n+                \"can't use generic parameters from outer function\",\n             );\n-            err.span_label(span, format!(\"use of type variable from outer function\"));\n+            err.span_label(span, format!(\"use of generic parameter from outer function\"));\n \n             let cm = resolver.session.source_map();\n             match outer_def {\n@@ -231,15 +231,20 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                         err.span_label(span, \"type variable from outer function\");\n                     }\n                 }\n+                Def::ConstParam(def_id) => {\n+                    if let Some(span) = resolver.definitions.opt_span(def_id) {\n+                        err.span_label(span, \"const variable from outer function\");\n+                    }\n+                }\n                 _ => {\n-                    bug!(\"TypeParametersFromOuterFunction should only be used with Def::SelfTy, \\\n+                    bug!(\"GenericParamsFromOuterFunction should only be used with Def::SelfTy, \\\n                          Def::TyParam\");\n                 }\n             }\n \n             // Try to retrieve the span of the function signature and generate a new message with\n             // a local type or const parameter.\n-            let sugg_msg = &format!(\"try using a local type parameter instead\");\n+            let sugg_msg = &format!(\"try using a local generic parameter instead\");\n             if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion(\n@@ -250,9 +255,9 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                 );\n             } else if let Some(sp) = cm.generate_fn_name_span(span) {\n                 err.span_label(sp,\n-                    format!(\"try adding a local type parameter in this method instead\"));\n+                    format!(\"try adding a local generic parameter in this method instead\"));\n             } else {\n-                err.help(&format!(\"try using a local type parameter instead\"));\n+                err.help(&format!(\"try using a local generic parameter instead\"));\n             }\n \n             err\n@@ -549,8 +554,7 @@ impl<'a> PathSource<'a> {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TraitAlias(..) | Def::TyAlias(..) |\n                 Def::AssociatedTy(..) | Def::PrimTy(..) | Def::TyParam(..) |\n-                Def::SelfTy(..) | Def::Existential(..) | Def::ConstParam(..) |\n-                Def::ForeignTy(..) => true,\n+                Def::SelfTy(..) | Def::Existential(..) | Def::ForeignTy(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::No) => match def {\n@@ -803,6 +807,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 _: Span,\n                 node_id: NodeId)\n     {\n+        debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n                 (ItemRibKind, header.asyncness),\n@@ -2053,6 +2058,7 @@ impl<'a> Resolver<'a> {\n         let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n+            debug!(\"walk rib\\n{:?}\", self.ribs[ns][i].bindings);\n             if let Some(def) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Def(\n@@ -4223,14 +4229,33 @@ impl<'a> Resolver<'a> {\n                                 resolve_error(\n                                     self,\n                                     span,\n-                                    ResolutionError::TypeParametersFromOuterFunction(def),\n+                                    ResolutionError::GenericParamsFromOuterFunction(def),\n                                 );\n                             }\n                             return Def::Err;\n                         }\n                     }\n                 }\n             }\n+            Def::ConstParam(..) => {\n+                // A const param is always declared in a signature, which is always followed by\n+                // some kind of function rib kind (specifically, ItemRibKind in the case of a\n+                // normal function), so we can skip the first rib as it will be guaranteed to\n+                // (spuriously) conflict with the const param.\n+                for rib in &ribs[1..] {\n+                    if let ItemRibKind = rib.kind {\n+                        // This was an attempt to use a const parameter outside its scope.\n+                        if record_used {\n+                            resolve_error(\n+                                self,\n+                                span,\n+                                ResolutionError::GenericParamsFromOuterFunction(def),\n+                            );\n+                        }\n+                        return Def::Err;\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n         def"}, {"sha": "e6533ac4b75598586fd0bce26524750390fc5136", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -348,13 +348,14 @@ fn main() {\n \"##,\n \n E0044: r##\"\n-You can't use type parameters on foreign items. Example of erroneous code:\n+You can't use type or const parameters on foreign items.\n+Example of erroneous code:\n \n ```compile_fail,E0044\n extern { fn some_func<T>(x: T); }\n ```\n \n-To fix this, replace the type parameter with the specializations that you\n+To fix this, replace the generic parameter with the specializations that you\n need:\n \n ```"}, {"sha": "d5856c67156c06635901d518c5431af836169b38", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -284,6 +284,7 @@ impl Token {\n         match self {\n             OpenDelim(Brace) => true,\n             Interpolated(ref nt) => match nt.0 {\n+                NtExpr(..) => true,\n                 NtBlock(..) => true,\n                 NtLiteral(..) => true,\n                 _ => false,\n@@ -306,7 +307,7 @@ impl Token {\n         }\n     }\n \n-    /// Returns `true` if the token is any literal, a minus (which can follow a literal,\n+    /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n     crate fn can_begin_literal_or_bool(&self) -> bool {\n         match *self {"}, {"sha": "53dfb13139a54c1093c13be8720f849ce5102314", "filename": "src/test/ui/bad/bad-type-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,4 +1,4 @@\n fn foo<T>() {\n-    fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n+    fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n }\n fn main() { }"}, {"sha": "ce803e96801f9f5c538203c071c3fd60f9e8023c", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/bad-type-env-capture.rs:2:15\n    |\n LL | fn foo<T>() {\n    |        - type variable from outer function\n-LL |     fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n-   |        ---    ^ use of type variable from outer function\n+LL |     fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n+   |        ---    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n error: aborting due to previous error\n "}, {"sha": "27f281ee437867ebbe0fa50b77161bd0bea41a6f", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,26 +1,26 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:4:39\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n-   |        ---------------------------    ^ use of type variable from outer function\n+   |        ---------------------------    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n+   |        help: try using a local generic parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:9:16\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n ...\n LL |     fn baz<U,\n-   |        --- try adding a local type parameter in this method instead\n+   |        --- try adding a local generic parameter in this method instead\n ...\n LL |            (y: T) { //~ ERROR E0401\n-   |                ^ use of type variable from outer function\n+   |                ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:22:25\n    |\n LL | impl<T> Iterator for A<T> {\n@@ -29,7 +29,7 @@ LL | impl<T> Iterator for A<T> {\n LL |         fn helper(sel: &Self) -> u8 { //~ ERROR E0401\n    |                         ^^^^\n    |                         |\n-   |                         use of type variable from outer function\n+   |                         use of generic parameter from outer function\n    |                         use a type here instead\n \n error: aborting due to 3 previous errors"}, {"sha": "c08ccd29d8011bdc8bf08b0e6232732cad439cdf", "filename": "src/test/ui/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -4,7 +4,7 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n \n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n-//~^ ERROR can't use type parameters from outer function\n+//~^ ERROR can't use generic parameters from outer function\n }\n \n fn main() {"}, {"sha": "87fb364954d96b688e004420bebd4e13f929e322", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/inner-static-type-parameter.rs:6:19\n    |\n LL | fn foo<T>() {\n    |    --- - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     static a: Bar<T> = Bar::What;\n-   |                   ^ use of type variable from outer function\n+   |                   ^ use of generic parameter from outer function\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/inner-static-type-parameter.rs:3:10"}, {"sha": "942d6b9a5686e6805951d24144bdeb85f102708d", "filename": "src/test/ui/issues/issue-12796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,7 +1,7 @@\n trait Trait {\n     fn outer(&self) {\n         fn inner(_: &Self) {\n-            //~^ ERROR can't use type parameters from outer function\n+            //~^ ERROR can't use generic parameters from outer function\n         }\n     }\n }"}, {"sha": "a01fd2d65420b277d9bc5490710b4a4c0564c643", "filename": "src/test/ui/issues/issue-12796.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,10 +1,10 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-12796.rs:3:22\n    |\n LL |         fn inner(_: &Self) {\n    |                      ^^^^\n    |                      |\n-   |                      use of type variable from outer function\n+   |                      use of generic parameter from outer function\n    |                      can't use `Self` here\n \n error: aborting due to previous error"}, {"sha": "94ed1fdf7819140caa8bbf13210f642390d83838", "filename": "src/test/ui/issues/issue-3021-c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,8 +1,8 @@\n fn siphash<T>() {\n \n     trait U {\n-        fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-        //~^ ERROR can't use type parameters from outer function\n+        fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+        //~^ ERROR can't use generic parameters from outer function\n     }\n }\n "}, {"sha": "5eadf7837c7d0533a5773a215117529b3319d131", "filename": "src/test/ui/issues/issue-3021-c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,24 +1,24 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:24\n    |\n LL | fn siphash<T>() {\n    |            - type variable from outer function\n ...\n-LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-   |            -           ^ use of type variable from outer function\n+LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+   |            -           ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `g<T>`\n+   |            help: try using a local generic parameter instead: `g<T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:30\n    |\n LL | fn siphash<T>() {\n    |            - type variable from outer function\n ...\n-LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function\n-   |            -                 ^ use of type variable from outer function\n+LL |         fn g(&self, x: T) -> T;  //~ ERROR can't use generic parameters from outer function\n+   |            -                 ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `g<T>`\n+   |            help: try using a local generic parameter instead: `g<T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9a727aa3057977605d7521c8138e09464f65d2f2", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,6 +1,6 @@\n fn foo<T>() {\n     struct Foo {\n-        x: T, //~ ERROR can't use type parameters from outer function\n+        x: T, //~ ERROR can't use generic parameters from outer function\n     }\n \n     impl<T> Drop for Foo<T> {"}, {"sha": "e6526bad3e0d3ac8bb44f3a0d836fa31fefa8e63", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,13 +1,13 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3214.rs:3:12\n    |\n LL | fn foo<T>() {\n    |    --- - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     struct Foo {\n-LL |         x: T, //~ ERROR can't use type parameters from outer function\n-   |            ^ use of type variable from outer function\n+LL |         x: T, //~ ERROR can't use generic parameters from outer function\n+   |            ^ use of generic parameter from outer function\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-3214.rs:6:26"}, {"sha": "3ff4e036c60bec7d1d8f4d0001ef7e53b422da00", "filename": "src/test/ui/issues/issue-5997-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,6 +1,6 @@\n fn f<Z>() -> bool {\n     enum E { V(Z) }\n-    //~^ ERROR can't use type parameters from outer function\n+    //~^ ERROR can't use generic parameters from outer function\n     true\n }\n "}, {"sha": "5c778143e13dd705d32e267c82acead08bdd5470", "filename": "src/test/ui/issues/issue-5997-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-enum.rs:2:16\n    |\n LL | fn f<Z>() -> bool {\n    |    - - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n+   |    try adding a local generic parameter in this method instead\n LL |     enum E { V(Z) }\n-   |                ^ use of type variable from outer function\n+   |                ^ use of generic parameter from outer function\n \n error: aborting due to previous error\n "}, {"sha": "6cf510b0a9d756641a6a8ee3d47ecb7f89dbc4f7", "filename": "src/test/ui/issues/issue-5997-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,5 +1,5 @@\n fn f<T>() -> bool {\n-    struct S(T); //~ ERROR can't use type parameters from outer function\n+    struct S(T); //~ ERROR can't use generic parameters from outer function\n \n     true\n }"}, {"sha": "a60987b3f98ba9279ca9175ad417d4a794fee5c0", "filename": "src/test/ui/issues/issue-5997-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,12 +1,12 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-struct.rs:2:14\n    |\n LL | fn f<T>() -> bool {\n    |    - - type variable from outer function\n    |    |\n-   |    try adding a local type parameter in this method instead\n-LL |     struct S(T); //~ ERROR can't use type parameters from outer function\n-   |              ^ use of type variable from outer function\n+   |    try adding a local generic parameter in this method instead\n+LL |     struct S(T); //~ ERROR can't use generic parameters from outer function\n+   |              ^ use of generic parameter from outer function\n \n error: aborting due to previous error\n "}, {"sha": "85413acdb149166ef51ca696fe39332fe54d70ae", "filename": "src/test/ui/nested-ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't use type parameters from outer function\n+// error-pattern:can't use generic parameters from outer function\n fn hd<U>(v: Vec<U> ) -> U {\n     fn hd1(w: [U]) -> U { return w[0]; }\n "}, {"sha": "37adeffb9b07afb46b8affa88c8ce97aaf7e7714", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,22 +1,22 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:16\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type variable from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---     ^ use of type variable from outer function\n+   |        ---     ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `hd1<U>`\n+   |        help: try using a local generic parameter instead: `hd1<U>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:23\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type variable from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---            ^ use of type variable from outer function\n+   |        ---            ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `hd1<U>`\n+   |        help: try using a local generic parameter instead: `hd1<U>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c77a66524f73f530b9ac3560ee4d7e0d3b86c28a", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -6,29 +6,29 @@ trait TraitA<A> {\n     fn outer(&self) {\n         enum Foo<B> {\n             Variance(A)\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n         }\n     }\n }\n \n trait TraitB<A> {\n     fn outer(&self) {\n         struct Foo<B>(A);\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n \n trait TraitC<A> {\n     fn outer(&self) {\n         struct Foo<B> { a: A }\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n \n trait TraitD<A> {\n     fn outer(&self) {\n         fn foo<B>(a: A) { }\n-                //~^ ERROR can't use type parameters from outer function\n+                //~^ ERROR can't use generic parameters from outer function\n     }\n }\n "}, {"sha": "f6b8abf4057e500f2889c1973ee33c8607a07daa", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,44 +1,44 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:8:22\n    |\n LL | trait TraitA<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         enum Foo<B> {\n LL |             Variance(A)\n-   |                      ^ use of type variable from outer function\n+   |                      ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:16:23\n    |\n LL | trait TraitB<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B>(A);\n-   |                       ^ use of type variable from outer function\n+   |                       ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:23:28\n    |\n LL | trait TraitC<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local type parameter in this method instead\n+   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B> { a: A }\n-   |                            ^ use of type variable from outer function\n+   |                            ^ use of generic parameter from outer function\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:30:22\n    |\n LL | trait TraitD<A> {\n    |              - type variable from outer function\n LL |     fn outer(&self) {\n LL |         fn foo<B>(a: A) { }\n-   |            ------    ^ use of type variable from outer function\n+   |            ------    ^ use of generic parameter from outer function\n    |            |\n-   |            help: try using a local type parameter instead: `foo<B, A>`\n+   |            help: try using a local generic parameter instead: `foo<B, A>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d5b815f6a95e9ab99aef0c315eb654430fb357c9", "filename": "src/test/ui/type/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't use type parameters from outer function\n+// error-pattern:can't use generic parameters from outer function\n fn foo<T>(x: T) {\n     fn bar(f: Box<FnMut(T) -> T>) { }\n }"}, {"sha": "645cbb33abec14a5da176c425bf2bbe24b094a5b", "filename": "src/test/ui/type/type-arg-out-of-scope.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,22 +1,22 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:25\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n-   |        ---              ^ use of type variable from outer function\n+   |        ---              ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:31\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n-   |        ---                    ^ use of type variable from outer function\n+   |        ---                    ^ use of generic parameter from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<T>`\n+   |        help: try using a local generic parameter instead: `bar<T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eccb315feb1e2e126701dc1ef48344a60e6f6fc5", "filename": "src/test/ui/use-self-in-inner-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -4,8 +4,8 @@ impl A {\n //~^ NOTE `Self` type implicitly declared here, by this `impl`\n     fn banana(&mut self) {\n         fn peach(this: &Self) {\n-        //~^ ERROR can't use type parameters from outer function\n-        //~| NOTE use of type variable from outer function\n+        //~^ ERROR can't use generic parameters from outer function\n+        //~| NOTE use of generic parameter from outer function\n         //~| NOTE use a type here instead\n         }\n     }"}, {"sha": "966093499241dfacbcb0664f2cb695bee48f9942", "filename": "src/test/ui/use-self-in-inner-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0e1889990bdf1d6f10c9071144c44eebc80e97/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr?ref=4e0e1889990bdf1d6f10c9071144c44eebc80e97", "patch": "@@ -1,4 +1,4 @@\n-error[E0401]: can't use type parameters from outer function\n+error[E0401]: can't use generic parameters from outer function\n   --> $DIR/use-self-in-inner-fn.rs:6:25\n    |\n LL | impl A {\n@@ -7,7 +7,7 @@ LL | impl A {\n LL |         fn peach(this: &Self) {\n    |                         ^^^^\n    |                         |\n-   |                         use of type variable from outer function\n+   |                         use of generic parameter from outer function\n    |                         use a type here instead\n \n error: aborting due to previous error"}]}