{"sha": "a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2VlZWI1YTBmNGE1ZDI3NGVmN2EwZjQzNGM1ZDE2ZTA5Zjg2NGI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T01:40:33Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in check_and_patch", "tree": {"sha": "22113d386e196c27cec3c4b10f9b75d41e0a83b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22113d386e196c27cec3c4b10f9b75d41e0a83b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b", "html_url": "https://github.com/rust-lang/rust/commit/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59ded8ae06cff30643113ea9b6952b05a25f8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ded8ae06cff30643113ea9b6952b05a25f8d9", "html_url": "https://github.com/rust-lang/rust/commit/b59ded8ae06cff30643113ea9b6952b05a25f8d9"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "6aceeebaea161ab88dd91203a47602330c922c7a", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=a8ceeeb5a0f4a5d274ef7a0f434c5d16e09f864b", "patch": "@@ -214,9 +214,10 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                             None\n                         }).collect();\n \n-                        let opt_src_place = items.first().and_then(|x| x.clone()).map(|x| x.2);\n+                        let opt_src_place = items.first().and_then(|x| *x).map(|x| x.2);\n                         let opt_size = opt_src_place.and_then(|src_place| {\n-                            let src_ty = src_place.ty(body, tcx).ty;\n+                            let src_ty =\n+                                Place::ty_from(src_place.base, src_place.projection, body, tcx).ty;\n                             if let ty::Array(_, ref size_o) = src_ty.sty {\n                                 size_o.assert_usize(tcx)\n                             } else {\n@@ -237,17 +238,17 @@ impl RestoreSubsliceArrayMoveOut {\n     // indices is an integer interval. If all checks pass do the replacent.\n     // items are Vec<Option<LocalUse, index in source array, source place for init local>>\n     fn check_and_patch<'tcx>(candidate: Location,\n-                             items: &[Option<(&LocalUse, u32, Place<'tcx>)>],\n+                             items: &[Option<(&LocalUse, u32, PlaceRef<'_, 'tcx>)>],\n                              opt_size: Option<u64>,\n                              patch: &mut MirPatch<'tcx>,\n                              dst_place: &Place<'tcx>) {\n-        let opt_src_place = items.first().and_then(|x| x.clone()).map(|x| x.2);\n+        let opt_src_place = items.first().and_then(|x| *x).map(|x| x.2);\n \n         if opt_size.is_some() && items.iter().all(\n-            |l| l.is_some() && l.clone().unwrap().2 == opt_src_place.clone().unwrap()) {\n-            let src_place = opt_src_place.clone().unwrap();\n+            |l| l.is_some() && l.unwrap().2 == opt_src_place.unwrap()) {\n+            let src_place = opt_src_place.unwrap();\n \n-            let indices: Vec<_> = items.iter().map(|x| x.clone().unwrap().1).collect();\n+            let indices: Vec<_> = items.iter().map(|x| x.unwrap().1).collect();\n             for i in 1..indices.len() {\n                 if indices[i - 1] + 1 != indices[i] {\n                     return;\n@@ -258,7 +259,7 @@ impl RestoreSubsliceArrayMoveOut {\n             let max = *indices.last().unwrap();\n \n             for item in items {\n-                let locals_use = item.clone().unwrap().0;\n+                let locals_use = item.unwrap().0;\n                 patch.make_nop(locals_use.alive.unwrap());\n                 patch.make_nop(locals_use.dead.unwrap());\n                 patch.make_nop(locals_use.first_use.unwrap());\n@@ -279,7 +280,7 @@ impl RestoreSubsliceArrayMoveOut {\n     }\n \n     fn try_get_item_source<'a, 'tcx>(local_use: &LocalUse,\n-                                     body: &'a Body<'tcx>) -> Option<(u32, Place<'tcx>)> {\n+                                     body: &'a Body<'tcx>) -> Option<(u32, PlaceRef<'a, 'tcx>)> {\n         if let Some(location) = local_use.first_use {\n             let block = &body[location.block];\n             if block.statements.len() > location.statement_index {\n@@ -298,9 +299,9 @@ impl RestoreSubsliceArrayMoveOut {\n                             }\n                         }),\n                     }))) = &statement.kind {\n-                    return Some((*offset, Place {\n-                        base: base.clone(),\n-                        projection: proj_base.clone(),\n+                    return Some((*offset, PlaceRef {\n+                        base,\n+                        projection: proj_base,\n                     }))\n                 }\n             }"}]}