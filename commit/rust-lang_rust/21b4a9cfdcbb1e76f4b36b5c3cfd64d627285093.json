{"sha": "21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "node_id": "C_kwDOAAsO6NoAKDIxYjRhOWNmZGNiYjFlNzZmNGIzNmI1YzNjZmQ2NGQ2MjcyODUwOTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-27T06:21:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-27T06:21:53Z"}, "message": "Auto merge of #92889 - tmiasko:unbounded-recursion, r=ecstatic-morse\n\nIgnore unwinding edges when checking for unconditional recursion\n\nThe unconditional recursion lint determines if all execution paths\neventually lead to a self-recursive call.\n\nThe implementation always follows unwinding edges which limits its\npractical utility. For example, it would not lint function `f` because a\ncall to `g` might unwind. It also wouldn't lint function `h` because an\noverflow check preceding the self-recursive call might unwind:\n\n```rust\npub fn f() {\n    g();\n    f();\n}\n\npub fn g() { /* ... */ }\n\npub fn h(a: usize) {\n  h(a + 1);\n}\n```\n\nTo avoid the issue, assume that terminators that might continue\nexecution along non-unwinding edges do so.\n\nFixes #78474.", "tree": {"sha": "1aa423dc76c9242d2b2b2362307b50516fcf1b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa423dc76c9242d2b2b2362307b50516fcf1b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "html_url": "https://github.com/rust-lang/rust/commit/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563250a65c884c6767dc2ee2e2580360d33d561c", "url": "https://api.github.com/repos/rust-lang/rust/commits/563250a65c884c6767dc2ee2e2580360d33d561c", "html_url": "https://github.com/rust-lang/rust/commit/563250a65c884c6767dc2ee2e2580360d33d561c"}, {"sha": "10b722cc79c52a242d8671243b46e0319296cb30", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b722cc79c52a242d8671243b46e0319296cb30", "html_url": "https://github.com/rust-lang/rust/commit/10b722cc79c52a242d8671243b46e0319296cb30"}], "stats": {"total": 115, "additions": 108, "deletions": 7}, "files": [{"sha": "b21ca6028a221510c20d5a2be8f4bb4507996ef7", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "patch": "@@ -33,6 +33,9 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         if let Some(NonRecursive) = TriColorDepthFirstSearch::new(&body).run_from_start(&mut vis) {\n             return;\n         }\n+        if vis.reachable_recursive_calls.is_empty() {\n+            return;\n+        }\n \n         vis.reachable_recursive_calls.sort();\n \n@@ -148,13 +151,14 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {\n+        let terminator = self.body[bb].terminator();\n+        if terminator.unwind() == Some(&Some(target)) && terminator.successors().count() > 1 {\n+            return true;\n+        }\n         // Don't traverse successors of recursive calls or false CFG edges.\n         match self.body[bb].terminator().kind {\n             TerminatorKind::Call { ref func, .. } => self.is_recursive_call(func),\n-\n-            TerminatorKind::FalseUnwind { unwind: Some(imaginary_target), .. }\n-            | TerminatorKind::FalseEdge { imaginary_target, .. } => imaginary_target == target,\n-\n+            TerminatorKind::FalseEdge { imaginary_target, .. } => imaginary_target == target,\n             _ => false,\n         }\n     }"}, {"sha": "ad052d36f206a9969651fd0177352070306f3241", "filename": "src/test/ui/lint/lint-unconditional-recursion.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs?ref=21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "patch": "@@ -149,4 +149,46 @@ pub fn panics(x: bool) {\n     }\n }\n \n+pub fn unreachable1() {\n+    panic!();\n+    unreachable1(); // WARN unreachable statement\n+}\n+\n+pub fn unreachable2() {\n+    loop {}\n+    unreachable2(); // WARN unreachable statement\n+}\n+\n+pub fn drop_and_replace(mut a: Option<String>) { //~ ERROR function cannot return without recursing\n+    a = None;\n+    drop_and_replace(a);\n+}\n+\n+// Calls are assumed to return normally.\n+pub fn call() -> String { //~ ERROR function cannot return without recursing\n+    let s = String::new();\n+    call();\n+    s\n+}\n+\n+// Arithmetic operations are assumed not to overflow.\n+pub fn overflow_check(a: i32, b: i32) { //~ ERROR function cannot return without recursing\n+    let _ = a + b;\n+    overflow_check(a, b);\n+}\n+\n+pub struct Point {\n+    pub x: f32,\n+    pub y: f32,\n+}\n+\n+impl Default for Point {\n+    fn default() -> Self { //~ ERROR function cannot return without recursing\n+        Point {\n+            x: Default::default(),\n+            ..Default::default()\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "c11b73f41ca80874e29e390d42ec7d2efd32d59a", "filename": "src/test/ui/lint/lint-unconditional-recursion.stderr", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr?ref=21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "patch": "@@ -153,5 +153,49 @@ LL |         self.as_ref()\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: aborting due to 14 previous errors\n+error: function cannot return without recursing\n+  --> $DIR/lint-unconditional-recursion.rs:162:1\n+   |\n+LL | pub fn drop_and_replace(mut a: Option<String>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     a = None;\n+LL |     drop_and_replace(a);\n+   |     ------------------- recursive call site\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: function cannot return without recursing\n+  --> $DIR/lint-unconditional-recursion.rs:168:1\n+   |\n+LL | pub fn call() -> String {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     let s = String::new();\n+LL |     call();\n+   |     ------ recursive call site\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: function cannot return without recursing\n+  --> $DIR/lint-unconditional-recursion.rs:175:1\n+   |\n+LL | pub fn overflow_check(a: i32, b: i32) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     let _ = a + b;\n+LL |     overflow_check(a, b);\n+   |     -------------------- recursive call site\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: function cannot return without recursing\n+  --> $DIR/lint-unconditional-recursion.rs:186:5\n+   |\n+LL |     fn default() -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+...\n+LL |             ..Default::default()\n+   |               ------------------ recursive call site\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "dc25004f89bdbfcc8e56dff29aa1ae2d3b4bf9ed", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     func(&mut iter)\n }\n \n-fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n+fn func<T: Iterator<Item = u8>>(iter: &mut T) { //~ WARN function cannot return without recursing\n     func(&mut iter.map(|x| x + 1))\n }"}, {"sha": "4c8469be6261624309a052a16ea50028914ac214", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "patch": "@@ -1,8 +1,19 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-83150.rs:9:1\n+   |\n+LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     func(&mut iter.map(|x| x + 1))\n+   |     ------------------------------ recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n    = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0275`."}]}