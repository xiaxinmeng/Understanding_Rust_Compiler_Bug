{"sha": "22ddcd1a13082b7be0fc99b720677efd2b733816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGRjZDFhMTMwODJiN2JlMGZjOTliNzIwNjc3ZWZkMmI3MzM4MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T19:00:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T19:00:11Z"}, "message": "Auto merge of #72160 - slo1:libstd-setgroups, r=KodrAus\n\nAdd setgroups to std::os::unix::process::CommandExt\n\nShould fix #38527. I'm not sure groups is the greatest name though.", "tree": {"sha": "2f1353a2d02e579821b1e90e37a0cce9efe4c5cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1353a2d02e579821b1e90e37a0cce9efe4c5cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ddcd1a13082b7be0fc99b720677efd2b733816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ddcd1a13082b7be0fc99b720677efd2b733816", "html_url": "https://github.com/rust-lang/rust/commit/22ddcd1a13082b7be0fc99b720677efd2b733816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ddcd1a13082b7be0fc99b720677efd2b733816/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b814b639836aa76b5c6deaa585367150bb2debf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b814b639836aa76b5c6deaa585367150bb2debf4", "html_url": "https://github.com/rust-lang/rust/commit/b814b639836aa76b5c6deaa585367150bb2debf4"}, {"sha": "a4db851302166616bb5fcbc89f240537a8164d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4db851302166616bb5fcbc89f240537a8164d49", "html_url": "https://github.com/rust-lang/rust/commit/a4db851302166616bb5fcbc89f240537a8164d49"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "724b5dcca6a3604767e5cf423e12c8c5103bb634", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=22ddcd1a13082b7be0fc99b720677efd2b733816", "patch": "@@ -39,6 +39,15 @@ pub trait CommandExt {\n         #[cfg(target_os = \"vxworks\")] id: u16,\n     ) -> &mut process::Command;\n \n+    /// Sets the supplementary group IDs for the calling process. Translates to\n+    /// a `setgroups` call in the child process.\n+    #[unstable(feature = \"setgroups\", issue = \"38527\", reason = \"\")]\n+    fn groups(\n+        &mut self,\n+        #[cfg(not(target_os = \"vxworks\"))] groups: &[u32],\n+        #[cfg(target_os = \"vxworks\")] groups: &[u16],\n+    ) -> &mut process::Command;\n+\n     /// Schedules a closure to be run just before the `exec` function is\n     /// invoked.\n     ///\n@@ -149,6 +158,15 @@ impl CommandExt for process::Command {\n         self\n     }\n \n+    fn groups(\n+        &mut self,\n+        #[cfg(not(target_os = \"vxworks\"))] groups: &[u32],\n+        #[cfg(target_os = \"vxworks\")] groups: &[u16],\n+    ) -> &mut process::Command {\n+        self.as_inner_mut().groups(groups);\n+        self\n+    }\n+\n     unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n     where\n         F: FnMut() -> io::Result<()> + Send + Sync + 'static,"}, {"sha": "a96d4aa6a4555c2d8def7895b654fb057428679f", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=22ddcd1a13082b7be0fc99b720677efd2b733816", "patch": "@@ -87,6 +87,7 @@ pub struct Command {\n     gid: Option<gid_t>,\n     saw_nul: bool,\n     closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,\n+    groups: Option<Box<[gid_t]>>,\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n     stderr: Option<Stdio>,\n@@ -148,6 +149,7 @@ impl Command {\n             gid: None,\n             saw_nul,\n             closures: Vec::new(),\n+            groups: None,\n             stdin: None,\n             stdout: None,\n             stderr: None,\n@@ -183,6 +185,9 @@ impl Command {\n     pub fn gid(&mut self, id: gid_t) {\n         self.gid = Some(id);\n     }\n+    pub fn groups(&mut self, groups: &[gid_t]) {\n+        self.groups = Some(Box::from(groups));\n+    }\n \n     pub fn saw_nul(&self) -> bool {\n         self.saw_nul\n@@ -226,6 +231,10 @@ impl Command {\n     pub fn get_gid(&self) -> Option<gid_t> {\n         self.gid\n     }\n+    #[allow(dead_code)]\n+    pub fn get_groups(&self) -> Option<&[gid_t]> {\n+        self.groups.as_deref()\n+    }\n \n     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {\n         &mut self.closures"}, {"sha": "2746f87468dca3f2d4f35dfd3949c6007d2d9f0e", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ddcd1a13082b7be0fc99b720677efd2b733816/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=22ddcd1a13082b7be0fc99b720677efd2b733816", "patch": "@@ -183,20 +183,26 @@ impl Command {\n \n         #[cfg(not(target_os = \"l4re\"))]\n         {\n+            if let Some(_g) = self.get_groups() {\n+                //FIXME: Redox kernel does not support setgroups yet\n+                #[cfg(not(target_os = \"redox\"))]\n+                cvt(libc::setgroups(_g.len().try_into().unwrap(), _g.as_ptr()))?;\n+            }\n             if let Some(u) = self.get_gid() {\n                 cvt(libc::setgid(u as gid_t))?;\n             }\n             if let Some(u) = self.get_uid() {\n                 // When dropping privileges from root, the `setgroups` call\n-                // will remove any extraneous groups. If we don't call this,\n-                // then even though our uid has dropped, we may still have\n-                // groups that enable us to do super-user things. This will\n-                // fail if we aren't root, so don't bother checking the\n-                // return value, this is just done as an optimistic\n-                // privilege dropping function.\n+                // will remove any extraneous groups. We only drop groups\n+                // if the current uid is 0 and we weren't given an explicit\n+                // set of groups. If we don't call this, then even though our\n+                // uid has dropped, we may still have groups that enable us to\n+                // do super-user things.\n                 //FIXME: Redox kernel does not support setgroups yet\n                 #[cfg(not(target_os = \"redox\"))]\n-                let _ = libc::setgroups(0, ptr::null());\n+                if libc::getuid() == 0 && self.get_groups().is_none() {\n+                    cvt(libc::setgroups(0, ptr::null()))?;\n+                }\n                 cvt(libc::setuid(u as uid_t))?;\n             }\n         }\n@@ -287,6 +293,7 @@ impl Command {\n             || self.get_uid().is_some()\n             || (self.env_saw_path() && !self.program_is_path())\n             || !self.get_closures().is_empty()\n+            || self.get_groups().is_some()\n         {\n             return Ok(None);\n         }"}, {"sha": "28f2bfdd3a7760b5cbfeb594e397bce28d1ca5b4", "filename": "src/test/ui/command/command-setgroups.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22ddcd1a13082b7be0fc99b720677efd2b733816/src%2Ftest%2Fui%2Fcommand%2Fcommand-setgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ddcd1a13082b7be0fc99b720677efd2b733816/src%2Ftest%2Fui%2Fcommand%2Fcommand-setgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-setgroups.rs?ref=22ddcd1a13082b7be0fc99b720677efd2b733816", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+// ignore-windows - this is a unix-specific test\n+// ignore-cloudabi\n+// ignore-emscripten\n+// ignore-sgx\n+\n+#![feature(rustc_private)]\n+#![feature(setgroups)]\n+\n+extern crate libc;\n+use std::process::Command;\n+use std::os::unix::process::CommandExt;\n+\n+fn main() {\n+    #[cfg(unix)]\n+    run()\n+}\n+\n+#[cfg(unix)]\n+fn run() {\n+    let max_ngroups = unsafe { libc::sysconf(libc::_SC_NGROUPS_MAX) };\n+    let max_ngroups = max_ngroups as u32 + 1;\n+    let vec: Vec<u32> = (0..max_ngroups).collect();\n+    let p = Command::new(\"/bin/id\").groups(&vec[..]).spawn();\n+    assert!(p.is_err());\n+}"}]}