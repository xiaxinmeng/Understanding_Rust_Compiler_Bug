{"sha": "fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmU1Mjk5YzMzMzJiOTlmY2QwOWZkNTRlOGQ4MTJhNmMzNGIwY2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-17T12:21:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T18:28:27Z"}, "message": "Add snippet support for some assists", "tree": {"sha": "6233bfe360945ad942c481ede65a109d08196283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6233bfe360945ad942c481ede65a109d08196283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "html_url": "https://github.com/rust-lang/rust/commit/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c847c079fd66d7ed09c64ff398baf05317b16500", "url": "https://api.github.com/repos/rust-lang/rust/commits/c847c079fd66d7ed09c64ff398baf05317b16500", "html_url": "https://github.com/rust-lang/rust/commit/c847c079fd66d7ed09c64ff398baf05317b16500"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "fa70c849684a625b70989b0684358911f664ba0c", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "patch": "@@ -25,7 +25,7 @@ use crate::{\n // struct S;\n //\n // impl Debug for S {\n-//\n+//     $0\n // }\n // ```\n pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -52,7 +52,7 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         format!(\"Add custom impl `{}` for `{}`\", trait_token.text().as_str(), annotated_name);\n \n     let target = attr.syntax().text_range();\n-    acc.add(AssistId(\"add_custom_impl\"), label, target, |edit| {\n+    acc.add(AssistId(\"add_custom_impl\"), label, target, |builder| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()\n@@ -63,35 +63,36 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         let has_more_derives = !new_attr_input.is_empty();\n         let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n \n-        let mut buf = String::new();\n-        buf.push_str(\"\\n\\nimpl \");\n-        buf.push_str(trait_token.text().as_str());\n-        buf.push_str(\" for \");\n-        buf.push_str(annotated_name.as_str());\n-        buf.push_str(\" {\\n\");\n-\n-        let cursor_delta = if has_more_derives {\n-            let delta = input.syntax().text_range().len() - TextSize::of(&new_attr_input);\n-            edit.replace(input.syntax().text_range(), new_attr_input);\n-            delta\n+        if has_more_derives {\n+            builder.replace(input.syntax().text_range(), new_attr_input);\n         } else {\n             let attr_range = attr.syntax().text_range();\n-            edit.delete(attr_range);\n+            builder.delete(attr_range);\n \n             let line_break_range = attr\n                 .syntax()\n                 .next_sibling_or_token()\n                 .filter(|t| t.kind() == WHITESPACE)\n                 .map(|t| t.text_range())\n                 .unwrap_or_else(|| TextRange::new(TextSize::from(0), TextSize::from(0)));\n-            edit.delete(line_break_range);\n-\n-            attr_range.len() + line_break_range.len()\n-        };\n-\n-        edit.set_cursor(start_offset + TextSize::of(&buf) - cursor_delta);\n-        buf.push_str(\"\\n}\");\n-        edit.insert(start_offset, buf);\n+            builder.delete(line_break_range);\n+        }\n+\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                builder.insert_snippet(\n+                    cap,\n+                    start_offset,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_token, annotated_name),\n+                );\n+            }\n+            None => {\n+                builder.insert(\n+                    start_offset,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_token, annotated_name),\n+                );\n+            }\n+        }\n     })\n }\n \n@@ -117,7 +118,7 @@ struct Foo {\n }\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )\n@@ -139,7 +140,7 @@ pub struct Foo {\n }\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )\n@@ -158,7 +159,7 @@ struct Foo {}\n struct Foo {}\n \n impl Debug for Foo {\n-<|>\n+    $0\n }\n             \",\n         )"}, {"sha": "b123b84988cf4e730a9a68b1488b69ddc16463dd", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "patch": "@@ -18,31 +18,37 @@ use crate::{AssistContext, AssistId, Assists};\n // ```\n // ->\n // ```\n-// #[derive()]\n+// #[derive($0)]\n // struct Point {\n //     x: u32,\n //     y: u32,\n // }\n // ```\n pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let cap = ctx.config.snippet_cap?;\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |edit| {\n+    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())\n             .filter(|(name, _arg)| name == \"derive\")\n             .map(|(_name, arg)| arg)\n             .next();\n-        let offset = match derive_attr {\n+        match derive_attr {\n             None => {\n-                edit.insert(node_start, \"#[derive()]\\n\");\n-                node_start + TextSize::of(\"#[derive(\")\n+                builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n+            }\n+            Some(tt) => {\n+                // Just move the cursor.\n+                builder.insert_snippet(\n+                    cap,\n+                    tt.syntax().text_range().end() - TextSize::of(')'),\n+                    \"$0\",\n+                )\n             }\n-            Some(tt) => tt.syntax().text_range().end() - TextSize::of(')'),\n         };\n-        edit.set_cursor(offset)\n     })\n }\n \n@@ -66,12 +72,12 @@ mod tests {\n         check_assist(\n             add_derive,\n             \"struct Foo { a: i32, <|>}\",\n-            \"#[derive(<|>)]\\nstruct Foo { a: i32, }\",\n+            \"#[derive($0)]\\nstruct Foo { a: i32, }\",\n         );\n         check_assist(\n             add_derive,\n             \"struct Foo { <|> a: i32, }\",\n-            \"#[derive(<|>)]\\nstruct Foo {  a: i32, }\",\n+            \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n         );\n     }\n \n@@ -80,7 +86,7 @@ mod tests {\n         check_assist(\n             add_derive,\n             \"#[derive(Clone)]\\nstruct Foo { a: i32<|>, }\",\n-            \"#[derive(Clone<|>)]\\nstruct Foo { a: i32, }\",\n+            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n         );\n     }\n \n@@ -96,7 +102,7 @@ struct Foo { a: i32<|>, }\n             \"\n /// `Foo` is a pretty important struct.\n /// It does stuff.\n-#[derive(<|>)]\n+#[derive($0)]\n struct Foo { a: i32, }\n             \",\n         );"}, {"sha": "eceba7d0ae671c11d8de5cb7aa29892762a2e4f7", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "patch": "@@ -1,7 +1,4 @@\n-use ra_syntax::{\n-    ast::{self, AstNode, NameOwner, TypeParamsOwner},\n-    TextSize,\n-};\n+use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n use stdx::{format_to, SepBy};\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -12,17 +9,17 @@ use crate::{AssistContext, AssistId, Assists};\n //\n // ```\n // struct Ctx<T: Clone> {\n-//      data: T,<|>\n+//     data: T,<|>\n // }\n // ```\n // ->\n // ```\n // struct Ctx<T: Clone> {\n-//      data: T,\n+//     data: T,\n // }\n //\n // impl<T: Clone> Ctx<T> {\n-//\n+//     $0\n // }\n // ```\n pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -50,30 +47,37 @@ pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n             format_to!(buf, \"<{}>\", generic_params)\n         }\n-        buf.push_str(\" {\\n\");\n-        edit.set_cursor(start_offset + TextSize::of(&buf));\n-        buf.push_str(\"\\n}\");\n-        edit.insert(start_offset, buf);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                buf.push_str(\" {\\n    $0\\n}\");\n+                edit.insert_snippet(cap, start_offset, buf);\n+            }\n+            None => {\n+                buf.push_str(\" {\\n}\");\n+                edit.insert(start_offset, buf);\n+            }\n+        }\n     })\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::tests::{check_assist, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_add_impl() {\n-        check_assist(add_impl, \"struct Foo {<|>}\\n\", \"struct Foo {}\\n\\nimpl Foo {\\n<|>\\n}\\n\");\n+        check_assist(add_impl, \"struct Foo {<|>}\\n\", \"struct Foo {}\\n\\nimpl Foo {\\n    $0\\n}\\n\");\n         check_assist(\n             add_impl,\n             \"struct Foo<T: Clone> {<|>}\",\n-            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n<|>\\n}\",\n+            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n    $0\\n}\",\n         );\n         check_assist(\n             add_impl,\n             \"struct Foo<'a, T: Foo<'a>> {<|>}\",\n-            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n<|>\\n}\",\n+            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n         );\n     }\n "}, {"sha": "9487c9239f010f8e7131682170bd92eb6131a227", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "patch": "@@ -15,7 +15,7 @@ struct S;\n struct S;\n \n impl Debug for S {\n-\n+    $0\n }\n \"#####,\n     )\n@@ -32,7 +32,7 @@ struct Point {\n }\n \"#####,\n         r#####\"\n-#[derive()]\n+#[derive($0)]\n struct Point {\n     x: u32,\n     y: u32,\n@@ -108,16 +108,16 @@ fn doctest_add_impl() {\n         \"add_impl\",\n         r#####\"\n struct Ctx<T: Clone> {\n-     data: T,<|>\n+    data: T,<|>\n }\n \"#####,\n         r#####\"\n struct Ctx<T: Clone> {\n-     data: T,\n+    data: T,\n }\n \n impl<T: Clone> Ctx<T> {\n-\n+    $0\n }\n \"#####,\n     )"}, {"sha": "41c5df5287c3f6e335517523de9469d233a288ee", "filename": "docs/user/assists.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "patch": "@@ -17,7 +17,7 @@ struct S;\n struct S;\n \n impl Debug for S {\n-\n+    $0\n }\n ```\n \n@@ -33,7 +33,7 @@ struct Point {\n }\n \n // AFTER\n-#[derive()]\n+#[derive($0)]\n struct Point {\n     x: u32,\n     y: u32,\n@@ -105,16 +105,16 @@ Adds a new inherent impl for a type.\n ```rust\n // BEFORE\n struct Ctx<T: Clone> {\n-     data: T,\u2503\n+    data: T,\u2503\n }\n \n // AFTER\n struct Ctx<T: Clone> {\n-     data: T,\n+    data: T,\n }\n \n impl<T: Clone> Ctx<T> {\n-\n+    $0\n }\n ```\n "}]}