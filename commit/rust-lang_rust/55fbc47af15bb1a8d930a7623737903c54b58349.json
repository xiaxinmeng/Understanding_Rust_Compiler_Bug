{"sha": "55fbc47af15bb1a8d930a7623737903c54b58349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZmJjNDdhZjE1YmIxYThkOTMwYTc2MjM3Mzc5MDNjNTRiNTgzNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T16:18:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T16:18:59Z"}, "message": "auto merge of #6148 : erickt/rust/remove-drop, r=pcwalton\n\nThe drop block has been deprecated for quite some time. This patch series removes support for parsing it and all the related machinery that made drop work.\r\n\r\nAs a side feature of all this, I also added the ability to annote fields in structs. This allows comments to be properly associated with an individual field. However, I didn't update `rustdoc` to integrate these comment blocks into the documentation it generates.", "tree": {"sha": "5b2f63c6b21287b5e42932ee9ca8b5b9659bdfb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b2f63c6b21287b5e42932ee9ca8b5b9659bdfb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55fbc47af15bb1a8d930a7623737903c54b58349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55fbc47af15bb1a8d930a7623737903c54b58349", "html_url": "https://github.com/rust-lang/rust/commit/55fbc47af15bb1a8d930a7623737903c54b58349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55fbc47af15bb1a8d930a7623737903c54b58349/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67239fac3cc521fedaf14faf5357beab78caea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67239fac3cc521fedaf14faf5357beab78caea8", "html_url": "https://github.com/rust-lang/rust/commit/f67239fac3cc521fedaf14faf5357beab78caea8"}, {"sha": "7c9d089ee732c2930898574d9ecedbb01efe0eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9d089ee732c2930898574d9ecedbb01efe0eb9", "html_url": "https://github.com/rust-lang/rust/commit/7c9d089ee732c2930898574d9ecedbb01efe0eb9"}], "stats": {"total": 879, "additions": 148, "deletions": 731}, "files": [{"sha": "b29e1c77be35ef088a12ae1356edeb155630d55d", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -82,14 +82,13 @@ pub fn load_props(testfile: &Path) -> TestProps {\n }\n \n pub fn is_test_ignored(config: config, testfile: &Path) -> bool {\n-    let mut found = false;\n     for iter_header(testfile) |ln| {\n         if parse_name_directive(ln, ~\"xfail-test\") { return true; }\n         if parse_name_directive(ln, xfail_target()) { return true; }\n         if config.mode == common::mode_pretty &&\n            parse_name_directive(ln, ~\"xfail-pretty\") { return true; }\n     };\n-    return found;\n+    return true;\n \n     fn xfail_target() -> ~str {\n         ~\"xfail-\" + str::from_slice(os::SYSNAME)"}, {"sha": "5805c1730296cadeeaed5572ef3094aab0bca2d4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -106,7 +106,7 @@ fn run_rpass_test(config: config, props: TestProps, testfile: &Path) {\n             fatal_ProcRes(~\"test run failed!\", ProcRes);\n         }\n     } else {\n-        let mut ProcRes = jit_test(config, props, testfile);\n+        let ProcRes = jit_test(config, props, testfile);\n \n         if ProcRes.status != 0 { fatal_ProcRes(~\"jit failed!\", ProcRes); }\n     }"}, {"sha": "9a0419ebfc6b2ff3bbc4437d6f524766ace3a9cd", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -63,7 +63,6 @@ they contained the following prologue:\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n #[allow(deprecated_mutable_fields)];\n-#[allow(deprecated_drop)];\n \n // Make core testable by not duplicating lang items. See #2912\n #[cfg(test)] extern mod realcore(name = \"core\", vers = \"0.7-pre\");"}, {"sha": "145997fcb4bd533844b0a4465b68148704218991", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -86,7 +86,9 @@ use cast::{forget, transmute, transmute_copy};\n use either::{Either, Left, Right};\n use kinds::Owned;\n use libc;\n+use ops::Drop;\n use option::{None, Option, Some};\n+use unstable::finally::Finally;\n use unstable::intrinsics;\n use ptr;\n use task;\n@@ -395,26 +397,22 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n     let p_ = p.unwrap();\n     let p = unsafe { &*p_ };\n \n-    #[unsafe_destructor]\n-    struct DropState<'self> {\n-        p: &'self PacketHeader,\n-\n-        drop {\n-            unsafe {\n-                if task::failing() {\n-                    self.p.state = Terminated;\n-                    let old_task = swap_task(&mut self.p.blocked_task,\n-                                             ptr::null());\n-                    if !old_task.is_null() {\n-                        rustrt::rust_task_deref(old_task);\n-                    }\n+    do (|| {\n+        try_recv_(p)\n+    }).finally {\n+        unsafe {\n+            if task::failing() {\n+                p.header.state = Terminated;\n+                let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n+                if !old_task.is_null() {\n+                    rustrt::rust_task_deref(old_task);\n                 }\n             }\n         }\n-    };\n-\n-    let _drop_state = DropState { p: &p.header };\n+    }\n+}\n \n+fn try_recv_<T:Owned>(p: &Packet<T>) -> Option<T> {\n     // optimistic path\n     match p.header.state {\n       Full => {\n@@ -451,7 +449,7 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n                                        Blocked);\n         match old_state {\n           Empty => {\n-            debug!(\"no data available on %?, going to sleep.\", p_);\n+            debug!(\"no data available on %?, going to sleep.\", p);\n             if count == 0 {\n                 wait_event(this);\n             }"}, {"sha": "111c201d5023c014fb5def517bc8f12cf47bf4f8", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -100,7 +100,6 @@ pub static tag_mod_impl_trait: uint = 0x47u;\n   different tags.\n  */\n pub static tag_item_impl_method: uint = 0x48u;\n-pub static tag_item_dtor: uint = 0x49u;\n pub static tag_item_trait_method_self_ty: uint = 0x4b;\n pub static tag_item_trait_method_self_ty_region: uint = 0x4c;\n "}, {"sha": "f8dc34f9cee3a6f446b085584e5080d985dae3ca", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -230,13 +230,6 @@ pub fn get_impl_method(cstore: @mut cstore::CStore,\n     decoder::get_impl_method(cstore.intr, cdata, def.node, mname)\n }\n \n-/* If def names a class with a dtor, return it. Otherwise, return none. */\n-pub fn struct_dtor(cstore: @mut cstore::CStore, def: ast::def_id)\n-    -> Option<ast::def_id> {\n-    let cdata = cstore::get_crate_data(cstore, def.crate);\n-    decoder::struct_dtor(cdata, def.node)\n-}\n-\n pub fn get_item_visibility(cstore: @mut cstore::CStore,\n                            def_id: ast::def_id)\n                         -> ast::visibility {"}, {"sha": "fb7b3f9c8b129b604f8b4ae8c567b1eb18b402f8", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -445,22 +445,6 @@ pub fn get_impl_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     found.get()\n }\n \n-pub fn struct_dtor(cdata: cmd, id: ast::node_id) -> Option<ast::def_id> {\n-    let items = reader::get_doc(reader::Doc(cdata.data), tag_items);\n-    let mut found = None;\n-    let cls_items = match maybe_find_item(id, items) {\n-            Some(it) => it,\n-            None     => fail!(fmt!(\"struct_dtor: class id not found \\\n-              when looking up dtor for %d\", id))\n-    };\n-    for reader::tagged_docs(cls_items, tag_item_dtor) |doc| {\n-         let doc1 = reader::get_doc(doc, tag_def_id);\n-         let did = reader::with_doc_data(doc1, |d| parse_def_id(d));\n-         found = Some(translate_def_id(cdata, did));\n-    };\n-    found\n-}\n-\n pub fn get_symbol(data: @~[u8], id: ast::node_id) -> ~str {\n     return item_symbol(lookup_item(id, data));\n }"}, {"sha": "ba6a4f30857eb79ab22b6a320a1852d45c545d01", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -765,26 +765,6 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: &writer::Encoder,\n            class itself */\n         let idx = encode_info_for_struct(ecx, ebml_w, path,\n                                          struct_def.fields, index);\n-        /* Encode the dtor */\n-        for struct_def.dtor.each |dtor| {\n-            index.push(entry {val: dtor.node.id, pos: ebml_w.writer.tell()});\n-          encode_info_for_ctor(ecx,\n-                               ebml_w,\n-                               dtor.node.id,\n-                               ecx.tcx.sess.ident_of(\n-                                   *ecx.tcx.sess.str_of(item.ident) +\n-                                   ~\"_dtor\"),\n-                               path,\n-                               if generics.ty_params.len() > 0u {\n-                                   Some(ii_dtor(copy *dtor,\n-                                                item.ident,\n-                                                copy *generics,\n-                                                local_def(item.id))) }\n-                               else {\n-                                   None\n-                               },\n-                               generics);\n-        }\n \n         /* Index the class*/\n         add_to_index();\n@@ -816,13 +796,6 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: &writer::Encoder,\n         encode_name(ecx, ebml_w, item.ident);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         encode_region_param(ecx, ebml_w, item);\n-        /* Encode the dtor */\n-        /* Encode id for dtor */\n-        for struct_def.dtor.each |dtor| {\n-            do ebml_w.wr_tag(tag_item_dtor) {\n-                encode_def_id(ebml_w, local_def(dtor.node.id));\n-            }\n-        };\n \n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_trait_method"}, {"sha": "2f753523a7bc089fdf2b371fef969aab65029d68", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -327,15 +327,6 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n       ast::ii_foreign(i) => {\n         ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n-      ast::ii_dtor(ref dtor, nm, ref tps, parent_id) => {\n-        let dtor_body = fld.fold_block(&dtor.node.body);\n-        ast::ii_dtor(\n-            codemap::spanned {\n-                node: ast::struct_dtor_ { body: dtor_body,\n-                                          .. /*bad*/copy (*dtor).node },\n-                .. (/*bad*/copy *dtor) },\n-            nm, /*bad*/copy *tps, parent_id)\n-      }\n     }\n }\n \n@@ -363,23 +354,6 @@ fn renumber_ast(xcx: @ExtendedDecodeContext, ii: ast::inlined_item)\n       ast::ii_foreign(i) => {\n         ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n-      ast::ii_dtor(ref dtor, nm, ref generics, parent_id) => {\n-        let dtor_body = fld.fold_block(&dtor.node.body);\n-        let dtor_attrs = fld.fold_attributes(/*bad*/copy (*dtor).node.attrs);\n-        let new_generics = fold::fold_generics(generics, fld);\n-        let dtor_id = fld.new_id((*dtor).node.id);\n-        let new_parent = xcx.tr_def_id(parent_id);\n-        let new_self = fld.new_id((*dtor).node.self_id);\n-        ast::ii_dtor(\n-            codemap::spanned {\n-                node: ast::struct_dtor_ { id: dtor_id,\n-                                          attrs: dtor_attrs,\n-                                          self_id: new_self,\n-                                          body: dtor_body },\n-                .. (/*bad*/copy *dtor)\n-            },\n-            nm, new_generics, new_parent)\n-      }\n      }\n }\n "}, {"sha": "526a5a3a9dd4ca10a6cf1e378ec3ef28a4f571bb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -629,8 +629,7 @@ fn check_loans_in_fn(fk: &visit::fn_kind,\n \n     let declared_purity, src;\n     match *fk {\n-        visit::fk_item_fn(*) | visit::fk_method(*) |\n-        visit::fk_dtor(*) => {\n+        visit::fk_item_fn(*) | visit::fk_method(*) => {\n             declared_purity = ty::ty_fn_purity(fty);\n             src = id;\n         }\n@@ -658,8 +657,7 @@ fn check_loans_in_fn(fk: &visit::fn_kind,\n                     // inherits the fn_args from enclosing ctxt\n                 }\n                 visit::fk_anon(*) | visit::fk_fn_block(*) |\n-                visit::fk_method(*) | visit::fk_item_fn(*) |\n-                visit::fk_dtor(*) => {\n+                visit::fk_method(*) | visit::fk_item_fn(*) => {\n                     let mut fn_args = ~[];\n                     for decl.inputs.each |input| {\n                         // For the purposes of purity, only consider function-"}, {"sha": "da04853411865cedfe53539d56496f61dc2f1c12", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -104,8 +104,7 @@ fn req_loans_in_fn(fk: &visit::fn_kind,\n \n     match *fk {\n         visit::fk_anon(*) | visit::fk_fn_block(*) => {}\n-        visit::fk_item_fn(*) | visit::fk_method(*) |\n-        visit::fk_dtor(*) => {\n+        visit::fk_item_fn(*) | visit::fk_method(*) => {\n             self.item_ub = body.node.id;\n         }\n     }"}, {"sha": "0925e8cdd637593c88128944f109d03c2684e2bd", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -153,17 +153,6 @@ fn check_item(item: @item, cx: Context, visitor: visit::vt<Context>) {\n                     }\n                 }\n             }\n-            item_struct(struct_def, _) => {\n-                match struct_def.dtor {\n-                    None => {}\n-                    Some(ref dtor) => {\n-                        let struct_did = def_id { crate: 0, node: item.id };\n-                        check_struct_safe_for_destructor(cx,\n-                                                         dtor.span,\n-                                                         struct_did);\n-                    }\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "b67d74bc272b6fa328a91a1061e38819b42b96d9", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -57,7 +57,6 @@ pub enum lint {\n     type_limits,\n     default_methods,\n     deprecated_mutable_fields,\n-    deprecated_drop,\n     unused_unsafe,\n \n     managed_heap_memory,\n@@ -210,13 +209,6 @@ pub fn get_lint_dict() -> LintDict {\n             default: deny\n         }),\n \n-        (~\"deprecated_drop\",\n-         LintSpec {\n-            lint: deprecated_drop,\n-            desc: \"deprecated \\\"drop\\\" notation for the destructor\",\n-            default: deny\n-        }),\n-\n         (~\"unused_unsafe\",\n          LintSpec {\n             lint: unused_unsafe,\n@@ -463,7 +455,6 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n     check_item_deprecated_mutable_fields(cx, i);\n-    check_item_deprecated_drop(cx, i);\n     check_item_unused_unsafe(cx, i);\n     check_item_unused_mut(cx, i);\n }\n@@ -668,26 +659,6 @@ fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n-fn check_item_deprecated_drop(cx: ty::ctxt, item: @ast::item) {\n-    match item.node {\n-        ast::item_struct(struct_def, _) => {\n-            match struct_def.dtor {\n-                None => {}\n-                Some(ref dtor) => {\n-                    cx.sess.span_lint(deprecated_drop,\n-                                      item.id,\n-                                      item.id,\n-                                      dtor.span,\n-                                      ~\"`drop` notation for destructors is \\\n-                                        deprecated; implement the `Drop` \\\n-                                        trait instead\");\n-                }\n-            }\n-        }\n-        _ => {}\n-    }\n-}\n-\n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,"}, {"sha": "0df10c59a8aac7ffbb4dfa280d51475684655dde", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -117,7 +117,7 @@ use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::{expr_to_str, block_to_str};\n-use syntax::visit::{fk_anon, fk_dtor, fk_fn_block, fk_item_fn, fk_method};\n+use syntax::visit::{fk_anon, fk_fn_block, fk_item_fn, fk_method};\n use syntax::visit::{vt};\n use syntax::{visit, ast_util};\n \n@@ -440,9 +440,6 @@ fn visit_fn(fk: &visit::fn_kind,\n                 sty_static => {}\n             }\n         }\n-        fk_dtor(_, _, self_id, _) => {\n-            fn_maps.add_variable(Arg(self_id, special_idents::self_));\n-        }\n         fk_item_fn(*) | fk_anon(*) | fk_fn_block(*) => {}\n     }\n "}, {"sha": "88e201fb5f4385de044ce49b849109f33915e426", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -438,8 +438,7 @@ pub fn resolve_fn(fk: &visit::fn_kind,\n                   cx: ctxt,\n                   visitor: visit::vt<ctxt>) {\n     let fn_cx = match *fk {\n-        visit::fk_item_fn(*) | visit::fk_method(*) |\n-        visit::fk_dtor(*) => {\n+        visit::fk_item_fn(*) | visit::fk_method(*) => {\n             // Top-level functions are a root scope.\n             ctxt {parent: Some(id),.. cx}\n         }"}, {"sha": "2773710ca98fc13dc6e9de31b1c716db1bf06387", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -47,7 +47,7 @@ use syntax::ast::{named_field, ne, neg, node_id, pat, pat_enum, pat_ident};\n use syntax::ast::{Path, pat_lit, pat_range, pat_struct};\n use syntax::ast::{prim_ty, private, provided};\n use syntax::ast::{public, required, rem, self_ty_, shl, shr, stmt_decl};\n-use syntax::ast::{struct_dtor, struct_field, struct_variant_kind};\n+use syntax::ast::{struct_field, struct_variant_kind};\n use syntax::ast::{sty_static, subtract, trait_ref, tuple_variant_kind, Ty};\n use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, TyParam, ty_path};\n@@ -3512,7 +3512,6 @@ pub impl Resolver {\n                 self.resolve_struct(item.id,\n                                     generics,\n                                     struct_def.fields,\n-                                    &struct_def.dtor,\n                                     visitor);\n             }\n \n@@ -3770,7 +3769,6 @@ pub impl Resolver {\n                       id: node_id,\n                       generics: &Generics,\n                       fields: &[@struct_field],\n-                      optional_destructor: &Option<struct_dtor>,\n                       visitor: ResolveVisitor) {\n         // If applicable, create a rib for the type parameters.\n         do self.with_type_parameter_rib(HasTypeParameters\n@@ -3784,23 +3782,6 @@ pub impl Resolver {\n             for fields.each |field| {\n                 self.resolve_type(field.node.ty, visitor);\n             }\n-\n-            // Resolve the destructor, if applicable.\n-            match *optional_destructor {\n-                None => {\n-                    // Nothing to do.\n-                }\n-                Some(ref destructor) => {\n-                    self.resolve_function(NormalRibKind,\n-                                          None,\n-                                          NoTypeParameters,\n-                                          &destructor.node.body,\n-                                          HasSelfBinding\n-                                            ((*destructor).node.self_id,\n-                                             true),\n-                                          visitor);\n-                }\n-            }\n         }\n     }\n "}, {"sha": "2090e50000b0110958edf5ef790eed222c222d70", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 121, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -2093,53 +2093,6 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n     finish_fn(fcx, lltop);\n }\n \n-pub fn trans_struct_dtor(ccx: @CrateContext,\n-                         path: path,\n-                         body: &ast::blk,\n-                         dtor_id: ast::node_id,\n-                         psubsts: Option<@param_substs>,\n-                         hash_id: Option<mono_id>,\n-                         parent_id: ast::def_id)\n-                      -> ValueRef {\n-  let tcx = ccx.tcx;\n-  /* Look up the parent class's def_id */\n-  let mut class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n-  /* Substitute in the class type if necessary */\n-  for psubsts.each |ss| {\n-    class_ty = ty::subst_tps(tcx, ss.tys, ss.self_ty, class_ty);\n-  }\n-\n-  /* The dtor takes a (null) output pointer, and a self argument,\n-     and returns () */\n-  let lldty = type_of_dtor(ccx, class_ty);\n-\n-  // XXX: Bad copies.\n-  let s = get_dtor_symbol(ccx, copy path, dtor_id, psubsts);\n-\n-  /* Register the dtor as a function. It has external linkage */\n-  let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n-  lib::llvm::SetLinkage(lldecl, lib::llvm::ExternalLinkage);\n-\n-  /* If we're monomorphizing, register the monomorphized decl\n-     for the dtor */\n-  for hash_id.each |h_id| {\n-    ccx.monomorphized.insert(*h_id, lldecl);\n-  }\n-  /* Translate the dtor body */\n-  let decl = ast_util::dtor_dec();\n-  trans_fn(ccx,\n-           path,\n-           &decl,\n-           body,\n-           lldecl,\n-           impl_self(class_ty),\n-           psubsts,\n-           dtor_id,\n-           None,\n-           []);\n-  lldecl\n-}\n-\n pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::enum_def,\n                       id: ast::node_id,\n                       path: @ast_map::path, vi: @~[ty::VariantInfo],\n@@ -2158,8 +2111,7 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::enum_def,\n                 // Nothing to do.\n             }\n             ast::struct_variant_kind(struct_def) => {\n-                trans_struct_def(ccx, struct_def, path,\n-                                 variant.node.id);\n+                trans_struct_def(ccx, struct_def);\n             }\n         }\n     }\n@@ -2228,22 +2180,14 @@ pub fn trans_item(ccx: @CrateContext, item: &ast::item) {\n       }\n       ast::item_struct(struct_def, ref generics) => {\n         if !generics.is_type_parameterized() {\n-            trans_struct_def(ccx, struct_def, path, item.id);\n+            trans_struct_def(ccx, struct_def);\n         }\n       }\n       _ => {/* fall through */ }\n     }\n }\n \n-pub fn trans_struct_def(ccx: @CrateContext, struct_def: @ast::struct_def,\n-                        path: @ast_map::path,\n-                        id: ast::node_id) {\n-    // Translate the destructor.\n-    for struct_def.dtor.each |dtor| {\n-        trans_struct_dtor(ccx, /*bad*/copy *path, &dtor.node.body,\n-                         dtor.node.id, None, None, local_def(id));\n-    };\n-\n+pub fn trans_struct_def(ccx: @CrateContext, struct_def: @ast::struct_def) {\n     // If this is a tuple-like struct, translate the constructor.\n     match struct_def.ctor_id {\n         // We only need to translate a constructor if there are fields;\n@@ -2477,46 +2421,6 @@ pub fn item_path(ccx: @CrateContext, i: @ast::item) -> path {\n     vec::append(/*bad*/copy *base, ~[path_name(i.ident)])\n }\n \n-/* If there's already a symbol for the dtor with <id> and substs <substs>,\n-   return it; otherwise, create one and register it, returning it as well */\n-pub fn get_dtor_symbol(ccx: @CrateContext,\n-                       path: path,\n-                       id: ast::node_id,\n-                       substs: Option<@param_substs>)\n-                    -> ~str {\n-  let t = ty::node_id_to_type(ccx.tcx, id);\n-  match ccx.item_symbols.find(&id) {\n-     Some(s) => (/*bad*/copy *s),\n-     None if substs.is_none() => {\n-       let s = mangle_exported_name(\n-           ccx,\n-           vec::append(path, ~[path_name((ccx.names)(~\"dtor\"))]),\n-           t);\n-       // XXX: Bad copy, use `@str`?\n-       ccx.item_symbols.insert(id, copy s);\n-       s\n-     }\n-     None   => {\n-       // Monomorphizing, so just make a symbol, don't add\n-       // this to item_symbols\n-       match substs {\n-         Some(ss) => {\n-           let mono_ty = ty::subst_tps(ccx.tcx, ss.tys, ss.self_ty, t);\n-           mangle_exported_name(\n-               ccx,\n-               vec::append(path,\n-                           ~[path_name((ccx.names)(~\"dtor\"))]),\n-               mono_ty)\n-         }\n-         None => {\n-             ccx.sess.bug(fmt!(\"get_dtor_symbol: not monomorphizing and \\\n-               couldn't find a symbol for dtor %?\", path));\n-         }\n-       }\n-     }\n-  }\n-}\n-\n pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n     debug!(\"get_item_val(id=`%?`)\", id);\n     let tcx = ccx.tcx;\n@@ -2602,28 +2506,6 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                 }\n             }\n           }\n-          ast_map::node_dtor(_, dt, parent_id, pt) => {\n-            /*\n-                Don't just call register_fn, since we don't want to add\n-                the implicit self argument automatically (we want to make sure\n-                it has the right type)\n-            */\n-            // Want parent_id and not id, because id is the dtor's type\n-            let class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n-            // This code shouldn't be reached if the class is generic\n-            assert!(!ty::type_has_params(class_ty));\n-            let lldty = T_fn(~[\n-                    T_ptr(T_i8()),\n-                    T_ptr(type_of(ccx, class_ty))\n-                ],\n-                T_nil());\n-            let s = get_dtor_symbol(ccx, /*bad*/copy *pt, dt.node.id, None);\n-\n-            /* Make the declaration for the dtor */\n-            let llfn = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n-            lib::llvm::SetLinkage(llfn, lib::llvm::ExternalLinkage);\n-            llfn\n-          }\n \n           ast_map::node_variant(ref v, enm, pth) => {\n             let llfn;"}, {"sha": "58fc5ea3be64745ebeae0f2da14ab6633c2dd570", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -983,9 +983,6 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n                                        expected an expr_fn_block here\")\n         }\n       }\n-      ast_map::node_dtor(_, _, did, _) => {\n-        ((dbg_cx.names)(~\"dtor\"), ast_util::dtor_ty(), did.node)\n-      }\n       _ => fcx.ccx.sess.bug(~\"create_function: unexpected \\\n                               sort of node\")\n     };"}, {"sha": "ad06a9715b4af01e05e1d6e5da325e62b3d8055b", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -118,10 +118,6 @@ pub fn maybe_instantiate_inline(ccx: @CrateContext, fn_id: ast::def_id,\n             }\n             local_def(mth.id)\n           }\n-          csearch::found(ast::ii_dtor(ref dtor, _, _, _)) => {\n-              ccx.external.insert(fn_id, Some((*dtor).node.id));\n-              local_def((*dtor).node.id)\n-          }\n         }\n       }\n     }"}, {"sha": "aa49915d1759b8261afe7860a9a4fe911c895120", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -13,7 +13,7 @@ use driver::session;\n use lib::llvm::ValueRef;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n-use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n+use middle::trans::base::{trans_enum_variant};\n use middle::trans::base::{trans_fn, decl_internal_cdecl_fn};\n use middle::trans::base::{get_item_val, no_self};\n use middle::trans::base;\n@@ -35,7 +35,6 @@ use syntax::ast_map;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n use syntax::opt_vec;\n-use syntax::parse::token::special_idents;\n use syntax::abi::AbiSet;\n \n pub fn monomorphic_fn(ccx: @CrateContext,\n@@ -116,8 +115,6 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         // Foreign externs don't have to be monomorphized.\n         return (get_item_val(ccx, fn_id.node), true);\n       }\n-      ast_map::node_dtor(_, dtor, _, pt) =>\n-          (pt, special_idents::dtor, dtor.span),\n       ast_map::node_trait_method(@ast::provided(m), _, pt) => {\n         (pt, m.ident, m.span)\n       }\n@@ -243,16 +240,6 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         meth::trans_method(ccx, pt, mth, psubsts, None, d, impl_did);\n         d\n       }\n-      ast_map::node_dtor(_, dtor, _, pt) => {\n-        let parent_id = match ty::ty_to_def_id(ty::node_id_to_type(ccx.tcx,\n-                                              dtor.node.self_id)) {\n-                Some(did) => did,\n-                None      => ccx.sess.span_bug(dtor.span, ~\"Bad self ty in \\\n-                                                            dtor\")\n-        };\n-        trans_struct_dtor(ccx, /*bad*/copy *pt, &dtor.node.body,\n-          dtor.node.id, psubsts, Some(hash_id), parent_id)\n-      }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);"}, {"sha": "234473dd35b6044af2773fb464233c527ffd8678", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -124,18 +124,10 @@ fn traverse_public_item(cx: &ctx, item: @item) {\n             }\n         }\n       }\n-      item_struct(ref struct_def, ref generics) => {\n+      item_struct(ref struct_def, _) => {\n         for struct_def.ctor_id.each |&ctor_id| {\n             cx.rmap.insert(ctor_id);\n         }\n-        for struct_def.dtor.each |dtor| {\n-            cx.rmap.insert(dtor.node.id);\n-            if generics.ty_params.len() > 0u ||\n-                attr::find_inline_attr(dtor.node.attrs) != attr::ia_none\n-            {\n-                traverse_inline_body(cx, &dtor.node.body);\n-            }\n-        }\n       }\n       item_ty(t, _) => {\n         traverse_ty(t, cx,\n@@ -239,9 +231,6 @@ fn traverse_all_resources_and_impls(cx: &ctx, crate_mod: &_mod) {\n             visit_item: |i, cx, v| {\n                 visit::visit_item(i, cx, v);\n                 match i.node {\n-                    item_struct(sdef, _) if sdef.dtor.is_some() => {\n-                        traverse_public_item(cx, i);\n-                    }\n                     item_impl(*) => {\n                         traverse_public_item(cx, i);\n                     }"}, {"sha": "e19eba6ca98f974725226c41d82720adb0a9a350", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -157,9 +157,6 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }\n       }\n-      ast_map::node_dtor(_, ref dtor, _, _) => {\n-        handle_body(cx, &dtor.node.body);\n-      }\n       ast_map::node_struct_ctor(*) => {\n         // Similarly to node_variant, this monomorphized function just uses\n         // the representations of all of its type parameters."}, {"sha": "ccd7cc6a8ab9821a75b0224b7bae3c4f6635b138", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -3748,28 +3748,8 @@ pub impl DtorKind {\n    Otherwise return none. */\n pub fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n     match cx.destructor_for_type.find(&struct_id) {\n-        Some(&method_def_id) => return TraitDtor(method_def_id),\n-        None => {}  // Continue.\n-    }\n-\n-    if is_local(struct_id) {\n-       match cx.items.find(&struct_id.node) {\n-           Some(&ast_map::node_item(@ast::item {\n-               node: ast::item_struct(@ast::struct_def { dtor: Some(ref dtor),\n-                                                         _ },\n-                                      _),\n-               _\n-           }, _)) =>\n-               LegacyDtor(local_def((*dtor).node.id)),\n-           _ =>\n-               NoDtor\n-       }\n-    }\n-    else {\n-      match csearch::struct_dtor(cx.sess.cstore, struct_id) {\n+        Some(&method_def_id) => TraitDtor(method_def_id),\n         None => NoDtor,\n-        Some(did) => LegacyDtor(did),\n-      }\n     }\n }\n \n@@ -3819,11 +3799,6 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n                             ast_map::path_name((*variant).node.name))\n           }\n \n-          ast_map::node_dtor(_, _, _, path) => {\n-            vec::append_one(/*bad*/copy *path, ast_map::path_name(\n-                syntax::parse::token::special_idents::literally_dtor))\n-          }\n-\n           ast_map::node_struct_ctor(_, item, path) => {\n             vec::append_one(/*bad*/copy *path, ast_map::path_name(item.ident))\n           }"}, {"sha": "d1c5ae18bc30be75e349010e289ea38536453c2a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -557,30 +557,7 @@ pub fn check_no_duplicate_fields(tcx: ty::ctxt,\n     }\n }\n \n-pub fn check_struct(ccx: @mut CrateCtxt,\n-                    struct_def: @ast::struct_def,\n-                    id: ast::node_id,\n-                    span: span) {\n-    let tcx = ccx.tcx;\n-    let self_ty = ty::node_id_to_type(tcx, id);\n-\n-    for struct_def.dtor.each |dtor| {\n-        let class_t = SelfInfo {\n-            self_ty: self_ty,\n-            self_id: dtor.node.self_id,\n-            span: dtor.span,\n-        };\n-        // typecheck the dtor\n-        let dtor_dec = ast_util::dtor_dec();\n-        check_bare_fn(\n-            ccx,\n-            &dtor_dec,\n-            &dtor.node.body,\n-            dtor.node.id,\n-            Some(class_t)\n-        );\n-    };\n-\n+pub fn check_struct(ccx: @mut CrateCtxt, id: ast::node_id, span: span) {\n     // Check that the class is instantiable\n     check_instantiable(ccx.tcx, span, id);\n }\n@@ -623,8 +600,8 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n             }\n         }\n       }\n-      ast::item_struct(struct_def, _) => {\n-        check_struct(ccx, struct_def, it.id, it.span);\n+      ast::item_struct(*) => {\n+        check_struct(ccx, it.id, it.span);\n       }\n       ast::item_ty(t, ref generics) => {\n         let tpt_ty = ty::node_id_to_type(ccx.tcx, it.id);"}, {"sha": "10537711b3289e66f31a6ba74b13aeb2239af2eb", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -49,7 +49,6 @@ use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, split_trait_methods};\n-use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::codemap;\n use syntax::print::pprust::{path_to_str, self_ty_to_str};\n@@ -897,30 +896,6 @@ pub fn convert_struct(ccx: &CrateCtxt,\n                       id: ast::node_id) {\n     let tcx = ccx.tcx;\n \n-    for struct_def.dtor.each |dtor| {\n-        let region_parameterization =\n-            RegionParameterization::from_variance_and_generics(rp, generics);\n-\n-        // Write the dtor type\n-        let t_dtor = ty::mk_bare_fn(\n-            tcx,\n-            astconv::ty_of_bare_fn(\n-                ccx,\n-                &type_rscope(region_parameterization),\n-                ast::impure_fn,\n-                AbiSet::Rust(),\n-                &opt_vec::Empty,\n-                &ast_util::dtor_dec()));\n-        write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n-        tcx.tcache.insert(local_def(dtor.node.id),\n-                          ty_param_bounds_and_ty {\n-                              generics: ty::Generics {\n-                                  type_param_defs: tpt.generics.type_param_defs,\n-                                  region_param: rp\n-                              },\n-                              ty: t_dtor});\n-    };\n-\n     // Write the type of each of the members\n     for struct_def.fields.each |f| {\n        convert_field(ccx, rp, tpt.generics.type_param_defs, *f, generics);"}, {"sha": "def32bdfd44d6c535027b04f7bd704954ac40b1e", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -332,13 +332,7 @@ fn fold_struct(\n /// what I actually want\n fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n     let node = match copy item.node {\n-        ast::item_struct(def, tys) => {\n-            let def = @ast::struct_def {\n-                dtor: None, // Remove the drop { } block\n-                .. copy *def\n-            };\n-            ast::item_struct(def, tys)\n-        }\n+        ast::item_struct(def, tys) => ast::item_struct(def, tys),\n         _ => fail!(~\"not a struct\")\n     };\n \n@@ -440,13 +434,6 @@ mod test {\n             \"struct S {\"));\n     }\n \n-    #[test]\n-    fn should_not_serialize_struct_drop_blocks() {\n-        // All we care about are the fields\n-        let doc = mk_doc(~\"struct S { field: (), drop { } }\");\n-        assert!(!(&doc.cratemod().structs()[0].sig).get().contains(\"drop\"));\n-    }\n-\n     #[test]\n     fn should_not_serialize_struct_attrs() {\n         // All we care about are the fields"}, {"sha": "4bb2d220ad669be146bc8e504307abdc8c40f6ef", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -1158,6 +1158,7 @@ pub struct struct_field_ {\n     kind: struct_field_kind,\n     id: node_id,\n     ty: @Ty,\n+    attrs: ~[attribute],\n }\n \n pub type struct_field = spanned<struct_field_>;\n@@ -1174,10 +1175,7 @@ pub enum struct_field_kind {\n #[auto_decode]\n #[deriving(Eq)]\n pub struct struct_def {\n-    fields: ~[@struct_field], /* fields */\n-    /* (not including ctor or dtor) */\n-    /* dtor is optional */\n-    dtor: Option<struct_dtor>,\n+    fields: ~[@struct_field], /* fields, not including ctor */\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n     ctor_id: Option<node_id>\n@@ -1230,18 +1228,6 @@ impl to_bytes::IterBytes for struct_mutability {\n     }\n }\n \n-pub type struct_dtor = spanned<struct_dtor_>;\n-\n-#[auto_encode]\n-#[auto_decode]\n-#[deriving(Eq)]\n-pub struct struct_dtor_ {\n-    id: node_id,\n-    attrs: ~[attribute],\n-    self_id: node_id,\n-    body: blk,\n-}\n-\n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]\n@@ -1272,7 +1258,6 @@ pub enum inlined_item {\n     ii_item(@item),\n     ii_method(def_id /* impl id */, @method),\n     ii_foreign(@foreign_item),\n-    ii_dtor(struct_dtor, ident, Generics, def_id /* parent id */)\n }\n \n /* hold off on tests ... they appear in a later merge."}, {"sha": "d2125cebb5e48cd6ee244cd55ee4bbdd0c5a166b", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -14,7 +14,6 @@ use ast;\n use ast_util::{inlined_item_utils, stmt_id};\n use ast_util;\n use codemap;\n-use codemap::spanned;\n use diagnostic::span_handler;\n use parse::token::ident_interner;\n use print::pprust;\n@@ -93,8 +92,6 @@ pub enum ast_node {\n     // order they are introduced.\n     node_arg(arg, uint),\n     node_local(uint),\n-    // Destructor for a struct\n-    node_dtor(Generics, @struct_dtor, def_id, @path),\n     node_block(blk),\n     node_struct_ctor(@struct_def, @item, @path),\n }\n@@ -163,7 +160,7 @@ pub fn map_decoded_item(diag: @span_handler,\n     // don't decode and instantiate the impl, but just the method, we have to\n     // add it to the table now:\n     match *ii {\n-      ii_item(*) | ii_dtor(*) => { /* fallthrough */ }\n+      ii_item(*) => { /* fallthrough */ }\n       ii_foreign(i) => {\n         cx.map.insert(i.id, node_foreign_item(i,\n                                               AbiSet::Intrinsic(),\n@@ -193,27 +190,6 @@ pub fn map_fn(\n                       node_arg(/* FIXME (#2543) */ copy *a, cx.local_id));\n         cx.local_id += 1u;\n     }\n-    match *fk {\n-        visit::fk_dtor(generics, ref attrs, self_id, parent_id) => {\n-            let dt = @spanned {\n-                node: ast::struct_dtor_ {\n-                    id: id,\n-                    attrs: /* FIXME (#2543) */ vec::from_slice(*attrs),\n-                    self_id: self_id,\n-                    body: /* FIXME (#2543) */ copy *body,\n-                },\n-                span: sp,\n-            };\n-            cx.map.insert(\n-                id,\n-                node_dtor(\n-                    /* FIXME (#2543) */ copy *generics,\n-                    dt,\n-                    parent_id,\n-                    @/* FIXME (#2543) */ copy cx.path));\n-      }\n-      _ => ()\n-    }\n     visit::visit_fn(fk, decl, body, sp, id, cx, v);\n }\n \n@@ -411,9 +387,6 @@ pub fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n       Some(&node_local(_)) => { // add more info here\n         fmt!(\"local (id=%?)\", id)\n       }\n-      Some(&node_dtor(*)) => { // add more info here\n-        fmt!(\"node_dtor (id=%?)\", id)\n-      }\n       Some(&node_block(_)) => {\n         fmt!(\"block\")\n       }"}, {"sha": "2b3793e45e9c80373c372c6316093e8577be3952", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -11,7 +11,7 @@\n use ast::*;\n use ast;\n use ast_util;\n-use codemap::{span, dummy_sp, spanned};\n+use codemap::{span, spanned};\n use parse::token;\n use visit;\n use opt_vec;\n@@ -302,7 +302,6 @@ impl inlined_item_utils for inlined_item {\n             ii_item(i) => /* FIXME (#2543) */ copy i.ident,\n             ii_foreign(i) => /* FIXME (#2543) */ copy i.ident,\n             ii_method(_, m) => /* FIXME (#2543) */ copy m.ident,\n-            ii_dtor(_, nm, _, _) => /* FIXME (#2543) */ copy nm\n         }\n     }\n \n@@ -311,7 +310,6 @@ impl inlined_item_utils for inlined_item {\n             ii_item(i) => i.id,\n             ii_foreign(i) => i.id,\n             ii_method(_, m) => m.id,\n-            ii_dtor(ref dtor, _, _, _) => (*dtor).node.id\n         }\n     }\n \n@@ -320,10 +318,6 @@ impl inlined_item_utils for inlined_item {\n             ii_item(i) => (v.visit_item)(i, e, v),\n             ii_foreign(i) => (v.visit_foreign_item)(i, e, v),\n             ii_method(_, m) => visit::visit_method_helper(m, e, v),\n-            ii_dtor(/*bad*/ copy dtor, _, ref generics, parent_id) => {\n-                visit::visit_struct_dtor_helper(dtor, generics,\n-                                                parent_id, e, v);\n-            }\n         }\n     }\n }\n@@ -359,20 +353,6 @@ pub fn operator_prec(op: ast::binop) -> uint {\n /// not appearing in the prior table.\n pub static as_prec: uint = 11u;\n \n-pub fn dtor_ty() -> @ast::Ty {\n-    @ast::Ty {id: 0, node: ty_nil, span: dummy_sp()}\n-}\n-\n-pub fn dtor_dec() -> fn_decl {\n-    let nil_t = dtor_ty();\n-    // dtor has no args\n-    ast::fn_decl {\n-        inputs: ~[],\n-        output: nil_t,\n-        cf: return_val,\n-    }\n-}\n-\n pub fn empty_generics() -> Generics {\n     Generics {lifetimes: opt_vec::Empty,\n               ty_params: opt_vec::Empty}\n@@ -457,12 +437,6 @@ pub fn id_visitor(vfn: @fn(node_id)) -> visit::vt<()> {\n             vfn(id);\n \n             match *fk {\n-                visit::fk_dtor(generics, _, self_id, parent_id) => {\n-                    visit_generics(generics);\n-                    vfn(id);\n-                    vfn(self_id);\n-                    vfn(parent_id.node);\n-                }\n                 visit::fk_item_fn(_, generics, _, _) => {\n                     visit_generics(generics);\n                 }"}, {"sha": "e876972fe6878c1cf74099a790da96247f84797d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -415,7 +415,8 @@ impl gen_init for protocol {\n                             ast::struct_immutable,\n                             ast::inherited),\n                     id: cx.next_id(),\n-                    ty: fty\n+                    ty: fty,\n+                    attrs: ~[],\n                 },\n                 span: dummy_sp()\n             }\n@@ -431,7 +432,6 @@ impl gen_init for protocol {\n             dummy_sp(),\n             ast::struct_def {\n                 fields: fields,\n-                dtor: None,\n                 ctor_id: None\n             },\n             cx.strip_bounds(&generics))"}, {"sha": "36565395e598899df3b6842ae07d65afc515d20d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -222,9 +222,12 @@ pub fn noop_fold_item(i: @item, fld: @ast_fold) -> Option<@item> {\n \n fn noop_fold_struct_field(sf: @struct_field, fld: @ast_fold)\n                        -> @struct_field {\n+    let fold_attribute = |x| fold_attribute_(x, fld);\n+\n     @spanned { node: ast::struct_field_ { kind: copy sf.node.kind,\n                                           id: sf.node.id,\n-                                          ty: fld.fold_ty(sf.node.ty) },\n+                                          ty: fld.fold_ty(sf.node.ty),\n+                                          attrs: sf.node.attrs.map(|e| fold_attribute(*e)) },\n                span: sf.span }\n }\n \n@@ -290,21 +293,8 @@ pub fn noop_fold_item_underscore(i: &item_, fld: @ast_fold) -> item_ {\n \n fn fold_struct_def(struct_def: @ast::struct_def, fld: @ast_fold)\n                 -> @ast::struct_def {\n-    let dtor = do struct_def.dtor.map |dtor| {\n-        let dtor_body = fld.fold_block(&dtor.node.body);\n-        let dtor_id   = fld.new_id(dtor.node.id);\n-        spanned {\n-            node: ast::struct_dtor_ {\n-                body: dtor_body,\n-                id: dtor_id,\n-                .. copy dtor.node\n-            },\n-            span: copy dtor.span\n-        }\n-    };\n     @ast::struct_def {\n         fields: struct_def.fields.map(|f| fold_struct_field(*f, fld)),\n-        dtor: dtor,\n         ctor_id: struct_def.ctor_id.map(|cid| fld.new_id(*cid)),\n     }\n }\n@@ -322,6 +312,7 @@ fn fold_struct_field(f: @struct_field, fld: @ast_fold) -> @struct_field {\n             kind: copy f.node.kind,\n             id: fld.new_id(f.node.id),\n             ty: fld.fold_ty(f.node.ty),\n+            attrs: /* FIXME (#2543) */ copy f.node.attrs,\n         },\n         span: fld.new_span(f.span),\n     }\n@@ -655,22 +646,9 @@ fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n             })\n         }\n         struct_variant_kind(struct_def) => {\n-            let dtor = do struct_def.dtor.map |dtor| {\n-                let dtor_body = fld.fold_block(&dtor.node.body);\n-                let dtor_id   = fld.new_id(dtor.node.id);\n-                spanned {\n-                    node: ast::struct_dtor_ {\n-                        body: dtor_body,\n-                        id: dtor_id,\n-                        .. copy dtor.node\n-                    },\n-                    .. copy *dtor\n-                }\n-            };\n             kind = struct_variant_kind(@ast::struct_def {\n                 fields: vec::map(struct_def.fields,\n                                  |f| fld.fold_struct_field(*f)),\n-                dtor: dtor,\n                 ctor_id: struct_def.ctor_id.map(|c| fld.new_id(*c))\n             })\n         }\n@@ -783,6 +761,7 @@ impl ast_fold for AstFoldFns {\n                 kind: copy sf.node.kind,\n                 id: sf.node.id,\n                 ty: (self as @ast_fold).fold_ty(sf.node.ty),\n+                attrs: copy sf.node.attrs,\n             },\n             span: (self.new_span)(sf.span),\n         }"}, {"sha": "5d51a54d770b11936c476f10308360de0a998ec8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -24,7 +24,7 @@ use parse::token::{ident_interner, mk_ident_interner};\n use core::io;\n use core::option::{None, Option, Some};\n use core::path::Path;\n-use core::result::{Err, Ok, Result};\n+use core::result::{Err, Ok};\n \n pub mod lexer;\n pub mod parser;"}, {"sha": "c1afc53def0c24f40f122ff08b0b1dfb6764262d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -18,7 +18,7 @@ removed.\n */\n \n \n-use ast::{expr, expr_lit, lit_nil};\n+use ast::{expr, expr_lit, lit_nil, attribute};\n use ast;\n use codemap::{span, respan};\n use parse::parser::Parser;\n@@ -282,13 +282,13 @@ pub impl Parser {\n         }\n     }\n \n-    fn try_parse_obsolete_priv_section(&self) -> bool {\n+    fn try_parse_obsolete_priv_section(&self, attrs: ~[attribute]) -> bool {\n         if self.is_keyword(&~\"priv\") && self.look_ahead(1) == token::LBRACE {\n             self.obsolete(copy *self.span, ObsoletePrivSection);\n             self.eat_keyword(&~\"priv\");\n             self.bump();\n             while *self.token != token::RBRACE {\n-                self.parse_single_struct_field(ast::private);\n+                self.parse_single_struct_field(ast::private, attrs);\n             }\n             self.bump();\n             true"}, {"sha": "a582748edb39c83079faf2dc112208ca77653609", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 85, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -102,11 +102,6 @@ enum restriction {\n     RESTRICT_NO_BAR_OR_DOUBLEBAR_OP,\n }\n \n-//  So that we can distinguish a class dtor from other class members\n-\n-enum class_contents { dtor_decl(blk, ~[attribute], codemap::span),\n-                      members(~[@struct_field]) }\n-\n type arg_or_capture_item = Either<arg, ()>;\n type item_info = (ident, item_, Option<~[attribute]>);\n \n@@ -2525,7 +2520,9 @@ pub impl Parser {\n     }\n \n     // parse a structure field\n-    fn parse_name_and_ty(&self, pr: visibility) -> @struct_field {\n+    fn parse_name_and_ty(&self,\n+                         pr: visibility,\n+                         attrs: ~[attribute]) -> @struct_field {\n         let mut is_mutbl = struct_immutable;\n         let lo = self.span.lo;\n         if self.eat_keyword(&~\"mut\") {\n@@ -2540,7 +2537,8 @@ pub impl Parser {\n         @spanned(lo, self.last_span.hi, ast::struct_field_ {\n             kind: named_field(name, is_mutbl, pr),\n             id: self.get_id(),\n-            ty: ty\n+            ty: ty,\n+            attrs: attrs,\n         })\n     }\n \n@@ -3299,34 +3297,15 @@ pub impl Parser {\n         }\n \n         let mut fields: ~[@struct_field];\n-        let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n         let is_tuple_like;\n \n         if self.eat(&token::LBRACE) {\n             // It's a record-like struct.\n             is_tuple_like = false;\n             fields = ~[];\n             while *self.token != token::RBRACE {\n-                match self.parse_struct_decl_field() {\n-                  dtor_decl(ref blk, ref attrs, s) => {\n-                      match the_dtor {\n-                        Some((_, _, s_first)) => {\n-                          self.span_note(s, fmt!(\"Duplicate destructor \\\n-                                     declaration for class %s\",\n-                                     *self.interner.get(class_name)));\n-                          self.span_fatal(copy s_first, ~\"First destructor \\\n-                                                          declared here\");\n-                        }\n-                        None => {\n-                          the_dtor = Some((copy *blk, copy *attrs, s));\n-                        }\n-                      }\n-                  }\n-                  members(mms) => {\n-                    for mms.each |struct_field| {\n-                        fields.push(*struct_field)\n-                    }\n-                  }\n+                for self.parse_struct_decl_field().each |struct_field| {\n+                    fields.push(*struct_field)\n                 }\n             }\n             if fields.len() == 0 {\n@@ -3342,11 +3321,13 @@ pub impl Parser {\n                 &token::RPAREN,\n                 seq_sep_trailing_allowed(token::COMMA)\n             ) |p| {\n+                let attrs = self.parse_outer_attributes();\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::struct_field_ {\n                     kind: unnamed_field,\n                     id: self.get_id(),\n-                    ty: p.parse_ty(false)\n+                    ty: p.parse_ty(false),\n+                    attrs: attrs,\n                 };\n                 @spanned(lo, p.span.hi, struct_field_)\n             };\n@@ -3365,19 +3346,11 @@ pub impl Parser {\n             );\n         }\n \n-        let actual_dtor = do the_dtor.map |dtor| {\n-            let (d_body, d_attrs, d_s) = copy *dtor;\n-            codemap::spanned { node: ast::struct_dtor_ { id: self.get_id(),\n-                                                     attrs: d_attrs,\n-                                                     self_id: self.get_id(),\n-                                                     body: d_body},\n-                       span: d_s}};\n         let _ = self.get_id();  // XXX: Workaround for crazy bug.\n         let new_id = self.get_id();\n         (class_name,\n          item_struct(@ast::struct_def {\n              fields: fields,\n-             dtor: actual_dtor,\n              ctor_id: if is_tuple_like { Some(new_id) } else { None }\n          }, generics),\n          None)\n@@ -3391,12 +3364,14 @@ pub impl Parser {\n     }\n \n     // parse a structure field declaration\n-    fn parse_single_struct_field(&self, vis: visibility) -> @struct_field {\n+    fn parse_single_struct_field(&self,\n+                                 vis: visibility,\n+                                 attrs: ~[attribute]) -> @struct_field {\n         if self.eat_obsolete_ident(\"let\") {\n             self.obsolete(*self.last_span, ObsoleteLet);\n         }\n \n-        let a_var = self.parse_name_and_ty(vis);\n+        let a_var = self.parse_name_and_ty(vis, attrs);\n         match *self.token {\n             token::SEMI => {\n                 self.obsolete(copy *self.span, ObsoleteFieldTerminator);\n@@ -3420,34 +3395,27 @@ pub impl Parser {\n     }\n \n     // parse an element of a struct definition\n-    fn parse_struct_decl_field(&self) -> class_contents {\n-\n-        if self.try_parse_obsolete_priv_section() {\n-            return members(~[]);\n-        }\n+    fn parse_struct_decl_field(&self) -> ~[@struct_field] {\n \n         let attrs = self.parse_outer_attributes();\n \n+        if self.try_parse_obsolete_priv_section(attrs) {\n+            return ~[];\n+        }\n+\n         if self.eat_keyword(&~\"priv\") {\n-            return members(~[self.parse_single_struct_field(private)])\n+            return ~[self.parse_single_struct_field(private, attrs)]\n         }\n \n         if self.eat_keyword(&~\"pub\") {\n-           return members(~[self.parse_single_struct_field(public)]);\n+           return ~[self.parse_single_struct_field(public, attrs)];\n         }\n \n         if self.try_parse_obsolete_struct_ctor() {\n-            return members(~[]);\n+            return ~[];\n         }\n \n-        if self.eat_keyword(&~\"drop\") {\n-            let lo = self.last_span.lo;\n-            let body = self.parse_block();\n-            return dtor_decl(body, attrs, mk_sp(lo, self.last_span.hi))\n-        }\n-        else {\n-           return members(~[self.parse_single_struct_field(inherited)]);\n-        }\n+        return ~[self.parse_single_struct_field(inherited, attrs)];\n     }\n \n     // parse visiility: PUB, PRIV, or nothing\n@@ -3830,44 +3798,16 @@ pub impl Parser {\n     // parse a structure-like enum variant definition\n     // this should probably be renamed or refactored...\n     fn parse_struct_def(&self) -> @struct_def {\n-        let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n         let mut fields: ~[@struct_field] = ~[];\n         while *self.token != token::RBRACE {\n-            match self.parse_struct_decl_field() {\n-                dtor_decl(ref blk, ref attrs, s) => {\n-                    match the_dtor {\n-                        Some((_, _, s_first)) => {\n-                            self.span_note(s, ~\"duplicate destructor \\\n-                                                declaration\");\n-                            self.span_fatal(copy s_first,\n-                                            ~\"first destructor \\\n-                                              declared here\");\n-                        }\n-                        None => {\n-                            the_dtor = Some((copy *blk, copy *attrs, s));\n-                        }\n-                    }\n-                }\n-                members(mms) => {\n-                    for mms.each |struct_field| {\n-                        fields.push(*struct_field);\n-                    }\n-                }\n+            for self.parse_struct_decl_field().each |struct_field| {\n+                fields.push(*struct_field);\n             }\n         }\n         self.bump();\n-        let actual_dtor = do the_dtor.map |dtor| {\n-            let (d_body, d_attrs, d_s) = copy *dtor;\n-            codemap::spanned { node: ast::struct_dtor_ { id: self.get_id(),\n-                                                     attrs: d_attrs,\n-                                                     self_id: self.get_id(),\n-                                                     body: d_body },\n-                      span: d_s }\n-        };\n \n         return @ast::struct_def {\n             fields: fields,\n-            dtor: actual_dtor,\n             ctor_id: None\n         };\n     }"}, {"sha": "338b7c99d973002956584ecbfa5b579d42f3b8ac", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 70, "deletions": 75, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -305,50 +305,47 @@ pub fn is_bar(t: &Token) -> bool {\n pub mod special_idents {\n     use ast::ident;\n \n-    pub static underscore : ident = ident { repr: 0u, ctxt: 0};\n-    pub static anon : ident = ident { repr: 1u, ctxt: 0};\n-    pub static dtor : ident = ident { repr: 2u, ctxt: 0}; // 'drop', but that's\n-                                                 // reserved\n-    pub static invalid : ident = ident { repr: 3u, ctxt: 0}; // ''\n-    pub static unary : ident = ident { repr: 4u, ctxt: 0};\n-    pub static not_fn : ident = ident { repr: 5u, ctxt: 0};\n-    pub static idx_fn : ident = ident { repr: 6u, ctxt: 0};\n-    pub static unary_minus_fn : ident = ident { repr: 7u, ctxt: 0};\n-    pub static clownshoes_extensions : ident = ident { repr: 8u, ctxt: 0};\n-\n-    pub static self_ : ident = ident { repr: 9u, ctxt: 0}; // 'self'\n+    pub static underscore : ident = ident { repr: 0, ctxt: 0};\n+    pub static anon : ident = ident { repr: 1, ctxt: 0};\n+    pub static invalid : ident = ident { repr: 2, ctxt: 0}; // ''\n+    pub static unary : ident = ident { repr: 3, ctxt: 0};\n+    pub static not_fn : ident = ident { repr: 4, ctxt: 0};\n+    pub static idx_fn : ident = ident { repr: 5, ctxt: 0};\n+    pub static unary_minus_fn : ident = ident { repr: 6, ctxt: 0};\n+    pub static clownshoes_extensions : ident = ident { repr: 7, ctxt: 0};\n+\n+    pub static self_ : ident = ident { repr: 8, ctxt: 0}; // 'self'\n \n     /* for matcher NTs */\n-    pub static item : ident = ident { repr: 10u, ctxt: 0};\n-    pub static block : ident = ident { repr: 11u, ctxt: 0};\n-    pub static stmt : ident = ident { repr: 12u, ctxt: 0};\n-    pub static pat : ident = ident { repr: 13u, ctxt: 0};\n-    pub static expr : ident = ident { repr: 14u, ctxt: 0};\n-    pub static ty : ident = ident { repr: 15u, ctxt: 0};\n-    pub static ident : ident = ident { repr: 16u, ctxt: 0};\n-    pub static path : ident = ident { repr: 17u, ctxt: 0};\n-    pub static tt : ident = ident { repr: 18u, ctxt: 0};\n-    pub static matchers : ident = ident { repr: 19u, ctxt: 0};\n-\n-    pub static str : ident = ident { repr: 20u, ctxt: 0}; // for the type\n+    pub static item : ident = ident { repr: 9, ctxt: 0};\n+    pub static block : ident = ident { repr: 10, ctxt: 0};\n+    pub static stmt : ident = ident { repr: 11, ctxt: 0};\n+    pub static pat : ident = ident { repr: 12, ctxt: 0};\n+    pub static expr : ident = ident { repr: 13, ctxt: 0};\n+    pub static ty : ident = ident { repr: 14, ctxt: 0};\n+    pub static ident : ident = ident { repr: 15, ctxt: 0};\n+    pub static path : ident = ident { repr: 16, ctxt: 0};\n+    pub static tt : ident = ident { repr: 17, ctxt: 0};\n+    pub static matchers : ident = ident { repr: 18, ctxt: 0};\n+\n+    pub static str : ident = ident { repr: 19, ctxt: 0}; // for the type\n \n     /* outside of libsyntax */\n-    pub static ty_visitor : ident = ident { repr: 21u, ctxt: 0};\n-    pub static arg : ident = ident { repr: 22u, ctxt: 0};\n-    pub static descrim : ident = ident { repr: 23u, ctxt: 0};\n-    pub static clownshoe_abi : ident = ident { repr: 24u, ctxt: 0};\n-    pub static clownshoe_stack_shim : ident = ident { repr: 25u, ctxt: 0};\n-    pub static tydesc : ident = ident { repr: 26u, ctxt: 0};\n-    pub static literally_dtor : ident = ident { repr: 27u, ctxt: 0};\n-    pub static main : ident = ident { repr: 28u, ctxt: 0};\n-    pub static opaque : ident = ident { repr: 29u, ctxt: 0};\n-    pub static blk : ident = ident { repr: 30u, ctxt: 0};\n-    pub static static : ident = ident { repr: 31u, ctxt: 0};\n-    pub static intrinsic : ident = ident { repr: 32u, ctxt: 0};\n-    pub static clownshoes_foreign_mod: ident = ident { repr: 33u, ctxt: 0};\n-    pub static unnamed_field: ident = ident { repr: 34u, ctxt: 0};\n-    pub static c_abi: ident = ident { repr: 35u, ctxt: 0};\n-    pub static type_self: ident = ident { repr: 36u, ctxt: 0};    // `Self`\n+    pub static ty_visitor : ident = ident { repr: 20, ctxt: 0};\n+    pub static arg : ident = ident { repr: 21, ctxt: 0};\n+    pub static descrim : ident = ident { repr: 22, ctxt: 0};\n+    pub static clownshoe_abi : ident = ident { repr: 23, ctxt: 0};\n+    pub static clownshoe_stack_shim : ident = ident { repr: 24, ctxt: 0};\n+    pub static tydesc : ident = ident { repr: 25, ctxt: 0};\n+    pub static main : ident = ident { repr: 26, ctxt: 0};\n+    pub static opaque : ident = ident { repr: 27, ctxt: 0};\n+    pub static blk : ident = ident { repr: 28, ctxt: 0};\n+    pub static static : ident = ident { repr: 29, ctxt: 0};\n+    pub static intrinsic : ident = ident { repr: 30, ctxt: 0};\n+    pub static clownshoes_foreign_mod: ident = ident { repr: 31, ctxt: 0};\n+    pub static unnamed_field: ident = ident { repr: 32, ctxt: 0};\n+    pub static c_abi: ident = ident { repr: 33, ctxt: 0};\n+    pub static type_self: ident = ident { repr: 34, ctxt: 0};    // `Self`\n }\n \n pub struct StringRef<'self>(&'self str);\n@@ -426,41 +423,39 @@ pub fn mk_fresh_ident_interner() -> @ident_interner {\n     let init_vec = ~[\n         @~\"_\",                  // 0\n         @~\"anon\",               // 1\n-        @~\"drop\",               // 2\n-        @~\"\",                   // 3\n-        @~\"unary\",              // 4\n-        @~\"!\",                  // 5\n-        @~\"[]\",                 // 6\n-        @~\"unary-\",             // 7\n-        @~\"__extensions__\",     // 8\n-        @~\"self\",               // 9\n-        @~\"item\",               // 10\n-        @~\"block\",              // 11\n-        @~\"stmt\",               // 12\n-        @~\"pat\",                // 13\n-        @~\"expr\",               // 14\n-        @~\"ty\",                 // 15\n-        @~\"ident\",              // 16\n-        @~\"path\",               // 17\n-        @~\"tt\",                 // 18\n-        @~\"matchers\",           // 19\n-        @~\"str\",                // 20\n-        @~\"TyVisitor\",          // 21\n-        @~\"arg\",                // 22\n-        @~\"descrim\",            // 23\n-        @~\"__rust_abi\",         // 24\n-        @~\"__rust_stack_shim\",  // 25\n-        @~\"TyDesc\",             // 26\n-        @~\"dtor\",               // 27\n-        @~\"main\",               // 28\n-        @~\"<opaque>\",           // 29\n-        @~\"blk\",                // 30\n-        @~\"static\",             // 31\n-        @~\"intrinsic\",          // 32\n-        @~\"__foreign_mod__\",    // 33\n-        @~\"__field__\",          // 34\n-        @~\"C\",                  // 35\n-        @~\"Self\",               // 36\n+        @~\"\",                   // 2\n+        @~\"unary\",              // 3\n+        @~\"!\",                  // 4\n+        @~\"[]\",                 // 5\n+        @~\"unary-\",             // 6\n+        @~\"__extensions__\",     // 7\n+        @~\"self\",               // 8\n+        @~\"item\",               // 9\n+        @~\"block\",              // 10\n+        @~\"stmt\",               // 11\n+        @~\"pat\",                // 12\n+        @~\"expr\",               // 13\n+        @~\"ty\",                 // 14\n+        @~\"ident\",              // 15\n+        @~\"path\",               // 16\n+        @~\"tt\",                 // 17\n+        @~\"matchers\",           // 18\n+        @~\"str\",                // 19\n+        @~\"TyVisitor\",          // 20\n+        @~\"arg\",                // 21\n+        @~\"descrim\",            // 22\n+        @~\"__rust_abi\",         // 23\n+        @~\"__rust_stack_shim\",  // 24\n+        @~\"TyDesc\",             // 25\n+        @~\"main\",               // 26\n+        @~\"<opaque>\",           // 27\n+        @~\"blk\",                // 28\n+        @~\"static\",             // 29\n+        @~\"intrinsic\",          // 30\n+        @~\"__foreign_mod__\",    // 31\n+        @~\"__field__\",          // 32\n+        @~\"C\",                  // 33\n+        @~\"Self\",               // 34\n     ];\n \n     let rv = @ident_interner {"}, {"sha": "ab958d8b5cef512c1e917b15de4c198f46049576", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -693,20 +693,14 @@ pub fn print_struct(s: @ps,\n         nbsp(s);\n         bopen(s);\n         hardbreak_if_not_bol(s);\n-        for struct_def.dtor.each |dtor| {\n-          hardbreak_if_not_bol(s);\n-          maybe_print_comment(s, dtor.span.lo);\n-          print_outer_attributes(s, dtor.node.attrs);\n-          head(s, ~\"drop\");\n-          print_block(s, &dtor.node.body);\n-        }\n \n         for struct_def.fields.each |field| {\n             match field.node.kind {\n                 ast::unnamed_field => fail!(~\"unexpected unnamed field\"),\n                 ast::named_field(ident, mutability, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n+                    print_outer_attributes(s, field.node.attrs);\n                     print_visibility(s, visibility);\n                     if mutability == ast::struct_mutable {\n                         word_nbsp(s, ~\"mut\");"}, {"sha": "71cfbab91089e2f9acf8598cb0a91309e06650b8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fbc47af15bb1a8d930a7623737903c54b58349/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=55fbc47af15bb1a8d930a7623737903c54b58349", "patch": "@@ -11,7 +11,6 @@\n use abi::AbiSet;\n use ast::*;\n use ast;\n-use ast_util;\n use codemap::span;\n use parse;\n use opt_vec;\n@@ -39,13 +38,6 @@ pub enum fn_kind<'self> {\n \n     // |x, y| ...\n     fk_fn_block,\n-\n-    fk_dtor( // class destructor\n-        &'self Generics,\n-        &'self [attribute],\n-        node_id /* self id */,\n-        def_id /* parent class id */\n-    )\n }\n \n pub fn name_of_fn(fk: &fn_kind) -> ident {\n@@ -54,15 +46,13 @@ pub fn name_of_fn(fk: &fn_kind) -> ident {\n           name\n       }\n       fk_anon(*) | fk_fn_block(*) => parse::token::special_idents::anon,\n-      fk_dtor(*)                  => parse::token::special_idents::dtor\n     }\n }\n \n pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n     match *fk {\n         fk_item_fn(_, generics, _, _) |\n-        fk_method(_, generics, _) |\n-        fk_dtor(generics, _, _, _) => {\n+        fk_method(_, generics, _) => {\n             copy *generics\n         }\n         fk_anon(*) | fk_fn_block(*) => {\n@@ -369,25 +359,6 @@ pub fn visit_method_helper<E: Copy>(m: &method, e: E, v: vt<E>) {\n     );\n }\n \n-pub fn visit_struct_dtor_helper<E>(dtor: struct_dtor, generics: &Generics,\n-                                   parent_id: def_id, e: E, v: vt<E>) {\n-    (v.visit_fn)(\n-        &fk_dtor(\n-            generics,\n-            dtor.node.attrs,\n-            dtor.node.self_id,\n-            parent_id\n-        ),\n-        &ast_util::dtor_dec(),\n-        &dtor.node.body,\n-        dtor.span,\n-        dtor.node.id,\n-        e,\n-        v\n-    )\n-\n-}\n-\n pub fn visit_fn<E: Copy>(fk: &fn_kind, decl: &fn_decl, body: &blk, _sp: span,\n                          _id: node_id, e: E, v: vt<E>) {\n     visit_fn_decl(decl, e, v);\n@@ -412,23 +383,14 @@ pub fn visit_trait_method<E: Copy>(m: &trait_method, e: E, v: vt<E>) {\n pub fn visit_struct_def<E: Copy>(\n     sd: @struct_def,\n     _nm: ast::ident,\n-    generics: &Generics,\n-    id: node_id,\n+    _generics: &Generics,\n+    _id: node_id,\n     e: E,\n     v: vt<E>\n ) {\n     for sd.fields.each |f| {\n         (v.visit_struct_field)(*f, e, v);\n     }\n-    for sd.dtor.each |dtor| {\n-        visit_struct_dtor_helper(\n-            *dtor,\n-            generics,\n-            ast_util::local_def(id),\n-            e,\n-            v\n-        )\n-    }\n }\n \n pub fn visit_struct_field<E: Copy>(sf: @struct_field, e: E, v: vt<E>) {"}]}