{"sha": "736dbefaf3bd9a7cd95b4a8e5a60cb317125904c", "node_id": "C_kwDOAAsO6NoAKDczNmRiZWZhZjNiZDlhN2NkOTViNGE4ZTVhNjBjYjMxNzEyNTkwNGM", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-14T20:19:07Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-07-11T13:53:46Z"}, "message": "make linux PGO script more generic\n\nThis extracts the linux-isms into variables, so that the script can be\nextended to do PGO on windows. These variables will be overriden in a\nfew spots, in windows-specific blocks.", "tree": {"sha": "8dfa7ef63d2a0972def5626b2314b0b629d0c614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dfa7ef63d2a0972def5626b2314b0b629d0c614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c", "html_url": "https://github.com/rust-lang/rust/commit/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd6f5246cf59c1d04bf6f23f86998ae08689168", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd6f5246cf59c1d04bf6f23f86998ae08689168", "html_url": "https://github.com/rust-lang/rust/commit/9dd6f5246cf59c1d04bf6f23f86998ae08689168"}], "stats": {"total": 109, "additions": 70, "deletions": 39}, "files": [{"sha": "8486380fb78dbf6d9e72893e378ceb0437775d70", "filename": "src/ci/pgo.sh", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/736dbefaf3bd9a7cd95b4a8e5a60cb317125904c/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=736dbefaf3bd9a7cd95b4a8e5a60cb317125904c", "patch": "@@ -3,44 +3,69 @@\n \n set -euxo pipefail\n \n+ci_dir=`cd $(dirname $0) && pwd`\n+source \"$ci_dir/shared.sh\"\n+\n+# The root checkout, where the source is located\n+CHECKOUT=/checkout\n+\n+DOWNLOADED_LLVM=/rustroot\n+\n+# The main directory where the build occurs, which can be different between linux and windows\n+BUILD_ROOT=$CHECKOUT/obj\n+\n+# The various build artifacts used in other commands: to launch rustc builds, build the perf\n+# collector, and run benchmarks to gather profiling data\n+BUILD_ARTIFACTS=$BUILD_ROOT/build/$PGO_HOST\n+RUSTC_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/rustc\n+CARGO_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/cargo\n+RUSTC_STAGE_2=$BUILD_ARTIFACTS/stage2/bin/rustc\n+\n+# Make sure we have a temporary PGO work folder\n+PGO_TMP=/tmp/tmp-pgo\n+mkdir -p $PGO_TMP\n+rm -rf $PGO_TMP/*\n+\n+RUSTC_PERF=$PGO_TMP/rustc-perf\n+\n # Compile several crates to gather execution PGO profiles.\n # Arg0 => profiles (Debug, Opt)\n # Arg1 => scenarios (Full, IncrFull, All)\n # Arg2 => crates (syn, cargo, ...)\n gather_profiles () {\n-  cd /checkout/obj\n+  cd $BUILD_ROOT\n \n   # Compile libcore, both in opt-level=0 and opt-level=3\n-  RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n-      --edition=2021 --crate-type=lib ../library/core/src/lib.rs\n-  RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n-      --edition=2021 --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n+  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n+      --edition=2021 --crate-type=lib $CHECKOUT/library/core/src/lib.rs \\\n+      --out-dir $PGO_TMP\n+  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n+      --edition=2021 --crate-type=lib -Copt-level=3 $CHECKOUT/library/core/src/lib.rs \\\n+      --out-dir $PGO_TMP\n \n-  cd rustc-perf\n+  cd $RUSTC_PERF\n \n   # Run rustc-perf benchmarks\n   # Benchmark using profile_local with eprintln, which essentially just means\n   # don't actually benchmark -- just make sure we run rustc a bunch of times.\n   RUST_LOG=collector=debug \\\n-  RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+  RUSTC=$RUSTC_STAGE_0 \\\n   RUSTC_BOOTSTRAP=1 \\\n-  /checkout/obj/build/$PGO_HOST/stage0/bin/cargo run -p collector --bin collector -- \\\n-          profile_local \\\n-          eprintln \\\n-          /checkout/obj/build/$PGO_HOST/stage2/bin/rustc \\\n-          --id Test \\\n-          --profiles $1 \\\n-          --cargo /checkout/obj/build/$PGO_HOST/stage0/bin/cargo \\\n-          --scenarios $2 \\\n-          --include $3\n-\n-  cd /checkout/obj\n+  $CARGO_STAGE_0 run -p collector --bin collector -- \\\n+      profile_local \\\n+      eprintln \\\n+      $RUSTC_STAGE_2 \\\n+      --id Test \\\n+      --profiles $1 \\\n+      --cargo $CARGO_STAGE_0 \\\n+      --scenarios $2 \\\n+      --include $3\n+\n+  cd $BUILD_ROOT\n }\n \n-rm -rf /tmp/rustc-pgo\n-\n # This path has to be absolute\n-LLVM_PROFILE_DIRECTORY_ROOT=/tmp/llvm-pgo\n+LLVM_PROFILE_DIRECTORY_ROOT=$PGO_TMP/llvm-pgo\n \n # We collect LLVM profiling information and rustc profiling information in\n # separate phases. This increases build time -- though not by a huge amount --\n@@ -49,52 +74,55 @@ LLVM_PROFILE_DIRECTORY_ROOT=/tmp/llvm-pgo\n # LLVM IR PGO does not respect LLVM_PROFILE_FILE, so we have to set the profiling file\n # path through our custom environment variable. We include the PID in the directory path\n # to avoid updates to profile files being lost because of race conditions.\n-LLVM_PROFILE_DIR=${LLVM_PROFILE_DIRECTORY_ROOT}/prof-%p python3 ../x.py build \\\n+LLVM_PROFILE_DIR=${LLVM_PROFILE_DIRECTORY_ROOT}/prof-%p python3 $CHECKOUT/x.py build \\\n     --target=$PGO_HOST \\\n     --host=$PGO_HOST \\\n     --stage 2 library/std \\\n     --llvm-profile-generate\n \n # Compile rustc perf\n-cp -r /tmp/rustc-perf ./\n-chown -R $(whoami): ./rustc-perf\n-cd rustc-perf\n+cp -r /tmp/rustc-perf $RUSTC_PERF\n+chown -R $(whoami): $RUSTC_PERF\n+cd $RUSTC_PERF\n \n-# Build the collector ahead of time, which is needed to make sure the rustc-fake\n+# Build rustc-perf's collector ahead of time, which is needed to make sure the rustc-fake\n # binary used by the collector is present.\n-RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+RUSTC=$RUSTC_STAGE_0 \\\n RUSTC_BOOTSTRAP=1 \\\n-/checkout/obj/build/$PGO_HOST/stage0/bin/cargo build -p collector\n+$CARGO_STAGE_0 build -p collector\n \n # Here we're profiling LLVM, so we only care about `Debug` and `Opt`, because we want to stress\n # codegen. We also profile some of the most prolific crates.\n gather_profiles \"Debug,Opt\" \"Full\" \\\n-\"syn-1.0.89,cargo-0.60.0,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n+    \"syn-1.0.89,cargo-0.60.0,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n \n-LLVM_PROFILE_MERGED_FILE=/tmp/llvm-pgo.profdata\n+LLVM_PROFILE_MERGED_FILE=$PGO_TMP/llvm-pgo.profdata\n \n # Merge the profile data we gathered for LLVM\n # Note that this uses the profdata from the clang we used to build LLVM,\n # which likely has a different version than our in-tree clang.\n-/rustroot/bin/llvm-profdata merge -o ${LLVM_PROFILE_MERGED_FILE} ${LLVM_PROFILE_DIRECTORY_ROOT}\n+$DOWNLOADED_LLVM/bin/llvm-profdata merge -o ${LLVM_PROFILE_MERGED_FILE} ${LLVM_PROFILE_DIRECTORY_ROOT}\n \n echo \"LLVM PGO statistics\"\n du -sh ${LLVM_PROFILE_MERGED_FILE}\n du -sh ${LLVM_PROFILE_DIRECTORY_ROOT}\n echo \"Profile file count\"\n find ${LLVM_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n \n+# We don't need the individual .profraw files now that they have been merged into a final .profdata\n+rm -r $LLVM_PROFILE_DIRECTORY_ROOT\n+\n # Rustbuild currently doesn't support rebuilding LLVM when PGO options\n # change (or any other llvm-related options); so just clear out the relevant\n # directories ourselves.\n-rm -r ./build/$PGO_HOST/llvm ./build/$PGO_HOST/lld\n+rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n \n # Okay, LLVM profiling is done, switch to rustc PGO.\n \n # The path has to be absolute\n-RUSTC_PROFILE_DIRECTORY_ROOT=/tmp/rustc-pgo\n+RUSTC_PROFILE_DIRECTORY_ROOT=$PGO_TMP/rustc-pgo\n \n-python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n+python3 $CHECKOUT/x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n     --stage 2 library/std \\\n     --rust-profile-generate=${RUSTC_PROFILE_DIRECTORY_ROOT}\n \n@@ -105,13 +133,13 @@ python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n # That's why we override the profile path to include the PID. This will produce many more profiling\n # files, but the resulting profile will produce a slightly faster rustc binary.\n LLVM_PROFILE_FILE=${RUSTC_PROFILE_DIRECTORY_ROOT}/default_%m_%p.profraw gather_profiles \\\n-  \"Check,Debug,Opt\" \"All\" \\\n-  \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n+    \"Check,Debug,Opt\" \"All\" \\\n+    \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n \n-RUSTC_PROFILE_MERGED_FILE=/tmp/rustc-pgo.profdata\n+RUSTC_PROFILE_MERGED_FILE=$PGO_TMP/rustc-pgo.profdata\n \n # Merge the profile data we gathered\n-./build/$PGO_HOST/llvm/bin/llvm-profdata \\\n+$BUILD_ARTIFACTS/llvm/bin/llvm-profdata \\\n     merge -o ${RUSTC_PROFILE_MERGED_FILE} ${RUSTC_PROFILE_DIRECTORY_ROOT}\n \n echo \"Rustc PGO statistics\"\n@@ -120,10 +148,13 @@ du -sh ${RUSTC_PROFILE_DIRECTORY_ROOT}\n echo \"Profile file count\"\n find ${RUSTC_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n \n+# We don't need the individual .profraw files now that they have been merged into a final .profdata\n+rm -r $RUSTC_PROFILE_DIRECTORY_ROOT\n+\n # Rustbuild currently doesn't support rebuilding LLVM when PGO options\n # change (or any other llvm-related options); so just clear out the relevant\n # directories ourselves.\n-rm -r ./build/$PGO_HOST/llvm ./build/$PGO_HOST/lld\n+rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n \n # This produces the actual final set of artifacts, using both the LLVM and rustc\n # collected profiling data."}]}