{"sha": "19d4ea1cbade2e261a783131ea5a9f30426ef36f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDRlYTFjYmFkZTJlMjYxYTc4MzEzMWVhNWE5ZjMwNDI2ZWYzNmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T20:42:39Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: De-`@str` the LLVM symbol list", "tree": {"sha": "e4cb71134b9fe892b42cbcea51cef228757f181d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cb71134b9fe892b42cbcea51cef228757f181d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d4ea1cbade2e261a783131ea5a9f30426ef36f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d4ea1cbade2e261a783131ea5a9f30426ef36f", "html_url": "https://github.com/rust-lang/rust/commit/19d4ea1cbade2e261a783131ea5a9f30426ef36f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d4ea1cbade2e261a783131ea5a9f30426ef36f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3a4e13f98125e550d0814fc69a93649eab8f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3a4e13f98125e550d0814fc69a93649eab8f0d", "html_url": "https://github.com/rust-lang/rust/commit/0f3a4e13f98125e550d0814fc69a93649eab8f0d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c74f201091dd3eb4023410ddc44ea9a5bdbaa713", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=19d4ea1cbade2e261a783131ea5a9f30426ef36f", "patch": "@@ -510,7 +510,7 @@ pub fn set_no_split_stack(f: ValueRef) {\n \n // Double-check that we never ask LLVM to declare the same symbol twice. It\n // silently mangles such symbols, breaking our linkage model.\n-pub fn note_unique_llvm_symbol(ccx: &CrateContext, sym: @str) {\n+pub fn note_unique_llvm_symbol(ccx: &CrateContext, sym: ~str) {\n     let mut all_llvm_symbols = ccx.all_llvm_symbols.borrow_mut();\n     if all_llvm_symbols.get().contains(&sym) {\n         ccx.sess.bug(~\"duplicate LLVM symbol: \" + sym);"}, {"sha": "2872d5566339bb0b5f65c795a2ac8b590267f11b", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=19d4ea1cbade2e261a783131ea5a9f30426ef36f", "patch": "@@ -97,7 +97,7 @@ pub struct CrateContext {\n      adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n      symbol_hasher: RefCell<Sha256>,\n      type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n-     all_llvm_symbols: RefCell<HashSet<@str>>,\n+     all_llvm_symbols: RefCell<HashSet<~str>>,\n      tcx: ty::ctxt,\n      maps: astencode::Maps,\n      stats: @Stats,"}, {"sha": "8002559e3f9d47a1d44ec6780d2dc90bffa99cc4", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d4ea1cbade2e261a783131ea5a9f30426ef36f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=19d4ea1cbade2e261a783131ea5a9f30426ef36f", "patch": "@@ -471,14 +471,14 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n \n     let llsize = llsize_of(ccx, llty);\n     let llalign = llalign_of(ccx, llty);\n-    let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\").to_managed();\n-    note_unique_llvm_symbol(ccx, name);\n+    let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\");\n     debug!(\"+++ declare_tydesc {} {}\", ppaux::ty_to_str(ccx.tcx, t), name);\n     let gvar = name.with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type.to_ref(), buf)\n         }\n     });\n+    note_unique_llvm_symbol(ccx, name);\n \n     let ty_name = token::intern_and_get_ident(ppaux::ty_to_str(ccx.tcx, t));\n     let ty_name = C_str_slice(ccx, ty_name);\n@@ -499,10 +499,10 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,\n                         name: &str) -> ValueRef {\n     let _icx = push_ctxt(\"declare_generic_glue\");\n-    let fn_nm = mangle_internal_name_by_type_and_seq(ccx, t, (~\"glue_\" + name)).to_managed();\n+    let fn_nm = mangle_internal_name_by_type_and_seq(ccx, t, ~\"glue_\" + name);\n     debug!(\"{} is for type {}\", fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n-    note_unique_llvm_symbol(ccx, fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty, ty::mk_nil());\n+    note_unique_llvm_symbol(ccx, fn_nm);\n     return llfn;\n }\n "}]}