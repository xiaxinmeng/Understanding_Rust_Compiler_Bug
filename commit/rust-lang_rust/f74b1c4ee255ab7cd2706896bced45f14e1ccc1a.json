{"sha": "f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGIxYzRlZTI1NWFiN2NkMjcwNjg5NmJjZWQ0NWYxNGUxY2NjMWE=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-04T21:06:08Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-05T07:24:10Z"}, "message": "Categorize upvars in `Fn` unboxed closures as freely aliasable\n\nThis causes borrowck to correctly reject mutation or mutable borrows\nof upvars in `Fn` unboxed closures since the closure environment is\naliasable.\n\nThis also tracks the responsible closure in the aliasability\ninformation returned and uses it to give a helpful diagnostic.\n\nCloses issue #17780", "tree": {"sha": "481c425b441cce2c9760b4d3126f3ba618cbebe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481c425b441cce2c9760b4d3126f3ba618cbebe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "html_url": "https://github.com/rust-lang/rust/commit/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3ab731a3c762829e3f2bec5bfbaa3a3a84689f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3ab731a3c762829e3f2bec5bfbaa3a3a84689f", "html_url": "https://github.com/rust-lang/rust/commit/ea3ab731a3c762829e3f2bec5bfbaa3a3a84689f"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "df18ec30f0ee3acde38ed5610d4fe2b65b6892fe", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "patch": "@@ -854,6 +854,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                     check_for_aliasability_violation(this, span, b.clone());\n                 }\n \n+                mc::cat_copied_upvar(mc::CopiedUpvar {\n+                    kind: mc::Unboxed(ty::FnUnboxedClosureKind), ..}) => {\n+                    // Prohibit writes to capture-by-move upvars in non-once closures\n+                    check_for_aliasability_violation(this, span, guarantor.clone());\n+                }\n+\n                 _ => {}\n             }\n "}, {"sha": "a86ae420065951e2a8c1da92997e58d9eca18ef3", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "patch": "@@ -728,6 +728,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     format!(\"{} in an aliasable location\",\n                              prefix).as_slice());\n             }\n+            mc::AliasableClosure(id) => {\n+                self.tcx.sess.span_err(span,\n+                                       format!(\"{} in a free variable from an \\\n+                                               immutable unboxed closure\", prefix).as_slice());\n+                span_note!(self.tcx.sess, self.tcx.map.span(id),\n+                           \"consider changing this closure to take self by mutable reference\");\n+            }\n             mc::AliasableStatic(..) |\n             mc::AliasableStaticMut(..) => {\n                 self.tcx.sess.span_err("}, {"sha": "9a0885ca30135776a118b3f2101c922af2093755", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b1c4ee255ab7cd2706896bced45f14e1ccc1a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f74b1c4ee255ab7cd2706896bced45f14e1ccc1a", "patch": "@@ -83,7 +83,8 @@ pub enum categorization {\n     cat_rvalue(ty::Region),            // temporary val, argument is its scope\n     cat_static_item,\n     cat_copied_upvar(CopiedUpvar),     // upvar copied into proc env\n-    cat_upvar(ty::UpvarId, ty::UpvarBorrow, Option<ty::UnboxedClosureKind>), // by ref upvar from stack or unboxed closure\n+    cat_upvar(ty::UpvarId, ty::UpvarBorrow,\n+              Option<ty::UnboxedClosureKind>), // by ref upvar from stack or unboxed closure\n     cat_local(ast::NodeId),            // local variable\n     cat_deref(cmt, uint, PointerKind), // deref of a ptr\n     cat_interior(cmt, InteriorKind),   // something interior: field, tuple, etc\n@@ -1246,6 +1247,7 @@ pub enum InteriorSafety {\n \n pub enum AliasableReason {\n     AliasableBorrowed,\n+    AliasableClosure(ast::NodeId), // Aliasable due to capture by unboxed closure expr\n     AliasableOther,\n     AliasableStatic(InteriorSafety),\n     AliasableStaticMut(InteriorSafety),\n@@ -1302,7 +1304,6 @@ impl cmt_ {\n \n             cat_rvalue(..) |\n             cat_local(..) |\n-            cat_upvar(..) |\n             cat_deref(_, _, UnsafePtr(..)) => { // yes, it's aliasable, but...\n                 None\n             }\n@@ -1317,6 +1318,13 @@ impl cmt_ {\n                 }\n             }\n \n+            cat_upvar(ty::UpvarId { closure_expr_id: id, .. }, _,\n+                      Some(ty::FnUnboxedClosureKind)) => {\n+                Some(AliasableClosure(id))\n+            }\n+\n+            cat_upvar(..) => None,\n+\n             cat_static_item(..) => {\n                 let int_safe = if ty::type_interior_is_unsafe(ctxt, self.ty) {\n                     InteriorUnsafe"}]}