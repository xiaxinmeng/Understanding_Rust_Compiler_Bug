{"sha": "fd40f519c57f65803c2660bd5d89eb6e1214a340", "node_id": "C_kwDOAAsO6NoAKGZkNDBmNTE5YzU3ZjY1ODAzYzI2NjBiZDVkODllYjZlMTIxNGEzNDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T15:04:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T15:04:30Z"}, "message": "Rollup merge of #109959 - JakobDegen:transmute-validate, r=compiler-errors\n\nFix transmute intrinsic mir validation ICE\n\nI stumbled across this at work, the minimal reproducer is included as a test which ICEs before this change.\n\nI'm not 100% sure this is the right fix, but it matches what we do in `mir_assign_valid_types` so seems reasonable at least.\n\nfixes #110151\n\nr? `@lcnr` since they've been keeping the relevant logic correct, cc `@scottmcm`", "tree": {"sha": "9cdf64847273061d31f64c0fe59a2c01737bc578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdf64847273061d31f64c0fe59a2c01737bc578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd40f519c57f65803c2660bd5d89eb6e1214a340", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNsh+CRBK7hj4Ov3rIwAAYpoIAIxQxD66TySZrKejH1uzwssr\nH1rQv3FU/Vg7v1KZsJr7Zob7pu4h0S1weEeadzOPcFS/BHzWTu2bIK7YPT9duzqw\nG+K8EXR07upvVOMppNZy7BrPf0rYdhLHQ/2KHEAxF4S0pEso6VM+G+rvjvhxPV29\nhMNsa5MzOuizws9NnWlXKlY8PXRvw630pHMGZlR6p/MjraPBqy/5j4PGm9voV8l7\n5cEytNVA4LP41dPLiPqUVNaDHeJ0Zs5Gw7l9wrN8FMPPQY20Yhwb9AhyLgxodc9a\nqtA81JTITHAP84wuZC5jRxL9YbLXZfFcXQ8mGbV+7kzoyY9YZgBYc4B6hrqWrkE=\n=8yBb\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cdf64847273061d31f64c0fe59a2c01737bc578\nparent 661b33f5247debc4e0cd948caa388997e18e9cb8\nparent d8ed2fb0bb8aecfe7622134d5aba7b670056ee6d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681311870 +0200\ncommitter GitHub <noreply@github.com> 1681311870 +0200\n\nRollup merge of #109959 - JakobDegen:transmute-validate, r=compiler-errors\n\nFix transmute intrinsic mir validation ICE\n\nI stumbled across this at work, the minimal reproducer is included as a test which ICEs before this change.\n\nI'm not 100% sure this is the right fix, but it matches what we do in `mir_assign_valid_types` so seems reasonable at least.\n\nfixes #110151\n\nr? `@lcnr` since they've been keeping the relevant logic correct, cc `@scottmcm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd40f519c57f65803c2660bd5d89eb6e1214a340", "html_url": "https://github.com/rust-lang/rust/commit/fd40f519c57f65803c2660bd5d89eb6e1214a340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd40f519c57f65803c2660bd5d89eb6e1214a340/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661b33f5247debc4e0cd948caa388997e18e9cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/661b33f5247debc4e0cd948caa388997e18e9cb8", "html_url": "https://github.com/rust-lang/rust/commit/661b33f5247debc4e0cd948caa388997e18e9cb8"}, {"sha": "d8ed2fb0bb8aecfe7622134d5aba7b670056ee6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed2fb0bb8aecfe7622134d5aba7b670056ee6d", "html_url": "https://github.com/rust-lang/rust/commit/d8ed2fb0bb8aecfe7622134d5aba7b670056ee6d"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "d4bed97380ba18f703ff4212502acd8246b0ce3c", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd40f519c57f65803c2660bd5d89eb6e1214a340/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd40f519c57f65803c2660bd5d89eb6e1214a340/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=fd40f519c57f65803c2660bd5d89eb6e1214a340", "patch": "@@ -679,13 +679,21 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             // Unlike `mem::transmute`, a MIR `Transmute` is well-formed\n                             // for any two `Sized` types, just potentially UB to run.\n \n-                            if !op_ty.is_sized(self.tcx, self.param_env) {\n+                            if !self\n+                                .tcx\n+                                .normalize_erasing_regions(self.param_env, op_ty)\n+                                .is_sized(self.tcx, self.param_env)\n+                            {\n                                 self.fail(\n                                     location,\n                                     format!(\"Cannot transmute from non-`Sized` type {op_ty:?}\"),\n                                 );\n                             }\n-                            if !target_type.is_sized(self.tcx, self.param_env) {\n+                            if !self\n+                                .tcx\n+                                .normalize_erasing_regions(self.param_env, *target_type)\n+                                .is_sized(self.tcx, self.param_env)\n+                            {\n                                 self.fail(\n                                     location,\n                                     format!(\"Cannot transmute to non-`Sized` type {target_type:?}\"),"}, {"sha": "eaaf7eb3ecd09bd5b2c48c616587e46efe738807", "filename": "tests/ui/mir/validate/transmute_cast_sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd40f519c57f65803c2660bd5d89eb6e1214a340/tests%2Fui%2Fmir%2Fvalidate%2Ftransmute_cast_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd40f519c57f65803c2660bd5d89eb6e1214a340/tests%2Fui%2Fmir%2Fvalidate%2Ftransmute_cast_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fvalidate%2Ftransmute_cast_sized.rs?ref=fd40f519c57f65803c2660bd5d89eb6e1214a340", "patch": "@@ -0,0 +1,17 @@\n+// build-pass\n+// compile-flags: -Zvalidate-mir\n+// edition: 2021\n+\n+#![crate_type = \"lib\"]\n+\n+// Use `PhantomData` to get target-independent size\n+async fn get(_r: std::marker::PhantomData<&i32>) {\n+    loop {}\n+}\n+\n+pub fn check() {\n+    let mut v = get(loop {});\n+    let _ = || unsafe {\n+        v = std::mem::transmute([0_u8; 1]);\n+    };\n+}"}]}