{"sha": "b4748679611c97c09cfb7096917d7830c410a4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NzQ4Njc5NjExYzk3YzA5Y2ZiNzA5NjkxN2Q3ODMwYzQxMGE0YWQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T16:58:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:48Z"}, "message": "Rename `ForeignItem.node` to `ForeignItem.kind`", "tree": {"sha": "460ef79a3b20e110d88851464200f433a439e59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460ef79a3b20e110d88851464200f433a439e59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4748679611c97c09cfb7096917d7830c410a4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4748679611c97c09cfb7096917d7830c410a4ad", "html_url": "https://github.com/rust-lang/rust/commit/b4748679611c97c09cfb7096917d7830c410a4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4748679611c97c09cfb7096917d7830c410a4ad/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc94cc3c2ccef8b4d393910bb978a6487db1202", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc94cc3c2ccef8b4d393910bb978a6487db1202", "html_url": "https://github.com/rust-lang/rust/commit/7bc94cc3c2ccef8b4d393910bb978a6487db1202"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "d1ebdd2f086ab3b55164ef706f314140ca08dab2", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -743,7 +743,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.ident);\n \n-    match foreign_item.node {\n+    match foreign_item.kind {\n         ForeignItemKind::Fn(ref function_declaration, ref param_names, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_fn_decl(function_declaration);"}, {"sha": "7159db736a7115b5f05fa1ace63ff3d15d0db07b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -711,7 +711,7 @@ impl LoweringContext<'_> {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n-            node: match i.node {\n+            kind: match i.kind {\n                 ForeignItemKind::Fn(ref fdec, ref generics) => {\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n                         generics,"}, {"sha": "1997e2aab35e8173b0d662ef0bfe7667bd7f8241", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -157,7 +157,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n-        if let ForeignItemKind::Macro(_) = foreign_item.node {\n+        if let ForeignItemKind::Macro(_) = foreign_item.kind {\n             return self.visit_macro_invoc(foreign_item.id);\n         }\n "}, {"sha": "d4efe0297b67180ad3e10367f71516d307953488", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -313,7 +313,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::ForeignItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     ForeignItemKind::Fn(..) => DefKind::Fn,\n                     ForeignItemKind::Static(..) => DefKind::Static,\n                     ForeignItemKind::Type => DefKind::ForeignTy,\n@@ -820,7 +820,7 @@ impl<'hir> Map<'hir> {\n                 }\n             },\n             Node::ForeignItem(fi) => {\n-                match fi.node {\n+                match fi.kind {\n                     ForeignItemKind::Fn(..) => true,\n                     _ => false,\n                 }"}, {"sha": "01cb5cc9bc105610738d037d9f7b29e7ccd9e53c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -2581,7 +2581,7 @@ pub struct ForeignItem {\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n     pub attrs: HirVec<Attribute>,\n-    pub node: ForeignItemKind,\n+    pub kind: ForeignItemKind,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub vis: Visibility,"}, {"sha": "91f2c5a0aaf856be21ccc28b00e2ea6c7b8dcc2f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -372,7 +372,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n         self.print_outer_attributes(&item.attrs);\n-        match item.node {\n+        match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, ref arg_names, ref generics) => {\n                 self.head(\"\");\n                 self.print_fn(decl,"}, {"sha": "7c75a1447e26d6630b5bed4e9f3e92210863871c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -613,7 +613,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) {\n         if self.should_warn_about_foreign_item(fi) {\n             self.warn_dead_code(fi.hir_id, fi.span, fi.ident.name,\n-                                fi.node.descriptive_variant(), \"used\");\n+                                fi.kind.descriptive_variant(), \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }"}, {"sha": "94a85a97d36c9801f33301ccff749795a62ff038", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n-        match item.node {\n+        match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n                 self.visit_early_late(None, decl, generics, |this| {\n                     intravisit::walk_foreign_item(this, item);"}, {"sha": "9e053ce4e69c277232f445abc283d4b52fe16dab", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -382,7 +382,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n-        self.check_missing_stability(i.hir_id, i.span, i.node.descriptive_variant());\n+        self.check_missing_stability(i.hir_id, i.span, i.kind.descriptive_variant());\n         intravisit::walk_foreign_item(self, i);\n     }\n "}, {"sha": "cba5ee3260c16a8ed58d9cd4aad28d56500b6280", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -249,7 +249,7 @@ impl CodegenCx<'ll, 'tcx> {\n                 }\n \n                 Node::ForeignItem(&hir::ForeignItem {\n-                    ref attrs, span, node: hir::ForeignItemKind::Static(..), ..\n+                    ref attrs, span, kind: hir::ForeignItemKind::Static(..), ..\n                 }) => {\n                     let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n                     (check_and_apply_linkage(&self, &fn_attrs, ty, sym, span), attrs)"}, {"sha": "e4567dc8265d84cfca08c0393631aae3a7d4172c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n         if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n             // Don't worry about types in internal ABIs.\n         } else {\n-            match it.node {\n+            match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);\n                 }"}, {"sha": "0bb4f52be14c29d7a4b79ebc3de62446bc4a5a29", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1677,7 +1677,7 @@ impl EncodeContext<'tcx> {\n \n         debug!(\"EncodeContext::encode_info_for_foreign_item({:?})\", def_id);\n \n-        let kind = match nitem.node {\n+        let kind = match nitem.kind {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 let data = FnData {\n                     asyncness: hir::IsAsync::NotAsync,\n@@ -1703,7 +1703,7 @@ impl EncodeContext<'tcx> {\n \n             ty: Some(self.encode_item_type(def_id)),\n             inherent_impls: Lazy::empty(),\n-            variances: match nitem.node {\n+            variances: match nitem.kind {\n                 hir::ForeignItemKind::Fn(..) => self.encode_variances_of(def_id),\n                 _ => Lazy::empty(),\n             },"}, {"sha": "0339b85ca55e31029b9335a3b86ab473b83caa44", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -682,7 +682,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n-        match fi.node {\n+        match fi.kind {\n             ForeignItemKind::Fn(ref decl, _) => {\n                 self.check_fn_decl(decl);\n                 self.check_decl_no_pat(decl, |span, _| {"}, {"sha": "9f0337f21c131c116e83486034bd6193fcba1d9f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -813,7 +813,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n-        let (res, ns) = match item.node {\n+        let (res, ns) = match item.kind {\n             ForeignItemKind::Fn(..) => {\n                 (Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n@@ -1169,7 +1169,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {\n-        if let ForeignItemKind::Macro(_) = foreign_item.node {\n+        if let ForeignItemKind::Macro(_) = foreign_item.kind {\n             self.visit_invoc(foreign_item.id);\n             return;\n         }"}, {"sha": "33a85c6c77026bd786cee1b857ca2620052e9d2b", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'tcx ForeignItem) {\n-        let generic_params = match foreign_item.node {\n+        let generic_params = match foreign_item.kind {\n             ForeignItemKind::Fn(_, ref generics) => {\n                 HasGenericParams(generics, ItemRibKind)\n             }"}, {"sha": "edd2db3c8f738bb2546d704d3010e1d17585e231", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1570,7 +1570,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n         let access = access_from!(self.save_ctxt, item, hir_id);\n \n-        match item.node {\n+        match item.kind {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(fn_data, DefData, item.span);"}, {"sha": "e3c898610cde0c8be1575cef14ab6c76d2c09441", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -130,7 +130,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n         let qualname = format!(\"::{}\",\n             self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n-        match item.node {\n+        match item.kind {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 filter!(self.span_utils, item.ident.span);\n "}, {"sha": "203bd4d4167e2f8467099164ad59fd4e35647dd7", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -765,7 +765,7 @@ impl Sig for ast::Variant {\n impl Sig for ast::ForeignItem {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n-        match self.node {\n+        match self.kind {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 let mut text = String::new();\n                 text.push_str(\"fn \");"}, {"sha": "a2fbf8128b5d129f01577ea73cbaf8bfedf662f1", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -212,7 +212,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n             _ => NodeKind::Other,\n         }\n \n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         }"}, {"sha": "d06d51dc819312c12978b7b95203d6b3cf2aa6e6", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -24,7 +24,7 @@ fn equate_intrinsic_type<'tcx>(\n ) {\n     let def_id = tcx.hir().local_def_id(it.hir_id);\n \n-    match it.node {\n+    match it.kind {\n         hir::ForeignItemKind::Fn(..) => {}\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622,\n@@ -37,7 +37,7 @@ fn equate_intrinsic_type<'tcx>(\n \n     let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n     if i_n_tps != n_tps {\n-        let span = match it.node {\n+        let span = match it.kind {\n             hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n             _ => bug!()\n         };"}, {"sha": "9f2c991fdd23697fb748bec1bf1199976f2eefdb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1588,7 +1588,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n                         ).emit();\n                     }\n \n-                    if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.node {\n+                    if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.kind {\n                         require_c_abi_if_c_variadic(tcx, fn_decl, m.abi, item.span);\n                     }\n                 }\n@@ -4242,7 +4242,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 Some(Node::ForeignItem(hir::ForeignItem {\n-                    node: hir::ForeignItemKind::Fn(_, idents, _),\n+                    kind: hir::ForeignItemKind::Fn(_, idents, _),\n                     ..\n                 })) |\n                 Some(Node::TraitItem(hir::TraitItem {"}, {"sha": "f4ba9fc03d3d071638f21ca8f02c70b2844505f5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -128,7 +128,7 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n             check_item_type(tcx, item.hir_id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod(ref module) => for it in module.items.iter() {\n-            if let hir::ForeignItemKind::Static(ref ty, ..) = it.node {\n+            if let hir::ForeignItemKind::Static(ref ty, ..) = it.kind {\n                 check_item_type(tcx, it.hir_id, ty.span, true);\n             }\n         },"}, {"sha": "1e642a8b9ccbb7fdcaa4af6b5e3203228e8b43ef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -312,7 +312,7 @@ fn type_param_predicates(\n             }\n         }\n \n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Fn(_, _, ref generics) => generics,\n             _ => return result,\n         },\n@@ -415,7 +415,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);\n-                if let hir::ForeignItemKind::Fn(..) = item.node {\n+                if let hir::ForeignItemKind::Fn(..) = item.kind {\n                     tcx.fn_sig(def_id);\n                 }\n             }\n@@ -872,7 +872,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             }\n             _ => None,\n         },\n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             hir::ForeignItemKind::Fn(ref fn_decl, _, ref generics) => {\n                 has_late_bound_regions(tcx, generics, fn_decl)\n             }\n@@ -977,7 +977,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             }\n         }\n \n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Static(..) => &no_generics,\n             ForeignItemKind::Fn(_, _, ref generics) => generics,\n             ForeignItemKind::Type => &no_generics,\n@@ -1331,7 +1331,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n             }\n         }\n \n-        Node::ForeignItem(foreign_item) => match foreign_item.node {\n+        Node::ForeignItem(foreign_item) => match foreign_item.kind {\n             ForeignItemKind::Fn(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n@@ -1823,7 +1823,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         },\n \n         ForeignItem(&hir::ForeignItem {\n-            node: ForeignItemKind::Fn(ref fn_decl, _, _),\n+            kind: ForeignItemKind::Fn(ref fn_decl, _, _),\n             ..\n         }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n@@ -2133,7 +2133,7 @@ fn explicit_predicates_of(\n             }\n         }\n \n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Static(..) => NO_GENERICS,\n             ForeignItemKind::Fn(_, _, ref generics) => generics,\n             ForeignItemKind::Type => NO_GENERICS,\n@@ -2420,7 +2420,7 @@ fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability>\n             kind: hir::ItemKind::Static(_, mutbl, _), ..\n         })) |\n         Some(Node::ForeignItem( &hir::ForeignItem {\n-            node: hir::ForeignItemKind::Static(_, mutbl), ..\n+            kind: hir::ForeignItemKind::Static(_, mutbl), ..\n         })) => Some(mutbl),\n         Some(_) => None,\n         _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),"}, {"sha": "4431abdaf50a0d2b33bc9b64485c34a88094dcd9", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n \n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n-                    if let hir::ForeignItemKind::Fn(..) = foreign_item.node {\n+                    if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n                         self.visit_node_helper(foreign_item.hir_id);\n                     }\n                 }"}, {"sha": "745dbee5fd320143de5aa92d9b0461efeed9c462", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -70,7 +70,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n             _ => unsupported()\n         },\n \n-        Node::ForeignItem(item) => match item.node {\n+        Node::ForeignItem(item) => match item.kind {\n             hir::ForeignItemKind::Fn(..) => {}\n \n             _ => unsupported()"}, {"sha": "863a0b267fddd6ef5c617b81190be6643b6de9b8", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n \n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n-                    if let hir::ForeignItemKind::Fn(..) = foreign_item.node {\n+                    if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n                         self.add_inferreds_for_item(foreign_item.hir_id);\n                     }\n                 }"}, {"sha": "b6a90e1fb988bf5f901a629dfd512bc9c49e9b61", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om.foreigns.push(ForeignItem {\n             id: item.hir_id,\n             name: renamed.unwrap_or(item.ident).name,\n-            kind: &item.node,\n+            kind: &item.kind,\n             vis: &item.vis,\n             attrs: &item.attrs,\n             whence: item.span"}, {"sha": "05ac90999afa1f58883fb289a50668356dbea7d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -2421,7 +2421,7 @@ impl ItemKind {\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub node: ForeignItemKind,\n+    pub kind: ForeignItemKind,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,"}, {"sha": "aa813c03c366178f1108b7ba1adca89137437892", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1378,7 +1378,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                      .make_foreign_items();\n         }\n \n-        if let ast::ForeignItemKind::Macro(mac) = foreign_item.node {\n+        if let ast::ForeignItemKind::Macro(mac) = foreign_item.kind {\n             self.check_attributes(&foreign_item.attrs);\n             return self.collect_bang(mac, foreign_item.span, AstFragmentKind::ForeignItems)\n                 .make_foreign_items();"}, {"sha": "8eecef1020d0aaf82eef2eda3134b66b685aecb0", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -65,7 +65,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         AstFragmentKind::ForeignItems =>\n             AstFragment::ForeignItems(smallvec![ast::ForeignItem {\n                 id, span, ident, vis, attrs,\n-                node: ast::ForeignItemKind::Macro(mac_placeholder()),\n+                kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n             }]),\n         AstFragmentKind::Pat => AstFragment::Pat(P(ast::Pat {\n             id, span, kind: ast::PatKind::Mac(mac_placeholder()),\n@@ -275,7 +275,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     }\n \n     fn flat_map_foreign_item(&mut self, item: ast::ForeignItem) -> SmallVec<[ast::ForeignItem; 1]> {\n-        match item.node {\n+        match item.kind {\n             ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n             _ => noop_flat_map_foreign_item(item, self),\n         }"}, {"sha": "622b48ab9281ef5b0198b8aa51c914f930f74c13", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -408,7 +408,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'a ast::ForeignItem) {\n-        match i.node {\n+        match i.kind {\n             ast::ForeignItemKind::Fn(..) |\n             ast::ForeignItemKind::Static(..) => {\n                 let link_name = attr::first_attr_value_str_by_name(&i.attrs, sym::link_name);"}, {"sha": "ec4ab02444f8e5b20c7e118648f8d251ca63c904", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1035,10 +1035,10 @@ pub fn noop_flat_map_item<T: MutVisitor>(mut item: P<Item>, visitor: &mut T)\n pub fn noop_flat_map_foreign_item<T: MutVisitor>(mut item: ForeignItem, visitor: &mut T)\n     -> SmallVec<[ForeignItem; 1]>\n {\n-    let ForeignItem { ident, attrs, node, id, span, vis } = &mut item;\n+    let ForeignItem { ident, attrs, kind, id, span, vis } = &mut item;\n     visitor.visit_ident(ident);\n     visit_attrs(attrs, visitor);\n-    match node {\n+    match kind {\n         ForeignItemKind::Fn(fdec, generics) => {\n             visitor.visit_fn_decl(fdec);\n             visitor.visit_generics(generics);"}, {"sha": "370030d02c717f30309d7066de0360685187aaec", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1383,7 +1383,7 @@ impl<'a> Parser<'a> {\n                         id: DUMMY_NODE_ID,\n                         attrs,\n                         vis: visibility,\n-                        node: ForeignItemKind::Macro(mac),\n+                        kind: ForeignItemKind::Macro(mac),\n                     }\n                 )\n             }\n@@ -1415,7 +1415,7 @@ impl<'a> Parser<'a> {\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n-            node: ForeignItemKind::Fn(decl, generics),\n+            kind: ForeignItemKind::Fn(decl, generics),\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis,\n@@ -1435,7 +1435,7 @@ impl<'a> Parser<'a> {\n         Ok(ForeignItem {\n             ident,\n             attrs,\n-            node: ForeignItemKind::Static(ty, mutbl),\n+            kind: ForeignItemKind::Static(ty, mutbl),\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis,\n@@ -1453,7 +1453,7 @@ impl<'a> Parser<'a> {\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n-            node: ForeignItemKind::Ty,\n+            kind: ForeignItemKind::Ty,\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis"}, {"sha": "3cf5e4a248cb1d7f150dcc89f5f7046ffd5e0a96", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -1060,7 +1060,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n         self.print_outer_attributes(&item.attrs);\n-        match item.node {\n+        match item.kind {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 self.head(\"\");\n                 self.print_fn(decl, ast::FnHeader::default(),"}, {"sha": "a36783e2b642dcdbd8e5afa24dde4d2897939117", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4748679611c97c09cfb7096917d7830c410a4ad/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b4748679611c97c09cfb7096917d7830c410a4ad", "patch": "@@ -486,7 +486,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, foreign_item: &'a\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.ident);\n \n-    match foreign_item.node {\n+    match foreign_item.kind {\n         ForeignItemKind::Fn(ref function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration);\n             visitor.visit_generics(generics)"}]}