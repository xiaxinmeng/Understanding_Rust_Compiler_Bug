{"sha": "6a2e495d673932526676ca6980e0ea8da14725dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMmU0OTVkNjczOTMyNTI2Njc2Y2E2OTgwZTBlYThkYTE0NzI1ZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-09T23:25:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-09T23:26:15Z"}, "message": "rt: Remove unused command line parsing", "tree": {"sha": "9d2770ab3a7c0747c4faacf415f3af7a7f2ce0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2770ab3a7c0747c4faacf415f3af7a7f2ce0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2e495d673932526676ca6980e0ea8da14725dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2e495d673932526676ca6980e0ea8da14725dd", "html_url": "https://github.com/rust-lang/rust/commit/6a2e495d673932526676ca6980e0ea8da14725dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2e495d673932526676ca6980e0ea8da14725dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b92962aa29b0116015f99c1666ecf6288303c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b92962aa29b0116015f99c1666ecf6288303c65", "html_url": "https://github.com/rust-lang/rust/commit/2b92962aa29b0116015f99c1666ecf6288303c65"}], "stats": {"total": 72, "additions": 1, "deletions": 71}, "files": [{"sha": "f21a7441640c0b0edb0a86cf66ea617d487726b9", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 71, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6a2e495d673932526676ca6980e0ea8da14725dd/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6a2e495d673932526676ca6980e0ea8da14725dd/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=6a2e495d673932526676ca6980e0ea8da14725dd", "patch": "@@ -19,64 +19,6 @@\n #include \"rust_scheduler.h\"\n #include \"rust_gc_metadata.h\"\n \n-// Creates a rust argument vector from the platform argument vector\n-struct\n-command_line_args : public kernel_owned<command_line_args>\n-{\n-    rust_kernel *kernel;\n-    rust_task *task;\n-    int argc;\n-    char **argv;\n-\n-    // [str] passed to rust_task::start.\n-    rust_vec_box *args;\n-\n-    command_line_args(rust_task *task,\n-                      int sys_argc,\n-                      char **sys_argv)\n-        : kernel(task->kernel),\n-          task(task),\n-          argc(sys_argc),\n-          argv(sys_argv)\n-    {\n-#if defined(__WIN32__)\n-        LPCWSTR cmdline = GetCommandLineW();\n-        LPWSTR *wargv = CommandLineToArgvW(cmdline, &argc);\n-        kernel->win32_require(\"CommandLineToArgvW\", wargv != NULL);\n-        argv = (char **) kernel->malloc(sizeof(char*) * argc,\n-                                        \"win32 command line\");\n-        for (int i = 0; i < argc; ++i) {\n-            int n_chars = WideCharToMultiByte(CP_UTF8, 0, wargv[i], -1,\n-                                              NULL, 0, NULL, NULL);\n-            kernel->win32_require(\"WideCharToMultiByte(0)\", n_chars != 0);\n-            argv[i] = (char *) kernel->malloc(n_chars,\n-                                              \"win32 command line arg\");\n-            n_chars = WideCharToMultiByte(CP_UTF8, 0, wargv[i], -1,\n-                                          argv[i], n_chars, NULL, NULL);\n-            kernel->win32_require(\"WideCharToMultiByte(1)\", n_chars != 0);\n-        }\n-        LocalFree(wargv);\n-#endif\n-\n-        args = make_str_vec(kernel, argc, argv);\n-    }\n-\n-    ~command_line_args() {\n-        for (int i = 0; i < argc; ++i) {\n-            rust_vec *s = ((rust_vec**)&args->body.data)[i];\n-            kernel->free(s);\n-        }\n-        kernel->free(args);\n-\n-#ifdef __WIN32__\n-        for (int i = 0; i < argc; ++i) {\n-            kernel->free(argv[i]);\n-        }\n-        kernel->free(argv);\n-#endif\n-    }\n-};\n-\n void* global_crate_map = NULL;\n \n /**\n@@ -107,19 +49,8 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     assert(sched != NULL);\n     rust_task *root_task = sched->create_task(NULL, \"main\");\n \n-    // Build the command line arguments to pass to the root task\n-    command_line_args *args\n-        = new (kernel, \"main command line args\")\n-        command_line_args(root_task, argc, argv);\n-\n-    LOG(root_task, dom, \"startup: %d args in 0x%\" PRIxPTR,\n-        args->argc, (uintptr_t)args->args);\n-    for (int i = 0; i < args->argc; i++) {\n-        LOG(root_task, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n-    }\n-\n     // Schedule the main Rust task\n-    root_task->start((spawn_fn)main_fn, NULL, args->args);\n+    root_task->start((spawn_fn)main_fn, NULL, NULL);\n \n     // At this point the task lifecycle is responsible for it\n     // and our pointer may not be valid\n@@ -128,7 +59,6 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     // Run the kernel until all schedulers exit\n     int ret = kernel->run();\n \n-    delete args;\n     delete kernel;\n     free_env(env);\n "}]}