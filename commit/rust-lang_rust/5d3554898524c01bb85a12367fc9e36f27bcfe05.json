{"sha": "5d3554898524c01bb85a12367fc9e36f27bcfe05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzU1NDg5ODUyNGMwMWJiODVhMTIzNjdmYzllMzZmMjdiY2ZlMDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-23T17:44:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-23T17:52:12Z"}, "message": "helpers.rs cleanup", "tree": {"sha": "c829f870ecfe8c0d5f4f8dfd33fcced7b0edb483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c829f870ecfe8c0d5f4f8dfd33fcced7b0edb483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d3554898524c01bb85a12367fc9e36f27bcfe05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3554898524c01bb85a12367fc9e36f27bcfe05", "html_url": "https://github.com/rust-lang/rust/commit/5d3554898524c01bb85a12367fc9e36f27bcfe05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d3554898524c01bb85a12367fc9e36f27bcfe05/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "html_url": "https://github.com/rust-lang/rust/commit/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a387827650592e0c4d075c6b03dd59e46c33b2be", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d3554898524c01bb85a12367fc9e36f27bcfe05/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3554898524c01bb85a12367fc9e36f27bcfe05/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5d3554898524c01bb85a12367fc9e36f27bcfe05", "patch": "@@ -359,25 +359,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Helper function used inside the shims of foreign functions to check that isolation is\n     /// disabled. It returns an error using the `name` of the foreign function if this is not the\n     /// case.\n-    fn check_no_isolation(&mut self, name: &str) -> InterpResult<'tcx> {\n-        if !self.eval_context_mut().machine.communicate {\n+    fn check_no_isolation(&self, name: &str) -> InterpResult<'tcx> {\n+        if !self.eval_context_ref().machine.communicate {\n             throw_unsup_format!(\n                 \"`{}` not available when isolation is enabled. Pass the flag `-Zmiri-disable-isolation` to disable it.\",\n-                name\n+                name,\n             )\n         }\n         Ok(())\n     }\n     /// Helper function used inside the shims of foreign functions to assert that the target\n     /// platform is `platform`. It panics showing a message with the `name` of the foreign function\n     /// if this is not the case.\n-    fn assert_platform(&mut self, platform: &str, name: &str) {\n+    fn assert_platform(&self, platform: &str, name: &str) {\n         assert_eq!(\n-            self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase(),\n+            self.eval_context_ref().tcx.sess.target.target.target_os.to_lowercase(),\n             platform,\n             \"`{}` is only available on the `{}` platform\",\n             name,\n-            platform\n+            platform,\n         )\n     }\n \n@@ -389,8 +389,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Gets the last error variable.\n-    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let this = self.eval_context_mut();\n+    fn get_last_error(&self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_ref();\n         let errno_place = this.machine.last_error.unwrap();\n         this.read_scalar(errno_place.into())?.not_undef()\n     }"}]}