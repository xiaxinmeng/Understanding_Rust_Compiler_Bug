{"sha": "bb017326bef9e0a7af87043d6e7ce7a62a52da75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMDE3MzI2YmVmOWUwYTdhZjg3MDQzZDZlN2NlN2E2MmE1MmRhNzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:37:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:37:02Z"}, "message": "Move some code around", "tree": {"sha": "3d13e889b443dd3833ab2693e2f27d70b320d38f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d13e889b443dd3833ab2693e2f27d70b320d38f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb017326bef9e0a7af87043d6e7ce7a62a52da75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb017326bef9e0a7af87043d6e7ce7a62a52da75", "html_url": "https://github.com/rust-lang/rust/commit/bb017326bef9e0a7af87043d6e7ce7a62a52da75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb017326bef9e0a7af87043d6e7ce7a62a52da75/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "html_url": "https://github.com/rust-lang/rust/commit/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec"}], "stats": {"total": 210, "additions": 104, "deletions": 106}, "files": [{"sha": "f077e8f9e4a5283521b32edfe587ca36f7060aec", "filename": "src/base.rs", "status": "modified", "additions": 38, "deletions": 104, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/bb017326bef9e0a7af87043d6e7ce7a62a52da75/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb017326bef9e0a7af87043d6e7ce7a62a52da75/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bb017326bef9e0a7af87043d6e7ce7a62a52da75", "patch": "@@ -1,121 +1,55 @@\n-use rustc_mir::monomorphize::MonoItem;\n-\n-use cretonne_module::{Module, Backend, FuncId, Linkage};\n-use cretonne_simplejit::{SimpleJITBuilder, SimpleJITBackend};\n-\n-use std::any::Any;\n-use std::collections::HashMap;\n-\n use prelude::*;\n \n-pub fn trans_crate<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Box<Any> {\n-    let link_meta = ::build_link_meta(tcx.crate_hash(LOCAL_CRATE));\n-    let metadata = tcx.encode_metadata(&link_meta);\n-\n-    let mut module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n-    let mut context = Context::new();\n-    let mut def_id_fn_id_map = HashMap::new();\n-\n-    {\n-        let mut cx = CodegenCx {\n-            tcx,\n-            module: &mut module,\n-            def_id_fn_id_map: &mut def_id_fn_id_map,\n-        };\n-        let cx = &mut cx;\n-\n-        for mono_item in\n-            collector::collect_crate_mono_items(\n-                tcx,\n-                collector::MonoItemCollectionMode::Eager\n-            ).0 {\n-            match mono_item {\n-                MonoItem::Fn(inst) => match inst {\n-                    Instance {\n-                        def: InstanceDef::Item(def_id),\n-                        substs,\n-                    } => {\n-                        let sig = tcx.fn_sig(def_id);\n-                        let sig = cton_sig_from_fn_sig(tcx, sig, substs);\n-                        let func_id = {\n-                            let module = &mut cx.module;\n-                            *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n-                                module.declare_function(&tcx.absolute_item_path_str(def_id), Linkage::Local, &sig).unwrap()\n-                            })\n-                        };\n-\n-                        let mut f = Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n+pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, context: &mut Context, mono_item: MonoItem<'tcx>) {\n+    let tcx = cx.tcx;\n+\n+    match mono_item {\n+        MonoItem::Fn(inst) => match inst {\n+            Instance {\n+                def: InstanceDef::Item(def_id),\n+                substs,\n+            } => {\n+                let sig = tcx.fn_sig(def_id);\n+                let sig = cton_sig_from_fn_sig(tcx, sig, substs);\n+                let func_id = {\n+                    let module = &mut cx.module;\n+                    *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n+                        module.declare_function(&tcx.absolute_item_path_str(def_id), Linkage::Local, &sig).unwrap()\n+                    })\n+                };\n \n-                        let mut mir = ::std::io::Cursor::new(Vec::new());\n-                        ::rustc_mir::util::write_mir_pretty(cx.tcx, Some(def_id), &mut mir).unwrap();\n-                        tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\", def_id, String::from_utf8_lossy(&mir.into_inner())));\n+                let mut f = Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n \n-                        trans_fn(cx, &mut f, inst);\n+                let mut mir = ::std::io::Cursor::new(Vec::new());\n+                ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n+                tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\", def_id, String::from_utf8_lossy(&mir.into_inner())));\n \n-                        let mut cton = String::new();\n-                        ::cretonne::codegen::write_function(&mut cton, &f, None).unwrap();\n-                        tcx.sess.warn(&cton);\n+                ::base::trans_fn(cx, &mut f, inst);\n \n-                        let flags = settings::Flags::new(settings::builder());\n-                        match ::cretonne::codegen::verify_function(&f, &flags) {\n-                            Ok(_) => {}\n-                            Err(err) => {\n-                                let pretty_error = ::cretonne::codegen::print_errors::pretty_verifier_error(&f, None, &err);\n-                                tcx.sess.fatal(&format!(\"cretonne verify error:\\n{}\", pretty_error));\n-                            }\n-                        }\n+                let mut cton = String::new();\n+                ::cretonne::codegen::write_function(&mut cton, &f, None).unwrap();\n+                tcx.sess.warn(&cton);\n \n-                        context.func = f;\n-                        cx.module.define_function(func_id, &mut context).unwrap();\n-                        context.clear();\n+                let flags = settings::Flags::new(settings::builder());\n+                match ::cretonne::codegen::verify_function(&f, &flags) {\n+                    Ok(_) => {}\n+                    Err(err) => {\n+                        let pretty_error = ::cretonne::codegen::print_errors::pretty_verifier_error(&f, None, &err);\n+                        tcx.sess.fatal(&format!(\"cretonne verify error:\\n{}\", pretty_error));\n                     }\n-                    _ => {}\n                 }\n-                _ => {}\n-            }\n-        }\n-    }\n-\n-    tcx.sess.warn(\"Compiled everything\");\n-\n-    module.finalize_all();\n-\n-    tcx.sess.warn(\"Finalized everything\");\n \n-    for (inst, func_id) in def_id_fn_id_map.iter() {\n-        //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n-        if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n-            continue;\n+                context.func = f;\n+                cx.module.define_function(func_id, context).unwrap();\n+                context.clear();\n+            }\n+            _ => {}\n         }\n-        let finalized_function: *const u8 = module.finalize_function(*func_id);\n-        /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n-        let mut res = 0u32;\n-        f(&mut res);\n-        tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n-        let f: extern \"C\" fn(&mut bool, &u8, bool) = unsafe { ::std::mem::transmute(finalized_function) };\n-        let mut res = false;\n-        f(&mut res, &3, false);\n-        tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));\n+        _ => {}\n     }\n-\n-    module.finish();\n-\n-    tcx.sess.fatal(\"unimplemented\");\n-\n-    Box::new(::OngoingCodegen {\n-        metadata: metadata,\n-        //translated_module: Module::new(::cretonne_faerie::FaerieBuilder::new(,\n-        crate_name: tcx.crate_name(LOCAL_CRATE),\n-    })\n-}\n-\n-struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &'a mut Module<B>,\n-    def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n }\n \n-fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut Function, instance: Instance<'tcx>) {\n+pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut Function, instance: Instance<'tcx>) {\n     let mir = cx.tcx.optimized_mir(instance.def_id());\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx: FunctionBuilder<Variable> = FunctionBuilder::new(f, &mut func_ctx);"}, {"sha": "d37352b89e8690a748b356afd505bd513a934f28", "filename": "src/lib.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bb017326bef9e0a7af87043d6e7ce7a62a52da75/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb017326bef9e0a7af87043d6e7ce7a62a52da75/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bb017326bef9e0a7af87043d6e7ce7a62a52da75", "patch": "@@ -37,6 +37,7 @@ mod base;\n mod common;\n \n mod prelude {\n+    pub use std::any::Any;\n     pub use std::collections::HashMap;\n \n     pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -49,20 +50,30 @@ mod prelude {\n         TypeFoldable, TypeVariants,\n     };\n     pub use rustc_data_structures::{indexed_vec::Idx, sync::Lrc};\n-    pub use rustc_mir::monomorphize::collector;\n+    pub use rustc_mir::monomorphize::{MonoItem, collector};\n \n     pub use cretonne::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, StackSlot,\n     };\n     pub use cretonne::codegen::Context;\n     pub use cretonne::prelude::*;\n+    pub use cretonne_module::{Module, Backend, FuncId, Linkage};\n+    pub use cretonne_simplejit::{SimpleJITBuilder, SimpleJITBackend};\n \n     pub use common::Variable;\n     pub use common::*;\n+\n+    pub use CodegenCx;\n }\n \n use prelude::*;\n \n+pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    pub module: &'a mut Module<B>,\n+    pub def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n+}\n+\n struct CretonneCodegenBackend(());\n \n struct OngoingCodegen {\n@@ -151,7 +162,60 @@ impl CodegenBackend for CretonneCodegenBackend {\n         }\n         tcx.sess.abort_if_errors();\n \n-        base::trans_crate(tcx)\n+        let link_meta = ::build_link_meta(tcx.crate_hash(LOCAL_CRATE));\n+        let metadata = tcx.encode_metadata(&link_meta);\n+\n+        let mut module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n+        let mut context = Context::new();\n+        let mut def_id_fn_id_map = HashMap::new();\n+\n+        {\n+            let mut cx = CodegenCx {\n+                tcx,\n+                module: &mut module,\n+                def_id_fn_id_map: &mut def_id_fn_id_map,\n+            };\n+\n+            for mono_item in\n+                collector::collect_crate_mono_items(\n+                    tcx,\n+                    collector::MonoItemCollectionMode::Eager\n+                ).0 {\n+                base::trans_mono_item(&mut cx, &mut context, mono_item)\n+            }\n+        }\n+\n+        tcx.sess.warn(\"Compiled everything\");\n+\n+        module.finalize_all();\n+\n+        tcx.sess.warn(\"Finalized everything\");\n+\n+        for (inst, func_id) in def_id_fn_id_map.iter() {\n+            //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n+            if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n+                continue;\n+            }\n+            let finalized_function: *const u8 = module.finalize_function(*func_id);\n+            /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n+            let mut res = 0u32;\n+            f(&mut res);\n+            tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n+            let f: extern \"C\" fn(&mut bool, &u8, bool) = unsafe { ::std::mem::transmute(finalized_function) };\n+            let mut res = false;\n+            f(&mut res, &3, false);\n+            tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));\n+        }\n+\n+        module.finish();\n+\n+        tcx.sess.fatal(\"unimplemented\");\n+\n+        Box::new(::OngoingCodegen {\n+            metadata: metadata,\n+            //translated_module: Module::new(::cretonne_faerie::FaerieBuilder::new(,\n+            crate_name: tcx.crate_name(LOCAL_CRATE),\n+        })\n     }\n \n     fn join_codegen_and_link("}]}