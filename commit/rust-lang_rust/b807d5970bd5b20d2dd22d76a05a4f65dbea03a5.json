{"sha": "b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "node_id": "C_kwDOAAsO6NoAKGI4MDdkNTk3MGJkNWIyMGQyZGQyMmQ3NmEwNWE0ZjY1ZGJlYTAzYTU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-04T01:56:59Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-22T22:14:33Z"}, "message": "Fold aarch64 feature +fp into +neon\n\nArm's FEAT_FP and Feat_AdvSIMD describe the same thing on AArch64:\nThe Neon unit, which handles both floating point and SIMD instructions.\nMoreover, a configuration for AArch64 must include both or neither.\nArm says \"entirely proprietary\" toolchains may omit floating point:\nhttps://developer.arm.com/documentation/102374/0101/Data-processing---floating-point\nIn the Programmer's Guide for Armv8-A, Arm says AArch64 can have\nboth FP and Neon or neither in custom implementations:\nhttps://developer.arm.com/documentation/den0024/a/AArch64-Floating-point-and-NEON\n\nIn \"Bare metal boot code for Armv8-A\", enabling Neon and FP\nis just disabling the same trap flag:\nhttps://developer.arm.com/documentation/dai0527/a\n\nIn an unlikely future where \"Neon and FP\" become unrelated,\nwe can add \"[+-]fp\" as its own feature flag.\nUntil then, we can simplify programming with Rust on AArch64 by\nfolding both into \"[+-]neon\", which is valid as it supersets both.\n\n\"[+-]neon\" is retained for niche uses such as firmware, kernels,\n\"I just hate floats\", and so on.", "tree": {"sha": "b68676f8ec66ef17dab7f634b03a6b77163bcb78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68676f8ec66ef17dab7f634b03a6b77163bcb78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "html_url": "https://github.com/rust-lang/rust/commit/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f11791af4f97572e7afd83f11cffe04bbbd12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f11791af4f97572e7afd83f11cffe04bbbd12f", "html_url": "https://github.com/rust-lang/rust/commit/58f11791af4f97572e7afd83f11cffe04bbbd12f"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "e70866a3b7015d10f2bba6b322d3d89030e03081", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -187,7 +187,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n         (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n         (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n-        (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],"}, {"sha": "e34ee10bb242c2c5ade16fe4441bee190b1765f4", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -43,10 +43,8 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd\n+    // FEAT_AdvSimd & FEAT_FP\n     (\"neon\", None),\n-    // FEAT_FP\n-    (\"fp\", None),\n     // FEAT_FP16\n     (\"fp16\", None),\n     // FEAT_SVE\n@@ -143,7 +141,6 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n-    &[\"fp\", \"neon\"],   // Silicon always has both, so avoid needless complications\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n "}, {"sha": "fba8cc6ef8b4aa4d516ee91ea556457996846742", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -64,7 +64,7 @@ impl AArch64InlineAsmRegClass {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n             Self::vreg | Self::vreg_low16 => types! {\n-                fp: I8, I16, I32, I64, F32, F64,\n+                neon: I8, I16, I32, I64, F32, F64,\n                     VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2), VecF64(1),\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },"}, {"sha": "a57a52d9bb04ef37507ea360c11ee46da4068871", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -29,7 +29,6 @@ fn aarch64_linux() {\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n     println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));"}, {"sha": "e9c974a01373282bd3aacf99d0a1f2cca5717d66", "filename": "src/test/run-make-fulldeps/simd-ffi/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -41,7 +41,7 @@ define MK_TARGETS\n # now.\n $(1): simd.rs\n \t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs \\\n-                -C target-feature='+fp,+neon,+sse2' -C extra-filename=-$(1)\n+                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)\n endef\n \n $(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}, {"sha": "1a3141019161d38291079031f1f7a3b001d3ec58", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "patch": "@@ -1,5 +1,5 @@\n // only-aarch64\n-// compile-flags: -C target-feature=+fp\n+// compile-flags: -C target-feature=+neon\n \n #![feature(asm_const, asm_sym)]\n "}]}