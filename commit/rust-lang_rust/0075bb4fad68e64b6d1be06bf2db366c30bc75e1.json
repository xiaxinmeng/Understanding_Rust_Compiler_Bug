{"sha": "0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "node_id": "C_kwDOAAsO6NoAKDAwNzViYjRmYWQ2OGU2NGI2ZDFiZTA2YmYyZGIzNjZjMzBiYzc1ZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T11:24:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T11:24:17Z"}, "message": "Auto merge of #91743 - cjgillot:enable_mir_inlining_inline_all, r=oli-obk\n\nEnable MIR inlining\n\nContinuation of https://github.com/rust-lang/rust/pull/82280 by `@wesleywiser.`\n\n#82280 has shown nice compile time wins could be obtained by enabling MIR inlining.\nMost of the issues in https://github.com/rust-lang/rust/issues/81567 are now fixed,\nexcept the interaction with polymorphization which is worked around specifically.\n\nI believe we can proceed with enabling MIR inlining in the near future\n(preferably just after beta branching, in case we discover new issues).\n\nSteps before merging:\n- [x] figure out the interaction with polymorphization;\n- [x] figure out how miri should deal with extern types;\n- [x] silence the extra arithmetic overflow warnings;\n- [x] remove the codegen fulfilment ICE;\n- [x] remove the type normalization ICEs while compiling nalgebra;\n- [ ] tweak the inlining threshold.", "tree": {"sha": "a5160fdc5cce917dc6bae3cb99277dab7b37e279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5160fdc5cce917dc6bae3cb99277dab7b37e279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "html_url": "https://github.com/rust-lang/rust/commit/0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedf78e56b2279cc869962feac5153b6ba7001ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedf78e56b2279cc869962feac5153b6ba7001ed", "html_url": "https://github.com/rust-lang/rust/commit/aedf78e56b2279cc869962feac5153b6ba7001ed"}, {"sha": "cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "html_url": "https://github.com/rust-lang/rust/commit/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd"}], "stats": {"total": 422, "additions": 252, "deletions": 170}, "files": [{"sha": "fa4ea426385612108c3b6177a3930824bca63c4b", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -686,6 +686,7 @@ fn codegen_stmt<'tcx>(\n                                 substs,\n                                 ty::ClosureKind::FnOnce,\n                             )\n+                            .expect(\"failed to normalize and resolve closure during codegen\")\n                             .polymorphize(fx.tcx);\n                             let func_ref = fx.get_function_ref(instance);\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);"}, {"sha": "a5806d64d437c75c73db5dbd89571d2413bf6818", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -213,6 +213,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     substs,\n                                     ty::ClosureKind::FnOnce,\n                                 )\n+                                .expect(\"failed to normalize and resolve closure during codegen\")\n                                 .polymorphize(bx.cx().tcx());\n                                 OperandValue::Immediate(bx.cx().get_fn_addr(instance))\n                             }"}, {"sha": "d09ab5fa3e85a12695795c60ced6b19173e1bf6c", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -100,7 +100,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             def_id,\n                             substs,\n                             ty::ClosureKind::FnOnce,\n-                        );\n+                        )\n+                        .ok_or_else(|| err_inval!(TooGeneric))?;\n                         let fn_ptr = self.create_fn_alloc_ptr(FnVal::Instance(instance));\n                         self.write_pointer(fn_ptr, dest)?;\n                     }"}, {"sha": "9d7905ed9a8398e2a027c11eafbe55bc5113a59c", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -44,22 +44,10 @@ where\n                         let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n-                        match (is_used, subst.needs_subst()) {\n-                            // Just in case there are closures or generators within this subst,\n-                            // recurse.\n-                            (true, true) => return subst.visit_with(self),\n-                            // Confirm that polymorphization replaced the parameter with\n-                            // `ty::Param`/`ty::ConstKind::Param`.\n-                            (false, true) if cfg!(debug_assertions) => match subst.unpack() {\n-                                ty::subst::GenericArgKind::Type(ty) => {\n-                                    assert!(matches!(ty.kind(), ty::Param(_)))\n-                                }\n-                                ty::subst::GenericArgKind::Const(ct) => {\n-                                    assert!(matches!(ct.kind(), ty::ConstKind::Param(_)))\n-                                }\n-                                ty::subst::GenericArgKind::Lifetime(..) => (),\n-                            },\n-                            _ => {}\n+                        // Just in case there are closures or generators within this subst,\n+                        // recurse.\n+                        if is_used && subst.needs_subst() {\n+                            return subst.visit_with(self);\n                         }\n                     }\n                     ControlFlow::CONTINUE"}, {"sha": "0e10fe25c10cb3c5de5e7a9626a7ca138a786672", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -496,12 +496,12 @@ impl<'tcx> Instance<'tcx> {\n         def_id: DefId,\n         substs: ty::SubstsRef<'tcx>,\n         requested_kind: ty::ClosureKind,\n-    ) -> Instance<'tcx> {\n+    ) -> Option<Instance<'tcx>> {\n         let actual_kind = substs.as_closure().kind();\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n             Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n-            _ => Instance::new(def_id, substs),\n+            _ => Some(Instance::new(def_id, substs)),\n         }\n     }\n \n@@ -515,7 +515,7 @@ impl<'tcx> Instance<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_did: DefId,\n         substs: ty::SubstsRef<'tcx>,\n-    ) -> Instance<'tcx> {\n+    ) -> Option<Instance<'tcx>> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n         let fn_once = tcx.require_lang_item(LangItem::FnOnce, None);\n         let call_once = tcx\n@@ -531,12 +531,13 @@ impl<'tcx> Instance<'tcx> {\n         let self_ty = tcx.mk_closure(closure_did, substs);\n \n         let sig = substs.as_closure().sig();\n-        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig);\n+        let sig =\n+            tcx.try_normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig).ok()?;\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n         debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-        Instance { def, substs }\n+        Some(Instance { def, substs })\n     }\n \n     /// Depending on the kind of `InstanceDef`, the MIR body associated with an"}, {"sha": "9d8a811659433f6b36b4b2043f714a228d24545d", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -112,6 +112,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.normalize_erasing_regions(param_env, value)\n     }\n \n+    /// If you have a `Binder<'tcx, T>`, you can do this to strip out the\n+    /// late-bound regions and then normalize the result, yielding up\n+    /// a `T` (with regions erased). This is appropriate when the\n+    /// binder is being instantiated at the call site.\n+    ///\n+    /// N.B., currently, higher-ranked type bounds inhibit\n+    /// normalization. Therefore, each time we erase them in\n+    /// codegen, we need to normalize the contents.\n+    pub fn try_normalize_erasing_late_bound_regions<T>(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: ty::Binder<'tcx, T>,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        let value = self.erase_late_bound_regions(value);\n+        self.try_normalize_erasing_regions(param_env, value)\n+    }\n+\n     /// Monomorphizes a type from the AST by first applying the\n     /// in-scope substitutions and then normalizing any associated\n     /// types."}, {"sha": "ce387cb4453c1a9cea25b72e788e3f5ee76236dc", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 68, "deletions": 32, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,14 +1,15 @@\n //! Inlining pass for MIR functions\n use crate::deref_separator::deref_finder;\n use rustc_attr::InlineAttr;\n+use rustc_const_eval::transform::validate::equal_up_to_regions;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -43,7 +44,15 @@ impl<'tcx> MirPass<'tcx> for Inline {\n             return enabled;\n         }\n \n-        sess.opts.mir_opt_level() >= 3\n+        match sess.mir_opt_level() {\n+            0 | 1 => false,\n+            2 => {\n+                (sess.opts.optimize == OptLevel::Default\n+                    || sess.opts.optimize == OptLevel::Aggressive)\n+                    && sess.opts.incremental == None\n+            }\n+            _ => true,\n+        }\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -76,13 +85,6 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     }\n \n     let param_env = tcx.param_env_reveal_all_normalized(def_id);\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let param_env = rustc_trait_selection::traits::normalize_param_env_or_error(\n-        tcx,\n-        def_id.to_def_id(),\n-        param_env,\n-        ObligationCause::misc(body.span, hir_id),\n-    );\n \n     let mut this = Inliner {\n         tcx,\n@@ -166,6 +168,45 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"failed to normalize callee body\");\n         };\n \n+        // Check call signature compatibility.\n+        // Normally, this shouldn't be required, but trait normalization failure can create a\n+        // validation ICE.\n+        let terminator = caller_body[callsite.block].terminator.as_ref().unwrap();\n+        let TerminatorKind::Call { args, destination, .. } = &terminator.kind else { bug!() };\n+        let destination_ty = destination.ty(&caller_body.local_decls, self.tcx).ty;\n+        let output_type = callee_body.return_ty();\n+        if !equal_up_to_regions(self.tcx, self.param_env, output_type, destination_ty) {\n+            trace!(?output_type, ?destination_ty);\n+            return Err(\"failed to normalize return type\");\n+        }\n+        if callsite.fn_sig.abi() == Abi::RustCall {\n+            let mut args = args.into_iter();\n+            let _ = args.next(); // Skip `self` argument.\n+            let arg_tuple_ty = args.next().unwrap().ty(&caller_body.local_decls, self.tcx);\n+            assert!(args.next().is_none());\n+\n+            let ty::Tuple(arg_tuple_tys) = arg_tuple_ty.kind() else {\n+                bug!(\"Closure arguments are not passed as a tuple\");\n+            };\n+\n+            for (arg_ty, input) in arg_tuple_tys.iter().zip(callee_body.args_iter().skip(1)) {\n+                let input_type = callee_body.local_decls[input].ty;\n+                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                    trace!(?arg_ty, ?input_type);\n+                    return Err(\"failed to normalize tuple argument type\");\n+                }\n+            }\n+        } else {\n+            for (arg, input) in args.iter().zip(callee_body.args_iter()) {\n+                let input_type = callee_body.local_decls[input].ty;\n+                let arg_ty = arg.ty(&caller_body.local_decls, self.tcx);\n+                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                    trace!(?arg_ty, ?input_type);\n+                    return Err(\"failed to normalize argument type\");\n+                }\n+            }\n+        }\n+\n         let old_blocks = caller_body.basic_blocks().next_index();\n         self.inline_call(caller_body, &callsite, callee_body);\n         let new_blocks = old_blocks..caller_body.basic_blocks().next_index();\n@@ -263,6 +304,10 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n+                if self.history.contains(&callee) {\n+                    return None;\n+                }\n+\n                 let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n \n                 return Some(CallSite {\n@@ -285,8 +330,14 @@ impl<'tcx> Inliner<'tcx> {\n         callsite: &CallSite<'tcx>,\n         callee_attrs: &CodegenFnAttrs,\n     ) -> Result<(), &'static str> {\n-        if let InlineAttr::Never = callee_attrs.inline {\n-            return Err(\"never inline hint\");\n+        match callee_attrs.inline {\n+            InlineAttr::Never => return Err(\"never inline hint\"),\n+            InlineAttr::Always | InlineAttr::Hint => {}\n+            InlineAttr::None => {\n+                if self.tcx.sess.mir_opt_level() <= 2 {\n+                    return Err(\"at mir-opt-level=2, only #[inline] is inlined\");\n+                }\n+            }\n         }\n \n         // Only inline local functions if they would be eligible for cross-crate\n@@ -407,22 +458,9 @@ impl<'tcx> Inliner<'tcx> {\n                 }\n \n                 TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n-                    if let ty::FnDef(def_id, substs) =\n+                    if let ty::FnDef(def_id, _) =\n                         *callsite.callee.subst_mir(self.tcx, &f.literal.ty()).kind()\n                     {\n-                        if let Ok(substs) =\n-                            self.tcx.try_normalize_erasing_regions(self.param_env, substs)\n-                        {\n-                            if let Ok(Some(instance)) =\n-                                Instance::resolve(self.tcx, self.param_env, def_id, substs)\n-                            {\n-                                if callsite.callee.def_id() == instance.def_id() {\n-                                    return Err(\"self-recursion\");\n-                                } else if self.history.contains(&instance) {\n-                                    return Err(\"already inlined\");\n-                                }\n-                            }\n-                        }\n                         // Don't give intrinsics the extra penalty for calls\n                         if tcx.is_intrinsic(def_id) {\n                             cost += INSTR_COST;\n@@ -482,14 +520,12 @@ impl<'tcx> Inliner<'tcx> {\n         if let InlineAttr::Always = callee_attrs.inline {\n             debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n             Ok(())\n+        } else if cost <= threshold {\n+            debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n+            Ok(())\n         } else {\n-            if cost <= threshold {\n-                debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n-                Ok(())\n-            } else {\n-                debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n-                Err(\"cost above threshold\")\n-            }\n+            debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n+            Err(\"cost above threshold\")\n         }\n     }\n "}, {"sha": "ee4a6bfba0e5b4092eff8fa1f05f1e408818985e", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n                 trace!(?caller, ?param_env, ?substs, \"cannot normalize, skipping\");\n                 continue;\n             };\n-            let Some(callee) = ty::Instance::resolve(tcx, param_env, callee, substs).unwrap() else {\n+            let Ok(Some(callee)) = ty::Instance::resolve(tcx, param_env, callee, substs) else {\n                 trace!(?callee, \"cannot resolve, skipping\");\n                 continue;\n             };"}, {"sha": "b9936e35b772e974bd520880b13e5d439760ece3", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -730,7 +730,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                             def_id,\n                             substs,\n                             ty::ClosureKind::FnOnce,\n-                        );\n+                        )\n+                        .expect(\"failed to normalize and resolve closure during codegen\");\n                         if should_codegen_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(self.tcx, instance, span));\n                         }"}, {"sha": "d08fe6dada104f4f645a8c8c5b4045d00168d660", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -332,12 +332,12 @@ fn resolve_associated_item<'tcx>(\n         }),\n         traits::ImplSource::Closure(closure_data) => {\n             let trait_closure_kind = tcx.fn_trait_kind_from_lang_item(trait_id).unwrap();\n-            Some(Instance::resolve_closure(\n+            Instance::resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,\n                 closure_data.substs,\n                 trait_closure_kind,\n-            ))\n+            )\n         }\n         traits::ImplSource::FnPointer(ref data) => match data.fn_ty.kind() {\n             ty::FnDef(..) | ty::FnPtr(..) => Some(Instance {"}, {"sha": "4234c26b5e89b09b485fe68a4a683afc10d25acf", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -17,7 +17,7 @@ pub fn is_empty_1(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[A:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[A]])\n-// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} %xs.0, %xs.1\n+// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n // CHECK-NEXT:    ret i1 [[B:%.*]]\n     {xs}.next().is_none()\n }\n@@ -28,7 +28,7 @@ pub fn is_empty_2(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[C:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[C]])\n-// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} %xs.0, %xs.1\n+// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n // CHECK-NEXT:    ret i1 [[D:%.*]]\n     xs.map(|&x| x).next().is_none()\n }"}, {"sha": "6bcb59affe3284e8009d7ca9d466a45b95e8353d", "filename": "src/test/codegen/issue-75659.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fissue-75659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fissue-75659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-75659.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,7 +1,7 @@\n // This test checks that the call to memchr/slice_contains is optimized away\n // when searching in small slices.\n \n-// compile-flags: -O\n+// compile-flags: -O -Zinline-mir=no\n // only-x86_64\n \n #![crate_type = \"lib\"]"}, {"sha": "b41ef538d718ff87464ebca6bf213b6a6afd682b", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -3,7 +3,7 @@\n // may e.g. multiply `size_of::<T>()` with a variable \"count\" (which is only\n // known to be `1` after inlining).\n \n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n \n #![crate_type = \"lib\"]\n \n@@ -12,14 +12,12 @@ pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n }\n \n // NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n-// the entire output, are the two direct calls we want, from `ptr::{read,write}`.\n+// the entire output, are the two direct calls we want, from `ptr::replace`.\n \n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: ; core::ptr::read\n+// CHECK: ; core::mem::replace\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %dest, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: ; core::ptr::write\n-// CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %dst, {{i8\\*|ptr}} align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %dest, {{i8\\*|ptr}} align 1 %src{{.*}}, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy"}, {"sha": "9bef743ddcb414127a0b7cae1e26a12ffdab1f1c", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows\n //\n \n-// compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix={{cwd}}=/the/cwd --remap-path-prefix={{src-base}}=/the/src\n+// compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix={{cwd}}=/the/cwd --remap-path-prefix={{src-base}}=/the/src -Zinline-mir=no\n // aux-build:remap_path_prefix_aux.rs\n \n extern crate remap_path_prefix_aux;"}, {"sha": "015ac4fe4d1b65190c0cc9214b60b23a9bfc0ae1", "filename": "src/test/codegen/simd-wide-sum.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -47,8 +47,9 @@ pub fn wider_reduce_iter(x: Simd<u8, N>) -> u16 {\n #[no_mangle]\n // CHECK-LABEL: @wider_reduce_into_iter\n pub fn wider_reduce_into_iter(x: Simd<u8, N>) -> u16 {\n-    // CHECK: zext <8 x i8>\n-    // CHECK-SAME: to <8 x i16>\n-    // CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>\n+    // FIXME MIR inlining messes up LLVM optimizations.\n+    // WOULD-CHECK: zext <8 x i8>\n+    // WOULD-CHECK-SAME: to <8 x i16>\n+    // WOULD-CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>\n     x.to_array().into_iter().map(u16::from).sum()\n }"}, {"sha": "47fde12bf3036db6df94b21f4f006edb30c8344d", "filename": "src/test/codegen/slice-ref-equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=3\n+// compile-flags: -C opt-level=3 -Zmerge-functions=disabled\n \n #![crate_type = \"lib\"]\n "}, {"sha": "03e2a2327fc4c5a17d6a79b4745bc7236090bd1e", "filename": "src/test/codegen/swap-small-types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -11,9 +11,10 @@ type RGB48 = [u16; 3];\n // CHECK-LABEL: @swap_rgb48\n #[no_mangle]\n pub fn swap_rgb48(x: &mut RGB48, y: &mut RGB48) {\n-// CHECK-NOT: alloca\n-// CHECK: load i48\n-// CHECK: store i48\n+    // FIXME MIR inlining messes up LLVM optimizations.\n+// WOULD-CHECK-NOT: alloca\n+// WOULD-CHECK: load i48\n+// WOULD-CHECK: store i48\n     swap(x, y)\n }\n "}, {"sha": "62139aa9bebde5be00d296a438b4a9657b05ff10", "filename": "src/test/codegen/vec-in-place.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-in-place.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -53,16 +53,18 @@ pub fn vec_iterator_cast_unwrap(vec: Vec<Wrapper<u8>>) -> Vec<u8> {\n // CHECK-LABEL: @vec_iterator_cast_aggregate\n #[no_mangle]\n pub fn vec_iterator_cast_aggregate(vec: Vec<[u64; 4]>) -> Vec<Foo> {\n-    // CHECK-NOT: loop\n-    // CHECK-NOT: call\n+    // FIXME These checks should be the same as other functions.\n+    // CHECK-NOT: @__rust_alloc\n+    // CHECK-NOT: @__rust_alloc\n     vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n }\n \n // CHECK-LABEL: @vec_iterator_cast_deaggregate\n #[no_mangle]\n pub fn vec_iterator_cast_deaggregate(vec: Vec<Bar>) -> Vec<[u64; 4]> {\n-    // CHECK-NOT: loop\n-    // CHECK-NOT: call\n+    // FIXME These checks should be the same as other functions.\n+    // CHECK-NOT: @__rust_alloc\n+    // CHECK-NOT: @__rust_alloc\n \n     // Safety: For the purpose of this test we assume that Bar layout matches [u64; 4].\n     // This currently is not guaranteed for repr(Rust) types, but it happens to work here and"}, {"sha": "8545db89414a70161e3df5ab12506091cc092c54", "filename": "src/test/mir-opt/inline/caller-with-trivial-bound.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -0,0 +1,26 @@\n+// ignore-wasm32 compiled with panic=abort by default\n+// needs-unwind\n+\n+#![crate_type = \"lib\"]\n+pub trait Factory<T> {\n+    type Item;\n+}\n+\n+pub struct IntFactory;\n+\n+impl<T> Factory<T> for IntFactory {\n+    type Item = usize;\n+}\n+\n+// EMIT_MIR caller_with_trivial_bound.foo.Inline.diff\n+pub fn foo<T>()\n+where\n+    IntFactory: Factory<T>,\n+{\n+    let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n+}\n+\n+#[inline(always)]\n+pub fn bar<T>() -> <IntFactory as Factory<T>>::Item {\n+    0usize\n+}"}, {"sha": "5d236373a4ce0d0abda91b3877eedd606cec0130", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `foo` before Inline\n++ // MIR for `foo` after Inline\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/caller-with-trivial-bound.rs:17:1: 17:1\n+      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n+          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:20:51: 20:61\n+                                           // mir::Constant\n+                                           // + span: $DIR/caller-with-trivial-bound.rs:20:51: 20:59\n+                                           // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/caller-with-trivial-bound.rs:19:1: 21:2\n+          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller-with-trivial-bound.rs:21:1: 21:2\n+      }\n+  \n+      bb2: {\n+          StorageDead(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:21:1: 21:2\n+          return;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:21:2: 21:2\n+      }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:16:1: 21:2\n+      }\n+  }\n+  "}, {"sha": "3b32cb809113e70a5a0f52ba447c7e61452aa7ae", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -5,17 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:13:10: 13:10\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle.rs:14:5: 14:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline-cycle.rs:43:9: 43:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle.rs:28:9: 28:31\n++             }\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n-+         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline-cycle.rs:43:9: 43:23\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle.rs:43:9: 43:21\n-+                                          // + literal: Const { ty: fn() {<A<C> as Call>::call}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "c7f8a64afcd8d93c76429659651a94e67976e119", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -11,6 +11,9 @@\n +         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n++             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++             }\n +         }\n +     }\n   \n@@ -21,19 +24,26 @@\n +         _2 = f;                          // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n--                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(Scalar(<ZST>)) }\n--                                          // mir::Constant\n-                                           // + span: $DIR/inline-cycle.rs:49:10: 49:11\n-                                           // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n++                                          // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         _5 = const ();                   // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         _3 = move _4() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++                                          // mir::Constant\n++                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n+                                           // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(Scalar(<ZST>)) }\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n++                                          // + span: $DIR/inline-cycle.rs:59:10: 59:11\n+                                           // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n++         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n +         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n +         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9"}, {"sha": "2a19b21510a1023835e8db86de6a62bbbb047993", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -4,19 +4,33 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline-cycle-generic.rs:31:9: 31:28\n++                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle-generic.rs:23:9: 23:31\n++                 }\n++             }\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-          _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n+-                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n++                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:24: 9:25\n           _0 = const ();                   // scope 0 at $DIR/inline-cycle-generic.rs:8:11: 10:2\n           return;                          // scope 0 at $DIR/inline-cycle-generic.rs:10:2: 10:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-cycle-generic.rs:8:1: 10:2\n       }\n   }\n   "}, {"sha": "ec1997ccd5d662d6049a665316e0c8343df1d265", "filename": "src/test/ui/issues/issue-67552.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// compile-flags: -Copt-level=0\n // normalize-stderr-test: \".nll/\" -> \"/\"\n \n fn main() {"}, {"sha": "2968be7c71fb5de77cf070a79b9df263cc493312", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,11 +1,11 @@\n error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n-  --> $DIR/issue-67552.rs:28:9\n+  --> $DIR/issue-67552.rs:29:9\n    |\n LL |         rec(identity(&mut it))\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `rec` defined here\n-  --> $DIR/issue-67552.rs:21:1\n+  --> $DIR/issue-67552.rs:22:1\n    |\n LL | / fn rec<T>(mut it: T)\n LL | | where"}, {"sha": "5955d9a25ae732ed56c36b72e6ef426b0413e747", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,6 +1,6 @@\n // run-fail\n // check-run-results\n-// compile-flags: -Zlocation-detail=line,column\n+// compile-flags: -Copt-level=0 -Zlocation-detail=line,column\n // exec-env:RUST_BACKTRACE=0\n \n fn main() {"}, {"sha": "779bac0ace29bd0e23729904766afa4b9d181890", "filename": "src/test/ui/polymorphization/generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags:-Zpolymorphize=on\n+// compile-flags:-Zpolymorphize=on -Zinline-mir=off\n #![feature(generic_const_exprs, generators, generator_trait, rustc_attrs)]\n //~^ WARN the feature `generic_const_exprs` is incomplete\n "}, {"sha": "6a5fc2e33de634d1c0b0736d82e3bef3da16224c", "filename": "src/test/ui/polymorphization/predicates.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n-// compile-flags:-Zpolymorphize=on\n+// compile-flags: -Copt-level=0 -Zpolymorphize=on\n+\n #![feature(rustc_attrs)]\n \n // This test checks that `T` is considered used in `foo`, because it is used in a predicate for"}, {"sha": "6a74e63fdfe3bef9b616d1fb204b82d95bd8118d", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,17 +1,17 @@\n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:14:4\n+  --> $DIR/predicates.rs:15:4\n    |\n LL | fn foo<I, T>(_: I)\n    |    ^^^    - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:23:4\n+  --> $DIR/predicates.rs:24:4\n    |\n LL | fn baz<I, T>(_: I)\n    |    ^^^    - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:44:19\n+  --> $DIR/predicates.rs:45:19\n    |\n LL | impl<'a, I, T: 'a, E> Iterator for Foo<'a, I, E>\n    |          -         - generic parameter `E` is unused\n@@ -22,27 +22,27 @@ LL |         self.find(|_| true)\n    |                   ^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:58:4\n+  --> $DIR/predicates.rs:59:4\n    |\n LL | fn quux<A, B, C: Default>() -> usize\n    |    ^^^^ -  - generic parameter `B` is unused\n    |         |\n    |         generic parameter `A` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:75:4\n+  --> $DIR/predicates.rs:76:4\n    |\n LL | fn foobar<F, G>() -> usize\n    |    ^^^^^^ - generic parameter `F` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:9:4\n+  --> $DIR/predicates.rs:10:4\n    |\n LL | fn bar<I>() {\n    |    ^^^ - generic parameter `I` is unused\n \n note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<u32>, T>`\n-  --> $DIR/predicates.rs:85:5\n+  --> $DIR/predicates.rs:86:5\n    |\n LL |     foo(x.iter());\n    |     ^^^^^^^^^^^^^"}, {"sha": "e647f0ff4fb8beaa3e3285ea829908df27f3dfec", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n-//~^ ERROR overflow evaluating the requirement\n+// compile-flags: -Copt-level=0\n+//~^^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "aaa5884c60c7782e21fde584afd5e74ad741c89c", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:9:1\n+  --> $DIR/issue-83150.rs:10:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -9,10 +9,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>: Iterator`\n+error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>`\n+   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fd975aaaee4a812adaf0e6c3dd545eeae8647434", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -1,43 +0,0 @@\n-// known-bug: #93008\n-// build-fail\n-// failure-status: 101\n-// compile-flags:--crate-type=lib -Zmir-opt-level=3\n-// rustc-env:RUST_BACKTRACE=0\n-\n-// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// normalize-stderr-test \"error: internal compiler error.*\" -> \"error: internal compiler error\"\n-// normalize-stderr-test \"encountered.*with incompatible types:\" \"encountered ... with incompatible types:\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n-// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n-// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n-// normalize-stderr-test \"#.*\\n\" -> \"\"\n-\n-// This is a known bug that @compiler-errors tried to fix in #94238,\n-// but the solution was probably not correct.\n-\n-pub trait Factory<T> {\n-    type Item;\n-}\n-\n-pub struct IntFactory;\n-\n-impl<T> Factory<T> for IntFactory {\n-    type Item = usize;\n-}\n-\n-pub fn foo<T>()\n-where\n-    IntFactory: Factory<T>,\n-{\n-    let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n-}\n-\n-#[inline]\n-pub fn bar<T>() -> <IntFactory as Factory<T>>::Item {\n-    0usize\n-}"}, {"sha": "56cc5c93c96f23ba33aa66a2d7d28a2cb9d3dfa0", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -1,18 +0,0 @@\n-error: internal compiler error\n-\n-error: internal compiler error\n-                                encountered ... with incompatible types:\n-                                left-hand side has type: <IntFactory as Factory<T>>::Item\n-                                right-hand side has type: usize\n-  --> $DIR/select-param-env-instead-of-blanket.rs:42:5\n-   |\n-LL |     let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n-   |                                                   ---------- in this inlined function call\n-...\n-LL |     0usize\n-   |     ^^^^^^\n-   |\n-   = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\n-\n-thread 'rustc' panicked\n-"}, {"sha": "499a64f2816992021f02384361c312da7bd6ca97", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// compile-flags: -Zinline-mir=no\n // error-pattern: overflow evaluating the requirement `(): Sized`\n // error-pattern: function cannot return without recursing\n "}, {"sha": "f34e7d270f914577e979665b4091764c25ea48fa", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:21:1\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:22:1\n    |\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n@@ -18,7 +18,7 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required because of the requirements on the impl of `Iterator` for `std::iter::Empty<()>`\n    = note: 171 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>`\n+   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "ce6fdf811213f905513b0448b7058958c20e89d9", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0075bb4fad68e64b6d1be06bf2db366c30bc75e1/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "patch": "@@ -1,8 +1,10 @@\n // build-fail\n // error-pattern: reached the type-length limit while instantiating\n+// compile-flags: -Copt-level=0\n // normalize-stderr-test: \".nll/\" -> \"/\"\n \n // Test that the type length limit can be changed.\n+// The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n #![type_length_limit=\"4\"]"}]}