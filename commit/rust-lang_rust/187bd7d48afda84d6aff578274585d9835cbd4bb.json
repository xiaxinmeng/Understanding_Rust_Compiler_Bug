{"sha": "187bd7d48afda84d6aff578274585d9835cbd4bb", "node_id": "C_kwDOAAsO6NoAKDE4N2JkN2Q0OGFmZGE4NGQ2YWZmNTc4Mjc0NTg1ZDk4MzVjYmQ0YmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T19:01:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T19:01:18Z"}, "message": "Auto merge of #12130 - weirane:let-else-let-match, r=weirane\n\nTurn let-else statements into let and match\n\nFixes #11906.", "tree": {"sha": "3cc2dee9aff77c5371612d6e9793dd891737b7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc2dee9aff77c5371612d6e9793dd891737b7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187bd7d48afda84d6aff578274585d9835cbd4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187bd7d48afda84d6aff578274585d9835cbd4bb", "html_url": "https://github.com/rust-lang/rust/commit/187bd7d48afda84d6aff578274585d9835cbd4bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187bd7d48afda84d6aff578274585d9835cbd4bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5925dc84d0ef966023d6612147f93a0464174c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5925dc84d0ef966023d6612147f93a0464174c", "html_url": "https://github.com/rust-lang/rust/commit/1a5925dc84d0ef966023d6612147f93a0464174c"}, {"sha": "4a0821f332a2c2bf05496a20e1a4dc4b3eb863cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0821f332a2c2bf05496a20e1a4dc4b3eb863cc", "html_url": "https://github.com/rust-lang/rust/commit/4a0821f332a2c2bf05496a20e1a4dc4b3eb863cc"}], "stats": {"total": 519, "additions": 519, "deletions": 0}, "files": [{"sha": "2363aa7cbd9093ca937c009fa85ac129ac9e26a1", "filename": "crates/ide-assists/src/handlers/convert_let_else_to_match.rs", "status": "added", "additions": 497, "deletions": 0, "changes": 497, "blob_url": "https://github.com/rust-lang/rust/blob/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs?ref=187bd7d48afda84d6aff578274585d9835cbd4bb", "patch": "@@ -0,0 +1,497 @@\n+use hir::Semantics;\n+use ide_db::RootDatabase;\n+use syntax::ast::{edit::AstNodeEdit, AstNode, HasName, LetStmt, Name, Pat};\n+use syntax::T;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+/// Gets a list of binders in a pattern, and whether they are mut.\n+fn binders_in_pat(\n+    acc: &mut Vec<(Name, bool)>,\n+    pat: &Pat,\n+    sem: &Semantics<RootDatabase>,\n+) -> Option<()> {\n+    use Pat::*;\n+    match pat {\n+        IdentPat(p) => {\n+            let ident = p.name()?;\n+            let ismut = p.ref_token().is_none() && p.mut_token().is_some();\n+            // check for const reference\n+            if sem.resolve_bind_pat_to_const(p).is_none() {\n+                acc.push((ident, ismut));\n+            }\n+            if let Some(inner) = p.pat() {\n+                binders_in_pat(acc, &inner, sem)?;\n+            }\n+            Some(())\n+        }\n+        BoxPat(p) => p.pat().and_then(|p| binders_in_pat(acc, &p, sem)),\n+        RestPat(_) | LiteralPat(_) | PathPat(_) | WildcardPat(_) | ConstBlockPat(_) => Some(()),\n+        OrPat(p) => {\n+            for p in p.pats() {\n+                binders_in_pat(acc, &p, sem)?;\n+            }\n+            Some(())\n+        }\n+        ParenPat(p) => p.pat().and_then(|p| binders_in_pat(acc, &p, sem)),\n+        RangePat(p) => {\n+            if let Some(st) = p.start() {\n+                binders_in_pat(acc, &st, sem)?\n+            }\n+            if let Some(ed) = p.end() {\n+                binders_in_pat(acc, &ed, sem)?\n+            }\n+            Some(())\n+        }\n+        RecordPat(p) => {\n+            for f in p.record_pat_field_list()?.fields() {\n+                let pat = f.pat()?;\n+                binders_in_pat(acc, &pat, sem)?;\n+            }\n+            Some(())\n+        }\n+        RefPat(p) => p.pat().and_then(|p| binders_in_pat(acc, &p, sem)),\n+        SlicePat(p) => {\n+            for p in p.pats() {\n+                binders_in_pat(acc, &p, sem)?;\n+            }\n+            Some(())\n+        }\n+        TuplePat(p) => {\n+            for p in p.fields() {\n+                binders_in_pat(acc, &p, sem)?;\n+            }\n+            Some(())\n+        }\n+        TupleStructPat(p) => {\n+            for p in p.fields() {\n+                binders_in_pat(acc, &p, sem)?;\n+            }\n+            Some(())\n+        }\n+        // don't support macro pat yet\n+        MacroPat(_) => None,\n+    }\n+}\n+\n+fn binders_to_str(binders: &[(Name, bool)], addmut: bool) -> String {\n+    let vars = binders\n+        .iter()\n+        .map(\n+            |(ident, ismut)| {\n+                if *ismut && addmut {\n+                    format!(\"mut {}\", ident)\n+                } else {\n+                    ident.to_string()\n+                }\n+            },\n+        )\n+        .collect::<Vec<_>>()\n+        .join(\", \");\n+    if binders.is_empty() {\n+        String::from(\"{}\")\n+    } else if binders.len() == 1 {\n+        vars\n+    } else {\n+        format!(\"({})\", vars)\n+    }\n+}\n+\n+// Assist: convert_let_else_to_match\n+//\n+// Converts let-else statement to let statement and match expression.\n+//\n+// ```\n+// fn main() {\n+//     let Ok(mut x) = f() else$0 { return };\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let mut x = match f() {\n+//         Ok(x) => x,\n+//         _ => return,\n+//     };\n+// }\n+// ```\n+pub(crate) fn convert_let_else_to_match(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    // should focus on else token to trigger\n+    let else_token = ctx.find_token_syntax_at_offset(T![else])?;\n+    let let_stmt = LetStmt::cast(else_token.parent()?.parent()?)?;\n+    let let_else_block = let_stmt.let_else()?.block_expr()?;\n+    let let_init = let_stmt.initializer()?;\n+    if let_stmt.ty().is_some() {\n+        // don't support let with type annotation\n+        return None;\n+    }\n+    let pat = let_stmt.pat()?;\n+    let mut binders = Vec::new();\n+    binders_in_pat(&mut binders, &pat, &ctx.sema)?;\n+\n+    let target = let_stmt.syntax().text_range();\n+    acc.add(\n+        AssistId(\"convert_let_else_to_match\", AssistKind::RefactorRewrite),\n+        \"Convert let-else to let and match\",\n+        target,\n+        |edit| {\n+            let indent_level = let_stmt.indent_level().0 as usize;\n+            let indent = \"    \".repeat(indent_level);\n+            let indent1 = \"    \".repeat(indent_level + 1);\n+\n+            let binders_str = binders_to_str(&binders, false);\n+            let binders_str_mut = binders_to_str(&binders, true);\n+\n+            let init_expr = let_init.syntax().text();\n+            let mut pat_no_mut = pat.syntax().text().to_string();\n+            // remove the mut from the pattern\n+            for (b, ismut) in binders.iter() {\n+                if *ismut {\n+                    pat_no_mut = pat_no_mut.replace(&format!(\"mut {b}\"), &b.to_string());\n+                }\n+            }\n+\n+            let only_expr = let_else_block.statements().next().is_none();\n+            let branch2 = match &let_else_block.tail_expr() {\n+                Some(tail) if only_expr => format!(\"{},\", tail.syntax().text()),\n+                _ => let_else_block.syntax().text().to_string(),\n+            };\n+            let replace = if binders.is_empty() {\n+                format!(\n+                    \"match {init_expr} {{\n+{indent1}{pat_no_mut} => {binders_str}\n+{indent1}_ => {branch2}\n+{indent}}}\"\n+                )\n+            } else {\n+                format!(\n+                    \"let {binders_str_mut} = match {init_expr} {{\n+{indent1}{pat_no_mut} => {binders_str},\n+{indent1}_ => {branch2}\n+{indent}}};\"\n+                )\n+            };\n+            edit.replace(target, replace);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn convert_let_else_to_match_no_type_let() {\n+        check_assist_not_applicable(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let 1: u32 = v.iter().sum() else$0 { return };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_on_else() {\n+        check_assist_not_applicable(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let Ok(x) = f() else {$0 return };\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_no_macropat() {\n+        check_assist_not_applicable(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let m!() = g() else$0 { return };\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_target() {\n+        check_assist_target(\n+            convert_let_else_to_match,\n+            r\"\n+fn main() {\n+    let Ok(x) = f() else$0 { continue };\n+}\",\n+            \"let Ok(x) = f() else { continue };\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_basic() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r\"\n+fn main() {\n+    let Ok(x) = f() else$0 { continue };\n+}\",\n+            r\"\n+fn main() {\n+    let x = match f() {\n+        Ok(x) => x,\n+        _ => continue,\n+    };\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_const_ref() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r\"\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+use Option::*;\n+fn main() {\n+    let None = f() el$0se { continue };\n+}\",\n+            r\"\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+use Option::*;\n+fn main() {\n+    match f() {\n+        None => {}\n+        _ => continue,\n+    }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_const_ref_const() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r\"\n+const NEG1: i32 = -1;\n+fn main() {\n+    let NEG1 = f() el$0se { continue };\n+}\",\n+            r\"\n+const NEG1: i32 = -1;\n+fn main() {\n+    match f() {\n+        NEG1 => {}\n+        _ => continue,\n+    }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_mut() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r\"\n+fn main() {\n+    let Ok(mut x) = f() el$0se { continue };\n+}\",\n+            r\"\n+fn main() {\n+    let mut x = match f() {\n+        Ok(x) => x,\n+        _ => continue,\n+    };\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_multi_binders() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let ControlFlow::Break((x, \"tag\", y, ..)) = f() else$0 { g(); return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let (x, y) = match f() {\n+        ControlFlow::Break((x, \"tag\", y, ..)) => (x, y),\n+        _ => { g(); return }\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_slice() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let [one, 1001, other] = f() else$0 { break };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let (one, other) = match f() {\n+        [one, 1001, other] => (one, other),\n+        _ => break,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_struct() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let [Struct { inner: Some(it) }, 1001, other] = f() else$0 { break };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let (it, other) = match f() {\n+        [Struct { inner: Some(it) }, 1001, other] => (it, other),\n+        _ => break,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_struct_ident_pat() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let [Struct { inner }, 1001, other] = f() else$0 { break };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let (inner, other) = match f() {\n+        [Struct { inner }, 1001, other] => (inner, other),\n+        _ => break,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_no_binder() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let (8 | 9) = f() else$0 { panic!() };\n+}\"#,\n+            r#\"\n+fn main() {\n+    match f() {\n+        (8 | 9) => {}\n+        _ => panic!(),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_range() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let 1.. = f() e$0lse { return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    match f() {\n+        1.. => {}\n+        _ => return,\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_refpat() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let Ok(&mut x) = f(&mut 0) else$0 { return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let x = match f(&mut 0) {\n+        Ok(&mut x) => x,\n+        _ => return,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_refmut() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let Ok(ref mut x) = f() else$0 { return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let x = match f() {\n+        Ok(ref mut x) => x,\n+        _ => return,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_atpat() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let out @ Ok(ins) = f() else$0 { return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let (out, ins) = match f() {\n+        out @ Ok(ins) => (out, ins),\n+        _ => return,\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_else_to_match_complex_init() {\n+        check_assist(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    let &[mut x, y, ..] = &v.iter().collect::<Vec<_>>()[..] else$0 { return };\n+}\"#,\n+            r#\"\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    let (mut x, y) = match &v.iter().collect::<Vec<_>>()[..] {\n+        &[x, y, ..] => (x, y),\n+        _ => return,\n+    };\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "a5dfb5d2953e0da30f6ac3f7551349bc117cedd9", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=187bd7d48afda84d6aff578274585d9835cbd4bb", "patch": "@@ -117,6 +117,7 @@ mod handlers {\n     mod convert_integer_literal;\n     mod convert_into_to_from;\n     mod convert_iter_for_each_to_for;\n+    mod convert_let_else_to_match;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_to_guarded_return;\n     mod convert_while_to_loop;\n@@ -206,6 +207,7 @@ mod handlers {\n             convert_into_to_from::convert_into_to_from,\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             convert_iter_for_each_to_for::convert_for_loop_with_for_each,\n+            convert_let_else_to_match::convert_let_else_to_match,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n             convert_while_to_loop::convert_while_to_loop,"}, {"sha": "7772563b8388840634b950b25fa33b69a26cd54f", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bd7d48afda84d6aff578274585d9835cbd4bb/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=187bd7d48afda84d6aff578274585d9835cbd4bb", "patch": "@@ -384,6 +384,26 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_convert_let_else_to_match() {\n+    check_doc_test(\n+        \"convert_let_else_to_match\",\n+        r#####\"\n+fn main() {\n+    let Ok(mut x) = f() else$0 { return };\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let mut x = match f() {\n+        Ok(x) => x,\n+        _ => return,\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check_doc_test("}]}