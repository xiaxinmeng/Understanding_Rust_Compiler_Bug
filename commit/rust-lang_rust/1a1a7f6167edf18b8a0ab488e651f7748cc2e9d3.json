{"sha": "1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMWE3ZjYxNjdlZGYxOGI4YTBhYjQ4OGU2NTFmNzc0OGNjMmU5ZDM=", "commit": {"author": {"name": "MaloJaffre", "email": "jaffre.malo@gmail.com", "date": "2018-08-28T13:38:56Z"}, "committer": {"name": "MaloJaffre", "email": "jaffre.malo@gmail.com", "date": "2018-08-28T13:38:56Z"}, "message": "Add docs and debug asserts", "tree": {"sha": "7496825d26eb05d6361e3e94c45210ee465f9e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7496825d26eb05d6361e3e94c45210ee465f9e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3", "html_url": "https://github.com/rust-lang/rust/commit/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3/comments", "author": {"login": "MaloJaffre", "id": 16278359, "node_id": "MDQ6VXNlcjE2Mjc4MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/16278359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaloJaffre", "html_url": "https://github.com/MaloJaffre", "followers_url": "https://api.github.com/users/MaloJaffre/followers", "following_url": "https://api.github.com/users/MaloJaffre/following{/other_user}", "gists_url": "https://api.github.com/users/MaloJaffre/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaloJaffre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaloJaffre/subscriptions", "organizations_url": "https://api.github.com/users/MaloJaffre/orgs", "repos_url": "https://api.github.com/users/MaloJaffre/repos", "events_url": "https://api.github.com/users/MaloJaffre/events{/privacy}", "received_events_url": "https://api.github.com/users/MaloJaffre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaloJaffre", "id": 16278359, "node_id": "MDQ6VXNlcjE2Mjc4MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/16278359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaloJaffre", "html_url": "https://github.com/MaloJaffre", "followers_url": "https://api.github.com/users/MaloJaffre/followers", "following_url": "https://api.github.com/users/MaloJaffre/following{/other_user}", "gists_url": "https://api.github.com/users/MaloJaffre/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaloJaffre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaloJaffre/subscriptions", "organizations_url": "https://api.github.com/users/MaloJaffre/orgs", "repos_url": "https://api.github.com/users/MaloJaffre/repos", "events_url": "https://api.github.com/users/MaloJaffre/events{/privacy}", "received_events_url": "https://api.github.com/users/MaloJaffre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e488b64fed181820280d494d4fcc157ee1adc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e488b64fed181820280d494d4fcc157ee1adc5", "html_url": "https://github.com/rust-lang/rust/commit/11e488b64fed181820280d494d4fcc157ee1adc5"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1bd1861db0b27bea92f2aeefb7147e7d0d07ebf4", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3", "patch": "@@ -202,10 +202,17 @@ impl<T> VecDeque<T> {\n                                  len);\n     }\n \n-    /// Copies all values from `src` to `self`, wrapping around if needed.\n-    /// Assumes capacity is sufficient.\n+    /// Copies all values from `src` to the back of `self`, wrapping around if needed.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The capacity must be sufficient to hold self.len() + src.len() elements.\n+    /// If so, this function never panics.\n     #[inline]\n     unsafe fn copy_slice(&mut self, src: &[T]) {\n+        let expected_new_len = self.len() + src.len();\n+        debug_assert!(self.capacity() >= expected_new_len);\n+\n         let dst_high_ptr = self.ptr().add(self.head);\n         let dst_high_len = self.cap() - self.head;\n \n@@ -216,6 +223,7 @@ impl<T> VecDeque<T> {\n         ptr::copy_nonoverlapping(src_low.as_ptr(), self.ptr(), src_low.len());\n \n         self.head = self.wrap_add(self.head, src.len());\n+        debug_assert!(self.len() == expected_new_len);\n     }\n \n     /// Copies a potentially wrapping block of memory len long from src to dest.\n@@ -1850,17 +1858,21 @@ impl<T> VecDeque<T> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        // Guarantees there is space in `self` for `other\n-        self.reserve(other.len());\n-\n         unsafe {\n-            let (src_high, src_low) = other.as_slices();\n-            self.copy_slice(src_low);\n-            self.copy_slice(src_high);\n-        }\n+            // Guarantees there is space in `self` for `other`.\n+            self.reserve(other.len());\n \n-        // Some values now exist in both `other` and `self` but are made inaccessible in `other`.\n-        other.tail = other.head;\n+            {\n+                let (src_high, src_low) = other.as_slices();\n+\n+                // This is only safe because copy_slice never panics when capacity is sufficient.\n+                self.copy_slice(src_low);\n+                self.copy_slice(src_high);\n+            }\n+\n+            // Some values now exist in both `other` and `self` but are made inaccessible in `other`.\n+            other.tail = other.head;\n+        }\n     }\n \n     /// Retains only the elements specified by the predicate."}]}