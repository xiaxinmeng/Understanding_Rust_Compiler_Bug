{"sha": "d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjVhNDk5NDE3ZTAzYWM4ZTNhYjBmNDhhZWRkYmUxMzc0MWEyYjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-16T20:36:29Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "Nonempty arrays of uninhabited arrays are Abi::Uninhabited", "tree": {"sha": "c015d104071bf1d3dde18eecdf4c39e803228290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c015d104071bf1d3dde18eecdf4c39e803228290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "html_url": "https://github.com/rust-lang/rust/commit/d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d065a499417e03ac8e3ab0f48aeddbe13741a2b4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419d2d8f319e30d4b8d071c10d427637056131a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/419d2d8f319e30d4b8d071c10d427637056131a9", "html_url": "https://github.com/rust-lang/rust/commit/419d2d8f319e30d4b8d071c10d427637056131a9"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "da3c00f5e0855777783293da50fc380fcb291597", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d065a499417e03ac8e3ab0f48aeddbe13741a2b4/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d065a499417e03ac8e3ab0f48aeddbe13741a2b4/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "patch": "@@ -551,13 +551,19 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n \n+                let abi = if size != Size::ZERO && ty.conservative_is_uninhabited(tcx) {\n+                    Abi::Uninhabited\n+                } else {\n+                    Abi::Aggregate { sized: true }\n+                };\n+\n                 tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: VariantIdx::new(0) },\n                     fields: FieldPlacement::Array {\n                         stride: element.size,\n                         count\n                     },\n-                    abi: Abi::Aggregate { sized: true },\n+                    abi,\n                     align: element.align,\n                     size\n                 })"}]}