{"sha": "fc01b4b63c5336a0f296b049525e18798b95b374", "node_id": "C_kwDOAAsO6NoAKGZjMDFiNGI2M2M1MzM2YTBmMjk2YjA0OTUyNWUxODc5OGI5NWIzNzQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-03T14:36:50Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-06T04:55:58Z"}, "message": "fix and bless ui tests 1/2", "tree": {"sha": "5e8da28fb50e4a975731103c92ca99f5c2fbbeb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8da28fb50e4a975731103c92ca99f5c2fbbeb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc01b4b63c5336a0f296b049525e18798b95b374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc01b4b63c5336a0f296b049525e18798b95b374", "html_url": "https://github.com/rust-lang/rust/commit/fc01b4b63c5336a0f296b049525e18798b95b374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc01b4b63c5336a0f296b049525e18798b95b374/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af74ef89934ad30b24132b464b6b4cf7cb0e1381", "url": "https://api.github.com/repos/rust-lang/rust/commits/af74ef89934ad30b24132b464b6b4cf7cb0e1381", "html_url": "https://github.com/rust-lang/rust/commit/af74ef89934ad30b24132b464b6b4cf7cb0e1381"}], "stats": {"total": 559, "additions": 288, "deletions": 271}, "files": [{"sha": "9b91627883a8ddf3ae5fec1f2c3148d2289e22b1", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc01b4b63c5336a0f296b049525e18798b95b374/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc01b4b63c5336a0f296b049525e18798b95b374/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=fc01b4b63c5336a0f296b049525e18798b95b374", "patch": "@@ -214,10 +214,15 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                 if path.is_ident(\"code\") {\n                     self.code.set_once((), path.span().unwrap());\n \n-                    let code = nested.parse::<TokenStream>()?;\n+                    let code = nested.parse::<syn::LitStr>()?;\n                     tokens.extend(quote! {\n                         #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n                     });\n+                } else {\n+                    span_err(path.span().unwrap(), \"unknown argument\").note(\"only the `code` parameter is valid after the slug\").emit();\n+\n+                    // consume the buffer so we don't have syntax errors from syn\n+                    let _ = nested.parse::<TokenStream>();\n                 }\n                 Ok(())\n             })?;"}, {"sha": "bc104941c38052f551b732a0e6ba5ad367a4e8dd", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc01b4b63c5336a0f296b049525e18798b95b374/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc01b4b63c5336a0f296b049525e18798b95b374/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=fc01b4b63c5336a0f296b049525e18798b95b374", "patch": "@@ -716,6 +716,9 @@ impl SubdiagnosticKind {\n                 }\n             }\n \n+            let mut has_errors = false;\n+            let input = nested.input;\n+\n             match (nested_name, &mut kind) {\n                 (\"code\", SubdiagnosticKind::Suggestion { code_field, .. }) => {\n                     let code_init = build_suggestion_code(\n@@ -734,6 +737,7 @@ impl SubdiagnosticKind {\n                     let value = get_string!();\n                     let value = Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n                         span_err(value.span().unwrap(), \"invalid applicability\").emit();\n+                        has_errors = true;\n                         Applicability::Unspecified\n                     });\n                     applicability.set_once(value, span);\n@@ -749,6 +753,7 @@ impl SubdiagnosticKind {\n                         span_err(value.span().unwrap(), \"invalid suggestion style\")\n                             .help(\"valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\")\n                             .emit();\n+                        has_errors = true;\n                         SuggestionKind::Normal\n                     });\n \n@@ -762,17 +767,25 @@ impl SubdiagnosticKind {\n                             \"only `style`, `code` and `applicability` are valid nested attributes\",\n                         )\n                         .emit();\n+                    has_errors = true;\n                 }\n                 (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n                     span_err(path_span, \"invalid nested attribute\")\n                         .help(\"only `style` and `applicability` are valid nested attributes\")\n                         .emit();\n+                    has_errors = true;\n                 }\n                 _ => {\n                     span_err(path_span, \"invalid nested attribute\").emit();\n+                    has_errors = true;\n                 }\n             }\n \n+            if has_errors {\n+                // Consume the rest of the input to avoid spamming errors\n+                let _ = input.parse::<TokenStream>();\n+            }\n+\n             Ok(())\n         })?;\n "}, {"sha": "61724c11745c3e55d9185443737dadb22d374ea4", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=fc01b4b63c5336a0f296b049525e18798b95b374", "patch": "@@ -50,7 +50,7 @@ enum DiagnosticOnEnum {\n #[derive(Diagnostic)]\n #[diag(no_crate_example, code = \"E0123\")]\n #[diag = \"E0123\"]\n-//~^ ERROR `#[diag = ...]` is not a valid attribute\n+//~^ ERROR expected parentheses: #[diag(...)]\n struct WrongStructAttrStyle {}\n \n #[derive(Diagnostic)]\n@@ -62,8 +62,7 @@ struct InvalidStructAttr {}\n \n #[derive(Diagnostic)]\n #[diag(\"E0123\")]\n-//~^ ERROR `#[diag(\"...\")]` is not a valid attribute\n-//~^^ ERROR diagnostic slug not specified\n+//~^ ERROR diagnostic slug not specified\n struct InvalidLitNestedAttr {}\n \n #[derive(Diagnostic)]\n@@ -73,27 +72,25 @@ struct InvalidNestedStructAttr {}\n \n #[derive(Diagnostic)]\n #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[diag(nonsense(...))]` is not a valid attribute\n-//~^^ ERROR diagnostic slug not specified\n+//~^ ERROR diagnostic slug must be the first argument\n+//~| ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr1 {}\n \n #[derive(Diagnostic)]\n #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n-//~| ERROR `#[diag(slug = ...)]` is not a valid attribute\n+//~^ ERROR unknown argument\n //~| ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n #[derive(Diagnostic)]\n #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n-//~| ERROR `#[diag(slug = ...)]` is not a valid attribute\n+//~^ ERROR unknown argument\n //~| ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n #[derive(Diagnostic)]\n #[diag(no_crate_example, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n+//~^ ERROR unknown argument\n struct InvalidNestedStructAttr4 {}\n \n #[derive(Diagnostic)]\n@@ -118,7 +115,7 @@ struct CodeSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n #[diag(no_crate_example, no_crate::example, code = \"E0456\")]\n-//~^ ERROR `#[diag(no_crate::example)]` is not a valid attribute\n+//~^ ERROR diagnostic slug must be the first argument\n struct SlugSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n@@ -232,7 +229,7 @@ struct SuggestWithoutCode {\n #[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n-    //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n+    //~^ ERROR invalid nested attribute\n     //~| ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n@@ -241,7 +238,7 @@ struct SuggestWithBadKey {\n #[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n-    //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n+    //~^ ERROR invalid nested attribute\n     //~| ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n@@ -530,23 +527,23 @@ struct BoolField {\n #[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingPath {\n     #[label(no_crate_label, foo)]\n-    //~^ ERROR `#[label(foo)]` is not a valid attribute\n+    //~^ ERROR a diagnostic slug must be the first argument to the attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n     #[label(no_crate_label, foo = \"...\")]\n-    //~^ ERROR `#[label(foo = ...)]` is not a valid attribute\n+    //~^ ERROR invalid nested attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingList {\n     #[label(no_crate_label, foo(\"...\"))]\n-    //~^ ERROR `#[label(foo(...))]` is not a valid attribute\n+    //~^ ERROR invalid nested attribute\n     span: Span,\n }\n \n@@ -643,8 +640,8 @@ struct MissingCodeInSuggestion {\n //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n #[multipart_suggestion()]\n-//~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n-//~| ERROR cannot find attribute `multipart_suggestion` in this scope\n+//~^ ERROR cannot find attribute `multipart_suggestion` in this scope\n+//~| ERROR unexpected end of input, unexpected token in nested attribute, expected ident\n struct MultipartSuggestion {\n     #[multipart_suggestion(no_crate_suggestion)]\n     //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n@@ -698,7 +695,7 @@ struct RawIdentDiagnosticArg {\n #[diag(no_crate_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n-    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `eager` is the only supported nested attribute for `subdiagnostic`\n     note: Note,\n }\n \n@@ -714,15 +711,15 @@ struct SubdiagnosticBadStr {\n #[diag(no_crate_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n-    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `eager` is the only supported nested attribute for `subdiagnostic`\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(no_crate_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n-    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `eager` is the only supported nested attribute for `subdiagnostic`\n     note: Note,\n }\n \n@@ -797,14 +794,15 @@ struct SuggestionsNoItem {\n struct SuggestionsInvalidItem {\n     #[suggestion(code(foo))]\n     //~^ ERROR `code(...)` must contain only string literals\n+    //~| ERROR unexpected token\n     sub: Span,\n }\n \n-#[derive(Diagnostic)]\n+#[derive(Diagnostic)] //~ ERROR cannot find value `__code_34` in this scope\n #[diag(no_crate_example)]\n struct SuggestionsInvalidLiteral {\n     #[suggestion(code = 3)]\n-    //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n+    //~^ ERROR expected string literal\n     sub: Span,\n }\n "}, {"sha": "041ebdee0ab88d1fea9c20ff5fecce1257df802f", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 144, "deletions": 169, "changes": 313, "blob_url": "https://github.com/rust-lang/rust/blob/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=fc01b4b63c5336a0f296b049525e18798b95b374", "patch": "@@ -20,11 +20,11 @@ LL |     Bar,\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:52:1\n+error: expected parentheses: #[diag(...)]\n+  --> $DIR/diagnostic-derive.rs:52:8\n    |\n LL | #[diag = \"E0123\"]\n-   | ^^^^^^^^^^^^^^^^^\n+   |        ^\n \n error: `#[nonsense(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:57:1\n@@ -44,35 +44,24 @@ LL | | struct InvalidStructAttr {}\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:64:8\n-   |\n-LL | #[diag(\"E0123\")]\n-   |        ^^^^^^^\n-   |\n-   = help: a diagnostic slug is required as the first argument\n-\n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:64:1\n    |\n LL | / #[diag(\"E0123\")]\n LL | |\n-LL | |\n LL | | struct InvalidLitNestedAttr {}\n    | |______________________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag(nonsense(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:75:8\n+error: diagnostic slug must be the first argument\n+  --> $DIR/diagnostic-derive.rs:74:16\n    |\n LL | #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = help: a diagnostic slug is required as the first argument\n+   |                ^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:75:1\n+  --> $DIR/diagnostic-derive.rs:74:1\n    |\n LL | / #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -82,128 +71,110 @@ LL | | struct InvalidNestedStructAttr1 {}\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:81:8\n-   |\n-LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-   |        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: only `code` is a valid nested attributes following the slug\n-\n-error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:81:42\n+error: unknown argument\n+  --> $DIR/diagnostic-derive.rs:80:8\n    |\n LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-   |                                          ^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n-   = help: only `code` is a valid nested attributes following the slug\n+   = note: only the `code` parameter is valid after the slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:81:1\n+  --> $DIR/diagnostic-derive.rs:80:1\n    |\n LL | / #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n-LL | |\n LL | | struct InvalidNestedStructAttr2 {}\n    | |__________________________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:88:8\n-   |\n-LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-   |        ^^^^^^^^^^^^\n-\n-error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:88:38\n+error: unknown argument\n+  --> $DIR/diagnostic-derive.rs:86:8\n    |\n LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-   |                                      ^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n-   = help: only `code` is a valid nested attributes following the slug\n+   = note: only the `code` parameter is valid after the slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:88:1\n+  --> $DIR/diagnostic-derive.rs:86:1\n    |\n LL | / #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n-LL | |\n LL | | struct InvalidNestedStructAttr3 {}\n    | |__________________________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n-error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:95:42\n+error: unknown argument\n+  --> $DIR/diagnostic-derive.rs:92:42\n    |\n LL | #[diag(no_crate_example, code = \"E0123\", slug = \"foo\")]\n-   |                                          ^^^^^^^^^^^^\n+   |                                          ^^^^\n    |\n-   = help: only `code` is a valid nested attributes following the slug\n+   = note: only the `code` parameter is valid after the slug\n \n error: `#[suggestion = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:102:5\n+  --> $DIR/diagnostic-derive.rs:99:5\n    |\n LL |     #[suggestion = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:8\n+  --> $DIR/diagnostic-derive.rs:106:8\n    |\n LL | #[diag(no_crate_example, code = \"E0456\")]\n    |        ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:8\n+  --> $DIR/diagnostic-derive.rs:105:8\n    |\n LL | #[diag(no_crate_example, code = \"E0123\")]\n    |        ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:33\n+  --> $DIR/diagnostic-derive.rs:106:26\n    |\n LL | #[diag(no_crate_example, code = \"E0456\")]\n-   |                                 ^^^^^^^\n+   |                          ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:33\n+  --> $DIR/diagnostic-derive.rs:105:26\n    |\n LL | #[diag(no_crate_example, code = \"E0123\")]\n-   |                                 ^^^^^^^\n+   |                          ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:115:49\n+  --> $DIR/diagnostic-derive.rs:112:42\n    |\n LL | #[diag(no_crate_example, code = \"E0456\", code = \"E0457\")]\n-   |                                                 ^^^^^^^\n+   |                                          ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:115:33\n+  --> $DIR/diagnostic-derive.rs:112:26\n    |\n LL | #[diag(no_crate_example, code = \"E0456\", code = \"E0457\")]\n-   |                                 ^^^^^^^\n+   |                          ^^^^\n \n-error: `#[diag(no_crate::example)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:120:26\n+error: diagnostic slug must be the first argument\n+  --> $DIR/diagnostic-derive.rs:117:43\n    |\n LL | #[diag(no_crate_example, no_crate::example, code = \"E0456\")]\n-   |                          ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: diagnostic slug must be the first argument\n+   |                                           ^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:125:1\n+  --> $DIR/diagnostic-derive.rs:122:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:128:1\n+  --> $DIR/diagnostic-derive.rs:125:1\n    |\n LL | / #[diag(code = \"E0456\")]\n LL | |\n@@ -213,31 +184,31 @@ LL | | struct SlugNotProvided {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:139:5\n+  --> $DIR/diagnostic-derive.rs:136:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:147:5\n+  --> $DIR/diagnostic-derive.rs:144:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:164:5\n+  --> $DIR/diagnostic-derive.rs:161:5\n    |\n LL |     #[label(no_crate_label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:172:46\n+  --> $DIR/diagnostic-derive.rs:169:46\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"{name}\")]\n    |                                              ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:177:10\n+  --> $DIR/diagnostic-derive.rs:174:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ expected `'}'` in format string\n@@ -246,7 +217,7 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:187:10\n+  --> $DIR/diagnostic-derive.rs:184:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ unmatched `}` in format string\n@@ -255,47 +226,47 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:207:5\n+  --> $DIR/diagnostic-derive.rs:204:5\n    |\n LL |     #[label(no_crate_label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:226:5\n+  --> $DIR/diagnostic-derive.rs:223:5\n    |\n LL |     #[suggestion(no_crate_suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:234:18\n+error: invalid nested attribute\n+  --> $DIR/diagnostic-derive.rs:231:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n-   |                  ^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:234:5\n+  --> $DIR/diagnostic-derive.rs:231:5\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:243:18\n+error: invalid nested attribute\n+  --> $DIR/diagnostic-derive.rs:240:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n-   |                  ^^^^^^^^^^^\n+   |                  ^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:243:5\n+  --> $DIR/diagnostic-derive.rs:240:5\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:266:5\n+  --> $DIR/diagnostic-derive.rs:263:5\n    |\n LL | /     #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -305,95 +276,93 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:282:24\n+  --> $DIR/diagnostic-derive.rs:279:24\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                        ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:282:18\n+  --> $DIR/diagnostic-derive.rs:279:18\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                  ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:290:33\n+  --> $DIR/diagnostic-derive.rs:287:33\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                                 ^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:290:18\n+  --> $DIR/diagnostic-derive.rs:287:18\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:297:5\n+  --> $DIR/diagnostic-derive.rs:294:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:448:53\n+  --> $DIR/diagnostic-derive.rs:445:5\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n-   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:450:24\n+  --> $DIR/diagnostic-derive.rs:447:24\n    |\n LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:456:53\n+  --> $DIR/diagnostic-derive.rs:453:69\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"batman\")]\n-   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                     ^^^^^^^^\n \n error: the `#[help(...)]` attribute can only be applied to fields of type `Span`, `bool` or `()`\n-  --> $DIR/diagnostic-derive.rs:523:5\n+  --> $DIR/diagnostic-derive.rs:520:5\n    |\n LL |     #[help(no_crate_help)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:29\n+error: a diagnostic slug must be the first argument to the attribute\n+  --> $DIR/diagnostic-derive.rs:529:32\n    |\n LL |     #[label(no_crate_label, foo)]\n-   |                             ^^^\n-   |\n-   = help: a diagnostic slug must be the first argument to the attribute\n+   |                                ^\n \n-error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:540:29\n+error: invalid nested attribute\n+  --> $DIR/diagnostic-derive.rs:537:29\n    |\n LL |     #[label(no_crate_label, foo = \"...\")]\n-   |                             ^^^^^^^^^^^\n+   |                             ^^^\n \n-error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:548:29\n+error: invalid nested attribute\n+  --> $DIR/diagnostic-derive.rs:545:29\n    |\n LL |     #[label(no_crate_label, foo(\"...\"))]\n-   |                             ^^^^^^^^^^\n+   |                             ^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:560:5\n+  --> $DIR/diagnostic-derive.rs:557:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:580:1\n+  --> $DIR/diagnostic-derive.rs:577:1\n    |\n LL | #[error(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:580:1\n+  --> $DIR/diagnostic-derive.rs:577:1\n    |\n LL | / #[error(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -405,13 +374,13 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:587:1\n+  --> $DIR/diagnostic-derive.rs:584:1\n    |\n LL | #[warn_(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:587:1\n+  --> $DIR/diagnostic-derive.rs:584:1\n    |\n LL | / #[warn_(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -423,13 +392,13 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:594:1\n+  --> $DIR/diagnostic-derive.rs:591:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:594:1\n+  --> $DIR/diagnostic-derive.rs:591:1\n    |\n LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -441,19 +410,19 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:601:1\n+  --> $DIR/diagnostic-derive.rs:598:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:601:1\n+  --> $DIR/diagnostic-derive.rs:598:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:601:1\n+  --> $DIR/diagnostic-derive.rs:598:1\n    |\n LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -466,137 +435,135 @@ LL | | struct LintAttributeOnLintDiag {}\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:611:53\n+  --> $DIR/diagnostic-derive.rs:608:5\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n-   |                                                     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:611:39\n+  --> $DIR/diagnostic-derive.rs:608:5\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n-   |                                       ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:620:24\n+  --> $DIR/diagnostic-derive.rs:617:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:628:17\n+  --> $DIR/diagnostic-derive.rs:625:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:635:5\n+  --> $DIR/diagnostic-derive.rs:632:5\n    |\n LL |     #[suggestion(no_crate_suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:642:1\n+  --> $DIR/diagnostic-derive.rs:639:1\n    |\n LL | #[multipart_suggestion(no_crate_suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:645:1\n-   |\n-LL | #[multipart_suggestion()]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider creating a `Subdiagnostic` instead\n-\n-error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:649:5\n+  --> $DIR/diagnostic-derive.rs:646:5\n    |\n LL |     #[multipart_suggestion(no_crate_suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n+error: unexpected end of input, unexpected token in nested attribute, expected ident\n+  --> $DIR/diagnostic-derive.rs:642:24\n+   |\n+LL | #[multipart_suggestion()]\n+   |                        ^\n+\n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:657:1\n+  --> $DIR/diagnostic-derive.rs:654:1\n    |\n LL | #[suggestion(no_crate_suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:666:1\n+  --> $DIR/diagnostic-derive.rs:663:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n-error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:700:5\n+error: `eager` is the only supported nested attribute for `subdiagnostic`\n+  --> $DIR/diagnostic-derive.rs:697:7\n    |\n LL |     #[subdiagnostic(bad)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+   |       ^^^^^^^^^^^^^^^^^^\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:708:5\n+  --> $DIR/diagnostic-derive.rs:705:5\n    |\n LL |     #[subdiagnostic = \"bad\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:716:5\n+error: `eager` is the only supported nested attribute for `subdiagnostic`\n+  --> $DIR/diagnostic-derive.rs:713:7\n    |\n LL |     #[subdiagnostic(bad, bad)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:724:5\n+error: `eager` is the only supported nested attribute for `subdiagnostic`\n+  --> $DIR/diagnostic-derive.rs:721:7\n    |\n LL |     #[subdiagnostic(\"bad\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+   |       ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:732:5\n+  --> $DIR/diagnostic-derive.rs:729:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:790:18\n+  --> $DIR/diagnostic-derive.rs:787:23\n    |\n LL |     #[suggestion(code())]\n-   |                  ^^^^^^\n+   |                       ^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:798:23\n+  --> $DIR/diagnostic-derive.rs:795:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n-error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:806:18\n+error: unexpected token\n+  --> $DIR/diagnostic-derive.rs:795:23\n+   |\n+LL |     #[suggestion(code(foo))]\n+   |                       ^^^\n+\n+error: expected string literal\n+  --> $DIR/diagnostic-derive.rs:804:25\n    |\n LL |     #[suggestion(code = 3)]\n-   |                  ^^^^^^^^\n+   |                         ^\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:821:5\n+  --> $DIR/diagnostic-derive.rs:819:5\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,61 +579,69 @@ LL | #[nonsense(no_crate_example, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:147:7\n+  --> $DIR/diagnostic-derive.rs:144:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:580:3\n+  --> $DIR/diagnostic-derive.rs:577:3\n    |\n LL | #[error(no_crate_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:587:3\n+  --> $DIR/diagnostic-derive.rs:584:3\n    |\n LL | #[warn_(no_crate_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:594:3\n+  --> $DIR/diagnostic-derive.rs:591:3\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:601:3\n+  --> $DIR/diagnostic-derive.rs:598:3\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:642:3\n+  --> $DIR/diagnostic-derive.rs:639:3\n    |\n LL | #[multipart_suggestion(no_crate_suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:645:3\n+  --> $DIR/diagnostic-derive.rs:642:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:649:7\n+  --> $DIR/diagnostic-derive.rs:646:7\n    |\n LL |     #[multipart_suggestion(no_crate_suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n \n error[E0425]: cannot find value `nonsense` in module `crate::fluent_generated`\n-  --> $DIR/diagnostic-derive.rs:70:8\n+  --> $DIR/diagnostic-derive.rs:69:8\n    |\n LL | #[diag(nonsense, code = \"E0123\")]\n    |        ^^^^^^^^ not found in `crate::fluent_generated`\n \n+error[E0425]: cannot find value `__code_34` in this scope\n+  --> $DIR/diagnostic-derive.rs:801:10\n+   |\n+LL | #[derive(Diagnostic)]\n+   |          ^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:341:10\n+  --> $DIR/diagnostic-derive.rs:338:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n@@ -676,7 +651,7 @@ note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n    = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 85 previous errors\n+error: aborting due to 84 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "d8bf0ba413ccf6a4848015783c16e60d0fea34aa", "filename": "tests/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 104, "deletions": 78, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc01b4b63c5336a0f296b049525e18798b95b374/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=fc01b4b63c5336a0f296b049525e18798b95b374", "patch": "@@ -26,71 +26,65 @@ error: `#[label = ...]` is not a valid attribute\n LL | #[label = \"...\"]\n    | ^^^^^^^^^^^^^^^^\n \n-error: `#[label(bug = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:84:9\n    |\n LL | #[label(bug = \"...\")]\n-   |         ^^^^^^^^^^^\n+   |         ^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:84:1\n    |\n LL | #[label(bug = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[label(\"...\")]` is not a valid attribute\n+error: unexpected literal in nested attribute, expected ident\n   --> $DIR/subdiagnostic-derive.rs:94:9\n    |\n LL | #[label(\"...\")]\n    |         ^^^^^\n \n-error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:94:1\n-   |\n-LL | #[label(\"...\")]\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `#[label(slug = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:104:9\n    |\n LL | #[label(slug = 4)]\n-   |         ^^^^^^^^\n+   |         ^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:104:1\n    |\n LL | #[label(slug = 4)]\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: `#[label(slug(...))]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:114:9\n    |\n LL | #[label(slug(\"...\"))]\n-   |         ^^^^^^^^^^^\n+   |         ^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:114:1\n    |\n LL | #[label(slug(\"...\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:134:1\n+error: unexpected end of input, unexpected token in nested attribute, expected ident\n+  --> $DIR/subdiagnostic-derive.rs:134:9\n    |\n LL | #[label()]\n-   | ^^^^^^^^^^\n+   |         ^\n \n-error: `#[label(code = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:143:27\n    |\n LL | #[label(no_crate_example, code = \"...\")]\n-   |                           ^^^^^^^^^^^^\n+   |                           ^^^^\n \n-error: `#[label(applicability = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:152:27\n    |\n LL | #[label(no_crate_example, applicability = \"machine-applicable\")]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n   --> $DIR/subdiagnostic-derive.rs:161:1\n@@ -122,11 +116,11 @@ error: `#[bar(...)]` is not a valid attribute\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n \n-error: `#[label(code = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:223:13\n    |\n LL |     #[label(code = \"...\")]\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:223:5\n@@ -190,13 +184,11 @@ LL | |     b: u64,\n LL | | }\n    | |_^\n \n-error: `#[label(no_crate::example)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:325:27\n+error: a diagnostic slug must be the first argument to the attribute\n+  --> $DIR/subdiagnostic-derive.rs:325:44\n    |\n LL | #[label(no_crate_example, no_crate::example)]\n-   |                           ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: a diagnostic slug must be the first argument to the attribute\n+   |                                            ^\n \n error: specified multiple times\n   --> $DIR/subdiagnostic-derive.rs:338:5\n@@ -217,16 +209,16 @@ LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:381:46\n+  --> $DIR/subdiagnostic-derive.rs:381:1\n    |\n LL | #[suggestion(no_crate_example, code = \"...\", code = \"...\")]\n-   |                                              ^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:381:32\n+  --> $DIR/subdiagnostic-derive.rs:381:1\n    |\n LL | #[suggestion(no_crate_example, code = \"...\", code = \"...\")]\n-   |                                ^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n   --> $DIR/subdiagnostic-derive.rs:399:5\n@@ -253,10 +245,10 @@ LL | #[suggestion(no_crate_example)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:432:46\n+  --> $DIR/subdiagnostic-derive.rs:432:62\n    |\n LL | #[suggestion(no_crate_example, code = \"...\", applicability = \"foo\")]\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+   |                                                              ^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:450:1\n@@ -314,11 +306,11 @@ LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n+error: invalid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:538:42\n    |\n LL | #[multipart_suggestion(no_crate_example, code = \"...\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^^^^^^\n+   |                                          ^^^^\n    |\n    = help: only `style` and `applicability` are valid nested attributes\n \n@@ -339,11 +331,11 @@ error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:556:5\n+error: unexpected end of input, unexpected token in nested attribute, expected ident\n+  --> $DIR/subdiagnostic-derive.rs:556:23\n    |\n LL |     #[suggestion_part()]\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |                       ^\n \n error: `#[primary_span]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:565:5\n@@ -371,19 +363,11 @@ error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:576:5\n-   |\n-LL |     #[suggestion_part()]\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-\n-error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n+error: `code` is the only valid nested attribute\n   --> $DIR/subdiagnostic-derive.rs:579:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n-   |                       ^^^^^^^^^^^\n-   |\n-   = help: `code` is the only valid nested attribute\n+   |                       ^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/subdiagnostic-derive.rs:582:5\n@@ -397,17 +381,29 @@ error: the `#[suggestion_part(...)]` attribute can only be applied to fields of\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n+error: unexpected end of input, unexpected token in nested attribute, expected ident\n+  --> $DIR/subdiagnostic-derive.rs:576:23\n+   |\n+LL |     #[suggestion_part()]\n+   |                       ^\n+\n+error: expected `,`\n+  --> $DIR/subdiagnostic-derive.rs:579:27\n+   |\n+LL |     #[suggestion_part(foo = \"bar\")]\n+   |                           ^\n+\n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:593:37\n+  --> $DIR/subdiagnostic-derive.rs:593:5\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n-   |                                     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:593:23\n+  --> $DIR/subdiagnostic-derive.rs:593:5\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n-   |                       ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n   --> $DIR/subdiagnostic-derive.rs:622:5\n@@ -416,46 +412,64 @@ LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:670:23\n+  --> $DIR/subdiagnostic-derive.rs:670:34\n    |\n LL |     #[suggestion_part(code(\"foo\"))]\n-   |                       ^^^^^^^^^^^\n+   |                                  ^\n+\n+error: unexpected token\n+  --> $DIR/subdiagnostic-derive.rs:670:28\n+   |\n+LL |     #[suggestion_part(code(\"foo\"))]\n+   |                            ^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:679:23\n+  --> $DIR/subdiagnostic-derive.rs:679:41\n+   |\n+LL |     #[suggestion_part(code(\"foo\", \"bar\"))]\n+   |                                         ^\n+\n+error: unexpected token\n+  --> $DIR/subdiagnostic-derive.rs:679:28\n    |\n LL |     #[suggestion_part(code(\"foo\", \"bar\"))]\n-   |                       ^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:688:23\n+  --> $DIR/subdiagnostic-derive.rs:688:30\n    |\n LL |     #[suggestion_part(code(3))]\n-   |                       ^^^^^^^\n+   |                              ^\n+\n+error: unexpected token\n+  --> $DIR/subdiagnostic-derive.rs:688:28\n+   |\n+LL |     #[suggestion_part(code(3))]\n+   |                            ^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:697:23\n+  --> $DIR/subdiagnostic-derive.rs:697:29\n    |\n LL |     #[suggestion_part(code())]\n-   |                       ^^^^^^\n+   |                             ^\n \n-error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/subdiagnostic-derive.rs:706:23\n+error: expected string literal\n+  --> $DIR/subdiagnostic-derive.rs:706:30\n    |\n LL |     #[suggestion_part(code = 3)]\n-   |                       ^^^^^^^^\n+   |                              ^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:748:61\n+  --> $DIR/subdiagnostic-derive.rs:748:1\n    |\n LL | #[suggestion(no_crate_example, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                                             ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:748:43\n+  --> $DIR/subdiagnostic-derive.rs:748:1\n    |\n LL | #[suggestion(no_crate_example, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                           ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_hidden(...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:757:1\n@@ -481,25 +495,29 @@ LL | #[suggestion(no_crate_example, code = \"\", style = \"foo\")]\n    |\n    = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n \n-error: `#[suggestion(style = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:781:43\n+error: expected `= \"xxx\"`\n+  --> $DIR/subdiagnostic-derive.rs:781:49\n    |\n LL | #[suggestion(no_crate_example, code = \"\", style = 42)]\n-   |                                           ^^^^^^^^^^\n+   |                                                 ^\n \n-error: `#[suggestion(style)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:789:43\n+error: a diagnostic slug must be the first argument to the attribute\n+  --> $DIR/subdiagnostic-derive.rs:789:48\n    |\n LL | #[suggestion(no_crate_example, code = \"\", style)]\n-   |                                           ^^^^^\n+   |                                                ^\n+\n+error: expected `= \"xxx\"`\n+  --> $DIR/subdiagnostic-derive.rs:797:48\n    |\n-   = help: a diagnostic slug must be the first argument to the attribute\n+LL | #[suggestion(no_crate_example, code = \"\", style(\"foo\"))]\n+   |                                                ^\n \n-error: `#[suggestion(style(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:797:43\n+error: expected `,`\n+  --> $DIR/subdiagnostic-derive.rs:797:48\n    |\n LL | #[suggestion(no_crate_example, code = \"\", style(\"foo\"))]\n-   |                                           ^^^^^^^^^^^^\n+   |                                                ^\n \n error: `#[primary_span]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:808:5\n@@ -582,6 +600,14 @@ error[E0425]: cannot find value `slug` in module `crate::fluent_generated`\n LL | #[label(slug)]\n    |         ^^^^ not found in `crate::fluent_generated`\n \n-error: aborting due to 81 previous errors\n+error[E0425]: cannot find value `__code_29` in this scope\n+  --> $DIR/subdiagnostic-derive.rs:703:10\n+   |\n+LL | #[derive(Subdiagnostic)]\n+   |          ^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in the derive macro `Subdiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 86 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}