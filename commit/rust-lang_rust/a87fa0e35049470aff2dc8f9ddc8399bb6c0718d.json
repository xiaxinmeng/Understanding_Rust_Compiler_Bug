{"sha": "a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4N2ZhMGUzNTA0OTQ3MGFmZjJkYzhmOWRkYzgzOTliYjZjMDcxOGQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-18T09:35:25Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-18T09:49:26Z"}, "message": "Fix FP of result_unit_err when using type aliases", "tree": {"sha": "8cdb170f06beed74797ef7e54a752ba26d58970c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdb170f06beed74797ef7e54a752ba26d58970c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "html_url": "https://github.com/rust-lang/rust/commit/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddeea9771408295cefb21d97aff52257095fb894", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddeea9771408295cefb21d97aff52257095fb894", "html_url": "https://github.com/rust-lang/rust/commit/ddeea9771408295cefb21d97aff52257095fb894"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "30814e869e6302312711ea9300226502018d5012", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    last_path_segment, match_def_path, must_use_attr, path_to_local, return_ty, snippet, snippet_opt, span_lint,\n-    span_lint_and_help, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    match_def_path, must_use_attr, path_to_local, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n+    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -470,12 +470,11 @@ fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span\n     if_chain! {\n         if !in_external_macro(cx.sess(), item_span);\n         if let hir::FnRetTy::Return(ref ty) = decl.output;\n-        if let hir::TyKind::Path(ref qpath) = ty.kind;\n-        if is_type_diagnostic_item(cx, hir_ty_to_ty(cx.tcx, ty), sym::result_type);\n-        if let Some(ref args) = last_path_segment(qpath).args;\n-        if let [_, hir::GenericArg::Type(ref err_ty)] = args.args;\n-        if let hir::TyKind::Tup(t) = err_ty.kind;\n-        if t.is_empty();\n+        let ty = hir_ty_to_ty(cx.tcx, ty);\n+        if is_type_diagnostic_item(cx, ty, sym::result_type);\n+        if let ty::Adt(_, substs) = ty.kind();\n+        let err_ty = substs.type_at(1);\n+        if err_ty.is_unit();\n         then {\n             span_lint_and_help(\n                 cx,"}, {"sha": "a4ec803024edf68689d732abaf090ac9ec21fa87", "filename": "tests/ui/result_unit_error.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/tests%2Fui%2Fresult_unit_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/tests%2Fui%2Fresult_unit_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.rs?ref=a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "patch": "@@ -1,6 +1,4 @@\n-#![allow(clippy::unnecessary_wraps)]\n-#[warn(clippy::result_unit_err)]\n-#[allow(unused)]\n+#![warn(clippy::result_unit_err)]\n \n pub fn returns_unit_error() -> Result<u32, ()> {\n     Err(())\n@@ -36,4 +34,23 @@ impl UnitErrorHolder {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/6546\n+pub mod issue_6546 {\n+    type ResInv<A, B> = Result<B, A>;\n+\n+    pub fn should_lint() -> ResInv<(), usize> {\n+        Ok(0)\n+    }\n+\n+    pub fn should_not_lint() -> ResInv<usize, ()> {\n+        Ok(())\n+    }\n+\n+    type MyRes<A, B> = Result<(A, B), Box<dyn std::error::Error>>;\n+\n+    pub fn should_not_lint2(x: i32) -> MyRes<i32, ()> {\n+        Ok((x, ()))\n+    }\n+}\n+\n fn main() {}"}, {"sha": "41d8b0a7cb7f82e92989fb56c909a32b8e27315c", "filename": "tests/ui/result_unit_error.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/tests%2Fui%2Fresult_unit_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a87fa0e35049470aff2dc8f9ddc8399bb6c0718d/tests%2Fui%2Fresult_unit_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.stderr?ref=a87fa0e35049470aff2dc8f9ddc8399bb6c0718d", "patch": "@@ -1,5 +1,5 @@\n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:5:1\n+  --> $DIR/result_unit_error.rs:3:1\n    |\n LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,28 +8,36 @@ LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:14:5\n+  --> $DIR/result_unit_error.rs:12:5\n    |\n LL |     fn get_that_error(&self) -> Result<bool, ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:16:5\n+  --> $DIR/result_unit_error.rs:14:5\n    |\n LL |     fn get_this_one_too(&self) -> Result<bool, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:34:5\n+  --> $DIR/result_unit_error.rs:32:5\n    |\n LL |     pub fn unit_error(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n-error: aborting due to 4 previous errors\n+error: this returns a `Result<_, ()>\n+  --> $DIR/result_unit_error.rs:41:5\n+   |\n+LL |     pub fn should_lint() -> ResInv<(), usize> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a custom Error type instead\n+\n+error: aborting due to 5 previous errors\n "}]}