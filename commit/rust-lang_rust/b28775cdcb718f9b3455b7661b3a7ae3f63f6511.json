{"sha": "b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "node_id": "C_kwDOAAsO6NoAKGIyODc3NWNkY2I3MThmOWIzNDU1Yjc2NjFiM2E3YWUzZjYzZjY1MTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T19:44:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T19:44:50Z"}, "message": "Rollup merge of #109026 - joshtriplett:rc-into-inner, r=dtolnay\n\nIntroduce `Rc::into_inner`, as a parallel to `Arc::into_inner`\n\nUnlike `Arc`, `Rc` doesn't have the same race condition to avoid, but\nmaintaining an equivalent API still makes it easier to work with both\n`Rc` and `Arc`.", "tree": {"sha": "20f616e79d75af18b80458fb922cdec26875577e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f616e79d75af18b80458fb922cdec26875577e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDiuyCRBK7hj4Ov3rIwAAko0IAJJzDR2KcWSh/MKq9UqplZJI\n0Q/rgjBHTzWM3pBJ346QVE3Oh+oSrPT5nZE0+Thq+lFslr4EGzwd9SrFKNMJeizz\nV6QhR+P94x8/x3NUcoR6U8T9C6KIN4J12cI+ih4sXSLK5c36IWbCV18lmahR9Wgv\nW/VIgjEfZri4M6Nz09dwQf0fQ8zwW0r3j8gHgBmbdmGszFciAnhJhd9hqnELvMPz\nJCDs1GVkXY2sheaZ1D3uZmjJ6+0CTxb2lFY0lkKO3r+gXDss92cdx2iiGhm8Apct\nra5LMVXE/gd9EvyTjTnMMlTiGJlFhPaf+Ug0l+IjqgJv/L3T4qPnJQ94LCo4tOI=\n=g98a\n-----END PGP SIGNATURE-----\n", "payload": "tree 20f616e79d75af18b80458fb922cdec26875577e\nparent afe257554c30693f545c50fd864b137023deb76a\nparent 992957efa9a4f12641ffb229e3b57c7088d140eb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678650290 +0100\ncommitter GitHub <noreply@github.com> 1678650290 +0100\n\nRollup merge of #109026 - joshtriplett:rc-into-inner, r=dtolnay\n\nIntroduce `Rc::into_inner`, as a parallel to `Arc::into_inner`\n\nUnlike `Arc`, `Rc` doesn't have the same race condition to avoid, but\nmaintaining an equivalent API still makes it easier to work with both\n`Rc` and `Arc`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "html_url": "https://github.com/rust-lang/rust/commit/b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28775cdcb718f9b3455b7661b3a7ae3f63f6511/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe257554c30693f545c50fd864b137023deb76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe257554c30693f545c50fd864b137023deb76a", "html_url": "https://github.com/rust-lang/rust/commit/afe257554c30693f545c50fd864b137023deb76a"}, {"sha": "992957efa9a4f12641ffb229e3b57c7088d140eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/992957efa9a4f12641ffb229e3b57c7088d140eb", "html_url": "https://github.com/rust-lang/rust/commit/992957efa9a4f12641ffb229e3b57c7088d140eb"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "77b0447b345ec9a91a22e3695a00997e0429ec58", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b28775cdcb718f9b3455b7661b3a7ae3f63f6511/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28775cdcb718f9b3455b7661b3a7ae3f63f6511/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "patch": "@@ -681,6 +681,24 @@ impl<T> Rc<T> {\n             Err(this)\n         }\n     }\n+\n+    /// Returns the inner value, if the `Rc` has exactly one strong reference.\n+    ///\n+    /// Otherwise, [`None`] is returned and the `Rc` is dropped.\n+    ///\n+    /// This will succeed even if there are outstanding weak references.\n+    ///\n+    /// If `Rc::into_inner` is called on every clone of this `Rc`,\n+    /// it is guaranteed that exactly one of the calls returns the inner value.\n+    /// This means in particular that the inner value is not dropped.\n+    ///\n+    /// This is equivalent to `Rc::try_unwrap(...).ok()`. (Note that these are not equivalent for\n+    /// `Arc`, due to race conditions that do not apply to `Rc`.)\n+    #[inline]\n+    #[unstable(feature = \"rc_into_inner\", issue = \"106894\")]\n+    pub fn into_inner(this: Self) -> Option<T> {\n+        Rc::try_unwrap(this).ok()\n+    }\n }\n \n impl<T> Rc<[T]> {"}, {"sha": "2784108e0e63509101a225f716a2a1625d743350", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b28775cdcb718f9b3455b7661b3a7ae3f63f6511/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28775cdcb718f9b3455b7661b3a7ae3f63f6511/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "patch": "@@ -151,6 +151,21 @@ fn try_unwrap() {\n     assert_eq!(Rc::try_unwrap(x), Ok(5));\n }\n \n+#[test]\n+fn into_inner() {\n+    let x = Rc::new(3);\n+    assert_eq!(Rc::into_inner(x), Some(3));\n+\n+    let x = Rc::new(4);\n+    let y = Rc::clone(&x);\n+    assert_eq!(Rc::into_inner(x), None);\n+    assert_eq!(Rc::into_inner(y), Some(4));\n+\n+    let x = Rc::new(5);\n+    let _w = Rc::downgrade(&x);\n+    assert_eq!(Rc::into_inner(x), Some(5));\n+}\n+\n #[test]\n fn into_from_raw() {\n     let x = Rc::new(Box::new(\"hello\"));"}]}