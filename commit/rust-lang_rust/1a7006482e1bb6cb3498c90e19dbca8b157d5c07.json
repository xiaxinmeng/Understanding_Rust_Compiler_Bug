{"sha": "1a7006482e1bb6cb3498c90e19dbca8b157d5c07", "node_id": "C_kwDOAAsO6NoAKDFhNzAwNjQ4MmUxYmI2Y2IzNDk4YzkwZTE5ZGJjYThiMTU3ZDVjMDc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-08T10:36:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-13T01:17:31Z"}, "message": "Avoid use of `Lrc` in `mbe::Frame`.\n\nThis is a nice performance win on some crates.", "tree": {"sha": "edf7257d13c828b73e747f0e928e65f11bdb16fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf7257d13c828b73e747f0e928e65f11bdb16fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7006482e1bb6cb3498c90e19dbca8b157d5c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7006482e1bb6cb3498c90e19dbca8b157d5c07", "html_url": "https://github.com/rust-lang/rust/commit/1a7006482e1bb6cb3498c90e19dbca8b157d5c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7006482e1bb6cb3498c90e19dbca8b157d5c07/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "769e2edb78a2729873288f53084bfc36f123e38e", "url": "https://api.github.com/repos/rust-lang/rust/commits/769e2edb78a2729873288f53084bfc36f123e38e", "html_url": "https://github.com/rust-lang/rust/commit/769e2edb78a2729873288f53084bfc36f123e38e"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "ca2908d7923ac3d7a1fc481f267e9b221857375c", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1a7006482e1bb6cb3498c90e19dbca8b157d5c07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7006482e1bb6cb3498c90e19dbca8b157d5c07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=1a7006482e1bb6cb3498c90e19dbca8b157d5c07", "patch": "@@ -5,7 +5,6 @@ use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{pluralize, PResult};\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_span::hygiene::{LocalExpnId, Transparency};\n@@ -27,31 +26,35 @@ impl MutVisitor for Marker {\n }\n \n /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n-enum Frame {\n-    Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },\n-    Sequence { forest: Lrc<mbe::SequenceRepetition>, idx: usize, sep: Option<Token> },\n+enum Frame<'a> {\n+    Delimited {\n+        tts: &'a [mbe::TokenTree],\n+        delim_token: token::DelimToken,\n+        idx: usize,\n+        span: DelimSpan,\n+    },\n+    Sequence {\n+        tts: &'a [mbe::TokenTree],\n+        idx: usize,\n+        sep: Option<Token>,\n+    },\n }\n \n-impl Frame {\n+impl<'a> Frame<'a> {\n     /// Construct a new frame around the delimited set of tokens.\n-    fn new(tts: Vec<mbe::TokenTree>) -> Frame {\n-        let forest = Lrc::new(mbe::Delimited { delim: token::NoDelim, tts });\n-        Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }\n+    fn new(tts: &'a [mbe::TokenTree]) -> Frame<'a> {\n+        Frame::Delimited { tts, delim_token: token::NoDelim, idx: 0, span: DelimSpan::dummy() }\n     }\n }\n \n-impl Iterator for Frame {\n-    type Item = mbe::TokenTree;\n+impl<'a> Iterator for Frame<'a> {\n+    type Item = &'a mbe::TokenTree;\n \n-    fn next(&mut self) -> Option<mbe::TokenTree> {\n-        match *self {\n-            Frame::Delimited { ref forest, ref mut idx, .. } => {\n-                let res = forest.tts.get(*idx).cloned();\n-                *idx += 1;\n-                res\n-            }\n-            Frame::Sequence { ref forest, ref mut idx, .. } => {\n-                let res = forest.tts.get(*idx).cloned();\n+    fn next(&mut self) -> Option<&'a mbe::TokenTree> {\n+        match self {\n+            Frame::Delimited { tts, ref mut idx, .. }\n+            | Frame::Sequence { tts, ref mut idx, .. } => {\n+                let res = tts.get(*idx);\n                 *idx += 1;\n                 res\n             }\n@@ -92,7 +95,7 @@ pub(super) fn transcribe<'a>(\n \n     // We descend into the RHS (`src`), expanding things as we go. This stack contains the things\n     // we have yet to expand/are still expanding. We start the stack off with the whole RHS.\n-    let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];\n+    let mut stack: SmallVec<[Frame<'_>; 1]> = smallvec![Frame::new(&src)];\n \n     // As we descend in the RHS, we will need to be able to match nested sequences of matchers.\n     // `repeats` keeps track of where we are in matching at each level, with the last element being\n@@ -146,14 +149,14 @@ pub(super) fn transcribe<'a>(\n                 // We are done processing a Delimited. If this is the top-level delimited, we are\n                 // done. Otherwise, we unwind the result_stack to append what we have produced to\n                 // any previous results.\n-                Frame::Delimited { forest, span, .. } => {\n+                Frame::Delimited { delim_token, span, .. } => {\n                     if result_stack.is_empty() {\n                         // No results left to compute! We are back at the top-level.\n                         return Ok(TokenStream::new(result));\n                     }\n \n                     // Step back into the parent Delimited.\n-                    let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));\n+                    let tree = TokenTree::Delimited(span, delim_token, TokenStream::new(result));\n                     result = result_stack.pop().unwrap();\n                     result.push(tree.into());\n                 }\n@@ -167,7 +170,7 @@ pub(super) fn transcribe<'a>(\n             // We are descending into a sequence. We first make sure that the matchers in the RHS\n             // and the matches in `interp` have the same shape. Otherwise, either the caller or the\n             // macro writer has made a mistake.\n-            seq @ mbe::TokenTree::Sequence(..) => {\n+            seq @ mbe::TokenTree::Sequence(_, delimited) => {\n                 match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n                         return Err(cx.struct_span_err(\n@@ -214,7 +217,7 @@ pub(super) fn transcribe<'a>(\n                             stack.push(Frame::Sequence {\n                                 idx: 0,\n                                 sep: seq.separator.clone(),\n-                                forest: seq,\n+                                tts: &delimited.tts,\n                             });\n                         }\n                     }\n@@ -272,15 +275,21 @@ pub(super) fn transcribe<'a>(\n             // the previous results (from outside the Delimited).\n             mbe::TokenTree::Delimited(mut span, delimited) => {\n                 mut_visit::visit_delim_span(&mut span, &mut marker);\n-                stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n+                stack.push(Frame::Delimited {\n+                    tts: &delimited.tts,\n+                    delim_token: delimited.delim,\n+                    idx: 0,\n+                    span,\n+                });\n                 result_stack.push(mem::take(&mut result));\n             }\n \n             // Nothing much to do here. Just push the token to the result, being careful to\n             // preserve syntax context.\n             mbe::TokenTree::Token(token) => {\n-                let mut tt = TokenTree::Token(token);\n-                mut_visit::visit_tt(&mut tt, &mut marker);\n+                let mut token = token.clone();\n+                mut_visit::visit_token(&mut token, &mut marker);\n+                let tt = TokenTree::Token(token);\n                 result.push(tt.into());\n             }\n \n@@ -516,7 +525,7 @@ fn out_of_bounds_err<'a>(\n \n fn transcribe_metavar_expr<'a>(\n     cx: &ExtCtxt<'a>,\n-    expr: MetaVarExpr,\n+    expr: &MetaVarExpr,\n     interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,\n     marker: &mut Marker,\n     repeats: &[(usize, usize)],\n@@ -528,7 +537,7 @@ fn transcribe_metavar_expr<'a>(\n         marker.visit_span(&mut span);\n         span\n     };\n-    match expr {\n+    match *expr {\n         MetaVarExpr::Count(original_ident, depth_opt) => {\n             let matched = matched_from_ident(cx, original_ident, interp)?;\n             let count = count_repetitions(cx, depth_opt, matched, &repeats, sp)?;"}]}