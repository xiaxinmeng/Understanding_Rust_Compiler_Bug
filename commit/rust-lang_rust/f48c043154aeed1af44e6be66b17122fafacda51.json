{"sha": "f48c043154aeed1af44e6be66b17122fafacda51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OGMwNDMxNTRhZWVkMWFmNDRlNmJlNjZiMTcxMjJmYWZhY2RhNTE=", "commit": {"author": {"name": "Francis Gagn\u00e9", "email": "fragag1@gmail.com", "date": "2018-02-12T07:31:26Z"}, "committer": {"name": "Francis Gagn\u00e9", "email": "fragag1@gmail.com", "date": "2018-03-27T03:42:29Z"}, "message": "Document builtin implementations of Clone and Copy\n\nThere are types that implement `Clone` and `Copy` but are not mentioned\nin the documentation, because the implementations are provided by the\ncompiler. They are types of variants that cannot be fully covered by\ntrait implementations in Rust code, because the language is not\nexpressive enough.", "tree": {"sha": "5ad734fd48dbaa9f7fccf8189620941bd12d4285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad734fd48dbaa9f7fccf8189620941bd12d4285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48c043154aeed1af44e6be66b17122fafacda51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48c043154aeed1af44e6be66b17122fafacda51", "html_url": "https://github.com/rust-lang/rust/commit/f48c043154aeed1af44e6be66b17122fafacda51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48c043154aeed1af44e6be66b17122fafacda51/comments", "author": {"login": "FraGag", "id": 534195, "node_id": "MDQ6VXNlcjUzNDE5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/534195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FraGag", "html_url": "https://github.com/FraGag", "followers_url": "https://api.github.com/users/FraGag/followers", "following_url": "https://api.github.com/users/FraGag/following{/other_user}", "gists_url": "https://api.github.com/users/FraGag/gists{/gist_id}", "starred_url": "https://api.github.com/users/FraGag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FraGag/subscriptions", "organizations_url": "https://api.github.com/users/FraGag/orgs", "repos_url": "https://api.github.com/users/FraGag/repos", "events_url": "https://api.github.com/users/FraGag/events{/privacy}", "received_events_url": "https://api.github.com/users/FraGag/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FraGag", "id": 534195, "node_id": "MDQ6VXNlcjUzNDE5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/534195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FraGag", "html_url": "https://github.com/FraGag", "followers_url": "https://api.github.com/users/FraGag/followers", "following_url": "https://api.github.com/users/FraGag/following{/other_user}", "gists_url": "https://api.github.com/users/FraGag/gists{/gist_id}", "starred_url": "https://api.github.com/users/FraGag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FraGag/subscriptions", "organizations_url": "https://api.github.com/users/FraGag/orgs", "repos_url": "https://api.github.com/users/FraGag/repos", "events_url": "https://api.github.com/users/FraGag/events{/privacy}", "received_events_url": "https://api.github.com/users/FraGag/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27164faaef69853e2c1adcc0ccd6e70780b6da0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27164faaef69853e2c1adcc0ccd6e70780b6da0a", "html_url": "https://github.com/rust-lang/rust/commit/27164faaef69853e2c1adcc0ccd6e70780b6da0a"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "b6a5948e6456ecf72265bdf142198a213fb868b2", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f48c043154aeed1af44e6be66b17122fafacda51/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48c043154aeed1af44e6be66b17122fafacda51/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=f48c043154aeed1af44e6be66b17122fafacda51", "patch": "@@ -63,11 +63,6 @@\n /// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n /// implementation of [`clone`] calls [`clone`] on each field.\n ///\n-/// ## Closures\n-///\n-/// Closure types automatically implement `Clone` if they capture no value from the environment\n-/// or if all such captured values implement `Clone` themselves.\n-///\n /// ## How can I implement `Clone`?\n ///\n /// Types that are [`Copy`] should have a trivial implementation of `Clone`. More formally:\n@@ -92,6 +87,23 @@\n ///     fn clone(&self) -> Stats { *self }\n /// }\n /// ```\n+///\n+/// ## Additional implementors\n+///\n+/// In addition to the [implementors listed below][impls],\n+/// the following types also implement `Clone`:\n+///\n+/// * Function item types (i.e. the distinct types defined for each function)\n+/// * Function pointer types (e.g. `fn() -> i32`)\n+/// * Array types, for all sizes, if the item type also implements `Clone` (e.g. `[i32; 123456]`)\n+/// * Tuple types, if each component also implements `Clone` (e.g. `()`, `(i32, bool)`)\n+/// * Closure types, if they capture no value from the environment\n+///   or if all such captured values implement `Clone` themselves.\n+///   Note that variables captured by shared reference always implement `Clone`\n+///   (even if the referent doesn't),\n+///   while variables captured by mutable reference never implement `Clone`.\n+///\n+/// [impls]: #implementors\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n pub trait Clone : Sized {"}, {"sha": "885aabe08069d4e064cbebd9183819fe799084e8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f48c043154aeed1af44e6be66b17122fafacda51/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48c043154aeed1af44e6be66b17122fafacda51/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=f48c043154aeed1af44e6be66b17122fafacda51", "patch": "@@ -166,11 +166,6 @@ pub trait Unsize<T: ?Sized> {\n /// are allowed to access `x` after the assignment. Under the hood, both a copy and a move\n /// can result in bits being copied in memory, although this is sometimes optimized away.\n ///\n-/// ## Closures\n-///\n-/// Closure types automatically implement `Copy` if they capture no value from the environment\n-/// or if all such captured values implement `Copy` themselves.\n-///\n /// ## How can I implement `Copy`?\n ///\n /// There are two ways to implement `Copy` on your type. The simplest is to use `derive`:\n@@ -265,13 +260,29 @@ pub trait Unsize<T: ?Sized> {\n /// non-`Copy` in the future, it could be prudent to omit the `Copy` implementation now, to\n /// avoid a breaking API change.\n ///\n+/// ## Additional implementors\n+///\n+/// In addition to the [implementors listed below][impls],\n+/// the following types also implement `Copy`:\n+///\n+/// * Function item types (i.e. the distinct types defined for each function)\n+/// * Function pointer types (e.g. `fn() -> i32`)\n+/// * Array types, for all sizes, if the item type also implements `Copy` (e.g. `[i32; 123456]`)\n+/// * Tuple types, if each component also implements `Copy` (e.g. `()`, `(i32, bool)`)\n+/// * Closure types, if they capture no value from the environment\n+///   or if all such captured values implement `Copy` themselves.\n+///   Note that variables captured by shared reference always implement `Copy`\n+///   (even if the referent doesn't),\n+///   while variables captured by mutable reference never implement `Copy`.\n+///\n /// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Drop`]: ../../std/ops/trait.Drop.html\n /// [`size_of::<T>`]: ../../std/mem/fn.size_of.html\n /// [`Clone`]: ../clone/trait.Clone.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`i32`]: ../../std/primitive.i32.html\n+/// [impls]: #implementors\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}]}