{"sha": "3bf94b2c9d300132e391a27dfa6d44256ebee316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjk0YjJjOWQzMDAxMzJlMzkxYTI3ZGZhNmQ0NDI1NmViZWUzMTY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-23T17:49:38Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-23T17:49:38Z"}, "message": "Naming", "tree": {"sha": "ea158bfc4f36f6a12a61473a56226a13049ebf9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea158bfc4f36f6a12a61473a56226a13049ebf9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf94b2c9d300132e391a27dfa6d44256ebee316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf94b2c9d300132e391a27dfa6d44256ebee316", "html_url": "https://github.com/rust-lang/rust/commit/3bf94b2c9d300132e391a27dfa6d44256ebee316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf94b2c9d300132e391a27dfa6d44256ebee316/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "html_url": "https://github.com/rust-lang/rust/commit/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "32c54fbbfd9a6c348a5f173f640550ff794de034", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3bf94b2c9d300132e391a27dfa6d44256ebee316/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf94b2c9d300132e391a27dfa6d44256ebee316/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=3bf94b2c9d300132e391a27dfa6d44256ebee316", "patch": "@@ -1025,11 +1025,11 @@ enum Fields<'p, 'tcx> {\n     /// have not measured if it really made a difference.\n     Slice(&'p [Pat<'tcx>]),\n     Vec(SmallVec<[&'p Pat<'tcx>; 2]>),\n-    /// Patterns where some of the fields need to be hidden. `len` caches the number of non-hidden\n-    /// fields.\n+    /// Patterns where some of the fields need to be hidden. `kept_count` caches the number of\n+    /// non-hidden fields.\n     Filtered {\n         fields: SmallVec<[FilteredField<'p, 'tcx>; 2]>,\n-        len: usize,\n+        kept_count: usize,\n     },\n }\n \n@@ -1092,7 +1092,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                         if has_no_hidden_fields {\n                             Fields::wildcards_from_tys(cx, field_tys)\n                         } else {\n-                            let mut len = 0;\n+                            let mut kept_count = 0;\n                             let fields = variant\n                                 .fields\n                                 .iter()\n@@ -1109,12 +1109,12 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                                     if is_uninhabited && (!is_visible || is_non_exhaustive) {\n                                         FilteredField::Hidden(ty)\n                                     } else {\n-                                        len += 1;\n+                                        kept_count += 1;\n                                         FilteredField::Kept(wildcard_from_ty(ty))\n                                     }\n                                 })\n                                 .collect();\n-                            Fields::Filtered { fields, len }\n+                            Fields::Filtered { fields, kept_count }\n                         }\n                     }\n                 }\n@@ -1133,11 +1133,14 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         ret\n     }\n \n+    /// Returns the number of patterns from the viewpoint of match-checking, i.e. excluding hidden\n+    /// fields. This is what we want in most cases in this file, the only exception being\n+    /// conversion to/from `Pat`.\n     fn len(&self) -> usize {\n         match self {\n             Fields::Slice(pats) => pats.len(),\n             Fields::Vec(pats) => pats.len(),\n-            Fields::Filtered { len, .. } => *len,\n+            Fields::Filtered { kept_count, .. } => *kept_count,\n         }\n     }\n \n@@ -1207,7 +1210,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         let pats: &[_] = cx.pattern_arena.alloc_from_iter(pats);\n \n         match self {\n-            Fields::Filtered { fields, len } => {\n+            Fields::Filtered { fields, kept_count } => {\n                 let mut pats = pats.iter();\n                 let mut fields = fields.clone();\n                 for f in &mut fields {\n@@ -1216,7 +1219,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                         *p = pats.next().unwrap();\n                     }\n                 }\n-                Fields::Filtered { fields, len: *len }\n+                Fields::Filtered { fields, kept_count: *kept_count }\n             }\n             _ => Fields::Slice(pats),\n         }"}]}