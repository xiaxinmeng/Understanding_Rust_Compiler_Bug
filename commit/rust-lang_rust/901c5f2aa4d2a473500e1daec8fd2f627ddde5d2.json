{"sha": "901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMWM1ZjJhYTRkMmE0NzM1MDBlMWRhZWM4ZmQyZjYyN2RkZGU1ZDI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-16T01:46:04Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-02T20:52:26Z"}, "message": "add Thumbs to the compiler\n\nthis commit adds 4 new target definitions to the compiler for easier\ncross compilation to ARM Cortex-M devices.\n\n- `thumbv6m-none-eabi`\n  - For the Cortex-M0, Cortex-M0+ and Cortex-M1\n  - This architecture doesn't have hardware support (instructions) for\n    atomics. Hence, the `Atomic*` structs are not available for this\n    target.\n- `thumbv7m-none-eabi`\n  - For the Cortex-M3\n- `thumbv7em-none-eabi`\n  - For the FPU-less variants of the Cortex-M4 and Cortex-M7\n  - On this target, all the floating point operations will be lowered\n    software routines (intrinsics)\n- `thumbv7em-none-eabihf`\n  - For the variants of the Cortex-M4 and Cortex-M7 that do have a FPU.\n  - On this target, all the floating point operations will be lowered\n    to hardware instructions\n\nNo binary releases of standard crates, like `core`, are planned for\nthese targets because Cargo, in the future, will compile e.g. the `core`\ncrate on the fly as part of the `cargo build` process. In the meantime,\nyou'll have to compile the `core` crate yourself. [Xargo] is the easiest\nway to do that as in handles the compilation of `core` automatically and\ncan be used just like Cargo: `xargo build --target thumbv6m-none-eabi`\nis all that's needed.\n\n[Xargo]: https://crates.io/crates/xargo", "tree": {"sha": "a36762018c5f3220f4dec02ee43f7fcf9af6428f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36762018c5f3220f4dec02ee43f7fcf9af6428f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "html_url": "https://github.com/rust-lang/rust/commit/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/comments", "author": null, "committer": null, "parents": [{"sha": "8991ffc3031b4e787f9216caa12aa556f5ede8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8991ffc3031b4e787f9216caa12aa556f5ede8ed", "html_url": "https://github.com/rust-lang/rust/commit/8991ffc3031b4e787f9216caa12aa556f5ede8ed"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "6105949277871d1aeeb76789135132482cd07e36", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -66,11 +66,12 @@ mod netbsd_base;\n mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n+mod thumb_base;\n \n pub type TargetResult = Result<Target, String>;\n \n macro_rules! supported_targets {\n-    ( $(($triple:expr, $module:ident)),+ ) => (\n+    ( $(($triple:expr, $module:ident),)+ ) => (\n         $(mod $module;)*\n \n         /// List of supported targets\n@@ -191,7 +192,12 @@ supported_targets! {\n \n     (\"le32-unknown-nacl\", le32_unknown_nacl),\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n-    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten)\n+    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n+\n+    (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n+    (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),\n+    (\"thumbv7em-none-eabi\", thumbv7em_none_eabi),\n+    (\"thumbv7em-none-eabihf\", thumbv7em_none_eabihf),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -401,6 +407,9 @@ impl Default for TargetOptions {\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n+            // NOTE 0 is *not* the real default value of max_atomic_width. The default value is\n+            // actually the pointer_width of the target. This default is injected in the\n+            // Target::from_json function.\n             max_atomic_width: 0,\n             panic_strategy: PanicStrategy::Unwind,\n         }\n@@ -699,6 +708,10 @@ impl ToJson for Target {\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n \n+        if self.options.max_atomic_width.to_string() != self.target_pointer_width {\n+            d.insert(\"max-atomic-width\".to_string(), self.options.max_atomic_width.to_json());\n+        }\n+\n         Json::Object(d)\n     }\n }"}, {"sha": "21bd1bcb76efd3f6400156994fa12b8028427cf3", "filename": "src/librustc_back/target/thumb_base.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        executables: true,\n+        linker: \"arm-none-eabi-gcc\".to_string(),\n+        .. Default::default()\n+    }\n+}"}, {"sha": "0163c2807ee6aa1caf40143bfbeb35a0bbaf62fa", "filename": "src/librustc_back/target/thumbv6m_none_eabi.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv6m-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them\n+            // with +strict-align.\n+            features: \"+strict-align\".to_string(),\n+            // There are no atomic instructions available in the instruction set of the ARMv6-M\n+            // architecture\n+            max_atomic_width: 0,\n+            .. super::thumb_base::opts()\n+        }\n+    })\n+}"}, {"sha": "f0b71e564167582bd733851902ce2ece226b016b", "filename": "src/librustc_back/target/thumbv7em_none_eabi.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7em-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            max_atomic_width: 32,\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}, {"sha": "f0ae96259f0aeda1f6f1a67c6eeaa424f734346a", "filename": "src/librustc_back/target/thumbv7em_none_eabihf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7em-none-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            // vfp4 lowest common denominator between the Cortex-M4 (vfp4) and the Cortex-M7 (vfp5)\n+            features: \"+vfp4\".to_string(),\n+            max_atomic_width: 32,\n+            .. super::thumb_base::opts()\n+        }\n+    })\n+}"}, {"sha": "de97ef1b641d18a5382a4b5a00b6d7fc87a8d632", "filename": "src/librustc_back/target/thumbv7m_none_eabi.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7m-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            max_atomic_width: 32,\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}, {"sha": "91f48d2315af089c8a802c28aa64a3742801d46b", "filename": "src/test/run-make/target-without-atomics/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/901c5f2aa4d2a473500e1daec8fd2f627ddde5d2/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile?ref=901c5f2aa4d2a473500e1daec8fd2f627ddde5d2", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+# The target used below doesn't support atomic operations. Verify that's the case\n+all:\n+\trustc --print cfg --target thumbv6m-none-eabi | grep -qv target_has_atomic"}]}