{"sha": "736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNjk2OWY5ZmU0OWIxNzE3NGM2ZTA2ZmJiN2IxYTgzMzFjYTk0YjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T21:57:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-15T21:58:11Z"}, "message": "rustc: Add support for LLVM memory buffer creation via a wrapper function", "tree": {"sha": "762d10760333efd5c9db1bf81007c7c78081fa30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762d10760333efd5c9db1bf81007c7c78081fa30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "html_url": "https://github.com/rust-lang/rust/commit/736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9dd5ed1ab4565141c0c08b4cf2245e451a3eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9dd5ed1ab4565141c0c08b4cf2245e451a3eb1", "html_url": "https://github.com/rust-lang/rust/commit/bd9dd5ed1ab4565141c0c08b4cf2245e451a3eb1"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "67a8743efee78dcf999146b983ab9ef8e8eeaff9", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "patch": "@@ -311,7 +311,8 @@ RUNTIME_HDR := rt/globals.h \\\n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n \n-SUPPORT_CS := llvmext/MachOObjectFile.cpp llvmext/Object.cpp\n+SUPPORT_CS := $(addprefix llvmext/, \\\n+    MachOObjectFile.cpp Object.cpp RustWrapper.cpp)\n \n SUPPORT_HDR := llvmext/include/llvm-c/Object.h\n "}, {"sha": "394d56e090deaad363040cc06455fe4558c6dc06", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "patch": "@@ -738,9 +738,7 @@ native mod llvm = llvm_lib {\n     /** Adds a verification pass. */\n     fn LLVMAddVerifierPass(PassManagerRef PM);\n \n-    // TODO: LLVMCreateMemoryBufferWithContentsOfFile is unrepresentable. Make\n-    // a shim.\n-    /** Destroys the memory buffer. */\n+    /** Destroys a memory buffer. */\n     fn LLVMDisposeMemoryBuffer(MemoryBufferRef MemBuf);\n }\n \n@@ -770,6 +768,15 @@ native mod llvmext = llvmext_lib {\n     fn LLVMGetSectionSize(SectionIteratorRef SI) -> uint;\n     /** Returns the current section contents as a string buffer. */\n     fn LLVMGetSectionContents(SectionIteratorRef SI) -> sbuf;\n+\n+    /** Reads the given file and returns it as a memory buffer. Use\n+        LLVMDisposeMemoryBuffer() to get rid of it. */\n+    fn LLVMRustCreateMemoryBufferWithContentsOfFile(sbuf Path) ->\n+        MemoryBufferRef;\n+\n+    /** Returns a string describing the last error caused by an LLVMRust*\n+        call. */\n+    fn LLVMRustGetLastError() -> sbuf;\n }\n \n /* Slightly more terse object-interface to LLVM's 'builder' functions. */\n@@ -1382,8 +1389,13 @@ obj memory_buffer_dtor(MemoryBufferRef MemBuf) {\n \n type memory_buffer = rec(MemoryBufferRef llmb, memory_buffer_dtor dtor);\n \n-fn mk_memory_buffer() -> memory_buffer {\n-    fail;   // TODO\n+fn mk_memory_buffer(sbuf path) -> memory_buffer {\n+    auto llmb = llvmext.LLVMRustCreateMemoryBufferWithContentsOfFile(path);\n+    if ((llmb as int) == 0) {\n+        log \"failed to create memory buffer\";\n+        fail;\n+    }\n+    ret rec(llmb=llmb, dtor=memory_buffer_dtor(llmb));\n }\n \n /* Memory-managed interface to object files. */"}, {"sha": "a604e4c29c54cb812d2aff3e388b4821e577de97", "filename": "src/llvmext/RustWrapper.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2Fllvmext%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/736969f9fe49b17174c6e06fbb7b1a8331ca94b2/src%2Fllvmext%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvmext%2FRustWrapper.cpp?ref=736969f9fe49b17174c6e06fbb7b1a8331ca94b2", "patch": "@@ -0,0 +1,31 @@\n+//===- RustWrapper.cpp - Rust wrapper for core functions --------*- C++ -*-===//\n+//\n+//                     The LLVM Compiler Infrastructure\n+//\n+// This file is distributed under the University of Illinois Open Source\n+// License. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file defines alternate interfaces to core functions that are more\n+// readily callable by Rust's FFI.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"llvm-c/Core.h\"\n+#include \"llvm-c/Object.h\"\n+#include <cstdlib>\n+\n+static char *LLVMRustError;\n+\n+extern \"C\" LLVMMemoryBufferRef\n+LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n+  LLVMMemoryBufferRef MemBuf = NULL;\n+  LLVMCreateMemoryBufferWithContentsOfFile(Path, &MemBuf, &LLVMRustError);\n+  return MemBuf;\n+}\n+\n+extern \"C\" const char *LLVMRustGetLastError(void) {\n+  return LLVMRustError;\n+}\n+"}]}