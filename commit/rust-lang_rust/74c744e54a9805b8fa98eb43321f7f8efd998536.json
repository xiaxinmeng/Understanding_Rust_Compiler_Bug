{"sha": "74c744e54a9805b8fa98eb43321f7f8efd998536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Yzc0NGU1NGE5ODA1YjhmYTk4ZWI0MzMyMWY3ZjhlZmQ5OTg1MzY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T21:13:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T21:13:30Z"}, "message": "Rollup merge of #84466 - jyn514:prim-str, r=GuillaumeGomez\n\nrustdoc: Remove `PrimitiveType::{to_url_str, as_str}`\n\nThese can easily be rewritten in terms of `as_sym`, and this avoids bugs where the two get out of sync.\n\nI don't expect this to have a perf impact, but I'll start a perf run just in case.", "tree": {"sha": "5cec61e7f39d758c84d0bd6a4d05fa3c013dbcf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cec61e7f39d758c84d0bd6a4d05fa3c013dbcf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c744e54a9805b8fa98eb43321f7f8efd998536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgupd6CRBK7hj4Ov3rIwAAk4YIAFy5jcNMM6M2pABp4AEc4+Ln\nW4uLk8K/5tuYZvVa81IhcUFF6j3d+8MBFX/TziixMU5W9qbUt06nBPn3IQ3KhzSX\nkg8NVIDCGosPCxiBRJjVvvS7Oc+bpXUtZ0Ypy3QBB/LehCdBd2bH6DMKw+oZqS0N\nbCoIlV7CtyuvhMzWMLaFs4fOxLvY9z0FRK3HWl1IwIWi4LP/Opgn8O9ecyUFBZXJ\n3rCFNVw618CxHmRsb9B2mVVU+3IDBnCo7KXJCU4GEpjv+yxAkNQWkjbnSCyt/k2D\nMQOmxDMskMOJmZgPccILQnYiPoL/XlzE8eyRzowUFBZ/3HqZBKXdjAAV+7pYlfM=\n=86ye\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cec61e7f39d758c84d0bd6a4d05fa3c013dbcf9\nparent 756431211d3960c40c974e40a82d206595cb41f4\nparent 5079744414ccc44bd41490619dc8bb277f26b30a\nauthor Yuki Okushi <jtitor@2k36.org> 1622841210 +0900\ncommitter GitHub <noreply@github.com> 1622841210 +0900\n\nRollup merge of #84466 - jyn514:prim-str, r=GuillaumeGomez\n\nrustdoc: Remove `PrimitiveType::{to_url_str, as_str}`\n\nThese can easily be rewritten in terms of `as_sym`, and this avoids bugs where the two get out of sync.\n\nI don't expect this to have a perf impact, but I'll start a perf run just in case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c744e54a9805b8fa98eb43321f7f8efd998536", "html_url": "https://github.com/rust-lang/rust/commit/74c744e54a9805b8fa98eb43321f7f8efd998536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c744e54a9805b8fa98eb43321f7f8efd998536/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756431211d3960c40c974e40a82d206595cb41f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/756431211d3960c40c974e40a82d206595cb41f4", "html_url": "https://github.com/rust-lang/rust/commit/756431211d3960c40c974e40a82d206595cb41f4"}, {"sha": "5079744414ccc44bd41490619dc8bb277f26b30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5079744414ccc44bd41490619dc8bb277f26b30a", "html_url": "https://github.com/rust-lang/rust/commit/5079744414ccc44bd41490619dc8bb277f26b30a"}], "stats": {"total": 55, "additions": 10, "deletions": 45}, "files": [{"sha": "ac2d58903c1a969be33be953de640f33a7e1b4c6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=74c744e54a9805b8fa98eb43321f7f8efd998536", "patch": "@@ -1767,37 +1767,6 @@ impl PrimitiveType {\n         }\n     }\n \n-    crate fn as_str(&self) -> &'static str {\n-        use self::PrimitiveType::*;\n-        match *self {\n-            Isize => \"isize\",\n-            I8 => \"i8\",\n-            I16 => \"i16\",\n-            I32 => \"i32\",\n-            I64 => \"i64\",\n-            I128 => \"i128\",\n-            Usize => \"usize\",\n-            U8 => \"u8\",\n-            U16 => \"u16\",\n-            U32 => \"u32\",\n-            U64 => \"u64\",\n-            U128 => \"u128\",\n-            F32 => \"f32\",\n-            F64 => \"f64\",\n-            Str => \"str\",\n-            Bool => \"bool\",\n-            Char => \"char\",\n-            Array => \"array\",\n-            Slice => \"slice\",\n-            Tuple => \"tuple\",\n-            Unit => \"unit\",\n-            RawPointer => \"pointer\",\n-            Reference => \"reference\",\n-            Fn => \"fn\",\n-            Never => \"never\",\n-        }\n-    }\n-\n     crate fn impls(&self, tcx: TyCtxt<'_>) -> &'static ArrayVec<DefId, 4> {\n         Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n     }\n@@ -1860,10 +1829,6 @@ impl PrimitiveType {\n         })\n     }\n \n-    crate fn to_url_str(&self) -> &'static str {\n-        self.as_str()\n-    }\n-\n     crate fn as_sym(&self) -> Symbol {\n         use PrimitiveType::*;\n         match self {"}, {"sha": "d5213fd77117a00655ab27ee796fa826f9320340", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=74c744e54a9805b8fa98eb43321f7f8efd998536", "patch": "@@ -574,7 +574,7 @@ fn primitive_link(\n                     f,\n                     \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n                     \"../\".repeat(len),\n-                    prim.to_url_str()\n+                    prim.as_sym()\n                 )?;\n                 needs_termination = true;\n             }\n@@ -603,7 +603,7 @@ fn primitive_link(\n                         f,\n                         \"<a class=\\\"primitive\\\" href=\\\"{}/primitive.{}.html\\\">\",\n                         loc.join(\"/\"),\n-                        prim.to_url_str()\n+                        prim.as_sym()\n                     )?;\n                     needs_termination = true;\n                 }\n@@ -677,7 +677,7 @@ fn fmt_type<'cx>(\n             fmt::Display::fmt(&tybounds(param_names, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n-        clean::Primitive(prim) => primitive_link(f, prim, prim.as_str(), cx),\n+        clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!("}, {"sha": "bee62915ea9b1f841cb2d9122f4db46d42706df6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=74c744e54a9805b8fa98eb43321f7f8efd998536", "patch": "@@ -379,7 +379,7 @@ impl FromWithTcx<clean::Type> for Type {\n                     .unwrap_or_default(),\n             },\n             Generic(s) => Type::Generic(s.to_string()),\n-            Primitive(p) => Type::Primitive(p.as_str().to_string()),\n+            Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),"}, {"sha": "e6e6497902c26da1774abf8dc15f2b466f0e15fb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c744e54a9805b8fa98eb43321f7f8efd998536/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=74c744e54a9805b8fa98eb43321f7f8efd998536", "patch": "@@ -91,10 +91,10 @@ impl Res {\n         }\n     }\n \n-    fn name(self, tcx: TyCtxt<'_>) -> String {\n+    fn name(self, tcx: TyCtxt<'_>) -> Symbol {\n         match self {\n-            Res::Def(_, id) => tcx.item_name(id).to_string(),\n-            Res::Primitive(prim) => prim.as_str().to_string(),\n+            Res::Def(_, id) => tcx.item_name(id),\n+            Res::Primitive(prim) => prim.as_sym(),\n         }\n     }\n \n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::AssocKind::Const => \"associatedconstant\",\n                         ty::AssocKind::Type => \"associatedtype\",\n                     };\n-                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_str(), out, item_name);\n+                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_sym(), out, item_name);\n                     (Res::Primitive(prim_ty), fragment, Some((kind.as_def_kind(), item.def_id)))\n                 })\n         })\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             AnchorFailure::RustdocAnchorConflict(res),\n                         ));\n                     }\n-                    return Ok((res, Some(ty.as_str().to_owned())));\n+                    return Ok((res, Some(ty.as_sym().to_string())));\n                 }\n                 _ => return Ok((res, extra_fragment.clone())),\n             }\n@@ -1148,7 +1148,7 @@ impl LinkCollector<'_, '_> {\n                         return None;\n                     }\n                     res = prim;\n-                    fragment = Some(prim.name(self.cx.tcx));\n+                    fragment = Some(prim.name(self.cx.tcx).to_string());\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![res, prim];"}]}