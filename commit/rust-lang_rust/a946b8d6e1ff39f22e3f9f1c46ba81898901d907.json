{"sha": "a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NDZiOGQ2ZTFmZjM5ZjIyZTNmOWYxYzQ2YmE4MTg5ODkwMWQ5MDc=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-14T22:42:18Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-14T22:42:33Z"}, "message": "save-analysis: Process bounds in impl trait only in argument position", "tree": {"sha": "5bb936a22273557ae59a19cc39a6e9953dcd9d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb936a22273557ae59a19cc39a6e9953dcd9d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "html_url": "https://github.com/rust-lang/rust/commit/a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a946b8d6e1ff39f22e3f9f1c46ba81898901d907/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e39e871fa9064f310d05a295a6c197d9b0da78", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e39e871fa9064f310d05a295a6c197d9b0da78", "html_url": "https://github.com/rust-lang/rust/commit/30e39e871fa9064f310d05a295a6c197d9b0da78"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "55f6b91e7143106e336086ffb4ef0142f6969222", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a946b8d6e1ff39f22e3f9f1c46ba81898901d907/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a946b8d6e1ff39f22e3f9f1c46ba81898901d907/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "patch": "@@ -385,7 +385,12 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n \n             if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n-                v.visit_ty(&ret_ty);\n+                if let ast::TyKind::ImplTrait(..) = ret_ty.node {\n+                    // FIXME: Opaque type desugaring prevents us from easily\n+                    // processing trait bounds. See `visit_ty` for more details.\n+                } else {\n+                    v.visit_ty(&ret_ty);\n+                }\n             }\n \n             v.visit_block(&body);\n@@ -1439,6 +1444,18 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.visit_ty(element);\n                 self.nest_tables(length.id, |v| v.visit_expr(&length.value));\n             }\n+            ast::TyKind::ImplTrait(id, ref bounds) => {\n+                // FIXME: As of writing, the opaque type lowering introduces\n+                // another DefPath scope/segment (used to declare the resulting\n+                // opaque type item).\n+                // However, the synthetic scope does *not* have associated\n+                // typeck tables, which means we can't nest it and we fire an\n+                // assertion when resolving the qualified type paths in trait\n+                // bounds...\n+                // This will panic if called on return type `impl Trait`, which\n+                // we guard against in `process_fn`.\n+                self.nest_tables(id, |v| v.process_bounds(bounds));\n+            }\n             _ => visit::walk_ty(self, t),\n         }\n     }"}, {"sha": "92e85884f664dbcc43f88023f439d802f08e6009", "filename": "src/test/ui/save-analysis/issue-63663.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a946b8d6e1ff39f22e3f9f1c46ba81898901d907/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-63663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a946b8d6e1ff39f22e3f9f1c46ba81898901d907/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-63663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-63663.rs?ref=a946b8d6e1ff39f22e3f9f1c46ba81898901d907", "patch": "@@ -1,15 +1,20 @@\n // check-pass\n // compile-flags: -Zsave-analysis\n \n-// Check that this doesn't ICE when processing associated const in formal\n-// argument and return type of functions defined inside function/method scope.\n-\n pub trait Trait {\n     type Assoc;\n }\n \n pub struct A;\n \n+trait Generic<T> {}\n+impl<T> Generic<T> for () {}\n+\n+// Don't ICE when resolving type paths in return type `impl Trait`\n+fn assoc_in_opaque_type_bounds<U: Trait>() -> impl Generic<U::Assoc> {}\n+\n+// Check that this doesn't ICE when processing associated const in formal\n+// argument and return type of functions defined inside function/method scope.\n pub fn func() {\n     fn _inner1<U: Trait>(_: U::Assoc) {}\n     fn _inner2<U: Trait>() -> U::Assoc { unimplemented!() }"}]}