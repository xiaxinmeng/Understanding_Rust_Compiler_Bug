{"sha": "e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "node_id": "C_kwDOAAsO6NoAKGU1ZWQ0M2IxZGM3MzBlZjI4MzczNmVhYTZlM2ExMmExYmVkMGU5MDU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-21T11:58:06Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-21T11:58:06Z"}, "message": "Remove redundant `Option` from eager macro fns", "tree": {"sha": "164fddb546f67d8c4017ca0ef4792396186e4c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/164fddb546f67d8c4017ca0ef4792396186e4c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "html_url": "https://github.com/rust-lang/rust/commit/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5340386365b2b16c4e9bbae546504b97564c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5340386365b2b16c4e9bbae546504b97564c41", "html_url": "https://github.com/rust-lang/rust/commit/df5340386365b2b16c4e9bbae546504b97564c41"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "f98bc0aba2c2fe85d3b3bda380798c9073cfeb5b", "filename": "crates/hir_expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "patch": "@@ -42,7 +42,7 @@ macro_rules! register_builtin {\n                 db: &dyn AstDatabase,\n                 arg_id: MacroCallId,\n                 tt: &tt::Subtree,\n-            ) -> ExpandResult<Option<ExpandedEager>> {\n+            ) -> ExpandResult<ExpandedEager> {\n                 let expander = match *self {\n                     $( EagerExpander::$e_kind => $e_expand, )*\n                 };\n@@ -60,7 +60,7 @@ macro_rules! register_builtin {\n     };\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct ExpandedEager {\n     pub(crate) subtree: tt::Subtree,\n     /// The included file ID of the include macro.\n@@ -362,7 +362,7 @@ fn compile_error_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let err = match &*tt.token_trees {\n         [tt::TokenTree::Leaf(tt::Leaf::Literal(it))] => {\n             let text = it.text.as_str();\n@@ -376,14 +376,14 @@ fn compile_error_expand(\n         _ => mbe::ExpandError::BindingError(\"`compile_error!` argument must be a string\".into()),\n     };\n \n-    ExpandResult { value: Some(ExpandedEager::new(quote! {})), err: Some(err) }\n+    ExpandResult { value: ExpandedEager::new(quote! {}), err: Some(err) }\n }\n \n fn concat_expand(\n     _db: &dyn AstDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let mut err = None;\n     let mut text = String::new();\n     for (i, mut t) in tt.token_trees.iter().enumerate() {\n@@ -418,14 +418,14 @@ fn concat_expand(\n             }\n         }\n     }\n-    ExpandResult { value: Some(ExpandedEager::new(quote!(#text))), err }\n+    ExpandResult { value: ExpandedEager::new(quote!(#text)), err }\n }\n \n fn concat_idents_expand(\n     _db: &dyn AstDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let mut err = None;\n     let mut ident = String::new();\n     for (i, t) in tt.token_trees.iter().enumerate() {\n@@ -440,7 +440,7 @@ fn concat_idents_expand(\n         }\n     }\n     let ident = tt::Ident { text: ident.into(), id: tt::TokenId::unspecified() };\n-    ExpandResult { value: Some(ExpandedEager::new(quote!(#ident))), err }\n+    ExpandResult { value: ExpandedEager::new(quote!(#ident)), err }\n }\n \n fn relative_file(\n@@ -476,7 +476,7 @@ fn include_expand(\n     db: &dyn AstDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let res = (|| {\n         let path = parse_string(tt)?;\n         let file_id = relative_file(db, arg_id, &path, false)?;\n@@ -488,7 +488,7 @@ fn include_expand(\n \n     match res {\n         Ok((subtree, file_id)) => {\n-            ExpandResult::ok(Some(ExpandedEager { subtree, included_file: Some(file_id) }))\n+            ExpandResult::ok(ExpandedEager { subtree, included_file: Some(file_id) })\n         }\n         Err(e) => ExpandResult::only_err(e),\n     }\n@@ -498,7 +498,7 @@ fn include_bytes_expand(\n     _db: &dyn AstDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     if let Err(e) = parse_string(tt) {\n         return ExpandResult::only_err(e);\n     }\n@@ -511,14 +511,14 @@ fn include_bytes_expand(\n             id: tt::TokenId::unspecified(),\n         }))],\n     };\n-    ExpandResult::ok(Some(ExpandedEager::new(res)))\n+    ExpandResult::ok(ExpandedEager::new(res))\n }\n \n fn include_str_expand(\n     db: &dyn AstDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let path = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => return ExpandResult::only_err(e),\n@@ -531,14 +531,14 @@ fn include_str_expand(\n     let file_id = match relative_file(db, arg_id, &path, true) {\n         Ok(file_id) => file_id,\n         Err(_) => {\n-            return ExpandResult::ok(Some(ExpandedEager::new(quote!(\"\"))));\n+            return ExpandResult::ok(ExpandedEager::new(quote!(\"\")));\n         }\n     };\n \n     let text = db.file_text(file_id);\n     let text = &*text;\n \n-    ExpandResult::ok(Some(ExpandedEager::new(quote!(#text))))\n+    ExpandResult::ok(ExpandedEager::new(quote!(#text)))\n }\n \n fn get_env_inner(db: &dyn AstDatabase, arg_id: MacroCallId, key: &str) -> Option<String> {\n@@ -550,7 +550,7 @@ fn env_expand(\n     db: &dyn AstDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let key = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => return ExpandResult::only_err(e),\n@@ -574,14 +574,14 @@ fn env_expand(\n     });\n     let expanded = quote! { #s };\n \n-    ExpandResult { value: Some(ExpandedEager::new(expanded)), err }\n+    ExpandResult { value: ExpandedEager::new(expanded), err }\n }\n \n fn option_env_expand(\n     db: &dyn AstDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> ExpandResult<Option<ExpandedEager>> {\n+) -> ExpandResult<ExpandedEager> {\n     let key = match parse_string(tt) {\n         Ok(it) => it,\n         Err(e) => return ExpandResult::only_err(e),\n@@ -592,5 +592,5 @@ fn option_env_expand(\n         Some(s) => quote! { std::option::Some(#s) },\n     };\n \n-    ExpandResult::ok(Some(ExpandedEager::new(expanded)))\n+    ExpandResult::ok(ExpandedEager::new(expanded))\n }"}, {"sha": "3d683d0640e8a630e886aadb20597b6ea3b1f05b", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ed43b1dc730ef283736eaa6e3a12a1bed0e905/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=e5ed43b1dc730ef283736eaa6e3a12a1bed0e905", "patch": "@@ -145,14 +145,16 @@ pub fn expand_eager_macro(\n \n     if let MacroDefKind::BuiltInEager(eager, _) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n+        if let Some(err) = res.err {\n+            diagnostic_sink(err);\n+        }\n \n-        let expanded = diagnostic_sink.expand_result_option(res)?;\n         let loc = MacroCallLoc {\n             def,\n             krate,\n             eager: Some(EagerCallInfo {\n-                arg_or_expansion: Arc::new(expanded.subtree),\n-                included_file: expanded.included_file,\n+                arg_or_expansion: Arc::new(res.value.subtree),\n+                included_file: res.value.included_file,\n             }),\n             kind: MacroCallKind::FnLike { ast_id: call_id, expand_to },\n         };"}]}