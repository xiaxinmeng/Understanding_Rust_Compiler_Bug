{"sha": "d9497749a87440d836495da6d40a5ce667a67ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDk3NzQ5YTg3NDQwZDgzNjQ5NWRhNmQ0MGE1Y2U2NjdhNjdjY2I=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2019-08-20T02:02:12Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2019-08-20T19:34:14Z"}, "message": "Move argfile expansion into run_compiler\n\nThis will make @path work with miri and other non-standard entrypoints.\n\nAlso since this simplifies librustc_driver::args, move it into a simple source file. Also\nremove the tests since they're doing nothing more than checking `str::lines` has the right\nbehaviour.", "tree": {"sha": "14627dbe922e215f02d4914ab54b3dcc1ca91efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14627dbe922e215f02d4914ab54b3dcc1ca91efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9497749a87440d836495da6d40a5ce667a67ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9497749a87440d836495da6d40a5ce667a67ccb", "html_url": "https://github.com/rust-lang/rust/commit/d9497749a87440d836495da6d40a5ce667a67ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9497749a87440d836495da6d40a5ce667a67ccb/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "html_url": "https://github.com/rust-lang/rust/commit/d2219c2e2e287d50c0f9761203d26d5fe3b0e639"}], "stats": {"total": 309, "additions": 70, "deletions": 239}, "files": [{"sha": "0906d358badd49dcbd940e5fc6e2f59ccd817756", "filename": "src/librustc_driver/args.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Flibrustc_driver%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Flibrustc_driver%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs.rs?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -0,0 +1,53 @@\n+use std::error;\n+use std::fmt;\n+use std::fs;\n+use std::io;\n+use std::str;\n+use std::sync::atomic::{AtomicBool, Ordering};\n+\n+static USED_ARGSFILE_FEATURE: AtomicBool = AtomicBool::new(false);\n+\n+pub fn used_unstable_argsfile() -> bool {\n+    USED_ARGSFILE_FEATURE.load(Ordering::Relaxed)\n+}\n+\n+pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n+    if arg.starts_with(\"@\") {\n+        let path = &arg[1..];\n+        let file = match fs::read_to_string(path) {\n+            Ok(file) => {\n+                USED_ARGSFILE_FEATURE.store(true, Ordering::Relaxed);\n+                file\n+            }\n+            Err(ref err) if err.kind() == io::ErrorKind::InvalidData => {\n+                return Err(Error::Utf8Error(Some(path.to_string())));\n+            }\n+            Err(err) => return Err(Error::IOError(path.to_string(), err)),\n+        };\n+        Ok(file.lines().map(ToString::to_string).collect())\n+    } else {\n+        Ok(vec![arg])\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    Utf8Error(Option<String>),\n+    IOError(String, io::Error),\n+}\n+\n+impl fmt::Display for Error {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::Utf8Error(None) => write!(fmt, \"Utf8 error\"),\n+            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {}\", path),\n+            Error::IOError(path, err) => write!(fmt, \"IO Error: {}: {}\", path, err),\n+        }\n+    }\n+}\n+\n+impl error::Error for Error {\n+    fn description(&self) -> &'static str {\n+        \"argument error\"\n+    }\n+}"}, {"sha": "a59f9afd8beb555a53b94a9405d8135c5334a169", "filename": "src/librustc_driver/args/mod.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs%2Fmod.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -1,84 +0,0 @@\n-use std::env;\n-use std::error;\n-use std::fmt;\n-use std::fs;\n-use std::io;\n-use std::str;\n-use std::sync::atomic::{AtomicBool, Ordering};\n-\n-#[cfg(test)]\n-mod tests;\n-\n-static USED_ARGSFILE_FEATURE: AtomicBool = AtomicBool::new(false);\n-\n-pub fn used_unstable_argsfile() -> bool {\n-    USED_ARGSFILE_FEATURE.load(Ordering::Relaxed)\n-}\n-\n-pub struct ArgsIter {\n-    base: env::ArgsOs,\n-    file: std::vec::IntoIter<String>,\n-}\n-\n-impl ArgsIter {\n-    pub fn new() -> Self {\n-        ArgsIter { base: env::args_os(), file: vec![].into_iter() }\n-    }\n-}\n-\n-impl Iterator for ArgsIter {\n-    type Item = Result<String, Error>;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        loop {\n-            if let Some(line) = self.file.next() {\n-                return Some(Ok(line));\n-            }\n-\n-            let arg =\n-                self.base.next().map(|arg| arg.into_string().map_err(|_| Error::Utf8Error(None)));\n-            match arg {\n-                Some(Err(err)) => return Some(Err(err)),\n-                Some(Ok(ref arg)) if arg.starts_with(\"@\") => {\n-                    let path = &arg[1..];\n-                    let file = match fs::read_to_string(path) {\n-                        Ok(file) => {\n-                            USED_ARGSFILE_FEATURE.store(true, Ordering::Relaxed);\n-                            file\n-                        }\n-                        Err(ref err) if err.kind() == io::ErrorKind::InvalidData => {\n-                            return Some(Err(Error::Utf8Error(Some(path.to_string()))));\n-                        }\n-                        Err(err) => return Some(Err(Error::IOError(path.to_string(), err))),\n-                    };\n-                    self.file =\n-                        file.lines().map(ToString::to_string).collect::<Vec<_>>().into_iter();\n-                }\n-                Some(Ok(arg)) => return Some(Ok(arg)),\n-                None => return None,\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub enum Error {\n-    Utf8Error(Option<String>),\n-    IOError(String, io::Error),\n-}\n-\n-impl fmt::Display for Error {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Error::Utf8Error(None) => write!(fmt, \"Utf8 error\"),\n-            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {}\", path),\n-            Error::IOError(path, err) => write!(fmt, \"IO Error: {}: {}\", path, err),\n-        }\n-    }\n-}\n-\n-impl error::Error for Error {\n-    fn description(&self) -> &'static str {\n-        \"argument error\"\n-    }\n-}"}, {"sha": "080dd5cb746c36d261a6411cdb6e0e0ba02bddd5", "filename": "src/librustc_driver/args/tests.rs", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs%2Ftests.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -1,145 +0,0 @@\n-use super::*;\n-\n-use std::str;\n-\n-fn want_args(v: impl IntoIterator<Item = &'static str>) -> Vec<String> {\n-    v.into_iter().map(String::from).collect()\n-}\n-\n-fn got_args(file: &[u8]) -> Result<Vec<String>, Error> {\n-    let ret = str::from_utf8(file)\n-        .map_err(|_| Error::Utf8Error(None))?\n-        .lines()\n-        .map(ToString::to_string)\n-        .collect::<Vec<_>>();\n-    Ok(ret)\n-}\n-\n-#[test]\n-fn nothing() {\n-    let file = b\"\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![]));\n-}\n-\n-#[test]\n-fn empty() {\n-    let file = b\"\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\"]));\n-}\n-\n-#[test]\n-fn simple() {\n-    let file = b\"foo\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n-}\n-\n-#[test]\n-fn simple_eol() {\n-    let file = b\"foo\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n-}\n-\n-#[test]\n-fn multi() {\n-    let file = b\"foo\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_eol() {\n-    let file = b\"foo\\nbar\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty() {\n-    let file = b\"foo\\n\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_eol() {\n-    let file = b\"foo\\n\\nbar\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_start() {\n-    let file = b\"\\nfoo\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\", \"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_end() {\n-    let file = b\"foo\\nbar\\n\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\", \"\"]));\n-}\n-\n-#[test]\n-fn simple_eol_crlf() {\n-    let file = b\"foo\\r\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n-}\n-\n-#[test]\n-fn multi_crlf() {\n-    let file = b\"foo\\r\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_eol_crlf() {\n-    let file = b\"foo\\r\\nbar\\r\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_crlf() {\n-    let file = b\"foo\\r\\n\\r\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_eol_crlf() {\n-    let file = b\"foo\\r\\n\\r\\nbar\\r\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_start_crlf() {\n-    let file = b\"\\r\\nfoo\\r\\nbar\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\", \"foo\", \"bar\"]));\n-}\n-\n-#[test]\n-fn multi_empty_end_crlf() {\n-    let file = b\"foo\\r\\nbar\\r\\n\\r\\n\";\n-\n-    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\", \"\"]));\n-}\n-\n-#[test]\n-fn bad_utf8() {\n-    let file = b\"foo\\x80foo\";\n-\n-    match got_args(file).unwrap_err() {\n-        Error::Utf8Error(_) => (),\n-        bad => panic!(\"bad err: {:?}\", bad),\n-    }\n-}"}, {"sha": "2cec404c3d7f65075b69bcc4565e36e0434e5b70", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -140,14 +140,22 @@ impl Callbacks for TimePassesCallbacks {\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler(\n-    args: &[String],\n+    at_args: &[String],\n     callbacks: &mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     emitter: Option<Box<dyn Write + Send>>\n ) -> interface::Result<()> {\n+    let mut args = Vec::new();\n+    for arg in at_args {\n+        match args::arg_expand(arg.clone()) {\n+            Ok(arg) => args.extend(arg),\n+            Err(err) => early_error(ErrorOutputType::default(),\n+                &format!(\"Failed to load argument file: {}\", err)),\n+        }\n+    }\n     let diagnostic_output = emitter.map(|emitter| DiagnosticOutput::Raw(emitter))\n                                    .unwrap_or(DiagnosticOutput::Default);\n-    let matches = match handle_options(args) {\n+    let matches = match handle_options(&args) {\n         Some(matches) => matches,\n         None => return Ok(()),\n     };\n@@ -1199,10 +1207,10 @@ pub fn main() {\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n     let result = report_ices_to_stderr_if_any(|| {\n-        let args = args::ArgsIter::new().enumerate()\n-            .map(|(i, arg)| arg.unwrap_or_else(|err| {\n-                early_error(ErrorOutputType::default(),\n-                            &format!(\"Argument {} is not valid: {}\", i, err))\n+        let args = env::args_os().enumerate()\n+            .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+                    early_error(ErrorOutputType::default(),\n+                            &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n             }))\n             .collect::<Vec<_>>();\n         run_compiler(&args, &mut callbacks, None, None)"}, {"sha": "161715685b57fa70d35e1ebc4467017c439273fd", "filename": "src/test/ui/commandline-argfile-badutf8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -1,7 +1,6 @@\n // Check to see if we can get parameters from an @argsfile file\n //\n // build-fail\n-// normalize-stderr-test: \"Argument \\d+\" -> \"Argument $$N\"\n // compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-badutf8.args\n \n #[cfg(not(cmdline_set))]"}, {"sha": "9af6fc0a518dfd05e76c56920bbd17ff3359e18e", "filename": "src/test/ui/commandline-argfile-badutf8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -1,2 +1,2 @@\n-error: Argument $N is not valid: Utf8 error in $DIR/commandline-argfile-badutf8.args\n+error: Failed to load argument file: Utf8 error in $DIR/commandline-argfile-badutf8.args\n "}, {"sha": "a29b4ab062de34c90ed2308687048590fece805e", "filename": "src/test/ui/commandline-argfile-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -1,7 +1,7 @@\n // Check to see if we can get parameters from an @argsfile file\n //\n+// ignore-tidy-linelength\n // build-fail\n-// normalize-stderr-test: \"Argument \\d+\" -> \"Argument $$N\"\n // normalize-stderr-test: \"os error \\d+\" -> \"os error $$ERR\"\n // normalize-stderr-test: \"commandline-argfile-missing.args:[^(]*\" -> \"commandline-argfile-missing.args: $$FILE_MISSING \"\n // compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-missing.args"}, {"sha": "179ad83100419591c92ae7f948be2255c2fcd193", "filename": "src/test/ui/commandline-argfile-missing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9497749a87440d836495da6d40a5ce667a67ccb/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr?ref=d9497749a87440d836495da6d40a5ce667a67ccb", "patch": "@@ -1,2 +1,2 @@\n-error: Argument $N is not valid: IO Error: $DIR/commandline-argfile-missing.args: $FILE_MISSING (os error $ERR)\n+error: Failed to load argument file: IO Error: $DIR/commandline-argfile-missing.args: $FILE_MISSING (os error $ERR)\n "}]}