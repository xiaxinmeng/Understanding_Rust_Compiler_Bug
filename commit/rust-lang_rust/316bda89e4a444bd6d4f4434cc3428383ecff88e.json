{"sha": "316bda89e4a444bd6d4f4434cc3428383ecff88e", "node_id": "C_kwDOAAsO6NoAKDMxNmJkYTg5ZTRhNDQ0YmQ2ZDRmNDQzNGNjMzQyODM4M2VjZmY4OGU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-23T03:54:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-23T03:54:41Z"}, "message": "Rollup merge of #104647 - RalfJung:alloc-strict-provenance, r=thomcc\n\nenable fuzzy_provenance_casts lint in liballoc and libstd\n\nr? ````@thomcc````", "tree": {"sha": "08cd93bb839316e938e60f5a24810b2ce99e307f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08cd93bb839316e938e60f5a24810b2ce99e307f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/316bda89e4a444bd6d4f4434cc3428383ecff88e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfZmBCRBK7hj4Ov3rIwAABxIIAKw24RqMUrsgFeNsIWxVPeUR\nOcFZn1MiPqoCUtGcRvQWwjkGjoF3huElJif6edjZXvXrhfPTsP+Yi4vhSOTt7Gov\nSaS+P7dUdS07A1s4ezqmXSEroSvcy1tWTv5xk7SXpAlnzzbdZ3ZJV0DmoWzTu3Y+\n0ZB/4c/CGFV9oM/uU/PY6km6rEbuOCEMEERCz/QgS7fOHv62UjgqzDOeQS/Ae6KW\nmLkfIiSxP7ZTrcJcSGD73rgS0baTTAV7OQ/f/8xNkvWdh+5KPbhG9sm2P5VRvLSL\n8r4HevMhvP4GbqwKA7y9sRfvpQ4z3B3cBUZ1hMV1+hbKCVQhxn11jARUo4szFVk=\n=y1pB\n-----END PGP SIGNATURE-----\n", "payload": "tree 08cd93bb839316e938e60f5a24810b2ce99e307f\nparent 54b629285512582f9405ecfad05cb9c6acb0ecdd\nparent 1a6966602a06bb85d1952027e990d72f6d01792f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1669175681 -0500\ncommitter GitHub <noreply@github.com> 1669175681 -0500\n\nRollup merge of #104647 - RalfJung:alloc-strict-provenance, r=thomcc\n\nenable fuzzy_provenance_casts lint in liballoc and libstd\n\nr? ````@thomcc````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/316bda89e4a444bd6d4f4434cc3428383ecff88e", "html_url": "https://github.com/rust-lang/rust/commit/316bda89e4a444bd6d4f4434cc3428383ecff88e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/316bda89e4a444bd6d4f4434cc3428383ecff88e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b629285512582f9405ecfad05cb9c6acb0ecdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b629285512582f9405ecfad05cb9c6acb0ecdd", "html_url": "https://github.com/rust-lang/rust/commit/54b629285512582f9405ecfad05cb9c6acb0ecdd"}, {"sha": "1a6966602a06bb85d1952027e990d72f6d01792f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6966602a06bb85d1952027e990d72f6d01792f", "html_url": "https://github.com/rust-lang/rust/commit/1a6966602a06bb85d1952027e990d72f6d01792f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "b25d63d835b54c762c5a7c7d160d583d7bf14e70", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -5,7 +5,9 @@\n #![feature(iter_next_chunk)]\n #![feature(repr_simd)]\n #![feature(slice_partition_dedup)]\n+#![feature(strict_provenance)]\n #![feature(test)]\n+#![deny(fuzzy_provenance_casts)]\n \n extern crate test;\n "}, {"sha": "96960d43f5820a26121f26bb8fb1236116fccd0c", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -82,6 +82,7 @@\n //\n // Lints:\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(fuzzy_provenance_casts)]\n #![warn(deprecated_in_future)]\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]"}, {"sha": "04da95bbb83eda668ad94d2d5b24f577ab5cda17", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -2,6 +2,7 @@\n \n use std::cell::RefCell;\n use std::fmt::{self, Write};\n+use std::ptr;\n \n #[test]\n fn test_format() {\n@@ -76,14 +77,14 @@ fn test_format_macro_interface() {\n     t!(format!(\"{}\", \"foo\"), \"foo\");\n     t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n     if cfg!(target_pointer_width = \"32\") {\n-        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x00001234\");\n-        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x00001234\");\n+        t!(format!(\"{:#p}\", ptr::invalid::<isize>(0x1234)), \"0x00001234\");\n+        t!(format!(\"{:#p}\", ptr::invalid_mut::<isize>(0x1234)), \"0x00001234\");\n     } else {\n-        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x0000000000001234\");\n-        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x0000000000001234\");\n+        t!(format!(\"{:#p}\", ptr::invalid::<isize>(0x1234)), \"0x0000000000001234\");\n+        t!(format!(\"{:#p}\", ptr::invalid_mut::<isize>(0x1234)), \"0x0000000000001234\");\n     }\n-    t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n-    t!(format!(\"{:p}\", 0x1234 as *mut isize), \"0x1234\");\n+    t!(format!(\"{:p}\", ptr::invalid::<isize>(0x1234)), \"0x1234\");\n+    t!(format!(\"{:p}\", ptr::invalid_mut::<isize>(0x1234)), \"0x1234\");\n     t!(format!(\"{A:x}\"), \"aloha\");\n     t!(format!(\"{B:X}\"), \"adios\");\n     t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");"}, {"sha": "d066ec03ee57e861b17b640d4afb33ac1929f713", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -47,6 +47,7 @@\n #![feature(strict_provenance)]\n #![feature(once_cell)]\n #![feature(drain_keep_rest)]\n+#![deny(fuzzy_provenance_casts)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "65d4c3c891ea689c2ec4c9267caa248141382d6a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -220,6 +220,7 @@\n #![allow(explicit_outlives_requirements)]\n #![allow(unused_lifetimes)]\n #![deny(rustc::existing_doc_keyword)]\n+#![deny(fuzzy_provenance_casts)]\n // Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n #![deny(ffi_unwind_calls)]\n // std may use features in a platform-specific way\n@@ -598,7 +599,7 @@ mod panicking;\n mod personality;\n \n #[path = \"../../backtrace/src/lib.rs\"]\n-#[allow(dead_code, unused_attributes)]\n+#[allow(dead_code, unused_attributes, fuzzy_provenance_casts)]\n mod backtrace_rs;\n \n // Re-export macros defined in libcore."}, {"sha": "5c1634084a055b31381849b8fc5085d47da89330", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -90,6 +90,7 @@ impl OwnedSocket {\n     }\n \n     // FIXME(strict_provenance_magic): we defined RawSocket to be a u64 ;-;\n+    #[allow(fuzzy_provenance_casts)]\n     #[cfg(not(target_vendor = \"uwp\"))]\n     pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n         cvt(unsafe {"}, {"sha": "a783e187004fcb92cf709cd0e12cf7c487b19595", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -13,6 +13,7 @@\n \n use super::DwarfReader;\n use core::mem;\n+use core::ptr;\n \n pub const DW_EH_PE_omit: u8 = 0xFF;\n pub const DW_EH_PE_absptr: u8 = 0x00;\n@@ -151,7 +152,7 @@ unsafe fn read_encoded_pointer(\n \n     // DW_EH_PE_aligned implies it's an absolute pointer value\n     if encoding == DW_EH_PE_aligned {\n-        reader.ptr = round_up(reader.ptr as usize, mem::size_of::<usize>())? as *const u8;\n+        reader.ptr = reader.ptr.with_addr(round_up(reader.ptr.addr(), mem::size_of::<usize>())?);\n         return Ok(reader.read::<usize>());\n     }\n \n@@ -171,7 +172,7 @@ unsafe fn read_encoded_pointer(\n     result += match encoding & 0x70 {\n         DW_EH_PE_absptr => 0,\n         // relative to address of the encoded value, despite the name\n-        DW_EH_PE_pcrel => reader.ptr as usize,\n+        DW_EH_PE_pcrel => reader.ptr.expose_addr(),\n         DW_EH_PE_funcrel => {\n             if context.func_start == 0 {\n                 return Err(());\n@@ -184,7 +185,7 @@ unsafe fn read_encoded_pointer(\n     };\n \n     if encoding & DW_EH_PE_indirect != 0 {\n-        result = *(result as *const usize);\n+        result = *ptr::from_exposed_addr::<usize>(result);\n     }\n \n     Ok(result)"}, {"sha": "01e4ffe3dfc8a04394145b67726b934d780b58d8", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316bda89e4a444bd6d4f4434cc3428383ecff88e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=316bda89e4a444bd6d4f4434cc3428383ecff88e", "patch": "@@ -3,6 +3,7 @@\n //! This module contains the facade (aka platform-specific) implementations of\n //! OS level functionality for Fortanix SGX.\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![allow(fuzzy_provenance_casts)] // FIXME: this entire module systematically confuses pointers and integers\n \n use crate::io::ErrorKind;\n use crate::sync::atomic::{AtomicBool, Ordering};"}]}