{"sha": "3a9a06311d8d2445d47f087ef68f702b643bc4df", "node_id": "C_kwDOAAsO6NoAKDNhOWEwNjMxMWQ4ZDI0NDVkNDdmMDg3ZWY2OGY3MDJiNjQzYmM0ZGY", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-30T17:01:28Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:25Z"}, "message": "Migrate borrow of moved value diagnostic", "tree": {"sha": "ab3ba7c7f8297962a8e9c0ed34f8808d252f9b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3ba7c7f8297962a8e9c0ed34f8808d252f9b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9a06311d8d2445d47f087ef68f702b643bc4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9a06311d8d2445d47f087ef68f702b643bc4df", "html_url": "https://github.com/rust-lang/rust/commit/3a9a06311d8d2445d47f087ef68f702b643bc4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9a06311d8d2445d47f087ef68f702b643bc4df/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "eeef05b318d1473ebedb90c84642b699e0a9b3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeef05b318d1473ebedb90c84642b699e0a9b3e8", "html_url": "https://github.com/rust-lang/rust/commit/eeef05b318d1473ebedb90c84642b699e0a9b3e8"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "118ca985b87ff63ebd16220bf79723dd4849506f", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=3a9a06311d8d2445d47f087ef68f702b643bc4df", "patch": "@@ -287,3 +287,9 @@ mir_build_irrefutable_let_patterns_while_let = irrefutable `while let` {$count -\n         *[other] these patterns\n     } will always match, so the loop will never exit\n     .help = consider instead using a `loop {\"{\"} ... {\"}\"}` with a `let` inside it\n+\n+mir_build_borrow_of_moved_value = borrow of moved value\n+    .label = value moved into `{$name}` here\n+    .occurs_because_label = move occurs because `{$name}` has type `{$ty}` which does not implement the `Copy` trait\n+    .value_borrowed_label = value borrowed here after move\n+    .suggest_borrowing = borrow this binding in the pattern to avoid moving the value"}, {"sha": "639c07f4194014c3cca8f45b08396324a938139b", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=3a9a06311d8d2445d47f087ef68f702b643bc4df", "patch": "@@ -562,3 +562,19 @@ pub struct IrrefutableLetPatternsLetElse {\n pub struct IrrefutableLetPatternsWhileLet {\n     pub count: usize,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::borrow_of_moved_value)]\n+pub struct BorrowOfMovedValue<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    #[label(mir_build::occurs_because_label)]\n+    pub binding_span: Span,\n+    #[label(mir_build::value_borrowed_label)]\n+    pub conflicts_ref: Vec<Span>,\n+    pub name: Ident,\n+    pub ty: Ty<'tcx>,\n+    #[suggestion(code = \"ref \", applicability = \"machine-applicable\")]\n+    pub suggest_borrowing: Option<Span>,\n+}"}, {"sha": "3b6b188bc6cfb9685e6cf9857d3213946db4a794", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9a06311d8d2445d47f087ef68f702b643bc4df/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=3a9a06311d8d2445d47f087ef68f702b643bc4df", "patch": "@@ -962,24 +962,14 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n                 }\n             });\n             if !conflicts_ref.is_empty() {\n-                let occurs_because = format!(\n-                    \"move occurs because `{}` has type `{}` which does not implement the `Copy` trait\",\n+                sess.emit_err(BorrowOfMovedValue {\n+                    span: pat.span,\n+                    binding_span,\n+                    conflicts_ref,\n                     name,\n-                    typeck_results.node_type(pat.hir_id),\n-                );\n-                let mut err = sess.struct_span_err(pat.span, \"borrow of moved value\");\n-                err.span_label(binding_span, format!(\"value moved into `{}` here\", name))\n-                    .span_label(binding_span, occurs_because)\n-                    .span_labels(conflicts_ref, \"value borrowed here after move\");\n-                if pat.span.contains(binding_span) {\n-                    err.span_suggestion_verbose(\n-                        binding_span.shrink_to_lo(),\n-                        \"borrow this binding in the pattern to avoid moving the value\",\n-                        \"ref \".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-                err.emit();\n+                    ty: typeck_results.node_type(pat.hir_id),\n+                    suggest_borrowing: pat.span.contains(binding_span).then(|| binding_span.shrink_to_lo()),\n+                });\n             }\n             return;\n         }"}]}