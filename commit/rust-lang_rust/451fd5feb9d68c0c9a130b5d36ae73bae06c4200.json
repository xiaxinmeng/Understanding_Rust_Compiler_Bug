{"sha": "451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWZkNWZlYjlkNjhjMGM5YTEzMGI1ZDM2YWU3M2JhZTA2YzQyMDA=", "commit": {"author": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-05T20:15:08Z"}, "committer": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-05T20:15:08Z"}, "message": "Extracting arguments to format to pass directly to panic when appropriate", "tree": {"sha": "c0dc6668a0fe5daab8c00de4eb50dec2ef630c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0dc6668a0fe5daab8c00de4eb50dec2ef630c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "html_url": "https://github.com/rust-lang/rust/commit/451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451fd5feb9d68c0c9a130b5d36ae73bae06c4200/comments", "author": null, "committer": null, "parents": [{"sha": "32404741c67a3262143e1f00f9fb31c86e684444", "url": "https://api.github.com/repos/rust-lang/rust/commits/32404741c67a3262143e1f00f9fb31c86e684444", "html_url": "https://github.com/rust-lang/rust/commit/32404741c67a3262143e1f00f9fb31c86e684444"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "d9c0f5950c0d8803905d514099487cb67784c1f3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/451fd5feb9d68c0c9a130b5d36ae73bae06c4200/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fd5feb9d68c0c9a130b5d36ae73bae06c4200/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "patch": "@@ -1022,9 +1022,47 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n         }\n \n         let closure = if match_type(cx, self_type, &paths::OPTION) { \"||\" } else { \"|_|\" };\n+        let span_replace_word = method_span.with_hi(span.hi());\n+\n+        if let hir::ExprAddrOf(_, ref addr_of) = arg.node {\n+            if let hir::ExprCall(ref _inner_fun, ref inner_args) = addr_of.node {\n+                // TODO: check if inner_fun is call to format!\n+                if inner_args.len() == 1 {\n+                    if let hir::ExprCall(_, ref format_args) = inner_args[0].node {\n+                        let args_len = format_args.len();\n+                        let args: Vec<String> = format_args\n+                            .into_iter()\n+                            .take(args_len - 1)\n+                            .map(|a| {\n+                                if let hir::ExprAddrOf(_, ref format_arg) = a.node {\n+                                    if let hir::ExprMatch(ref format_arg_expr, _, _) = format_arg.node {\n+                                        if let hir::ExprTup(ref format_arg_expr_tup) = format_arg_expr.node {\n+                                            return snippet(cx, format_arg_expr_tup[0].span, \"..\").into_owned();\n+                                        }\n+                                    }\n+                                };\n+                                snippet(cx, a.span, \"..\").into_owned()\n+                            })\n+                            .collect();\n+\n+                        let sugg = args.join(\", \");\n+\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPECT_FUN_CALL,\n+                            span_replace_word,\n+                            &format!(\"use of `{}` followed by a function call\", name),\n+                            \"try this\",\n+                            format!(\"unwrap_or_else({} panic!({}))\", closure, sugg),\n+                        );\n+\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n \n         let sugg: Cow<_> = snippet(cx, arg.span, \"..\");\n-        let span_replace_word = method_span.with_hi(span.hi());\n         \n         span_lint_and_sugg(\n             cx,"}, {"sha": "edf081aaa470e54a09a907ab506b82d024aa7598", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451fd5feb9d68c0c9a130b5d36ae73bae06c4200/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/451fd5feb9d68c0c9a130b5d36ae73bae06c4200/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=451fd5feb9d68c0c9a130b5d36ae73bae06c4200", "patch": "@@ -427,7 +427,7 @@ error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:365:26\n     |\n 365 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(&format!(\"Error {}: fake error\", error_code)))`\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n     |\n     = note: `-D expect-fun-call` implied by `-D warnings`\n \n@@ -441,7 +441,7 @@ error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:378:25\n     |\n 378 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(&format!(\"Error {}: fake error\", error_code)))`\n+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:381:25"}]}