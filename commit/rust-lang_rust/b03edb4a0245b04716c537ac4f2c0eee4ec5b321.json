{"sha": "b03edb4a0245b04716c537ac4f2c0eee4ec5b321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwM2VkYjRhMDI0NWIwNDcxNmM1MzdhYzRmMmMwZWVlNGVjNWIzMjE=", "commit": {"author": {"name": "Sam Whited", "email": "sam@samwhited.com", "date": "2017-03-30T18:23:35Z"}, "committer": {"name": "Sam Whited", "email": "sam@samwhited.com", "date": "2017-03-30T19:40:10Z"}, "message": "Improve the docs for the write and writeln macros\n\nThis change reduces duplication by linking the documentation for\n`writeln!` to `write!`. It also restructures the `write!` documentation\nto read in a more logical manner.\n\nUpdates #29329, #29381", "tree": {"sha": "d9bae0dbd2f69afa272f96e52a5c6cda9f6864c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9bae0dbd2f69afa272f96e52a5c6cda9f6864c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03edb4a0245b04716c537ac4f2c0eee4ec5b321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03edb4a0245b04716c537ac4f2c0eee4ec5b321", "html_url": "https://github.com/rust-lang/rust/commit/b03edb4a0245b04716c537ac4f2c0eee4ec5b321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03edb4a0245b04716c537ac4f2c0eee4ec5b321/comments", "author": {"login": "SamWhited", "id": 512573, "node_id": "MDQ6VXNlcjUxMjU3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/512573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamWhited", "html_url": "https://github.com/SamWhited", "followers_url": "https://api.github.com/users/SamWhited/followers", "following_url": "https://api.github.com/users/SamWhited/following{/other_user}", "gists_url": "https://api.github.com/users/SamWhited/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamWhited/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamWhited/subscriptions", "organizations_url": "https://api.github.com/users/SamWhited/orgs", "repos_url": "https://api.github.com/users/SamWhited/repos", "events_url": "https://api.github.com/users/SamWhited/events{/privacy}", "received_events_url": "https://api.github.com/users/SamWhited/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SamWhited", "id": 512573, "node_id": "MDQ6VXNlcjUxMjU3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/512573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamWhited", "html_url": "https://github.com/SamWhited", "followers_url": "https://api.github.com/users/SamWhited/followers", "following_url": "https://api.github.com/users/SamWhited/following{/other_user}", "gists_url": "https://api.github.com/users/SamWhited/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamWhited/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamWhited/subscriptions", "organizations_url": "https://api.github.com/users/SamWhited/orgs", "repos_url": "https://api.github.com/users/SamWhited/repos", "events_url": "https://api.github.com/users/SamWhited/events{/privacy}", "received_events_url": "https://api.github.com/users/SamWhited/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae95e548929f4924905b2e8f87f2dd57d8bc887", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae95e548929f4924905b2e8f87f2dd57d8bc887", "html_url": "https://github.com/rust-lang/rust/commit/7ae95e548929f4924905b2e8f87f2dd57d8bc887"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "2a28d108df77d168332424977fe3328b73d0fdd2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b03edb4a0245b04716c537ac4f2c0eee4ec5b321/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03edb4a0245b04716c537ac4f2c0eee4ec5b321/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b03edb4a0245b04716c537ac4f2c0eee4ec5b321", "patch": "@@ -337,27 +337,20 @@ macro_rules! try {\n \n /// Write formatted data into a buffer\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n+/// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n+/// formatted according to the specified format string and the result will be passed to the writer.\n+/// The writer may be any value with a `write_fmt` method; generally this comes from an\n+/// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n+/// returns whatever the 'write_fmt' method returns; commonly a [`std::fmt::Result`], or an\n+/// [`io::Result`].\n ///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n+/// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n-///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n-///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n+/// [`std::fmt::Write`]: ../std/fmt/trait.Write.html\n+/// [`std::io::Write`]: ../std/io/trait.Write.html\n+/// [`std::fmt::Result`]: ../std/fmt/type.Result.html\n+/// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -396,27 +389,12 @@ macro_rules! write {\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n-///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n-///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer, along with the appended newline.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n+/// For more information, see [`write!`]. For information on the format string syntax, see\n+/// [`std::fmt`].\n ///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n+/// [`write!`]: macro.write.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n ///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}]}