{"sha": "e0cfe10aad151211fdb6fedaad44334400a37d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwY2ZlMTBhYWQxNTEyMTFmZGI2ZmVkYWFkNDQzMzQ0MDBhMzdkMDY=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-08-19T07:07:30Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-08-19T07:08:44Z"}, "message": "Include import name in import shadowing error messages.\n\nThis partially alleviates the confusing behavior in issue #16597", "tree": {"sha": "8c43437730ef93e183826e89ee9ce6449fe7b4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c43437730ef93e183826e89ee9ce6449fe7b4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0cfe10aad151211fdb6fedaad44334400a37d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cfe10aad151211fdb6fedaad44334400a37d06", "html_url": "https://github.com/rust-lang/rust/commit/e0cfe10aad151211fdb6fedaad44334400a37d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0cfe10aad151211fdb6fedaad44334400a37d06/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf810a219b136fff67e75840ad3c5efde9ae1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf810a219b136fff67e75840ad3c5efde9ae1e5", "html_url": "https://github.com/rust-lang/rust/commit/eaf810a219b136fff67e75840ad3c5efde9ae1e5"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "b3389cbef641f9fdac7cc8623a6ea7d52c618fcb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e0cfe10aad151211fdb6fedaad44334400a37d06/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0cfe10aad151211fdb6fedaad44334400a37d06/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e0cfe10aad151211fdb6fedaad44334400a37d06", "patch": "@@ -2820,9 +2820,10 @@ impl<'a> Resolver<'a> {\n                  .contains_key(&name) {\n             match import_resolution.type_target {\n                 Some(ref target) if !target.shadowable => {\n-                    self.session.span_err(import_span,\n-                                          \"import conflicts with imported \\\n-                                           crate in this module\");\n+                    let msg = format!(\"import `{}` conflicts with imported \\\n+                                       crate in this module\",\n+                                      token::get_name(name).get());\n+                    self.session.span_err(import_span, msg.as_slice());\n                 }\n                 Some(_) | None => {}\n             }\n@@ -2843,9 +2844,10 @@ impl<'a> Resolver<'a> {\n                 match *name_bindings.value_def.borrow() {\n                     None => {}\n                     Some(ref value) => {\n-                        self.session.span_err(import_span,\n-                                              \"import conflicts with value \\\n-                                               in this module\");\n+                        let msg = format!(\"import `{}` conflicts with value \\\n+                                           in this module\",\n+                                          token::get_name(name).get());\n+                        self.session.span_err(import_span, msg.as_slice());\n                         match value.value_span {\n                             None => {}\n                             Some(span) => {\n@@ -2865,9 +2867,10 @@ impl<'a> Resolver<'a> {\n                 match *name_bindings.type_def.borrow() {\n                     None => {}\n                     Some(ref ty) => {\n-                        self.session.span_err(import_span,\n-                                              \"import conflicts with type in \\\n-                                               this module\");\n+                        let msg = format!(\"import `{}` conflicts with type in \\\n+                                           this module\",\n+                                          token::get_name(name).get());\n+                        self.session.span_err(import_span, msg.as_slice());\n                         match ty.type_span {\n                             None => {}\n                             Some(span) => {"}]}