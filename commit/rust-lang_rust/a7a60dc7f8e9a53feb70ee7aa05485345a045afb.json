{"sha": "a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTYwZGM3ZjhlOWE1M2ZlYjcwZWU3YWEwNTQ4NTM0NWEwNDVhZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-01T20:48:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-01T20:48:57Z"}, "message": "Auto merge of #51969 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #51511 (Stabilize Iterator::flatten in 1.29, fixes #48213.)\n - #51853 (Fix some doc links)\n - #51890 (Fix inconsequential typo in GlobalAlloc doc example)\n - #51920 (use literal span for concrete type suggestion)\n - #51921 (improve the error message when `#[panic_implementation]` is missing)\n - #51922 (rename the llvm-tools component to llvm-tools-preview and tweak its image)\n - #51961 (Fix typo in /src/librustc_resolve/lib.rs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4544c96d74d2f5aa88c3397bf768360f7667c234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4544c96d74d2f5aa88c3397bf768360f7667c234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "html_url": "https://github.com/rust-lang/rust/commit/a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2be769fd50403a07c45677f8f285491c8e90d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2be769fd50403a07c45677f8f285491c8e90d74", "html_url": "https://github.com/rust-lang/rust/commit/a2be769fd50403a07c45677f8f285491c8e90d74"}, {"sha": "3e95491be7600bfad69f3830cdf35663ee49f2fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e95491be7600bfad69f3830cdf35663ee49f2fd", "html_url": "https://github.com/rust-lang/rust/commit/3e95491be7600bfad69f3830cdf35663ee49f2fd"}], "stats": {"total": 131, "additions": 89, "deletions": 42}, "files": [{"sha": "b5f34cdf336db67a18e38438d6a06e752c2f7d6c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -1787,15 +1787,18 @@ impl Step for LlvmTools {\n         let tmp = tmpdir(builder);\n         let image = tmp.join(\"llvm-tools-image\");\n         drop(fs::remove_dir_all(&image));\n-        t!(fs::create_dir_all(&image.join(\"bin\")));\n \n         // Prepare the image directory\n+        let bindir = builder\n+            .llvm_out(target)\n+            .join(\"bin\");\n+        let dst = image.join(\"lib/rustlib\")\n+            .join(target)\n+            .join(\"bin\");\n+        t!(fs::create_dir_all(&dst));\n         for tool in LLVM_TOOLS {\n-            let exe = builder\n-                .llvm_out(target)\n-                .join(\"bin\")\n-                .join(exe(tool, &target));\n-            builder.install(&exe, &image.join(\"bin\"), 0o755);\n+            let exe = bindir.join(exe(tool, &target));\n+            builder.install(&exe, &dst, 0o755);\n         }\n \n         // Prepare the overlay\n@@ -1818,7 +1821,7 @@ impl Step for LlvmTools {\n             .arg(\"--non-installed-overlay\").arg(&overlay)\n             .arg(format!(\"--package-name={}-{}\", name, target))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--component-name=llvm-tools\");\n+            .arg(\"--component-name=llvm-tools-preview\");\n \n \n         builder.run(&mut cmd);"}, {"sha": "153cd6c0724d6a2adbe7a19845030ba54ecb409c", "filename": "src/libcore/future.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -45,18 +45,18 @@ pub trait Future {\n     ///\n     /// This function returns:\n     ///\n-    /// - `Poll::Pending` if the future is not ready yet\n-    /// - `Poll::Ready(val)` with the result `val` of this future if it finished\n-    /// successfully.\n+    /// - [`Poll::Pending`] if the future is not ready yet\n+    /// - [`Poll::Ready(val)`] with the result `val` of this future if it\n+    ///   finished successfully.\n     ///\n     /// Once a future has finished, clients should not `poll` it again.\n     ///\n     /// When a future is not ready yet, `poll` returns\n-    /// [`Poll::Pending`](::task::Poll). The future will *also* register the\n+    /// `Poll::Pending`. The future will *also* register the\n     /// interest of the current task in the value being produced. For example,\n     /// if the future represents the availability of data on a socket, then the\n     /// task is recorded so that when data arrives, it is woken up (via\n-    /// [`cx.waker()`](::task::Context::waker)). Once a task has been woken up,\n+    /// [`cx.waker()`]). Once a task has been woken up,\n     /// it should attempt to `poll` the future again, which may or may not\n     /// produce a final value.\n     ///\n@@ -90,6 +90,10 @@ pub trait Future {\n     /// then any future calls to `poll` may panic, block forever, or otherwise\n     /// cause bad behavior. The `Future` trait itself provides no guarantees\n     /// about the behavior of `poll` after a future has completed.\n+    ///\n+    /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n+    /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready\n+    /// [`cx.waker()`]: ../task/struct.Context.html#method.waker\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output>;\n }\n "}, {"sha": "8836de3edc874c9a518783cc103a6e02a52ae3de", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -1036,8 +1036,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_flatten)]\n-    ///\n     /// let data = vec![vec![1, 2, 3, 4], vec![5, 6]];\n     /// let flattened = data.into_iter().flatten().collect::<Vec<u8>>();\n     /// assert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n@@ -1046,8 +1044,6 @@ pub trait Iterator {\n     /// Mapping and then flattening:\n     ///\n     /// ```\n-    /// #![feature(iterator_flatten)]\n-    ///\n     /// let words = [\"alpha\", \"beta\", \"gamma\"];\n     ///\n     /// // chars() returns an iterator\n@@ -1074,8 +1070,6 @@ pub trait Iterator {\n     /// Flattening once only removes one level of nesting:\n     ///\n     /// ```\n-    /// #![feature(iterator_flatten)]\n-    ///\n     /// let d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n     ///\n     /// let d2 = d3.iter().flatten().collect::<Vec<_>>();\n@@ -1093,7 +1087,7 @@ pub trait Iterator {\n     ///\n     /// [`flat_map()`]: #method.flat_map\n     #[inline]\n-    #[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+    #[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n     fn flatten(self) -> Flatten<Self>\n     where Self: Sized, Self::Item: IntoIterator {\n         Flatten { inner: flatten_compat(self) }"}, {"sha": "86b297557dddb3961e98fbe33d4549485b59b513", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -2575,13 +2575,13 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n /// [`flatten`]: trait.Iterator.html#method.flatten\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n pub struct Flatten<I: Iterator>\n where I::Item: IntoIterator {\n     inner: FlattenCompat<I, <I::Item as IntoIterator>::IntoIter>,\n }\n \n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n impl<I, U> fmt::Debug for Flatten<I>\n     where I: Iterator + fmt::Debug, U: Iterator + fmt::Debug,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n@@ -2591,15 +2591,15 @@ impl<I, U> fmt::Debug for Flatten<I>\n     }\n }\n \n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n impl<I, U> Clone for Flatten<I>\n     where I: Iterator + Clone, U: Iterator + Clone,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n {\n     fn clone(&self) -> Self { Flatten { inner: self.inner.clone() } }\n }\n \n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n impl<I, U> Iterator for Flatten<I>\n     where I: Iterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n@@ -2627,7 +2627,7 @@ impl<I, U> Iterator for Flatten<I>\n     }\n }\n \n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n impl<I, U> DoubleEndedIterator for Flatten<I>\n     where I: DoubleEndedIterator, U: DoubleEndedIterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n@@ -2650,7 +2650,7 @@ impl<I, U> DoubleEndedIterator for Flatten<I>\n     }\n }\n \n-#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n impl<I, U> FusedIterator for Flatten<I>\n     where I: FusedIterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}"}, {"sha": "bbe6ae8619fec5bd27a154fe61afb5794b0a3664", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -89,7 +89,6 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n-#![feature(iterator_flatten)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "9d4a5213992a19bc81c50d20e75a1ecadc6e1a0b", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -23,7 +23,6 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n-#![feature(iterator_flatten)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "180e75df1a66ec55545fbae6c6f97807c020a132", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -112,9 +112,13 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         if missing.contains(&lang_items::$item) &&\n            !whitelisted(tcx, lang_items::$item) &&\n            items.$name().is_none() {\n-            tcx.sess.err(&format!(\"language item required, but not found: `{}`\",\n-                                  stringify!($name)));\n-\n+            if lang_items::$item == lang_items::PanicImplLangItem {\n+                tcx.sess.err(&format!(\"`#[panic_implementation]` function required, \\\n+                                        but not found\"));\n+            } else {\n+                tcx.sess.err(&format!(\"language item required, but not found: `{}`\",\n+                                        stringify!($name)));\n+            }\n         }\n     )*\n }"}, {"sha": "b8dfd21e54076ce3de0b4ff6ec4f3ddf79731483", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -2794,7 +2794,7 @@ impl<'a> Resolver<'a> {\n     /// A variant of `smart_resolve_path` where you also specify extra\n     /// information about where the path came from; this extra info is\n     /// sometimes needed for the lint that recommends rewriting\n-    /// absoluate paths to `crate`, so that it knows how to frame the\n+    /// absolute paths to `crate`, so that it knows how to frame the\n     /// suggestion. If you are just resolving a path like `foo::bar`\n     /// that appears...somewhere, though, then you just want\n     /// `CrateLint::SimplePath`, which is what `smart_resolve_path`"}, {"sha": "68c71f4ce90e9b2cff39439acbc0748701de33ab", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -245,12 +245,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             \"f32\"\n                         };\n                         match expr.node {\n-                            hir::ExprLit(_) => {  // numeric literal\n-                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span)\n+                            hir::ExprLit(ref lit) => {  // numeric literal\n+                                let snippet = tcx.sess.codemap().span_to_snippet(lit.span)\n                                     .unwrap_or(\"<numeric literal>\".to_string());\n-                                // FIXME: use the literal for missing snippet\n \n-                                err.span_suggestion(expr.span,\n+                                err.span_suggestion(lit.span,\n                                                     &format!(\"you must specify a concrete type for \\\n                                                               this numeric value, like `{}`\",\n                                                              concrete_type),"}, {"sha": "f6cecbea11f8d89fefbf1114a74e4dfaf139d3bd", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -61,7 +61,7 @@\n //! ```rust,ignore (demonstrates crates.io usage)\n //! extern crate jemallocator;\n //!\n-//! use jemallacator::Jemalloc;\n+//! use jemallocator::Jemalloc;\n //!\n //! #[global_allocator]\n //! static GLOBAL: Jemalloc = Jemalloc;"}, {"sha": "1958915602f839b3492c3984acbe06f59ba84629", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -49,6 +49,7 @@ use string;\n ///\n /// [`Result<T, E>`]: ../result/enum.Result.html\n /// [`Display`]: ../fmt/trait.Display.html\n+/// [`Debug`]: ../fmt/trait.Debug.html\n /// [`cause`]: trait.Error.html#method.cause\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {"}, {"sha": "b11081a3e3bbe40773162e9fb4fcca69d2e68519", "filename": "src/test/compile-fail/panic-implementation-missing.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-missing.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: `#[panic_implementation]` function required, but not found\n+\n+#![feature(lang_items)]\n+#![no_main]\n+#![no_std]\n+\n+#[lang = \"eh_personality\"]\n+fn eh() {}"}, {"sha": "42972c40674b68e31e67d93f9fa24c83f59e6ad1", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:weak-lang-items.rs\n-// error-pattern: language item required, but not found: `panic_impl`\n+// error-pattern: `#[panic_implementation]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n // ignore-wasm32-bare compiled with panic=abort, personality not required\n "}, {"sha": "63425274d4c49010078d74f5dde05b96e5fa6fb1", "filename": "src/test/ui/issue-51874.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fui%2Fissue-51874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fui%2Fissue-51874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51874.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = (1.0).pow(1.0); //~ ERROR can't call method `pow` on ambiguous numeric type\n+}"}, {"sha": "8674645357189e064d279f11825d9466ec58102e", "filename": "src/test/ui/issue-51874.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fui%2Fissue-51874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftest%2Fui%2Fissue-51874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51874.stderr?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -0,0 +1,13 @@\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{float}`\n+  --> $DIR/issue-51874.rs:12:19\n+   |\n+LL |     let a = (1.0).pow(1.0); //~ ERROR can't call method `pow` on ambiguous numeric type\n+   |                   ^^^\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+LL |     let a = (1.0_f32).pow(1.0); //~ ERROR can't call method `pow` on ambiguous numeric type\n+   |              ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0689`."}, {"sha": "6add6495a9351b8cd3b456bec976db9e28ab75b3", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a60dc7f8e9a53feb70ee7aa05485345a045afb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=a7a60dc7f8e9a53feb70ee7aa05485345a045afb", "patch": "@@ -298,11 +298,11 @@ impl Builder {\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rustfmt-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n-        self.package(\"llvm-tools\", &mut manifest.pkg, TARGETS);\n+        self.package(\"llvm-tools-preview\", &mut manifest.pkg, TARGETS);\n \n         let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n         let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n-        let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools\");\n+        let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools-preview\");\n \n         if rls_present {\n             manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n@@ -359,7 +359,7 @@ impl Builder {\n             }\n             if llvm_tools_present {\n                 extensions.push(Component {\n-                    pkg: \"llvm-tools\".to_string(),\n+                    pkg: \"llvm-tools-preview\".to_string(),\n                     target: host.to_string(),\n                 });\n             }\n@@ -486,7 +486,7 @@ impl Builder {\n             &self.rls_version\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_version\n-        } else if component == \"llvm-tools\" {\n+        } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             &self.llvm_tools_version\n         } else {\n             &self.rust_version\n@@ -500,7 +500,7 @@ impl Builder {\n             &self.rls_git_commit_hash\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_git_commit_hash\n-        } else if component == \"llvm-tools\" {\n+        } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             &self.llvm_tools_git_commit_hash\n         } else {\n             &self.rust_git_commit_hash"}]}