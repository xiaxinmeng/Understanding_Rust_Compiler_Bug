{"sha": "8831d766ace89bc74714918a7d9fbd3ca5ec946a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzFkNzY2YWNlODliYzc0NzE0OTE4YTdkOWZiZDNjYTVlYzk0NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-17T04:37:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-17T04:37:53Z"}, "message": "Auto merge of #66485 - JohnTitor:rollup-vbwhg6r, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #65739 (Improve documentation of `Vec::split_off(...)`)\n - #66271 (syntax: Keep string literals in ABIs and `asm!` more precisely)\n - #66344 (rustc_plugin: Remove `Registry::register_attribute`)\n - #66381 (find_deprecation: deprecation attr may be ill-formed meta.)\n - #66395 (Centralize panic macro documentation)\n - #66456 (Move `DIAGNOSTICS` usage to `rustc_driver`)\n - #66465 (add missing 'static lifetime in docs)\n - #66466 (miri panic_unwind: fix hack for SEH platforms)\n - #66469 (Use \"field is never read\" instead of \"field is never used\")\n - #66471 (Add test for issue 63116)\n - #66477 (Clarify transmute_copy documentation example)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8bb989254c3f983a3212f28875f2536a8ccae745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb989254c3f983a3212f28875f2536a8ccae745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8831d766ace89bc74714918a7d9fbd3ca5ec946a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8831d766ace89bc74714918a7d9fbd3ca5ec946a", "html_url": "https://github.com/rust-lang/rust/commit/8831d766ace89bc74714918a7d9fbd3ca5ec946a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8831d766ace89bc74714918a7d9fbd3ca5ec946a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdc289cb8b2f64440ee1a2108427049a56ad48f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc289cb8b2f64440ee1a2108427049a56ad48f", "html_url": "https://github.com/rust-lang/rust/commit/2cdc289cb8b2f64440ee1a2108427049a56ad48f"}, {"sha": "f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "html_url": "https://github.com/rust-lang/rust/commit/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b"}], "stats": {"total": 933, "additions": 472, "deletions": 461}, "files": [{"sha": "2ecb38851e7bd111ae7d76d2378ed7397670c82c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -3522,6 +3522,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n@@ -3595,7 +3596,6 @@ dependencies = [\n  \"rustc_codegen_ssa\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n- \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_incremental\",\n  \"rustc_lint\","}, {"sha": "07e4358d644c61fd4cb11a51d2180bef2f06aa91", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1333,10 +1333,9 @@ impl<T> Vec<T> {\n \n     /// Splits the collection into two at the given index.\n     ///\n-    /// Returns a newly allocated `Self`. `self` contains elements `[0, at)`,\n-    /// and the returned `Self` contains elements `[at, len)`.\n-    ///\n-    /// Note that the capacity of `self` does not change.\n+    /// Returns a newly allocated vector containing the elements in the range\n+    /// `[at, len)`. After the call, the original vector will be left containing\n+    /// the elements `[0, at)` with its previous capacity unchanged.\n     ///\n     /// # Panics\n     ///"}, {"sha": "7f27e62fb159836b3984ccdf1b635592d78f7939", "filename": "src/libcore/macros/mod.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,6 +1,4 @@\n-/// Panics the current thread.\n-///\n-/// For details, see `std::macros`.\n+#[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic,\n     // FIXME(anp, eddyb) `core_intrinsics` is used here to allow calling", "previous_filename": "src/libcore/macros.rs"}, {"sha": "3ecfc43be049b534478bb5bdaf58dfac63f31a94", "filename": "src/libcore/macros/panic.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fpanic.md?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,47 @@\n+Panics the current thread.\n+\n+This allows a program to terminate immediately and provide feedback\n+to the caller of the program. `panic!` should be used when a program reaches\n+an unrecoverable state.\n+\n+This macro is the perfect way to assert conditions in example code and in\n+tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n+and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n+to None or Err variants.\n+\n+This macro is used to inject panic into a Rust thread, causing the thread to\n+panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n+and the single-argument form of the `panic!` macro will be the value which\n+is transmitted.\n+\n+[`Result`] enum is often a better solution for recovering from errors than\n+using the `panic!` macro. This macro should be used to avoid proceeding using\n+incorrect values, such as from external sources. Detailed information about\n+error handling is found in the [book].\n+\n+The multi-argument form of this macro panics with a string and has the\n+[`format!`] syntax for building a string.\n+\n+See also the macro [`compile_error!`], for raising errors during compilation.\n+\n+[runwrap]: ../std/result/enum.Result.html#method.unwrap\n+[`Option`]: ../std/option/enum.Option.html#method.unwrap\n+[`Result`]: ../std/result/enum.Result.html\n+[`format!`]: ../std/macro.format.html\n+[`compile_error!`]: ../std/macro.compile_error.html\n+[book]: ../book/ch09-00-error-handling.html\n+\n+# Current implementation\n+\n+If the main thread panics it will terminate all your threads and end your\n+program with code `101`.\n+\n+# Examples\n+\n+```should_panic\n+# #![allow(unreachable_code)]\n+panic!();\n+panic!(\"this is a terrible mistake!\");\n+panic!(4); // panic with the value of 4 to be collected elsewhere\n+panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+```"}, {"sha": "fff010385c302e4cdb29a032cc5a327d5167c228", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -744,20 +744,20 @@ pub fn drop<T>(_x: T) { }\n ///     bar: u8,\n /// }\n ///\n-/// let foo_slice = [10u8];\n+/// let foo_array = [10u8];\n ///\n /// unsafe {\n-///     // Copy the data from 'foo_slice' and treat it as a 'Foo'\n-///     let mut foo_struct: Foo = mem::transmute_copy(&foo_slice);\n+///     // Copy the data from 'foo_array' and treat it as a 'Foo'\n+///     let mut foo_struct: Foo = mem::transmute_copy(&foo_array);\n ///     assert_eq!(foo_struct.bar, 10);\n ///\n ///     // Modify the copied data\n ///     foo_struct.bar = 20;\n ///     assert_eq!(foo_struct.bar, 20);\n /// }\n ///\n-/// // The contents of 'foo_slice' should not have changed\n-/// assert_eq!(foo_slice, [10]);\n+/// // The contents of 'foo_array' should not have changed\n+/// assert_eq!(foo_array, [10]);\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d97a7a8a87d8d20ae244cc0585d9614e6bd6218f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -39,11 +39,6 @@ cfg_if::cfg_if! {\n     if #[cfg(miri)] {\n         #[path = \"miri.rs\"]\n         mod imp;\n-        // On MSVC we need the SEH lang items as well...\n-        // This should match the conditions of the `seh.rs` import below.\n-        #[cfg(all(target_env = \"msvc\", not(target_arch = \"aarch64\")))]\n-        #[allow(unused)]\n-        mod seh;\n     } else if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod imp;"}, {"sha": "f26c42fd4bcbaac9c707b22ff7b50fd961b64e98", "filename": "src/libpanic_unwind/miri.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,3 +1,5 @@\n+#![allow(nonstandard_style)]\n+\n use core::any::Any;\n use alloc::boxed::Box;\n \n@@ -13,11 +15,28 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     Box::from_raw(ptr)\n }\n \n-\n // This is required by the compiler to exist (e.g., it's a lang item),\n // but is never used by Miri. Therefore, we just use a stub here\n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n fn rust_eh_personality() {\n     unsafe { core::intrinsics::abort() }\n }\n+\n+// The rest is required on *some* targets to exist (specifically, MSVC targets that use SEH).\n+// We just add it on all targets. Copied from `seh.rs`.\n+#[repr(C)]\n+pub struct _TypeDescriptor {\n+    pub pVFTable: *const u8,\n+    pub spare: *mut u8,\n+    pub name: [u8; 11],\n+}\n+\n+const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n+\n+#[cfg_attr(not(test), lang = \"eh_catch_typeinfo\")]\n+static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n+    pVFTable: core::ptr::null(),\n+    spare: core::ptr::null_mut(),\n+    name: TYPE_NAME,\n+};"}, {"sha": "a1ad11580dbb7f4c73e1c9f13a272518fc69dbd0", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -42,8 +42,6 @@ pub enum NonMacroAttrKind {\n     DeriveHelper,\n     /// Single-segment custom attribute registered with `#[register_attr]`.\n     Registered,\n-    /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n-    LegacyPluginHelper,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -330,7 +328,6 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n             NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n-            NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n         }\n     }\n \n@@ -345,8 +342,7 @@ impl NonMacroAttrKind {\n     pub fn is_used(self) -> bool {\n         match self {\n             NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper => true,\n-            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered |\n-            NonMacroAttrKind::LegacyPluginHelper => false,\n+            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered  => false,\n         }\n     }\n }"}, {"sha": "12f6f66e96b50cc038d380c4ee5791bf6cf8267d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1219,7 +1219,7 @@ impl<'a> LoweringContext<'a> {\n                                     ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: f.unsafety,\n-                                abi: this.lower_abi(f.abi),\n+                                abi: this.lower_extern(f.ext),\n                                 decl: this.lower_fn_decl(&f.decl, None, false, None),\n                                 param_names: this.lower_fn_params_to_names(&f.decl),\n                             }))"}, {"sha": "f689e7f96222f18242fdaa6f57baf1732da8ed56", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -735,7 +735,7 @@ impl LoweringContext<'_> {\n \n     fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod {\n         hir::ForeignMod {\n-            abi: self.lower_abi(fm.abi),\n+            abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n             items: fm.items\n                 .iter()\n                 .map(|x| self.lower_foreign_item(x))\n@@ -1283,18 +1283,26 @@ impl LoweringContext<'_> {\n             unsafety: h.unsafety,\n             asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: h.constness.node,\n-            abi: self.lower_abi(h.abi),\n+            abi: self.lower_extern(h.ext),\n         }\n     }\n \n-    pub(super) fn lower_abi(&mut self, abi: Abi) -> abi::Abi {\n-        abi::lookup(&abi.symbol.as_str()).unwrap_or_else(|| {\n+    pub(super) fn lower_abi(&mut self, abi: StrLit) -> abi::Abi {\n+        abi::lookup(&abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n             self.error_on_invalid_abi(abi);\n             abi::Abi::Rust\n         })\n     }\n \n-    fn error_on_invalid_abi(&self, abi: Abi) {\n+    pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n+        match ext {\n+            Extern::None => abi::Abi::Rust,\n+            Extern::Implicit => abi::Abi::C,\n+            Extern::Explicit(abi) => self.lower_abi(abi),\n+        }\n+    }\n+\n+    fn error_on_invalid_abi(&self, abi: StrLit) {\n         struct_span_err!(\n             self.sess,\n             abi.span,"}, {"sha": "1af20188ab5db64a338e8d88c64c30157ff78873", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -21,11 +21,10 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::feature_gate::{self, AttributeType};\n+use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::{ParseSess, ProcessCfgMod};\n-use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n@@ -79,7 +78,6 @@ pub struct Session {\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n-    pub plugin_attributes: Lock<Vec<(Symbol, AttributeType)>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1039,12 +1037,11 @@ pub fn build_session_with_source_map(\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n-    let emitter = match diagnostics_output {\n-        DiagnosticOutput::Default => default_emitter(&sopts, registry, &source_map, None),\n-        DiagnosticOutput::Raw(write) => {\n-            default_emitter(&sopts, registry, &source_map, Some(write))\n-        }\n+    let write_dest = match diagnostics_output {\n+        DiagnosticOutput::Default => None,\n+        DiagnosticOutput::Raw(write) => Some(write),\n     };\n+    let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n \n     let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n         emitter,\n@@ -1166,7 +1163,6 @@ fn build_session_(\n         working_dir,\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n-        plugin_attributes: Lock::new(Vec::new()),\n         crate_types: Once::new(),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "ff673e52b60c2e786a32306dbb0e50bd4d8dd1af", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -26,6 +26,7 @@ rustc_plugin = { path = \"../librustc_plugin/deprecated\" } # To get this in the s\n rustc_plugin_impl = { path = \"../librustc_plugin\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_resolve = { path = \"../librustc_resolve\" }"}, {"sha": "ef638464adce9b8074292899ab2308bdf2462983", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -40,7 +40,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use errors::PResult;\n+use errors::{PResult, registry::Registry};\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n@@ -140,6 +140,10 @@ impl Callbacks for TimePassesCallbacks {\n     }\n }\n \n+pub fn diagnostics_registry() -> Registry {\n+    Registry::new(&rustc_error_codes::DIAGNOSTICS)\n+}\n+\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n@@ -182,13 +186,14 @@ pub fn run_compiler(\n             lint_caps: Default::default(),\n             register_lints: None,\n             override_queries: None,\n+            registry: diagnostics_registry(),\n         };\n         callbacks.config(&mut config);\n         config\n     };\n \n     if let Some(ref code) = matches.opt_str(\"explain\") {\n-        handle_explain(code, sopts.error_format);\n+        handle_explain(diagnostics_registry(), code, sopts.error_format);\n         return Ok(());\n     }\n \n@@ -261,6 +266,7 @@ pub fn run_compiler(\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: diagnostics_registry(),\n     };\n \n     callbacks.config(&mut config);\n@@ -510,15 +516,13 @@ fn stdout_isatty() -> bool {\n     }\n }\n \n-fn handle_explain(code: &str,\n-                  output: ErrorOutputType) {\n-    let descriptions = rustc_interface::util::diagnostics_registry();\n+fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised = if code.starts_with(\"E\") {\n         code.to_string()\n     } else {\n         format!(\"E{0:0>4}\", code)\n     };\n-    match descriptions.find_description(&normalised) {\n+    match registry.find_description(&normalised) {\n         Some(ref description) => {\n             let mut is_in_code_block = false;\n             let mut text = String::new();"}, {"sha": "428cecf13a3b01beedea67c5eb77f0f4a70d41dc", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -7,8 +7,7 @@\n // Error messages' format must follow the RFC 1567 available here:\n // https://github.com/rust-lang/rfcs/pull/1567\n \n-crate::register_diagnostics! {\n-\n+register_diagnostics! {\n E0001: include_str!(\"./error_codes/E0001.md\"),\n E0002: include_str!(\"./error_codes/E0002.md\"),\n E0004: include_str!(\"./error_codes/E0004.md\"),"}, {"sha": "14210fd69ad51b81a7432cdd64118723fb4f9665", "filename": "src/librustc_error_codes/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_error_codes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_error_codes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Flib.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,19 +1,14 @@\n-//! This library is used to gather all error codes into one place. The goal\n-//! being to make their maintenance easier.\n+//! This library is used to gather all error codes into one place,\n+//! the goal being to make their maintenance easier.\n \n-#[macro_export]\n macro_rules! register_diagnostics {\n-    ($($ecode:ident: $message:expr,)*) => (\n-        $crate::register_diagnostics!{$($ecode:$message,)* ;}\n-    );\n-\n     ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n         pub static DIAGNOSTICS: &[(&str, &str)] = &[\n             $( (stringify!($ecode), $message), )*\n         ];\n \n         $(\n-            pub const $ecode: &str = $message;\n+            pub const $ecode: () = ();\n         )*\n         $(\n             pub const $code: () = ();"}, {"sha": "de59882bbdf957f851818b73de4ea98d2c97962c", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -34,7 +34,6 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_plugin = { path = \"../librustc_plugin\", package = \"rustc_plugin_impl\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n-rustc_error_codes = { path = \"../librustc_error_codes\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n "}, {"sha": "c153de7103ac2cba88a02ba60d1e81c7903ac76d", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -11,6 +11,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use rustc_errors::registry::Registry;\n use rustc_parse::new_parser_from_source_str;\n use rustc::ty;\n use std::path::PathBuf;\n@@ -141,19 +142,24 @@ pub struct Config {\n     /// The second parameter is local providers and the third parameter is external providers.\n     pub override_queries:\n         Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+\n+    /// Registry of diagnostics codes.\n+    pub registry: Registry,\n }\n \n-pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n-where\n-    F: FnOnce(&Compiler) -> R,\n-{\n+pub fn run_compiler_in_existing_thread_pool<R>(\n+    config: Config,\n+    f: impl FnOnce(&Compiler) -> R,\n+) -> R {\n+    let registry = &config.registry;\n     let (sess, codegen_backend, source_map) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n         config.diagnostic_output,\n         config.file_loader,\n         config.input_path.clone(),\n         config.lint_caps,\n+        registry.clone(),\n     );\n \n     let compiler = Compiler {\n@@ -171,17 +177,13 @@ where\n     };\n \n     let _sess_abort_error = OnDrop(|| {\n-        compiler.sess.diagnostic().print_error_count(&util::diagnostics_registry());\n+        compiler.sess.diagnostic().print_error_count(registry);\n     });\n \n     f(&compiler)\n }\n \n-pub fn run_compiler<F, R>(mut config: Config, f: F) -> R\n-where\n-    F: FnOnce(&Compiler) -> R + Send,\n-    R: Send,\n-{\n+pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     let stderr = config.stderr.take();\n     util::spawn_thread_pool(\n         config.opts.edition,\n@@ -191,11 +193,7 @@ where\n     )\n }\n \n-pub fn default_thread_pool<F, R>(edition: edition::Edition, f: F) -> R\n-where\n-    F: FnOnce() -> R + Send,\n-    R: Send,\n-{\n+pub fn default_thread_pool<R: Send>(edition: edition::Edition, f: impl FnOnce() -> R + Send) -> R {\n     // the 1 here is duplicating code in config.opts.debugging_opts.threads\n     // which also defaults to 1; it ultimately doesn't matter as the default\n     // isn't threaded, and just ignores this parameter"}, {"sha": "86d58bfe8bdac2c7ddadb40bc83187911bb97e00", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -240,15 +240,8 @@ pub fn register_plugins<'a>(\n         }\n     });\n \n-    let Registry {\n-        syntax_exts,\n-        llvm_passes,\n-        attributes,\n-        ..\n-    } = registry;\n-\n+    let Registry { syntax_exts, llvm_passes, .. } = registry;\n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-    *sess.plugin_attributes.borrow_mut() = attributes;\n \n     Ok((krate, PluginInfo { syntax_exts }, Lrc::new(lint_store)))\n }"}, {"sha": "2b4320c04e6e5d3cab8405c76385257bd88319d4", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -15,7 +15,6 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n-use rustc_error_codes;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::io::{self, Write};\n@@ -37,15 +36,6 @@ use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n \n-pub fn diagnostics_registry() -> Registry {\n-    let mut all_errors = Vec::new();\n-    all_errors.extend_from_slice(&rustc_error_codes::DIAGNOSTICS);\n-    // FIXME: need to figure out a way to get these back in here\n-    // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n-\n-    Registry::new(&all_errors)\n-}\n-\n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n ///\n@@ -77,9 +67,8 @@ pub fn create_session(\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>, Lrc<SourceMap>) {\n-    let descriptions = diagnostics_registry();\n-\n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let source_map = Lrc::new(SourceMap::with_file_loader(\n         loader,"}, {"sha": "9f293bdaa105e592c69d3e4be57ce8a721534de8", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -309,29 +309,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             }\n         }\n \n-        let plugin_attributes = cx.sess().plugin_attributes.borrow();\n-        for &(name, ty) in plugin_attributes.iter() {\n-            if ty == AttributeType::Whitelisted && attr.check_name(name) {\n-                debug!(\"{:?} (plugin attr) is whitelisted with ty {:?}\", name, ty);\n-                break;\n-            }\n-        }\n-\n-        let name = attr.name_or_empty();\n         if !attr::is_used(attr) {\n             debug!(\"emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n-            let known_crate = attr_info.map(|&&(_, ty, ..)| {\n-                    ty == AttributeType::CrateLevel\n-            }).unwrap_or(false);\n-\n-            // Has a plugin registered this attribute as one that must be used at\n-            // the crate level?\n-            let plugin_crate = plugin_attributes.iter()\n-                .find(|&&(x, t)| name == x && AttributeType::CrateLevel == t)\n-                .is_some();\n-            if known_crate || plugin_crate {\n+            if attr_info.map_or(false, |(_, ty, ..)| ty == &AttributeType::CrateLevel) {\n                 let msg = match attr.style {\n                     ast::AttrStyle::Outer => {\n                         \"crate-level attribute should be an inner attribute: add an exclamation \\"}, {"sha": "a56a7bf1802c77b8b70f5b1d30324b9b7f335e06", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -778,13 +778,12 @@ impl<'a> Parser<'a> {\n \n         macro_rules! parse_lit {\n             () => {\n-                match self.parse_lit() {\n-                    Ok(literal) => {\n+                match self.parse_opt_lit() {\n+                    Some(literal) => {\n                         hi = self.prev_span;\n                         ex = ExprKind::Lit(literal);\n                     }\n-                    Err(mut err) => {\n-                        err.cancel();\n+                    None => {\n                         return Err(self.expected_expression_found());\n                     }\n                 }\n@@ -1074,11 +1073,39 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    /// Matches `lit = true | false | token_lit`.\n+    /// Returns a string literal if the next token is a string literal.\n+    /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n+    /// and returns `None` if the next token is not literal at all.\n+    pub fn parse_str_lit(&mut self) -> Result<ast::StrLit, Option<Lit>> {\n+        match self.parse_opt_lit() {\n+            Some(lit) => match lit.kind {\n+                ast::LitKind::Str(symbol_unescaped, style) => Ok(ast::StrLit {\n+                    style,\n+                    symbol: lit.token.symbol,\n+                    suffix: lit.token.suffix,\n+                    span: lit.span,\n+                    symbol_unescaped,\n+                }),\n+                _ => Err(Some(lit)),\n+            }\n+            None => Err(None),\n+        }\n+    }\n+\n     pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {\n+        self.parse_opt_lit().ok_or_else(|| {\n+            let msg = format!(\"unexpected token: {}\", self.this_token_descr());\n+            self.span_fatal(self.token.span, &msg)\n+        })\n+    }\n+\n+    /// Matches `lit = true | false | token_lit`.\n+    /// Returns `None` if the next token is not a literal.\n+    pub(super) fn parse_opt_lit(&mut self) -> Option<Lit> {\n         let mut recovered = None;\n         if self.token == token::Dot {\n-            // Attempt to recover `.4` as `0.4`.\n+            // Attempt to recover `.4` as `0.4`. We don't currently have any syntax where\n+            // dot would follow an optional literal, so we do this unconditionally.\n             recovered = self.look_ahead(1, |next_token| {\n                 if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix })\n                         = next_token.kind {\n@@ -1107,11 +1134,10 @@ impl<'a> Parser<'a> {\n         match Lit::from_token(token) {\n             Ok(lit) => {\n                 self.bump();\n-                Ok(lit)\n+                Some(lit)\n             }\n             Err(LitError::NotLiteral) => {\n-                let msg = format!(\"unexpected token: {}\", self.this_token_descr());\n-                Err(self.span_fatal(token.span, &msg))\n+                None\n             }\n             Err(err) => {\n                 let span = token.span;\n@@ -1120,18 +1146,18 @@ impl<'a> Parser<'a> {\n                     _ => unreachable!(),\n                 };\n                 self.bump();\n-                self.error_literal_from_token(err, lit, span);\n+                self.report_lit_error(err, lit, span);\n                 // Pack possible quotes and prefixes from the original literal into\n                 // the error literal's symbol so they can be pretty-printed faithfully.\n                 let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);\n                 let symbol = Symbol::intern(&suffixless_lit.to_string());\n                 let lit = token::Lit::new(token::Err, symbol, lit.suffix);\n-                Lit::from_lit_token(lit, span).map_err(|_| unreachable!())\n+                Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))\n             }\n         }\n     }\n \n-    fn error_literal_from_token(&self, err: LitError, lit: token::Lit, span: Span) {\n+    fn report_lit_error(&self, err: LitError, lit: token::Lit, span: Span) {\n         // Checks if `s` looks like i32 or u1234 etc.\n         fn looks_like_width_suffix(first_chars: &[char], s: &str) -> bool {\n             s.len() > 1"}, {"sha": "20b96d5cd62f6a6060fd7303526afe1d8ff1c31b", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -3,9 +3,9 @@ use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n \n-use syntax::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n+use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n-use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n+use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n@@ -105,7 +105,7 @@ impl<'a> Parser<'a> {\n                 return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n \n-            let abi = self.parse_opt_abi()?;\n+            let abi = self.parse_abi();\n \n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n@@ -114,7 +114,7 @@ impl<'a> Parser<'a> {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi,\n+                    ext: Extern::from_abi(abi),\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n@@ -143,14 +143,14 @@ impl<'a> Parser<'a> {\n                 if self.check_keyword(kw::Extern) {\n                     self.sess.gated_spans.gate(sym::const_extern_fn, lo.to(self.token.span));\n                 }\n-                let abi = self.parse_extern_abi()?;\n+                let ext = self.parse_extern()?;\n                 self.bump(); // `fn`\n \n                 let header = FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n                     constness: respan(const_span, Constness::Const),\n-                    abi,\n+                    ext,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -193,7 +193,7 @@ impl<'a> Parser<'a> {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: Abi::new(sym::Rust, fn_span),\n+                    ext: Extern::None,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -230,7 +230,7 @@ impl<'a> Parser<'a> {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi: Abi::new(sym::Rust, fn_span),\n+                ext: Extern::None,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -242,14 +242,14 @@ impl<'a> Parser<'a> {\n             self.bump(); // `unsafe`\n             // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n             self.check(&token::OpenDelim(token::Brace));\n-            let abi = self.parse_extern_abi()?;\n+            let ext = self.parse_extern()?;\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n             let header = FnHeader {\n                 unsafety: Unsafety::Unsafe,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi,\n+                ext,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -1100,7 +1100,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         lo: Span,\n-        abi: Abi,\n+        abi: Option<StrLit>,\n         visibility: Visibility,\n         mut attrs: Vec<Attribute>,\n         extern_sp: Span,\n@@ -1775,9 +1775,16 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n+        let is_c_abi = match header.ext {\n+            ast::Extern::None => false,\n+            ast::Extern::Implicit => true,\n+            ast::Extern::Explicit(abi) => abi.symbol_unescaped == sym::C,\n+        };\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: header.abi.symbol == sym::C && header.unsafety == Unsafety::Unsafe,\n+            // FIXME: Parsing should not depend on ABI or unsafety and\n+            // the variadic parameter should always be parsed.\n+            allow_c_variadic: is_c_abi && header.unsafety == Unsafety::Unsafe,\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1905,19 +1912,19 @@ impl<'a> Parser<'a> {\n         }\n         let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n-        let (constness, unsafety, abi) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Abi::default())\n+        let (constness, unsafety, ext) = if is_const_fn {\n+            (respan(const_span, Constness::Const), unsafety, Extern::None)\n         } else {\n-            let abi = self.parse_extern_abi()?;\n-            (respan(self.prev_span, Constness::NotConst), unsafety, abi)\n+            let ext = self.parse_extern()?;\n+            (respan(self.prev_span, Constness::NotConst), unsafety, ext)\n         };\n         if !self.eat_keyword(kw::Fn) {\n             // It is possible for `expect_one_of` to recover given the contents of\n             // `self.expected_tokens`, therefore, do not use `self.unexpected()` which doesn't\n             // account for this.\n             if !self.expect_one_of(&[], &[])? { unreachable!() }\n         }\n-        Ok(FnHeader { constness, unsafety, asyncness, abi })\n+        Ok(FnHeader { constness, unsafety, asyncness, ext })\n     }\n \n     /// Parse the \"signature\", including the identifier, parameters, and generics of a function."}, {"sha": "d5ec46114980659ad45b76ce1ae95ec76b08b710", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 15, "deletions": 49, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -15,8 +15,8 @@ use crate::{Directory, DirectoryOwnership};\n use crate::lexer::UnmatchedBrace;\n \n use syntax::ast::{\n-    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n-    IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n+    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit,\n+    IsAsync, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety,\n };\n \n use syntax::print::pprust;\n@@ -1212,40 +1212,34 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `extern string_literal?`.\n-    /// If `extern` is not found, the Rust ABI is used.\n-    /// If `extern` is found and a `string_literal` does not follow, the C ABI is used.\n-    fn parse_extern_abi(&mut self) -> PResult<'a, Abi> {\n+    fn parse_extern(&mut self) -> PResult<'a, Extern> {\n         Ok(if self.eat_keyword(kw::Extern) {\n-            self.parse_opt_abi()?\n+            Extern::from_abi(self.parse_abi())\n         } else {\n-            Abi::default()\n+            Extern::None\n         })\n     }\n \n     /// Parses a string literal as an ABI spec.\n-    /// If one is not found, the \"C\" ABI is used.\n-    fn parse_opt_abi(&mut self) -> PResult<'a, Abi> {\n-        let span = if self.token.can_begin_literal_or_bool() {\n-            let ast::Lit { span, kind, .. } = self.parse_lit()?;\n-            match kind {\n-                ast::LitKind::Str(symbol, _) => return Ok(Abi::new(symbol, span)),\n-                ast::LitKind::Err(_) => {}\n+    fn parse_abi(&mut self) -> Option<StrLit> {\n+        match self.parse_str_lit() {\n+            Ok(str_lit) => Some(str_lit),\n+            Err(Some(lit)) => match lit.kind {\n+                ast::LitKind::Err(_) => None,\n                 _ => {\n-                    self.struct_span_err(span, \"non-string ABI literal\")\n+                    self.struct_span_err(lit.span, \"non-string ABI literal\")\n                         .span_suggestion(\n-                            span,\n+                            lit.span,\n                             \"specify the ABI with a string literal\",\n                             \"\\\"C\\\"\".to_string(),\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n+                    None\n                 }\n             }\n-            span\n-        } else {\n-            self.prev_span\n-        };\n-        Ok(Abi::new(sym::C, span))\n+            Err(None) => None,\n+        }\n     }\n \n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n@@ -1337,34 +1331,6 @@ impl<'a> Parser<'a> {\n             self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace) ||\n                                    *t == token::BinOp(token::Star))\n     }\n-\n-    fn parse_optional_str(&mut self) -> Option<(Symbol, ast::StrStyle, Option<ast::Name>)> {\n-        let ret = match self.token.kind {\n-            token::Literal(token::Lit { kind: token::Str, symbol, suffix }) =>\n-                (symbol, ast::StrStyle::Cooked, suffix),\n-            token::Literal(token::Lit { kind: token::StrRaw(n), symbol, suffix }) =>\n-                (symbol, ast::StrStyle::Raw(n), suffix),\n-            _ => return None\n-        };\n-        self.bump();\n-        Some(ret)\n-    }\n-\n-    pub fn parse_str(&mut self) -> PResult<'a, (Symbol, StrStyle)> {\n-        match self.parse_optional_str() {\n-            Some((s, style, suf)) => {\n-                let sp = self.prev_span;\n-                self.expect_no_suffix(sp, \"a string literal\", suf);\n-                Ok((s, style))\n-            }\n-            _ => {\n-                let msg = \"expected string literal\";\n-                let mut err = self.fatal(msg);\n-                err.span_label(self.token.span, msg);\n-                Err(err)\n-            }\n-        }\n-    }\n }\n \n crate fn make_unclosed_delims_error("}, {"sha": "8e6bc29be521803e02472068d1eb97148690df80", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n         */\n \n         let unsafety = self.parse_unsafety();\n-        let abi = self.parse_extern_abi()?;\n+        let ext = self.parse_extern()?;\n         self.expect_keyword(kw::Fn)?;\n         let cfg = ParamCfg {\n             is_self_allowed: false,\n@@ -296,7 +296,7 @@ impl<'a> Parser<'a> {\n         };\n         let decl = self.parse_fn_decl(cfg, false)?;\n         Ok(TyKind::BareFn(P(BareFnTy {\n-            abi,\n+            ext,\n             unsafety,\n             generic_params,\n             decl,"}, {"sha": "db661e7f4d2a5f768e2b4009d94f0293a4fa6f65", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -631,7 +631,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n         if self.should_warn_about_field(&field) {\n-            self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"field\", \"used\");\n+            self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"field\", \"read\");\n         }\n         intravisit::walk_struct_field(self, field);\n     }"}, {"sha": "aa5ea80f0b0e4caf0e69da050283ccc9bae53ecb", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -7,7 +7,6 @@ use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExten\n use syntax_expand::base::MacroExpanderFn;\n use syntax::symbol::Symbol;\n use syntax::ast;\n-use syntax::feature_gate::AttributeType;\n use syntax_pos::Span;\n \n use std::borrow::ToOwned;\n@@ -39,9 +38,6 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n-\n-    #[doc(hidden)]\n-    pub attributes: Vec<(Symbol, AttributeType)>,\n }\n \n impl<'a> Registry<'a> {\n@@ -54,7 +50,6 @@ impl<'a> Registry<'a> {\n             krate_span,\n             syntax_exts: vec![],\n             llvm_passes: vec![],\n-            attributes: vec![],\n         }\n     }\n \n@@ -98,12 +93,4 @@ impl<'a> Registry<'a> {\n     pub fn register_llvm_pass(&mut self, name: &str) {\n         self.llvm_passes.push(name.to_owned());\n     }\n-\n-    /// Register an attribute with an attribute type.\n-    ///\n-    /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n-    /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n-    pub fn register_attribute(&mut self, name: Symbol, ty: AttributeType) {\n-        self.attributes.push((name, ty));\n-    }\n }"}, {"sha": "e134b8b92ac2e34aefec7af73cccf79a845f3eda", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -437,15 +437,6 @@ impl<'a> Resolver<'a> {\n                         }));\n                     }\n                 }\n-                Scope::LegacyPluginHelpers => {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n-                    if filter_fn(res) {\n-                        let plugin_attributes = this.session.plugin_attributes.borrow();\n-                        suggestions.extend(plugin_attributes.iter().map(|(name, _)| {\n-                            TypoSuggestion::from_res(*name, res)\n-                        }));\n-                    }\n-                }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));"}, {"sha": "8f6bb91f028c3d1d70b8c13bf10eb42e576a8f8a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -105,7 +105,6 @@ enum Scope<'a> {\n     RegisteredAttrs,\n     MacroUsePrelude,\n     BuiltinAttrs,\n-    LegacyPluginHelpers,\n     ExternPrelude,\n     ToolPrelude,\n     StdLibPrelude,\n@@ -1466,9 +1465,6 @@ impl<'a> Resolver<'a> {\n         // 4b. \"Standard library prelude\" part implemented through `macro-use` (closed, controlled).\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n-        // 4-6. Legacy plugin helpers (open, not controlled). Similar to derive helpers,\n-        //    but introduced by legacy plugins using `register_attribute`. Priority is somewhere\n-        //    in prelude, not sure where exactly (creates ambiguities with any other prelude names).\n \n         let rust_2015 = ident.span.rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n@@ -1498,7 +1494,6 @@ impl<'a> Resolver<'a> {\n                 Scope::RegisteredAttrs => use_prelude,\n                 Scope::MacroUsePrelude => use_prelude || rust_2015,\n                 Scope::BuiltinAttrs => true,\n-                Scope::LegacyPluginHelpers => use_prelude || rust_2015,\n                 Scope::ExternPrelude => use_prelude || is_absolute_path,\n                 Scope::ToolPrelude => use_prelude,\n                 Scope::StdLibPrelude => use_prelude || ns == MacroNS,\n@@ -1558,8 +1553,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::RegisteredAttrs => Scope::MacroUsePrelude,\n                 Scope::MacroUsePrelude => Scope::StdLibPrelude,\n-                Scope::BuiltinAttrs => Scope::LegacyPluginHelpers,\n-                Scope::LegacyPluginHelpers => break, // nowhere else to search\n+                Scope::BuiltinAttrs => break, // nowhere else to search\n                 Scope::ExternPrelude if is_absolute_path => break,\n                 Scope::ExternPrelude => Scope::ToolPrelude,\n                 Scope::ToolPrelude => Scope::StdLibPrelude,"}, {"sha": "4f687b5ba92006a9ab379b2cf61ef65824c00dac", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -613,13 +613,6 @@ impl<'a> Resolver<'a> {\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n-                Scope::LegacyPluginHelpers => if this.session.plugin_attributes.borrow().iter()\n-                                                     .any(|(name, _)| ident.name == *name) {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n-                    ok(res, DUMMY_SP, this.arenas)\n-                } else {\n-                    Err(Determinacy::Determined)\n-                }\n                 Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {\n                     Some(binding) => Ok((binding, Flags::empty())),\n                     None => Err(Determinacy::determined("}, {"sha": "255938a193c9763fafc7a7b5d3997c0dba507d14", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -30,9 +30,8 @@ use crate::{id_from_def_id, id_from_node_id, SaveContext};\n use rls_data::{SigElement, Signature};\n \n use rustc::hir::def::{Res, DefKind};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast::{self, Extern, NodeId};\n use syntax::print::pprust;\n-use syntax_pos::sym;\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -157,9 +156,11 @@ fn text_sig(text: String) -> Signature {\n     }\n }\n \n-fn push_abi(text: &mut String, abi: ast::Abi) {\n-    if abi.symbol != sym::Rust {\n-        text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol));\n+fn push_extern(text: &mut String, ext: Extern) {\n+    match ext {\n+        Extern::None => {}\n+        Extern::Implicit => text.push_str(\"extern \"),\n+        Extern::Explicit(abi) => text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol)),\n     }\n }\n \n@@ -237,7 +238,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                push_abi(&mut text, f.abi);\n+                push_extern(&mut text, f.ext);\n                 text.push_str(\"fn(\");\n \n                 let mut defs = vec![];\n@@ -387,7 +388,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                push_abi(&mut text, header.abi);\n+                push_extern(&mut text, header.ext);\n                 text.push_str(\"fn \");\n \n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n@@ -936,7 +937,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    push_abi(&mut text, m.header.abi);\n+    push_extern(&mut text, m.header.ext);\n     text.push_str(\"fn \");\n \n     let mut sig = name_and_generics(text, 0, generics, id, ident, scx)?;"}, {"sha": "2b4ac7676fade845c6a97202c1ceddb6b173b006", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -21,7 +21,6 @@ use syntax::feature_gate::UnstableFeatures;\n use errors::json::JsonEmitter;\n use syntax::symbol::sym;\n use syntax_pos::DUMMY_SP;\n-use errors;\n use errors::emitter::{Emitter, EmitterWriter};\n \n use std::cell::RefCell;\n@@ -341,6 +340,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_caps,\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "8bfaf98f0867e053dc6b28e8cc479977933e4f6a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -23,8 +23,9 @@ extern crate getopts;\n extern crate env_logger;\n extern crate rustc;\n extern crate rustc_data_structures;\n-extern crate rustc_index;\n extern crate rustc_driver;\n+extern crate rustc_error_codes;\n+extern crate rustc_index;\n extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_interface;"}, {"sha": "98e18d666f1500c3906c408af38b6f453353c4b6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -80,6 +80,7 @@ pub fn run(options: Options) -> i32 {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "b0baf36308e44c26facb31c879300453cdecfe72", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -126,7 +126,7 @@ mod break_keyword { }\n /// look like this:\n ///\n /// ```rust\n-/// const WORDS: &str = \"hello rust!\";\n+/// const WORDS: &'static str = \"hello rust!\";\n /// ```\n ///\n /// Thanks to static lifetime elision, you usually don't have to explicitly use 'static:"}, {"sha": "2df79ee97fbacec9c271972fb6eaf15ac76c291a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -4,53 +4,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-/// Panics the current thread.\n-///\n-/// This allows a program to terminate immediately and provide feedback\n-/// to the caller of the program. `panic!` should be used when a program reaches\n-/// an unrecoverable state.\n-///\n-/// This macro is the perfect way to assert conditions in example code and in\n-/// tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n-/// and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n-/// to None or Err variants.\n-///\n-/// This macro is used to inject panic into a Rust thread, causing the thread to\n-/// panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n-/// and the single-argument form of the `panic!` macro will be the value which\n-/// is transmitted.\n-///\n-/// [`Result`] enum is often a better solution for recovering from errors than\n-/// using the `panic!` macro. This macro should be used to avoid proceeding using\n-/// incorrect values, such as from external sources. Detailed information about\n-/// error handling is found in the [book].\n-///\n-/// The multi-argument form of this macro panics with a string and has the\n-/// [`format!`] syntax for building a string.\n-///\n-/// See also the macro [`compile_error!`], for raising errors during compilation.\n-///\n-/// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n-/// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n-/// [`Result`]: ../std/result/enum.Result.html\n-/// [`format!`]: ../std/macro.format.html\n-/// [`compile_error!`]: ../std/macro.compile_error.html\n-/// [book]: ../book/ch09-00-error-handling.html\n-///\n-/// # Current implementation\n-///\n-/// If the main thread panics it will terminate all your threads and end your\n-/// program with code `101`.\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// # #![allow(unreachable_code)]\n-/// panic!();\n-/// panic!(\"this is a terrible mistake!\");\n-/// panic!(4); // panic with the value of 4 to be collected elsewhere\n-/// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n-/// ```\n+#[doc(include = \"../libcore/macros/panic.md\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(libstd_sys_internals)]"}, {"sha": "bbf00825acb3376874e809690c022a4edb79e796", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1422,6 +1422,33 @@ pub struct Lit {\n     pub span: Span,\n }\n \n+/// Same as `Lit`, but restricted to string literals.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub struct StrLit {\n+    /// The original literal token as written in source code.\n+    pub style: StrStyle,\n+    pub symbol: Symbol,\n+    pub suffix: Option<Symbol>,\n+    pub span: Span,\n+    /// The unescaped \"semantic\" representation of the literal lowered from the original token.\n+    /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n+    pub symbol_unescaped: Symbol,\n+}\n+\n+impl StrLit {\n+    crate fn as_lit(&self) -> Lit {\n+        let token_kind = match self.style {\n+            StrStyle::Cooked => token::Str,\n+            StrStyle::Raw(n) => token::StrRaw(n),\n+        };\n+        Lit {\n+            token: token::Lit::new(token_kind, self.symbol, self.suffix),\n+            span: self.span,\n+            kind: LitKind::Str(self.symbol_unescaped, self.style),\n+        }\n+    }\n+}\n+\n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n@@ -1745,7 +1772,7 @@ pub struct Ty {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n-    pub abi: Abi,\n+    pub ext: Extern,\n     pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>,\n }\n@@ -2128,7 +2155,7 @@ pub struct Mod {\n /// E.g., `extern { .. }` or `extern C { .. }`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n-    pub abi: Abi,\n+    pub abi: Option<StrLit>,\n     pub items: Vec<ForeignItem>,\n }\n \n@@ -2411,24 +2438,17 @@ impl Item {\n     }\n }\n \n-/// A reference to an ABI.\n-///\n-/// In AST our notion of an ABI is still syntactic unlike in `rustc_target::spec::abi::Abi`.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, PartialEq)]\n-pub struct Abi {\n-    pub symbol: Symbol,\n-    pub span: Span,\n-}\n-\n-impl Abi {\n-    pub fn new(symbol: Symbol, span: Span) -> Self {\n-        Self { symbol, span }\n-    }\n+/// `extern` qualifier on a function item or function type.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub enum Extern {\n+    None,\n+    Implicit,\n+    Explicit(StrLit),\n }\n \n-impl Default for Abi {\n-    fn default() -> Self {\n-        Self::new(sym::Rust, DUMMY_SP)\n+impl Extern {\n+    pub fn from_abi(abi: Option<StrLit>) -> Extern {\n+        abi.map_or(Extern::Implicit, Extern::Explicit)\n     }\n }\n \n@@ -2441,7 +2461,7 @@ pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub asyncness: Spanned<IsAsync>,\n     pub constness: Spanned<Constness>,\n-    pub abi: Abi,\n+    pub ext: Extern,\n }\n \n impl Default for FnHeader {\n@@ -2450,7 +2470,7 @@ impl Default for FnHeader {\n             unsafety: Unsafety::Normal,\n             asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n-            abi: Abi::default(),\n+            ext: Extern::None,\n         }\n     }\n }"}, {"sha": "767fcabc017eddb5c3a6beb2225c8e3d7f075c1d", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -667,7 +667,10 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n             break\n         }\n \n-        let meta = attr.meta().unwrap();\n+        let meta = match attr.meta() {\n+            Some(meta) => meta,\n+            None => continue,\n+        };\n         depr = match &meta.kind {\n             MetaItemKind::Word => Some(Deprecation { since: None, note: None }),\n             MetaItemKind::NameValue(..) => {"}, {"sha": "abf9adefd3c44328d1c0bc2e957fde7478089a90", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -191,10 +191,10 @@ macro_rules! gate_feature_post {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: ast::Abi) {\n-        let ast::Abi { symbol, span } = abi;\n+    fn check_abi(&self, abi: ast::StrLit) {\n+        let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n-        match &*symbol.as_str() {\n+        match &*symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" |\n             \"C\" |\n@@ -258,6 +258,12 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn check_extern(&self, ext: ast::Extern) {\n+        if let ast::Extern::Explicit(abi) = ext {\n+            self.check_abi(abi);\n+        }\n+    }\n+\n     fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n         let has_fields = variants.iter().any(|variant| match variant.data {\n             VariantData::Tuple(..) | VariantData::Struct(..) => true,\n@@ -388,7 +394,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n-                self.check_abi(foreign_module.abi);\n+                if let Some(abi) = foreign_module.abi {\n+                    self.check_abi(abi);\n+                }\n             }\n \n             ast::ItemKind::Fn(..) => {\n@@ -511,7 +519,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_abi(bare_fn_ty.abi);\n+                self.check_extern(bare_fn_ty.ext);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span,\n@@ -605,7 +613,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n-            self.check_abi(header.abi);\n+            self.check_extern(header.ext);\n         }\n \n         if fn_decl.c_variadic() {\n@@ -639,7 +647,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n-                    self.check_abi(sig.header.abi);\n+                    self.check_extern(sig.header.ext);\n                 }\n                 if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,"}, {"sha": "da3c885b8609dc9e389ca0c24b8014276bb5793a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -441,7 +441,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_mt(mt);\n         }\n         TyKind::BareFn(bft) => {\n-            let BareFnTy { unsafety: _, abi: _, generic_params, decl } = bft.deref_mut();\n+            let BareFnTy { unsafety: _, ext: _, generic_params, decl } = bft.deref_mut();\n             generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_fn_decl(decl);\n         }\n@@ -974,7 +974,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n }\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n-    let FnHeader { unsafety: _, asyncness, constness: _, abi: _ } = header;\n+    let FnHeader { unsafety: _, asyncness, constness: _, ext: _ } = header;\n     vis.visit_asyncness(&mut asyncness.node);\n }\n "}, {"sha": "17a7cbddff9cc3e420eb87c68b577e745f0766ab", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1013,7 +1013,7 @@ impl<'a> State<'a> {\n                 self.pclose();\n             }\n             ast::TyKind::BareFn(ref f) => {\n-                self.print_ty_fn(f.abi,\n+                self.print_ty_fn(f.ext,\n                                  f.unsafety,\n                                  &f.decl,\n                                  None,\n@@ -1232,7 +1232,10 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\");\n-                self.print_abi(nmod.abi);\n+                if let Some(abi) = nmod.abi {\n+                    self.print_literal(&abi.as_lit());\n+                    self.nbsp();\n+                }\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n                 self.bclose(item.span);\n@@ -2805,7 +2808,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ty_fn(&mut self,\n-                       abi: ast::Abi,\n+                       ext: ast::Extern,\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n@@ -2825,7 +2828,7 @@ impl<'a> State<'a> {\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n-                      ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n+                      ast::FnHeader { unsafety, ext, ..ast::FnHeader::default() },\n                       name,\n                       &generics,\n                       &source_map::dummy_spanned(ast::VisibilityKind::Inherited));\n@@ -2866,18 +2869,21 @@ impl<'a> State<'a> {\n         self.print_asyncness(header.asyncness.node);\n         self.print_unsafety(header.unsafety);\n \n-        if header.abi.symbol != sym::Rust {\n-            self.word_nbsp(\"extern\");\n-            self.print_abi(header.abi);\n+        match header.ext {\n+            ast::Extern::None => {}\n+            ast::Extern::Implicit => {\n+                self.word_nbsp(\"extern\");\n+            }\n+            ast::Extern::Explicit(abi) => {\n+                self.word_nbsp(\"extern\");\n+                self.print_literal(&abi.as_lit());\n+                self.nbsp();\n+            }\n         }\n \n         self.s.word(\"fn\")\n     }\n \n-    fn print_abi(&mut self, abi: ast::Abi) {\n-        self.word_nbsp(format!(\"\\\"{}\\\"\", abi.symbol));\n-    }\n-\n     crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n         match s {\n             ast::Unsafety::Normal => {},"}, {"sha": "bd345a9a7dada11c83573e30517fcf0d5e3a412e", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -2,19 +2,17 @@\n //\n use State::*;\n \n+use errors::{DiagnosticBuilder, PResult};\n use rustc_data_structures::thin_vec::ThinVec;\n-\n-use errors::DiagnosticBuilder;\n-\n-use syntax::ast;\n-use syntax_expand::base::{self, *};\n-use syntax::token::{self, Token};\n+use rustc_parse::parser::Parser;\n+use syntax_expand::base::*;\n+use syntax_pos::Span;\n+use syntax::{span_err, struct_span_err};\n+use syntax::ast::{self, AsmDialect};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n-use syntax::ast::AsmDialect;\n-use syntax_pos::Span;\n+use syntax::token::{self, Token};\n use syntax::tokenstream::{self, TokenStream};\n-use syntax::{span_err, struct_span_err};\n \n use rustc_error_codes::*;\n \n@@ -45,7 +43,7 @@ const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: TokenStream)\n-                       -> Box<dyn base::MacResult + 'cx> {\n+                       -> Box<dyn MacResult + 'cx> {\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n         Ok(None) => return DummyResult::any(sp),\n@@ -69,6 +67,18 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     }))\n }\n \n+fn parse_asm_str<'a>(p: &mut Parser<'a>) -> PResult<'a, Symbol> {\n+    match p.parse_str_lit() {\n+        Ok(str_lit) => Ok(str_lit.symbol_unescaped),\n+        Err(opt_lit) => {\n+            let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n+            let mut err = p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");\n+            err.span_label(span, \"not a string literal\");\n+            Err(err)\n+        }\n+    }\n+}\n+\n fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n@@ -144,7 +154,7 @@ fn parse_inline_asm<'a>(\n                         p.eat(&token::Comma);\n                     }\n \n-                    let (constraint, _) = p.parse_str()?;\n+                    let constraint = parse_asm_str(&mut p)?;\n \n                     let span = p.prev_span;\n \n@@ -189,7 +199,7 @@ fn parse_inline_asm<'a>(\n                         p.eat(&token::Comma);\n                     }\n \n-                    let (constraint, _) = p.parse_str()?;\n+                    let constraint = parse_asm_str(&mut p)?;\n \n                     if constraint.as_str().starts_with(\"=\") {\n                         span_err!(cx, p.prev_span, E0662,\n@@ -212,7 +222,7 @@ fn parse_inline_asm<'a>(\n                         p.eat(&token::Comma);\n                     }\n \n-                    let (s, _) = p.parse_str()?;\n+                    let s = parse_asm_str(&mut p)?;\n \n                     if OPTIONS.iter().any(|&opt| s == opt) {\n                         cx.span_warn(p.prev_span, \"expected a clobber, found an option\");\n@@ -225,7 +235,7 @@ fn parse_inline_asm<'a>(\n                 }\n             }\n             Options => {\n-                let (option, _) = p.parse_str()?;\n+                let option = parse_asm_str(&mut p)?;\n \n                 if option == sym::volatile {\n                     // Indicates that the inline assembly has side effects"}, {"sha": "b6bf2f881616f1163d508c932d729eb44f23e49d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -182,7 +182,7 @@ use std::iter;\n use std::vec;\n \n use rustc_data_structures::thin_vec::ThinVec;\n-use syntax::ast::{self, Abi, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::source_map::respan;\n@@ -737,7 +737,6 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -792,7 +791,6 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -918,7 +916,6 @@ impl<'a> MethodDef<'a> {\n                      trait_: &TraitDef<'_>,\n                      type_ident: Ident,\n                      generics: &Generics,\n-                     abi: Symbol,\n                      explicit_self: Option<ast::ExplicitSelf>,\n                      arg_types: Vec<(Ident, P<ast::Ty>)>,\n                      body: P<Expr>)\n@@ -953,7 +950,7 @@ impl<'a> MethodDef<'a> {\n         let sig = ast::FnSig {\n             header: ast::FnHeader {\n                 unsafety,\n-                abi: Abi::new(abi, trait_lo_sp),\n+                ext: ast::Extern::None,\n                 ..ast::FnHeader::default()\n             },\n             decl: fn_decl,"}, {"sha": "86eaeeab5a426ec4b27199860928c336a5268f54", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -570,7 +570,6 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n-        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         rustc_allocator,"}, {"sha": "f9ecff2abaa839c2349fcdb27d6f7ca2512b503f", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -2,7 +2,7 @@\n \n extern crate rustc;\n extern crate rustc_interface;\n-extern crate rustc_driver as _;\n+extern crate rustc_driver;\n extern crate syntax;\n \n use rustc::session::DiagnosticOutput;\n@@ -61,6 +61,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     interface::run_compiler(config, |compiler| {"}, {"sha": "b17c6a939655c45620dca7fcf073191e307e6696", "filename": "src/test/ui-fulldeps/auxiliary/attr-plugin-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -14,9 +14,6 @@ use syntax::symbol::Symbol;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_attribute(Symbol::intern(\"foo\"), AttributeType::Normal);\n-    reg.register_attribute(Symbol::intern(\"bar\"), AttributeType::CrateLevel);\n-    reg.register_attribute(Symbol::intern(\"baz\"), AttributeType::Whitelisted);\n     reg.register_syntax_extension(\n         Symbol::intern(\"mac\"), SyntaxExtension::dummy_bang(reg.sess.edition())\n     );"}, {"sha": "68ea10fe735ad6537e88327daafde5d87ed74b12", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -5,25 +5,17 @@\n extern crate rustc;\n extern crate rustc_driver;\n extern crate syntax;\n-extern crate syntax_expand;\n \n use rustc_driver::plugin::Registry;\n-use syntax::attr;\n-use syntax_expand::base::*;\n-use syntax::feature_gate::AttributeType::Whitelisted;\n-use syntax::symbol::Symbol;\n-\n-use rustc::hir;\n-use rustc::hir::intravisit;\n-use hir::Node;\n+use rustc::hir::{self, intravisit, Node};\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n+use syntax::print::pprust;\n use syntax::source_map;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&MISSING_WHITELISTED_ATTR]);\n     reg.lint_store.register_late_pass(|| box MissingWhitelistedAttrPass);\n-    reg.register_attribute(Symbol::intern(\"whitelisted_attr\"), Whitelisted);\n }\n \n declare_lint! {\n@@ -48,7 +40,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n             _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };\n \n-        if !attr::contains_name(&item.attrs, Symbol::intern(\"whitelisted_attr\")) {\n+        let whitelisted = |attr| pprust::attribute_to_string(attr).contains(\"whitelisted_attr\");\n+        if !item.attrs.iter().any(whitelisted) {\n             cx.span_lint(MISSING_WHITELISTED_ATTR, span,\n                          \"Missing 'whitelisted_attr' attribute\");\n         }"}, {"sha": "c3f98197250d1246c2b9e69033b9a82ead5442b9", "filename": "src/test/ui-fulldeps/issue-40001.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -2,8 +2,9 @@\n // aux-build:issue-40001-plugin.rs\n // ignore-stage1\n \n-#![feature(plugin)]\n+#![feature(plugin, register_tool)]\n #![plugin(issue_40001_plugin)] //~ WARNING compiler plugins are deprecated\n+#![register_tool(plugin)]\n \n-#[whitelisted_attr]\n+#[plugin::whitelisted_attr]\n fn main() {}"}, {"sha": "dd7c009388e2c0cc01bccffc6aa667914940d3bd", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc289cb8b2f64440ee1a2108427049a56ad48f/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc289cb8b2f64440ee1a2108427049a56ad48f/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs?ref=2cdc289cb8b2f64440ee1a2108427049a56ad48f", "patch": "@@ -1,21 +0,0 @@\n-// aux-build:attr-plugin-test.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(attr_plugin_test)]\n-//~^ WARN use of deprecated attribute `plugin`\n-#![deny(unused_attributes)]\n-\n-#[baz]\n-fn baz() { } // no error\n-\n-#[foo]\n-pub fn main() {\n-     //~^^ ERROR unused\n-    #[bar]\n-    fn inner() {}\n-    //~^^ ERROR crate\n-    //~^^^ ERROR unused\n-    baz();\n-    inner();\n-}"}, {"sha": "8d95d6ff2d89f9e67bc8de31e191ccd048663935", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc289cb8b2f64440ee1a2108427049a56ad48f/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc289cb8b2f64440ee1a2108427049a56ad48f/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=2cdc289cb8b2f64440ee1a2108427049a56ad48f", "patch": "@@ -1,34 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-attr-register-deny.rs:5:1\n-   |\n-LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:15:5\n-   |\n-LL |     #[bar]\n-   |     ^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/plugin-attr-register-deny.rs:7:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/plugin-attr-register-deny.rs:15:5\n-   |\n-LL |     #[bar]\n-   |     ^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:12:1\n-   |\n-LL | #[foo]\n-   | ^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "8d464e752e637172c42230300e1b61e0872f7389", "filename": "src/test/ui/asm/asm-literal-escaping.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,12 @@\n+// build-pass\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        // \"nop\" :: \"r\"(x) : \"eax\" : \"volatile\"\n+        let x = 10;\n+        asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n+    }\n+}"}, {"sha": "2b29332fef5e524adcec3bc4ecf2c0b19faa5ba6", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -8,13 +8,13 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:5:18\n    |\n LL |     asm!(\"nop\" : struct);\n-   |                  ^^^^^^ expected string literal\n+   |                  ^^^^^^ not a string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:6:30\n    |\n LL |     asm!(\"mov %eax, $$0x2\" : struct);\n-   |                              ^^^^^^ expected string literal\n+   |                              ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:7:39\n@@ -32,7 +32,7 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:9:44\n    |\n LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                            ^^^^^^ expected string literal\n+   |                                            ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:10:51\n@@ -50,13 +50,13 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:12:36\n    |\n LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                    ^^^^^^ expected string literal\n+   |                                    ^^^^^^ not a string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:13:45\n    |\n LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                             ^^^^^^ expected string literal\n+   |                                             ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n   --> $DIR/asm-parse-errors.rs:14:10"}, {"sha": "c0cde75d4caebe4f306565df3018d91c341154d6", "filename": "src/test/ui/deprecation/issue-66340-deprecated-attr-non-meta-grammar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,11 @@\n+// The original problem in #66340 was that `find_deprecation_generic`\n+// called `attr.meta().unwrap()` under the assumption that the attribute\n+// was a well-formed `MetaItem`.\n+\n+fn main() {\n+    foo()\n+}\n+\n+#[deprecated(note = test)]\n+//~^ ERROR expected unsuffixed literal or identifier, found `test`\n+fn foo() {}"}, {"sha": "24178faf8de789bdd16864c694e2bbe5d0f5123c", "filename": "src/test/ui/deprecation/issue-66340-deprecated-attr-non-meta-grammar.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fissue-66340-deprecated-attr-non-meta-grammar.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,8 @@\n+error: expected unsuffixed literal or identifier, found `test`\n+  --> $DIR/issue-66340-deprecated-attr-non-meta-grammar.rs:9:21\n+   |\n+LL | #[deprecated(note = test)]\n+   |                     ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8bcb1e5ba8c0da19466f2d4dc50a7165dcd0a65f", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -4,7 +4,7 @@\n \n struct Foo {\n     x: usize,\n-    b: bool, //~ ERROR: field is never used\n+    b: bool, //~ ERROR: field is never read\n }\n \n fn field_read(f: Foo) -> usize {\n@@ -36,8 +36,8 @@ enum IJK {\n     I, //~ ERROR variant is never constructed\n     J {\n         a: String,\n-        b: i32, //~ ERROR field is never used\n-        c: i32, //~ ERROR field is never used\n+        b: i32, //~ ERROR field is never read\n+        c: i32, //~ ERROR field is never read\n     },\n     K //~ ERROR variant is never constructed\n \n@@ -58,9 +58,9 @@ fn field_match_in_patterns(b: XYZ) -> String {\n }\n \n struct Bar {\n-    x: usize, //~ ERROR: field is never used\n+    x: usize, //~ ERROR: field is never read\n     b: bool,\n-    c: bool, //~ ERROR: field is never used\n+    c: bool, //~ ERROR: field is never read\n     _guard: ()\n }\n "}, {"sha": "cc00fa4e42afd8f6a00b867273260565296f7534", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,4 +1,4 @@\n-error: field is never used: `b`\n+error: field is never read: `b`\n   --> $DIR/lint-dead-code-4.rs:7:5\n    |\n LL |     b: bool,\n@@ -38,13 +38,13 @@ error: variant is never constructed: `I`\n LL |     I,\n    |     ^\n \n-error: field is never used: `b`\n+error: field is never read: `b`\n   --> $DIR/lint-dead-code-4.rs:39:9\n    |\n LL |         b: i32,\n    |         ^^^^^^\n \n-error: field is never used: `c`\n+error: field is never read: `c`\n   --> $DIR/lint-dead-code-4.rs:40:9\n    |\n LL |         c: i32,\n@@ -56,13 +56,13 @@ error: variant is never constructed: `K`\n LL |     K\n    |     ^\n \n-error: field is never used: `x`\n+error: field is never read: `x`\n   --> $DIR/lint-dead-code-4.rs:61:5\n    |\n LL |     x: usize,\n    |     ^^^^^^^^\n \n-error: field is never used: `c`\n+error: field is never read: `c`\n   --> $DIR/lint-dead-code-4.rs:63:5\n    |\n LL |     c: bool,"}, {"sha": "430bc1d716c91b317edac5aea876ca7d6da02854", "filename": "src/test/ui/parser/issue-63116.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fparser%2Fissue-63116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fparser%2Fissue-63116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63116.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,3 @@\n+// fixed by #66361\n+// error-pattern: aborting due to 3 previous errors\n+impl W <s(f;Y(;]"}, {"sha": "0aed0386a907b57a038363a1f3fd7baf10750521", "filename": "src/test/ui/parser/issue-63116.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -0,0 +1,24 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/issue-63116.rs:3:18\n+   |\n+LL | impl W <s(f;Y(;]\n+   |          -       ^\n+   |          |\n+   |          un-closed delimiter\n+\n+error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `;`\n+  --> $DIR/issue-63116.rs:3:12\n+   |\n+LL | impl W <s(f;Y(;]\n+   |            ^ expected one of 7 possible tokens\n+\n+error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `->`, `...`, `::`, `<`, `>`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, or lifetime, found `;`\n+  --> $DIR/issue-63116.rs:3:15\n+   |\n+LL | impl W <s(f;Y(;]\n+   |              -^ help: `)` may belong here\n+   |              |\n+   |              unclosed delimiter\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b22e50c4c1715d785de19052c1593d884219b40b", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,9 +1,8 @@\n-//~ ERROR mismatched types\n-// aux-build:test-macros.rs\n-\n // For each of these, we should get the appropriate type mismatch error message,\n // and the function should be echoed.\n \n+// aux-build:test-macros.rs\n+\n #[macro_use]\n extern crate test_macros;\n \n@@ -35,17 +34,24 @@ fn c() {\n     let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n }\n \n-// FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n-// injects a \"C\" between `extern` and `fn` which causes a \"probably_eq\"\n-// `TokenStream` mismatch. The lack of `\"C\"` should be preserved in the AST.\n #[recollect_attr]\n extern fn bar() {\n-    0\n+    0 //~ ERROR mismatched types\n }\n \n #[recollect_attr]\n extern \"C\" fn baz() {\n     0 //~ ERROR mismatched types\n }\n \n+#[recollect_attr]\n+extern \"Rust\" fn rust_abi() {\n+    0 //~ ERROR mismatched types\n+}\n+\n+#[recollect_attr]\n+extern \"\\x43\" fn c_abi_escaped() {\n+    0 //~ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "545c2fa5f40e4ab193ef031e1dde6a49f40655b9", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,10 +1,5 @@\n error[E0308]: mismatched types\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:12:20\n+  --> $DIR/span-preservation.rs:11:20\n    |\n LL |     let x: usize = \"hello\";\n    |                    ^^^^^^^ expected usize, found reference\n@@ -13,7 +8,7 @@ LL |     let x: usize = \"hello\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:18:29\n+  --> $DIR/span-preservation.rs:17:29\n    |\n LL | fn b(x: Option<isize>) -> usize {\n    |                           ----- expected `usize` because of return type\n@@ -22,21 +17,32 @@ LL |         Some(x) => { return x },\n    |                             ^ expected usize, found isize\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:34:22\n+  --> $DIR/span-preservation.rs:33:22\n    |\n LL |     let x = Foo { a: 10isize };\n    |                      ^^^^^^^ expected usize, found isize\n \n error[E0560]: struct `c::Foo` has no field named `b`\n-  --> $DIR/span-preservation.rs:35:26\n+  --> $DIR/span-preservation.rs:34:26\n    |\n LL |     let y = Foo { a: 10, b: 10isize };\n    |                          ^ `c::Foo` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:48:5\n+  --> $DIR/span-preservation.rs:39:5\n+   |\n+LL | extern fn bar() {\n+   |                 - possibly return type missing here?\n+LL |     0\n+   |     ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:44:5\n    |\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?\n@@ -46,7 +52,29 @@ LL |     0\n    = note: expected type `()`\n               found type `{integer}`\n \n-error: aborting due to 6 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:49:5\n+   |\n+LL | extern \"Rust\" fn rust_abi() {\n+   |                             - possibly return type missing here?\n+LL |     0\n+   |     ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:54:5\n+   |\n+LL | extern \"\\x43\" fn c_abi_escaped() {\n+   |                                  - possibly return type missing here?\n+LL |     0\n+   |     ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0308, E0560.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "edef41de159bae806cd36b26a0a9f07e90d3a18e", "filename": "src/test/ui/union/union-fields-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -3,19 +3,19 @@\n union U1 {\n     a: u8, // should not be reported\n     b: u8, // should not be reported\n-    c: u8, //~ ERROR field is never used\n+    c: u8, //~ ERROR field is never read\n }\n union U2 {\n-    a: u8, //~ ERROR field is never used\n+    a: u8, //~ ERROR field is never read\n     b: u8, // should not be reported\n     c: u8, // should not be reported\n }\n-union NoDropLike { a: u8 } //~ ERROR field is never used\n+union NoDropLike { a: u8 } //~ ERROR field is never read\n \n union U {\n     a: u8, // should not be reported\n     b: u8, // should not be reported\n-    c: u8, //~ ERROR field is never used\n+    c: u8, //~ ERROR field is never read\n }\n type A = U;\n "}, {"sha": "be145c9496c6cd793dead823d6816a2b0f323610", "filename": "src/test/ui/union/union-fields-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-fields-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-fields-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,4 +1,4 @@\n-error: field is never used: `c`\n+error: field is never read: `c`\n   --> $DIR/union-fields-1.rs:6:5\n    |\n LL |     c: u8,\n@@ -10,19 +10,19 @@ note: lint level defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: field is never used: `a`\n+error: field is never read: `a`\n   --> $DIR/union-fields-1.rs:9:5\n    |\n LL |     a: u8,\n    |     ^^^^^\n \n-error: field is never used: `a`\n+error: field is never read: `a`\n   --> $DIR/union-fields-1.rs:13:20\n    |\n LL | union NoDropLike { a: u8 }\n    |                    ^^^^^\n \n-error: field is never used: `c`\n+error: field is never read: `c`\n   --> $DIR/union-fields-1.rs:18:5\n    |\n LL |     c: u8,"}, {"sha": "ae5337c618a754d470c8af176689390c56be7c60", "filename": "src/test/ui/union/union-lint-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -2,7 +2,7 @@\n \n union Foo {\n     x: usize,\n-    b: bool, //~ ERROR: field is never used\n+    b: bool, //~ ERROR: field is never read\n     _unused: u16,\n }\n "}, {"sha": "5fe26dc25384402bbf5b4fe4497ec31c3525d7db", "filename": "src/test/ui/union/union-lint-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8831d766ace89bc74714918a7d9fbd3ca5ec946a/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.stderr?ref=8831d766ace89bc74714918a7d9fbd3ca5ec946a", "patch": "@@ -1,4 +1,4 @@\n-error: field is never used: `b`\n+error: field is never read: `b`\n   --> $DIR/union-lint-dead-code.rs:5:5\n    |\n LL |     b: bool,"}]}