{"sha": "454533f5d93421eb2532fc6ee0fcd3007142cff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDUzM2Y1ZDkzNDIxZWIyNTMyZmM2ZWUwZmNkMzAwNzE0MmNmZjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-07T13:50:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-11T10:11:38Z"}, "message": "Use ItemLocalId as key for closure_tys and closure_kinds in TypeckTables.", "tree": {"sha": "31cd7398b9f194c800e18f84f7134e46326fb1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31cd7398b9f194c800e18f84f7134e46326fb1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454533f5d93421eb2532fc6ee0fcd3007142cff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454533f5d93421eb2532fc6ee0fcd3007142cff6", "html_url": "https://github.com/rust-lang/rust/commit/454533f5d93421eb2532fc6ee0fcd3007142cff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454533f5d93421eb2532fc6ee0fcd3007142cff6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e777189b4accdd7a92adf8554a368d399ff7f3ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e777189b4accdd7a92adf8554a368d399ff7f3ee", "html_url": "https://github.com/rust-lang/rust/commit/e777189b4accdd7a92adf8554a368d399ff7f3ee"}], "stats": {"total": 109, "additions": 76, "deletions": 33}, "files": [{"sha": "eec73937e2ca06b13bb4e5a03e711dd9f7b947f8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -654,8 +654,8 @@ for ty::TypeckTables<'gcx> {\n                 (hcx.def_path_hash(var_def_id), hcx.def_path_hash(closure_def_id))\n             });\n \n-            ich::hash_stable_nodemap(hcx, hasher, closure_tys);\n-            ich::hash_stable_nodemap(hcx, hasher, closure_kinds);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, closure_tys);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, closure_kinds);\n             ich::hash_stable_nodemap(hcx, hasher, liberated_fn_sigs);\n             ich::hash_stable_nodemap(hcx, hasher, fru_field_types);\n             ich::hash_stable_nodemap(hcx, hasher, cast_kinds);"}, {"sha": "727b0af2f547b7d5da6a268c35724567b4ac2293", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -1331,9 +1331,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         if let Some(tables) = self.in_progress_tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                return tables.borrow()\n-                             .closure_kinds\n-                             .get(&id)\n+                let tables = tables.borrow();\n+                let hir_id = self.tcx.hir.node_to_hir_id(id);\n+                tables.validate_hir_id(hir_id);\n+                return tables.closure_kinds\n+                             .get(&hir_id.local_id)\n                              .cloned()\n                              .map(|(kind, _)| kind);\n             }\n@@ -1353,7 +1355,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn fn_sig(&self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n         if let Some(tables) = self.in_progress_tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                if let Some(&ty) = tables.borrow().closure_tys.get(&id) {\n+                let tables = tables.borrow();\n+                let hir_id = self.tcx.hir.node_to_hir_id(id);\n+                tables.validate_hir_id(hir_id);\n+                if let Some(&ty) = tables.closure_tys.get(&hir_id.local_id) {\n                     return ty;\n                 }\n             }"}, {"sha": "e8c6cc8121203e299f1b7ebecd3314947814a454", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -697,6 +697,9 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                  fn_node_id: ast::NodeId)\n                  -> McResult<cmt<'tcx>>\n     {\n+        let fn_hir_id = self.tcx.hir.node_to_hir_id(fn_node_id);\n+        self.tables.validate_hir_id(fn_hir_id);\n+\n         // An upvar can have up to 3 components. We translate first to a\n         // `Categorization::Upvar`, which is itself a fiction -- it represents the reference to the\n         // field from the environment.\n@@ -720,7 +723,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // FnMut          | copied -> &'env mut  | upvar -> &'env mut -> &'up bk\n         // FnOnce         | copied               | upvar -> &'up bk\n \n-        let kind = match self.tables.closure_kinds.get(&fn_node_id) {\n+        let kind = match self.tables.closure_kinds.get(&fn_hir_id.local_id) {\n             Some(&(kind, _)) => kind,\n             None => span_bug!(span, \"missing closure kind\")\n         };"}, {"sha": "8c4054254d02509d63dc922e33872cb03585dc34", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -682,7 +682,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         // Additional context information explaining why the closure only implements\n                         // a particular trait.\n                         if let Some(tables) = self.in_progress_tables {\n-                            match tables.borrow().closure_kinds.get(&node_id) {\n+                            let tables = tables.borrow();\n+                            let closure_hir_id = self.tcx.hir.node_to_hir_id(node_id);\n+                            tables.validate_hir_id(closure_hir_id);\n+                            match tables.closure_kinds.get(&closure_hir_id.local_id) {\n                                 Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) => {\n                                     err.span_note(span, &format!(\n                                         \"closure is `FnOnce` because it moves the \\"}, {"sha": "492ec0f3e40da12533f0899bee0178174074362a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -236,11 +236,11 @@ pub struct TypeckTables<'tcx> {\n     pub upvar_capture_map: ty::UpvarCaptureMap<'tcx>,\n \n     /// Records the type of each closure.\n-    pub closure_tys: NodeMap<ty::PolyFnSig<'tcx>>,\n+    pub closure_tys: ItemLocalMap<ty::PolyFnSig<'tcx>>,\n \n     /// Records the kind of each closure and the span and name of the variable\n     /// that caused the closure to be this kind.\n-    pub closure_kinds: NodeMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n+    pub closure_kinds: ItemLocalMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions\n@@ -283,8 +283,8 @@ impl<'tcx> TypeckTables<'tcx> {\n             adjustments: ItemLocalMap(),\n             pat_binding_modes: ItemLocalMap(),\n             upvar_capture_map: FxHashMap(),\n-            closure_tys: NodeMap(),\n-            closure_kinds: NodeMap(),\n+            closure_tys: ItemLocalMap(),\n+            closure_kinds: ItemLocalMap(),\n             liberated_fn_sigs: NodeMap(),\n             fru_field_types: NodeMap(),\n             cast_kinds: NodeMap(),"}, {"sha": "7c9f4abe4183b2d086ccc92da3a3175402b655e8", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -598,8 +598,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let need_note = match lp.ty.sty {\n                     ty::TypeVariants::TyClosure(id, _) => {\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n+                        let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n+                        self.tables.validate_hir_id(hir_id);\n                         if let Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) =\n-                            self.tables.closure_kinds.get(&node_id)\n+                            self.tables.closure_kinds.get(&hir_id.local_id)\n                         {\n                             err.span_note(span, &format!(\n                                 \"closure cannot be invoked more than once because \\"}, {"sha": "8bf58d866efc23af567605792ba4be529b596f2e", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -102,12 +102,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                sig,\n                opt_kind);\n \n-        self.tables.borrow_mut().closure_tys.insert(expr.id, sig);\n-        match opt_kind {\n-            Some(kind) => {\n-                self.tables.borrow_mut().closure_kinds.insert(expr.id, (kind, None));\n+        {\n+            let mut tables = self.tables.borrow_mut();\n+            tables.validate_hir_id(expr.hir_id);\n+            tables.closure_tys.insert(expr.hir_id.local_id, sig);\n+            match opt_kind {\n+                Some(kind) => {\n+                    tables.closure_kinds.insert(expr.hir_id.local_id, (kind, None));\n+                }\n+                None => {}\n             }\n-            None => {}\n         }\n \n         closure_type"}, {"sha": "fc8f4f32440a18c5745fabd3074833f4f66aeede", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -820,19 +820,22 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             let closure_id = match step.self_ty.sty {\n                 ty::TyClosure(def_id, _) => {\n                     if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                        id\n+                        self.tcx.hir.node_to_hir_id(id)\n                     } else {\n                         continue;\n                     }\n                 }\n                 _ => continue,\n             };\n \n-            let closure_kinds = &self.tables.borrow().closure_kinds;\n-            let closure_kind = match closure_kinds.get(&closure_id) {\n-                Some(&(k, _)) => k,\n-                None => {\n-                    return Err(MethodError::ClosureAmbiguity(trait_def_id));\n+            let closure_kind = {\n+                let tables = self.tables.borrow();\n+                tables.validate_hir_id(closure_id);\n+                match tables.closure_kinds.get(&closure_id.local_id) {\n+                    Some(&(k, _)) => k,\n+                    None => {\n+                        return Err(MethodError::ClosureAmbiguity(trait_def_id));\n+                    }\n                 }\n             };\n "}, {"sha": "5308ffe6f8d73f5ac1b1aaf51b4adcd260dabbf1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -743,7 +743,8 @@ fn closure_kind<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           def_id: DefId)\n                           -> ty::ClosureKind {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    tcx.typeck_tables_of(def_id).closure_kinds[&node_id].0\n+    let hir_id = tcx.hir.node_to_hir_id(node_id);\n+    tcx.typeck_tables_of(def_id).closure_kinds[&hir_id.local_id].0\n }\n \n fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "6621c9d027e925b1d6e0e634be9cde3d21abc341", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"analyze_closure(id={:?}, body.id={:?})\", id, body.id());\n \n-        let infer_kind = match self.tables.borrow_mut().closure_kinds.entry(id) {\n+        let infer_kind = match self.tables.borrow_mut().closure_kinds.entry(hir_id.local_id) {\n             Entry::Occupied(_) => false,\n             Entry::Vacant(entry) => {\n                 debug!(\"check_closure: adding closure {:?} as Fn\", id);\n@@ -152,7 +152,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // Write the adjusted values back into the main tables.\n             if infer_kind {\n                 if let Some(kind) = delegate.adjust_closure_kinds.remove(&id) {\n-                    self.tables.borrow_mut().closure_kinds.insert(id, kind);\n+                    self.tables.borrow_mut().closure_kinds.insert(hir_id.local_id, kind);\n                 }\n             }\n             self.tables.borrow_mut().upvar_capture_map.extend(\n@@ -468,7 +468,13 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                closure_id, new_kind, upvar_span, var_name);\n \n         let closure_kind = self.adjust_closure_kinds.get(&closure_id).cloned()\n-            .or_else(|| self.fcx.tables.borrow().closure_kinds.get(&closure_id).cloned());\n+            .or_else(|| {\n+                let closure_id = self.fcx.tcx.hir.node_to_hir_id(closure_id);\n+                let fcx_tables = self.fcx.tables.borrow();\n+                fcx_tables.validate_hir_id(closure_id);\n+                fcx_tables.closure_kinds.get(&closure_id.local_id).cloned()\n+            });\n+\n         if let Some((existing_kind, _)) = closure_kind {\n             debug!(\"adjust_closure_kind: closure_id={}, existing_kind={:?}, new_kind={:?}\",\n                    closure_id, existing_kind, new_kind);"}, {"sha": "ed7b75ddb05b040f94aebd5ce509577135de6de2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -230,12 +230,19 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     }\n \n     fn visit_closures(&mut self) {\n-        for (&id, closure_ty) in self.fcx.tables.borrow().closure_tys.iter() {\n-            let closure_ty = self.resolve(closure_ty, &id);\n+        let fcx_tables = self.fcx.tables.borrow();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+\n+        for (&id, closure_ty) in fcx_tables.closure_tys.iter() {\n+            let hir_id = hir::HirId {\n+                owner: fcx_tables.local_id_root.index,\n+                local_id: id,\n+            };\n+            let closure_ty = self.resolve(closure_ty, &hir_id);\n             self.tables.closure_tys.insert(id, closure_ty);\n         }\n \n-        for (&id, &closure_kind) in self.fcx.tables.borrow().closure_kinds.iter() {\n+        for (&id, &closure_kind) in fcx_tables.closure_kinds.iter() {\n             self.tables.closure_kinds.insert(id, closure_kind);\n         }\n     }\n@@ -380,6 +387,13 @@ impl Locatable for ast::NodeId {\n     fn to_span(&self, tcx: &TyCtxt) -> Span { tcx.hir.span(*self) }\n }\n \n+impl Locatable for hir::HirId {\n+    fn to_span(&self, tcx: &TyCtxt) -> Span {\n+        let node_id = tcx.hir.definitions().find_node_for_hir_id(*self);\n+        tcx.hir.span(node_id)\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // The Resolver. This is the type folding engine that detects\n // unresolved types and so forth."}, {"sha": "30188a7cbdce5acc1759b20cf38daafa10b7d9b9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454533f5d93421eb2532fc6ee0fcd3007142cff6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=454533f5d93421eb2532fc6ee0fcd3007142cff6", "patch": "@@ -1239,8 +1239,10 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ))\n         }\n \n-        NodeExpr(&hir::Expr { node: hir::ExprClosure(..), .. }) => {\n-            tcx.typeck_tables_of(def_id).closure_tys[&node_id]\n+        NodeExpr(&hir::Expr { node: hir::ExprClosure(..), hir_id, .. }) => {\n+            let tables = tcx.typeck_tables_of(def_id);\n+            tables.validate_hir_id(hir_id);\n+            tables.closure_tys[&hir_id.local_id]\n         }\n \n         x => {"}]}