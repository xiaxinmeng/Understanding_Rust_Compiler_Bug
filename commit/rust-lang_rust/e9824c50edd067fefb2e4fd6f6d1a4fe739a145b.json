{"sha": "e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ODI0YzUwZWRkMDY3ZmVmYjJlNGZkNmY2ZDFhNGZlNzM5YTE0NWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-06T09:30:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:53Z"}, "message": "impose inputs/ouputs on MIR after the fact\n\nThe input/output types found in `UniversalRegions` are not normalized.\nThe old code used to assign them directly into the MIR, which would\nlead to errors when there was a projection in a argument or return\ntype. This also led to some special cases in the `renumber` code.\n\nWe now renumber uniformly but then pass the input/output types into\nthe MIR type-checker, which equates them with the types found in MIR.\nThis allows us to normalize at the same time.", "tree": {"sha": "d2c89fabab1fd292817f6c92588729de80782c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c89fabab1fd292817f6c92588729de80782c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "html_url": "https://github.com/rust-lang/rust/commit/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcb13ae458ce6e2eedd34461b4e43c7be31b6b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcb13ae458ce6e2eedd34461b4e43c7be31b6b1", "html_url": "https://github.com/rust-lang/rust/commit/3fcb13ae458ce6e2eedd34461b4e43c7be31b6b1"}], "stats": {"total": 162, "additions": 94, "deletions": 68}, "files": [{"sha": "6977d91d25a5d1829004617f912a7724046deaf7", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -53,7 +53,7 @@ pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n     let universal_regions = UniversalRegions::new(infcx, def_id, param_env);\n \n     // Replace all remaining regions with fresh inference variables.\n-    renumber::renumber_mir(infcx, &universal_regions, mir);\n+    renumber::renumber_mir(infcx, mir);\n \n     let source = MirSource::item(def_id);\n     mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, mir, |_, _| Ok(()));\n@@ -86,6 +86,8 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         param_env,\n         mir,\n         fr_fn_body,\n+        universal_regions.input_tys,\n+        universal_regions.output_ty,\n         &liveness,\n         flow_inits,\n         move_data,"}, {"sha": "79505405692d8b0f6622bf4869ef904a982b43ca", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 5, "deletions": 63, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -8,50 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc_data_structures::indexed_vec::Idx;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, ClosureSubsts, Ty, TypeFoldable};\n-use rustc::mir::{BasicBlock, Local, Location, Mir, Statement, StatementKind};\n-use rustc::mir::RETURN_PLACE;\n+use rustc::mir::{BasicBlock, Location, Mir, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n-use super::ToRegionVid;\n-use super::universal_regions::UniversalRegions;\n-\n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n-pub fn renumber_mir<'a, 'gcx, 'tcx>(\n-    infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    universal_regions: &UniversalRegions<'tcx>,\n-    mir: &mut Mir<'tcx>,\n-) {\n+pub fn renumber_mir<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>, mir: &mut Mir<'tcx>) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: mir.arg_count={:?}\", mir.arg_count);\n \n-    // Update the return type and types of the arguments based on the\n-    // `universal_regions` computation.\n-    debug!(\"renumber_mir: output_ty={:?}\", universal_regions.output_ty);\n-    mir.local_decls[RETURN_PLACE].ty = universal_regions.output_ty;\n-    for (&input_ty, local) in universal_regions\n-        .input_tys\n-        .iter()\n-        .zip((1..).map(Local::new))\n-    {\n-        debug!(\"renumber_mir: input_ty={:?} local={:?}\", input_ty, local);\n-        mir.local_decls[local].ty = input_ty;\n-    }\n-\n-    let mut visitor = NLLVisitor {\n-        infcx,\n-        arg_count: mir.arg_count,\n-    };\n+    let mut visitor = NLLVisitor { infcx };\n     visitor.visit_mir(mir);\n }\n \n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    arg_count: usize,\n }\n \n impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n@@ -71,45 +45,13 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n                 self.infcx.next_nll_region_var(origin)\n             })\n     }\n-\n-    /// Checks that all the regions appearing in `value` have already\n-    /// been renumbered. `FreeRegions` code should have done this.\n-    fn assert_free_regions_are_renumbered<T>(&self, value: &T)\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        debug!(\"assert_free_regions_are_renumbered(value={:?})\", value);\n-\n-        self.infcx.tcx.for_each_free_region(value, |region| {\n-            region.to_region_vid(); // will panic if `region` is not renumbered\n-        });\n-    }\n-\n-    fn is_argument_or_return_slot(&self, local: Local) -> bool {\n-        // The first argument is return slot, next N are arguments.\n-        local.index() <= self.arg_count\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n-        let is_arg = match ty_context {\n-            TyContext::LocalDecl { local, .. } => self.is_argument_or_return_slot(local),\n-            TyContext::ReturnTy(..) => true,\n-            TyContext::Location(..) => false,\n-        };\n-        debug!(\n-            \"visit_ty(ty={:?}, is_arg={:?}, ty_context={:?})\",\n-            ty,\n-            is_arg,\n-            ty_context\n-        );\n+        debug!(\"visit_ty(ty={:?}, ty_context={:?})\", ty, ty_context);\n \n-        if is_arg {\n-            self.assert_free_regions_are_renumbered(ty);\n-        } else {\n-            *ty = self.renumber_regions(ty_context, ty);\n-        }\n+        *ty = self.renumber_regions(ty_context, ty);\n \n         debug!(\"visit_ty: ty={:?}\", ty);\n     }"}, {"sha": "6cdd77048c998d2b8e8b122802fe953072bb0606", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -46,12 +46,31 @@ mod liveness;\n /// This phase of type-check ought to be infallible -- this is because\n /// the original, HIR-based type-check succeeded. So if any errors\n /// occur here, we will get a `bug!` reported.\n+///\n+/// # Parameters\n+///\n+/// - `infcx` -- inference context to use\n+/// - `body_id` -- body-id of the MIR being checked\n+/// - `param_env` -- parameter environment to use for trait solving\n+/// - `mir` -- MIR to type-check\n+/// - `implicit_region_bound` -- a region which all generic parameters are assumed\n+///   to outlive; should represent the fn body\n+/// - `input_tys` -- fully liberated, but **not** normalized, expected types of the arguments;\n+///   the types of the input parameters found in the MIR itself will be equated with these\n+/// - `output_ty` -- fully liberaetd, but **not** normalized, expected return type;\n+///   the type for the RETURN_PLACE will be equated with this\n+/// - `liveness` -- results of a liveness computation on the MIR; used to create liveness\n+///   constraints for the regions in the types of variables\n+/// - `flow_inits` -- results of a maybe-init dataflow analysis\n+/// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n pub(crate) fn type_check<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n+    input_tys: &[Ty<'tcx>],\n+    output_ty: Ty<'tcx>,\n     liveness: &LivenessResults,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedLvals<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -62,7 +81,16 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         param_env,\n         mir,\n         Some(implicit_region_bound),\n-        &mut |cx| liveness::generate(cx, mir, liveness, flow_inits, move_data),\n+        &mut |cx| {\n+            liveness::generate(cx, mir, liveness, flow_inits, move_data);\n+\n+            // Equate the input and output tys given by the user with\n+            // the ones found in the MIR.\n+            cx.equate_input_or_output(output_ty, mir.local_decls[RETURN_PLACE].ty);\n+            for (&input_ty, local) in input_tys.iter().zip((1..).map(Local::new)) {\n+                cx.equate_input_or_output(input_ty, mir.local_decls[local].ty);\n+            }\n+        },\n     )\n }\n \n@@ -666,6 +694,25 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    fn equate_input_or_output(&mut self, unnormalized_a: Ty<'tcx>, b: Ty<'tcx>) {\n+        let start_position = Location {\n+            block: START_BLOCK,\n+            statement_index: 0,\n+        };\n+        let a = self.normalize(&unnormalized_a, start_position);\n+        if let Err(terr) = self.eq_types(a, b, start_position.at_self()) {\n+            span_mirbug!(\n+                self,\n+                start_position,\n+                \"bad input or output {:?} normalized to {:?} should equal {:?} but got error {:?}\",\n+                unnormalized_a,\n+                a,\n+                b,\n+                terr\n+            );\n+        }\n+    }\n+\n     fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "99beae13bd9e248657e4fccb9a2b14f768a44835", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -69,12 +69,14 @@ pub struct UniversalRegions<'tcx> {\n     /// closure type, but for a top-level function it's the `TyFnDef`.\n     pub defining_ty: Ty<'tcx>,\n \n-    /// The return type of this function, with all regions replaced\n-    /// by their universal `RegionVid` equivalents.\n+    /// The return type of this function, with all regions replaced by\n+    /// their universal `RegionVid` equivalents. This type is **NOT\n+    /// NORMALIZED**.\n     pub output_ty: Ty<'tcx>,\n \n     /// The fully liberated input types of this function, with all\n     /// regions replaced by their universal `RegionVid` equivalents.\n+    /// This type is **NOT NORMALIZED**.\n     pub input_tys: &'tcx [Ty<'tcx>],\n \n     /// Each RBP `('a, GK)` indicates that `GK: 'a` can be assumed to"}, {"sha": "f14979f97339721e5ad895a3cf7342d644882dac", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -39,7 +39,11 @@ fn main() {\n // | '_#2r    | {'_#2r, bb0[0], bb0[1]}\n // | '_#3r    | {'_#3r, bb0[0], bb0[1]}\n // | '_#4r    | {'_#4r, bb0[0], bb0[1]}\n+// | '_#5r    | {'_#1r, bb0[0], bb0[1]}\n+// | '_#6r    | {'_#2r, bb0[0], bb0[1]}\n+// | '_#7r    | {'_#1r, bb0[0], bb0[1]}\n+// | '_#8r    | {'_#3r, bb0[0], bb0[1]}\n // |\n // ...\n-// fn use_x(_1: &'_#1r mut i32, _2: &'_#2r u32, _3: &'_#1r u32, _4: &'_#3r u32) -> bool {\n+// fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n // END rustc.use_x.nll.0.mir"}, {"sha": "31388cf50c5586a9924a89dc2c91c4c426715b92", "filename": "src/test/ui/nll/projection-return.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9824c50edd067fefb2e4fd6f6d1a4fe739a145b/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs?ref=e9824c50edd067fefb2e4fd6f6d1a4fe739a145b", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir\n+// must-compile-successfully\n+\n+#![feature(rustc_attrs)]\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for () {\n+    type Bar = u32;\n+}\n+\n+fn foo() -> <() as Foo>::Bar {\n+    22\n+}\n+\n+fn main() { }\n+"}]}