{"sha": "d4afae943f642be2909c649997f663b384115237", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YWZhZTk0M2Y2NDJiZTI5MDljNjQ5OTk3ZjY2M2IzODQxMTUyMzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T01:59:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:15:16Z"}, "message": "typeck/pat.rs: extract `check_pat_range`.", "tree": {"sha": "9ade41e25b6f5210bb426aafb6111cfef67c82bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ade41e25b6f5210bb426aafb6111cfef67c82bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4afae943f642be2909c649997f663b384115237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4afae943f642be2909c649997f663b384115237", "html_url": "https://github.com/rust-lang/rust/commit/d4afae943f642be2909c649997f663b384115237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4afae943f642be2909c649997f663b384115237/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d891e70b6421e2ef48a64badf3e432059a5c4b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/d891e70b6421e2ef48a64badf3e432059a5c4b96", "html_url": "https://github.com/rust-lang/rust/commit/d891e70b6421e2ef48a64badf3e432059a5c4b96"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "9693ab57bc7deca2ada8e19e5cae68a82c388c72", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 63, "deletions": 50, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d4afae943f642be2909c649997f663b384115237/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4afae943f642be2909c649997f663b384115237/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d4afae943f642be2909c649997f663b384115237", "patch": "@@ -71,57 +71,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_lit(pat.span, lt, expected, discrim_span)\n             }\n             PatKind::Range(ref begin, ref end, _) => {\n-                let lhs_ty = self.check_expr(begin);\n-                let rhs_ty = self.check_expr(end);\n-\n-                // Check that both end-points are of numeric or char type.\n-                let numeric_or_char = |ty: Ty<'_>| {\n-                    ty.is_numeric()\n-                    || ty.is_char()\n-                    || ty.references_error()\n-                };\n-                let lhs_compat = numeric_or_char(lhs_ty);\n-                let rhs_compat = numeric_or_char(rhs_ty);\n-\n-                if !lhs_compat || !rhs_compat {\n-                    let span = if !lhs_compat && !rhs_compat {\n-                        pat.span\n-                    } else if !lhs_compat {\n-                        begin.span\n-                    } else {\n-                        end.span\n-                    };\n-\n-                    let mut err = struct_span_err!(\n-                        tcx.sess,\n-                        span,\n-                        E0029,\n-                        \"only char and numeric types are allowed in range patterns\"\n-                    );\n-                    err.span_label(span, \"ranges require char or numeric types\");\n-                    err.note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)));\n-                    err.note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)));\n-                    if tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\n-                            \"In a match expression, only numbers and characters can be matched \\\n-                             against a range. This is because the compiler checks that the range \\\n-                             is non-empty at compile-time, and is unable to evaluate arbitrary \\\n-                             comparison functions. If you want to capture values of an orderable \\\n-                             type between two end-points, you can use a guard.\"\n-                         );\n-                    }\n-                    err.emit();\n-                    return;\n+                match self.check_pat_range(pat.span, begin, end, expected, discrim_span) {\n+                    None => return,\n+                    Some(ty) => ty,\n                 }\n-\n-                // Now that we know the types can be unified we find the unified type and use\n-                // it to type the entire expression.\n-                let common_type = self.resolve_vars_if_possible(&lhs_ty);\n-\n-                // Subtyping doesn't matter here, as the value is some kind of scalar.\n-                self.demand_eqtype_pat(pat.span, expected, lhs_ty, discrim_span);\n-                self.demand_eqtype_pat(pat.span, expected, rhs_ty, discrim_span);\n-                common_type\n             }\n             PatKind::Binding(ba, var_id, _, ref sub) => {\n                 let bm = if ba == hir::BindingAnnotation::Unannotated {\n@@ -597,6 +550,66 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat_ty\n     }\n \n+    fn check_pat_range(\n+        &self,\n+        span: Span,\n+        begin: &'tcx hir::Expr,\n+        end: &'tcx hir::Expr,\n+        expected: Ty<'tcx>,\n+        discrim_span: Option<Span>,\n+    ) -> Option<Ty<'tcx>> {\n+        let lhs_ty = self.check_expr(begin);\n+        let rhs_ty = self.check_expr(end);\n+\n+        // Check that both end-points are of numeric or char type.\n+        let numeric_or_char = |ty: Ty<'_>| {\n+            ty.is_numeric()\n+            || ty.is_char()\n+            || ty.references_error()\n+        };\n+        let lhs_compat = numeric_or_char(lhs_ty);\n+        let rhs_compat = numeric_or_char(rhs_ty);\n+\n+        if !lhs_compat || !rhs_compat {\n+            let span = if !lhs_compat && !rhs_compat {\n+                span\n+            } else if !lhs_compat {\n+                begin.span\n+            } else {\n+                end.span\n+            };\n+\n+            let mut err = struct_span_err!(\n+                self.tcx.sess,\n+                span,\n+                E0029,\n+                \"only char and numeric types are allowed in range patterns\"\n+            );\n+            err.span_label(span, \"ranges require char or numeric types\");\n+            err.note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)));\n+            err.note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)));\n+            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\n+                    \"In a match expression, only numbers and characters can be matched \\\n+                        against a range. This is because the compiler checks that the range \\\n+                        is non-empty at compile-time, and is unable to evaluate arbitrary \\\n+                        comparison functions. If you want to capture values of an orderable \\\n+                        type between two end-points, you can use a guard.\"\n+                    );\n+            }\n+            err.emit();\n+            return None;\n+        }\n+\n+        // Now that we know the types can be unified we find the unified type and use\n+        // it to type the entire expression.\n+        let common_type = self.resolve_vars_if_possible(&lhs_ty);\n+\n+        // Subtyping doesn't matter here, as the value is some kind of scalar.\n+        self.demand_eqtype_pat(span, expected, lhs_ty, discrim_span);\n+        self.demand_eqtype_pat(span, expected, rhs_ty, discrim_span);\n+        Some(common_type)\n+    }\n \n     fn borrow_pat_suggestion(\n         &self,"}]}