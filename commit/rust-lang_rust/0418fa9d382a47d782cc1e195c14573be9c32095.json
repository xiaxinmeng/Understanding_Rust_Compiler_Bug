{"sha": "0418fa9d382a47d782cc1e195c14573be9c32095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MThmYTlkMzgyYTQ3ZDc4MmNjMWUxOTVjMTQ1NzNiZTljMzIwOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T20:16:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T20:16:09Z"}, "message": "Auto merge of #42362 - estebank:type, r=arielb1\n\nShow trait method signature when impl differs\n\nWhen the trait's span is available, it is already being used, add a\n`note` for the cases where the span isn't available:\n\n<pre>\nerror[E0053]: <b>method `fmt` has an incompatible type for trait</b>\n  --> $DIR/trait_type.rs:17:4\n   |\n17 |    fn fmt(&self, x: &str) -> () { }\n   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n   |\n   = note: expected type `<b>fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error></b>`\n              found type `<b>fn(&MyType, &str)</b>`\n\nerror[E0050]: <b>method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2</b>\n  --> $DIR/trait_type.rs:21:11\n   |\n21 |    fn fmt(&self) -> () { }\n   |           ^^^^^ expected 2 parameters, found 1\n   |\n   = note: `fmt` from trait: `<b>fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error></b>`\n\nerror[E0186]: <b>method `fmt` has a `&self` declaration in the trait, but not in the impl</b>\n  --> $DIR/trait_type.rs:25:4\n   |\n25 |    fn fmt() -> () { }\n   |    ^^^^^^^^^^^^^^^^^^ expected `&self` in impl\n   |\n   = note: `fmt` from trait: `<b>fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error></b>`\n\nerror[E0046]: <b>not all trait items implemented, missing: `fmt`</b>\n  --> $DIR/trait_type.rs:28:1\n   |\n28 | impl std::fmt::Display for MyType4 {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n   |\n   = note: `fmt` from trait: `<b>fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error></b>`\n</code></pre>\n\nFix #28011.", "tree": {"sha": "20337e568c7a68a788142cf3653ea1894c1de5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20337e568c7a68a788142cf3653ea1894c1de5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0418fa9d382a47d782cc1e195c14573be9c32095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0418fa9d382a47d782cc1e195c14573be9c32095", "html_url": "https://github.com/rust-lang/rust/commit/0418fa9d382a47d782cc1e195c14573be9c32095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0418fa9d382a47d782cc1e195c14573be9c32095/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e", "html_url": "https://github.com/rust-lang/rust/commit/9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e"}, {"sha": "e324919ec57954adaa49884e5894bc7d615d413e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e324919ec57954adaa49884e5894bc7d615d413e", "html_url": "https://github.com/rust-lang/rust/commit/e324919ec57954adaa49884e5894bc7d615d413e"}], "stats": {"total": 112, "additions": 97, "deletions": 15}, "files": [{"sha": "653021119aab7d7d86fcd8505e051b608a3fa6a8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -198,6 +198,22 @@ impl AssociatedItem {\n             AssociatedKind::Method => !self.method_has_self_argument,\n         }\n     }\n+\n+    pub fn signature<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> String {\n+        match self.kind {\n+            ty::AssociatedKind::Method => {\n+                // We skip the binder here because the binder would deanonymize all\n+                // late-bound regions, and we don't want method signatures to show up\n+                // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n+                // regions just fine, showing `fn(&MyType)`.\n+                format!(\"{}\", tcx.type_of(self.def_id).fn_sig().skip_binder())\n+            }\n+            ty::AssociatedKind::Type => format!(\"type {};\", self.name.to_string()),\n+            ty::AssociatedKind::Const => {\n+                format!(\"const {}: {:?};\", self.name.to_string(), tcx.type_of(self.def_id))\n+            }\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Copy, RustcEncodable, RustcDecodable)]"}, {"sha": "7a64cdeee65c74028cea750a7073f5d3b0348a06", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -157,6 +157,14 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn note_trait_signature(&mut self, name: String, signature: String) -> &mut Self {\n+        self.highlighted_note(vec![\n+            (format!(\"`{}` from trait: `\", name), Style::NoStyle),\n+            (signature, Style::Highlight),\n+            (\"`\".to_string(), Style::NoStyle)]);\n+        self\n+    }\n+\n     pub fn note(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self"}, {"sha": "8b76431fd2e6519f0b2a48db04a96f1d81556cb5", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -550,6 +550,9 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            format!(\"expected `{}` in impl\", self_descr));\n             if let Some(span) = tcx.hir.span_if_local(trait_m.def_id) {\n                 err.span_label(span, format!(\"`{}` used in trait\", self_descr));\n+            } else {\n+                err.note_trait_signature(trait_m.name.to_string(),\n+                                         trait_m.signature(&tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -697,6 +700,9 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     } else {\n                                         format!(\"{} parameter\", trait_number_args)\n                                     }));\n+        } else {\n+            err.note_trait_signature(trait_m.name.to_string(),\n+                                     trait_m.signature(&tcx));\n         }\n         err.span_label(impl_span,\n                        format!(\"expected {}, found {}\","}, {"sha": "c3bce8048796b761da8a3284d8ca2f20fa6278d0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -1348,18 +1348,6 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let signature = |item: &ty::AssociatedItem| {\n-        match item.kind {\n-            ty::AssociatedKind::Method => {\n-                format!(\"{}\", tcx.type_of(item.def_id).fn_sig().0)\n-            }\n-            ty::AssociatedKind::Type => format!(\"type {};\", item.name.to_string()),\n-            ty::AssociatedKind::Const => {\n-                format!(\"const {}: {:?};\", item.name.to_string(), tcx.type_of(item.def_id))\n-            }\n-        }\n-    };\n-\n     if !missing_items.is_empty() {\n         let mut err = struct_span_err!(tcx.sess, impl_span, E0046,\n             \"not all trait items implemented, missing: `{}`\",\n@@ -1374,9 +1362,8 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(span) = tcx.hir.span_if_local(trait_item.def_id) {\n                 err.span_label(span, format!(\"`{}` from trait\", trait_item.name));\n             } else {\n-                err.note(&format!(\"`{}` from trait: `{}`\",\n-                                  trait_item.name,\n-                                  signature(&trait_item)));\n+                err.note_trait_signature(trait_item.name.to_string(),\n+                                         trait_item.signature(&tcx));\n             }\n         }\n         err.emit();"}, {"sha": "3507dcfbe172a5b261fec805fc25a5c689ccc886", "filename": "src/test/ui/impl-trait/trait_type.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.rs?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyType;\n+struct MyType2;\n+struct MyType3;\n+struct MyType4;\n+\n+impl std::fmt::Display for MyType {\n+   fn fmt(&self, x: &str) -> () { }\n+}\n+\n+impl std::fmt::Display for MyType2 {\n+   fn fmt(&self) -> () { }\n+}\n+\n+impl std::fmt::Display for MyType3 {\n+   fn fmt() -> () { }\n+}\n+\n+impl std::fmt::Display for MyType4 {}\n+\n+fn main() {}"}, {"sha": "cc7a7153a3859098837fd18e067486451cf49451", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0418fa9d382a47d782cc1e195c14573be9c32095/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=0418fa9d382a47d782cc1e195c14573be9c32095", "patch": "@@ -0,0 +1,35 @@\n+error[E0053]: method `fmt` has an incompatible type for trait\n+  --> $DIR/trait_type.rs:17:4\n+   |\n+17 |    fn fmt(&self, x: &str) -> () { }\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected type `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+              found type `fn(&MyType, &str)`\n+\n+error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n+  --> $DIR/trait_type.rs:21:11\n+   |\n+21 |    fn fmt(&self) -> () { }\n+   |           ^^^^^ expected 2 parameters, found 1\n+   |\n+   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+\n+error[E0186]: method `fmt` has a `&self` declaration in the trait, but not in the impl\n+  --> $DIR/trait_type.rs:25:4\n+   |\n+25 |    fn fmt() -> () { }\n+   |    ^^^^^^^^^^^^^^^^^^ expected `&self` in impl\n+   |\n+   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+\n+error[E0046]: not all trait items implemented, missing: `fmt`\n+  --> $DIR/trait_type.rs:28:1\n+   |\n+28 | impl std::fmt::Display for MyType4 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n+   |\n+   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+\n+error: aborting due to previous error(s)\n+"}]}