{"sha": "98e20dac4edabeb0dd695110fdca29a6adc40019", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTIwZGFjNGVkYWJlYjBkZDY5NTExMGZkY2EyOWE2YWRjNDAwMTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-31T02:37:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T02:37:27Z"}, "message": "Merge #2699\n\n2699: Switch impure functional style to pure imperative r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "75d70fd728114cf3bee0bea997c9fa6c518ba3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d70fd728114cf3bee0bea997c9fa6c518ba3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e20dac4edabeb0dd695110fdca29a6adc40019", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCrRnCRBK7hj4Ov3rIwAAdHIIAAAHUehsEVQRsp05WRUWDoxs\nvca+6Lv7hDy2eCq2JjFrsvqDtbTvcsKMKPUbTjzhUnYhtOBsxyqbRnxHRBFyviZX\n1IXHDDlUOoMJfRUq3DmIQmsUThlNbo7mlRzvW/BkHdCVSBdpyrSoXT3ExcZKYDUl\n0/04jk7qN//CtwF29xzP4k/yOF8TXEnjtucxCluW7He9W1E2NssnXHLtkcMnuKfG\npIeybiePha2kjoIHzvZfCY4eOrOI3wfMucwFuzYSM6ErF5qncOZryydOQdQSSMT+\n8RHYo/shtToqe+uBBYNgzpqCeMSb1rBTY2SzxdEK1MjoP4XCUyNDb6H1I4WLjIQ=\n=To53\n-----END PGP SIGNATURE-----\n", "payload": "tree 75d70fd728114cf3bee0bea997c9fa6c518ba3df\nparent 44d6ab2650bce0faac87b87ef279674d6f63f8ec\nparent f984ef26528eca686abbb946b3b363dfe6d74822\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577759847 +0000\ncommitter GitHub <noreply@github.com> 1577759847 +0000\n\nMerge #2699\n\n2699: Switch impure functional style to pure imperative r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e20dac4edabeb0dd695110fdca29a6adc40019", "html_url": "https://github.com/rust-lang/rust/commit/98e20dac4edabeb0dd695110fdca29a6adc40019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e20dac4edabeb0dd695110fdca29a6adc40019/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d6ab2650bce0faac87b87ef279674d6f63f8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d6ab2650bce0faac87b87ef279674d6f63f8ec", "html_url": "https://github.com/rust-lang/rust/commit/44d6ab2650bce0faac87b87ef279674d6f63f8ec"}, {"sha": "f984ef26528eca686abbb946b3b363dfe6d74822", "url": "https://api.github.com/repos/rust-lang/rust/commits/f984ef26528eca686abbb946b3b363dfe6d74822", "html_url": "https://github.com/rust-lang/rust/commit/f984ef26528eca686abbb946b3b363dfe6d74822"}], "stats": {"total": 403, "additions": 182, "deletions": 221}, "files": [{"sha": "f63d1ddceaa3fea02869a6efb64745dc7d79adc1", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=98e20dac4edabeb0dd695110fdca29a6adc40019", "patch": "@@ -1,5 +1,4 @@\n import * as vscode from 'vscode';\n-import * as scopes from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -60,7 +59,6 @@ export class Config {\n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n             if (this.highlightingOn) {\n-                scopes.load();\n                 scopesMapper.load();\n             }\n         }"}, {"sha": "30dd9811c2590852242254e947b332509713ab9a", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=98e20dac4edabeb0dd695110fdca29a6adc40019", "patch": "@@ -65,7 +65,7 @@ export class Ctx {\n     async sendRequestWithRetry<R>(\n         method: string,\n         param: any,\n-        token: vscode.CancellationToken,\n+        token?: vscode.CancellationToken,\n     ): Promise<R> {\n         await this.client.onReady();\n         for (const delay of [2, 4, 6, 8, 10, null]) {"}, {"sha": "5e9cbe0de7612f1015cb8bd076e648e8eebddb49", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 108, "deletions": 107, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=98e20dac4edabeb0dd695110fdca29a6adc40019", "patch": "@@ -3,7 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as seedrandom_ from 'seedrandom';\n const seedrandom = seedrandom_; // https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207\n \n-import * as scopes from './scopes';\n+import { loadThemeColors, TextMateRuleSettings } from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n import { Ctx } from './ctx';\n@@ -47,7 +47,7 @@ export function activateHighlighting(ctx: Ctx) {\n             const params: lc.TextDocumentIdentifier = {\n                 uri: editor.document.uri.toString(),\n             };\n-            const decorations = await ctx.client.sendRequest<Decoration[]>(\n+            const decorations = await ctx.sendRequestWithRetry<Decoration[]>(\n                 'rust-analyzer/decorationsRequest',\n                 params,\n             );\n@@ -62,7 +62,7 @@ interface PublishDecorationsParams {\n     decorations: Decoration[];\n }\n \n-export interface Decoration {\n+interface Decoration {\n     range: lc.Range;\n     tag: string;\n     bindingHash?: string;\n@@ -81,116 +81,17 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n-function createDecorationFromTextmate(\n-    themeStyle: scopes.TextMateRuleSettings,\n-): vscode.TextEditorDecorationType {\n-    const decorationOptions: vscode.DecorationRenderOptions = {};\n-    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n-\n-    if (themeStyle.foreground) {\n-        decorationOptions.color = themeStyle.foreground;\n-    }\n-\n-    if (themeStyle.background) {\n-        decorationOptions.backgroundColor = themeStyle.background;\n-    }\n-\n-    if (themeStyle.fontStyle) {\n-        const parts: string[] = themeStyle.fontStyle.split(' ');\n-        parts.forEach(part => {\n-            switch (part) {\n-                case 'italic':\n-                    decorationOptions.fontStyle = 'italic';\n-                    break;\n-                case 'bold':\n-                    decorationOptions.fontWeight = 'bold';\n-                    break;\n-                case 'underline':\n-                    decorationOptions.textDecoration = 'underline';\n-                    break;\n-                default:\n-                    break;\n-            }\n-        });\n-    }\n-    return vscode.window.createTextEditorDecorationType(decorationOptions);\n-}\n-\n class Highlighter {\n     private ctx: Ctx;\n-\n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    private static initDecorations(): Map<\n-        string,\n-        vscode.TextEditorDecorationType\n-    > {\n-        const decoration = (\n-            tag: string,\n-            textDecoration?: string,\n-        ): [string, vscode.TextEditorDecorationType] => {\n-            const rule = scopesMapper.toRule(tag, scopes.find);\n-\n-            if (rule) {\n-                const decor = createDecorationFromTextmate(rule);\n-                return [tag, decor];\n-            } else {\n-                const fallBackTag = 'ralsp.' + tag;\n-                // console.log(' ');\n-                // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n-                // console.log(scopesMapper.find(tag));\n-                // console.log('Falling back to values defined in: ' + fallBackTag);\n-                // console.log(' ');\n-                const color = new vscode.ThemeColor(fallBackTag);\n-                const decor = vscode.window.createTextEditorDecorationType({\n-                    color,\n-                    textDecoration,\n-                });\n-                return [tag, decor];\n-            }\n-        };\n-\n-        const decorations: Iterable<[\n-            string,\n-            vscode.TextEditorDecorationType,\n-        ]> = [\n-                decoration('comment'),\n-                decoration('string'),\n-                decoration('keyword'),\n-                decoration('keyword.control'),\n-                decoration('keyword.unsafe'),\n-                decoration('function'),\n-                decoration('parameter'),\n-                decoration('constant'),\n-                decoration('type.builtin'),\n-                decoration('type.generic'),\n-                decoration('type.lifetime'),\n-                decoration('type.param'),\n-                decoration('type.self'),\n-                decoration('type'),\n-                decoration('text'),\n-                decoration('attribute'),\n-                decoration('literal'),\n-                decoration('literal.numeric'),\n-                decoration('literal.char'),\n-                decoration('literal.byte'),\n-                decoration('macro'),\n-                decoration('variable'),\n-                decoration('variable.mut', 'underline'),\n-                decoration('field'),\n-                decoration('module'),\n-            ];\n-\n-        return new Map<string, vscode.TextEditorDecorationType>(decorations);\n-    }\n-\n     private decorations: Map<\n         string,\n         vscode.TextEditorDecorationType\n     > | null = null;\n \n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n+    }\n+\n     public removeHighlights() {\n         if (this.decorations == null) {\n             return;\n@@ -210,7 +111,7 @@ class Highlighter {\n         // Note: decoration objects need to be kept around so we can dispose them\n         // if the user disables syntax highlighting\n         if (this.decorations == null) {\n-            this.decorations = Highlighter.initDecorations();\n+            this.decorations = initDecorations();\n         }\n \n         const byTag: Map<string, vscode.Range[]> = new Map();\n@@ -266,3 +167,103 @@ class Highlighter {\n         }\n     }\n }\n+\n+function initDecorations(): Map<\n+    string,\n+    vscode.TextEditorDecorationType\n+> {\n+    const themeColors = loadThemeColors();\n+\n+    const decoration = (\n+        tag: string,\n+        textDecoration?: string,\n+    ): [string, vscode.TextEditorDecorationType] => {\n+        const rule = scopesMapper.toRule(tag, it => themeColors.get(it));\n+\n+        if (rule) {\n+            const decor = createDecorationFromTextmate(rule);\n+            return [tag, decor];\n+        } else {\n+            const fallBackTag = 'ralsp.' + tag;\n+            // console.log(' ');\n+            // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n+            // console.log(scopesMapper.find(tag));\n+            // console.log('Falling back to values defined in: ' + fallBackTag);\n+            // console.log(' ');\n+            const color = new vscode.ThemeColor(fallBackTag);\n+            const decor = vscode.window.createTextEditorDecorationType({\n+                color,\n+                textDecoration,\n+            });\n+            return [tag, decor];\n+        }\n+    };\n+\n+    const decorations: Iterable<[\n+        string,\n+        vscode.TextEditorDecorationType,\n+    ]> = [\n+            decoration('comment'),\n+            decoration('string'),\n+            decoration('keyword'),\n+            decoration('keyword.control'),\n+            decoration('keyword.unsafe'),\n+            decoration('function'),\n+            decoration('parameter'),\n+            decoration('constant'),\n+            decoration('type.builtin'),\n+            decoration('type.generic'),\n+            decoration('type.lifetime'),\n+            decoration('type.param'),\n+            decoration('type.self'),\n+            decoration('type'),\n+            decoration('text'),\n+            decoration('attribute'),\n+            decoration('literal'),\n+            decoration('literal.numeric'),\n+            decoration('literal.char'),\n+            decoration('literal.byte'),\n+            decoration('macro'),\n+            decoration('variable'),\n+            decoration('variable.mut', 'underline'),\n+            decoration('field'),\n+            decoration('module'),\n+        ];\n+\n+    return new Map<string, vscode.TextEditorDecorationType>(decorations);\n+}\n+\n+function createDecorationFromTextmate(\n+    themeStyle: TextMateRuleSettings,\n+): vscode.TextEditorDecorationType {\n+    const decorationOptions: vscode.DecorationRenderOptions = {};\n+    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n+\n+    if (themeStyle.foreground) {\n+        decorationOptions.color = themeStyle.foreground;\n+    }\n+\n+    if (themeStyle.background) {\n+        decorationOptions.backgroundColor = themeStyle.background;\n+    }\n+\n+    if (themeStyle.fontStyle) {\n+        const parts: string[] = themeStyle.fontStyle.split(' ');\n+        parts.forEach(part => {\n+            switch (part) {\n+                case 'italic':\n+                    decorationOptions.fontStyle = 'italic';\n+                    break;\n+                case 'bold':\n+                    decorationOptions.fontWeight = 'bold';\n+                    break;\n+                case 'underline':\n+                    decorationOptions.textDecoration = 'underline';\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+    return vscode.window.createTextEditorDecorationType(decorationOptions);\n+}"}, {"sha": "73fabbf549adb2fa154a27d86d7eafaff70421f9", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 72, "deletions": 110, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=98e20dac4edabeb0dd695110fdca29a6adc40019", "patch": "@@ -3,144 +3,106 @@ import * as jsonc from 'jsonc-parser';\n import * as path from 'path';\n import * as vscode from 'vscode';\n \n-export interface TextMateRule {\n-    scope: string | string[];\n-    settings: TextMateRuleSettings;\n-}\n-\n export interface TextMateRuleSettings {\n-    foreground: string | undefined;\n-    background: string | undefined;\n-    fontStyle: string | undefined;\n-}\n-\n-// Current theme colors\n-const rules = new Map<string, TextMateRuleSettings>();\n-\n-export function find(scope: string): TextMateRuleSettings | undefined {\n-    return rules.get(scope);\n+    foreground?: string;\n+    background?: string;\n+    fontStyle?: string;\n }\n \n // Load all textmate scopes in the currently active theme\n-export function load() {\n-    // Remove any previous theme\n-    rules.clear();\n+export function loadThemeColors(): Map<string, TextMateRuleSettings> {\n     // Find out current color theme\n     const themeName = vscode.workspace\n         .getConfiguration('workbench')\n         .get('colorTheme');\n \n     if (typeof themeName !== 'string') {\n         // console.warn('workbench.colorTheme is', themeName)\n-        return;\n-    }\n-    // Try to load colors from that theme\n-    try {\n-        loadThemeNamed(themeName);\n-    } catch (e) {\n-        // console.warn('failed to load theme', themeName, e)\n+        return new Map();\n     }\n+    return loadThemeNamed(themeName);\n }\n \n-function filterThemeExtensions(extension: vscode.Extension<any>): boolean {\n-    return (\n-        extension.extensionKind === vscode.ExtensionKind.UI &&\n-        extension.packageJSON.contributes &&\n-        extension.packageJSON.contributes.themes\n-    );\n-}\n-\n-// Find current theme on disk\n-function loadThemeNamed(themeName: string) {\n-    const themePaths = vscode.extensions.all\n-        .filter(filterThemeExtensions)\n-        .reduce((list, extension) => {\n-            return extension.packageJSON.contributes.themes\n-                .filter(\n-                    (element: any) =>\n-                        (element.id || element.label) === themeName,\n-                )\n-                .map((element: any) =>\n-                    path.join(extension.extensionPath, element.path),\n-                )\n-                .concat(list);\n-        }, Array<string>());\n-\n-    themePaths.forEach(loadThemeFile);\n-\n-    const tokenColorCustomizations: [any] = [\n-        vscode.workspace\n-            .getConfiguration('editor')\n-            .get('tokenColorCustomizations'),\n-    ];\n-\n-    tokenColorCustomizations\n-        .filter(custom => custom && custom.textMateRules)\n-        .map(custom => custom.textMateRules)\n-        .forEach(loadColors);\n-}\n+function loadThemeNamed(themeName: string): Map<string, TextMateRuleSettings> {\n+    function isTheme(extension: vscode.Extension<any>): boolean {\n+        return (\n+            extension.extensionKind === vscode.ExtensionKind.UI &&\n+            extension.packageJSON.contributes &&\n+            extension.packageJSON.contributes.themes\n+        );\n+    }\n \n-function loadThemeFile(themePath: string) {\n-    const themeContent = [themePath]\n-        .filter(isFile)\n-        .map(readFileText)\n-        .map(parseJSON)\n-        .filter(theme => theme);\n+    let themePaths = vscode.extensions.all\n+        .filter(isTheme)\n+        .flatMap(ext => {\n+            return ext.packageJSON.contributes.themes\n+                .filter((it: any) => (it.id || it.label) === themeName)\n+                .map((it: any) => path.join(ext.extensionPath, it.path));\n+        })\n+\n+    const res = new Map();\n+    for (const themePath of themePaths) {\n+        mergeInto(res, loadThemeFile(themePath))\n+    }\n \n-    themeContent\n-        .filter(theme => theme.tokenColors)\n-        .map(theme => theme.tokenColors)\n-        .forEach(loadColors);\n+    const customizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n+    mergeInto(res, loadColors(customizations?.textMateRules ?? []))\n \n-    themeContent\n-        .filter(theme => theme.include)\n-        .map(theme => path.join(path.dirname(themePath), theme.include))\n-        .forEach(loadThemeFile);\n+    return res;\n }\n \n-function mergeRuleSettings(\n-    defaultSetting: TextMateRuleSettings | undefined,\n-    override: TextMateRuleSettings,\n-): TextMateRuleSettings {\n-    if (defaultSetting === undefined) {\n-        return override;\n+function loadThemeFile(themePath: string): Map<string, TextMateRuleSettings> {\n+    let text;\n+    try {\n+        text = fs.readFileSync(themePath, 'utf8')\n+    } catch {\n+        return new Map();\n+    }\n+    const obj = jsonc.parse(text);\n+    const tokenColors = obj?.tokenColors ?? [];\n+    const res = loadColors(tokenColors);\n+\n+    for (const include in obj?.include ?? []) {\n+        const includePath = path.join(path.dirname(themePath), include);\n+        const tmp = loadThemeFile(includePath);\n+        mergeInto(res, tmp);\n     }\n-    const mergedRule = defaultSetting;\n-\n-    mergedRule.background = override.background || defaultSetting.background;\n-    mergedRule.foreground = override.foreground || defaultSetting.foreground;\n-    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n \n-    return mergedRule;\n+    return res;\n }\n \n-function updateRules(\n-    scope: string,\n-    updatedSettings: TextMateRuleSettings,\n-): void {\n-    [rules.get(scope)]\n-        .map(settings => mergeRuleSettings(settings, updatedSettings))\n-        .forEach(settings => rules.set(scope, settings));\n+interface TextMateRule {\n+    scope: string | string[];\n+    settings: TextMateRuleSettings;\n }\n \n-function loadColors(textMateRules: TextMateRule[]): void {\n-    textMateRules.forEach(rule => {\n-        if (typeof rule.scope === 'string') {\n-            updateRules(rule.scope, rule.settings);\n-        } else if (rule.scope instanceof Array) {\n-            rule.scope.forEach(scope => updateRules(scope, rule.settings));\n+function loadColors(textMateRules: TextMateRule[]): Map<string, TextMateRuleSettings> {\n+    const res = new Map();\n+    for (const rule of textMateRules) {\n+        const scopes = typeof rule.scope === 'string'\n+            ? [rule.scope]\n+            : rule.scope;\n+        for (const scope of scopes) {\n+            res.set(scope, rule.settings)\n         }\n-    });\n-}\n-\n-function isFile(filePath: string): boolean {\n-    return [filePath].map(fs.statSync).every(stat => stat.isFile());\n+    }\n+    return res\n }\n \n-function readFileText(filePath: string): string {\n-    return fs.readFileSync(filePath, 'utf8');\n+function mergeRuleSettings(\n+    defaultSetting: TextMateRuleSettings | undefined,\n+    override: TextMateRuleSettings,\n+): TextMateRuleSettings {\n+    return {\n+        foreground: defaultSetting?.foreground ?? override.foreground,\n+        background: defaultSetting?.background ?? override.background,\n+        fontStyle: defaultSetting?.fontStyle ?? override.fontStyle,\n+    }\n }\n \n-function parseJSON(content: string): any {\n-    return jsonc.parse(content);\n+function mergeInto(dst: Map<string, TextMateRuleSettings>, addition: Map<string, TextMateRuleSettings>) {\n+    addition.forEach((value, key) => {\n+        const merged = mergeRuleSettings(dst.get(key), value)\n+        dst.set(key, merged)\n+    })\n }"}, {"sha": "e60eb8e5e5b74d5601a232cc7767a435946871b6", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/98e20dac4edabeb0dd695110fdca29a6adc40019/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=98e20dac4edabeb0dd695110fdca29a6adc40019", "patch": "@@ -4,7 +4,7 @@\n         \"target\": \"es2018\",\n         \"outDir\": \"out\",\n         \"lib\": [\n-            \"es2018\"\n+            \"es2019\"\n         ],\n         \"sourceMap\": true,\n         \"rootDir\": \"src\","}]}