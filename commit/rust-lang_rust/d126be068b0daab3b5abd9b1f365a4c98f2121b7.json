{"sha": "d126be068b0daab3b5abd9b1f365a4c98f2121b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjZiZTA2OGIwZGFhYjNiNWFiZDliMWYzNjVhNGM5OGYyMTIxYjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-30T17:55:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:20Z"}, "message": "librustpkg: Fix diagnostic invocation syntax in librustdoc, librusti, and librustpkg.", "tree": {"sha": "cac9e30553300c5b867e5864e8c289e09e0f0f24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac9e30553300c5b867e5864e8c289e09e0f0f24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d126be068b0daab3b5abd9b1f365a4c98f2121b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d126be068b0daab3b5abd9b1f365a4c98f2121b7", "html_url": "https://github.com/rust-lang/rust/commit/d126be068b0daab3b5abd9b1f365a4c98f2121b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d126be068b0daab3b5abd9b1f365a4c98f2121b7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecbd75843a2187027d09649c9046189d1d4a446", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecbd75843a2187027d09649c9046189d1d4a446", "html_url": "https://github.com/rust-lang/rust/commit/6ecbd75843a2187027d09649c9046189d1d4a446"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "8a7bb1f934615ba4f10e5e174ea24645c5b32627", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d126be068b0daab3b5abd9b1f365a4c98f2121b7", "patch": "@@ -11,9 +11,10 @@\n use rustc;\n use rustc::{driver, middle};\n \n-use syntax;\n-use syntax::parse;\n use syntax::ast;\n+use syntax::diagnostic;\n+use syntax::parse;\n+use syntax;\n \n use std::os;\n use std::local_data;\n@@ -48,9 +49,11 @@ fn get_ast_and_resolve(cpath: &Path, libs: ~[Path]) -> DocContext {\n     let span_diagnostic_handler =\n         syntax::diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n \n-    let sess = driver::driver::build_session_(sessopts, parsesess.cm,\n-                                                  syntax::diagnostic::emit,\n-                                                  span_diagnostic_handler);\n+    let sess = driver::driver::build_session_(sessopts,\n+                                              parsesess.cm,\n+                                              @diagnostic::DefaultEmitter as\n+                                                @diagnostic::Emitter,\n+                                              span_diagnostic_handler);\n \n     let mut cfg = build_configuration(sess);\n     cfg.push(@dummy_spanned(ast::MetaWord(@\"stage2\")));"}, {"sha": "0d024812c213ed69621f0f192a1b86300896dbdf", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=d126be068b0daab3b5abd9b1f365a4c98f2121b7", "patch": "@@ -76,8 +76,9 @@ use extra::rl;\n \n use rustc::driver::{driver, session};\n use rustc::back::link::jit;\n-use syntax::{ast, diagnostic};\n+use syntax::{ast, codemap, diagnostic};\n use syntax::ast_util::*;\n+use syntax::diagnostic::Emitter;\n use syntax::parse::token;\n use syntax::print::pprust;\n \n@@ -107,6 +108,28 @@ enum CmdAction {\n     action_run_line(~str),\n }\n \n+struct EncodableWarningEmitter;\n+\n+impl diagnostic::Emitter for EncodableWarningEmitter {\n+    fn emit(&self,\n+            cm: Option<(@codemap::CodeMap, codemap::Span)>,\n+            msg: &str,\n+            lvl: diagnostic::level) {\n+        diagnostic::DefaultEmitter.emit(cm, msg, lvl);\n+        if msg.contains(\"failed to find an implementation of trait\") &&\n+           msg.contains(\"extra::serialize::Encodable\") {\n+            diagnostic::DefaultEmitter.emit(cm,\n+                                            \"Currrently rusti serializes \\\n+                                             bound locals between different \\\n+                                             lines of input. This means that \\\n+                                             all values of local variables \\\n+                                             need to be encodable, and this \\\n+                                             type isn't encodable\",\n+                                            diagnostic::note);\n+        }\n+    }\n+}\n+\n /// Run an input string in a Repl, returning the new Repl.\n fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n        input: ~str) -> (~Program, Option<~jit::Engine>)\n@@ -124,18 +147,9 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     // extra helpful information if the error crops up. Otherwise people are\n     // bound to be very confused when they find out code is running that they\n     // never typed in...\n-    let sess = driver::build_session(options, |cm, msg, lvl| {\n-        diagnostic::emit(cm, msg, lvl);\n-        if msg.contains(\"failed to find an implementation of trait\") &&\n-           msg.contains(\"extra::serialize::Encodable\") {\n-            diagnostic::emit(cm,\n-                             \"Currrently rusti serializes bound locals between \\\n-                              different lines of input. This means that all \\\n-                              values of local variables need to be encodable, \\\n-                              and this type isn't encodable\",\n-                             diagnostic::note);\n-        }\n-    });\n+    let sess = driver::build_session(options,\n+                                     @EncodableWarningEmitter as\n+                                        @diagnostic::Emitter);\n     let intr = token::get_ident_interner();\n \n     //\n@@ -243,7 +257,9 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     let input = driver::str_input(code.to_managed());\n     let cfg = driver::build_configuration(sess);\n     let outputs = driver::build_output_filenames(&input, &None, &None, [], sess);\n-    let sess = driver::build_session(options, diagnostic::emit);\n+    let sess = driver::build_session(options,\n+                                     @diagnostic::DefaultEmitter as\n+                                        @diagnostic::Emitter);\n \n     let crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n     let expanded_crate = driver::phase_2_configure_and_expand(sess, cfg, crate);\n@@ -305,7 +321,9 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n             .. (*session::basic_options()).clone()\n         };\n         let input = driver::file_input(src_path.clone());\n-        let sess = driver::build_session(options, diagnostic::emit);\n+        let sess = driver::build_session(options,\n+                                         @diagnostic::DefaultEmitter as\n+                                            @diagnostic::Emitter);\n         *sess.building_library = true;\n         let cfg = driver::build_configuration(sess);\n         let outputs = driver::build_output_filenames("}, {"sha": "25d0802b9ad5148e261ab4cd36901ddd4d235e35", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=d126be068b0daab3b5abd9b1f365a4c98f2121b7", "patch": "@@ -110,7 +110,9 @@ impl<'self> PkgScript<'self> {\n             .. (*session::basic_options()).clone()\n         };\n         let input = driver::file_input(script.clone());\n-        let sess = driver::build_session(options, diagnostic::emit);\n+        let sess = driver::build_session(options,\n+                                         @diagnostic::DefaultEmitter as\n+                                            @diagnostic::Emitter);\n         let cfg = driver::build_configuration(sess);\n         let crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n         let crate = driver::phase_2_configure_and_expand(sess, cfg.clone(), crate);"}, {"sha": "8c6268e7d231feb91f66915609723a7d6a594769", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d126be068b0daab3b5abd9b1f365a4c98f2121b7/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=d126be068b0daab3b5abd9b1f365a4c98f2121b7", "patch": "@@ -232,7 +232,10 @@ pub fn compile_input(context: &BuildContext,\n         maybe_sysroot: Some(sysroot_to_use),\n         addl_lib_search_paths: @mut (~[]),\n         output_type: output_type,\n-        .. (*driver::build_session_options(binary, &matches, diagnostic::emit)).clone()\n+        .. (*driver::build_session_options(binary,\n+                                           &matches,\n+                                           @diagnostic::DefaultEmitter as\n+                                            @diagnostic::Emitter)).clone()\n     };\n \n     let addl_lib_search_paths = @mut options.addl_lib_search_paths;\n@@ -247,7 +250,9 @@ pub fn compile_input(context: &BuildContext,\n         }\n     }\n \n-    let sess = driver::build_session(options, diagnostic::emit);\n+    let sess = driver::build_session(options,\n+                                     @diagnostic::DefaultEmitter as\n+                                        @diagnostic::Emitter);\n \n     // Infer dependencies that rustpkg needs to build, by scanning for\n     // `extern mod` directives."}]}