{"sha": "cc2924068f017af5232fbc215406707dc9b50035", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjkyNDA2OGYwMTdhZjUyMzJmYmMyMTU0MDY3MDdkYzliNTAwMzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T05:01:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:01Z"}, "message": "Replace various ints with ast::crate_nums", "tree": {"sha": "9392f704e2a4f8a8ee4027379aff689459696982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9392f704e2a4f8a8ee4027379aff689459696982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2924068f017af5232fbc215406707dc9b50035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2924068f017af5232fbc215406707dc9b50035", "html_url": "https://github.com/rust-lang/rust/commit/cc2924068f017af5232fbc215406707dc9b50035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2924068f017af5232fbc215406707dc9b50035/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b766029cf6f7dd0e624881281a90b4d43244f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b766029cf6f7dd0e624881281a90b4d43244f8", "html_url": "https://github.com/rust-lang/rust/commit/29b766029cf6f7dd0e624881281a90b4d43244f8"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "d9d48914c07d50fc0f3a606c5ab6ace29086ef69", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=cc2924068f017af5232fbc215406707dc9b50035", "patch": "@@ -48,7 +48,7 @@ type env =\n     @rec(session::session sess,\n          @hashmap[str, int] crate_cache,\n          vec[str] library_search_paths,\n-         mutable int next_crate_num);\n+         mutable ast::crate_num next_crate_num);\n \n fn visit_view_item(env e, &@ast::view_item i) {\n     alt (i.node) {\n@@ -210,7 +210,7 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n     ret option::none[vec[u8]];\n }\n \n-fn load_library_crate(&session::session sess, span span, int cnum,\n+fn load_library_crate(&session::session sess, span span, ast::crate_num cnum,\n                       &ast::ident ident, &(@ast::meta_item)[] metas,\n                       &vec[str] library_search_paths) {\n     alt (find_library_crate(sess, ident, metas, library_search_paths)) {"}, {"sha": "1ddb378dab352f38c22288c62d528aa00bf68aea", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=cc2924068f017af5232fbc215406707dc9b50035", "patch": "@@ -11,7 +11,7 @@ type crate_metadata = rec(str name, vec[u8] data);\n // Map from node_id's of local use statements to crate numbers\n type use_crate_map = map::hashmap[ast::node_id, ast::crate_num];\n \n-type cstore = @rec(map::hashmap[int, crate_metadata] metas,\n+type cstore = @rec(map::hashmap[ast::crate_num, crate_metadata] metas,\n                    use_crate_map use_crate_map,\n                    mutable vec[str] used_crate_files,\n                    mutable vec[str] used_libraries,\n@@ -27,15 +27,15 @@ fn mk_cstore() -> cstore {\n              mutable used_link_args = []);\n }\n \n-fn get_crate_data(&cstore cstore, int cnum) -> crate_metadata {\n+fn get_crate_data(&cstore cstore, ast::crate_num cnum) -> crate_metadata {\n     ret cstore.metas.get(cnum);\n }\n \n-fn set_crate_data(&cstore cstore, int cnum, &crate_metadata data) {\n+fn set_crate_data(&cstore cstore, ast::crate_num cnum, &crate_metadata data) {\n     cstore.metas.insert(cnum, data);\n }\n \n-fn have_crate_data(&cstore cstore, int cnum) -> bool {\n+fn have_crate_data(&cstore cstore, ast::crate_num cnum) -> bool {\n     ret cstore.metas.contains_key(cnum);\n }\n \n@@ -72,7 +72,8 @@ fn get_used_link_args(&cstore cstore) -> vec[str] {\n     ret cstore.used_link_args;\n }\n \n-fn add_use_stmt_cnum(&cstore cstore, ast::node_id use_id, int cnum) {\n+fn add_use_stmt_cnum(&cstore cstore, ast::node_id use_id,\n+                     ast::crate_num cnum) {\n     cstore.use_crate_map.insert(use_id, cnum);\n }\n "}, {"sha": "91e97c8d8351e6b474e96b0a85e38eb9cafca263", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2924068f017af5232fbc215406707dc9b50035/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=cc2924068f017af5232fbc215406707dc9b50035", "patch": "@@ -82,8 +82,9 @@ fn variant_tag_id(&ebml::doc d) -> ast::def_id {\n     ret parse_def_id(ebml::doc_data(tagdoc));\n }\n \n-fn item_type(&ebml::doc item, int this_cnum, ty::ctxt tcx) -> ty::t {\n-    fn parse_external_def_id(int this_cnum, str s) -> ast::def_id {\n+fn item_type(&ebml::doc item, ast::crate_num this_cnum,\n+             ty::ctxt tcx) -> ty::t {\n+    fn parse_external_def_id(ast::crate_num this_cnum, str s) -> ast::def_id {\n         // FIXME: This is completely wrong when linking against a crate\n         // that, in turn, links against another crate. We need a mapping\n         // from crate ID to crate \"meta\" attributes as part of the crate\n@@ -107,7 +108,8 @@ fn item_ty_param_count(&ebml::doc item) -> uint {\n     ret ty_param_count;\n }\n \n-fn tag_variant_ids(&ebml::doc item, int this_cnum) -> vec[ast::def_id] {\n+fn tag_variant_ids(&ebml::doc item,\n+                   ast::crate_num this_cnum) -> vec[ast::def_id] {\n     let vec[ast::def_id] ids = [];\n     auto v = tag_items_data_item_variant;\n     for each (ebml::doc p in ebml::tagged_docs(item, v)) {\n@@ -136,15 +138,16 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n }\n \n // Crate metadata queries\n-fn lookup_defs(session::session sess, int cnum, vec[ast::ident] path) ->\n-   vec[ast::def] {\n+fn lookup_defs(session::session sess, ast::crate_num cnum,\n+               vec[ast::ident] path) -> vec[ast::def] {\n     auto data = cstore::get_crate_data(sess.get_cstore(), cnum).data;\n     ret vec::map(bind lookup_def(cnum, data, _), resolve_path(path, data));\n }\n \n \n // FIXME doesn't yet handle re-exported externals\n-fn lookup_def(int cnum, vec[u8] data, &ast::def_id did_) -> ast::def {\n+fn lookup_def(ast::crate_num cnum, vec[u8] data,\n+              &ast::def_id did_) -> ast::def {\n     auto item = lookup_item(did_._1, data);\n     auto kind_ch = item_kind(item);\n     auto did = tup(cnum, did_._1);"}]}