{"sha": "d26659d61153922fdd44485b409747566661a674", "node_id": "C_kwDOAAsO6NoAKGQyNjY1OWQ2MTE1MzkyMmZkZDQ0NDg1YjQwOTc0NzU2NjY2MWE2NzQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-18T09:41:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-18T09:43:40Z"}, "message": "clarify that realloc refreshes pointer provenance even when the allocation remains in-place", "tree": {"sha": "2d4e452165a0591a9d533c17bf34273a973e140d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d4e452165a0591a9d533c17bf34273a973e140d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26659d61153922fdd44485b409747566661a674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26659d61153922fdd44485b409747566661a674", "html_url": "https://github.com/rust-lang/rust/commit/d26659d61153922fdd44485b409747566661a674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26659d61153922fdd44485b409747566661a674/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83356b78c4ff3e7d84e977aa6143793545967301", "url": "https://api.github.com/repos/rust-lang/rust/commits/83356b78c4ff3e7d84e977aa6143793545967301", "html_url": "https://github.com/rust-lang/rust/commit/83356b78c4ff3e7d84e977aa6143793545967301"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "1d80b8bf9ec761ef815188c91b12eec841118b5b", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d26659d61153922fdd44485b409747566661a674/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26659d61153922fdd44485b409747566661a674/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=d26659d61153922fdd44485b409747566661a674", "patch": "@@ -208,9 +208,11 @@ pub unsafe trait GlobalAlloc {\n     ///\n     /// If this returns a non-null pointer, then ownership of the memory block\n     /// referenced by `ptr` has been transferred to this allocator.\n-    /// The memory may or may not have been deallocated, and should be\n-    /// considered unusable. The new memory block is allocated with `layout`,\n-    /// but with the `size` updated to `new_size`. This new layout should be\n+    /// Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation remained in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n+    /// The new memory block is allocated with `layout`,\n+    /// but with the `size` updated to `new_size`. This new layout must be\n     /// used when deallocating the new memory block with `dealloc`. The range\n     /// `0..min(layout.size(), new_size)` of the new memory block is\n     /// guaranteed to have the same values as the original block."}, {"sha": "a6082455fac8d1d6f29b1fa029502dab87914060", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d26659d61153922fdd44485b409747566661a674/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26659d61153922fdd44485b409747566661a674/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=d26659d61153922fdd44485b409747566661a674", "patch": "@@ -169,8 +169,9 @@ pub unsafe trait Allocator {\n     /// this, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n-    /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable.\n+    /// transferred to this allocator. Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation was grown in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n@@ -295,8 +296,9 @@ pub unsafe trait Allocator {\n     /// this, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n-    /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable.\n+    /// transferred to this allocator. Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation was shrunk in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered."}]}