{"sha": "76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YTA0ZGQzZjhiMjUwMGQ5ZTUyNGRjYTEyMjgxNGZkNWEzZTI1ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T08:20:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T08:20:19Z"}, "message": "Auto merge of #84644 - JohnTitor:rollup-nzq9rjz, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #84529 (Improve coverage spans for chained function calls)\n - #84616 (Fix empty dom toggle)\n - #84622 (Make traits with GATs not object safe)\n - #84624 (Make sentence in env::args_os' docs plain and simple)\n - #84642 (Stabilize vec_extend_from_within)\n\nFailed merges:\n\n - #84636 (rustdoc: change aliases attribute to data-aliases)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "368723e31133e7227bffb7e175ff204730d01eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368723e31133e7227bffb7e175ff204730d01eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "html_url": "https://github.com/rust-lang/rust/commit/76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855c2d130fb70da1643cf8f696c7aad7537aef34", "url": "https://api.github.com/repos/rust-lang/rust/commits/855c2d130fb70da1643cf8f696c7aad7537aef34", "html_url": "https://github.com/rust-lang/rust/commit/855c2d130fb70da1643cf8f696c7aad7537aef34"}, {"sha": "7ebe5b9e4d3edae756aa50e72d61ce88da5b773c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebe5b9e4d3edae756aa50e72d61ce88da5b773c", "html_url": "https://github.com/rust-lang/rust/commit/7ebe5b9e4d3edae756aa50e72d61ce88da5b773c"}], "stats": {"total": 635, "additions": 499, "deletions": 136}, "files": [{"sha": "c9b73c682098b6fd728e8c388294de4774658beb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -670,6 +670,9 @@ pub enum ObjectSafetyViolation {\n \n     /// Associated const.\n     AssocConst(Symbol, Span),\n+\n+    /// GAT\n+    GAT(Symbol, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -715,6 +718,9 @@ impl ObjectSafetyViolation {\n                 format!(\"it contains associated `const` `{}`\", name).into()\n             }\n             ObjectSafetyViolation::AssocConst(..) => \"it contains this associated `const`\".into(),\n+            ObjectSafetyViolation::GAT(name, _) => {\n+                format!(\"it contains the generic associated type `{}`\", name).into()\n+            }\n         }\n     }\n \n@@ -773,6 +779,7 @@ impl ObjectSafetyViolation {\n                 );\n             }\n             ObjectSafetyViolation::AssocConst(name, _)\n+            | ObjectSafetyViolation::GAT(name, _)\n             | ObjectSafetyViolation::Method(name, ..) => {\n                 err.help(&format!(\"consider moving `{}` to another trait\", name));\n             }\n@@ -786,6 +793,7 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf(spans)\n             | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n+            | ObjectSafetyViolation::GAT(_, span)\n             | ObjectSafetyViolation::Method(_, _, span)\n                 if *span != DUMMY_SP =>\n             {"}, {"sha": "2041109eb385fb586f593baa1070e10254b574d2", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -717,11 +717,21 @@ pub(super) fn filtered_terminator_span(\n         | TerminatorKind::FalseEdge { .. }\n         | TerminatorKind::Goto { .. } => None,\n \n+        // Call `func` operand can have a more specific span when part of a chain of calls\n+        | TerminatorKind::Call { ref func, .. } => {\n+            let mut span = terminator.source_info.span;\n+            if let mir::Operand::Constant(box constant) = func {\n+                if constant.span.lo() > span.lo() {\n+                    span = span.with_lo(constant.span.lo());\n+                }\n+            }\n+            Some(function_source_span(span, body_span))\n+        }\n+\n         // Retain spans from all other terminators\n         TerminatorKind::Resume\n         | TerminatorKind::Abort\n         | TerminatorKind::Return\n-        | TerminatorKind::Call { .. }\n         | TerminatorKind::Yield { .. }\n         | TerminatorKind::GeneratorDrop\n         | TerminatorKind::FalseUnwind { .. }"}, {"sha": "d5e1bd3f9ea2eec0cdb652acc564b69c047f8c4a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -132,6 +132,14 @@ fn object_safety_violations_for_trait(\n             .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)),\n     );\n \n+    violations.extend(\n+        tcx.associated_items(trait_def_id)\n+            .in_definition_order()\n+            .filter(|item| item.kind == ty::AssocKind::Type)\n+            .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+            .map(|item| ObjectSafetyViolation::GAT(item.ident.name, item.ident.span)),\n+    );\n+\n     debug!(\n         \"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n         trait_def_id, violations"}, {"sha": "e338a21b60308d43748a5a764cc92f592e33b72d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -462,12 +462,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         for assoc_type in assoc_types {\n             if !tcx.generics_of(assoc_type).params.is_empty() {\n-                // FIXME(generic_associated_types) generate placeholders to\n-                // extend the trait substs.\n-                tcx.sess.span_fatal(\n+                tcx.sess.delay_span_bug(\n                     obligation.cause.span,\n-                    \"generic associated types in trait objects are not supported yet\",\n+                    \"GATs in trait object shouldn't have been considered\",\n                 );\n+                return Err(SelectionError::Unimplemented);\n             }\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things."}, {"sha": "15308a4469bf059dda2f06ad3e23d89f25800b68", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -76,7 +76,6 @@\n #![cfg_attr(test, feature(test))]\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(allocator_api)]\n-#![feature(vec_extend_from_within)]\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_windows)]"}, {"sha": "85c9446689e6719e4430f1e09c31d86733b7b5d7", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -2124,8 +2124,6 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     /// ## Examples\n     ///\n     /// ```\n-    /// #![feature(vec_extend_from_within)]\n-    ///\n     /// let mut vec = vec![0, 1, 2, 3, 4];\n     ///\n     /// vec.extend_from_within(2..);\n@@ -2137,7 +2135,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     /// vec.extend_from_within(4..8);\n     /// assert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n     /// ```\n-    #[unstable(feature = \"vec_extend_from_within\", issue = \"81656\")]\n+    #[stable(feature = \"vec_extend_from_within\", since = \"1.53.0\")]\n     pub fn extend_from_within<R>(&mut self, src: R)\n     where\n         R: RangeBounds<usize>,"}, {"sha": "25a83a0b01438ba52fcb077f87a757d81d4754a7", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -20,7 +20,6 @@\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n-#![feature(vec_extend_from_within)]\n #![feature(vec_spare_capacity)]\n #![feature(string_remove_matches)]\n "}, {"sha": "d20bb5858410129201362d5dcf1ff1a8bebc9bda", "filename": "library/std/src/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -752,7 +752,7 @@ pub fn args() -> Args {\n /// does on macOS and Windows.\n ///\n /// Note that the returned iterator will not check if the arguments to the\n-/// process are valid Unicode. To ensure UTF-8 validity,\n+/// process are valid Unicode. If you want to panic on invalid UTF-8,\n /// use the [`args`] function instead.\n ///\n /// # Examples"}, {"sha": "45412f55c1572df8383c9180031064eaf0e7aa40", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -82,6 +82,10 @@ impl Buffer {\n         self.buffer.push_str(s);\n     }\n \n+    crate fn push_buffer(&mut self, other: Buffer) {\n+        self.buffer.push_str(&other.buffer);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "518dbc6eeb3b9406e357cda5a2cf5dc90a1440c1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 108, "deletions": 97, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -1281,99 +1281,6 @@ fn render_impl(\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n     let mut close_tags = String::new();\n \n-    if render_mode == RenderMode::Normal {\n-        let id = cx.derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => {\n-                if is_on_foreign_type {\n-                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n-                } else {\n-                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n-                }\n-            }\n-            None => \"impl\".to_string(),\n-        });\n-        let aliases = if aliases.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n-        };\n-        if let Some(use_absolute) = use_absolute {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">\",\n-                id, aliases\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n-            if show_def_docs {\n-                for it in &i.inner_impl().items {\n-                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n-                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &[],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                            cx,\n-                        );\n-                        w.write_str(\";</span>\");\n-                    }\n-                }\n-            }\n-            w.write_str(\"</code>\");\n-        } else {\n-            write!(\n-                w,\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\\\n-                     <summary>\\\n-                         <h3 id=\\\"{}\\\" class=\\\"impl\\\"{}>\\\n-                             <code class=\\\"in-band\\\">{}</code>\",\n-                id,\n-                aliases,\n-                i.inner_impl().print(false, cx)\n-            );\n-            close_tags.insert_str(0, \"</details>\");\n-        }\n-        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        render_stability_since_raw(\n-            w,\n-            i.impl_item.stable_since(tcx).as_deref(),\n-            i.impl_item.const_stable_since(tcx).as_deref(),\n-            outer_version,\n-            outer_const_version,\n-        );\n-        write_srclink(cx, &i.impl_item, w);\n-        w.write_str(\"</h3></summary>\");\n-\n-        if trait_.is_some() {\n-            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n-            }\n-        }\n-\n-        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            let mut ids = cx.id_map.borrow_mut();\n-            write!(\n-                w,\n-                \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground\n-                )\n-                .into_string()\n-            );\n-        }\n-    }\n-\n     fn doc_impl_item(\n         w: &mut Buffer,\n         cx: &Context<'_>,\n@@ -1549,11 +1456,10 @@ fn render_impl(\n         }\n     }\n \n-    w.write_str(\"<div class=\\\"impl-items\\\">\");\n-    close_tags.insert_str(0, \"</div>\");\n+    let mut impl_items = Buffer::empty_from(w);\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n-            w,\n+            &mut impl_items,\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n@@ -1609,7 +1515,7 @@ fn render_impl(\n     if show_default_items {\n         if let Some(t) = trait_ {\n             render_default_items(\n-                w,\n+                &mut impl_items,\n                 cx,\n                 &t.trait_,\n                 &i.inner_impl(),\n@@ -1621,6 +1527,111 @@ fn render_impl(\n             );\n         }\n     }\n+    let details_str = if impl_items.is_empty() {\n+        \"\"\n+    } else {\n+        \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n+    };\n+    if render_mode == RenderMode::Normal {\n+        let id = cx.derive_id(match i.inner_impl().trait_ {\n+            Some(ref t) => {\n+                if is_on_foreign_type {\n+                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n+                } else {\n+                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n+                }\n+            }\n+            None => \"impl\".to_string(),\n+        });\n+        let aliases = if aliases.is_empty() {\n+            String::new()\n+        } else {\n+            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n+        };\n+        if let Some(use_absolute) = use_absolute {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n+                details_str, id, aliases\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+            if show_def_docs {\n+                for it in &i.inner_impl().items {\n+                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n+                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n+                        assoc_type(\n+                            w,\n+                            it,\n+                            &[],\n+                            Some(&tydef.type_),\n+                            AssocItemLink::Anchor(None),\n+                            \"\",\n+                            cx,\n+                        );\n+                        w.write_str(\";</span>\");\n+                    }\n+                }\n+            }\n+            w.write_str(\"</code>\");\n+        } else {\n+            write!(\n+                w,\n+                \"{}<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n+                details_str,\n+                id,\n+                aliases,\n+                i.inner_impl().print(false, cx)\n+            );\n+            if !impl_items.is_empty() {\n+                close_tags.insert_str(0, \"</details>\");\n+            }\n+        }\n+        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+        render_stability_since_raw(\n+            w,\n+            i.impl_item.stable_since(tcx).as_deref(),\n+            i.impl_item.const_stable_since(tcx).as_deref(),\n+            outer_version,\n+            outer_const_version,\n+        );\n+        write_srclink(cx, &i.impl_item, w);\n+        if impl_items.is_empty() {\n+            w.write_str(\"</h3>\");\n+        } else {\n+            w.write_str(\"</h3></summary>\");\n+        }\n+\n+        if trait_.is_some() {\n+            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+            }\n+        }\n+\n+        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n+            let mut ids = cx.id_map.borrow_mut();\n+            write!(\n+                w,\n+                \"<div class=\\\"docblock\\\">{}</div>\",\n+                Markdown(\n+                    &*dox,\n+                    &i.impl_item.links(cx),\n+                    &mut ids,\n+                    cx.shared.codes,\n+                    cx.shared.edition(),\n+                    &cx.shared.playground\n+                )\n+                .into_string()\n+            );\n+        }\n+    }\n+    if !impl_items.is_empty() {\n+        w.write_str(\"<div class=\\\"impl-items\\\">\");\n+        w.push_buffer(impl_items);\n+        close_tags.insert_str(0, \"</div>\");\n+    }\n     w.write_str(&close_tags);\n }\n "}, {"sha": "9fca52451ed57fbcbb03fe1ea16df0384fc7ed71", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.try_error_result.txt?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -9,7 +9,7 @@\n     9|       |    }\n    10|      6|}\n    11|       |\n-   12|      1|fn main() -> Result<(),()> {\n+   12|      1|fn test1() -> Result<(),()> {\n    13|      1|    let mut\n    14|      1|        countdown = 10\n    15|       |    ;\n@@ -35,4 +35,91 @@\n    34|       |    }\n    35|      0|    Ok(())\n    36|      1|}\n+   37|       |\n+   38|       |struct Thing1;\n+   39|       |impl Thing1 {\n+   40|     18|    fn get_thing_2(&self, return_error: bool) -> Result<Thing2,()> {\n+   41|     18|        if return_error {\n+   42|      1|            Err(())\n+   43|       |        } else {\n+   44|     17|            Ok(Thing2{})\n+   45|       |        }\n+   46|     18|    }\n+   47|       |}\n+   48|       |\n+   49|       |struct Thing2;\n+   50|       |impl Thing2 {\n+   51|     17|    fn call(&self, return_error: bool) -> Result<u32,()> {\n+   52|     17|        if return_error {\n+   53|      2|            Err(())\n+   54|       |        } else {\n+   55|     15|            Ok(57)\n+   56|       |        }\n+   57|     17|    }\n+   58|       |}\n+   59|       |\n+   60|      1|fn test2() -> Result<(),()> {\n+   61|      1|    let thing1 = Thing1{};\n+   62|      1|    let mut\n+   63|      1|        countdown = 10\n+   64|       |    ;\n+   65|       |    for\n+   66|      6|        _\n+   67|       |    in\n+   68|      6|        0..10\n+   69|       |    {\n+   70|      6|        countdown\n+   71|      6|            -= 1\n+   72|      6|        ;\n+   73|      6|        if\n+   74|      6|            countdown < 5\n+   75|       |        {\n+   76|      1|            thing1.get_thing_2(/*err=*/ false)?.call(/*err=*/ true).expect_err(\"call should fail\");\n+                                                            ^0\n+   77|      1|            thing1\n+   78|      1|                .\n+   79|      1|                get_thing_2(/*return_error=*/ false)\n+   80|      0|                ?\n+   81|       |                .\n+   82|      1|                call(/*return_error=*/ true)\n+   83|      1|                .\n+   84|      1|                expect_err(\n+   85|      1|                    \"call should fail\"\n+   86|      1|                );\n+   87|      1|            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ true)?;\n+                              ^0                                                ^0                          ^0\n+   88|      0|            assert_eq!(val, 57);\n+   89|      0|            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ false)?;\n+   90|      0|            assert_eq!(val, 57);\n+   91|       |        }\n+   92|       |        else\n+   93|       |        {\n+   94|      5|            let val = thing1.get_thing_2(/*return_error=*/ false)?.call(/*return_error=*/ false)?;\n+                                                                               ^0                             ^0\n+   95|      5|            assert_eq!(val, 57);\n+   96|      5|            let val = thing1\n+   97|      5|                .get_thing_2(/*return_error=*/ false)?\n+                                                                   ^0\n+   98|      5|                .call(/*return_error=*/ false)?;\n+                                                            ^0\n+   99|      5|            assert_eq!(val, 57);\n+  100|      5|            let val = thing1\n+  101|      5|                .get_thing_2(/*return_error=*/ false)\n+  102|      0|                ?\n+  103|      5|                .call(/*return_error=*/ false)\n+  104|      0|                ?\n+  105|       |                ;\n+  106|      5|            assert_eq!(val, 57);\n+  107|       |        }\n+  108|       |    }\n+  109|      0|    Ok(())\n+  110|      1|}\n+  111|       |\n+  112|      1|fn main() -> Result<(),()> {\n+  113|      1|    test1().expect_err(\"test1 should fail\");\n+  114|      1|    test2()\n+  115|      1|    ?\n+  116|       |    ;\n+  117|      0|    Ok(())\n+  118|      1|}\n "}, {"sha": "cd0acf7230222022229660ebdaccb8357afe9ca8", "filename": "src/test/run-make-fulldeps/coverage/try_error_result.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -9,7 +9,7 @@ fn call(return_error: bool) -> Result<(),()> {\n     }\n }\n \n-fn main() -> Result<(),()> {\n+fn test1() -> Result<(),()> {\n     let mut\n         countdown = 10\n     ;\n@@ -34,3 +34,85 @@ fn main() -> Result<(),()> {\n     }\n     Ok(())\n }\n+\n+struct Thing1;\n+impl Thing1 {\n+    fn get_thing_2(&self, return_error: bool) -> Result<Thing2,()> {\n+        if return_error {\n+            Err(())\n+        } else {\n+            Ok(Thing2{})\n+        }\n+    }\n+}\n+\n+struct Thing2;\n+impl Thing2 {\n+    fn call(&self, return_error: bool) -> Result<u32,()> {\n+        if return_error {\n+            Err(())\n+        } else {\n+            Ok(57)\n+        }\n+    }\n+}\n+\n+fn test2() -> Result<(),()> {\n+    let thing1 = Thing1{};\n+    let mut\n+        countdown = 10\n+    ;\n+    for\n+        _\n+    in\n+        0..10\n+    {\n+        countdown\n+            -= 1\n+        ;\n+        if\n+            countdown < 5\n+        {\n+            thing1.get_thing_2(/*err=*/ false)?.call(/*err=*/ true).expect_err(\"call should fail\");\n+            thing1\n+                .\n+                get_thing_2(/*return_error=*/ false)\n+                ?\n+                .\n+                call(/*return_error=*/ true)\n+                .\n+                expect_err(\n+                    \"call should fail\"\n+                );\n+            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ true)?;\n+            assert_eq!(val, 57);\n+            let val = thing1.get_thing_2(/*return_error=*/ true)?.call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+        }\n+        else\n+        {\n+            let val = thing1.get_thing_2(/*return_error=*/ false)?.call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+            let val = thing1\n+                .get_thing_2(/*return_error=*/ false)?\n+                .call(/*return_error=*/ false)?;\n+            assert_eq!(val, 57);\n+            let val = thing1\n+                .get_thing_2(/*return_error=*/ false)\n+                ?\n+                .call(/*return_error=*/ false)\n+                ?\n+                ;\n+            assert_eq!(val, 57);\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn main() -> Result<(),()> {\n+    test1().expect_err(\"test1 should fail\");\n+    test2()\n+    ?\n+    ;\n+    Ok(())\n+}"}, {"sha": "86dec32e6251cab36c0a41048373a2d7591729d8", "filename": "src/test/rustdoc/empty-impls.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impls.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -0,0 +1,19 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @has - '//div[@id=\"synthetic-implementations-list\"]/h3[@id=\"impl-Send\"]' 'impl Send for Foo'\n+pub struct Foo;\n+\n+pub trait EmptyTrait {}\n+\n+// @has - '//div[@id=\"trait-implementations-list\"]/h3[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n+impl EmptyTrait for Foo {}\n+\n+pub trait NotEmpty {\n+    fn foo(&self);\n+}\n+\n+// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/h3[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n+impl NotEmpty for Foo {\n+    fn foo(&self) {}\n+}"}, {"sha": "ddc14e68675a98cd3af319e08e56a05a3700bdb2", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -12,9 +12,9 @@ macro_rules! array_impls {\n     }\n }\n \n-// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/details[1]/summary/h3' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[2]/summary/h3' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[3]/summary/h3' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[4]/summary/h3' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/details[5]/summary/h3' 'MyStruct<[T; 10]>'\n+// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/h3[1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/h3[5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "6527eb4750455f79dcf08c30b6fa378e78a632fa", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(generic_associated_types)]\n   //~^ WARNING: the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n@@ -22,6 +20,7 @@ impl<T> Foo for Fooer<T> {\n }\n \n fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+//~^ the trait `Foo` cannot be made into an object\n \n \n fn main() {"}, {"sha": "49dfce8b4bd380199930e3caf9bf6ad1b8e7bf65", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -1,11 +1,27 @@\n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-in-trait-path.rs:3:12\n+  --> $DIR/gat-in-trait-path.rs:1:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-warning: 1 warning emitted\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/gat-in-trait-path.rs:22:13\n+   |\n+LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+   = help: consider moving `A` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/gat-in-trait-path.rs:6:10\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     type A<'a> where Self: 'a;\n+   |          ^ ...because it contains the generic associated type `A`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "6ee865072aebf8886b851674ef46720438919fc1", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(generic_associated_types)]\n   //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n@@ -8,5 +6,6 @@ trait X {\n }\n \n fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+//~^ ERROR the trait `X` cannot be made into an object\n \n fn main() {}"}, {"sha": "65998afa7f914428f7cb8bdfd06d340ef95cc98f", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -1,11 +1,27 @@\n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67510-pass.rs:3:12\n+  --> $DIR/issue-67510-pass.rs:1:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-warning: 1 warning emitted\n+error[E0038]: the trait `X` cannot be made into an object\n+  --> $DIR/issue-67510-pass.rs:8:19\n+   |\n+LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n+   |\n+   = help: consider moving `Y` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-67510-pass.rs:5:10\n+   |\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n+LL |     type Y<'a>;\n+   |          ^ ...because it contains the generic associated type `Y`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "9643c82db773257f08e6172a6fd2726303517780", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -36,4 +36,6 @@ impl SuperTrait for SuperStruct {\n \n fn main() {\n     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+    //~^ ERROR the trait `SuperTrait` cannot be made into an object\n+    //~^^ ERROR the trait `SuperTrait` cannot be made into an object\n }"}, {"sha": "d31560f12f0bb81af8669081e159e5a37f576bc6", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -23,6 +23,39 @@ help: use angle brackets to add missing lifetime argument\n LL |     type SubType<'a><'a>: SubTrait;\n    |                 ^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:14\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `SubType` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:57\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `SubType` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n+   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "4e47d3c665505a48d597513201637262fda48fcb", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -7,6 +7,7 @@ trait CollectionFamily {\n }\n fn floatify() {\n     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+    //~^ the trait `CollectionFamily` cannot be made into an object\n }\n \n struct Family;"}, {"sha": "c9febfb59af62126ceb93b815cef6df9b55ce35a", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -14,6 +14,22 @@ help: use angle brackets to add missing type argument\n LL |     type Member<T><T>;\n    |                ^^^\n \n-error: aborting due to previous error\n+error[E0038]: the trait `CollectionFamily` cannot be made into an object\n+  --> $DIR/issue-78671.rs:9:25\n+   |\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n+   |\n+   = help: consider moving `Member` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL | trait CollectionFamily {\n+   |       ---------------- this trait cannot be made into an object...\n+LL |     type Member<T>;\n+   |          ^^^^^^ ...because it contains the generic associated type `Member`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "b2ba3c24abbe1d7cb90a545bb452173283cd8e2c", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -42,5 +42,6 @@ impl<K, V: Default> MapLike<K, V> for Source {\n fn main() {\n     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n-    //~^^ ERROR type mismatch resolving\n+    //~^^ the trait `MapLike` cannot be made into an object\n+    //~^^ the trait `MapLike` cannot be made into an object\n }"}, {"sha": "4973ae19729acd6771b482f8086b271db27d003d", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -14,17 +14,39 @@ help: use angle brackets to add missing lifetime argument\n LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n    |                  ^^^^\n \n-error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'static> == (dyn RefCont<'_, u8> + 'static)`\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:44:12\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `VRefCont` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:43:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn RefCont`, found reference\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `VRefCont` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:21:10\n    |\n-   = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n-                 found reference `&'static u8`\n-   = note: required for the cast to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n+   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0271.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "997a550b0effb714a3cf023c7829ddc12b6ffbc4", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -0,0 +1,16 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+trait StreamingIterator {\n+    type Item<'a> where Self: 'a;\n+    fn size_hint(&self) -> (usize, Option<usize>);\n+    // Uncommenting makes `StreamingIterator` not object safe\n+//    fn next(&mut self) -> Self::Item<'_>;\n+}\n+\n+fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+    //~^ the trait `StreamingIterator` cannot be made into an object\n+    x.size_hint().0\n+}\n+\n+fn main() {}"}, {"sha": "a8f1768ba261798e10392bae55865f0830c6fcc4", "filename": "src/test/ui/generic-associated-types/trait-objects.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76a04dd3f8b2500d9e524dca122814fd5a3e25e4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr?ref=76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "patch": "@@ -0,0 +1,18 @@\n+error[E0038]: the trait `StreamingIterator` cannot be made into an object\n+  --> $DIR/trait-objects.rs:11:16\n+   |\n+LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n+   |\n+   = help: consider moving `Item` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-objects.rs:5:10\n+   |\n+LL | trait StreamingIterator {\n+   |       ----------------- this trait cannot be made into an object...\n+LL |     type Item<'a> where Self: 'a;\n+   |          ^^^^ ...because it contains the generic associated type `Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}