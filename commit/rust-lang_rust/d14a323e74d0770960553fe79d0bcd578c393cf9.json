{"sha": "d14a323e74d0770960553fe79d0bcd578c393cf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGEzMjNlNzRkMDc3MDk2MDU1M2ZlNzlkMGJjZDU3OGMzOTNjZjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-24T18:35:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-24T18:35:13Z"}, "message": "Use more accurate return path spans\n\nNo longer suggest `Box::new(if foo { Type1 } else { Type2 })`, instead\nsuggesting `if foo { Box::new(Type1) } else { Box::new(Type2) }`.", "tree": {"sha": "1bb1352fbcd10ade9a267c5adc8c8afcd70838f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb1352fbcd10ade9a267c5adc8c8afcd70838f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14a323e74d0770960553fe79d0bcd578c393cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14a323e74d0770960553fe79d0bcd578c393cf9", "html_url": "https://github.com/rust-lang/rust/commit/d14a323e74d0770960553fe79d0bcd578c393cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14a323e74d0770960553fe79d0bcd578c393cf9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55dce720b24fde5d8489498fb5f7abd8c52c28f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/55dce720b24fde5d8489498fb5f7abd8c52c28f3", "html_url": "https://github.com/rust-lang/rust/commit/55dce720b24fde5d8489498fb5f7abd8c52c28f3"}], "stats": {"total": 133, "additions": 91, "deletions": 42}, "files": [{"sha": "84f1260385553f9f839f79d552556a7191408a6b", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -600,12 +600,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Visit to make sure there's a single `return` type to suggest `impl Trait`,\n         // otherwise suggest using `Box<dyn Trait>` or an enum.\n-        let mut visitor = ReturnsVisitor(vec![]);\n+        let mut visitor = ReturnsVisitor::new();\n         visitor.visit_body(&body);\n \n         let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n \n-        let mut ret_types = visitor.0.iter().filter_map(|expr| tables.node_type_opt(expr.hir_id));\n+        let mut ret_types =\n+            visitor.returns.iter().filter_map(|expr| tables.node_type_opt(expr.hir_id));\n         let (last_ty, all_returns_have_same_type) = ret_types.clone().fold(\n             (None, true),\n             |(last_ty, mut same): (std::option::Option<Ty<'_>>, bool), ty| {\n@@ -677,7 +678,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // Suggest `-> Box<dyn Trait>` and `Box::new(returned_value)`.\n                 // Get all the return values and collect their span and suggestion.\n                 let mut suggestions = visitor\n-                    .0\n+                    .returns\n                     .iter()\n                     .map(|expr| {\n                         (\n@@ -737,10 +738,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         {\n             let body = hir.body(*body_id);\n             // Point at all the `return`s in the function as they have failed trait bounds.\n-            let mut visitor = ReturnsVisitor(vec![]);\n+            let mut visitor = ReturnsVisitor::new();\n             visitor.visit_body(&body);\n             let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n-            for expr in &visitor.0 {\n+            for expr in &visitor.returns {\n                 if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n                     let ty = self.resolve_vars_if_possible(&returned_ty);\n                     err.span_label(expr.span, &format!(\"this returned value is of type `{}`\", ty));\n@@ -1691,7 +1692,16 @@ pub fn suggest_constraining_type_param(\n \n /// Collect all the returned expressions within the input expression.\n /// Used to point at the return spans when we want to suggest some change to them.\n-struct ReturnsVisitor<'v>(Vec<&'v hir::Expr<'v>>);\n+struct ReturnsVisitor<'v> {\n+    returns: Vec<&'v hir::Expr<'v>>,\n+    in_block_tail: bool,\n+}\n+\n+impl ReturnsVisitor<'_> {\n+    fn new() -> Self {\n+        ReturnsVisitor { returns: vec![], in_block_tail: false }\n+    }\n+}\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     type Map = rustc::hir::map::Map<'v>;\n@@ -1701,20 +1711,41 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     }\n \n     fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n-        if let hir::ExprKind::Ret(Some(ex)) = ex.kind {\n-            self.0.push(ex);\n+        match ex.kind {\n+            hir::ExprKind::Ret(Some(ex)) => {\n+                self.returns.push(ex);\n+            }\n+            hir::ExprKind::Block(block, _) if self.in_block_tail => {\n+                self.in_block_tail = false;\n+                for stmt in block.stmts {\n+                    hir::intravisit::walk_stmt(self, stmt);\n+                }\n+                self.in_block_tail = true;\n+                if let Some(expr) = block.expr {\n+                    self.visit_expr(expr);\n+                }\n+            }\n+            hir::ExprKind::Match(_, arms, _) if self.in_block_tail => {\n+                for arm in arms {\n+                    self.visit_expr(arm.body);\n+                }\n+            }\n+            // We need to walk to find `return`s in the entire body.\n+            _ if !self.in_block_tail => hir::intravisit::walk_expr(self, ex),\n+            _ => self.returns.push(ex),\n         }\n-        hir::intravisit::walk_expr(self, ex);\n     }\n \n     fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n+        let prev = self.in_block_tail;\n         if body.generator_kind().is_none() {\n             if let hir::ExprKind::Block(block, None) = body.value.kind {\n-                if let Some(expr) = block.expr {\n-                    self.0.push(expr);\n+                if block.expr.is_some() {\n+                    self.in_block_tail = true;\n                 }\n             }\n         }\n         hir::intravisit::walk_body(self, body);\n+        self.in_block_tail = prev;\n     }\n }"}, {"sha": "70c7f791a2b884f3825fbd2db50819e8754e0824", "filename": "src/test/ui/error-codes/E0746.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -10,9 +10,9 @@ fn foo() -> impl Trait { Struct }\n \n fn bar() -> impl Trait { //~ ERROR E0746\n     if true {\n-        return 0;\n+        return 0u32;\n     }\n-    42\n+    42u32\n }\n \n fn main() {}"}, {"sha": "fbf18246e1648b5a16e8ae3a248410e9ee052e96", "filename": "src/test/ui/error-codes/E0746.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -10,9 +10,9 @@ fn foo() -> dyn Trait { Struct }\n \n fn bar() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return 0;\n+        return 0u32;\n     }\n-    42\n+    42u32\n }\n \n fn main() {}"}, {"sha": "05c61f1149fb53e004322b39f93ac803e9de50cc", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -17,7 +17,7 @@ LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: return `impl Trait` instead, as all return paths are of type `u32`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "dfcc22aee34855d23bc8ae1e03d0fcc21e896f9d", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -22,6 +22,13 @@ fn bal() -> dyn Trait { //~ ERROR E0746\n     }\n     42\n }\n+fn bax() -> dyn Trait { //~ ERROR E0746\n+    if true {\n+        Struct\n+    } else {\n+        42\n+    }\n+}\n fn bam() -> Box<dyn Trait> {\n     if true {\n         return Struct; //~ ERROR mismatched types\n@@ -52,9 +59,9 @@ fn baw() -> Box<dyn Trait> {\n // Suggest using `impl Trait`\n fn bat() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return 0;\n+        return 0u32;\n     }\n-    42\n+    42u32\n }\n fn bay() -> dyn Trait { //~ ERROR E0746\n     if true {"}, {"sha": "fbad7ec124cb9853cb6e6379686b09f7c4344734", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -95,8 +95,27 @@ LL |     }\n LL |     Box::new(42)\n    |\n \n+error[E0746]: return type cannot have an unboxed trait object\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:13\n+   |\n+LL | fn bax() -> dyn Trait {\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+   = note: if all the returned values were of the same type you could use `impl Trait` as the return type\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: you can create a new `enum` with a variant for each returned type\n+help: return a boxed trait object instead\n+   |\n+LL | fn bax() -> Box<dyn Trait> {\n+LL |     if true {\n+LL |         Box::new(Struct)\n+LL |     } else {\n+LL |         Box::new(42)\n+   |\n+\n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:27:16\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:34:16\n    |\n LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -112,7 +131,7 @@ LL |         return Struct;\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:5\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:36:5\n    |\n LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -128,7 +147,7 @@ LL |     42\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:33:16\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:40:16\n    |\n LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -144,7 +163,7 @@ LL |         return 0;\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:35:5\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:42:5\n    |\n LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -160,7 +179,7 @@ LL |     42\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:39:9\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:46:9\n    |\n LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -176,7 +195,7 @@ LL |         Struct\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:41:9\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:48:9\n    |\n LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -192,7 +211,7 @@ LL |         42\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:46:9\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:53:9\n    |\n LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -208,7 +227,7 @@ LL |         0\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:48:9\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:55:9\n    |\n LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n@@ -224,38 +243,30 @@ LL |         42\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0746]: return type cannot have an unboxed trait object\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:53:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:60:13\n    |\n LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: return `impl Trait` instead, as all return paths are of type `u32`, which implements `Trait`\n    |\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^\n \n error[E0746]: return type cannot have an unboxed trait object\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:59:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:66:13\n    |\n LL | fn bay() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = note: if all the returned values were of the same type you could use `impl Trait` as the return type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = note: you can create a new `enum` with a variant for each returned type\n-help: return a boxed trait object instead\n-   |\n-LL | fn bay() -> Box<dyn Trait> {\n-LL |     Box::new(if true {\n-LL |         0u32\n-LL |     } else {\n-LL |         42u32\n-LL |     })\n+help: return `impl Trait` instead, as all return paths are of type `u32`, which implements `Trait`\n    |\n+LL | fn bay() -> impl Trait {\n+   |             ^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0746.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "08e16f46936455417b7605703356f2dbd57a3c75", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d14a323e74d0770960553fe79d0bcd578c393cf9/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=d14a323e74d0770960553fe79d0bcd578c393cf9", "patch": "@@ -5,7 +5,7 @@ LL | fn should_ret_unit() -> impl T {\n    |                         ^^^^^^ the trait `T` is not implemented for `()`\n LL |\n LL |     panic!()\n-   |     -------- this returned value is of type `()`\n+   |     -------- this returned value is of type `!`\n    |\n    = note: the return type of a function must have a statically known size\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}]}