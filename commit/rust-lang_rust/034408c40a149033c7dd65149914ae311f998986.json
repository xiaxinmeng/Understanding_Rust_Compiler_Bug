{"sha": "034408c40a149033c7dd65149914ae311f998986", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNDQwOGM0MGExNDkwMzNjN2RkNjUxNDk5MTRhZTMxMWY5OTg5ODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-20T23:18:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:19:06Z"}, "message": "Convert DPRINT to LOG in rust_cc.cpp and add more logging", "tree": {"sha": "125897fa8b8278aacaaad7132f971b437f414104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125897fa8b8278aacaaad7132f971b437f414104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/034408c40a149033c7dd65149914ae311f998986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/034408c40a149033c7dd65149914ae311f998986", "html_url": "https://github.com/rust-lang/rust/commit/034408c40a149033c7dd65149914ae311f998986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/034408c40a149033c7dd65149914ae311f998986/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcee98b0247e7143f99b1db007b30397fd07d1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcee98b0247e7143f99b1db007b30397fd07d1a7", "html_url": "https://github.com/rust-lang/rust/commit/dcee98b0247e7143f99b1db007b30397fd07d1a7"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "e9d220d9032f35c4abda3d4c06c851c3deac3f3b", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/034408c40a149033c7dd65149914ae311f998986/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/034408c40a149033c7dd65149914ae311f998986/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=034408c40a149033c7dd65149914ae311f998986", "patch": "@@ -14,9 +14,6 @@\n #include <vector>\n #include <stdint.h>\n \n-#undef DPRINT\n-#define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n-\n // The number of allocations Rust code performs before performing cycle\n // collection.\n #define RUST_CC_FREQUENCY   5000\n@@ -122,11 +119,16 @@ class irc : public shape::data<irc,shape::ptr> {\n \n         // Bump the internal reference count of the box.\n         if (ircs.find((void *)ref_count_dp) == ircs.end()) {\n-            //DPRINT(\"setting internal reference count for %p\\n\",\n-            //       (void *)ref_count_dp);\n+\t    LOG(task, gc,\n+\t\t\"setting internal reference count for %p to 1\",\n+\t\t(void *)ref_count_dp);\n             ircs[(void *)ref_count_dp] = 1;\n         } else {\n-            ++ircs[(void *)ref_count_dp];\n+\t    uintptr_t newcount = ircs[(void *)ref_count_dp] + 1;\n+\t    LOG(task, gc,\n+\t\t\"bumping internal reference count for %p to %lu\",\n+\t\t(void *)ref_count_dp, newcount);\n+            ircs[(void *)ref_count_dp] = newcount;\n         }\n \n         // Do not traverse the contents of this box; it's in the allocation\n@@ -176,8 +178,8 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n \n         const type_desc *tydesc = begin->second;\n \n-        //DPRINT(\"determining internal ref counts: %p, tydesc=%p\\n\", p,\n-        //tydesc);\n+        LOG(task, gc, \"determining internal ref counts: %p, tydesc=%p\", p,\n+\t    tydesc);\n \n         shape::arena arena;\n         shape::type_param *params =\n@@ -223,11 +225,12 @@ find_roots(rust_task *task, irc_map &ircs, std::vector<void *> &roots) {\n         if (irc < ref_count) {\n             // This allocation must be a root, because the internal reference\n             // count is smaller than the total reference count.\n-            //DPRINT(\"root found: %p, irc %lu, ref count %lu\\n\", alloc, irc,\n-            //       ref_count);\n+\t    LOG(task, gc,\"root found: %p, irc %lu, ref count %lu\",\n+\t\talloc, irc, ref_count);\n             roots.push_back(alloc);\n         } else {\n-            //DPRINT(\"nonroot found: %p, ref count %lu\\n\", alloc, ref_count);\n+            LOG(task, gc, \"nonroot found: %p, irc %lu, ref count %lu\",\n+\t\talloc, irc, ref_count);\n             /*assert(irc == ref_count && \"Internal reference count must be \"\n                    \"less than or equal to the total reference count!\");*/\n         }\n@@ -385,7 +388,7 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n \n             const type_desc *tydesc = task->local_allocs[alloc];\n \n-            //DPRINT(\"marking: %p, tydesc=%p\\n\", p, tydesc);\n+            LOG(task, gc, \"marking: %p, tydesc=%p\", alloc, tydesc);\n \n             uint8_t *p = reinterpret_cast<uint8_t *>(alloc);\n             shape::arena arena;\n@@ -398,7 +401,6 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n                            tydesc->shape_tables, p + sizeof(uintptr_t),\n                            std::cerr);\n             log.walk();\n-            DPRINT(\"\\n\");\n #endif\n \n             // We skip over the reference count here.\n@@ -419,7 +421,7 @@ sweep(rust_task *task, const std::set<void *> &marked) {\n     while (begin != end) {\n         void *alloc = begin->first;\n         if (marked.find(alloc) == marked.end()) {\n-            //DPRINT(\"object is part of a cycle: %p\\n\", alloc);\n+            LOG(task, gc, \"object is part of a cycle: %p\", alloc);\n \n             // FIXME: Run the destructor, *if* it's a resource.\n \n@@ -432,8 +434,8 @@ sweep(rust_task *task, const std::set<void *> &marked) {\n \n void\n do_cc(rust_task *task) {\n-    //DPRINT(\"cc; n allocs = %lu\\n\",\n-    //       (long unsigned int)task->local_allocs.size());\n+    LOG(task, gc, \"cc; n allocs = %lu\",\n+\t(long unsigned int)task->local_allocs.size());\n \n     irc_map ircs;\n     irc::compute_ircs(task, ircs);"}]}