{"sha": "74aa55b3fcae638ce3df9111ef7822474f9a2b61", "node_id": "C_kwDOAAsO6NoAKDc0YWE1NWIzZmNhZTYzOGNlM2RmOTExMWVmNzgyMjQ3NGY5YTJiNjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-17T10:21:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-17T10:21:48Z"}, "message": "Rollup merge of #97798 - WaffleLapkin:allow_for_suggestions_that_are_quite_far_away_from_each_other, r=estebank\n\nHide irrelevant lines in suggestions to allow for suggestions that are far from each other to be shown\n\nThis is an attempt to fix suggestions one part of which is 6 lines or more far from the first. I've noticed \"the problem\" (of not showing some parts of the suggestion) here: https://github.com/rust-lang/rust/pull/97759#discussion_r889689230.\n\nI'm not sure about the implementation (this big closure is just bad and makes already complicated code even more so), but I want to at least discuss the result.\n\nHere is an example of how this changes the output:\n\nBefore:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 ~     'l: { match () { () => break 'l,\n4 |\n5 |\n6 |\n7 |\n8 |\n...\n```\n\nAfter:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 ~     'l: { match () { () => break 'l,\n4 |\n...\n31|\n32~ } };\n  |\n```\n\nr? `@estebank`\n`@rustbot` label +A-diagnostics +A-suggestion-diagnostics", "tree": {"sha": "7aca511f2f562b3b3e588c666443b5127f92ffe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aca511f2f562b3b3e588c666443b5127f92ffe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74aa55b3fcae638ce3df9111ef7822474f9a2b61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirFW8CRBK7hj4Ov3rIwAAXYQIAAbko2AEmq+IRiGwpHdLSOwa\nmJvdlNIVFfcSHMpmuhDVa829L77YdOwDKZ0FDMw95F0YYECqriXdOQlPECqmmQMs\nqm1+EfjEC73L79lYpAlQw8+cqy8UrEg4iS98gCSuAQLPf/rqS9tUd4jyafuYZliq\n/sehgkJPQi2mMXfbDUVo18h6Y6tc3awDO/JsLcugl0bvU2yYq7y2JYbuhrQ5dgYr\ndk0RNOVW1fuUyEr+O7lIS9GmvTMAPdYC5Alf98Cxd4E21ibF+XUWVb741P4V91bk\n70iNlSLUMAUAMkNFlUgo1AiB/KFOujMcZxWdHZXz4j8IWziq0MTdN+pb6AiH92w=\n=9UIl\n-----END PGP SIGNATURE-----\n", "payload": "tree 7aca511f2f562b3b3e588c666443b5127f92ffe8\nparent b516806774e3ee85abc54105ad6edd13deaa34a2\nparent e502b9a0ff4ab37176c82a994586e6f11e57e18f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655461308 +0200\ncommitter GitHub <noreply@github.com> 1655461308 +0200\n\nRollup merge of #97798 - WaffleLapkin:allow_for_suggestions_that_are_quite_far_away_from_each_other, r=estebank\n\nHide irrelevant lines in suggestions to allow for suggestions that are far from each other to be shown\n\nThis is an attempt to fix suggestions one part of which is 6 lines or more far from the first. I've noticed \"the problem\" (of not showing some parts of the suggestion) here: https://github.com/rust-lang/rust/pull/97759#discussion_r889689230.\n\nI'm not sure about the implementation (this big closure is just bad and makes already complicated code even more so), but I want to at least discuss the result.\n\nHere is an example of how this changes the output:\n\nBefore:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 ~     'l: { match () { () => break 'l,\n4 |\n5 |\n6 |\n7 |\n8 |\n...\n```\n\nAfter:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 ~     'l: { match () { () => break 'l,\n4 |\n...\n31|\n32~ } };\n  |\n```\n\nr? `@estebank`\n`@rustbot` label +A-diagnostics +A-suggestion-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74aa55b3fcae638ce3df9111ef7822474f9a2b61", "html_url": "https://github.com/rust-lang/rust/commit/74aa55b3fcae638ce3df9111ef7822474f9a2b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74aa55b3fcae638ce3df9111ef7822474f9a2b61/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b516806774e3ee85abc54105ad6edd13deaa34a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b516806774e3ee85abc54105ad6edd13deaa34a2", "html_url": "https://github.com/rust-lang/rust/commit/b516806774e3ee85abc54105ad6edd13deaa34a2"}, {"sha": "e502b9a0ff4ab37176c82a994586e6f11e57e18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e502b9a0ff4ab37176c82a994586e6f11e57e18f", "html_url": "https://github.com/rust-lang/rust/commit/e502b9a0ff4ab37176c82a994586e6f11e57e18f"}], "stats": {"total": 428, "additions": 296, "deletions": 132}, "files": [{"sha": "1329e3a0b959d9e7e4f89124ce626fe2cd336590", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 169, "deletions": 76, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -10,7 +10,7 @@\n use Destination::*;\n \n use rustc_span::source_map::SourceMap;\n-use rustc_span::{SourceFile, Span};\n+use rustc_span::{FileLines, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n@@ -1761,12 +1761,6 @@ impl EmitterWriter {\n             let has_deletion = parts.iter().any(|p| p.is_deletion());\n             let is_multiline = complete.lines().count() > 1;\n \n-            enum DisplaySuggestion {\n-                Underline,\n-                Diff,\n-                None,\n-            }\n-\n             if let Some(span) = span.primary_span() {\n                 // Compare the primary span of the diagnostic with the span of the suggestion\n                 // being emitted.  If they belong to the same file, we don't *need* to show the\n@@ -1839,79 +1833,94 @@ impl EmitterWriter {\n                 }\n                 row_num += line_end - line_start;\n             }\n-            for (line_pos, (line, highlight_parts)) in\n-                lines.by_ref().zip(highlights).take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n-            {\n-                // Print the span column to avoid confusion\n-                buffer.puts(\n-                    row_num,\n-                    0,\n-                    &self.maybe_anonymized(line_start + line_pos),\n-                    Style::LineNumber,\n-                );\n-                if let DisplaySuggestion::Diff = show_code_change {\n-                    // Add the line number for both addition and removal to drive the point home.\n-                    //\n-                    // N - fn foo<A: T>(bar: A) {\n-                    // N + fn foo(bar: impl T) {\n-                    buffer.puts(\n-                        row_num - 1,\n-                        0,\n-                        &self.maybe_anonymized(line_start + line_pos),\n-                        Style::LineNumber,\n-                    );\n-                    buffer.puts(row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n-                    buffer.puts(\n-                        row_num - 1,\n-                        max_line_num_len + 3,\n-                        &normalize_whitespace(\n-                            &*file_lines\n-                                .file\n-                                .get_line(file_lines.lines[line_pos].line_index)\n-                                .unwrap(),\n-                        ),\n-                        Style::NoStyle,\n-                    );\n-                    buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n-                } else if is_multiline {\n-                    match &highlight_parts[..] {\n-                        [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n-                            buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n-                        }\n-                        [] => {\n-                            draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                        }\n-                        _ => {\n-                            buffer.puts(row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n-                        }\n-                    }\n-                } else {\n-                    draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n+            let mut unhighlighted_lines = Vec::new();\n+            for (line_pos, (line, highlight_parts)) in lines.by_ref().zip(highlights).enumerate() {\n+                debug!(%line_pos, %line, ?highlight_parts);\n+\n+                // Remember lines that are not highlighted to hide them if needed\n+                if highlight_parts.is_empty() {\n+                    unhighlighted_lines.push((line_pos, line));\n+                    continue;\n                 }\n \n-                // print the suggestion\n-                buffer.append(row_num, &normalize_whitespace(line), Style::NoStyle);\n+                match unhighlighted_lines.len() {\n+                    0 => (),\n+                    // Since we show first line, \"...\" line and last line,\n+                    // There is no reason to hide if there are 3 or less lines\n+                    // (because then we just replace a line with ... which is\n+                    // not helpful)\n+                    n if n <= 3 => unhighlighted_lines.drain(..).for_each(|(p, l)| {\n+                        self.draw_code_line(\n+                            &mut buffer,\n+                            &mut row_num,\n+                            &Vec::new(),\n+                            p,\n+                            l,\n+                            line_start,\n+                            show_code_change,\n+                            max_line_num_len,\n+                            &file_lines,\n+                            is_multiline,\n+                        )\n+                    }),\n+                    // Print first unhighlighted line, \"...\" and last unhighlighted line, like so:\n+                    //\n+                    // LL | this line was highlighted\n+                    // LL | this line is just for context\n+                    //   ...\n+                    // LL | this line is just for context\n+                    // LL | this line was highlighted\n+                    _ => {\n+                        let last_line = unhighlighted_lines.pop();\n+                        let first_line = unhighlighted_lines.drain(..).next();\n+\n+                        first_line.map(|(p, l)| {\n+                            self.draw_code_line(\n+                                &mut buffer,\n+                                &mut row_num,\n+                                &Vec::new(),\n+                                p,\n+                                l,\n+                                line_start,\n+                                show_code_change,\n+                                max_line_num_len,\n+                                &file_lines,\n+                                is_multiline,\n+                            )\n+                        });\n \n-                // Colorize addition/replacements with green.\n-                for &SubstitutionHighlight { start, end } in highlight_parts {\n-                    // Account for tabs when highlighting (#87972).\n-                    let tabs: usize = line\n-                        .chars()\n-                        .take(start)\n-                        .map(|ch| match ch {\n-                            '\\t' => 3,\n-                            _ => 0,\n-                        })\n-                        .sum();\n-                    buffer.set_style_range(\n-                        row_num,\n-                        max_line_num_len + 3 + start + tabs,\n-                        max_line_num_len + 3 + end + tabs,\n-                        Style::Addition,\n-                        true,\n-                    );\n+                        buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n+                        row_num += 1;\n+\n+                        last_line.map(|(p, l)| {\n+                            self.draw_code_line(\n+                                &mut buffer,\n+                                &mut row_num,\n+                                &Vec::new(),\n+                                p,\n+                                l,\n+                                line_start,\n+                                show_code_change,\n+                                max_line_num_len,\n+                                &file_lines,\n+                                is_multiline,\n+                            )\n+                        });\n+                    }\n                 }\n-                row_num += 1;\n+\n+                self.draw_code_line(\n+                    &mut buffer,\n+                    &mut row_num,\n+                    highlight_parts,\n+                    line_pos,\n+                    line,\n+                    line_start,\n+                    show_code_change,\n+                    max_line_num_len,\n+                    &file_lines,\n+                    is_multiline,\n+                )\n             }\n \n             // This offset and the ones below need to be signed to account for replacement code\n@@ -2096,6 +2105,90 @@ impl EmitterWriter {\n             }\n         }\n     }\n+\n+    fn draw_code_line(\n+        &self,\n+        buffer: &mut StyledBuffer,\n+        row_num: &mut usize,\n+        highlight_parts: &Vec<SubstitutionHighlight>,\n+        line_pos: usize,\n+        line: &str,\n+        line_start: usize,\n+        show_code_change: DisplaySuggestion,\n+        max_line_num_len: usize,\n+        file_lines: &FileLines,\n+        is_multiline: bool,\n+    ) {\n+        // Print the span column to avoid confusion\n+        buffer.puts(*row_num, 0, &self.maybe_anonymized(line_start + line_pos), Style::LineNumber);\n+        if let DisplaySuggestion::Diff = show_code_change {\n+            // Add the line number for both addition and removal to drive the point home.\n+            //\n+            // N - fn foo<A: T>(bar: A) {\n+            // N + fn foo(bar: impl T) {\n+            buffer.puts(\n+                *row_num - 1,\n+                0,\n+                &self.maybe_anonymized(line_start + line_pos),\n+                Style::LineNumber,\n+            );\n+            buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+            buffer.puts(\n+                *row_num - 1,\n+                max_line_num_len + 3,\n+                &normalize_whitespace(\n+                    &*file_lines.file.get_line(file_lines.lines[line_pos].line_index).unwrap(),\n+                ),\n+                Style::NoStyle,\n+            );\n+            buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+        } else if is_multiline {\n+            match &highlight_parts[..] {\n+                [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n+                    buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+                }\n+                [] => {\n+                    draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n+                }\n+                _ => {\n+                    buffer.puts(*row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n+                }\n+            }\n+        } else {\n+            draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n+        }\n+\n+        // print the suggestion\n+        buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n+\n+        // Colorize addition/replacements with green.\n+        for &SubstitutionHighlight { start, end } in highlight_parts {\n+            // Account for tabs when highlighting (#87972).\n+            let tabs: usize = line\n+                .chars()\n+                .take(start)\n+                .map(|ch| match ch {\n+                    '\\t' => 3,\n+                    _ => 0,\n+                })\n+                .sum();\n+            buffer.set_style_range(\n+                *row_num,\n+                max_line_num_len + 3 + start + tabs,\n+                max_line_num_len + 3 + end + tabs,\n+                Style::Addition,\n+                true,\n+            );\n+        }\n+        *row_num += 1;\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+enum DisplaySuggestion {\n+    Underline,\n+    Diff,\n+    None,\n }\n \n impl FileWithAnnotatedLines {"}, {"sha": "78b0892b3bc176b77454268f4188e6195aeb5b72", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -1174,7 +1174,7 @@ impl HandlerInner {\n             !this.emitted_diagnostics.insert(diagnostic_hash)\n         };\n \n-        // Only emit the diagnostic if we've been asked to deduplicate and\n+        // Only emit the diagnostic if we've been asked to deduplicate or\n         // haven't already emitted an equivalent diagnostic.\n         if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n             debug!(?diagnostic);"}, {"sha": "0406a16a39732fbd7b466aba15f5efd4e333f243", "filename": "src/test/ui/associated-consts/issue-93835.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -19,11 +19,10 @@ help: you might have meant to write a `struct` literal\n    |\n LL ~ fn e() { SomeStruct {\n LL |     p:a<p:p<e=6>>\n-LL |\n-LL |\n-LL |\n-LL |\n  ...\n+LL |\n+LL ~ }}\n+   |\n help: maybe you meant to write a path separator here\n    |\n LL |     p::a<p:p<e=6>>"}, {"sha": "a3c43690f1f32450039efbc31cd0e0257d1db0be", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -17,11 +17,10 @@ help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n LL |\n-LL |\n-LL |\n-LL |\n-LL |         *fptr.0 = 20;\n  ...\n+LL |\n+LL ~     } });\n+   |\n \n error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n   --> $DIR/auto_traits.rs:42:19\n@@ -39,12 +38,11 @@ LL |         *fptr.0.0 = 20;\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL |\n-LL |\n-LL |\n-LL |\n LL |\n  ...\n+LL |\n+LL ~     } });\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n   --> $DIR/auto_traits.rs:67:13"}, {"sha": "fa6082cbb59b4c3c649b72692d23517eb2a6f9a3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -108,12 +108,11 @@ LL |         *fptr2.0 = 20;\n help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n-LL |\n-LL |\n-LL |\n-LL |\n LL |\n  ...\n+LL |\n+LL ~     } });\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8d99d757c17d6c80fb06ad6a6ce318f6bd15f3da", "filename": "src/test/ui/imports/issue-59764.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -209,8 +209,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL ~         issue_59764::{makro as foobar, \n LL | \n-LL |             foobaz,\n-LL | \n+ ...\n LL | \n LL ~             foo::{baz}\n    |"}, {"sha": "039ffbfd3d89fdd40526cd7e6ee1c082c6c6752e", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -89,12 +89,11 @@ LL |                    5);\n help: try comparing the cast value\n    |\n LL ~     println!(\"{}\", (a\n-LL | \n-LL | \n-LL |                    as\n-LL | \n LL | \n  ...\n+LL | \n+LL ~                    usize)\n+   |\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a shift\n   --> $DIR/issue-22644.rs:32:31"}, {"sha": "746738bbd939b58589648f2e148bd64986e38e50", "filename": "src/test/ui/let-else/let-else-if.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -8,8 +8,7 @@ help: try placing this code inside a block\n    |\n LL ~     let Some(_) = Some(()) else { if true {\n LL |\n-LL |         return;\n-LL |     } else {\n+ ...\n LL |         return;\n LL ~     } };\n    |"}, {"sha": "d95c25fdea8b5ce8fd21721d100b55e27fa5af96", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -54,11 +54,10 @@ help: consider enclosing expression in a block\n    |\n LL ~     let _i = 'label: { match x {\n LL |         0 => 42,\n-LL |         1 if false => break 'label 17,\n-LL |         1 => {\n-LL |             if true {\n-LL |                 break 'label 13\n  ...\n+LL |         _ => 1,\n+LL ~     } };\n+   |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n   --> $DIR/recover-labeled-non-block-expr.rs:26:24"}, {"sha": "6819d14bb010690472625fcd338fcb03861a8698", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -8,8 +8,7 @@ help: you might have meant to write a `struct` literal\n    |\n LL ~     pub fn new() -> Self { SomeStruct {\n LL |         input_cells: Vec::new()\n-LL |\n-LL |\n+ ...\n LL |\n LL ~     }}\n    |"}, {"sha": "d25452456bb21a4f981e8be1c39c4003231c5dac", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -9,11 +9,10 @@ help: consider introducing a named lifetime parameter\n    |\n LL ~ fn main<'a>() {\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n-LL |           dyn Foo(&isize) -> &isize                                   >();\n-LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,\n-LL |           dyn Foo(&isize) -> (&isize, &isize)                           >();\n-LL | \n  ...\n+LL | \n+LL ~     let _: dyn Foo(&'a isize, &'a usize) -> &'a usize;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0152a93feee4274b4a27a61deadb19da8ffe21a4", "filename": "src/tools/clippy/tests/ui/bind_instead_of_map_multipart.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -56,7 +56,25 @@ LL |             if s == \"43\" {\n LL ~                 return 43;\n LL |             }\n LL |             s == \"42\"\n+LL |         } {\n+LL ~             return 45;\n+LL |         }\n+LL |         match s.len() {\n+LL ~             10 => 2,\n+LL |             20 => {\n  ...\n+LL |                         if foo() {\n+LL ~                             return 20;\n+LL |                         }\n+LL |                         println!(\"foo\");\n+LL ~                         3\n+LL |                     };\n+LL |                 }\n+LL ~                 20\n+LL |             },\n+LL ~             40 => 30,\n+LL ~             _ => 1,\n+   |\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n   --> $DIR/bind_instead_of_map_multipart.rs:61:13"}, {"sha": "a270f637f2b91ea12e9dea65f68d5db93c774b71", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/shared_at_top_and_bottom.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -98,7 +98,8 @@ LL +         id: e_id,\n LL +         name: \"Player 1\".to_string(),\n LL +         some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n LL +     };\n- ...\n+LL +     process_data(pack);\n+   |\n \n error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:94:5"}, {"sha": "2ef9966525cefbfaca089233e71a9c8f3a6a1ca4", "filename": "src/tools/clippy/tests/ui/entry.stderr", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -28,7 +28,8 @@ LL +             v\n LL +         } else {\n LL +             v2\n LL +         }\n- ...\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:38:5\n@@ -50,7 +51,8 @@ LL +             v\n LL +         } else {\n LL +             v2\n LL +         }\n- ...\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:47:5\n@@ -72,7 +74,9 @@ LL +             e.insert(v);\n LL +         } else {\n LL +             e.insert(v2);\n LL +             return;\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:57:5\n@@ -111,7 +115,11 @@ LL +             1 if true => {\n LL +                 v\n LL +             },\n LL +             _ => {\n- ...\n+LL +                 v2\n+LL +             },\n+LL +         }\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:75:5\n@@ -133,7 +141,9 @@ LL +             0 => foo(),\n LL +             _ => {\n LL +                 e.insert(v2);\n LL +             },\n- ...\n+LL +         };\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:85:5\n@@ -155,7 +165,26 @@ LL +         match 0 {\n LL +             0 if false => {\n LL +                 v\n LL +             },\n- ...\n+LL +             1 => {\n+LL +                 foo();\n+LL +                 v\n+LL +             },\n+LL +             2 | 3 => {\n+LL +                 for _ in 0..2 {\n+LL +                     foo();\n+LL +                 }\n+LL +                 if true {\n+LL +                     v\n+LL +                 } else {\n+LL +                     v2\n+LL +                 }\n+LL +             },\n+LL +             _ => {\n+LL +                 v2\n+LL +             },\n+LL +         }\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:119:5"}, {"sha": "e0f6671b460edc96084bbca3f6c54bbc838c6537", "filename": "src/tools/clippy/tests/ui/entry_with_else.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry_with_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry_with_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry_with_else.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -17,7 +17,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Occupied(mut e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:22:5\n@@ -37,7 +39,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Vacant(e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:28:5\n@@ -95,7 +99,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Occupied(mut e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:46:5\n@@ -115,7 +121,10 @@ LL +             if true { Some(e.insert(v)) } else { Some(e.insert(v2)) }\n LL +         }\n LL +         std::collections::hash_map::Entry::Vacant(e) => {\n LL +             e.insert(v);\n- ...\n+LL +             None\n+LL +         }\n+LL ~     };\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:52:5"}, {"sha": "45bf67acdb7361b20bea1636c0c8d3477eb8d3c3", "filename": "src/tools/clippy/tests/ui/let_unit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -32,7 +32,8 @@ LL +         .map(|i| i * 2)\n LL +         .filter(|i| i % 2 == 0)\n LL +         .map(|_| ())\n LL +         .next()\n- ...\n+LL +         .unwrap();\n+   |\n \n error: this let-binding has unit value\n   --> $DIR/let_unit.rs:80:5"}, {"sha": "0a903ed6fd4363c3f247562074ccff0ce46875bc", "filename": "src/tools/clippy/tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -122,7 +122,14 @@ LL +         let a = 42;\n LL +         let b = 21;\n LL +         if a < b {\n LL +             let c = 21;\n- ...\n+LL +             let d = 42;\n+LL +             if c < d {\n+LL +                 let _ = 42;\n+LL +             }\n+LL +         }\n+LL +         42\n+LL +     }\n+   |\n \n error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:92:1"}, {"sha": "7893ff31a6fdb790c7b358471afd470e6ea13828", "filename": "src/tools/clippy/tests/ui/needless_for_each_unfixable.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_for_each_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_for_each_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_for_each_unfixable.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -19,7 +19,8 @@ LL +             return;\n LL +         } else {\n LL +             println!(\"{}\", v);\n LL +         }\n- ...\n+LL +     }\n+   |\n help: ...and replace `return` with `continue`\n    |\n LL |             continue;"}, {"sha": "212a69ab94e6506d0aace70d6dee93b26aa205a3", "filename": "src/tools/clippy/tests/ui/new_without_default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -117,7 +117,8 @@ LL +             Self::new()\n LL +         }\n LL +     }\n LL + \n- ...\n+LL ~     impl<T> Foo<T> {\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "7ec4a566ff34be186c0da78582bee69f398d4d82", "filename": "src/tools/clippy/tests/ui/ptr_arg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -56,7 +56,8 @@ LL |     let f = e.clone(); // OK\n LL |     let g = x;\n LL ~     let h = g.to_owned();\n LL |     let i = (e).clone();\n- ...\n+LL ~     x.to_owned()\n+   |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:57:18"}, {"sha": "5ce95204416371028446da63f3c90488d6c85524", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -188,7 +188,9 @@ LL +         _ => mutex2.lock().unwrap(),\n LL +     }\n LL +     .s\n LL +     .len()\n- ...\n+LL +         > 1;\n+LL ~     match value\n+   |\n \n error: temporary with significant drop in match scrutinee\n   --> $DIR/significant_drop_in_scrutinee.rs:397:11\n@@ -211,7 +213,10 @@ LL +     } else {\n LL +         mutex2.lock().unwrap()\n LL +     }\n LL +     .s\n- ...\n+LL +     .len()\n+LL +         > 1;\n+LL ~     match value\n+   |\n \n error: temporary with significant drop in match scrutinee\n   --> $DIR/significant_drop_in_scrutinee.rs:451:11"}, {"sha": "11cfe66a30e850975c859a3822d2f8c34efa7ad3", "filename": "src/tools/clippy/tests/ui/unit_arg.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -137,7 +137,13 @@ LL +         foo(1);\n LL +     };\n LL +     {\n LL +         foo(2);\n- ...\n+LL +         foo(3);\n+LL +     };\n+LL +     taking_multiple_units(\n+LL +         (),\n+LL +         (),\n+LL ~     );\n+   |\n \n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:85:13"}, {"sha": "a6a0b22cf689fffdda4211c7dd0643cca561edbe", "filename": "src/tools/clippy/tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74aa55b3fcae638ce3df9111ef7822474f9a2b61/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.stderr?ref=74aa55b3fcae638ce3df9111ef7822474f9a2b61", "patch": "@@ -23,7 +23,8 @@ LL |     if a {\n LL |         Some(-1);\n LL ~         2\n LL |     } else {\n- ...\n+LL ~         return 1337;\n+   |\n \n error: this function's return value is unnecessarily wrapped by `Option`\n   --> $DIR/unnecessary_wraps.rs:21:1\n@@ -122,7 +123,8 @@ LL |     if a {\n LL |         Some(());\n LL ~         \n LL |     } else {\n- ...\n+LL ~         return ;\n+   |\n \n error: this function's return value is unnecessary\n   --> $DIR/unnecessary_wraps.rs:117:1"}]}