{"sha": "ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmYxM2VmMDY2N2NlOTBmNTVhYjBmMTUwNmJmNWVlN2I4NTJkOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-04T20:03:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-04T20:03:55Z"}, "message": "Auto merge of #21885 - dotdash:nonnull_load, r=alexcrichton\n\nThese pointers are never null, let's tell LLVM about it.", "tree": {"sha": "ac7d63102af2153d66beff88a388e08a5159d044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac7d63102af2153d66beff88a388e08a5159d044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "html_url": "https://github.com/rust-lang/rust/commit/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae76d5c1cca83eff3a4716550da357ca2abcd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae76d5c1cca83eff3a4716550da357ca2abcd21", "html_url": "https://github.com/rust-lang/rust/commit/3ae76d5c1cca83eff3a4716550da357ca2abcd21"}, {"sha": "1a56a1a515ef2cda3425ff09bac9504a77616fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a56a1a515ef2cda3425ff09bac9504a77616fec", "html_url": "https://github.com/rust-lang/rust/commit/1a56a1a515ef2cda3425ff09bac9504a77616fec"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "26af9c9622ffe785b79c1f9c456b5bcfd388772e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "patch": "@@ -377,7 +377,13 @@ pub enum MetadataType {\n     MD_prof = 2,\n     MD_fpmath = 3,\n     MD_range = 4,\n-    MD_tbaa_struct = 5\n+    MD_tbaa_struct = 5,\n+    MD_invariant_load = 6,\n+    MD_alias_scope = 7,\n+    MD_noalias = 8,\n+    MD_nontemporal = 9,\n+    MD_mem_parallel_loop_access = 10,\n+    MD_nonnull = 11,\n }\n \n // Inline Asm Dialect"}, {"sha": "c2af6ec8c8ad82183cea6d88dfb267ad9c6c1b4e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "patch": "@@ -1033,6 +1033,8 @@ pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n         // for this leads to bad optimizations, so its arg type is an appropriately sized integer\n         // and we have to convert it\n         Load(cx, BitCast(cx, ptr, type_of::arg_type_of(cx.ccx(), t).ptr_to()))\n+    } else if ty::type_is_region_ptr(t) || ty::type_is_unique(t) {\n+        LoadNonNull(cx, ptr)\n     } else if ty::type_is_char(t) {\n         // a char is a Unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only."}, {"sha": "c288a8196e63c0b8e9fcbe53fc5e3fa41cf49a8a", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "patch": "@@ -629,6 +629,23 @@ pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: u64,\n     }\n }\n \n+pub fn LoadNonNull(cx: Block, ptr: ValueRef) -> ValueRef {\n+    if cx.unreachable.get() {\n+        let ccx = cx.fcx.ccx;\n+        let ty = val_ty(ptr);\n+        let eltty = if ty.kind() == llvm::Array {\n+            ty.element_type()\n+        } else {\n+            ccx.int_type()\n+        };\n+        unsafe {\n+            llvm::LLVMGetUndef(eltty.to_ref())\n+        }\n+    } else {\n+        B(cx).load_nonnull(ptr)\n+    }\n+}\n+\n pub fn Store(cx: Block, val: ValueRef, ptr: ValueRef) {\n     if cx.unreachable.get() { return; }\n     B(cx).store(val, ptr)"}, {"sha": "e268c2f0d5cc2b1dc766d7aab821f62e41894fe3", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "patch": "@@ -22,6 +22,7 @@ use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n \n use std::ffi::CString;\n+use std::ptr;\n use syntax::codemap::Span;\n \n pub struct Builder<'a, 'tcx: 'a> {\n@@ -498,6 +499,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         value\n     }\n \n+    pub fn load_nonnull(&self, ptr: ValueRef) -> ValueRef {\n+        let value = self.load(ptr);\n+        unsafe {\n+            llvm::LLVMSetMetadata(value, llvm::MD_nonnull as c_uint,\n+                                  llvm::LLVMMDNodeInContext(self.ccx.llcx(), ptr::null(), 0));\n+        }\n+\n+        value\n+    }\n+\n     pub fn store(&self, val: ValueRef, ptr: ValueRef) {\n         debug!(\"Store {} -> {}\",\n                self.ccx.tn().val_to_string(val),"}]}