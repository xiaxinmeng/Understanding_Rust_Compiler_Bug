{"sha": "ad3de7fdb58cb2beb06780794006b4184807c75e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkM2RlN2ZkYjU4Y2IyYmViMDY3ODA3OTQwMDZiNDE4NDgwN2M3NWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-16T23:31:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-17T18:39:51Z"}, "message": "rustc: Hint to the linker about static/shared libs\n\nIf a linker finds both a static and a dynamic version of the same library, then\nthe linker often chooses the dynamic version. This is surprising when a native\nlibrary is specified as being \"static\" in rust source. This modifies the linker\ncommand line to obey the hints given in rust source files and instructing the\nlinker to prefer a particular version of a found library.\n\nUnfortunately, this patch has no effect on osx because the linker supports\nno such hint, and it also has no effect on windows because the linker apparently\njust ignores it. For now this is predominately used to enable the previous patch\nof linking to libstdc++ statically, but more support would need to be added for\nthis in the future if we wanted to officially support it.\n\ncc #12557 (doesn't close because it doesn't support OSX and windows)", "tree": {"sha": "3ceea0731dd68ea6ee571070b83660a1a03cc9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ceea0731dd68ea6ee571070b83660a1a03cc9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3de7fdb58cb2beb06780794006b4184807c75e", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3de7fdb58cb2beb06780794006b4184807c75e", "html_url": "https://github.com/rust-lang/rust/commit/ad3de7fdb58cb2beb06780794006b4184807c75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3de7fdb58cb2beb06780794006b4184807c75e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdee8b904178e13616cea8c31bcdb1f063ddef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/acdee8b904178e13616cea8c31bcdb1f063ddef5", "html_url": "https://github.com/rust-lang/rust/commit/acdee8b904178e13616cea8c31bcdb1f063ddef5"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "8ef5677db2764aaaa02dec9e3e67e8d5fe273e41", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad3de7fdb58cb2beb06780794006b4184807c75e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3de7fdb58cb2beb06780794006b4184807c75e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=ad3de7fdb58cb2beb06780794006b4184807c75e", "patch": "@@ -1298,9 +1298,22 @@ fn add_local_native_libraries(args: &mut Vec<~str>, sess: &Session) {\n         args.push(\"-L\" + path.as_str().unwrap().to_owned());\n     }\n \n+    // Some platforms take hints about whether a library is static or dynamic.\n+    // For those that support this, we ensure we pass the option if the library\n+    // was flagged \"static\" (most defaults are dynamic) to ensure that if\n+    // libfoo.a and libfoo.so both exist that the right one is chosen.\n+    let takes_hints = sess.targ_cfg.os != abi::OsMacos;\n+\n     for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n         match kind {\n             cstore::NativeUnknown | cstore::NativeStatic => {\n+                if takes_hints {\n+                    if kind == cstore::NativeStatic {\n+                        args.push(\"-Wl,-Bstatic\".to_owned());\n+                    } else {\n+                        args.push(\"-Wl,-Bdynamic\".to_owned());\n+                    }\n+                }\n                 args.push(\"-l\" + *l);\n             }\n             cstore::NativeFramework => {\n@@ -1309,6 +1322,9 @@ fn add_local_native_libraries(args: &mut Vec<~str>, sess: &Session) {\n             }\n         }\n     }\n+    if takes_hints {\n+        args.push(\"-Wl,-Bdynamic\".to_owned());\n+    }\n }\n \n // # Rust Crate linking"}]}