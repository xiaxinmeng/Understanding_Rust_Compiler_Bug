{"sha": "311814a1a963247df61a2725150a2f3fb37218df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMTgxNGExYTk2MzI0N2RmNjFhMjcyNTE1MGEyZjNmYjM3MjE4ZGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:33Z"}, "message": "Rollup merge of #49193 - davidtwco:issue-29893, r=alexcrichton\n\nHost compiler documentation\n\nFixes #29893. Rust Central Station PR: rust-lang/rust-central-station#40\n\nr? @alexcrichton", "tree": {"sha": "1e3dd842dff876fbee3c84708f9239846817cbaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e3dd842dff876fbee3c84708f9239846817cbaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311814a1a963247df61a2725150a2f3fb37218df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopJCRBK7hj4Ov3rIwAAdHIIAECSyoDGKSRdLZM6nk/cuCTh\n/o0srx3r5KbIlv7o9w5OBnBM1UHd2hcb6KkJ13k/tWQTu6R2p75robW0apwetlOG\nkogjSxg6wyUljCPqM9W70ZjhsgBnIXthDc3crsbAQI5efYS9ANf6YI3WpBnghT76\nZ7YGZiWXZjyB8R6gG/gVuyphAadfW/n4r0EIXVijL9WU5RxsKWCqr7lR84ufYBwH\noKIbyOchw0CPHoUPEoBRt7I5gdZEso8bEKZ63sgc/0g47W+HLH7CqcdyIuFHcgc5\nZ8+R7L7kgYIfI3kN9QBE7sYVSR1YfAnsY3BR5OPmurOiLQun8lVHl1ic4Lxkg4Q=\n=t677\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e3dd842dff876fbee3c84708f9239846817cbaa\nparent 8d57071cbbdf3a5e7006cae303d6d14c905c8fc0\nparent 73fa6d52ed99651940267affa941a1069cc20f35\nauthor kennytm <kennytm@gmail.com> 1521912393 +0800\ncommitter GitHub <noreply@github.com> 1521912393 +0800\n\nRollup merge of #49193 - davidtwco:issue-29893, r=alexcrichton\n\nHost compiler documentation\n\nFixes #29893. Rust Central Station PR: rust-lang/rust-central-station#40\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311814a1a963247df61a2725150a2f3fb37218df", "html_url": "https://github.com/rust-lang/rust/commit/311814a1a963247df61a2725150a2f3fb37218df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311814a1a963247df61a2725150a2f3fb37218df/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0", "html_url": "https://github.com/rust-lang/rust/commit/8d57071cbbdf3a5e7006cae303d6d14c905c8fc0"}, {"sha": "73fa6d52ed99651940267affa941a1069cc20f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/73fa6d52ed99651940267affa941a1069cc20f35", "html_url": "https://github.com/rust-lang/rust/commit/73fa6d52ed99651940267affa941a1069cc20f35"}], "stats": {"total": 247, "additions": 202, "deletions": 45}, "files": [{"sha": "eb23236638b13047942fb30fac78730003c515b4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -321,11 +321,13 @@ impl<'a> Builder<'a> {\n                 test::RunMake),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n-                doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,\n-                doc::Reference, doc::Rustdoc, doc::RustByExample, doc::CargoBook),\n-            Kind::Dist => describe!(dist::Docs, dist::Mingw, dist::Rustc, dist::DebuggerScripts,\n-                dist::Std, dist::Analysis, dist::Src, dist::PlainSourceTarball, dist::Cargo,\n-                dist::Rls, dist::Rustfmt, dist::Extended, dist::HashSign),\n+                doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,\n+                doc::ErrorIndex, doc::Nomicon, doc::Reference, doc::Rustdoc, doc::RustByExample,\n+                doc::CargoBook),\n+            Kind::Dist => describe!(dist::Docs, dist::RustcDocs, dist::Mingw, dist::Rustc,\n+                dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n+                dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Rustfmt, dist::Extended,\n+                dist::HashSign),\n             Kind::Install => describe!(install::Docs, install::Std, install::Cargo, install::Rls,\n                 install::Rustfmt, install::Analysis, install::Src, install::Rustc),\n         }"}, {"sha": "873579d0788df5f253abcfadfcbdac22d082a894", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -102,7 +102,7 @@ impl Step for Docs {\n \n         let dst = image.join(\"share/doc/rust/html\");\n         t!(fs::create_dir_all(&dst));\n-        let src = build.out.join(host).join(\"doc\");\n+        let src = build.doc_out(host);\n         cp_r(&src, &dst);\n \n         let mut cmd = rust_installer(builder);\n@@ -120,14 +120,69 @@ impl Step for Docs {\n         build.run(&mut cmd);\n         t!(fs::remove_dir_all(&image));\n \n-        // As part of this step, *also* copy the docs directory to a directory which\n-        // buildbot typically uploads.\n-        if host == build.build {\n-            let dst = distdir(build).join(\"doc\").join(build.rust_package_vers());\n-            t!(fs::create_dir_all(&dst));\n-            cp_r(&src, &dst);\n+        distdir(build).join(format!(\"{}-{}.tar.gz\", name, host))\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustcDocs {\n+    pub stage: u32,\n+    pub host: Interned<String>,\n+}\n+\n+impl Step for RustcDocs {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/librustc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(RustcDocs {\n+            stage: run.builder.top_stage,\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Builds the `rustc-docs` installer component.\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        let build = builder.build;\n+        let host = self.host;\n+\n+        let name = pkgname(build, \"rustc-docs\");\n+\n+        println!(\"Dist compiler docs ({})\", host);\n+        if !build.config.compiler_docs {\n+            println!(\"\\tskipping - compiler docs disabled\");\n+            return distdir(build).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n+        builder.default_doc(None);\n+\n+        let image = tmpdir(build).join(format!(\"{}-{}-image\", name, host));\n+        let _ = fs::remove_dir_all(&image);\n+\n+        let dst = image.join(\"share/doc/rust/html\");\n+        t!(fs::create_dir_all(&dst));\n+        let src = build.compiler_doc_out(host);\n+        cp_r(&src, &dst);\n+\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rustc-Documentation\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=Rustc-documentation-is-installed.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(build))\n+           .arg(\"--output-dir\").arg(&distdir(build))\n+           .arg(format!(\"--package-name={}-{}\", name, host))\n+           .arg(\"--component-name=rustc-docs\")\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+           .arg(\"--bulk-dirs=share/doc/rust/html\");\n+        build.run(&mut cmd);\n+        t!(fs::remove_dir_all(&image));\n+\n         distdir(build).join(format!(\"{}-{}.tar.gz\", name, host))\n     }\n }"}, {"sha": "44073a5b0757237bda2fe96abb1aa873e6432756", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 126, "deletions": 32, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -17,12 +17,13 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n+use std::collections::HashSet;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io;\n use std::path::{PathBuf, Path};\n \n-use Mode;\n+use {Build, Mode};\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n@@ -483,21 +484,17 @@ impl Step for Std {\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n         compile::std_cargo(builder, &compiler, target, &mut cargo);\n \n-        // We don't want to build docs for internal std dependencies unless\n-        // in compiler-docs mode. When not in that mode, we whitelist the crates\n-        // for which docs must be built.\n-        if !build.config.compiler_docs {\n-            cargo.arg(\"--no-deps\");\n-            for krate in &[\"alloc\", \"core\", \"std\", \"std_unicode\"] {\n-                cargo.arg(\"-p\").arg(krate);\n-                // Create all crate output directories first to make sure rustdoc uses\n-                // relative links.\n-                // FIXME: Cargo should probably do this itself.\n-                t!(fs::create_dir_all(out_dir.join(krate)));\n-            }\n+        // Keep a whitelist so we do not build internal stdlib crates, these will be\n+        // build by the rustc step later if enabled.\n+        cargo.arg(\"--no-deps\");\n+        for krate in &[\"alloc\", \"core\", \"std\", \"std_unicode\"] {\n+            cargo.arg(\"-p\").arg(krate);\n+            // Create all crate output directories first to make sure rustdoc uses\n+            // relative links.\n+            // FIXME: Cargo should probably do this itself.\n+            t!(fs::create_dir_all(out_dir.join(krate)));\n         }\n \n-\n         build.run(&mut cargo);\n         cp_r(&my_out, &out);\n     }\n@@ -564,12 +561,12 @@ impl Step for Test {\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Rustc {\n+pub struct WhitelistedRustc {\n     stage: u32,\n     target: Interned<String>,\n }\n \n-impl Step for Rustc {\n+impl Step for WhitelistedRustc {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -580,21 +577,26 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(Rustc {\n+        run.builder.ensure(WhitelistedRustc {\n             stage: run.builder.top_stage,\n             target: run.target,\n         });\n     }\n \n-    /// Generate all compiler documentation.\n+    /// Generate whitelisted compiler crate documentation.\n     ///\n-    /// This will generate all documentation for the compiler libraries and their\n-    /// dependencies. This is largely just a wrapper around `cargo doc`.\n+    /// This will generate all documentation for crates that are whitelisted\n+    /// to be included in the standard documentation. This documentation is\n+    /// included in the standard Rust documentation, so we should always\n+    /// document it and symlink to merge with the rest of the std and test\n+    /// documentation. We don't build other compiler documentation\n+    /// here as we want to be able to keep it separate from the standard\n+    /// documentation. This is largely just a wrapper around `cargo doc`.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let stage = self.stage;\n         let target = self.target;\n-        println!(\"Documenting stage{} compiler ({})\", stage, target);\n+        println!(\"Documenting stage{} whitelisted compiler ({})\", stage, target);\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n@@ -620,24 +622,116 @@ impl Step for Rustc {\n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n         compile::rustc_cargo(build, &mut cargo);\n \n-        if build.config.compiler_docs {\n-            // src/rustc/Cargo.toml contains a bin crate called rustc which\n-            // would otherwise overwrite the docs for the real rustc lib crate.\n-            cargo.arg(\"-p\").arg(\"rustc_driver\");\n-        } else {\n-            // Like with libstd above if compiler docs aren't enabled then we're not\n-            // documenting internal dependencies, so we have a whitelist.\n-            cargo.arg(\"--no-deps\");\n-            for krate in &[\"proc_macro\"] {\n-                cargo.arg(\"-p\").arg(krate);\n-            }\n+        // We don't want to build docs for internal compiler dependencies in this\n+        // step (there is another step for that). Therefore, we whitelist the crates\n+        // for which docs must be built.\n+        cargo.arg(\"--no-deps\");\n+        for krate in &[\"proc_macro\"] {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n         build.run(&mut cargo);\n         cp_r(&my_out, &out);\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustc {\n+    stage: u32,\n+    target: Interned<String>,\n+}\n+\n+impl Step for Rustc {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let builder = run.builder;\n+        run.krate(\"rustc-main\").default_condition(builder.build.config.docs)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Generate compiler documentation.\n+    ///\n+    /// This will generate all documentation for compiler and dependencies.\n+    /// Compiler documentation is distributed separately, so we make sure\n+    /// we do not merge it with the other documentation from std, test and\n+    /// proc_macros. This is largely just a wrapper around `cargo doc`.\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let stage = self.stage;\n+        let target = self.target;\n+        println!(\"Documenting stage{} compiler ({})\", stage, target);\n+        let out = build.compiler_doc_out(target);\n+        t!(fs::create_dir_all(&out));\n+        let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler.host);\n+        let compiler = if build.force_use_stage1(compiler, target) {\n+            builder.compiler(1, compiler.host)\n+        } else {\n+            compiler\n+        };\n+\n+        if !build.config.compiler_docs {\n+            println!(\"\\tskipping - compiler docs disabled\");\n+            return;\n+        }\n+\n+        // Build libstd docs so that we generate relative links\n+        builder.ensure(Std { stage, target });\n+\n+        builder.ensure(compile::Rustc { compiler, target });\n+        let out_dir = build.stage_out(compiler, Mode::Librustc)\n+                           .join(target).join(\"doc\");\n+        // We do not symlink to the same shared folder that already contains std library\n+        // documentation from previous steps as we do not want to include that.\n+        build.clear_if_dirty(&out, &rustdoc);\n+        t!(symlink_dir_force(&out, &out_dir));\n+\n+        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        compile::rustc_cargo(build, &mut cargo);\n+\n+        // Only include compiler crates, no dependencies of those, such as `libc`.\n+        cargo.arg(\"--no-deps\");\n+\n+        // Find dependencies for top level crates.\n+        let mut compiler_crates = HashSet::new();\n+        for root_crate in &[\"rustc\", \"rustc_driver\"] {\n+            let interned_root_crate = INTERNER.intern_str(root_crate);\n+            find_compiler_crates(&build, &interned_root_crate, &mut compiler_crates);\n+        }\n+\n+        for krate in &compiler_crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n+        build.run(&mut cargo);\n+    }\n+}\n+\n+fn find_compiler_crates(\n+    build: &Build,\n+    name: &Interned<String>,\n+    crates: &mut HashSet<Interned<String>>\n+) {\n+    // Add current crate.\n+    crates.insert(*name);\n+\n+    // Look for dependencies.\n+    for dep in build.crates.get(name).unwrap().deps.iter() {\n+        if build.crates.get(dep).unwrap().is_local(build) {\n+            find_compiler_crates(build, dep, crates);\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n     target: Interned<String>,"}, {"sha": "b2c8ac24d72d8cd752482158d2ada042f8fff929", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -511,6 +511,11 @@ impl Build {\n         self.out.join(&*target).join(\"doc\")\n     }\n \n+    /// Output directory for all documentation for a target\n+    fn compiler_doc_out(&self, target: Interned<String>) -> PathBuf {\n+        self.out.join(&*target).join(\"compiler-doc\")\n+    }\n+\n     /// Output directory for some generated md crate documentation for a target (temporary)\n     fn md_doc_out(&self, target: Interned<String>) -> Interned<PathBuf> {\n         INTERNER.intern_path(self.out.join(&*target).join(\"md-doc\"))"}, {"sha": "28c97e8c6dbf9b70987ca9b64c5c49d272add3ea", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -84,7 +84,8 @@ ENV HOSTS=x86_64-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --enable-full-tools \\\n       --enable-sanitizers \\\n-      --enable-profiler\n+      --enable-profiler \\\n+      --enable-compiler-docs\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}]}