{"sha": "bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMmZjN2ZiODBkNmY1NWEwMThlMjRkZTA3ZDFlYmRiYzc5ZDkxMzY=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-04-17T06:54:28Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:25:12Z"}, "message": "Fix review comments", "tree": {"sha": "e3810c061708b30d8b8352d90f0f7280d62cf3bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3810c061708b30d8b8352d90f0f7280d62cf3bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "html_url": "https://github.com/rust-lang/rust/commit/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/comments", "author": null, "committer": null, "parents": [{"sha": "b61a28b2a1db297ed3bd15a3c5ac5c8c40feb586", "url": "https://api.github.com/repos/rust-lang/rust/commits/b61a28b2a1db297ed3bd15a3c5ac5c8c40feb586", "html_url": "https://github.com/rust-lang/rust/commit/b61a28b2a1db297ed3bd15a3c5ac5c8c40feb586"}], "stats": {"total": 156, "additions": 58, "deletions": 98}, "files": [{"sha": "67d330ac89255ac576de1e9dd37609d317a46d35", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "patch": "@@ -13,7 +13,7 @@ use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::undo_log::{Rollback, Snapshots};\n+use rustc_data_structures::undo_log::Rollback;\n use rustc_data_structures::unify as ut;\n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n@@ -151,16 +151,16 @@ pub struct InferCtxtInner<'tcx> {\n     /// We instantiate `UnificationTable` with `bounds<Ty>` because the types\n     /// that might instantiate a general type variable have an order,\n     /// represented by its upper and lower bounds.\n-    type_variables: type_variable::TypeVariableStorage<'tcx>,\n+    type_variable_storage: type_variable::TypeVariableStorage<'tcx>,\n \n     /// Map from const parameter variable to the kind of const it represents.\n-    const_unification_table: ut::UnificationTableStorage<ty::ConstVid<'tcx>>,\n+    const_unification_storage: ut::UnificationTableStorage<ty::ConstVid<'tcx>>,\n \n     /// Map from integral variable to the kind of integer it represents.\n-    int_unification_table: ut::UnificationTableStorage<ty::IntVid>,\n+    int_unification_storage: ut::UnificationTableStorage<ty::IntVid>,\n \n     /// Map from floating variable to the kind of float it represents.\n-    float_unification_table: ut::UnificationTableStorage<ty::FloatVid>,\n+    float_unification_storage: ut::UnificationTableStorage<ty::FloatVid>,\n \n     /// Tracks the set of region variables and the constraints between them.\n     /// This is initially `Some(_)` but when\n@@ -209,11 +209,11 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     fn new() -> InferCtxtInner<'tcx> {\n         InferCtxtInner {\n             projection_cache: Default::default(),\n-            type_variables: type_variable::TypeVariableStorage::new(),\n+            type_variable_storage: type_variable::TypeVariableStorage::new(),\n             undo_log: InferCtxtUndoLogs::default(),\n-            const_unification_table: ut::UnificationTableStorage::new(),\n-            int_unification_table: ut::UnificationTableStorage::new(),\n-            float_unification_table: ut::UnificationTableStorage::new(),\n+            const_unification_storage: ut::UnificationTableStorage::new(),\n+            int_unification_storage: ut::UnificationTableStorage::new(),\n+            float_unification_storage: ut::UnificationTableStorage::new(),\n             region_constraints: Some(RegionConstraintStorage::new()),\n             region_obligations: vec![],\n         }\n@@ -223,12 +223,12 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         &self.region_obligations\n     }\n \n-    pub fn projection_cache(&mut self) -> traits::ProjectionCache<'tcx, '_> {\n+    pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {\n         self.projection_cache.with_log(&mut self.undo_log)\n     }\n \n-    fn type_variables(&mut self) -> type_variable::TypeVariableTable<'tcx, '_> {\n-        self.type_variables.with_log(&mut self.undo_log)\n+    fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {\n+        self.type_variable_storage.with_log(&mut self.undo_log)\n     }\n \n     fn int_unification_table(\n@@ -240,7 +240,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             &mut InferCtxtUndoLogs<'tcx>,\n         >,\n     > {\n-        self.int_unification_table.with_log(&mut self.undo_log)\n+        self.int_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     fn float_unification_table(\n@@ -252,7 +252,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             &mut InferCtxtUndoLogs<'tcx>,\n         >,\n     > {\n-        self.float_unification_table.with_log(&mut self.undo_log)\n+        self.float_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     fn const_unification_table(\n@@ -264,7 +264,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             &mut InferCtxtUndoLogs<'tcx>,\n         >,\n     > {\n-        self.const_unification_table.with_log(&mut self.undo_log)\n+        self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'tcx, '_> {\n@@ -868,29 +868,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.in_snapshot.set(was_in_snapshot);\n         self.universe.set(universe);\n \n-        let InferCtxtInner {\n-            type_variables,\n-            const_unification_table,\n-            int_unification_table,\n-            float_unification_table,\n-            region_constraints,\n-            projection_cache,\n-            region_obligations,\n-            undo_log,\n-            ..\n-        } = &mut *self.inner.borrow_mut();\n-        undo_log.rollback_to(\n-            || undo_log::RollbackView {\n-                type_variables,\n-                const_unification_table,\n-                int_unification_table,\n-                float_unification_table,\n-                region_constraints: region_constraints.as_mut().unwrap(),\n-                projection_cache,\n-                region_obligations,\n-            },\n-            undo_snapshot,\n-        );\n+        self.inner.borrow_mut().rollback_to(undo_snapshot);\n     }\n \n     fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {\n@@ -900,8 +878,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         self.in_snapshot.set(was_in_snapshot);\n \n-        let mut inner = self.inner.borrow_mut();\n-        inner.undo_log.commit(undo_snapshot);\n+        self.inner.borrow_mut().commit(undo_snapshot);\n     }\n \n     /// Executes `f` and commit the bindings."}, {"sha": "68f84d4d1c3469f06878a4437fffefe746f95265", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "patch": "@@ -11,7 +11,7 @@ use std::cmp;\n use std::marker::PhantomData;\n use std::ops::Range;\n \n-use rustc_data_structures::undo_log::{Rollback, Snapshots, UndoLogs};\n+use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n \n pub(crate) enum UndoLog<'tcx> {\n     EqRelation(sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>),\n@@ -81,7 +81,7 @@ pub struct TypeVariableStorage<'tcx> {\n     sub_relations: ut::UnificationTableStorage<ty::TyVid>,\n }\n \n-pub struct TypeVariableTable<'tcx, 'a> {\n+pub struct TypeVariableTable<'a, 'tcx> {\n     values: &'a mut sv::SnapshotVecStorage<Delegate>,\n \n     eq_relations: &'a mut ut::UnificationTableStorage<TyVidEqKey<'tcx>>,\n@@ -168,13 +168,13 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n-    ) -> TypeVariableTable<'tcx, 'a> {\n+    ) -> TypeVariableTable<'a, 'tcx> {\n         let TypeVariableStorage { values, eq_relations, sub_relations } = self;\n         TypeVariableTable { values, eq_relations, sub_relations, undo_log }\n     }\n }\n \n-impl<'tcx> TypeVariableTable<'tcx, '_> {\n+impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     /// Returns the diverges flag given when `vid` was created.\n     ///\n     /// Note that this function does not return care whether"}, {"sha": "5bb8ce8f66bb135d2f7b76291df969856525b8df", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 34, "deletions": 51, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "patch": "@@ -1,16 +1,12 @@\n use std::marker::PhantomData;\n \n use rustc_data_structures::snapshot_vec as sv;\n-use rustc_data_structures::undo_log::{Rollback, Snapshots, UndoLogs};\n+use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n use rustc_data_structures::unify as ut;\n-use rustc_hir as hir;\n use rustc_middle::ty;\n \n use crate::{\n-    infer::{\n-        region_constraints::{self, RegionConstraintStorage},\n-        type_variable, RegionObligation,\n-    },\n+    infer::{region_constraints, type_variable, InferCtxtInner},\n     traits,\n };\n \n@@ -19,6 +15,7 @@ pub struct Snapshot<'tcx> {\n     _marker: PhantomData<&'tcx ()>,\n }\n \n+/// Records the 'undo' data fora single operation that affects some form of inference variable.\n pub(crate) enum UndoLog<'tcx> {\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n@@ -96,26 +93,18 @@ impl<'tcx> From<traits::UndoLog<'tcx>> for UndoLog<'tcx> {\n     }\n }\n \n-pub(super) struct RollbackView<'tcx, 'a> {\n-    pub(super) type_variables: &'a mut type_variable::TypeVariableStorage<'tcx>,\n-    pub(super) const_unification_table: &'a mut ut::UnificationTableStorage<ty::ConstVid<'tcx>>,\n-    pub(super) int_unification_table: &'a mut ut::UnificationTableStorage<ty::IntVid>,\n-    pub(super) float_unification_table: &'a mut ut::UnificationTableStorage<ty::FloatVid>,\n-    pub(super) region_constraints: &'a mut RegionConstraintStorage<'tcx>,\n-    pub(super) projection_cache: &'a mut traits::ProjectionCacheStorage<'tcx>,\n-    pub(super) region_obligations: &'a mut Vec<(hir::HirId, RegionObligation<'tcx>)>,\n-}\n-\n-impl<'tcx> Rollback<UndoLog<'tcx>> for RollbackView<'tcx, '_> {\n+impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n     fn reverse(&mut self, undo: UndoLog<'tcx>) {\n         match undo {\n-            UndoLog::TypeVariables(undo) => self.type_variables.reverse(undo),\n-            UndoLog::ConstUnificationTable(undo) => self.const_unification_table.reverse(undo),\n-            UndoLog::IntUnificationTable(undo) => self.int_unification_table.reverse(undo),\n-            UndoLog::FloatUnificationTable(undo) => self.float_unification_table.reverse(undo),\n-            UndoLog::RegionConstraintCollector(undo) => self.region_constraints.reverse(undo),\n+            UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),\n+            UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),\n+            UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),\n+            UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),\n+            UndoLog::RegionConstraintCollector(undo) => {\n+                self.region_constraints.as_mut().unwrap().reverse(undo)\n+            }\n             UndoLog::RegionUnificationTable(undo) => {\n-                self.region_constraints.unification_table.reverse(undo)\n+                self.region_constraints.as_mut().unwrap().unification_table.reverse(undo)\n             }\n             UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),\n             UndoLog::PushRegionObligation => {\n@@ -163,58 +152,52 @@ where\n     }\n }\n \n-impl<'tcx> Snapshots<UndoLog<'tcx>> for InferCtxtUndoLogs<'tcx> {\n-    type Snapshot = Snapshot<'tcx>;\n-    fn actions_since_snapshot(&self, snapshot: &Self::Snapshot) -> &[UndoLog<'tcx>] {\n-        &self.logs[snapshot.undo_len..]\n-    }\n-\n-    fn start_snapshot(&mut self) -> Self::Snapshot {\n-        self.num_open_snapshots += 1;\n-        Snapshot { undo_len: self.logs.len(), _marker: PhantomData }\n-    }\n-\n-    fn rollback_to<R>(&mut self, values: impl FnOnce() -> R, snapshot: Self::Snapshot)\n-    where\n-        R: Rollback<UndoLog<'tcx>>,\n-    {\n+impl<'tcx> InferCtxtInner<'tcx> {\n+    pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {\n         debug!(\"rollback_to({})\", snapshot.undo_len);\n-        self.assert_open_snapshot(&snapshot);\n+        self.undo_log.assert_open_snapshot(&snapshot);\n \n-        if self.logs.len() > snapshot.undo_len {\n-            let mut values = values();\n-            while self.logs.len() > snapshot.undo_len {\n-                values.reverse(self.logs.pop().unwrap());\n-            }\n+        while self.undo_log.logs.len() > snapshot.undo_len {\n+            let undo = self.undo_log.logs.pop().unwrap();\n+            self.reverse(undo);\n         }\n \n-        if self.num_open_snapshots == 1 {\n+        if self.undo_log.num_open_snapshots == 1 {\n             // The root snapshot. It's safe to clear the undo log because\n             // there's no snapshot further out that we might need to roll back\n             // to.\n             assert!(snapshot.undo_len == 0);\n-            self.logs.clear();\n+            self.undo_log.logs.clear();\n         }\n \n-        self.num_open_snapshots -= 1;\n+        self.undo_log.num_open_snapshots -= 1;\n     }\n \n-    fn commit(&mut self, snapshot: Self::Snapshot) {\n+    pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {\n         debug!(\"commit({})\", snapshot.undo_len);\n \n-        if self.num_open_snapshots == 1 {\n+        if self.undo_log.num_open_snapshots == 1 {\n             // The root snapshot. It's safe to clear the undo log because\n             // there's no snapshot further out that we might need to roll back\n             // to.\n             assert!(snapshot.undo_len == 0);\n-            self.logs.clear();\n+            self.undo_log.logs.clear();\n         }\n \n-        self.num_open_snapshots -= 1;\n+        self.undo_log.num_open_snapshots -= 1;\n     }\n }\n \n impl<'tcx> InferCtxtUndoLogs<'tcx> {\n+    pub fn actions_since_snapshot(&self, snapshot: &Snapshot<'tcx>) -> &[UndoLog<'tcx>] {\n+        &self.logs[snapshot.undo_len..]\n+    }\n+\n+    pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {\n+        self.num_open_snapshots += 1;\n+        Snapshot { undo_len: self.logs.len(), _marker: PhantomData }\n+    }\n+\n     pub(crate) fn region_constraints_in_snapshot(\n         &self,\n         s: &Snapshot<'tcx>,"}, {"sha": "f0d21a7d022daf80dcb64f002a3e64ca2d804b13", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=bc2fc7fb80d6f55a018e24de07d1ebdbc79d9136", "patch": "@@ -65,7 +65,7 @@ impl<'tcx, T> Normalized<'tcx, T> {\n //\n // FIXME: we probably also want some sort of cross-infcx cache here to\n // reduce the amount of duplication. Let's see what we get with the Chalk reforms.\n-pub struct ProjectionCache<'tcx, 'a> {\n+pub struct ProjectionCache<'a, 'tcx> {\n     map: &'a mut SnapshotMapStorage<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n@@ -98,12 +98,12 @@ impl<'tcx> ProjectionCacheStorage<'tcx> {\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n-    ) -> ProjectionCache<'tcx, 'a> {\n+    ) -> ProjectionCache<'a, 'tcx> {\n         ProjectionCache { map: &mut self.map, undo_log }\n     }\n }\n \n-impl<'tcx> ProjectionCache<'tcx, '_> {\n+impl<'tcx> ProjectionCache<'_, 'tcx> {\n     fn map(\n         &mut self,\n     ) -> SnapshotMapRef<"}]}