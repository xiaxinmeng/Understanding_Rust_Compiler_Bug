{"sha": "3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNjhmNWYzZTc3NWI1ODU0YzQwZTFhZDE0MzNhOGE3YzhjNTNlMWY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-14T04:46:56Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Improved BodyCache body impl so it only returns a sharable ref, add new body_mut method, fix visit macros, simplify usage in codegen_ssa analyzer", "tree": {"sha": "bc22028f3861c5879fbb76169ca40b96c96f789f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc22028f3861c5879fbb76169ca40b96c96f789f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "html_url": "https://github.com/rust-lang/rust/commit/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b1d9e79861dcc40cfcfcf7faf5a890369f9693", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b1d9e79861dcc40cfcfcf7faf5a890369f9693", "html_url": "https://github.com/rust-lang/rust/commit/30b1d9e79861dcc40cfcfcf7faf5a890369f9693"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "103b24ecf6169260b5e429d260c3898c8daaf356", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> BodyCache<&'a Body<'tcx>> {\n     }\n \n     #[inline]\n-    pub fn body(&self) -> &Body<'tcx> {\n+    pub fn body(&self) -> &'a Body<'tcx> {\n         self.body\n     }\n \n@@ -149,7 +149,8 @@ impl<'a, 'tcx> BodyCache<&'a Body<'tcx>> {\n \n impl<'a, 'tcx> Deref for BodyCache<&'a Body<'tcx>> {\n     type Target = Body<'tcx>;\n-    fn deref(&self) -> &Body<'tcx> {\n+\n+    fn deref(&self) -> &Self::Target {\n         self.body\n     }\n }\n@@ -209,7 +210,12 @@ impl<'a, 'b, 'tcx> graph::GraphSuccessors<'b> for BodyCache<&'a Body<'tcx>> {\n \n impl<'a, 'tcx> BodyCache<&'a mut Body<'tcx>> {\n     #[inline]\n-    pub fn body(&mut self) -> &mut Body<'tcx> {\n+    pub fn body(&self) -> &Body<'tcx> {\n+        self.body\n+    }\n+\n+    #[inline]\n+    pub fn body_mut(&mut self) -> &mut Body<'tcx> {\n         self.body\n     }\n \n@@ -227,7 +233,7 @@ impl<'a, 'tcx> BodyCache<&'a mut Body<'tcx>> {\n impl<'a, 'tcx> Deref for BodyCache<&'a mut Body<'tcx>> {\n     type Target = Body<'tcx>;\n \n-    fn deref(&self) -> &Body<'tcx> {\n+    fn deref(&self) -> &Self::Target {\n         self.body\n     }\n }"}, {"sha": "aa3aeb36e063eb7e5eb30f6d187f829508d9c4d9", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "patch": "@@ -247,8 +247,12 @@ macro_rules! make_mir_visitor {\n                 &mut self,\n                 body_cache: & $($mutability)? BodyCache<&'_ $($mutability)? Body<'tcx>>\n             ) {\n+                macro_rules! body {\n+                    (mut) => (body_cache.body_mut());\n+                    () => (body_cache.body());\n+                }\n                 let span = body_cache.body().span;\n-                if let Some(yield_ty) = &$($mutability)? body_cache.body().yield_ty {\n+                if let Some(yield_ty) = &$($mutability)? body!($($mutability)?).yield_ty {\n                     self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n                         span,\n                         scope: OUTERMOST_SOURCE_SCOPE,\n@@ -266,7 +270,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_basic_block_data(bb, data);\n                 }\n \n-                let body = body_cache.body();\n+                let body = body!($($mutability)?);\n                 for scope in &$($mutability)? body.source_scopes {\n                     self.visit_source_scope_data(scope);\n                 }"}, {"sha": "2f45bf0ae74d19c7412bde7ec024a8041f5d1b08", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "patch": "@@ -4,7 +4,7 @@\n use rustc_index::bit_set::BitSet;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc::mir::{self, BasicBlock, Body, BodyCache, Location, TerminatorKind};\n+use rustc::mir::{self, Body, BodyCache, Location, TerminatorKind};\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext, NonUseContext,\n };\n@@ -20,8 +20,7 @@ pub fn non_ssa_locals<'b, 'a: 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &mut FunctionCx<'a, 'tcx, Bx>,\n     mir: &'b mut BodyCache<&'a Body<'tcx>>,\n ) -> BitSet<mir::Local> {\n-    let dominators = mir.dominators();\n-    let mut analyzer = LocalAnalyzer::new(fx, mir, dominators);\n+    let mut analyzer = LocalAnalyzer::new(fx, mir);\n \n     analyzer.visit_body(mir);\n \n@@ -68,13 +67,15 @@ struct LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     first_assignment: IndexVec<mir::Local, Location>,\n }\n \n-impl<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx> {\n-    fn new(fx: &'mir FunctionCx<'a, 'tcx, Bx>, mir: &'b Body<'tcx>, dominators: Dominators<BasicBlock>) -> Self {\n+impl<'mir, 'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx> {\n+    fn new(fx: &'mir FunctionCx<'a, 'tcx, Bx>, mir: &'c mut BodyCache<&'b Body<'tcx>>) -> Self {\n         let invalid_location =\n             mir::BasicBlock::new(mir.basic_blocks().len()).start_location();\n+        let dominators = mir.dominators();\n+        let body = mir.body();\n         let mut analyzer = LocalAnalyzer {\n             fx,\n-            mir,\n+            mir: body,\n             dominators,\n             non_ssa_locals: BitSet::new_empty(mir.local_decls.len()),\n             first_assignment: IndexVec::from_elem(invalid_location, &mir.local_decls)"}]}