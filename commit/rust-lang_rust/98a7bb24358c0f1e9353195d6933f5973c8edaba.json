{"sha": "98a7bb24358c0f1e9353195d6933f5973c8edaba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTdiYjI0MzU4YzBmMWU5MzUzMTk1ZDY5MzNmNTk3M2M4ZWRhYmE=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-10T13:31:51Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-10T13:31:51Z"}, "message": "do not remove then block when you unwrap else block #4361\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "d75767b7caf8d1e61e24cc9602d7914933f9a08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75767b7caf8d1e61e24cc9602d7914933f9a08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a7bb24358c0f1e9353195d6933f5973c8edaba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a7bb24358c0f1e9353195d6933f5973c8edaba", "html_url": "https://github.com/rust-lang/rust/commit/98a7bb24358c0f1e9353195d6933f5973c8edaba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a7bb24358c0f1e9353195d6933f5973c8edaba/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4578154b608fa075595103d0c933da60d55b25c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8", "html_url": "https://github.com/rust-lang/rust/commit/4578154b608fa075595103d0c933da60d55b25c8"}], "stats": {"total": 221, "additions": 193, "deletions": 28}, "files": [{"sha": "e52ec557e1857bd48dd86a7fffa61840fc555eaf", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 193, "deletions": 28, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/98a7bb24358c0f1e9353195d6933f5973c8edaba/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a7bb24358c0f1e9353195d6933f5973c8edaba/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=98a7bb24358c0f1e9353195d6933f5973c8edaba", "patch": "@@ -1,6 +1,6 @@\n use crate::{AssistContext, AssistId, Assists};\n \n-use ast::LoopBodyOwner;\n+use ast::{ElseBranch, Expr, LoopBodyOwner};\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{ast, match_ast, AstNode, TextRange, T};\n \n@@ -25,19 +25,11 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n     let block = ast::BlockExpr::cast(l_curly_token.parent())?;\n     let parent = block.syntax().parent()?;\n+    let assist_id = AssistId(\"unwrap_block\");\n+    let assist_label = \"Unwrap block\";\n+\n     let (expr, expr_to_unwrap) = match_ast! {\n         match parent {\n-            ast::IfExpr(if_expr) => {\n-                let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n-                let expr_to_unwrap = expr_to_unwrap?;\n-                // Find if we are in a else if block\n-                let ancestor = if_expr.syntax().parent().and_then(ast::IfExpr::cast);\n-\n-                match ancestor {\n-                    None => (ast::Expr::IfExpr(if_expr), expr_to_unwrap),\n-                    Some(ancestor) => (ast::Expr::IfExpr(ancestor), expr_to_unwrap),\n-                }\n-            },\n             ast::ForExpr(for_expr) => {\n                 let block_expr = for_expr.loop_body()?;\n                 let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n@@ -53,27 +45,62 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                 let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n                 (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n             },\n+            ast::IfExpr(if_expr) => {\n+                let mut resp = None;\n+\n+                let then_branch = if_expr.then_branch()?;\n+                if then_branch.l_curly_token()?.text_range().contains_range(ctx.frange.range) {\n+                    if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n+                        // For `else if` blocks\n+                        let ancestor_then_branch = ancestor.then_branch()?;\n+                        let l_curly_token = then_branch.l_curly_token()?;\n+\n+                        let target = then_branch.syntax().text_range();\n+                        return acc.add(assist_id, assist_label, target, |edit| {\n+                            let range_to_del_else_if = TextRange::new(ancestor_then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n+                            let range_to_del_rest = TextRange::new(then_branch.syntax().text_range().end(), if_expr.syntax().text_range().end());\n+\n+                            edit.set_cursor(ancestor_then_branch.syntax().text_range().end());\n+                            edit.delete(range_to_del_rest);\n+                            edit.delete(range_to_del_else_if);\n+                            edit.replace(target, update_expr_string(then_branch.to_string(), &[' ', '{']));\n+                        });\n+                    } else {\n+                        resp = Some((ast::Expr::IfExpr(if_expr.clone()), Expr::BlockExpr(then_branch)));\n+                    }\n+                } else if let Some(else_branch) = if_expr.else_branch() {\n+                    match else_branch {\n+                        ElseBranch::Block(else_block) => {\n+                            let l_curly_token = else_block.l_curly_token()?;\n+                            if l_curly_token.text_range().contains_range(ctx.frange.range) {\n+                                let target = else_block.syntax().text_range();\n+                                return acc.add(assist_id, assist_label, target, |edit| {\n+                                    let range_to_del = TextRange::new(then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n+\n+                                    edit.set_cursor(then_branch.syntax().text_range().end());\n+                                    edit.delete(range_to_del);\n+                                    edit.replace(target, update_expr_string(else_block.to_string(), &[' ', '{']));\n+                                });\n+                            }\n+                        },\n+                        ElseBranch::IfExpr(_) => {},\n+                    }\n+                }\n+\n+                resp?\n+            },\n             _ => return None,\n         }\n     };\n \n     let target = expr_to_unwrap.syntax().text_range();\n-    acc.add(AssistId(\"unwrap_block\"), \"Unwrap block\", target, |edit| {\n+    acc.add(assist_id, assist_label, target, |edit| {\n         edit.set_cursor(expr.syntax().text_range().start());\n \n-        let pat_start: &[_] = &[' ', '{', '\\n'];\n-        let expr_to_unwrap = expr_to_unwrap.to_string();\n-        let expr_string = expr_to_unwrap.trim_start_matches(pat_start);\n-        let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n-        expr_string_lines.pop(); // Delete last line\n-\n-        let expr_string = expr_string_lines\n-            .into_iter()\n-            .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n-            .collect::<Vec<String>>()\n-            .join(\"\\n\");\n-\n-        edit.replace(expr.syntax().text_range(), expr_string);\n+        edit.replace(\n+            expr.syntax().text_range(),\n+            update_expr_string(expr_to_unwrap.to_string(), &[' ', '{', '\\n']),\n+        );\n     })\n }\n \n@@ -87,6 +114,18 @@ fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::E\n     }\n }\n \n+fn update_expr_string(expr_str: String, trim_start_pat: &[char]) -> String {\n+    let expr_string = expr_str.trim_start_matches(trim_start_pat);\n+    let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n+    expr_string_lines.pop(); // Delete last line\n+\n+    expr_string_lines\n+        .into_iter()\n+        .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n+        .collect::<Vec<String>>()\n+        .join(\"\\n\")\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -142,7 +181,13 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                <|>println!(\"bar\");\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                }<|>\n+                println!(\"bar\");\n             }\n             \"#,\n         );\n@@ -170,7 +215,127 @@ mod tests {\n             r#\"\n             fn main() {\n                 //bar();\n-                <|>println!(\"bar\");\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                }<|>\n+                println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {<|>\n+                    println!(\"foo\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                }<|>\n+                println!(\"foo\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested_else() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {\n+                    println!(\"foo\");\n+                } else {<|>\n+                    println!(\"else\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {\n+                    println!(\"foo\");\n+                }<|>\n+                println!(\"else\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested_middle() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {<|>\n+                    println!(\"foo\");\n+                } else {\n+                    println!(\"else\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                }<|>\n+                println!(\"foo\");\n             }\n             \"#,\n         );"}]}