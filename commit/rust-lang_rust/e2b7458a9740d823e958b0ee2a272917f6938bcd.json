{"sha": "e2b7458a9740d823e958b0ee2a272917f6938bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjc0NThhOTc0MGQ4MjNlOTU4YjBlZTJhMjcyOTE3ZjY5MzhiY2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:57Z"}, "message": "Rollup merge of #48020 - RalfJung:type-alias-bounds, r=petrochenkov\n\nWarn about more ignored bounds in type aliases\n\nIt seems that all bounds in type aliases are entirely ignored, not just type bounds. This extends the warning appropriately.\n\nI assume this should be made a hard error with the next epoch? I can't see any reason to accept these programs. (And suddenly enforcing these type bounds would be a breaking change.)", "tree": {"sha": "02bd649e11b347a28eff5faacd1336a2a4504a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bd649e11b347a28eff5faacd1336a2a4504a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b7458a9740d823e958b0ee2a272917f6938bcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeynBCRBK7hj4Ov3rIwAAdHIIAIYslqRcZK+vjnyB3dMl3ldz\nNCxCjbGLcn06jK/YcOP/GJlD2Vc7RdajuqhTgHZ6T7KOmu4z53KD7Oj0pqtMqkJM\n9KA+9/JwSuOWNfJHHpbfm+2pnuz9yhEHq2GIwrwlcxJtHRqxxw73+CpwCm2QaFms\n8ebXVKikmzYIEXkoctOgLgFQmihISN6M2eSs7xSAluTM/LYeIAiqrYyjBh68r7KN\nmwcAOs3rEGE+xaYHcRKl2GrQb/bOsZO1H0/VPZ/D+5iIZelCchxX9UPVXYkZJvSw\n3gY5b6x/Vv1LHn40mqU5F5PLy0vG/rCcrkpcKmmcL77x5X3vAoYjvUk5qxMj3zY=\n=gM8R\n-----END PGP SIGNATURE-----\n", "payload": "tree 02bd649e11b347a28eff5faacd1336a2a4504a01\nparent 993322e886139457f063a79f4182da736db181df\nparent ac183f83df4bf43bc5d8c5e5f2c5d4297a0b3755\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021057 -0800\ncommitter GitHub <noreply@github.com> 1518021057 -0800\n\nRollup merge of #48020 - RalfJung:type-alias-bounds, r=petrochenkov\n\nWarn about more ignored bounds in type aliases\n\nIt seems that all bounds in type aliases are entirely ignored, not just type bounds. This extends the warning appropriately.\n\nI assume this should be made a hard error with the next epoch? I can't see any reason to accept these programs. (And suddenly enforcing these type bounds would be a breaking change.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b7458a9740d823e958b0ee2a272917f6938bcd", "html_url": "https://github.com/rust-lang/rust/commit/e2b7458a9740d823e958b0ee2a272917f6938bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b7458a9740d823e958b0ee2a272917f6938bcd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "993322e886139457f063a79f4182da736db181df", "url": "https://api.github.com/repos/rust-lang/rust/commits/993322e886139457f063a79f4182da736db181df", "html_url": "https://github.com/rust-lang/rust/commit/993322e886139457f063a79f4182da736db181df"}, {"sha": "ac183f83df4bf43bc5d8c5e5f2c5d4297a0b3755", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac183f83df4bf43bc5d8c5e5f2c5d4297a0b3755", "html_url": "https://github.com/rust-lang/rust/commit/ac183f83df4bf43bc5d8c5e5f2c5d4297a0b3755"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "d5328a18c22400f52c5f5fb9b7e0ecede732a13b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e2b7458a9740d823e958b0ee2a272917f6938bcd", "patch": "@@ -355,41 +355,35 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn ensure_no_ty_param_bounds(tcx: TyCtxt,\n-                             span: Span,\n-                             generics: &hir::Generics,\n-                             thing: &'static str) {\n+fn ensure_no_param_bounds(tcx: TyCtxt,\n+                          span: Span,\n+                          generics: &hir::Generics,\n+                          thing: &'static str) {\n     let mut warn = false;\n \n     for ty_param in generics.ty_params() {\n-        for bound in ty_param.bounds.iter() {\n-            match *bound {\n-                hir::TraitTyParamBound(..) => {\n-                    warn = true;\n-                }\n-                hir::RegionTyParamBound(..) => { }\n-            }\n+        if !ty_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n-    for predicate in generics.where_clause.predicates.iter() {\n-        match *predicate {\n-            hir::WherePredicate::BoundPredicate(..) => {\n-                warn = true;\n-            }\n-            hir::WherePredicate::RegionPredicate(..) => { }\n-            hir::WherePredicate::EqPredicate(..) => { }\n+    for lft_param in generics.lifetimes() {\n+        if !lft_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n+    if !generics.where_clause.predicates.is_empty() {\n+        warn = true;\n+    }\n+\n     if warn {\n         // According to accepted RFC #XXX, we should\n         // eventually accept these, but it will not be\n         // part of this PR. Still, convert to warning to\n         // make bootstrapping easier.\n         span_warn!(tcx.sess, span, E0122,\n-                   \"trait bounds are not (yet) enforced \\\n-                   in {} definitions\",\n+                   \"generic bounds are ignored in {}\",\n                    thing);\n     }\n }\n@@ -455,7 +449,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             }\n         },\n         hir::ItemTy(_, ref generics) => {\n-            ensure_no_ty_param_bounds(tcx, it.span, generics, \"type\");\n+            ensure_no_param_bounds(tcx, it.span, generics, \"type aliases\");\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);"}, {"sha": "759da7b2bde218de795d984a876601e5ae0aaf54", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=e2b7458a9740d823e958b0ee2a272917f6938bcd", "patch": "@@ -13,7 +13,7 @@\n #![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n-//~^ WARNING trait bounds are not (yet) enforced\n+//~^ WARNING bounds are ignored\n \n #[derive(PartialEq,Eq)]\n struct Bar;"}, {"sha": "aa91ce27c379af2f295e87f16a2aacf89e0d7342", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=e2b7458a9740d823e958b0ee2a272917f6938bcd", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~^ WARN bounds are ignored in type aliases\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error"}, {"sha": "9e09102f2d43993a93a10e79b7138d1ebde2ff58", "filename": "src/test/ui/param-bounds-ignored.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs?ref=e2b7458a9740d823e958b0ee2a272917f6938bcd", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+use std::rc::Rc;\n+\n+type SVec<T: Send> = Vec<T>;\n+type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+type WVec<'b, T: 'b> = Vec<T>;\n+\n+fn foo<'a>(y: &'a i32) {\n+    // If the bounds above would matter, the code below would be rejected.\n+    let mut x : SVec<_> = Vec::new();\n+    x.push(Rc::new(42));\n+\n+    let mut x : VVec<'static, 'a> = Vec::new();\n+    x.push(y);\n+\n+    let mut x : WVec<'static, & 'a i32> = Vec::new();\n+    x.push(y);\n+}\n+\n+fn main() {\n+    foo(&42);\n+}"}, {"sha": "19aa9c5d6e562927b1de5effdb9c5983e00a846a", "filename": "src/test/ui/param-bounds-ignored.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b7458a9740d823e958b0ee2a272917f6938bcd/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr?ref=e2b7458a9740d823e958b0ee2a272917f6938bcd", "patch": "@@ -0,0 +1,18 @@\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:15:1\n+   |\n+15 | type SVec<T: Send> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:16:1\n+   |\n+16 | type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: generic bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:17:1\n+   |\n+17 | type WVec<'b, T: 'b> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}