{"sha": "9860a4eeb7e555b3a137b2aa0cde818d44a608dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjBhNGVlYjdlNTU1YjNhMTM3YjJhYTBjZGU4MThkNDRhNjA4ZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-12T01:09:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-12T01:09:15Z"}, "message": "Rollup merge of #62514 - stephaneyfx:box-ffi, r=nikomatsakis\n\nClarify `Box<T>` representation and its use in FFI\n\nThis officializes what was only shown as a code example in [the unsafe code guidelines](https://rust-lang.github.io/unsafe-code-guidelines/layout/function-pointers.html?highlight=box#use) and follows [the discussion](https://github.com/rust-lang/unsafe-code-guidelines/issues/157) in the corresponding repository.\n\nIt is also related to [the issue](https://github.com/rust-lang/rust/issues/52976) regarding marking `Box<T>` `#[repr(transparent)]`.\n\nIf the statement this PR adds is incorrect or a more in-depth discussion is warranted, I apologize. Should it be the case, the example in the unsafe code guidelines should be amended and some document should make it clear that it is not sound/supported.", "tree": {"sha": "63fa6f6d98f486d8da906e4b12daa91f35efb2d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fa6f6d98f486d8da906e4b12daa91f35efb2d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9860a4eeb7e555b3a137b2aa0cde818d44a608dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8ZM8CRBK7hj4Ov3rIwAAdHIIAIjh2UVOATYdf3qj7V8ZHx2J\nlaP7P5H8D7n9hhrNdDQrAefCDjBTxbff4cPCU4ZT0cFCS+UcYYEk5Gts6sQ3eL1Y\nBwuFQkqmsTAJ8JAOYh7iq8MZ5fz7feqPY+6E+prvtGrOuExeAQisn4NNcGOgxOj9\nN6S0sCAIsvN2XUp0Wy7fSkcGLqyXTiTsF0ndbtyqoenvBGbOlMsX7L8K6bOwUPQ1\nwg77SZXLJiw9l2KnIHdNfOXbc5d5XK6LqzSNGCXoFEcv1DS11RXrXg62MVhDQLiV\nAV4MCLo2p9GT3MDWEvV8WzhGInVJFGkM21kGZpva/PtmRlgt5VSsPhca3O6kmcw=\n=lSZQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 63fa6f6d98f486d8da906e4b12daa91f35efb2d2\nparent 27d6f55f47e8875e71083a28ed84ea5a88e1b596\nparent fafa4897985f932490960e90ddd2ff39134e967e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1576112955 +0900\ncommitter GitHub <noreply@github.com> 1576112955 +0900\n\nRollup merge of #62514 - stephaneyfx:box-ffi, r=nikomatsakis\n\nClarify `Box<T>` representation and its use in FFI\n\nThis officializes what was only shown as a code example in [the unsafe code guidelines](https://rust-lang.github.io/unsafe-code-guidelines/layout/function-pointers.html?highlight=box#use) and follows [the discussion](https://github.com/rust-lang/unsafe-code-guidelines/issues/157) in the corresponding repository.\n\nIt is also related to [the issue](https://github.com/rust-lang/rust/issues/52976) regarding marking `Box<T>` `#[repr(transparent)]`.\n\nIf the statement this PR adds is incorrect or a more in-depth discussion is warranted, I apologize. Should it be the case, the example in the unsafe code guidelines should be amended and some document should make it clear that it is not sound/supported.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9860a4eeb7e555b3a137b2aa0cde818d44a608dc", "html_url": "https://github.com/rust-lang/rust/commit/9860a4eeb7e555b3a137b2aa0cde818d44a608dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9860a4eeb7e555b3a137b2aa0cde818d44a608dc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d6f55f47e8875e71083a28ed84ea5a88e1b596", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d6f55f47e8875e71083a28ed84ea5a88e1b596", "html_url": "https://github.com/rust-lang/rust/commit/27d6f55f47e8875e71083a28ed84ea5a88e1b596"}, {"sha": "fafa4897985f932490960e90ddd2ff39134e967e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fafa4897985f932490960e90ddd2ff39134e967e", "html_url": "https://github.com/rust-lang/rust/commit/fafa4897985f932490960e90ddd2ff39134e967e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "1c39a3721f465cd1e758360f06387a755cdacd44", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9860a4eeb7e555b3a137b2aa0cde818d44a608dc/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9860a4eeb7e555b3a137b2aa0cde818d44a608dc/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9860a4eeb7e555b3a137b2aa0cde818d44a608dc", "patch": "@@ -61,7 +61,60 @@\n //! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n //! [`Global`] allocator with [`Layout::for_value(&*value)`].\n //!\n+//! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented\n+//! as a single pointer and is also ABI-compatible with C pointers\n+//! (i.e. the C type `T*`). This means that if you have extern \"C\"\n+//! Rust functions that will be called from C, you can define those\n+//! Rust functions using `Box<T>` types, and use `T*` as corresponding\n+//! type on the C side. As an example, consider this C header which\n+//! declares functions that create and destroy some kind of `Foo`\n+//! value:\n //!\n+//! ```c\n+//! /* C header */\n+//!\n+//! /* Returns ownership to the caller */\n+//! struct Foo* foo_new(void);\n+//!\n+//! /* Takes ownership from the caller; no-op when invoked with NULL */\n+//! void foo_delete(struct Foo*);\n+//! ```\n+//!\n+//! These two functions might be implemented in Rust as follows. Here, the\n+//! `struct Foo*` type from C is translated to `Box<Foo>`, which captures\n+//! the ownership constraints. Note also that the nullable argument to\n+//! `foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`\n+//! cannot be null.\n+//!\n+//! ```\n+//! #[repr(C)]\n+//! pub struct Foo;\n+//!\n+//! #[no_mangle]\n+//! pub extern \"C\" fn foo_new() -> Box<Foo> {\n+//!     Box::new(Foo)\n+//! }\n+//!\n+//! #[no_mangle]\n+//! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n+//! ```\n+//!\n+//! Even though `Box<T>` has the same representation and C ABI as a C pointer,\n+//! this does not mean that you can convert an arbitrary `T*` into a `Box<T>`\n+//! and expect things to work. `Box<T>` values will always be fully aligned,\n+//! non-null pointers. Moreover, the destructor for `Box<T>` will attempt to\n+//! free the value with the global allocator. In general, the best practice\n+//! is to only use `Box<T>` for pointers that originated from the global\n+//! allocator.\n+//!\n+//! **Important.** At least at present, you should avoid using\n+//! `Box<T>` types for functions that are defined in C but invoked\n+//! from Rust. In those cases, you should directly mirror the C types\n+//! as closely as possible. Using types like `Box<T>` where the C\n+//! definition is just using `T*` can lead to undefined behavior, as\n+//! described in [rust-lang/unsafe-code-guidelines#198][ucg#198].\n+//!\n+//! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n //! [`Box<T>`]: struct.Box.html"}]}