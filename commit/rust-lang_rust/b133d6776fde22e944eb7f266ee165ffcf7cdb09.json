{"sha": "b133d6776fde22e944eb7f266ee165ffcf7cdb09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzNkNjc3NmZkZTIyZTk0NGViN2YyNjZlZTE2NWZmY2Y3Y2RiMDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-13T08:00:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-29T08:27:25Z"}, "message": "make it even more conservative, and note some FIXMEs", "tree": {"sha": "ad010c259724c0841a59a1cc4b55b44582802e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad010c259724c0841a59a1cc4b55b44582802e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b133d6776fde22e944eb7f266ee165ffcf7cdb09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b133d6776fde22e944eb7f266ee165ffcf7cdb09", "html_url": "https://github.com/rust-lang/rust/commit/b133d6776fde22e944eb7f266ee165ffcf7cdb09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b133d6776fde22e944eb7f266ee165ffcf7cdb09/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6a3a0ed216a8548130f9b431964531a1bc7633", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6a3a0ed216a8548130f9b431964531a1bc7633", "html_url": "https://github.com/rust-lang/rust/commit/df6a3a0ed216a8548130f9b431964531a1bc7633"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "ae3d8442add676ea84da0894eb2675f29613929b", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=b133d6776fde22e944eb7f266ee165ffcf7cdb09", "patch": "@@ -526,6 +526,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         #[derive(Debug, PartialEq)]\n         enum PanicIntrinsic { IfUninhabited, IfZeroInvalid, IfAnyInvalid };\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n+            // FIXME: Move to symbols instead of strings.\n             \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n             \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n             \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n@@ -555,6 +556,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let location = self.get_caller_location(&mut bx, span).immediate();\n \n                 // Obtain the panic entry point.\n+                // FIXME: dedup this with `codegen_assert_terminator` above.\n                 let def_id =\n                     common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);"}, {"sha": "71f97ca85832c4fb752a5ae1a7d0f0a0f4cf3b8c", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=b133d6776fde22e944eb7f266ee165ffcf7cdb09", "patch": "@@ -1043,6 +1043,10 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     /// `zero` indicates if the memory is zero-initialized, or alternatively\n     /// left entirely uninitialized.\n     /// This is conservative: in doubt, it will answer `true`.\n+    ///\n+    /// FIXME: Once we removed all the conservatism, we could alternatively\n+    /// create an all-0/all-undef constant and run the vonst value validator to see if\n+    /// this is a valid value for the given type.\n     pub fn might_permit_raw_init<C, E>(\n         self,\n         cx: &C,\n@@ -1095,11 +1099,14 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                             FieldPlacement::Array { .. } =>\n                                 // FIXME(#66151): The widely use smallvec 0.6 creates uninit arrays\n                                 // with any element type, so let us not (yet) complain about that.\n-                                // count == 0 ||\n-                                // self.field(cx, 0).to_result()?.might_permit_raw_init(cx, zero)?\n+                                /* count == 0 ||\n+                                self.field(cx, 0).to_result()?.might_permit_raw_init(cx, zero)? */\n                                 true,\n-                            FieldPlacement::Arbitrary { ref offsets, .. } => {\n-                                let mut res = true;\n+                            FieldPlacement::Arbitrary { .. } => {\n+                                // FIXME(#66151) cargo depends on sized-chunks 0.3.0 which\n+                                // has some illegal zero-initialization, so let us not (yet)\n+                                // complain about aggregates either.\n+                                /* let mut res = true;\n                                 // Check that all fields accept zero-init.\n                                 for idx in 0..offsets.len() {\n                                     let field = self.field(cx, idx).to_result()?;\n@@ -1108,7 +1115,8 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                                         break;\n                                     }\n                                 }\n-                                res\n+                                res */\n+                                true\n                             }\n                         }\n                     }"}, {"sha": "a1b2a1af2c43437408de8e8bb168db9e3f47b91b", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b133d6776fde22e944eb7f266ee165ffcf7cdb09/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=b133d6776fde22e944eb7f266ee165ffcf7cdb09", "patch": "@@ -92,6 +92,7 @@ fn main() {\n             \"attempted to zero-initialize type `*const dyn std::marker::Send`, which is invalid\"\n         );\n \n+        /* FIXME(#66151) we conservatively do not error here yet.\n         test_panic_msg(\n             || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n             \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n@@ -102,6 +103,7 @@ fn main() {\n             \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n                 which is invalid\"\n         );\n+        */\n \n         test_panic_msg(\n             || mem::uninitialized::<bool>(),"}]}