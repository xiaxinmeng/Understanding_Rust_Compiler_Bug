{"sha": "e412652f0027dd0da270f802d894d910736a9f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTI2NTJmMDAyN2RkMGRhMjcwZjgwMmQ4OTRkOTEwNzM2YTlmMjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-01T23:31:18Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-01T23:32:05Z"}, "message": "Make GEP_tag take a uint instead of an int\n\nSeems to make more sense and avoids the need for some casts.", "tree": {"sha": "68ca6fe9bdd3c98a5ecface04af355a2efc1bd85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ca6fe9bdd3c98a5ecface04af355a2efc1bd85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e412652f0027dd0da270f802d894d910736a9f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e412652f0027dd0da270f802d894d910736a9f23", "html_url": "https://github.com/rust-lang/rust/commit/e412652f0027dd0da270f802d894d910736a9f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e412652f0027dd0da270f802d894d910736a9f23/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4f8d317c1453f2275164fabaf128dfb293fbe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f8d317c1453f2275164fabaf128dfb293fbe2", "html_url": "https://github.com/rust-lang/rust/commit/1f4f8d317c1453f2275164fabaf128dfb293fbe2"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7bd39752be1711b204d68bdae9658f55e7e78add", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e412652f0027dd0da270f802d894d910736a9f23/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e412652f0027dd0da270f802d894d910736a9f23/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e412652f0027dd0da270f802d894d910736a9f23", "patch": "@@ -776,21 +776,22 @@ fn GEP_tup_like(cx: &@block_ctxt, t: ty::t, base: ValueRef, ixs: &[int]) ->\n // appropriate. @llblobptr is the data part of a tag value; its actual type is\n // meaningless, as it will be cast away.\n fn GEP_tag(cx: @block_ctxt, llblobptr: ValueRef, tag_id: &ast::def_id,\n-           variant_id: &ast::def_id, ty_substs: &[ty::t], ix: int) -> result {\n+           variant_id: &ast::def_id, ty_substs: &[ty::t], ix: uint)\n+    -> result {\n     let variant = ty::tag_variant_with_id(bcx_tcx(cx), tag_id, variant_id);\n     // Synthesize a tuple type so that GEP_tup_like() can work its magic.\n     // Separately, store the type of the element we're interested in.\n \n     let arg_tys = variant.args;\n     let elem_ty = ty::mk_nil(bcx_tcx(cx)); // typestate infelicity\n \n-    let i = 0;\n+    let i = 0u;\n     let true_arg_tys: [ty::t] = [];\n     for aty: ty::t in arg_tys {\n         let arg_ty = ty::substitute_type_params(bcx_tcx(cx), ty_substs, aty);\n         true_arg_tys += [arg_ty];\n         if i == ix { elem_ty = arg_ty; }\n-        i += 1;\n+        i += 1u;\n     }\n     let tup_ty = ty::mk_tup(bcx_tcx(cx), true_arg_tys);\n     // Cast the blob pointer to the appropriate type, if we need to (i.e. if\n@@ -803,7 +804,7 @@ fn GEP_tag(cx: @block_ctxt, llblobptr: ValueRef, tag_id: &ast::def_id,\n     } else { llunionptr = llblobptr; }\n     // Do the GEP_tup_like().\n \n-    let rs = GEP_tup_like(cx, tup_ty, llunionptr, [0, ix]);\n+    let rs = GEP_tup_like(cx, tup_ty, llunionptr, [0, ix as int]);\n     // Cast the result to the appropriate type, if necessary.\n \n     let val;\n@@ -1668,14 +1669,14 @@ fn iter_structural_ty(cx: @block_ctxt, av: ValueRef, t: ty::t,\n         let ccx = bcx_ccx(cx);\n         alt ty::struct(ccx.tcx, fn_ty) {\n           ty::ty_fn(_, args, _, _, _) {\n-            let j = 0;\n+            let j = 0u;\n             for a: ty::arg in args {\n                 let rslt = GEP_tag(cx, a_tup, tid, variant.id, tps, j);\n                 let llfldp_a = rslt.val;\n                 cx = rslt.bcx;\n                 let ty_subst = ty::substitute_type_params(ccx.tcx, tps, a.ty);\n                 cx = f(cx, llfldp_a, ty_subst);\n-                j += 1;\n+                j += 1u;\n             }\n           }\n         }\n@@ -5354,8 +5355,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n     for va: ast::variant_arg in variant.node.args {\n         let rslt =\n             GEP_tag(bcx, llblobptr, ast_util::local_def(tag_id),\n-                    ast_util::local_def(variant.node.id), ty_param_substs,\n-                    i as int);\n+                    ast_util::local_def(variant.node.id), ty_param_substs, i);\n         bcx = rslt.bcx;\n         let lldestptr = rslt.val;\n         // If this argument to this function is a tag, it'll have come in to"}, {"sha": "73a49a04c5fc7b6f1cbdd0e897036ff89301e9c7", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e412652f0027dd0da270f802d894d910736a9f23/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e412652f0027dd0da270f802d894d910736a9f23/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=e412652f0027dd0da270f802d894d910736a9f23", "patch": "@@ -219,7 +219,7 @@ fn extract_variant_args(bcx: @block_ctxt, pat_id: ast::node_id,\n     while i < size {\n         let r =\n             trans::GEP_tag(bcx, blobptr, vdefs.tg, vdefs.var, ty_param_substs,\n-                           i as int);\n+                           i);\n         bcx = r.bcx;\n         args += [r.val];\n         i += 1u;"}]}