{"sha": "c6f16ed2c418268f2acbb8728f265b3b960f8efd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjE2ZWQyYzQxODI2OGYyYWNiYjg3MjhmMjY1YjNiOTYwZjhlZmQ=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-14T20:47:05Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:48:04Z"}, "message": "Hide extended, unfinished debug information behind --xg compiler flag.", "tree": {"sha": "181c56232f02f06e3ff0658612a5e3fceb5de681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181c56232f02f06e3ff0658612a5e3fceb5de681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f16ed2c418268f2acbb8728f265b3b960f8efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f16ed2c418268f2acbb8728f265b3b960f8efd", "html_url": "https://github.com/rust-lang/rust/commit/c6f16ed2c418268f2acbb8728f265b3b960f8efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f16ed2c418268f2acbb8728f265b3b960f8efd/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8597077b7ace2a16b3c6c7c9e37eeb47f758194f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8597077b7ace2a16b3c6c7c9e37eeb47f758194f", "html_url": "https://github.com/rust-lang/rust/commit/8597077b7ace2a16b3c6c7c9e37eeb47f758194f"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "35e450244ac8cb592e94a0e6117c44221417141f", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=c6f16ed2c418268f2acbb8728f265b3b960f8efd", "patch": "@@ -421,7 +421,8 @@ fn build_session_options(match: getopts::match)\n     let libcore = !opt_present(match, \"no-core\");\n     let verify = !opt_present(match, \"no-verify\");\n     let save_temps = opt_present(match, \"save-temps\");\n-    let debuginfo = opt_present(match, \"g\");\n+    let extra_debuginfo = opt_present(match, \"xg\");\n+    let debuginfo = opt_present(match, \"g\") || extra_debuginfo;\n     let stats = opt_present(match, \"stats\");\n     let time_passes = opt_present(match, \"time-passes\");\n     let time_llvm_passes = opt_present(match, \"time-llvm-passes\");\n@@ -468,6 +469,7 @@ fn build_session_options(match: getopts::match)\n           libcore: libcore,\n           optimize: opt_level,\n           debuginfo: debuginfo,\n+          extra_debuginfo: extra_debuginfo,\n           verify: verify,\n           save_temps: save_temps,\n           stats: stats,\n@@ -516,7 +518,7 @@ fn opts() -> [getopts::opt] {\n          optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"no-trans\"),\n          optflag(\"O\"), optopt(\"opt-level\"), optmulti(\"L\"), optflag(\"S\"),\n-         optopt(\"o\"), optopt(\"out-dir\"),\n+         optopt(\"o\"), optopt(\"out-dir\"), optflag(\"xg\"),\n          optflag(\"c\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),"}, {"sha": "6645d5d68946edfba053f8dfe6dc0676fc8b2c65", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=c6f16ed2c418268f2acbb8728f265b3b960f8efd", "patch": "@@ -31,6 +31,7 @@ type options =\n      libcore: bool,\n      optimize: uint,\n      debuginfo: bool,\n+     extra_debuginfo: bool,\n      verify: bool,\n      save_temps: bool,\n      stats: bool,"}, {"sha": "14cc13e217eff8c1fece76b1e4f32aa5a8c53a52", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=c6f16ed2c418268f2acbb8728f265b3b960f8efd", "patch": "@@ -782,9 +782,14 @@ fn create_function(fcx: @fn_ctxt, item: @ast::item, llfndecl: ValueRef)\n     let ret_ty = alt item.node {\n       ast::item_fn(f, _) { f.decl.output }\n     };\n-    let ty_node = alt ret_ty.node {\n-      ast::ty_nil. { llnull() }\n-      _ { create_ty(cx, ty::node_id_to_type(ccx_tcx(cx), item.id), ret_ty).node }\n+    let ty_node = if cx.sess.get_opts().extra_debuginfo {\n+        alt ret_ty.node {\n+          ast::ty_nil. { llnull() }\n+          _ { create_ty(cx, ty::node_id_to_type(ccx_tcx(cx), item.id),\n+                        ret_ty).node }\n+        }\n+    } else {\n+        llnull()\n     };\n     let sub_node = create_composite_type(SubroutineTag, \"\", file_node, 0, 0,\n                                          0, 0, option::none,"}, {"sha": "b030a5d52c941cd2b70cd07dd5af821a9b10b878", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f16ed2c418268f2acbb8728f265b3b960f8efd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c6f16ed2c418268f2acbb8728f265b3b960f8efd", "patch": "@@ -4027,7 +4027,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n                 } else {\n                     bcx = init_ref_local(bcx, local);\n                 }\n-                if bcx_ccx(cx).sess.get_opts().debuginfo {\n+                if bcx_ccx(cx).sess.get_opts().extra_debuginfo {\n                     debuginfo::create_local_var(bcx, local);\n                 }\n             }\n@@ -4422,7 +4422,7 @@ fn create_llargs_for_fn_args(cx: @fn_ctxt, ty_self: self_arg,\n \n fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n                         arg_tys: [ty::arg]) -> @block_ctxt {\n-    if fcx_ccx(fcx).sess.get_opts().debuginfo {\n+    if fcx_ccx(fcx).sess.get_opts().extra_debuginfo {\n         llvm::LLVMAddAttribute(llvm::LLVMGetFirstParam(fcx.llfn),\n                                lib::llvm::LLVMStructRetAttribute as\n                                    lib::llvm::llvm::Attribute);\n@@ -4446,7 +4446,7 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n           }\n           ast::by_ref. {}\n         }\n-        if fcx_ccx(fcx).sess.get_opts().debuginfo {\n+        if fcx_ccx(fcx).sess.get_opts().extra_debuginfo {\n             debuginfo::create_arg(bcx, args[arg_n]);\n         }\n         arg_n += 1u;\n@@ -4584,7 +4584,7 @@ fn trans_fn(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n     let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n     let fcx = option::none;\n     trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|new_fcx| fcx = option::some(new_fcx);});\n-    if cx.ccx.sess.get_opts().debuginfo {\n+    if cx.ccx.sess.get_opts().extra_debuginfo {\n         let item = alt option::get(cx.ccx.ast_map.find(id)) {\n             ast_map::node_item(item) { item }\n         };\n@@ -5654,7 +5654,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     let td = mk_target_data(sess.get_targ_cfg().target_strs.data_layout);\n     let tn = mk_type_names();\n     let intrinsics = declare_intrinsics(llmod);\n-    if sess.get_opts().debuginfo {\n+    if sess.get_opts().extra_debuginfo {\n         declare_dbg_intrinsics(llmod, intrinsics);\n     }\n     let int_type = T_int(targ_cfg);"}]}