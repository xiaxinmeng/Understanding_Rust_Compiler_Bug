{"sha": "f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZmE1NzQ4NjRhNWJkNTQ3NTJmYzE5ODQzOGY4YzUzYThlZDVlZjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-02T09:44:00Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-02T10:09:15Z"}, "message": "Copy locals created by destructuring on the content of a box\n\nThis is required so that assigning to these locals doesn't clobber\nthe content of the box.\n\n(A possible optimization would be to only do this copying for\nlocals that actually are assigned to.)", "tree": {"sha": "01662bfbc8d189801822dc5b35fa88bb9f465c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01662bfbc8d189801822dc5b35fa88bb9f465c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "html_url": "https://github.com/rust-lang/rust/commit/f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043d95a2bdc6a344f1bfc7800b0ed719dbb6c7aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/043d95a2bdc6a344f1bfc7800b0ed719dbb6c7aa", "html_url": "https://github.com/rust-lang/rust/commit/043d95a2bdc6a344f1bfc7800b0ed719dbb6c7aa"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "53f8b0b0d34720916480ed5c3498c8c8da7594a5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "patch": "@@ -3631,7 +3631,7 @@ fn trans_for(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n         let loc_r = copy_val(local_res.bcx, INIT, local_res.val, curr, t);\n         add_clean(scope_cx, local_res.val, t);\n         let bcx = trans_alt::bind_irrefutable_pat\n-            (loc_r.bcx, local.node.pat, local_res.val, cx.fcx.lllocals);\n+           (loc_r.bcx, local.node.pat, local_res.val, cx.fcx.lllocals, false);\n         bcx = trans_block(bcx, body, return).bcx;\n         if !bcx.build.is_terminated() {\n             bcx.build.Br(next_cx.llbb);\n@@ -3982,7 +3982,7 @@ fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n     // Add bindings for the loop variable alias.\n     bcx = trans_alt::bind_irrefutable_pat\n         (bcx, local.node.pat, llvm::LLVMGetParam(fcx.llfn, 3u),\n-         bcx.fcx.llupvars);\n+         bcx.fcx.llupvars, false);\n     let lltop = bcx.llbb;\n     let r = trans_block(bcx, body, return);\n     finish_fn(fcx, lltop);\n@@ -5949,7 +5949,7 @@ fn init_local(bcx: @block_ctxt, local: &@ast::local) -> result {\n       _ { bcx = zero_alloca(bcx, llptr, ty).bcx; }\n     }\n     bcx = trans_alt::bind_irrefutable_pat(bcx, local.node.pat, llptr,\n-                                          bcx.fcx.lllocals);\n+                                          bcx.fcx.lllocals, false);\n     ret rslt(bcx, llptr);\n }\n "}, {"sha": "899ba437cb199710543097ba42ee567dd4611f93", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "patch": "@@ -437,20 +437,31 @@ fn trans_alt(cx: &@block_ctxt, expr: &@ast::expr, arms: &ast::arm[],\n \n // Not alt-related, but similar to the pattern-munging code above\n fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n-                        table: hashmap[ast::node_id, ValueRef])\n+                        table: hashmap[ast::node_id, ValueRef], copy: bool)\n     -> @block_ctxt {\n     let ccx = bcx.fcx.lcx.ccx;\n     alt pat.node {\n       ast::pat_bind(_) {\n-        table.insert(pat.id, val);\n+        if copy {\n+            let ty = ty::node_id_to_monotype(ccx.tcx, pat.id);\n+            let llty = trans::type_of(ccx, pat.span, ty);\n+            let alloc = trans::alloca(bcx, llty);\n+            bcx = trans::memmove_ty(bcx, alloc, val, ty).bcx;\n+            let loaded = trans::load_if_immediate(bcx, alloc, ty);\n+            bcx = trans::copy_ty(bcx, loaded, ty).bcx;\n+            table.insert(pat.id, alloc);\n+            trans_common::add_clean(bcx, alloc, ty);\n+        } else {\n+            table.insert(pat.id, val);\n+        }\n       }\n       ast::pat_tag(_, sub) {\n         if ivec::len(sub) == 0u { ret bcx; }\n         let vdefs = ast::variant_def_ids(ccx.tcx.def_map.get(pat.id));\n         let args = extract_variant_args(bcx, pat.id, vdefs, val);\n         let i = 0;\n         for argval: ValueRef in args.vals {\n-            bcx = bind_irrefutable_pat(bcx, sub.(i), argval, table);\n+            bcx = bind_irrefutable_pat(bcx, sub.(i), argval, table, copy);\n             i += 1;\n         }\n       }\n@@ -462,14 +473,14 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n             let ix: uint =\n                 ty::field_idx(ccx.sess, pat.span, f.ident, rec_fields);\n             let r = trans::GEP_tup_like(bcx, rec_ty, val, ~[0, ix as int]);\n-            bcx = bind_irrefutable_pat(r.bcx, f.pat, r.val, table);\n+            bcx = bind_irrefutable_pat(r.bcx, f.pat, r.val, table, copy);\n         }\n       }\n       ast::pat_box(inner) {\n         let box = bcx.build.Load(val);\n         let unboxed = bcx.build.InBoundsGEP\n             (box, ~[C_int(0), C_int(back::abi::box_rc_field_body)]);\n-        bcx = bind_irrefutable_pat(bcx, inner, unboxed, table);\n+        bcx = bind_irrefutable_pat(bcx, inner, unboxed, table, true);\n       }\n       ast::pat_wild. | ast::pat_lit(_) {}\n     }"}, {"sha": "fa2798ecc66ae2aa7b7a05dd001ce1f88c42f3ca", "filename": "src/test/run-pass/let-destruct-fresh-mem.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fa574864a5bd54752fc198438f8c53a8ed5ef0/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs?ref=f8fa574864a5bd54752fc198438f8c53a8ed5ef0", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let u = {x: 10, y: @{a: 20}};\n+    let {x, y: @{a}} = u;\n+    x = 100;\n+    a = 100;\n+    assert x == 100;\n+    assert a == 100;\n+    assert u.x == 10;\n+    assert u.y.a == 20;\n+}"}]}