{"sha": "dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjY2YzgxMDExZGRlZWJjYjAyMTlhNDlmZTAyN2Y2ZDVkNmQxYTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T12:17:13Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T12:17:13Z"}, "message": "Merge #1230\n\n1230: Desugar doc comments to `#[doc = \"....\"]` attributes in `syntax node` to tt conversion r=matklad a=edwin0cheng\n\nAs discussed in [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/MBE.20discussion/near/164446835), this PR desugar doc comments to  `#[doc = \"....\"]` in `syntax node` to tt conversion. \r\n\r\nNote that after this PR, all obvious mbe bugs in dogfooding are fixed. (i.e. No parsing or expanding mbe error in `env RUST_LOG=ra_hir=WARN target\\release\\ra_cli.exe analysis-stats`) \ud83c\udf89\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "70ad1f2bcf142e709c5ad5fcb76b46488ad288aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ad1f2bcf142e709c5ad5fcb76b46488ad288aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "html_url": "https://github.com/rust-lang/rust/commit/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8ee8542de23253ec29f1b817aeb975313875885d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee8542de23253ec29f1b817aeb975313875885d", "html_url": "https://github.com/rust-lang/rust/commit/8ee8542de23253ec29f1b817aeb975313875885d"}, {"sha": "036141663bd934da451461dbc47dc836c432e057", "url": "https://api.github.com/repos/rust-lang/rust/commits/036141663bd934da451461dbc47dc836c432e057", "html_url": "https://github.com/rust-lang/rust/commit/036141663bd934da451461dbc47dc836c432e057"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "73a0780dafe0c9769e6c7c2bab30933127575462", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "patch": "@@ -118,6 +118,69 @@ impl TokenMap {\n     }\n }\n \n+/// Returns the textual content of a doc comment block as a quoted string\n+/// That is, strips leading `///` (or `/**`, etc)\n+/// and strips the ending `*/`\n+/// And then quote the string, which is needed to convert to `tt::Literal`\n+fn doc_comment_text(comment: &ast::Comment) -> SmolStr {\n+    use ast::AstToken;\n+\n+    let prefix_len = comment.prefix().len();\n+    let mut text = &comment.text()[prefix_len..];\n+\n+    // Remove ending \"*/\"\n+    if comment.kind().shape == ast::CommentShape::Block {\n+        text = &text[0..text.len() - 2];\n+    }\n+\n+    // Quote the string\n+    // Note that `tt::Literal` expect an escaped string\n+    let text = format!(\"{:?}\", text.escape_default().to_string());\n+    text.into()\n+}\n+\n+fn convert_doc_comment<'a>(token: &ra_syntax::SyntaxToken<'a>) -> Option<Vec<tt::TokenTree>> {\n+    use ast::AstToken;\n+    let comment = ast::Comment::cast(*token)?;\n+    let doc = comment.kind().doc?;\n+\n+    // Make `doc=\"\\\" Comments\\\"\"\n+    let mut meta_tkns = Vec::new();\n+    meta_tkns.push(mk_ident(\"doc\"));\n+    meta_tkns.push(mk_punct('='));\n+    meta_tkns.push(mk_doc_literal(&comment));\n+\n+    // Make `#![]`\n+    let mut token_trees = Vec::new();\n+    token_trees.push(mk_punct('#'));\n+    if let ast::CommentPlacement::Inner = doc {\n+        token_trees.push(mk_punct('!'));\n+    }\n+    token_trees.push(tt::TokenTree::from(tt::Subtree::from(\n+        tt::Subtree { delimiter: tt::Delimiter::Bracket, token_trees: meta_tkns }.into(),\n+    )));\n+\n+    return Some(token_trees);\n+\n+    // Helper functions\n+    fn mk_ident(s: &str) -> tt::TokenTree {\n+        tt::TokenTree::from(tt::Leaf::from(tt::Ident {\n+            text: s.into(),\n+            id: tt::TokenId::unspecified(),\n+        }))\n+    }\n+\n+    fn mk_punct(c: char) -> tt::TokenTree {\n+        tt::TokenTree::from(tt::Leaf::from(tt::Punct { char: c, spacing: tt::Spacing::Alone }))\n+    }\n+\n+    fn mk_doc_literal(comment: &ast::Comment) -> tt::TokenTree {\n+        let lit = tt::Literal { text: doc_comment_text(comment) };\n+\n+        tt::TokenTree::from(tt::Leaf::from(lit))\n+    }\n+}\n+\n fn convert_tt(\n     token_map: &mut TokenMap,\n     global_offset: TextUnit,\n@@ -141,13 +204,17 @@ fn convert_tt(\n     let mut child_iter = tt.children_with_tokens().skip(skip_first as usize).peekable();\n \n     while let Some(child) = child_iter.next() {\n-        if (skip_first && (child == first_child || child == last_child)) || child.kind().is_trivia()\n-        {\n+        if skip_first && (child == first_child || child == last_child) {\n             continue;\n         }\n+\n         match child {\n             SyntaxElement::Token(token) => {\n-                if token.kind().is_punct() {\n+                if let Some(doc_tokens) = convert_doc_comment(&token) {\n+                    token_trees.extend(doc_tokens);\n+                } else if token.kind().is_trivia() {\n+                    continue;\n+                } else if token.kind().is_punct() {\n                     assert!(token.text().len() == 1, \"Input ast::token punct must be single char.\");\n                     let char = token.text().chars().next().unwrap();\n "}, {"sha": "c487bbbd482c1b029c560b9ee710adb4be377403", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc666c81011ddeebcb0219a49fe027f6d5d6d1a4/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=dc666c81011ddeebcb0219a49fe027f6d5d6d1a4", "patch": "@@ -867,6 +867,31 @@ fn test_meta() {\n     );\n }\n \n+#[test]\n+fn test_meta_doc_comments() {\n+    let rules = create_rules(\n+        r#\"\n+        macro_rules! foo {\n+            ($(#[$ i:meta])+) => (\n+                $(#[$ i])+\n+                fn bar() {}\n+            )\n+        }\n+\"#,\n+    );\n+    assert_expansion(\n+        MacroKind::Items,\n+        &rules,\n+        r#\"foo! { \n+            /// Single Line Doc 1\n+            /** \n+                MultiLines Doc\n+            */\n+        }\"#,\n+        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\" \\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n+    );\n+}\n+\n #[test]\n fn test_tt_block() {\n     let rules = create_rules("}]}