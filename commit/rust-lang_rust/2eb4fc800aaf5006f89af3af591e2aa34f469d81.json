{"sha": "2eb4fc800aaf5006f89af3af591e2aa34f469d81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjRmYzgwMGFhZjUwMDZmODlhZjNhZjU5MWUyYWEzNGY0NjlkODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T03:58:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T03:58:32Z"}, "message": "Auto merge of #78323 - est31:smaller_list_overlap, r=varkor\n\nIterate over the smaller list\n\nIf there are two lists of different sizes,\niterating over the smaller list and then\nlooking up in the larger list is cheaper\nthan vice versa, because lookups scale\nsublinearly.", "tree": {"sha": "bba217a86f43117a0eafe735d50f388481ea715c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba217a86f43117a0eafe735d50f388481ea715c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb4fc800aaf5006f89af3af591e2aa34f469d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb4fc800aaf5006f89af3af591e2aa34f469d81", "html_url": "https://github.com/rust-lang/rust/commit/2eb4fc800aaf5006f89af3af591e2aa34f469d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb4fc800aaf5006f89af3af591e2aa34f469d81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db241bb0c8d257e13c1560f6250e49879477039e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db241bb0c8d257e13c1560f6250e49879477039e", "html_url": "https://github.com/rust-lang/rust/commit/db241bb0c8d257e13c1560f6250e49879477039e"}, {"sha": "6c9b8ada0c269fdbfd36cf66060bab9898824dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b8ada0c269fdbfd36cf66060bab9898824dd2", "html_url": "https://github.com/rust-lang/rust/commit/6c9b8ada0c269fdbfd36cf66060bab9898824dd2"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "a400b85cdb72f3007e28d57f50f59512443f5235", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb4fc800aaf5006f89af3af591e2aa34f469d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb4fc800aaf5006f89af3af591e2aa34f469d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2eb4fc800aaf5006f89af3af591e2aa34f469d81", "patch": "@@ -266,6 +266,10 @@ impl<'tcx> AssociatedItems<'tcx> {\n         self.items.iter().map(|(_, v)| *v)\n     }\n \n+    pub fn len(&self) -> usize {\n+        self.items.len()\n+    }\n+\n     /// Returns an iterator over all associated items with the given name, ignoring hygiene.\n     pub fn filter_by_name_unhygienic(\n         &self,"}, {"sha": "ce157f809ef875019f4eb113903830d07e3215aa", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2eb4fc800aaf5006f89af3af591e2aa34f469d81/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb4fc800aaf5006f89af3af591e2aa34f469d81/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=2eb4fc800aaf5006f89af3af591e2aa34f469d81", "patch": "@@ -2,8 +2,9 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_trait_selection::traits::{self, SkipLeakCheck};\n+use smallvec::SmallVec;\n \n pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n@@ -18,9 +19,18 @@ struct InherentOverlapChecker<'tcx> {\n impl InherentOverlapChecker<'tcx> {\n     /// Checks whether any associated items in impls 1 and 2 share the same identifier and\n     /// namespace.\n-    fn impls_have_common_items(&self, impl1: DefId, impl2: DefId) -> bool {\n-        let impl_items1 = self.tcx.associated_items(impl1);\n-        let impl_items2 = self.tcx.associated_items(impl2);\n+    fn impls_have_common_items(\n+        &self,\n+        impl_items1: &ty::AssociatedItems<'_>,\n+        impl_items2: &ty::AssociatedItems<'_>,\n+    ) -> bool {\n+        let mut impl_items1 = &impl_items1;\n+        let mut impl_items2 = &impl_items2;\n+\n+        // Performance optimization: iterate over the smaller list\n+        if impl_items1.len() > impl_items2.len() {\n+            std::mem::swap(&mut impl_items1, &mut impl_items2);\n+        }\n \n         for item1 in impl_items1.in_definition_order() {\n             let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).any(|item2| {\n@@ -113,9 +123,20 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                 let ty_def_id = self.tcx.hir().local_def_id(item.hir_id);\n                 let impls = self.tcx.inherent_impls(ty_def_id);\n \n-                for (i, &impl1_def_id) in impls.iter().enumerate() {\n-                    for &impl2_def_id in &impls[(i + 1)..] {\n-                        if self.impls_have_common_items(impl1_def_id, impl2_def_id) {\n+                // If there is only one inherent impl block,\n+                // there is nothing to overlap check it with\n+                if impls.len() <= 1 {\n+                    return;\n+                }\n+\n+                let impls_items = impls\n+                    .iter()\n+                    .map(|impl_def_id| (impl_def_id, self.tcx.associated_items(*impl_def_id)))\n+                    .collect::<SmallVec<[_; 8]>>();\n+\n+                for (i, &(&impl1_def_id, impl_items1)) in impls_items.iter().enumerate() {\n+                    for &(&impl2_def_id, impl_items2) in &impls_items[(i + 1)..] {\n+                        if self.impls_have_common_items(impl_items1, impl_items2) {\n                             self.check_for_overlapping_inherent_impls(impl1_def_id, impl2_def_id);\n                         }\n                     }"}]}