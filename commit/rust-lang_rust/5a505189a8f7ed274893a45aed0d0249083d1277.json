{"sha": "5a505189a8f7ed274893a45aed0d0249083d1277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTA1MTg5YThmN2VkMjc0ODkzYTQ1YWVkMGQwMjQ5MDgzZDEyNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T13:10:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:35:57Z"}, "message": "adjust comments", "tree": {"sha": "3a155da5450cec94a32e97d7a3dc330fdffa7602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a155da5450cec94a32e97d7a3dc330fdffa7602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a505189a8f7ed274893a45aed0d0249083d1277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a505189a8f7ed274893a45aed0d0249083d1277", "html_url": "https://github.com/rust-lang/rust/commit/5a505189a8f7ed274893a45aed0d0249083d1277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a505189a8f7ed274893a45aed0d0249083d1277/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c303e6fbdfd8d04b645796489766e912d2cb3009", "url": "https://api.github.com/repos/rust-lang/rust/commits/c303e6fbdfd8d04b645796489766e912d2cb3009", "html_url": "https://github.com/rust-lang/rust/commit/c303e6fbdfd8d04b645796489766e912d2cb3009"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "85911de921bd210ab7283cf351cb1b8974463949", "filename": "crates/ra_analysis/tests/test/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a505189a8f7ed274893a45aed0d0249083d1277/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a505189a8f7ed274893a45aed0d0249083d1277/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs?ref=5a505189a8f7ed274893a45aed0d0249083d1277", "patch": "@@ -31,6 +31,7 @@ fn test_unresolved_module_diagnostic() {\n     );\n }\n \n+// FIXME: move this test to hir\n #[test]\n fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n     let (analysis, file_id) = single_file(\"mod foo {}\");"}, {"sha": "d00d3246f09e375d8e8495fe4406a0cda6638a0d", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a505189a8f7ed274893a45aed0d0249083d1277/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a505189a8f7ed274893a45aed0d0249083d1277/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=5a505189a8f7ed274893a45aed0d0249083d1277", "patch": "@@ -34,22 +34,23 @@ pub struct Module {\n     pub(crate) def_id: DefId,\n }\n \n-/// An owned syntax node for a module. Unlike `ModuleSource`,\n-/// this holds onto the AST for the whole file.\n pub enum ModuleSource {\n     SourceFile(ast::SourceFileNode),\n     Module(ast::ModuleNode),\n }\n \n impl Module {\n+    /// Name of this module.\n     pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n         self.name_impl(db)\n     }\n \n+    /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn defenition_source(&self, db: &impl HirDatabase) -> Cancelable<(FileId, ModuleSource)> {\n         self.defenition_source_impl(db)\n     }\n-\n+    /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n+    /// `None` for the crate root.\n     pub fn declaration_source(\n         &self,\n         db: &impl HirDatabase,\n@@ -61,11 +62,12 @@ impl Module {\n     pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n         self.krate_impl(db)\n     }\n-\n+    /// Topmost parent of this module. Every module has a `crate_root`, but some\n+    /// might miss `krate`. This can happen if a module's file is not included\n+    /// into any module tree of any target from Cargo.toml.\n     pub fn crate_root(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n         self.crate_root_impl(db)\n     }\n-\n     /// Finds a child module with the specified name.\n     pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n         self.child_impl(db, name)"}]}