{"sha": "3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOGJiMzgxNjRkOTY4MWJiMjBkNjBlOWZiMjI1ZWZlMTBkM2M2ZmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T21:13:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T21:13:32Z"}, "message": "Rollup merge of #84880 - jyn514:cleanup-itemkind, r=GuillaumeGomez\n\nMake match in `register_res` easier to read\n\n- Don't duplicate DefKind -> ItemType handling; that's a good way to get bugs\n- Use exhaustive match\n- Add comments\n\nThis found that register_res is very wrong in at least one way: if it\nregisters a Res for `Variant`, it should also register one for `Field`.\nBut I don't know whether the one for Variant should be removed or Field\nadded. Maybe someone has ideas?\n\nFound while reviewing https://github.com/rust-lang/rust/pull/84176.", "tree": {"sha": "69ffb9bdc8817faf81d5fe5f8c81c81c441e0c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ffb9bdc8817faf81d5fe5f8c81c81c441e0c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgupd+CRBK7hj4Ov3rIwAA0oEIAGnBLTZsh78dplecCLNF9lMB\nYgLHNNr13YXaZ1E4qNOgXVjHwdLj9s6HmQ7uNIMLCKrD9LyIpBER8F32oXCydDyN\nHjNJ8sxScgXdREFts68worZPXUWgPmzBpHDqo9nP6kLbxE/ls9CeiGPu8zgDpbtg\nNzXhB86b1h/sizHYzy9/oc12MmZ3OoyQNptkI3/QvlAo6AlT0h2luQy28QX/Op5j\nb//msLAc5mY8iS0LcoJUcUAkWIttuELLFyxpEf+fe3fTtf5Ofj7VuLcA5wOd4nA1\n/7Ck5bf3YPHALDKlNog0mEUzpWdTUAGqXRb1n0o4xhxEGzHIXE43Zkqtgza5T3A=\n=1ACm\n-----END PGP SIGNATURE-----\n", "payload": "tree 69ffb9bdc8817faf81d5fe5f8c81c81c441e0c9f\nparent 74c744e54a9805b8fa98eb43321f7f8efd998536\nparent 4029a03b345ae9fcc8e981ac181f00332b7711ed\nauthor Yuki Okushi <jtitor@2k36.org> 1622841212 +0900\ncommitter GitHub <noreply@github.com> 1622841212 +0900\n\nRollup merge of #84880 - jyn514:cleanup-itemkind, r=GuillaumeGomez\n\nMake match in `register_res` easier to read\n\n- Don't duplicate DefKind -> ItemType handling; that's a good way to get bugs\n- Use exhaustive match\n- Add comments\n\nThis found that register_res is very wrong in at least one way: if it\nregisters a Res for `Variant`, it should also register one for `Field`.\nBut I don't know whether the one for Variant should be removed or Field\nadded. Maybe someone has ideas?\n\nFound while reviewing https://github.com/rust-lang/rust/pull/84176.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "html_url": "https://github.com/rust-lang/rust/commit/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c744e54a9805b8fa98eb43321f7f8efd998536", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c744e54a9805b8fa98eb43321f7f8efd998536", "html_url": "https://github.com/rust-lang/rust/commit/74c744e54a9805b8fa98eb43321f7f8efd998536"}, {"sha": "4029a03b345ae9fcc8e981ac181f00332b7711ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4029a03b345ae9fcc8e981ac181f00332b7711ed", "html_url": "https://github.com/rust-lang/rust/commit/4029a03b345ae9fcc8e981ac181f00332b7711ed"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "f3bd4efc11a55d55a33ef6d1be01319d70c04235", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "patch": "@@ -2,7 +2,7 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -451,35 +451,48 @@ crate fn get_auto_trait_and_blanket_impls(\n     auto_impls.into_iter().chain(blanket_impls)\n }\n \n+/// If `res` has a documentation page associated, store it in the cache.\n+///\n+/// This is later used by [`href()`] to determine the HTML link for the item.\n+///\n+/// [`href()`]: crate::html::format::href\n crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n+    use DefKind::*;\n     debug!(\"register_res({:?})\", res);\n \n     let (did, kind) = match res {\n-        Res::Def(DefKind::Fn, i) => (i, ItemType::Function),\n-        Res::Def(DefKind::TyAlias, i) => (i, ItemType::Typedef),\n-        Res::Def(DefKind::Enum, i) => (i, ItemType::Enum),\n-        Res::Def(DefKind::Trait, i) => (i, ItemType::Trait),\n         Res::Def(DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst, i) => {\n+            // associated items are documented, but on the page of their parent\n             (cx.tcx.parent(i).unwrap(), ItemType::Trait)\n         }\n-        Res::Def(DefKind::Struct, i) => (i, ItemType::Struct),\n-        Res::Def(DefKind::Union, i) => (i, ItemType::Union),\n-        Res::Def(DefKind::Mod, i) => (i, ItemType::Module),\n-        Res::Def(DefKind::ForeignTy, i) => (i, ItemType::ForeignType),\n-        Res::Def(DefKind::Const, i) => (i, ItemType::Constant),\n-        Res::Def(DefKind::Static, i) => (i, ItemType::Static),\n         Res::Def(DefKind::Variant, i) => {\n+            // variant items are documented, but on the page of their parent\n             (cx.tcx.parent(i).expect(\"cannot get parent def id\"), ItemType::Enum)\n         }\n-        Res::Def(DefKind::Macro(mac_kind), i) => match mac_kind {\n-            MacroKind::Bang => (i, ItemType::Macro),\n-            MacroKind::Attr => (i, ItemType::ProcAttribute),\n-            MacroKind::Derive => (i, ItemType::ProcDerive),\n-        },\n-        Res::Def(DefKind::TraitAlias, i) => (i, ItemType::TraitAlias),\n-        Res::SelfTy(Some(def_id), _) => (def_id, ItemType::Trait),\n-        Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n-        _ => return res.def_id(),\n+        // Each of these have their own page.\n+        Res::Def(\n+            kind\n+            @\n+            (Fn | TyAlias | Enum | Trait | Struct | Union | Mod | ForeignTy | Const | Static\n+            | Macro(..) | TraitAlias),\n+            i,\n+        ) => (i, kind.into()),\n+        // This is part of a trait definition; document the trait.\n+        Res::SelfTy(Some(trait_def_id), _) => (trait_def_id, ItemType::Trait),\n+        // This is an inherent impl; it doesn't have its own page.\n+        Res::SelfTy(None, Some((impl_def_id, _))) => return impl_def_id,\n+        Res::SelfTy(None, None)\n+        | Res::PrimTy(_)\n+        | Res::ToolMod\n+        | Res::SelfCtor(_)\n+        | Res::Local(_)\n+        | Res::NonMacroAttr(_)\n+        | Res::Err => return res.def_id(),\n+        Res::Def(\n+            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst | OpaqueTy\n+            | Field | LifetimeParam | GlobalAsm | Impl | Closure | Generator,\n+            id,\n+        ) => return id,\n     };\n     if did.is_local() {\n         return did;"}, {"sha": "c67c40a77edbed7a8bfab878e2da69b17c659b42", "filename": "src/test/rustdoc/intra-doc/field.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8bb38164d9681bb20d60e9fb225efe10d3c6fa/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs?ref=3a8bb38164d9681bb20d60e9fb225efe10d3c6fa", "patch": "@@ -0,0 +1,4 @@\n+// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html#structfield.start\"]' 'start'\n+// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.NotFound\"]' 'not_found'\n+//! [start][std::ops::Range::start]\n+//! [not_found][std::io::ErrorKind::NotFound]"}]}