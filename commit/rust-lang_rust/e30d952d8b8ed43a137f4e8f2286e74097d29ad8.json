{"sha": "e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMGQ5NTJkOGI4ZWQ0M2ExMzdmNGU4ZjIyODZlNzQwOTdkMjlhZDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-01T09:32:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-01T09:32:31Z"}, "message": "Rollup merge of #84601 - tdelabro:rustdoc-get-rid-of-cache-extern_locations, r=jyn514\n\nrustdoc: Only store locations in Cache::extern_locations and calculate the other info on-demand\n\n help #84588", "tree": {"sha": "b2f4c8a9b0e44093779b4ee82b88d9ecf36c0c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f4c8a9b0e44093779b4ee82b88d9ecf36c0c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjSAvCRBK7hj4Ov3rIwAAMGYIAJ8O2g/bsBkS0TvoVZnRRdYO\nnWlOAVymXrMscmCV7AZ0EKW8H6heM8FH9hbQgiIAau3Yjf0VFPF+MJ0yoR84gKu6\nYpQ1MjJlp9bFou09tCXealWSUpQyn/e5RDFr6E9mlAv4HoZ7f+ffoTi7r/iod42p\nEzvzPlfKUMGl60ZM7t818OmWaWuZdnrqQZPIU0iNVc/Xi4BwzGIayrlyloXTZYSm\nFQ75C2Ex1ydfDyo+aNUsshvX1op4gI+tih17IMVtDVyiUGAkFRJ1LMpVANXhmKjH\n1lI8epLiATT2szxEwWHiePH5/l9We4Yfgv16vTRDNlNuMWU1N177leTxrxSDWFw=\n=VGhj\n-----END PGP SIGNATURE-----\n", "payload": "tree b2f4c8a9b0e44093779b4ee82b88d9ecf36c0c81\nparent 3d67e0747238c392bfb03984db132576aa19bec1\nparent 2cc263988ec6920d0f1182d6667251cac0061855\nauthor Yuki Okushi <jtitor@2k36.org> 1619861551 +0900\ncommitter GitHub <noreply@github.com> 1619861551 +0900\n\nRollup merge of #84601 - tdelabro:rustdoc-get-rid-of-cache-extern_locations, r=jyn514\n\nrustdoc: Only store locations in Cache::extern_locations and calculate the other info on-demand\n\n help #84588\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "html_url": "https://github.com/rust-lang/rust/commit/e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d67e0747238c392bfb03984db132576aa19bec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d67e0747238c392bfb03984db132576aa19bec1", "html_url": "https://github.com/rust-lang/rust/commit/3d67e0747238c392bfb03984db132576aa19bec1"}, {"sha": "2cc263988ec6920d0f1182d6667251cac0061855", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc263988ec6920d0f1182d6667251cac0061855", "html_url": "https://github.com/rust-lang/rust/commit/2cc263988ec6920d0f1182d6667251cac0061855"}], "stats": {"total": 172, "additions": 88, "deletions": 84}, "files": [{"sha": "33cb11e539bf2d89f8d8e63633d89b697723bca0", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n+use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n@@ -90,6 +91,58 @@ impl ExternalCrate {\n         tcx.crate_name(self.crate_num)\n     }\n \n+    crate fn src_root(&self, tcx: TyCtxt<'_>) -> PathBuf {\n+        match self.src(tcx) {\n+            FileName::Real(ref p) => match p.local_path().parent() {\n+                Some(p) => p.to_path_buf(),\n+                None => PathBuf::new(),\n+            },\n+            _ => PathBuf::new(),\n+        }\n+    }\n+\n+    /// Attempts to find where an external crate is located, given that we're\n+    /// rendering in to the specified source destination.\n+    crate fn location(\n+        &self,\n+        extern_url: Option<&str>,\n+        dst: &std::path::Path,\n+        tcx: TyCtxt<'_>,\n+    ) -> ExternalLocation {\n+        use ExternalLocation::*;\n+\n+        fn to_remote(url: impl ToString) -> ExternalLocation {\n+            let mut url = url.to_string();\n+            if !url.ends_with('/') {\n+                url.push('/');\n+            }\n+            Remote(url)\n+        }\n+\n+        // See if there's documentation generated into the local directory\n+        // WARNING: since rustdoc creates these directories as it generates documentation, this check is only accurate before rendering starts.\n+        // Make sure to call `location()` by that time.\n+        let local_location = dst.join(&*self.name(tcx).as_str());\n+        if local_location.is_dir() {\n+            return Local;\n+        }\n+\n+        if let Some(url) = extern_url {\n+            return to_remote(url);\n+        }\n+\n+        // Failing that, see if there's an attribute specifying where to find this\n+        // external crate\n+        let did = DefId { krate: self.crate_num, index: CRATE_DEF_INDEX };\n+        tcx.get_attrs(did)\n+            .lists(sym::doc)\n+            .filter(|a| a.has_name(sym::html_root_url))\n+            .filter_map(|a| a.value_str())\n+            .map(to_remote)\n+            .next()\n+            .unwrap_or(Unknown) // Well, at least we tried.\n+    }\n+\n     crate fn keywords(&self, tcx: TyCtxt<'_>) -> ThinVec<(DefId, Symbol)> {\n         let root = self.def_id();\n \n@@ -381,7 +434,7 @@ impl Item {\n                         let relative_to = &cx.current;\n                         if let Some(ref fragment) = *fragment {\n                             let url = match cx.cache().extern_locations.get(&self.def_id.krate) {\n-                                Some(&(_, _, ExternalLocation::Local)) => {\n+                                Some(ExternalLocation::Local) => {\n                                     if relative_to[0] == \"std\" {\n                                         let depth = relative_to.len() - 1;\n                                         \"../\".repeat(depth)\n@@ -390,10 +443,10 @@ impl Item {\n                                         format!(\"{}std/\", \"../\".repeat(depth))\n                                     }\n                                 }\n-                                Some(&(_, _, ExternalLocation::Remote(ref s))) => {\n+                                Some(ExternalLocation::Remote(ref s)) => {\n                                     format!(\"{}/std/\", s.trim_end_matches('/'))\n                                 }\n-                                Some(&(_, _, ExternalLocation::Unknown)) | None => format!(\n+                                Some(ExternalLocation::Unknown) | None => format!(\n                                     \"https://doc.rust-lang.org/{}/std/\",\n                                     crate::doc_rust_lang_org_channel(),\n                                 ),"}, {"sha": "8723e47586ee4600e4ece32f573410dcbf7320c4", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -1,21 +1,19 @@\n use std::collections::BTreeMap;\n use std::mem;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::source_map::FileName;\n use rustc_span::symbol::sym;\n-use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n use crate::html::markdown::short_markdown_summary;\n-use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n+use crate::html::render::cache::{get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n \n /// This cache is used to store information about the [`clean::Crate`] being\n@@ -72,7 +70,7 @@ crate struct Cache {\n     crate implementors: FxHashMap<DefId, Vec<Impl>>,\n \n     /// Cache of where external crate documentation can be found.\n-    crate extern_locations: FxHashMap<CrateNum, (Symbol, PathBuf, ExternalLocation)>,\n+    crate extern_locations: FxHashMap<CrateNum, ExternalLocation>,\n \n     /// Cache of where documentation for primitives can be found.\n     crate primitive_locations: FxHashMap<clean::PrimitiveType, DefId>,\n@@ -155,21 +153,10 @@ impl Cache {\n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n         for &(n, ref e) in &krate.externs {\n-            let src_root = match e.src(tcx) {\n-                FileName::Real(ref p) => match p.local_path().parent() {\n-                    Some(p) => p.to_path_buf(),\n-                    None => PathBuf::new(),\n-                },\n-                _ => PathBuf::new(),\n-            };\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            self.extern_locations.insert(\n-                n,\n-                (name, src_root, extern_location(e, extern_url, tcx.get_attrs(did), &dst, tcx)),\n-            );\n-\n+            self.extern_locations.insert(n, e.location(extern_url, &dst, tcx));\n             self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n         }\n "}, {"sha": "f211a5acf5ea58793aba2d9ea465d0d8394c5caf", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n-use crate::clean::{self, utils::find_nearest_parent_module, PrimitiveType};\n+use crate::clean::{self, utils::find_nearest_parent_module, ExternalCrate, PrimitiveType};\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n use crate::html::render::cache::ExternalLocation;\n@@ -465,14 +465,14 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Option<(String, ItemType, Vec<Str\n                 fqp,\n                 shortty,\n                 match cache.extern_locations[&did.krate] {\n-                    (.., ExternalLocation::Remote(ref s)) => {\n+                    ExternalLocation::Remote(ref s) => {\n                         let s = s.trim_end_matches('/');\n                         let mut s = vec![&s[..]];\n                         s.extend(module_fqp[..].iter().map(String::as_str));\n                         s\n                     }\n-                    (.., ExternalLocation::Local) => href_relative_parts(module_fqp, relative_to),\n-                    (.., ExternalLocation::Unknown) => return None,\n+                    ExternalLocation::Local => href_relative_parts(module_fqp, relative_to),\n+                    ExternalLocation::Unknown => return None,\n                 },\n             )\n         }\n@@ -578,20 +578,22 @@ fn primitive_link(\n             Some(&def_id) => {\n                 let cname_str;\n                 let loc = match m.extern_locations[&def_id.krate] {\n-                    (ref cname, _, ExternalLocation::Remote(ref s)) => {\n-                        cname_str = cname.as_str();\n+                    ExternalLocation::Remote(ref s) => {\n+                        cname_str =\n+                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n                         Some(vec![s.trim_end_matches('/'), &cname_str[..]])\n                     }\n-                    (ref cname, _, ExternalLocation::Local) => {\n-                        cname_str = cname.as_str();\n+                    ExternalLocation::Local => {\n+                        cname_str =\n+                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n                         Some(if cx.current.first().map(|x| &x[..]) == Some(&cname_str[..]) {\n                             iter::repeat(\"..\").take(cx.current.len() - 1).collect()\n                         } else {\n                             let cname = iter::once(&cname_str[..]);\n                             iter::repeat(\"..\").take(cx.current.len()).chain(cname).collect()\n                         })\n                     }\n-                    (.., ExternalLocation::Unknown) => None,\n+                    ExternalLocation::Unknown => None,\n                 };\n                 if let Some(loc) = loc {\n                     write!("}, {"sha": "27a8065afb6d2e1c1c2961f26c945a4af98b463d", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -1,15 +1,13 @@\n use std::collections::BTreeMap;\n-use std::path::Path;\n \n-use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n use crate::clean::types::{\n-    AttributesExt, FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n+    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n };\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -26,47 +24,6 @@ crate enum ExternalLocation {\n     Unknown,\n }\n \n-/// Attempts to find where an external crate is located, given that we're\n-/// rendering in to the specified source destination.\n-crate fn extern_location(\n-    e: &clean::ExternalCrate,\n-    extern_url: Option<&str>,\n-    ast_attrs: &[ast::Attribute],\n-    dst: &Path,\n-    tcx: TyCtxt<'_>,\n-) -> ExternalLocation {\n-    use ExternalLocation::*;\n-    // See if there's documentation generated into the local directory\n-    let local_location = dst.join(&*e.name(tcx).as_str());\n-    if local_location.is_dir() {\n-        return Local;\n-    }\n-\n-    if let Some(url) = extern_url {\n-        let mut url = url.to_string();\n-        if !url.ends_with('/') {\n-            url.push('/');\n-        }\n-        return Remote(url);\n-    }\n-\n-    // Failing that, see if there's an attribute specifying where to find this\n-    // external crate\n-    ast_attrs\n-        .lists(sym::doc)\n-        .filter(|a| a.has_name(sym::html_root_url))\n-        .filter_map(|a| a.value_str())\n-        .map(|url| {\n-            let mut url = url.to_string();\n-            if !url.ends_with('/') {\n-                url.push('/')\n-            }\n-            Remote(url)\n-        })\n-        .next()\n-        .unwrap_or(Unknown) // Well, at least we tried.\n-}\n-\n /// Builds the search index from the collected metadata\n crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<'tcx>) -> String {\n     let mut defid_to_pathid = FxHashMap::default();"}, {"sha": "293c0a40fa79966712e3563d7f5c216905f14c5b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{print_sidebar, settings, AllTypes, NameDoc, StylePath, BASIC_KEYWORDS};\n \n-use crate::clean;\n+use crate::clean::{self, ExternalCrate};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n@@ -304,12 +304,16 @@ impl<'tcx> Context<'tcx> {\n             }\n         } else {\n             let (krate, src_root) = match *self.cache.extern_locations.get(&cnum)? {\n-                (name, ref src, ExternalLocation::Local) => (name, src),\n-                (name, ref src, ExternalLocation::Remote(ref s)) => {\n+                ExternalLocation::Local => {\n+                    let e = ExternalCrate { crate_num: cnum };\n+                    (e.name(self.tcx()), e.src_root(self.tcx()))\n+                }\n+                ExternalLocation::Remote(ref s) => {\n                     root = s.to_string();\n-                    (name, src)\n+                    let e = ExternalCrate { crate_num: cnum };\n+                    (e.name(self.tcx()), e.src_root(self.tcx()))\n                 }\n-                (_, _, ExternalLocation::Unknown) => return None,\n+                ExternalLocation::Unknown => return None,\n             };\n \n             sources::clean_path(&src_root, file, false, |component| {"}, {"sha": "ae4d1be3ec2b8a96c16cc97817c2c23f9fe5af06", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d952d8b8ed43a137f4e8f2286e74097d29ad8/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=e30d952d8b8ed43a137f4e8f2286e74097d29ad8", "patch": "@@ -17,7 +17,7 @@ use rustc_session::Session;\n \n use rustdoc_json_types as types;\n \n-use crate::clean;\n+use crate::clean::{self, ExternalCrate};\n use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -218,12 +218,13 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .cache\n                 .extern_locations\n                 .iter()\n-                .map(|(k, v)| {\n+                .map(|(crate_num, external_location)| {\n+                    let e = ExternalCrate { crate_num: *crate_num };\n                     (\n-                        k.as_u32(),\n+                        crate_num.as_u32(),\n                         types::ExternalCrate {\n-                            name: v.0.to_string(),\n-                            html_root_url: match &v.2 {\n+                            name: e.name(self.tcx).to_string(),\n+                            html_root_url: match external_location {\n                                 ExternalLocation::Remote(s) => Some(s.clone()),\n                                 _ => None,\n                             },"}]}