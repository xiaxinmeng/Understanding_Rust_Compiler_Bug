{"sha": "643f3931f781940c0ee6c49be9f933f344d796a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0M2YzOTMxZjc4MTk0MGMwZWU2YzQ5YmU5ZjkzM2YzNDRkNzk2YTM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T02:15:28Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "Sort trait and impl methods", "tree": {"sha": "350dd327df3398066d2f58d35188d7e9477860d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350dd327df3398066d2f58d35188d7e9477860d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643f3931f781940c0ee6c49be9f933f344d796a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643f3931f781940c0ee6c49be9f933f344d796a3", "html_url": "https://github.com/rust-lang/rust/commit/643f3931f781940c0ee6c49be9f933f344d796a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643f3931f781940c0ee6c49be9f933f344d796a3/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29506b5a26ef0c448c0e50164b2a7782fb7e3f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/29506b5a26ef0c448c0e50164b2a7782fb7e3f5a", "html_url": "https://github.com/rust-lang/rust/commit/29506b5a26ef0c448c0e50164b2a7782fb7e3f5a"}], "stats": {"total": 177, "additions": 164, "deletions": 13}, "files": [{"sha": "0ede55a6d7c034f40bf43b726f230fe6aaac45fc", "filename": "crates/ide_assists/src/handlers/reorder_impl.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=643f3931f781940c0ee6c49be9f933f344d796a3", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     ted, AstNode,\n };\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, utils::get_methods};\n \n // Assist: reorder_impl\n //\n@@ -76,7 +76,7 @@ pub(crate) fn reorder_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let target = items.syntax().text_range();\n     acc.add(\n         AssistId(\"reorder_impl\", AssistKind::RefactorRewrite),\n-        \"Sort methods\",\n+        \"Sort methods by trait definition\",\n         target,\n         |builder| {\n             let methods = methods.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n@@ -111,17 +111,6 @@ fn trait_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<\n     }\n }\n \n-fn get_methods(items: &ast::AssocItemList) -> Vec<ast::Fn> {\n-    items\n-        .assoc_items()\n-        .flat_map(|i| match i {\n-            ast::AssocItem::Fn(f) => Some(f),\n-            _ => None,\n-        })\n-        .filter(|f| f.name().is_some())\n-        .collect()\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}, {"sha": "d86b263c1279852686e2f56a8890dbeab0b5771e", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=643f3931f781940c0ee6c49be9f933f344d796a3", "patch": "@@ -0,0 +1,149 @@\n+use std::cmp::Ordering;\n+\n+use hir::known::Option;\n+use itertools::Itertools;\n+\n+use syntax::{\n+    ast::{self, NameOwner},\n+    ted, AstNode,\n+};\n+\n+use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: sort_items\n+//\n+pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    if let Some(trait_ast) = ctx.find_node_at_offset::<ast::Trait>() {\n+        sort_methods_assist(acc, trait_ast.assoc_item_list()?)\n+    } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n+        sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n+    let methods = get_methods(&item_list);\n+    let sorted = sort_by_name(&methods);\n+\n+    if methods == sorted {\n+        cov_mark::hit!(not_applicable_if_sorted);\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"sort_items\", AssistKind::RefactorRewrite),\n+        \"Sort methods alphabetically\",\n+        item_list.syntax().text_range(),\n+        |builder| {\n+            let methods = methods.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n+            methods\n+                .into_iter()\n+                .zip(sorted)\n+                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n+        },\n+    )\n+}\n+\n+fn sort_by_name<T: NameOwner + Clone>(initial: &[T]) -> Vec<T> {\n+    initial\n+        .iter()\n+        .cloned()\n+        .sorted_by(|a, b| match (a.name(), b.name()) {\n+            (Some(a), Some(b)) => Ord::cmp(&a.to_string(), &b.to_string()),\n+\n+            // unexpected, but just in case\n+            (None, None) => Ordering::Equal,\n+            (None, Some(_)) => Ordering::Less,\n+            (Some(_), None) => Ordering::Greater,\n+        })\n+        .collect()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn not_applicable_if_trait_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+t$0rait Bar {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_impl_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+struct Bar;            \n+$0impl Bar {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_trait() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0trait Bar {\n+    fn a() {}\n+    fn c() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+        \"#,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+    fn z() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_impl() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+struct Bar;\n+$0impl Bar {\n+    fn c() {}\n+    fn a() {}\n+    fn z() {}\n+    fn d() {}\n+}\n+        \"#,\n+            r#\"\n+struct Bar;\n+impl Bar {\n+    fn a() {}\n+    fn c() {}\n+    fn d() {}\n+    fn z() {}\n+}\n+        \"#,\n+        )\n+    }\n+}"}, {"sha": "75cf2680619158730b20f43bb139e123d9767231", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=643f3931f781940c0ee6c49be9f933f344d796a3", "patch": "@@ -110,6 +110,7 @@ mod handlers {\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n     mod split_import;\n+    mod sort_items;\n     mod toggle_ignore;\n     mod unmerge_use;\n     mod unwrap_block;\n@@ -181,6 +182,7 @@ mod handlers {\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            sort_items::sort_items,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,\n             unmerge_use::unmerge_use,"}, {"sha": "7ebe7df1d8feff967330f29d30d8597c3cf557f3", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643f3931f781940c0ee6c49be9f933f344d796a3/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=643f3931f781940c0ee6c49be9f933f344d796a3", "patch": "@@ -516,3 +516,14 @@ fn ty_ctor(ty: &String, ctor: &str) -> Option<String> {\n     let res = ty.to_string().strip_prefix(ctor)?.strip_prefix('<')?.strip_suffix('>')?.to_string();\n     Some(res)\n }\n+\n+pub(crate) fn get_methods(items: &ast::AssocItemList) -> Vec<ast::Fn> {\n+    items\n+        .assoc_items()\n+        .flat_map(|i| match i {\n+            ast::AssocItem::Fn(f) => Some(f),\n+            _ => None,\n+        })\n+        .filter(|f| f.name().is_some())\n+        .collect()\n+}"}]}