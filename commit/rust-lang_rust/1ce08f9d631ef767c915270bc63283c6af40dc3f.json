{"sha": "1ce08f9d631ef767c915270bc63283c6af40dc3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTA4ZjlkNjMxZWY3NjdjOTE1MjcwYmM2MzI4M2M2YWY0MGRjM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T18:37:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T18:37:02Z"}, "message": "Auto merge of #68351 - Centril:rollup-0gzuh0p, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #67712 (Stabilize `#![feature(slice_patterns)]` in 1.42.0)\n - #68224 (Prevent urls in headings)\n - #68340 (clean up e0200 explanation)\n - #68341 (Fix syscalls tables in docs of std::time.)\n - #68342 (improve type_name_of_val docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "77979000124d01c535bb69cf21e752995b4e0f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77979000124d01c535bb69cf21e752995b4e0f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce08f9d631ef767c915270bc63283c6af40dc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce08f9d631ef767c915270bc63283c6af40dc3f", "html_url": "https://github.com/rust-lang/rust/commit/1ce08f9d631ef767c915270bc63283c6af40dc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce08f9d631ef767c915270bc63283c6af40dc3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779f85bac6b304dd4cad5981acf053a2c0601582", "url": "https://api.github.com/repos/rust-lang/rust/commits/779f85bac6b304dd4cad5981acf053a2c0601582", "html_url": "https://github.com/rust-lang/rust/commit/779f85bac6b304dd4cad5981acf053a2c0601582"}, {"sha": "e8819b62b4c45d380058c5f86c7e9484ae05ddb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8819b62b4c45d380058c5f86c7e9484ae05ddb5", "html_url": "https://github.com/rust-lang/rust/commit/e8819b62b4c45d380058c5f86c7e9484ae05ddb5"}], "stats": {"total": 1110, "additions": 432, "deletions": 678}, "files": [{"sha": "cdb74495884a8e6e8d027992e147814ed44946ee", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=779f85bac6b304dd4cad5981acf053a2c0601582", "patch": "@@ -1,32 +0,0 @@\n-# `slice_patterns`\n-\n-The tracking issue for this feature is: [#62254]\n-\n-[#62254]: https://github.com/rust-lang/rust/issues/62254\n-\n-------------------------\n-\n-The `slice_patterns` feature gate lets you use `..` to indicate any number of\n-elements inside a pattern matching a slice. This wildcard can only be used once\n-for a given array. If there's an pattern before the `..`, the subslice will be\n-matched against that pattern. For example:\n-\n-```rust\n-#![feature(slice_patterns)]\n-\n-fn is_symmetric(list: &[u32]) -> bool {\n-    match list {\n-        &[] | &[_] => true,\n-        &[x, ref inside @ .., y] if x == y => is_symmetric(inside),\n-        &[..] => false,\n-    }\n-}\n-\n-fn main() {\n-    let sym = &[0, 1, 4, 2, 4, 1, 0];\n-    assert!(is_symmetric(sym));\n-\n-    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n-    assert!(!is_symmetric(not_sym));\n-}\n-```"}, {"sha": "af02e84d3fa537f5c7fdb1469e4d45ba29364f33", "filename": "src/libcore/any.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -476,11 +476,15 @@ pub const fn type_name<T: ?Sized>() -> &'static str {\n ///\n /// This is intended for diagnostic use. The exact contents and format of the\n /// string are not specified, other than being a best-effort description of the\n-/// type. For example, `type_name_of::<Option<String>>(None)` could return\n+/// type. For example, `type_name_of_val::<Option<String>>(None)` could return\n /// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n /// `\"foobar\"`. In addition, the output may change between versions of the\n /// compiler.\n ///\n+/// This function does not resolve trait objects,\n+/// meaning that `type_name_of_val(&7u32 as &dyn Debug)`\n+/// may return `\"dyn Debug\"`, but not `\"u32\"`.\n+///\n /// The type name should not be considered a unique identifier of a type;\n /// multiple types may share the same type name.\n ///"}, {"sha": "f77b4d7461e74a164f6df4982150c2854f1f5742", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -133,7 +133,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "f0420247acfbd0337ce7f3000bdc7c2127240dce", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -19,7 +19,7 @@\n #![feature(range_is_empty)]\n #![feature(raw)]\n #![feature(saturating_neg)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n #![feature(specialization)]"}, {"sha": "de82b262e4956137c8dd50aa4e55a3562b3e2d9b", "filename": "src/librustc/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fbenches%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "69ca40636948f72e92a5dc5cf65e1be7fc7dbc59", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -42,7 +42,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(option_expect_none)]\n #![feature(range_is_empty)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(thread_local)]"}, {"sha": "461072873bb529a08885100c25810393d0df0357", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -470,29 +470,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e)\n     }\n \n-    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n-        visit::walk_arm(self, arm)\n-    }\n-\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n-            PatKind::Slice(pats) => {\n-                for pat in &*pats {\n-                    let span = pat.span;\n-                    let inner_pat = match &pat.kind {\n-                        PatKind::Ident(.., Some(pat)) => pat,\n-                        _ => pat,\n-                    };\n-                    if inner_pat.is_rest() {\n-                        gate_feature_post!(\n-                            &self,\n-                            slice_patterns,\n-                            span,\n-                            \"subslice patterns are unstable\"\n-                        );\n-                    }\n-                }\n-            }\n             PatKind::Box(..) => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "5de45f4e1f36571e597f6e8cfddb58f2688c4c4c", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,7 @@\n //! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n //! by `rustc_ast_lowering`.\n \n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "aba77231268e7e0226098c1bf65fede240edeeec", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,7 +4,7 @@\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(libc)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(stmt_expr_attributes)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]"}, {"sha": "7245bb59ce5ffa5406f42f82e752ff0b89303643", "filename": "src/librustc_error_codes/error_codes/E0200.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0200.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0200.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0200.md?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,14 +1,23 @@\n+An unsafe trait was implemented without an unsafe implementation.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0200\n+struct Foo;\n+\n+unsafe trait Bar { }\n+\n+impl Bar for Foo { } // error!\n+```\n+\n Unsafe traits must have unsafe implementations. This error occurs when an\n implementation for an unsafe trait isn't marked as unsafe. This may be resolved\n by marking the unsafe implementation as unsafe.\n \n-```compile_fail,E0200\n+```\n struct Foo;\n \n unsafe trait Bar { }\n \n-// this won't compile because Bar is unsafe and impl isn't unsafe\n-impl Bar for Foo { }\n-// this will compile\n-unsafe impl Bar for Foo { }\n+unsafe impl Bar for Foo { } // ok!\n ```"}, {"sha": "97ea31269388142df9853a62c3aa8b756aa86e1c", "filename": "src/librustc_error_codes/error_codes/E0527.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0527.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0527.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0527.md?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -17,8 +17,6 @@ Ensure that the pattern is consistent with the size of the matched\n array. Additional elements can be matched with `..`:\n \n ```\n-#![feature(slice_patterns)]\n-\n let r = &[1, 2, 3, 4];\n match r {\n     &[a, b, ..] => { // ok!"}, {"sha": "54c2c4d4e9d0f765eb1d1450e1f7cc381ed9a569", "filename": "src/librustc_error_codes/error_codes/E0528.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0528.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0528.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0528.md?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,8 +4,6 @@ matched array.\n Example of erroneous code:\n \n ```compile_fail,E0528\n-#![feature(slice_patterns)]\n-\n let r = &[1, 2];\n match r {\n     &[a, b, c, rest @ ..] => { // error: pattern requires at least 3\n@@ -19,8 +17,6 @@ Ensure that the matched array has at least as many elements as the pattern\n requires. You can match an arbitrary number of remaining elements with `..`:\n \n ```\n-#![feature(slice_patterns)]\n-\n let r = &[1, 2, 3, 4, 5];\n match r {\n     &[a, b, c, rest @ ..] => { // ok!"}, {"sha": "bf1f72be3258926bd7f107935517027cbda26f8a", "filename": "src/librustc_error_codes/error_codes/E0730.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -18,8 +18,6 @@ Ensure that the pattern is consistent with the size of the matched\n array. Additional elements can be matched with `..`:\n \n ```\n-#![feature(slice_patterns)]\n-\n let r = &[1, 2, 3, 4];\n match r {\n     &[a, b, ..] => { // ok!"}, {"sha": "007cee4c7642443c1e74220c0fb784479e825698", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -257,6 +257,8 @@ declare_features! (\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),\n+    /// Allows using subslice patterns, `[a, .., b]` and `[a, xs @ .., b]`.\n+    (accepted, slice_patterns, \"1.42.0\", Some(62254), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "6af9b6c0872780160e71c63332982c9344a433ed", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -262,9 +262,6 @@ declare_features! (\n     /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n-    /// Allows using slice patterns.\n-    (active, slice_patterns, \"1.0.0\", Some(62254), None),\n-\n     /// Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(57563), None),\n "}, {"sha": "cf925ab91875f0fcf0e572ecbd22599d742f24aa", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -10,7 +10,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![feature(rustc_private)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]"}, {"sha": "5e42ba3279027953cefa1c0b7aa889d5804c7be7", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -7,7 +7,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n #![feature(inner_deref)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "42292d635bc75f65e83f9c7ee7d4d4cf899488f9", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -5,7 +5,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(bool_to_option)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "08f4f210152dd5825b98abe38a7902896b0e0381", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n use syntax::ast;\n use syntax::print::pprust;"}, {"sha": "d746f097928eaaccfe5ae29ab717f3e04ec3a7c5", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -7,7 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "84c6d720b8e00c5e58d36075fb671f16cf7a251a", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(nll)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "e5ec98743e0aeeaf989f23974f7376065031f461", "filename": "src/librustc_ty/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -8,7 +8,7 @@\n #![feature(bool_to_option)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "95cd3c631ed22dc22d6d5811b1be0a83b5877e85", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -64,7 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(exhaustive_patterns)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "c87964af0200cf8c7ca8c1da2e87c04c58f0b8d8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -380,7 +380,10 @@ impl<'a, 'b, 'ids, I: Iterator<Item = Event<'a>>> Iterator for HeadingLinks<'a,\n                     }\n                     _ => {}\n                 }\n-                self.buf.push_back(event);\n+                match event {\n+                    Event::Start(Tag::Link(_, _, _)) | Event::End(Tag::Link(..)) => {}\n+                    event => self.buf.push_back(event),\n+                }\n             }\n             let id = self.id_map.derive(id);\n \n@@ -395,7 +398,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = Event<'a>>> Iterator for HeadingLinks<'a,\n \n             let start_tags = format!(\n                 \"<h{level} id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n-                                      <a href=\\\"#{id}\\\">\",\n+                    <a href=\\\"#{id}\\\">\",\n                 id = id,\n                 level = level\n             );"}, {"sha": "c8fae91fcf3a5c5e236a5bb8c3af9ddba1e9bb78", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -294,7 +294,7 @@\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]"}, {"sha": "5bc8fe5ae6d791bd59edee9cbe418d11ca9a4af0", "filename": "src/libstd/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -65,7 +65,7 @@ pub use core::time::Duration;\n ///\n /// |  Platform |               System call                                            |\n /// |:---------:|:--------------------------------------------------------------------:|\n-/// | Cloud ABI | [clock_time_get (Monotonic Clock)]                                   |\n+/// | CloudABI  | [clock_time_get (Monotonic Clock)]                                   |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Monotonic Clock)]                                    |\n /// | Darwin    | [mach_absolute_time]                                                 |\n@@ -79,7 +79,7 @@ pub use core::time::Duration;\n /// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-api.md#clock_time_get\n /// [clock_gettime (Monotonic Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [mach_absolute_time]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/services/services.html\n-/// [clock_time_get (Monotonic Clock)]: https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt\n+/// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n ///\n@@ -144,15 +144,15 @@ pub struct Instant(time::Instant);\n ///\n /// |  Platform |               System call                                            |\n /// |:---------:|:--------------------------------------------------------------------:|\n-/// | Cloud ABI | [clock_time_get (Realtime Clock)]                                    |\n+/// | CloudABI  | [clock_time_get (Realtime Clock)]                                    |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Realtime Clock)]                                     |\n /// | DARWIN    | [gettimeofday]                                                       |\n /// | VXWorks   | [clock_gettime (Realtime Clock)]                                     |\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n /// | Windows   | [GetSystemTimeAsFileTime]                                            |\n ///\n-/// [clock_time_get (Realtime Clock)]: https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt\n+/// [clock_time_get (Realtime Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html"}, {"sha": "b0c2aa3dbb28ead5ef9079041b1e7228b6d2866a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -13,7 +13,7 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(try_trait)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(unicode_internals)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "d587d237227ad0b632ff5b64ea4f541ce2182eb3", "filename": "src/test/mir-opt/uniform_array_move_out.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_syntax)]\n-#![feature(slice_patterns)]\n \n fn move_out_from_end() {\n     let a = [box 1, box 2];"}, {"sha": "9761c1ddbe23f2e417ee4769105e61b12463a8c8", "filename": "src/test/rustdoc/remove-url-from-headings.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -0,0 +1,17 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// !@has - '//a[@href=\"http://a.a\"]'\n+// @has - '//a[@href=\"#implementing-stuff-somewhere\"]' 'Implementing stuff somewhere'\n+// @has - '//a[@href=\"#another-one-urg\"]' 'Another one urg'\n+\n+/// fooo\n+///\n+/// # Implementing [stuff](http://a.a \"title\") somewhere\n+///\n+/// hello\n+///\n+/// # Another [one][two] urg\n+///\n+/// [two]: http://a.a\n+pub fn foo() {}"}, {"sha": "34adb42a32f961d23f7f51719d657277c8706a76", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn main() {\n     match \"foo\".to_string() {\n         ['f', 'o', ..] => {}", "previous_filename": "src/test/ui/match/match-vec-mismatch.rs"}, {"sha": "c4548142c13ef99f3a1898a5ab5e036d8080e356", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,29 +1,29 @@\n error[E0425]: cannot find value `does_not_exist` in this scope\n-  --> $DIR/match-vec-mismatch.rs:28:11\n+  --> $DIR/slice-pat-type-mismatches.rs:26:11\n    |\n LL |     match does_not_exist {\n    |           ^^^^^^^^^^^^^^ not found in this scope\n \n error[E0529]: expected an array or slice, found `std::string::String`\n-  --> $DIR/match-vec-mismatch.rs:5:9\n+  --> $DIR/slice-pat-type-mismatches.rs:3:9\n    |\n LL |         ['f', 'o', ..] => {}\n    |         ^^^^^^^^^^^^^^ pattern cannot match with input type `std::string::String`\n \n error[E0527]: pattern requires 1 element but array has 3\n-  --> $DIR/match-vec-mismatch.rs:20:9\n+  --> $DIR/slice-pat-type-mismatches.rs:18:9\n    |\n LL |         [0] => {},\n    |         ^^^ expected 3 elements\n \n error[E0528]: pattern requires at least 4 elements but array has 3\n-  --> $DIR/match-vec-mismatch.rs:25:9\n+  --> $DIR/slice-pat-type-mismatches.rs:23:9\n    |\n LL |         [0, 1, 2, 3, x @ ..] => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ pattern cannot match array of 3 elements\n \n error[E0282]: type annotations needed\n-  --> $DIR/match-vec-mismatch.rs:36:9\n+  --> $DIR/slice-pat-type-mismatches.rs:34:9\n    |\n LL |         [] => {}\n    |         ^^ cannot infer type", "previous_filename": "src/test/ui/match/match-vec-mismatch.stderr"}, {"sha": "97e33624bf6deb4c8a3eab08b0b5e1122764eb01", "filename": "src/test/ui/array-slice-vec/subslice-only-once-semantic-restriction.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -3,8 +3,6 @@ fn main() {\n     match a {\n         [1, tail @ .., tail @ ..] => {},\n         //~^ ERROR identifier `tail` is bound more than once in the same pattern\n-        //~| ERROR subslice patterns are unstable\n-        //~| ERROR subslice patterns are unstable\n         //~| ERROR `..` can only be used once per slice pattern\n         _ => ()\n     }", "previous_filename": "src/test/ui/parser/match-vec-invalid.rs"}, {"sha": "4d6078788b2283420d065fb942bb702f5d325c43", "filename": "src/test/ui/array-slice-vec/subslice-only-once-semantic-restriction.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-only-once-semantic-restriction.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -0,0 +1,24 @@\n+error[E0416]: identifier `tail` is bound more than once in the same pattern\n+  --> $DIR/subslice-only-once-semantic-restriction.rs:4:24\n+   |\n+LL |         [1, tail @ .., tail @ ..] => {},\n+   |                        ^^^^ used in a pattern more than once\n+\n+error: `..` can only be used once per slice pattern\n+  --> $DIR/subslice-only-once-semantic-restriction.rs:4:31\n+   |\n+LL |         [1, tail @ .., tail @ ..] => {},\n+   |                    --         ^^ can only be used once per slice pattern\n+   |                    |\n+   |                    previously used here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/subslice-only-once-semantic-restriction.rs:11:30\n+   |\n+LL | const RECOVERY_WITNESS: () = 0;\n+   |                              ^ expected `()`, found integer\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0416.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "69c33921868cfd0a62c2b909a021f14f8b5ebacd", "filename": "src/test/ui/array-slice-vec/subslice-patterns-const-eval-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,7 @@\n \n // run-pass\n \n-#![feature(slice_patterns, const_fn, const_if_match)]\n+#![feature(const_fn, const_if_match)]\n #[derive(PartialEq, Debug, Clone)]\n struct N(u8);\n "}, {"sha": "0b793fa0120e99f1f1988b409a4e444ad4d3e2ff", "filename": "src/test/ui/array-slice-vec/subslice-patterns-const-eval.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(slice_patterns)]\n-\n #[derive(PartialEq, Debug, Clone)]\n struct N(u8);\n "}, {"sha": "e05790911f52d9b3e0ca2eb9fcb233ba7607edbf", "filename": "src/test/ui/array-slice-vec/subslice-patterns-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,8 +4,6 @@\n \n // run-pass\n \n-#![feature(slice_patterns)]\n-\n #![allow(unreachable_patterns)]\n \n use std::convert::identity;"}, {"sha": "fdeb7e4fda640a5c118ab5eed6d1cae4a1d4e5c8", "filename": "src/test/ui/array-slice-vec/vec-matching-fixed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fixed.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(slice_patterns)]\n-\n fn a() {\n     let x = [1, 2, 3];\n     match x {"}, {"sha": "998899271e4114a05c461eae5c6345ae9b7a4f7c", "filename": "src/test/ui/array-slice-vec/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(slice_patterns)]\n-\n use std::fmt::Debug;\n \n fn foldl<T, U, F>(values: &[T],"}, {"sha": "ed34f074a929aa53fb1617434f54846da5aa041a", "filename": "src/test/ui/array-slice-vec/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n-#![allow(unused_variables)]\n \n-#![feature(slice_patterns)]\n+#![allow(unused_variables)]\n \n pub fn main() {\n     let x = &[1, 2, 3, 4, 5];"}, {"sha": "7009244aa189a9e79b54b9494dc4ec840ef85e0b", "filename": "src/test/ui/array-slice-vec/vec-matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(slice_patterns)]\n-\n fn a() {\n     let x = [1];\n     match x {"}, {"sha": "5f1699227d8e601634a2b2ff0e91e28b3226ae9b", "filename": "src/test/ui/array-slice-vec/vec-tail-matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(slice_patterns)]\n-\n struct Foo {\n     string: &'static str\n }"}, {"sha": "0d0dbcaf40f4349de9c61afe800c7842080d79dc", "filename": "src/test/ui/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n+\n #![feature(never_type, never_type_fallback)]\n #![feature(exhaustive_patterns)]\n-#![feature(slice_patterns)]\n+\n #![allow(unreachable_patterns)]\n #![allow(unreachable_code)]\n #![allow(unused_variables)]"}, {"sha": "048e1e5e9b4b6b81297e637a6abb2423ddf49369", "filename": "src/test/ui/binding/irrefutable-slice-patterns.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n-// #47096\n \n-#![feature(slice_patterns)]\n+// Regression test for #47096.\n \n fn foo(s: &[i32]) -> &[i32] {\n     let &[ref xs @ ..] = s;"}, {"sha": "f0c988c01c2b843291ac193cf42fc1a68337f7d8", "filename": "src/test/ui/binding/match-byte-array-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-byte-array-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     let buf = &[0u8; 4];"}, {"sha": "af95eb95df04cab1cc6f854423e9963442372448", "filename": "src/test/ui/binding/match-vec-alternatives.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-vec-alternatives.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {"}, {"sha": "187c2983633e7dcb3a18e34bfa56102393ccfd0f", "filename": "src/test/ui/binding/zero_sized_subslice_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     let x = [(), ()];"}, {"sha": "0229ca37a692aa3d2a8ff5001e62b4eec0a92656", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,6 +1,5 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n-#![feature(slice_patterns)]\n #![allow(unused_variables)]\n \n // run-pass"}, {"sha": "32057d5c126ed4782b78bd0575d724c05388984f", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n-#![feature(slice_patterns)]\n-\n fn arr_by_ref(mut x: [String; 3]) {\n     let f = || {\n         let [ref y, ref z @ ..] = x;"}, {"sha": "483975e5778a893c5cd5ef750c11c9f51753f2dc", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-slice-patterns.rs:9:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:7:13\n    |\n LL |     let f = || {\n    |             -- immutable borrow occurs here\n@@ -13,7 +13,7 @@ LL |     f();\n    |     - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-slice-patterns.rs:18:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:16:13\n    |\n LL |     let mut f = || {\n    |                 -- mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |     f();\n    |     - mutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrowck-closures-slice-patterns.rs:27:5\n+  --> $DIR/borrowck-closures-slice-patterns.rs:25:5\n    |\n LL | fn arr_by_move(x: [String; 3]) {\n    |                - move occurs because `x` has type `[std::string::String; 3]`, which does not implement the `Copy` trait\n@@ -40,7 +40,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-slice-patterns.rs:35:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:33:13\n    |\n LL |     let f = || {\n    |             -- immutable borrow occurs here\n@@ -54,7 +54,7 @@ LL |     f();\n    |     - immutable borrow later used here\n \n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/borrowck-closures-slice-patterns.rs:44:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:42:13\n    |\n LL |     let mut f = || {\n    |                 -- closure construction occurs here\n@@ -68,7 +68,7 @@ LL |     f();\n    |     - first borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrowck-closures-slice-patterns.rs:53:5\n+  --> $DIR/borrowck-closures-slice-patterns.rs:51:5\n    |\n LL | fn arr_box_by_move(x: Box<[String; 3]>) {\n    |                    - move occurs because `x` has type `std::boxed::Box<[std::string::String; 3]>`, which does not implement the `Copy` trait\n@@ -81,7 +81,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-slice-patterns.rs:61:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:59:13\n    |\n LL |     let f = || {\n    |             -- immutable borrow occurs here\n@@ -95,7 +95,7 @@ LL |     f();\n    |     - immutable borrow later used here\n \n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/borrowck-closures-slice-patterns.rs:70:13\n+  --> $DIR/borrowck-closures-slice-patterns.rs:68:13\n    |\n LL |     let mut f = || {\n    |                 -- closure construction occurs here"}, {"sha": "c8bfbe0729c59032e489b84c9f51445cded345f7", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-linelength\n \n-#![feature(slice_patterns)]\n-\n pub struct Foo {\n   x: u32\n }"}, {"sha": "075e0e2e4515e69a99a5f472ec9473cc0c33d6fe", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:258:13\n+  --> $DIR/borrowck-describe-lvalue.rs:256:13\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:268:20\n+  --> $DIR/borrowck-describe-lvalue.rs:266:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:266:16\n+  --> $DIR/borrowck-describe-lvalue.rs:264:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n@@ -35,7 +35,7 @@ LL | |                 }\n    = note: ...therefore, they cannot allow references to captured variables to escape\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:41:9\n+  --> $DIR/borrowck-describe-lvalue.rs:39:9\n    |\n LL |         let x = f.x();\n    |                 - borrow of `f` occurs here\n@@ -45,7 +45,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:48:9\n+  --> $DIR/borrowck-describe-lvalue.rs:46:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `g` occurs here\n@@ -55,7 +55,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:55:9\n+  --> $DIR/borrowck-describe-lvalue.rs:53:9\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n@@ -65,7 +65,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:63:20\n+  --> $DIR/borrowck-describe-lvalue.rs:61:20\n    |\n LL |         let x = e.x();\n    |                 - borrow of `e` occurs here\n@@ -77,7 +77,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:71:9\n+  --> $DIR/borrowck-describe-lvalue.rs:69:9\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n@@ -87,7 +87,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n+  --> $DIR/borrowck-describe-lvalue.rs:76:9\n    |\n LL |         let x = f.x();\n    |                 - borrow of `*f` occurs here\n@@ -97,7 +97,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:85:9\n+  --> $DIR/borrowck-describe-lvalue.rs:83:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `*g` occurs here\n@@ -107,7 +107,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:92:9\n+  --> $DIR/borrowck-describe-lvalue.rs:90:9\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n@@ -117,7 +117,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:100:20\n+  --> $DIR/borrowck-describe-lvalue.rs:98:20\n    |\n LL |         let x = e.x();\n    |                 - borrow of `*e` occurs here\n@@ -129,7 +129,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:109:9\n+  --> $DIR/borrowck-describe-lvalue.rs:107:9\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n@@ -139,7 +139,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:117:15\n+  --> $DIR/borrowck-describe-lvalue.rs:115:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -151,7 +151,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:122:18\n+  --> $DIR/borrowck-describe-lvalue.rs:120:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -163,7 +163,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:127:25\n+  --> $DIR/borrowck-describe-lvalue.rs:125:25\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -175,7 +175,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:132:28\n+  --> $DIR/borrowck-describe-lvalue.rs:130:28\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -187,7 +187,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:143:15\n+  --> $DIR/borrowck-describe-lvalue.rs:141:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -199,7 +199,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:18\n+  --> $DIR/borrowck-describe-lvalue.rs:146:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -211,7 +211,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:153:15\n+  --> $DIR/borrowck-describe-lvalue.rs:151:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -223,7 +223,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:158:18\n+  --> $DIR/borrowck-describe-lvalue.rs:156:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -235,7 +235,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:171:13\n+  --> $DIR/borrowck-describe-lvalue.rs:169:13\n    |\n LL |         let x = &mut e;\n    |                 ------ borrow of `e` occurs here\n@@ -247,7 +247,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:171:18\n+  --> $DIR/borrowck-describe-lvalue.rs:169:18\n    |\n LL |         let x = &mut e;\n    |                 ------ mutable borrow occurs here\n@@ -259,7 +259,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:175:23\n+  --> $DIR/borrowck-describe-lvalue.rs:173:23\n    |\n LL |         let x = &mut e;\n    |                 ------ mutable borrow occurs here\n@@ -271,7 +271,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:188:22\n+  --> $DIR/borrowck-describe-lvalue.rs:186:22\n    |\n LL |         let x = &mut s;\n    |                 ------ mutable borrow occurs here\n@@ -283,7 +283,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:194:28\n+  --> $DIR/borrowck-describe-lvalue.rs:192:28\n    |\n LL |         let x = &mut s;\n    |                 ------ mutable borrow occurs here\n@@ -295,7 +295,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:236:9\n+  --> $DIR/borrowck-describe-lvalue.rs:234:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -306,7 +306,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:236:9\n+  --> $DIR/borrowck-describe-lvalue.rs:234:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -317,7 +317,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:247:24\n+  --> $DIR/borrowck-describe-lvalue.rs:245:24\n    |\n LL |         let x = &mut v;\n    |                 ------ mutable borrow occurs here\n@@ -329,7 +329,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:210:29\n+  --> $DIR/borrowck-describe-lvalue.rs:208:29\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -340,7 +340,7 @@ LL |             drop(x);\n    |                  - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:225:33\n+  --> $DIR/borrowck-describe-lvalue.rs:223:33\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -351,7 +351,7 @@ LL |             drop(x);\n    |                  - mutable borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:278:22\n+  --> $DIR/borrowck-describe-lvalue.rs:276:22\n    |\n LL |                 drop(x);\n    |                      - value moved here"}, {"sha": "c1513fcba8a66819626769f73a6d17796d043bef", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "84930b000ccb3a5a122c1fa25b438d2a39b727d4", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:15:14\n+  --> $DIR/borrowck-move-out-from-array-match.rs:13:14\n    |\n LL |         [_, _, _x] => {}\n    |                -- value moved here\n@@ -10,7 +10,7 @@ LL |         [.., _y] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:25:14\n+  --> $DIR/borrowck-move-out-from-array-match.rs:23:14\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -21,7 +21,7 @@ LL |         [.., _y] => {}\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:35:15\n+  --> $DIR/borrowck-move-out-from-array-match.rs:33:15\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -32,7 +32,7 @@ LL |         [.., (_y, _)] => {}\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:46:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:44:11\n    |\n LL |         [_x, _, _] => {}\n    |          -- value moved here\n@@ -43,7 +43,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:57:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:55:11\n    |\n LL |         [.., _x] => {}\n    |              -- value moved here\n@@ -54,7 +54,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:68:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:66:11\n    |\n LL |         [(_x, _), _, _] => {}\n    |           -- value moved here\n@@ -65,7 +65,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:79:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:77:11\n    |\n LL |         [.., (_x, _)] => {}\n    |               -- value moved here\n@@ -76,7 +76,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:91:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n    |\n LL |         [_y @ .., _, _] => {}\n    |          ------- value moved here\n@@ -87,7 +87,7 @@ LL |         [(_x, _), _, _] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:101:15\n+  --> $DIR/borrowck-move-out-from-array-match.rs:99:15\n    |\n LL |         [_, _, _y @ ..] => {}\n    |                ------- value moved here\n@@ -98,7 +98,7 @@ LL |         [.., (_x, _)] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-match.rs:112:11\n+  --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n    |          ------ value moved here"}, {"sha": "056b8e672bd93a5cab6658e05ce651added16f80", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -3,8 +3,6 @@\n // Once the bug is fixed, the test, which is derived from a\n // passing test for `let` statements, should become check-pass.\n \n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "ff5eab2442c83312dd43695f0b9e89cf68191efe", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:19:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:17:11\n    |\n LL |         [_, _, _x] => {}\n    |                -- value moved here\n@@ -10,7 +10,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:30:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:28:11\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -21,7 +21,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:43:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:41:11\n    |\n LL |         [_x, _, _] => {}\n    |          -- value moved here\n@@ -32,7 +32,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:54:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:52:11\n    |\n LL |         [.., _x] => {}\n    |              -- value moved here\n@@ -43,7 +43,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:65:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:63:11\n    |\n LL |         [(_x, _), _, _] => {}\n    |           -- value moved here\n@@ -54,7 +54,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:76:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:74:11\n    |\n LL |         [.., (_x, _)] => {}\n    |               -- value moved here\n@@ -65,7 +65,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:87:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n    |             ------- value moved here\n@@ -76,7 +76,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:98:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n    |          ------- value moved here\n@@ -87,7 +87,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:111:11\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n    |          ------ value moved here"}, {"sha": "c91b4286b6478038a46840d2b924f22c3dc6d66d", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "604a25cdcc1d689ecebacc42584aacd06ca4a69d", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "0ef63105cfbd3212953a94c654a134be6c6c1906", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:15:14\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:13:14\n    |\n LL |         [_, _, _x] => {}\n    |                -- value moved here\n@@ -10,7 +10,7 @@ LL |         [.., ref _y] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:25:14\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:23:14\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -21,7 +21,7 @@ LL |         [.., ref _y] => {}\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:35:15\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:33:15\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -32,7 +32,7 @@ LL |         [.., (ref _y, _)] => {}\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:46:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:44:11\n    |\n LL |         [_x, _, _] => {}\n    |          -- value moved here\n@@ -43,7 +43,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:57:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:55:11\n    |\n LL |         [.., _x] => {}\n    |              -- value moved here\n@@ -54,7 +54,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:68:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:66:11\n    |\n LL |         [(_x, _), _, _] => {}\n    |           -- value moved here\n@@ -65,7 +65,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:79:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:77:11\n    |\n LL |         [.., (_x, _)] => {}\n    |               -- value moved here\n@@ -76,7 +76,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:91:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n    |\n LL |         [_y @ .., _, _] => {}\n    |          ------- value moved here\n@@ -87,7 +87,7 @@ LL |         [(ref _x, _), _, _] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:101:15\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:99:15\n    |\n LL |         [_, _, _y @ ..] => {}\n    |                ------- value moved here\n@@ -98,7 +98,7 @@ LL |         [.., (ref _x, _)] => {}\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:112:11\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n    |          ------ value moved here\n@@ -109,7 +109,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:125:5\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:123:5\n    |\n LL |         [_, _, _x] => {}\n    |                -- value moved here\n@@ -120,7 +120,7 @@ LL |     a[2] = Default::default();\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:133:5\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:131:5\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -131,7 +131,7 @@ LL |     a[2].1 = Default::default();\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:141:5\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n    |\n LL |         [_, _, _x @ ..] => {}\n    |                ------- value moved here\n@@ -142,7 +142,7 @@ LL |     a[0] = Default::default();\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-match.rs:149:5\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n    |\n LL |         [_, _, _x @ ..] => {}\n    |                ------- value moved here"}, {"sha": "5afd6835dcfb60b0c98bd8b4bccf4887eb631174", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -3,8 +3,6 @@\n // Once the bug is fixed, the test, which is derived from a\n // passing test for `let` statements, should become check-pass.\n \n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "a4042ce7db336192c64086777a9a6105cc62be34", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:19:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:17:11\n    |\n LL |         [_, _, _x] => {}\n    |                -- value moved here\n@@ -10,7 +10,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:30:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:28:11\n    |\n LL |         [_, _, (_x, _)] => {}\n    |                 -- value moved here\n@@ -21,7 +21,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:43:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:41:11\n    |\n LL |         [_x, _, _] => {}\n    |          -- value moved here\n@@ -32,7 +32,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:54:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:52:11\n    |\n LL |         [.., _x] => {}\n    |              -- value moved here\n@@ -43,7 +43,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:65:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:63:11\n    |\n LL |         [(_x, _), _, _] => {}\n    |           -- value moved here\n@@ -54,7 +54,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:76:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:74:11\n    |\n LL |         [.., (_x, _)] => {}\n    |               -- value moved here\n@@ -65,7 +65,7 @@ LL |     match a {\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:87:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n    |             ------- value moved here\n@@ -76,7 +76,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:98:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n    |          ------- value moved here\n@@ -87,7 +87,7 @@ LL |     match a {\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:111:11\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n    |          ------ value moved here"}, {"sha": "e3498cef37719005a50df2f946b65fbed90c273f", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "ad08367a3b5b31ecf3866abd0fd1098aecefd695", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "7ad4116645e9351d87f1eef6d814f3cd85c9ca15", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:12:14\n+  --> $DIR/borrowck-move-out-from-array-use.rs:10:14\n    |\n LL |     let [_, _, _x] = a;\n    |                -- value moved here\n@@ -9,7 +9,7 @@ LL |     let [.., ref _y] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:18:14\n+  --> $DIR/borrowck-move-out-from-array-use.rs:16:14\n    |\n LL |     let [_, _, (_x, _)] = a;\n    |                 -- value moved here\n@@ -19,7 +19,7 @@ LL |     let [.., ref _y] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:24:15\n+  --> $DIR/borrowck-move-out-from-array-use.rs:22:15\n    |\n LL |     let [_, _, (_x, _)] = a;\n    |                 -- value moved here\n@@ -29,7 +29,7 @@ LL |     let [.., (ref _y, _)] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:32:10\n+  --> $DIR/borrowck-move-out-from-array-use.rs:30:10\n    |\n LL |     let [_x, _, _] = a;\n    |          -- value moved here\n@@ -39,7 +39,7 @@ LL |     let [ref _y @ .., _, _] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:38:16\n+  --> $DIR/borrowck-move-out-from-array-use.rs:36:16\n    |\n LL |     let [.., _x] = a;\n    |              -- value moved here\n@@ -49,7 +49,7 @@ LL |     let [_, _, ref _y @ ..] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:44:10\n+  --> $DIR/borrowck-move-out-from-array-use.rs:42:10\n    |\n LL |     let [(_x, _), _, _] = a;\n    |           -- value moved here\n@@ -59,7 +59,7 @@ LL |     let [ref _y @ .., _, _] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:50:16\n+  --> $DIR/borrowck-move-out-from-array-use.rs:48:16\n    |\n LL |     let [.., (_x, _)] = a;\n    |               -- value moved here\n@@ -69,7 +69,7 @@ LL |     let [_, _, ref _y @ ..] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:56:11\n+  --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n    |\n LL |     let [_y @ .., _, _] = a;\n    |          ------- value moved here\n@@ -79,7 +79,7 @@ LL |     let [(ref _x, _), _, _] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:62:15\n+  --> $DIR/borrowck-move-out-from-array-use.rs:60:15\n    |\n LL |     let [_, _, _y @ ..] = a;\n    |                ------- value moved here\n@@ -89,7 +89,7 @@ LL |     let [.., (ref _x, _)] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:70:13\n+  --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n    |          ------ value moved here\n@@ -99,7 +99,7 @@ LL |     let [_, ref _y @ ..] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:78:5\n+  --> $DIR/borrowck-move-out-from-array-use.rs:76:5\n    |\n LL |     let [_, _, _x] = a;\n    |                -- value moved here\n@@ -109,7 +109,7 @@ LL |     a[2] = Default::default();\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:84:5\n+  --> $DIR/borrowck-move-out-from-array-use.rs:82:5\n    |\n LL |     let [_, _, (_x, _)] = a;\n    |                 -- value moved here\n@@ -119,7 +119,7 @@ LL |     a[2].1 = Default::default();\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:90:5\n+  --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n    |                ------- value moved here\n@@ -129,7 +129,7 @@ LL |     a[0] = Default::default();\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array-use.rs:96:5\n+  --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n    |                ------- value moved here"}, {"sha": "83755812f4b32315da27118643ef8cd79471ed58", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn array() -> [(String, String); 3] {\n     Default::default()\n }"}, {"sha": "b7babd93ed7a638244a594ff060fc62fad8a86cb", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:12:14\n+  --> $DIR/borrowck-move-out-from-array.rs:10:14\n    |\n LL |     let [_, _, _x] = a;\n    |                -- value moved here\n@@ -9,7 +9,7 @@ LL |     let [.., _y] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:18:14\n+  --> $DIR/borrowck-move-out-from-array.rs:16:14\n    |\n LL |     let [_, _, (_x, _)] = a;\n    |                 -- value moved here\n@@ -19,7 +19,7 @@ LL |     let [.., _y] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array.rs:24:15\n+  --> $DIR/borrowck-move-out-from-array.rs:22:15\n    |\n LL |     let [_, _, (_x, _)] = a;\n    |                 -- value moved here\n@@ -29,7 +29,7 @@ LL |     let [.., (_y, _)] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array.rs:32:10\n+  --> $DIR/borrowck-move-out-from-array.rs:30:10\n    |\n LL |     let [_x, _, _] = a;\n    |          -- value moved here\n@@ -39,7 +39,7 @@ LL |     let [_y @ .., _, _] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array.rs:38:16\n+  --> $DIR/borrowck-move-out-from-array.rs:36:16\n    |\n LL |     let [.., _x] = a;\n    |              -- value moved here\n@@ -49,7 +49,7 @@ LL |     let [_, _, _y @ ..] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array.rs:44:10\n+  --> $DIR/borrowck-move-out-from-array.rs:42:10\n    |\n LL |     let [(_x, _), _, _] = a;\n    |           -- value moved here\n@@ -59,7 +59,7 @@ LL |     let [_y @ .., _, _] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array.rs:50:16\n+  --> $DIR/borrowck-move-out-from-array.rs:48:16\n    |\n LL |     let [.., (_x, _)] = a;\n    |               -- value moved here\n@@ -69,7 +69,7 @@ LL |     let [_, _, _y @ ..] = a;\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array.rs:56:11\n+  --> $DIR/borrowck-move-out-from-array.rs:54:11\n    |\n LL |     let [_y @ .., _, _] = a;\n    |          ------- value moved here\n@@ -79,7 +79,7 @@ LL |     let [(_x, _), _, _] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n-  --> $DIR/borrowck-move-out-from-array.rs:62:15\n+  --> $DIR/borrowck-move-out-from-array.rs:60:15\n    |\n LL |     let [_, _, _y @ ..] = a;\n    |                ------- value moved here\n@@ -89,7 +89,7 @@ LL |     let [.., (_x, _)] = a;\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-move-out-from-array.rs:70:13\n+  --> $DIR/borrowck-move-out-from-array.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n    |          ------ value moved here"}, {"sha": "8ece81a3c845e9209a20699ff9664cfc854cbcde", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n-#![feature(slice_patterns)]\n-\n #[derive(Clone, Debug)]\n struct Foo {\n     string: String"}, {"sha": "a345c1238f02c3bdb2322c33b72d7fc83dea2fd3", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n-  --> $DIR/borrowck-move-out-of-vec-tail.rs:19:19\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:17:19\n    |\n LL |             match tail {\n    |                   ^^^^ cannot move out of here"}, {"sha": "a8e56f648e2e538c4bbe34d4b94563ccbdac5fce", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array-no-overlap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(slice_patterns)]\n-\n fn nop(_s: &[& i32]) {}\n fn nop_subslice(_s: &[i32]) {}\n "}, {"sha": "6b210d73228f864ddb77ecf02e8ee31397f50d49", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn nop(_s: &[& i32]) {}\n fn nop_subslice(_s: &[i32]) {}\n "}, {"sha": "0432aaf51d29f50a6c22be7fa34e08ad0f1560ae", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:8:13\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:6:13\n    |\n LL |     let [ref first, ref second, ..] = *s;\n    |                     ---------- immutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |     nop(&[first, second, second2, third]);\n    |                  ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:14:14\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:12:14\n    |\n LL |     let [.., ref fourth, ref third, _, ref first] = *s;\n    |                          --------- immutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |     nop(&[first, third, third2, fourth]);\n    |                  ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:21:16\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:19:16\n    |\n LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n    |                 ------------- immutable borrow occurs here\n@@ -30,7 +30,7 @@ LL |     nop(&[from_begin2, from_end1, from_end3, from_end4]);\n    |                                              --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:23:19\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:21:19\n    |\n LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n    |                                ------------- immutable borrow occurs here\n@@ -41,7 +41,7 @@ LL |     nop(&[from_begin3, from_end1, from_end3, from_end4]);\n    |                                   --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:28:14\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:26:14\n    |\n LL |     let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n    |                                               --------------- immutable borrow occurs here\n@@ -52,7 +52,7 @@ LL |     nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n    |                                     ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:34:13\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:32:13\n    |\n LL |     let [ref first, ref second, ..] = *s;\n    |                     ---------- immutable borrow occurs here\n@@ -62,7 +62,7 @@ LL |     nop(&[first, second]);\n    |                  ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:41:10\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:39:10\n    |\n LL |     let [.., ref second, ref first] = *s;\n    |              ---------- immutable borrow occurs here\n@@ -72,7 +72,7 @@ LL |     nop(&[first, second]);\n    |                  ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:48:10\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:46:10\n    |\n LL |     let [_,  ref s1 @ ..] = *s;\n    |              ----------- immutable borrow occurs here"}, {"sha": "4367596c6ea88066acf6dbc32f341b57b83c14a0", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-//compile-flags: -Z borrowck=mir\n-\n-#![feature(slice_patterns)]\n \n fn mut_head_tail<'a, A>(v: &'a mut [A]) -> Option<(&'a mut A, &'a mut [A])> {\n     match *v {"}, {"sha": "6390dc3a91a0d922f81b9fd4a3025ed103da0fbd", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice-no-overlap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(slice_patterns)]\n-\n fn nop(_s: &[& i32]) {}\n fn nop_subslice(_s: &[i32]) {}\n "}, {"sha": "0e1c90a1cd83d5e9727baa27b091571777c49985", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn nop(_s: &[& i32]) {}\n fn nop_subslice(_s: &[i32]) {}\n "}, {"sha": "d3388e071aa5349820cf42dc7e010d031f96f152", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:8:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:6:20\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |             nop(&[first, second, second2, third]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:16:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:14:21\n    |\n LL |     if let [.., ref fourth, ref third, _, ref first] = *s {\n    |                             --------- immutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |             nop(&[first, third, third2, fourth]);\n    |                          ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:24:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:22:20\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                    ------------- immutable borrow occurs here\n@@ -29,7 +29,7 @@ LL |             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n    |                                                      --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:27:23\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:25:23\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n@@ -40,7 +40,7 @@ LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:30:26\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:28:26\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n@@ -51,7 +51,7 @@ LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:35:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:33:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n@@ -61,7 +61,7 @@ LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n    |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:38:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:36:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n@@ -72,7 +72,7 @@ LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n    |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:41:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:39:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                              --------------- immutable borrow occurs here\n@@ -83,7 +83,7 @@ LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n    |                                ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:49:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:47:20\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n@@ -93,7 +93,7 @@ LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:58:17\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:56:17\n    |\n LL |     if let [.., ref second, ref first] = *s {\n    |                 ---------- immutable borrow occurs here\n@@ -103,7 +103,7 @@ LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:67:17\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:65:17\n    |\n LL |     if let [_, _, _, ref s1 @ ..] = *s {\n    |                      ----------- immutable borrow occurs here"}, {"sha": "cd853b83363ab622c36c32d092bae2def7122e3b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn a<'a>() -> &'a [isize] {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;"}, {"sha": "170982b1693fb1ee69e208fda4e7068418582576", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local variable `vec`\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:10:5\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:8:5\n    |\n LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n@@ -8,7 +8,7 @@ LL |     tail\n    |     ^^^^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `vec`\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:20:5\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:18:5\n    |\n LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n@@ -17,7 +17,7 @@ LL |     init\n    |     ^^^^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `vec`\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:30:5\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:28:5\n    |\n LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here"}, {"sha": "05859c95d174d9dedc1c5b7dc1d84c80a7fe84f6", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn a() {\n     let mut v = vec![1, 2, 3];\n     let vb: &mut [isize] = &mut v;"}, {"sha": "5141fcc1bb261f4a454a406506c2f117c571adaf", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/borrowck-vec-pattern-loan-from-mut.rs:8:13\n+  --> $DIR/borrowck-vec-pattern-loan-from-mut.rs:6:13\n    |\n LL |     let vb: &mut [isize] = &mut v;\n    |                            ------ first mutable borrow occurs here"}, {"sha": "9b8ba2ea8adc5df61562a5d2c785169d3e1ca82b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,3 @@\n-// http://rust-lang.org/COPYRIGHT.\n-\n-#![feature(slice_patterns)]\n-\n fn main() {\n     let mut a = [1, 2, 3, 4];\n     let t = match a {"}, {"sha": "ff70ba9fcca8b5145983d135fe1cb7d6630dc868", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `a[_]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-move-tail.rs:12:5\n+  --> $DIR/borrowck-vec-pattern-move-tail.rs:8:5\n    |\n LL |         [1, 2, ref tail @ ..] => tail,\n    |                ------------- borrow of `a[_]` occurs here"}, {"sha": "67b6c12ba803a230a09266750e53ec004f8b2698", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(slice_patterns)]\n \n fn a() {\n     let mut vec = [box 1, box 2, box 3];"}, {"sha": "e2c0852dd83c696113d89c46b5fcac54a6bc92be", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `vec[_]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:10:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:9:13\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[_]` occurs here\n@@ -11,7 +11,7 @@ LL |             _a.use_ref();\n    |             -- borrow later used here\n \n error[E0506]: cannot assign to `vec[_]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:24:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b @ ..] => {\n    |               ----------- borrow of `vec[_]` occurs here\n@@ -23,7 +23,7 @@ LL |             _b.use_ref();\n    |             -- borrow later used here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:35:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:34:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -45,7 +45,7 @@ LL |         ] => {\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:47:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:46:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n@@ -55,7 +55,7 @@ LL |     let a = vec[0];\n    |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:56:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:55:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -74,7 +74,7 @@ LL |          _b] => {}\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:66:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:65:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n@@ -84,7 +84,7 @@ LL |     let a = vec[0];\n    |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:75:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:74:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -100,7 +100,7 @@ LL |         &mut [_a, _b, _c] => {}\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:86:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:85:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^"}, {"sha": "39872825cd2a461d832bc074782f9b12c41d921f", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn a<'a>() -> &'a isize {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;"}, {"sha": "7e21c55f21b5fa7e901eba7b7136f3892ab2fb5d", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local variable `vec`\n-  --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:10:5\n+  --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:8:5\n    |\n LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here"}, {"sha": "60b06a497d6de58c24f73e4284402ad844cb5cf1", "filename": "src/test/ui/consts/const_prop_slice_pat_ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fconsts%2Fconst_prop_slice_pat_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fconsts%2Fconst_prop_slice_pat_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_prop_slice_pat_ice.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     match &[0, 1] as &[i32] {"}, {"sha": "30a896059449373fe6dd5c37f0b44e3b2b6b5dd9", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -7,7 +7,6 @@\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(slice_patterns)]\n #![allow(unused)]\n \n use std::{"}, {"sha": "b4406204a5db9f214d60c1ea01c1a995e380d4dc", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,11 +1,10 @@\n // run-pass\n-#![allow(unused_assignments)]\n-#![allow(unused_variables)]\n-\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n-#![feature(slice_patterns)]\n+\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n \n use std::cell::{Cell, RefCell};\n use std::mem::ManuallyDrop;"}, {"sha": "0a337c9611c8b9b17b29b5fa6287670365acb078", "filename": "src/test/ui/error-codes/E0528.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn main() {\n     let r = &[1, 2];\n     match r {"}, {"sha": "21615f954c3637dff7d0d926c07eb98d944b2a1c", "filename": "src/test/ui/error-codes/E0528.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ferror-codes%2FE0528.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ferror-codes%2FE0528.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0528.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0528]: pattern requires at least 3 elements but array has 2\n-  --> $DIR/E0528.rs:6:10\n+  --> $DIR/E0528.rs:4:10\n    |\n LL |         &[a, b, c, rest @ ..] => {\n    |          ^^^^^^^^^^^^^^^^^^^^ pattern cannot match array of 2 elements"}, {"sha": "f2a1b135b69cbaab06ce2aeb5e549f4b720b9fca", "filename": "src/test/ui/feature-gates/feature-gate-slice-patterns.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs?ref=779f85bac6b304dd4cad5981acf053a2c0601582", "patch": "@@ -1,17 +0,0 @@\n-// Test that slice pattern syntax with `..` is gated by `slice_patterns` feature gate\n-\n-fn main() {\n-    let x = [1, 2, 3, 4, 5];\n-    match x {\n-        [1, 2, ..] => {} //~ ERROR subslice patterns are unstable\n-        [1, .., 5] => {} //~ ERROR subslice patterns are unstable\n-        [.., 4, 5] => {} //~ ERROR subslice patterns are unstable\n-    }\n-\n-    let x = [ 1, 2, 3, 4, 5 ];\n-    match x {\n-        [ xs @ .., 4, 5 ] => {} //~ ERROR subslice patterns are unstable\n-        [ 1, xs @ .., 5 ] => {} //~ ERROR subslice patterns are unstable\n-        [ 1, 2, xs @ .. ] => {} //~ ERROR subslice patterns are unstable\n-    }\n-}"}, {"sha": "d4946a42b8f3dcc307b9daf569468384de8028c5", "filename": "src/test/ui/feature-gates/feature-gate-slice-patterns.stderr", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr?ref=779f85bac6b304dd4cad5981acf053a2c0601582", "patch": "@@ -1,57 +0,0 @@\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:6:16\n-   |\n-LL |         [1, 2, ..] => {}\n-   |                ^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:7:13\n-   |\n-LL |         [1, .., 5] => {}\n-   |             ^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:8:10\n-   |\n-LL |         [.., 4, 5] => {}\n-   |          ^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:13:11\n-   |\n-LL |         [ xs @ .., 4, 5 ] => {}\n-   |           ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:14:14\n-   |\n-LL |         [ 1, xs @ .., 5 ] => {}\n-   |              ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/feature-gate-slice-patterns.rs:15:17\n-   |\n-LL |         [ 1, 2, xs @ .. ] => {}\n-   |                 ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5980e1a857f26f3d858c7cd7e3bdf8ce0f7f968e", "filename": "src/test/ui/ignore-all-the-things.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fignore-all-the-things.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -3,9 +3,6 @@\n #![allow(non_shorthand_field_patterns)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-// pretty-expanded FIXME #23616\n-\n-#![feature(slice_patterns)]\n \n struct Foo(isize, isize, isize, isize);\n struct Bar{a: isize, b: isize, c: isize, d: isize}"}, {"sha": "0481c1fd9e1bbdb4e5d67e96396ce3087b6c9e6e", "filename": "src/test/ui/issues/issue-12369.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "754b94bab75ebb2acc5753c20bb0417cba3cc7ec", "filename": "src/test/ui/issues/issue-12369.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12369.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12369.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12369.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,11 +1,11 @@\n error: unreachable pattern\n-  --> $DIR/issue-12369.rs:10:9\n+  --> $DIR/issue-12369.rs:9:9\n    |\n LL |         &[10,a, ref rest @ ..] => 10\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-12369.rs:2:9\n+  --> $DIR/issue-12369.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1b2a37de475398dec728af32f67174998c0e9a4c", "filename": "src/test/ui/issues/issue-12567.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n     match (l1, l2) {\n     //~^ ERROR: cannot move out of type `[T]`, a non-copy slice"}, {"sha": "2a88d8f0524ace1bc740cd2dd6aad769efb46f1b", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n-  --> $DIR/issue-12567.rs:4:11\n+  --> $DIR/issue-12567.rs:2:11\n    |\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ cannot move out of here\n@@ -13,7 +13,7 @@ LL |         (&[hd1, ..], &[hd2, ..])\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n-  --> $DIR/issue-12567.rs:4:11\n+  --> $DIR/issue-12567.rs:2:11\n    |\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ cannot move out of here"}, {"sha": "4dd6981d448e54e7856783a7689da2787f41a607", "filename": "src/test/ui/issues/issue-15080.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     let mut x: &[_] = &[1, 2, 3, 4];"}, {"sha": "47b207ea9cbf5e290738fc389d41572f3f08ad08", "filename": "src/test/ui/issues/issue-15104.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     assert_eq!(count_members(&[1, 2, 3, 4]), 4);"}, {"sha": "126e01de5ee3f7b3fdcb6f432bf0923833b8e870", "filename": "src/test/ui/issues/issue-17877.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     assert_eq!(match [0u8; 1024] {"}, {"sha": "62c96840b3bc4ad6dcfd0e50482d69abee2f5e67", "filename": "src/test/ui/issues/issue-23311.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-23311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-23311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23311.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n-// Test that we do not ICE when pattern matching an array against a slice.\n \n-#![feature(slice_patterns)]\n+// Test that we do not ICE when pattern matching an array against a slice.\n \n fn main() {\n     match \"foo\".as_bytes() {"}, {"sha": "b9d34b0555aee515694e36e9fb8b5021de4498f3", "filename": "src/test/ui/issues/issue-26619.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n pub struct History<'a> { pub _s: &'a str }\n \n impl<'a> History<'a> {"}, {"sha": "1282fd7d3c238f734644ad909cb2c9dcfc20f40b", "filename": "src/test/ui/issues/issue-26619.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing function parameter\n-  --> $DIR/issue-26619.rs:7:76\n+  --> $DIR/issue-26619.rs:5:76\n    |\n LL |         for s in vec![\"1|2\".to_string()].into_iter().filter_map(|ref line| self.make_entry(line)) {\n    |                                                                  --------  ^^^^^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function"}, {"sha": "458e999c3faa2b5425c7a8c425a8bbcc28f3b0b5", "filename": "src/test/ui/issues/issue-37598.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(slice_patterns)]\n \n fn check(list: &[u8]) {\n     match list {"}, {"sha": "b7323f09daff2ebc84ee46158381fbfdd3e8ff68", "filename": "src/test/ui/issues/issue-7784.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n use std::ops::Add;\n "}, {"sha": "343f00ff291816ae46ca253a1a4237a7439458fe", "filename": "src/test/ui/moves/move-out-of-array-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,5 @@\n // Ensure that we cannot move out of a reference to a fixed-size array\n \n-#![feature(slice_patterns)]\n-\n struct D { _x: u8 }\n \n impl Drop for D { fn drop(&mut self) { } }"}, {"sha": "fd682e56ae1de444885fa48015d38a7331ed6dfb", "filename": "src/test/ui/moves/move-out-of-array-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n-  --> $DIR/move-out-of-array-ref.rs:10:24\n+  --> $DIR/move-out-of-array-ref.rs:8:24\n    |\n LL |     let [_, e, _, _] = *a;\n    |             -          ^^\n@@ -10,7 +10,7 @@ LL |     let [_, e, _, _] = *a;\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n-  --> $DIR/move-out-of-array-ref.rs:15:27\n+  --> $DIR/move-out-of-array-ref.rs:13:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n    |             ------        ^^\n@@ -21,7 +21,7 @@ LL |     let [_, s @ .. , _] = *a;\n    |             move occurs because `s` has type `[D; 2]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n-  --> $DIR/move-out-of-array-ref.rs:20:24\n+  --> $DIR/move-out-of-array-ref.rs:18:24\n    |\n LL |     let [_, e, _, _] = *a;\n    |             -          ^^\n@@ -32,7 +32,7 @@ LL |     let [_, e, _, _] = *a;\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n-  --> $DIR/move-out-of-array-ref.rs:25:27\n+  --> $DIR/move-out-of-array-ref.rs:23:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n    |             ------        ^^"}, {"sha": "8b0be2e7a66b4b78513d025b5beaa62040e88471", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n #![feature(or_patterns)]\n-#![feature(slice_patterns)]\n+\n #![allow(incomplete_features)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "f0dc3447f31548b58856bd1eef5f295905d6a72d", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n #![feature(or_patterns)]\n-#![feature(slice_patterns)]\n+\n #![allow(incomplete_features)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "81bc1176f572e34d847bd9bd64b059e48331db64", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n #![feature(or_patterns)]\n-#![feature(slice_patterns)]\n+\n #![allow(incomplete_features)]\n #![deny(unreachable_patterns)]\n "}, {"sha": "58343e86d7b2d60c0bd5f73bf61133534b17d41d", "filename": "src/test/ui/parser/match-vec-invalid.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr?ref=779f85bac6b304dd4cad5981acf053a2c0601582", "patch": "@@ -1,42 +0,0 @@\n-error[E0416]: identifier `tail` is bound more than once in the same pattern\n-  --> $DIR/match-vec-invalid.rs:4:24\n-   |\n-LL |         [1, tail @ .., tail @ ..] => {},\n-   |                        ^^^^ used in a pattern more than once\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/match-vec-invalid.rs:4:13\n-   |\n-LL |         [1, tail @ .., tail @ ..] => {},\n-   |             ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/match-vec-invalid.rs:4:24\n-   |\n-LL |         [1, tail @ .., tail @ ..] => {},\n-   |                        ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n-error: `..` can only be used once per slice pattern\n-  --> $DIR/match-vec-invalid.rs:4:31\n-   |\n-LL |         [1, tail @ .., tail @ ..] => {},\n-   |                    --         ^^ can only be used once per slice pattern\n-   |                    |\n-   |                    previously used here\n-\n-error[E0308]: mismatched types\n-  --> $DIR/match-vec-invalid.rs:13:30\n-   |\n-LL | const RECOVERY_WITNESS: () = 0;\n-   |                              ^ expected `()`, found integer\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0308, E0416, E0658.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "7becffa9fe2f7afd50fa2895b74b5bb367c2ac68", "filename": "src/test/ui/parser/pat-lt-bracket-6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,7 +4,6 @@ fn main() {\n \n     let Test(&desc[..]) = x;\n     //~^ ERROR: expected one of `)`, `,`, `@`, or `|`, found `[`\n-    //~^^ ERROR subslice patterns are unstable\n }\n \n const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "035d0dbfe06d67f459b27bbc5d969a718a93e14d", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -7,22 +7,12 @@ LL |     let Test(&desc[..]) = x;\n    |                   expected one of `)`, `,`, `@`, or `|`\n    |                   help: missing `,`\n \n-error[E0658]: subslice patterns are unstable\n-  --> $DIR/pat-lt-bracket-6.rs:5:20\n-   |\n-LL |     let Test(&desc[..]) = x;\n-   |                    ^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n-   = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/pat-lt-bracket-6.rs:10:30\n+  --> $DIR/pat-lt-bracket-6.rs:9:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected `()`, found integer\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2cd375da9a56fd5bba460a082a2fec86a8274736", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,6 @@\n // Test that moving on both sides of an `@` pattern is not allowed.\n \n #![feature(bindings_after_at)]\n-#![feature(slice_patterns)]\n \n fn main() {\n     struct U; // Not copy!"}, {"sha": "12ebcb72af11cba13fb6ff6885e69862355ffdc6", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,53 +1,53 @@\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:12:9\n+  --> $DIR/borrowck-move-and-move.rs:11:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:16:9\n+  --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:20:9\n+  --> $DIR/borrowck-move-and-move.rs:19:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:25:9\n+  --> $DIR/borrowck-move-and-move.rs:24:9\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:25:21\n+  --> $DIR/borrowck-move-and-move.rs:24:21\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:37:9\n+  --> $DIR/borrowck-move-and-move.rs:36:9\n    |\n LL |         xs @ [a, .., b] => {}\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:43:9\n+  --> $DIR/borrowck-move-and-move.rs:42:9\n    |\n LL |         xs @ [_, ys @ .., _] => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:32:12\n+  --> $DIR/borrowck-move-and-move.rs:31:12\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:12:13\n+  --> $DIR/borrowck-move-and-move.rs:11:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n@@ -56,7 +56,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:16:17\n+  --> $DIR/borrowck-move-and-move.rs:15:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -65,7 +65,7 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:17\n+  --> $DIR/borrowck-move-and-move.rs:19:17\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         --------^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -74,7 +74,7 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:25:16\n+  --> $DIR/borrowck-move-and-move.rs:24:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -85,7 +85,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:25:29\n+  --> $DIR/borrowck-move-and-move.rs:24:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -96,7 +96,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:37:22\n+  --> $DIR/borrowck-move-and-move.rs:36:22\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -107,7 +107,7 @@ LL |         xs @ [a, .., b] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:43:18\n+  --> $DIR/borrowck-move-and-move.rs:42:18\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n@@ -118,7 +118,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:32:16\n+  --> $DIR/borrowck-move-and-move.rs:31:16\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ----^"}, {"sha": "092bd1133dd624692aa7e966222a3eacacc1a81a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(bindings_after_at)]\n #![feature(box_patterns)]\n-#![feature(slice_patterns)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "3b2f598dc0157f89b39e75e46001ab846b9b3112", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(bindings_after_at)]\n #![feature(box_patterns)]\n-#![feature(slice_patterns)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "e96c15b0fa7ddd604ce2a95994c78f97e30437a8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,23 +1,23 @@\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:16:9\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:21:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:20:9\n    |\n LL |     let a @ box b = Box::new(C);\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:33:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:32:25\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |                         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:36:21\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ------------^\n@@ -26,7 +26,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         by-ref pattern here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -53,7 +53,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:46:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -62,7 +62,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:52:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:51:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -71,7 +71,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:66:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:65:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -80,15 +80,15 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow occurs here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:75:38\n+  --> $DIR/borrowck-pat-at-and-box.rs:74:38\n    |\n LL |         box [Ok(a), ref xs @ .., Err(b)] => {}\n    |                     -----------      ^ by-move pattern here\n    |                     |\n    |                     by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:81:46\n+  --> $DIR/borrowck-pat-at-and-box.rs:80:46\n    |\n LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n    |                 -----   -----------          ^           --------- by-ref pattern here\n@@ -98,19 +98,19 @@ LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n    |                 by-ref pattern here\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:25:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:24:11\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:29:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:28:11\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:58:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:57:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -119,7 +119,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:16:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -128,7 +128,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:21:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:20:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n@@ -137,7 +137,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:33:33\n+  --> $DIR/borrowck-pat-at-and-box.rs:32:33\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |           -----------   --------^\n@@ -147,7 +147,7 @@ LL |     match Box::new(C) { a @ box b => {} }\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:46:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:45:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -159,7 +159,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:52:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:51:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -171,7 +171,7 @@ LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:66:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:65:25\n    |\n LL |         ref mut a @ box ref b => {\n    |         ----------------^^^^^\n@@ -183,7 +183,7 @@ LL |             *a = Box::new(NC);\n    |             -- mutable borrow later used here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:25:20\n+  --> $DIR/borrowck-pat-at-and-box.rs:24:20\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ---------^\n@@ -193,7 +193,7 @@ LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n+  --> $DIR/borrowck-pat-at-and-box.rs:28:19\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           --------^\n@@ -203,7 +203,7 @@ LL |     fn f2(a @ box b: Box<C>) {}\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:58:27\n+  --> $DIR/borrowck-pat-at-and-box.rs:57:27\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ----------------^^^^^"}, {"sha": "c4ce50c8b9a16313d92168477130159170043b9f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,6 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n-#![feature(slice_patterns)]\n #![feature(bindings_after_at)]\n \n #[derive(Copy, Clone)]"}, {"sha": "fb243016a1185f6ae9112823240a42e77c73c124", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -4,7 +4,6 @@\n // of an `@` pattern according to NLL borrowck.\n \n #![feature(bindings_after_at)]\n-#![feature(slice_patterns)]\n \n fn main() {\n     struct U; // Not copy!"}, {"sha": "e8510dfa649990a3aef693dc92f9ff52f78bdc07", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n #![feature(bindings_after_at)]\n-#![feature(slice_patterns)]\n \n enum Option<T> {\n     None,"}, {"sha": "0d7b703f1816b4aa31bc511e3c26bc0f3075af9c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow `z` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow occurs here\n \n error: cannot borrow `b` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:32:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:36:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:40:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:42:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:56:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:60:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:66:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:65:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:66:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:65:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:116:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:133:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:132:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -249,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -258,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -267,7 +267,7 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n@@ -276,7 +276,7 @@ LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           immutable borrow occurs here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -288,7 +288,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:21\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:21\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ------------^^^^^\n@@ -300,7 +300,7 @@ LL |     *a = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:17\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:17\n    |\n LL |     let ref a @ ref mut b = u();\n    |         --------^^^^^^^^^\n@@ -312,7 +312,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -324,7 +324,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:74:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -336,55 +336,55 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:86:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:85:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:93:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:92:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:100:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:99:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:107:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -396,7 +396,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:121:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -408,7 +408,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -420,7 +420,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:128:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-"}, {"sha": "f425b35630d17565ace97e2472251e6f12912aad", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,7 +1,6 @@\n // Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n \n #![feature(bindings_after_at)]\n-#![feature(slice_patterns)]\n \n fn main() {\n     struct U;"}, {"sha": "d07ad140cc23a72366d6e0eed73f25b842416bbe", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -8,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:32:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:43:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:42:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -88,31 +88,31 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:63:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:79:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -121,7 +121,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:79:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -130,7 +130,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:85:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -139,7 +139,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:85:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -148,7 +148,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -157,7 +157,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -166,7 +166,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -175,7 +175,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -184,7 +184,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -193,7 +193,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -202,7 +202,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -220,7 +220,7 @@ LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -232,7 +232,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -244,7 +244,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:63:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -253,7 +253,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -262,7 +262,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -271,7 +271,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -280,7 +280,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -292,7 +292,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:92:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -304,7 +304,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -316,7 +316,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:104:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-"}, {"sha": "5b0482de2200e9d7e26e2648827dfca88acffe7f", "filename": "src/test/ui/pattern/usefulness/issue-53820-slice-pattern-large-array.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-53820-slice-pattern-large-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-53820-slice-pattern-large-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-53820-slice-pattern-large-array.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// This used to cause a stack overflow in the compiler.\n-\n-#![feature(slice_patterns)]\n+// This used to cause a stack overflow during exhaustiveness checking in the compiler.\n \n fn main() {\n     const LARGE_SIZE: usize = 1024 * 1024;", "previous_filename": "src/test/ui/pattern/issue-53820-slice-pattern-large-array.rs"}, {"sha": "54dfa889ee35a8fbc691c9526431a2c28e76ff48", "filename": "src/test/ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-65413-constants-and-slices-exhaustiveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-65413-constants-and-slices-exhaustiveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-65413-constants-and-slices-exhaustiveness.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(slice_patterns)]\n+\n #![deny(unreachable_patterns)]\n \n const C0: &'static [u8] = b\"\\x00\";", "previous_filename": "src/test/ui/pattern/usefulness/65413-constants-and-slices-exhaustiveness.rs"}, {"sha": "9b6c8bd5556be346f01a0a2662c503b1b0b0ac32", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "09484692fab0815b97e1768af4340ca9901eede6", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,53 +1,53 @@\n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:9:9\n+  --> $DIR/match-byte-array-patterns.rs:8:9\n    |\n LL |         &[0x41, 0x41, 0x41, 0x41] => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/match-byte-array-patterns.rs:2:9\n+  --> $DIR/match-byte-array-patterns.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:15:9\n+  --> $DIR/match-byte-array-patterns.rs:14:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:21:9\n+  --> $DIR/match-byte-array-patterns.rs:20:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:27:9\n+  --> $DIR/match-byte-array-patterns.rs:26:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:35:9\n+  --> $DIR/match-byte-array-patterns.rs:34:9\n    |\n LL |         &[0x41, 0x41, 0x41, 0x41] => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:41:9\n+  --> $DIR/match-byte-array-patterns.rs:40:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:47:9\n+  --> $DIR/match-byte-array-patterns.rs:46:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-byte-array-patterns.rs:53:9\n+  --> $DIR/match-byte-array-patterns.rs:52:9\n    |\n LL |         b\"AAAA\" => {},\n    |         ^^^^^^^"}, {"sha": "92d74b8c229d6000c17bc132b00ee47f4dd82a40", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn check(list: &[Option<()>]) {\n     match list {\n     //~^ ERROR `&[_, Some(_), .., None, _]` not covered"}, {"sha": "977a11280819052e33aa801138b4bce408d997ed", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `&[_, Some(_), .., None, _]` not covered\n-  --> $DIR/match-slice-patterns.rs:4:11\n+  --> $DIR/match-slice-patterns.rs:2:11\n    |\n LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered"}, {"sha": "3342389be6e4c750818d56f192c959ba60f5df41", "filename": "src/test/ui/pattern/usefulness/match-vec-unreachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "e9a751074c2e14a8f22327185a87368742cb3115", "filename": "src/test/ui/pattern/usefulness/match-vec-unreachable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,23 +1,23 @@\n error: unreachable pattern\n-  --> $DIR/match-vec-unreachable.rs:9:9\n+  --> $DIR/match-vec-unreachable.rs:8:9\n    |\n LL |         [(1, 2), (2, 3), b] => (),\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/match-vec-unreachable.rs:2:9\n+  --> $DIR/match-vec-unreachable.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-vec-unreachable.rs:19:9\n+  --> $DIR/match-vec-unreachable.rs:18:9\n    |\n LL |         [_, _, _, _, _] => { }\n    |         ^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-vec-unreachable.rs:27:9\n+  --> $DIR/match-vec-unreachable.rs:26:9\n    |\n LL |         ['a', 'b', 'c'] => {}\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "d198144790be1d8b6d6140f2a66dbd22bc696367", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n enum T { A(U), B }\n enum U { C, D }\n "}, {"sha": "72b4b522198e08f68fd64ff3db11868b0ea58d96", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n-  --> $DIR/non-exhaustive-match-nested.rs:7:11\n+  --> $DIR/non-exhaustive-match-nested.rs:5:11\n    |\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n-  --> $DIR/non-exhaustive-match-nested.rs:17:11\n+  --> $DIR/non-exhaustive-match-nested.rs:15:11\n    |\n LL | enum T { A(U), B }\n    | ------------------"}, {"sha": "9947989dc121121f9d6185b3469ae9a171c60851", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(slice_patterns)]\n #![allow(illegal_floating_point_literal_pattern)]\n \n enum T { A, B }"}, {"sha": "a06ad5788515cfcabd0a71d106753548035b9f93", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `A` not covered\n-  --> $DIR/non-exhaustive-match.rs:8:11\n+  --> $DIR/non-exhaustive-match.rs:7:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -13,39 +13,39 @@ LL |     match x { T::B => { } }\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n-  --> $DIR/non-exhaustive-match.rs:9:11\n+  --> $DIR/non-exhaustive-match.rs:8:11\n    |\n LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n-  --> $DIR/non-exhaustive-match.rs:12:11\n+  --> $DIR/non-exhaustive-match.rs:11:11\n    |\n LL |     match Some(10) {\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n-  --> $DIR/non-exhaustive-match.rs:15:11\n+  --> $DIR/non-exhaustive-match.rs:14:11\n    |\n LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n-  --> $DIR/non-exhaustive-match.rs:19:11\n+  --> $DIR/non-exhaustive-match.rs:18:11\n    |\n LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n-  --> $DIR/non-exhaustive-match.rs:23:11\n+  --> $DIR/non-exhaustive-match.rs:22:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -59,15 +59,15 @@ LL |     match T::A {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n-  --> $DIR/non-exhaustive-match.rs:34:11\n+  --> $DIR/non-exhaustive-match.rs:33:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n-  --> $DIR/non-exhaustive-match.rs:47:11\n+  --> $DIR/non-exhaustive-match.rs:46:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered"}, {"sha": "abb4ea8daf57b5539f0b920c2c0ba11602ab5c3e", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n struct Foo {\n     first: bool,\n     second: Option<[usize; 4]>"}, {"sha": "2a9fa07d22fe781e29e2f1fd0704586b301054f4", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:9:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:7:11\n    |\n LL | / struct Foo {\n LL | |     first: bool,\n@@ -13,7 +13,7 @@ LL |       match (Foo { first: true, second: None }) {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:25:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:23:11\n    |\n LL | / enum Color {\n LL | |     Red,\n@@ -29,7 +29,7 @@ LL |       match Color::Red {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:37:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n    |\n LL | / enum Direction {\n LL | |     North, East, South, West\n@@ -46,7 +46,7 @@ LL |       match Direction::North {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:48:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:46:11\n    |\n LL | / enum ExcessiveEnum {\n LL | |     First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth, Tenth, Eleventh, Twelfth\n@@ -59,7 +59,7 @@ LL |       match ExcessiveEnum::First {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:56:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:54:11\n    |\n LL | / enum Color {\n LL | |     Red,\n@@ -75,15 +75,15 @@ LL |       match Color::Red {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:72:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:70:11\n    |\n LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:85:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:83:11\n    |\n LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered"}, {"sha": "52d1320dad153435950e8e4e5a30a92eff785d42", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n fn main() {\n     let s: &[bool] = &[true; 0];\n     let s1: &[bool; 1] = &[false; 1];"}, {"sha": "b3701efef3de2b6919ba1745d1e3e4f23ea7718d", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,125 +1,125 @@\n error[E0004]: non-exhaustive patterns: `&[false, _]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:10:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:8:11\n    |\n LL |     match s2 {\n    |           ^^ pattern `&[false, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:14:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:12:11\n    |\n LL |     match s3 {\n    |           ^^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:18:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:16:11\n    |\n LL |     match s10 {\n    |           ^^^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, true]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:27:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:25:11\n    |\n LL |     match s2 {\n    |           ^^ pattern `&[false, true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:32:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:30:11\n    |\n LL |     match s3 {\n    |           ^^ pattern `&[false, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:37:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:35:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:44:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:42:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:48:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:46:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:53:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:51:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, _, ..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:58:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:56:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, .., false]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:64:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:62:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, .., false]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, _, .., true]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:71:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:69:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, _, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[true, _, .., _]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:78:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:76:11\n    |\n LL |     match s {\n    |           ^ pattern `&[true, _, .., _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[..]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:87:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:85:11\n    |\n LL |     match s {\n    |           ^ pattern `&[..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[true]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:91:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:89:11\n    |\n LL |     match s {\n    |           ^ pattern `&[true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n-  --> $DIR/slice-patterns-exhaustiveness.rs:99:11\n+  --> $DIR/slice-patterns-exhaustiveness.rs:97:11\n    |\n LL |     match s1 {\n    |           ^^ pattern `&[false]` not covered"}, {"sha": "cbf64e2c53d0243ae573d380861d936649a10da5", "filename": "src/test/ui/pattern/usefulness/slice-patterns-irrefutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-irrefutable.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(slice_patterns)]\n \n fn main() {\n     let s: &[bool] = &[true; 0];"}, {"sha": "7c747b5e0b9d377e39fc599c2d70e07e6440cbcb", "filename": "src/test/ui/pattern/usefulness/slice-patterns-reachability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "e24d10281170dcf3972e3df909cd07c06d8579d3", "filename": "src/test/ui/pattern/usefulness/slice-patterns-reachability.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-reachability.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,41 +1,41 @@\n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:9:9\n+  --> $DIR/slice-patterns-reachability.rs:8:9\n    |\n LL |         [true, ..] => {}\n    |         ^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/slice-patterns-reachability.rs:2:9\n+  --> $DIR/slice-patterns-reachability.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:10:9\n+  --> $DIR/slice-patterns-reachability.rs:9:9\n    |\n LL |         [true] => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:15:9\n+  --> $DIR/slice-patterns-reachability.rs:14:9\n    |\n LL |         [.., true] => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:16:9\n+  --> $DIR/slice-patterns-reachability.rs:15:9\n    |\n LL |         [true] => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:21:9\n+  --> $DIR/slice-patterns-reachability.rs:20:9\n    |\n LL |         [false, .., true] => {}\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/slice-patterns-reachability.rs:22:9\n+  --> $DIR/slice-patterns-reachability.rs:21:9\n    |\n LL |         [false, true] => {}\n    |         ^^^^^^^^^^^^^"}, {"sha": "363a0e3e649d9a5fe66432509252cd7ad9ca9291", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(slice_patterns)]\n-\n pub fn main() {\n     let sl: &[u8] = b\"foo\";\n "}, {"sha": "c234fdf46ed2d8651c493a77adcf66e7506fbf5d", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `&[]` not covered\n-  --> $DIR/slice.rs:6:11\n+  --> $DIR/slice.rs:4:11\n    |\n LL |     match sl {\n    |           ^^ pattern `&[]` not covered"}, {"sha": "33229a205f4d8dc4b4911de2b67440fab2290786", "filename": "src/test/ui/rfcs/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(slice_patterns)]\n \n fn slice_pat() {\n     let sl: &[u8] = b\"foo\";"}, {"sha": "97006ae50a0bf3a509f95e73f425ddc549d0c97d", "filename": "src/test/ui/trailing-comma.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrailing-comma.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![feature(slice_patterns)]\n-\n fn f<T,>(_: T,) {}\n \n struct Foo<T,>(T);"}, {"sha": "58c726d2185c4d3d13ec6cfb6813933a17295877", "filename": "src/test/ui/uninhabited/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce08f9d631ef767c915270bc63283c6af40dc3f/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs?ref=1ce08f9d631ef767c915270bc63283c6af40dc3f", "patch": "@@ -2,7 +2,7 @@\n #![feature(box_syntax)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(slice_patterns)]\n+\n #![deny(unreachable_patterns)]\n \n mod foo {"}]}