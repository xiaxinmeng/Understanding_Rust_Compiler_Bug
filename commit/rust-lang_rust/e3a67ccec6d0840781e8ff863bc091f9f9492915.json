{"sha": "e3a67ccec6d0840781e8ff863bc091f9f9492915", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTY3Y2NlYzZkMDg0MDc4MWU4ZmY4NjNiYzA5MWY5Zjk0OTI5MTU=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-04T03:57:31Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-04T04:34:20Z"}, "message": "tree-wide: fix rustdoc warnings, add some links", "tree": {"sha": "10ebdfd86e4f5a5e1167c81a55dfdd58999ebf5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10ebdfd86e4f5a5e1167c81a55dfdd58999ebf5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a67ccec6d0840781e8ff863bc091f9f9492915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a67ccec6d0840781e8ff863bc091f9f9492915", "html_url": "https://github.com/rust-lang/rust/commit/e3a67ccec6d0840781e8ff863bc091f9f9492915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a67ccec6d0840781e8ff863bc091f9f9492915/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8431133e1d859fe6a168cc20288d48957d97fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8431133e1d859fe6a168cc20288d48957d97fe", "html_url": "https://github.com/rust-lang/rust/commit/8a8431133e1d859fe6a168cc20288d48957d97fe"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "6beb664ffbfa97f394e283e09a6b4d5669abcd1a", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -51,7 +51,7 @@\n //! The `GetDeclaredType` takes `Syntax` as input, and returns `Symbol` as\n //! output. First, it retrieves a `Symbol` for parent `Syntax`:\n //!\n-//! * https://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1423\n+//! * <https://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1423>\n //!\n //! Then, it iterates parent symbol's children, looking for one which has the\n //! same text span as the original node:"}, {"sha": "6dc6e12903fc99b772292ddeda6249be26e2a1a4", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -39,8 +39,7 @@\n //!\n //! Splitting is implemented in the [`Constructor::split`] function. We don't do splitting for\n //! or-patterns; instead we just try the alternatives one-by-one. For details on splitting\n-//! wildcards, see [`SplitWildcard`]; for integer ranges, see [`SplitIntRange`]; for slices, see\n-//! [`SplitVarLenSlice`].\n+//! wildcards, see [`SplitWildcard`]; for integer ranges, see [`SplitIntRange`].\n \n use std::{\n     cmp::{max, min},"}, {"sha": "06f03b03f1638d916651317cf8a9e694c51f8ba3", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -120,8 +120,8 @@ pub fn visit_file_defs(\n ///\n /// Note that, by default, rust-analyzer tests **do not** include core or std\n /// libraries. If you are writing tests for functionality using [`FamousDefs`],\n-/// you'd want to include [minicore](test_utils::MiniCore) declaration at the\n-/// start of your tests:\n+/// you'd want to include minicore (see `test_utils::MiniCore`) declaration at\n+/// the start of your tests:\n ///\n /// ```\n /// //- minicore: iterator, ord, derive"}, {"sha": "cef9b7df31fa166c3ef9c8ea8c2cce1e3bb4cf94", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -6,9 +6,9 @@\n //! each submodule starts with `use super::*` import and exports\n //! \"public\" productions via `pub(super)`.\n //!\n-//! See docs for `Parser` to learn about API, available to the grammar,\n-//! and see docs for `Event` to learn how this actually manages to\n-//! produce parse trees.\n+//! See docs for [`Parser`](super::parser::Parser) to learn about API,\n+//! available to the grammar, and see docs for [`Event`](super::event::Event)\n+//! to learn how this actually manages to produce parse trees.\n //!\n //! Code in this module also contains inline tests, which start with\n //! `// test name-of-the-test` comment and look like this:"}, {"sha": "44537e380ae77a73dc74d3da55c19b4ef34fe686", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -1,17 +1,20 @@\n //! The Rust parser.\n //!\n //! The parser doesn't know about concrete representation of tokens and syntax\n-//! trees. Abstract `TokenSource` and `TreeSink` traits are used instead. As a\n-//! consequence, this crates does not contain a lexer.\n+//! trees. Abstract [`TokenSource`] and [`TreeSink`] traits are used instead.\n+//! As a consequence, this crate does not contain a lexer.\n //!\n-//! The `Parser` struct from the `parser` module is a cursor into the sequence\n-//! of tokens. Parsing routines use `Parser` to inspect current state and\n-//! advance the parsing.\n+//! The [`Parser`] struct from the [`parser`] module is a cursor into the\n+//! sequence of tokens.  Parsing routines use [`Parser`] to inspect current\n+//! state and advance the parsing.\n //!\n-//! The actual parsing happens in the `grammar` module.\n+//! The actual parsing happens in the [`grammar`] module.\n //!\n-//! Tests for this crate live in `syntax` crate.\n+//! Tests for this crate live in the `syntax` crate.\n+//!\n+//! [`Parser`]: crate::parser::Parser\n \n+#![allow(rustdoc::private_intra_doc_links)]\n #[macro_use]\n mod token_set;\n #[macro_use]"}, {"sha": "5ed362ea638c0a3dbf202e547d06c24c6c1c9e53", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -14,7 +14,7 @@ use crate::{\n /// `Parser` struct provides the low-level API for\n /// navigating through the stream of tokens and\n /// constructing the parse tree. The actual parsing\n-/// happens in the `grammar` module.\n+/// happens in the [`grammar`](super::grammar) module.\n ///\n /// However, the result of this `Parser` is not a real\n /// tree, but rather a flat stream of events of the form\n@@ -262,7 +262,7 @@ impl<'t> Parser<'t> {\n     }\n }\n \n-/// See `Parser::start`.\n+/// See [`Parser::start`].\n pub(crate) struct Marker {\n     pos: u32,\n     bomb: DropBomb,\n@@ -320,7 +320,8 @@ impl CompletedMarker {\n     /// node `A`, then complete it, and then after parsing the\n     /// whole `A`, decide that it should have started some node\n     /// `B` before starting `A`. `precede` allows to do exactly\n-    /// that. See also docs about `forward_parent` in `Event::Start`.\n+    /// that. See also docs about\n+    /// [`Event::Start::forward_parent`](crate::event::Event::Start::forward_parent).\n     ///\n     /// Given completed events `[START, FINISH]` and its corresponding\n     /// `CompletedMarker(pos: 0, _)`."}, {"sha": "4a5a66d3fd35b8b18996d1c73c5d729ff4afc30b", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a67ccec6d0840781e8ff863bc091f9f9492915/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=e3a67ccec6d0840781e8ff863bc091f9f9492915", "patch": "@@ -197,12 +197,12 @@ pub enum AttrKind {\n }\n \n impl AttrKind {\n-    /// Returns `true` if the attr_kind is [`Inner`].\n+    /// Returns `true` if the attr_kind is [`Inner`](Self::Inner).\n     pub fn is_inner(&self) -> bool {\n         matches!(self, Self::Inner)\n     }\n \n-    /// Returns `true` if the attr_kind is [`Outer`].\n+    /// Returns `true` if the attr_kind is [`Outer`](Self::Outer).\n     pub fn is_outer(&self) -> bool {\n         matches!(self, Self::Outer)\n     }"}]}