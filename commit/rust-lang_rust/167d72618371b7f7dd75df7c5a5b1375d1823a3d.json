{"sha": "167d72618371b7f7dd75df7c5a5b1375d1823a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2N2Q3MjYxODM3MWI3ZjdkZDc1ZGY3YzVhNWIxMzc1ZDE4MjNhM2Q=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-06T00:29:36Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-06T00:33:30Z"}, "message": "Get rid of spill_map and associated infrastructure.", "tree": {"sha": "64d3157008b052f631b7edadac77fa742a1891d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64d3157008b052f631b7edadac77fa742a1891d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167d72618371b7f7dd75df7c5a5b1375d1823a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167d72618371b7f7dd75df7c5a5b1375d1823a3d", "html_url": "https://github.com/rust-lang/rust/commit/167d72618371b7f7dd75df7c5a5b1375d1823a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167d72618371b7f7dd75df7c5a5b1375d1823a3d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868e3f9180f99ce2d26c84277a644514048d309b", "url": "https://api.github.com/repos/rust-lang/rust/commits/868e3f9180f99ce2d26c84277a644514048d309b", "html_url": "https://github.com/rust-lang/rust/commit/868e3f9180f99ce2d26c84277a644514048d309b"}], "stats": {"total": 74, "additions": 11, "deletions": 63}, "files": [{"sha": "e769455376a5788f1617fb4e9ec5a58d0a57e721", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=167d72618371b7f7dd75df7c5a5b1375d1823a3d", "patch": "@@ -194,7 +194,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n          bind middle::check_loop::check_crate(ty_cx, crate));\n     time(time_passes, \"alt checking\",\n          bind middle::check_alt::check_crate(ty_cx, crate));\n-    let (last_use_map, spill_map) =\n+    let last_use_map =\n         time(time_passes, \"liveness checking\",\n              bind middle::liveness::check_crate(ty_cx, method_map, crate));\n     time(time_passes, \"typestate checking\",\n@@ -216,7 +216,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     let maps = {mutbl_map: mutbl_map, root_map: root_map,\n                 copy_map: copy_map, last_use_map: last_use_map,\n                 impl_map: impl_map, method_map: method_map,\n-                vtable_map: vtable_map, spill_map: spill_map};\n+                vtable_map: vtable_map};\n \n     let (llmod, link_meta) =\n         time(time_passes, \"translation\","}, {"sha": "6ebf0ed9ec65fae068ce3e45a06b4d664f078a5f", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=167d72618371b7f7dd75df7c5a5b1375d1823a3d", "patch": "@@ -57,7 +57,6 @@ type maps = {\n     impl_map: middle::resolve::impl_map,\n     method_map: middle::typeck::method_map,\n     vtable_map: middle::typeck::vtable_map,\n-    spill_map: middle::liveness::spill_map\n };\n \n type decode_ctxt = @{\n@@ -839,12 +838,6 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::iter(maps.spill_map.find(id)) {|_m|\n-        ebml_w.tag(c::tag_table_spill) {||\n-            ebml_w.id(id);\n-        }\n-    }\n-\n     option::iter(maps.last_use_map.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n@@ -953,8 +946,6 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n             dcx.maps.mutbl_map.insert(id, ());\n         } else if tag == (c::tag_table_copy as uint) {\n             dcx.maps.copy_map.insert(id, ());\n-        } else if tag == (c::tag_table_spill as uint) {\n-            dcx.maps.spill_map.insert(id, ());\n         } else {\n             let val_doc = entry_doc[c::tag_table_val];\n             let val_dsr = ebml::ebml_deserializer(val_doc);"}, {"sha": "048823f4553f700f5fbbf261a78692f72513debc", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 52, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167d72618371b7f7dd75df7c5a5b1375d1823a3d/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=167d72618371b7f7dd75df7c5a5b1375d1823a3d", "patch": "@@ -57,7 +57,6 @@ import capture::{cap_move, cap_drop, cap_copy, cap_ref};\n \n export check_crate;\n export last_use_map;\n-export spill_map;\n \n // Maps from an expr id to a list of variable ids for which this expr\n // is the last use.  Typically, the expr is a path and the node id is\n@@ -66,13 +65,6 @@ export spill_map;\n // list of closed over variables that can be moved into the closure.\n type last_use_map = hashmap<node_id, @dvec<node_id>>;\n \n-// A set of variable ids which must be spilled (stored on the stack).\n-// We add in any variables or arguments where:\n-// (1) the variables are moved;\n-// (2) the address of the variable/argument is taken;\n-// or (3) we find a last use (as they may be moved).\n-type spill_map = hashmap<node_id, ()>;\n-\n enum variable = uint;\n enum live_node = uint;\n \n@@ -85,7 +77,7 @@ enum live_node_kind {\n \n fn check_crate(tcx: ty::ctxt,\n                method_map: typeck::method_map,\n-               crate: @crate) -> (last_use_map, spill_map) {\n+               crate: @crate) -> last_use_map {\n     let visitor = visit::mk_vt(@{\n         visit_fn: visit_fn,\n         visit_local: visit_local,\n@@ -94,12 +86,11 @@ fn check_crate(tcx: ty::ctxt,\n     });\n \n     let last_use_map = int_hash();\n-    let spill_map = int_hash();\n     let initial_maps = @ir_maps(tcx, method_map,\n-                                last_use_map, spill_map);\n+                                last_use_map);\n     visit::visit_crate(*crate, initial_maps, visitor);\n     tcx.sess.abort_if_errors();\n-    ret (last_use_map, spill_map);\n+    ret last_use_map;\n }\n \n impl of to_str::to_str for live_node {\n@@ -162,7 +153,6 @@ class ir_maps {\n     let tcx: ty::ctxt;\n     let method_map: typeck::method_map;\n     let last_use_map: last_use_map;\n-    let spill_map: spill_map;\n \n     let mut num_live_nodes: uint;\n     let mut num_vars: uint;\n@@ -174,11 +164,10 @@ class ir_maps {\n     let mut lnks: [live_node_kind];\n \n     new(tcx: ty::ctxt, method_map: typeck::method_map,\n-        last_use_map: last_use_map, spill_map: spill_map) {\n+        last_use_map: last_use_map) {\n         self.tcx = tcx;\n         self.method_map = method_map;\n         self.last_use_map = last_use_map;\n-        self.spill_map = spill_map;\n \n         self.num_live_nodes = 0u;\n         self.num_vars = 0u;\n@@ -264,17 +253,6 @@ class ir_maps {\n         self.lnks[*ln]\n     }\n \n-    fn add_spill(var: variable) {\n-        let vk = self.var_kinds[*var];\n-        alt vk {\n-          vk_local(id, _) | vk_arg(id, _, by_val) {\n-            #debug[\"adding spill for %?\", vk];\n-            self.spill_map.insert(id, ());\n-          }\n-          vk_arg(*) | vk_field(_) | vk_self | vk_implicit_ret {}\n-        }\n-    }\n-\n     fn add_last_use(expr_id: node_id, var: variable) {\n         let vk = self.var_kinds[*var];\n         #debug[\"Node %d is a last use of variable %?\", expr_id, vk];\n@@ -308,7 +286,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n \n     // swap in a new set of IR maps for this function body:\n     let fn_maps = @ir_maps(self.tcx, self.method_map,\n-                           self.last_use_map, self.spill_map);\n+                           self.last_use_map);\n \n     #debug[\"creating fn_maps: %x\", ptr::addr_of(*fn_maps) as uint];\n \n@@ -1407,11 +1385,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n         vt.visit_expr(f, self, vt);\n         vec::iter2(args, targs) { |arg_expr, arg_ty|\n             alt ty::resolved_mode(self.tcx, arg_ty.mode) {\n-              by_val | by_copy {\n-                vt.visit_expr(arg_expr, self, vt);\n-              }\n-              by_ref | by_mutbl_ref {\n-                self.spill_expr(arg_expr);\n+              by_val | by_copy | by_ref | by_mutbl_ref{\n                 vt.visit_expr(arg_expr, self, vt);\n               }\n               by_move {\n@@ -1421,10 +1395,6 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n         }\n       }\n \n-      expr_addr_of(_, arg_expr) {\n-        self.spill_expr(arg_expr);\n-      }\n-\n       // no correctness conditions related to liveness\n       expr_if_check(*) | expr_if(*) | expr_alt(*) |\n       expr_while(*) | expr_loop(*) |\n@@ -1434,7 +1404,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_assert(*) | expr_check(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_cast(*) | expr_unary(*) | expr_fail(*) |\n       expr_ret(*) | expr_break | expr_cont | expr_lit(_) |\n-      expr_block(*) | expr_swap(*) | expr_mac(*) {\n+      expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) {\n         visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1501,10 +1471,7 @@ impl check_methods for @liveness {\n                ln.to_str(), var.to_str()];\n \n         alt (*self).live_on_exit(ln, var) {\n-          none {\n-            // update spill map to include this variable, as it is moved:\n-            (*self.ir).add_spill(var);\n-          }\n+          none { }\n           some(lnk) {\n             self.report_illegal_move(span, lnk, var);\n           }\n@@ -1516,20 +1483,10 @@ impl check_methods for @liveness {\n           some(_) {}\n           none {\n             (*self.ir).add_last_use(expr.id, var);\n-\n-            // update spill map to include this variable, as it may be moved:\n-            (*self.ir).add_spill(var);\n           }\n        }\n     }\n \n-    fn spill_expr(expr: @expr) {\n-        alt (*self).variable_from_path(expr) {\n-          some(var) {(*self.ir).add_spill(var)}\n-          none {}\n-        }\n-    }\n-\n     fn check_move_from_expr(expr: @expr, vt: vt<@liveness>) {\n         #debug[\"check_move_from_expr(node %d: %s)\",\n                expr.id, expr_to_str(expr)];\n@@ -1775,4 +1732,4 @@ impl check_methods for @liveness {\n             }\n         }\n     }\n- }\n\\ No newline at end of file\n+ }"}]}