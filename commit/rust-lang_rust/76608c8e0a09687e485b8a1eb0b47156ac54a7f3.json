{"sha": "76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjA4YzhlMGEwOTY4N2U0ODViOGExZWIwYjQ3MTU2YWM1NGE3ZjM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-02-11T16:31:20Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-02-19T23:54:58Z"}, "message": "make *mut T -> *const T a coercion\n\nrather than being implicit quasi-subtyping. Nothing good can come out\nof quasi-subtyping.", "tree": {"sha": "94eb418ca25061d089871bdacc4db32175354d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94eb418ca25061d089871bdacc4db32175354d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "html_url": "https://github.com/rust-lang/rust/commit/76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f633ef128335e11e9903f647c6a6150f3a714d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f633ef128335e11e9903f647c6a6150f3a714d1", "html_url": "https://github.com/rust-lang/rust/commit/6f633ef128335e11e9903f647c6a6150f3a714d1"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "93cc158cd12f2d6c58858b84a5244d0904dee7d3", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -721,10 +721,11 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         if let Some(adjustment) = adj {\n             match adjustment {\n                 adjustment::AdjustReifyFnPointer |\n-                adjustment::AdjustUnsafeFnPointer => {\n+                adjustment::AdjustUnsafeFnPointer |\n+                adjustment::AdjustMutToConstPointer => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue.\n-                    debug!(\"walk_adjustment(AdjustReifyFnPointer|AdjustUnsafeFnPointer)\");\n+                    debug!(\"walk_adjustment: trivial adjustment\");\n                     let cmt_unadjusted =\n                         return_if_err!(self.mc.cat_expr_unadjusted(expr));\n                     self.delegate_consume(expr.id, expr.span, cmt_unadjusted);"}, {"sha": "fef35764e1cc13d216b817df350747d9ce631f4d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -430,6 +430,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n \n                     adjustment::AdjustReifyFnPointer |\n                     adjustment::AdjustUnsafeFnPointer |\n+                    adjustment::AdjustMutToConstPointer |\n                     adjustment::AdjustDerefRef(_) => {\n                         debug!(\"cat_expr({:?}): {:?}\",\n                                adjustment,"}, {"sha": "afe177fbdcdcb3aff6ac1440c6af7b326ee42aa4", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -21,8 +21,9 @@ use rustc_front::hir;\n \n #[derive(Copy, Clone)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustReifyFnPointer,   // go from a fn-item type to a fn-pointer type\n-    AdjustUnsafeFnPointer,  // go from a safe fn pointer to an unsafe fn pointer\n+    AdjustReifyFnPointer,    // go from a fn-item type to a fn-pointer type\n+    AdjustUnsafeFnPointer,   // go from a safe fn pointer to an unsafe fn pointer\n+    AdjustMutToConstPointer, // go from a mut raw pointer to a const raw pointer\n     AdjustDerefRef(AutoDerefRef<'tcx>),\n }\n \n@@ -106,7 +107,8 @@ impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n             AdjustReifyFnPointer |\n-            AdjustUnsafeFnPointer => false,\n+            AdjustUnsafeFnPointer |\n+            AdjustMutToConstPointer => false,\n             AdjustDerefRef(ref r) => r.is_identity(),\n         }\n     }\n@@ -151,7 +153,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         return match adjustment {\n             Some(adjustment) => {\n                 match *adjustment {\n-                   AdjustReifyFnPointer => {\n+                    AdjustReifyFnPointer => {\n                         match self.sty {\n                             ty::TyBareFn(Some(_), b) => {\n                                 cx.mk_fn(None, b)\n@@ -164,17 +166,32 @@ impl<'tcx> ty::TyS<'tcx> {\n                         }\n                     }\n \n-                   AdjustUnsafeFnPointer => {\n+                    AdjustUnsafeFnPointer => {\n                         match self.sty {\n                             ty::TyBareFn(None, b) => cx.safe_to_unsafe_fn_ty(b),\n                             ref b => {\n                                 cx.sess.bug(\n-                                    &format!(\"AdjustReifyFnPointer adjustment on non-fn-item: \\\n+                                    &format!(\"AdjustUnsafeFnPointer adjustment on non-fn-ptr: \\\n                                              {:?}\",\n                                             b));\n                             }\n                         }\n-                   }\n+                    }\n+\n+                    AdjustMutToConstPointer => {\n+                        match self.sty {\n+                            ty::TyRawPtr(mt) => cx.mk_ptr(ty::TypeAndMut {\n+                                ty: mt.ty,\n+                                mutbl: hir::MutImmutable\n+                            }),\n+                            ref b => {\n+                                cx.sess.bug(\n+                                    &format!(\"AdjustMutToConstPointer on non-raw-ptr: \\\n+                                             {:?}\",\n+                                            b));\n+                            }\n+                        }\n+                    }\n \n                     AdjustDerefRef(ref adj) => {\n                         let mut adjusted_ty = self;"}, {"sha": "5868f233776c20af519338084f3ad3994f4cb713", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -396,6 +396,9 @@ impl<'tcx> fmt::Debug for ty::adjustment::AutoAdjustment<'tcx> {\n             ty::adjustment::AdjustUnsafeFnPointer => {\n                 write!(f, \"AdjustUnsafeFnPointer\")\n             }\n+            ty::adjustment::AdjustMutToConstPointer => {\n+                write!(f, \"AdjustMutToConstPointer\")\n+            }\n             ty::adjustment::AdjustDerefRef(ref data) => {\n                 write!(f, \"{:?}\", data)\n             }"}, {"sha": "fe4df865a0e61cd910bd0613827227256038ce65", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -610,7 +610,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n         self.emit_enum(\"AutoAdjustment\", |this| {\n             match *adj {\n-                adjustment::AdjustReifyFnPointer=> {\n+                adjustment::AdjustReifyFnPointer => {\n                     this.emit_enum_variant(\"AdjustReifyFnPointer\", 1, 0, |_| Ok(()))\n                 }\n \n@@ -620,8 +620,14 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n+                adjustment::AdjustMutToConstPointer => {\n+                    this.emit_enum_variant(\"AdjustMutToConstPointer\", 3, 0, |_| {\n+                        Ok(())\n+                    })\n+                }\n+\n                 adjustment::AdjustDerefRef(ref auto_deref_ref) => {\n-                    this.emit_enum_variant(\"AdjustDerefRef\", 3, 2, |this| {\n+                    this.emit_enum_variant(\"AdjustDerefRef\", 4, 2, |this| {\n                         this.emit_enum_variant_arg(0,\n                             |this| Ok(this.emit_auto_deref_ref(ecx, auto_deref_ref)))\n                     })\n@@ -1002,12 +1008,14 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_auto_adjustment<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                     -> adjustment::AutoAdjustment<'tcx> {\n         self.read_enum(\"AutoAdjustment\", |this| {\n-            let variants = [\"AdjustReifyFnPointer\", \"AdjustUnsafeFnPointer\", \"AdjustDerefRef\"];\n+            let variants = [\"AdjustReifyFnPointer\", \"AdjustUnsafeFnPointer\",\n+                            \"AdjustMutToConstPointer\", \"AdjustDerefRef\"];\n             this.read_enum_variant(&variants, |this, i| {\n                 Ok(match i {\n                     1 => adjustment::AdjustReifyFnPointer,\n                     2 => adjustment::AdjustUnsafeFnPointer,\n-                    3 => {\n+                    3 => adjustment::AdjustMutToConstPointer,\n+                    4 => {\n                         let auto_deref_ref: adjustment::AutoDerefRef =\n                             this.read_enum_variant_arg(0,\n                                 |this| Ok(this.read_auto_deref_ref(dcx))).unwrap();"}, {"sha": "324c1e92efc2ed7ba6caea72501dca6741cedc43", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -416,6 +416,9 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             kind: kind,\n         };\n \n+        debug!(\"unadjusted-expr={:?} applying adjustments={:?}\",\n+               expr, cx.tcx.tables.borrow().adjustments.get(&self.id));\n+\n         // Now apply adjustments, if any.\n         match cx.tcx.tables.borrow().adjustments.get(&self.id) {\n             None => {}\n@@ -437,6 +440,15 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     kind: ExprKind::UnsafeFnPointer { source: expr.to_ref() },\n                 };\n             }\n+            Some(&ty::adjustment::AdjustMutToConstPointer) => {\n+                let adjusted_ty = cx.tcx.expr_ty_adjusted(self);\n+                expr = Expr {\n+                    temp_lifetime: temp_lifetime,\n+                    ty: adjusted_ty,\n+                    span: self.span,\n+                    kind: ExprKind::Cast { source: expr.to_ref() },\n+                };\n+            }\n             Some(&ty::adjustment::AdjustDerefRef(ref adj)) => {\n                 for i in 0..adj.autoderefs {\n                     let i = i as u32;"}, {"sha": "b0d459063ef29a5bccf2c5858d10ce574a3e7368", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -768,7 +768,8 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n     match v.tcx.tables.borrow().adjustments.get(&e.id) {\n         None |\n         Some(&ty::adjustment::AdjustReifyFnPointer) |\n-        Some(&ty::adjustment::AdjustUnsafeFnPointer) => {}\n+        Some(&ty::adjustment::AdjustUnsafeFnPointer) |\n+        Some(&ty::adjustment::AdjustMutToConstPointer) => {}\n \n         Some(&ty::adjustment::AdjustDerefRef(\n             ty::adjustment::AutoDerefRef { autoderefs, .. }"}, {"sha": "79c73a83ee7e0e5889152482aa246d0e2f860b05", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -40,7 +40,7 @@ use trans::type_of;\n use trans::Disr;\n use middle::subst::Substs;\n use middle::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n-use middle::ty::adjustment::AdjustUnsafeFnPointer;\n+use middle::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use middle::ty::{self, Ty};\n use middle::ty::cast::{CastTy,IntTy};\n use util::nodemap::NodeMap;\n@@ -354,7 +354,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n         }\n-        Some(AdjustUnsafeFnPointer) => {\n+        Some(AdjustUnsafeFnPointer) | Some(AdjustMutToConstPointer) => {\n             // purely a type-level thing\n         }\n         Some(AdjustDerefRef(adj)) => {"}, {"sha": "782e38d3af2d4ea6d57d4f59aeb4a7f041281fe9", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -71,7 +71,8 @@ use trans::tvec;\n use trans::type_of;\n use trans::Disr;\n use middle::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n-use middle::ty::adjustment::{AdjustUnsafeFnPointer, CustomCoerceUnsized};\n+use middle::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n+use middle::ty::adjustment::CustomCoerceUnsized;\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use middle::ty::cast::{CastKind, CastTy};\n@@ -354,7 +355,7 @@ fn adjustment_required<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // zero-sized, we'll need to return true here\n             false\n         }\n-        AdjustUnsafeFnPointer => {\n+        AdjustUnsafeFnPointer | AdjustMutToConstPointer => {\n             // purely a type-level thing\n             false\n         }\n@@ -391,7 +392,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n         }\n-        AdjustUnsafeFnPointer => {\n+        AdjustUnsafeFnPointer | AdjustMutToConstPointer => {\n             // purely a type-level thing\n         }\n         AdjustDerefRef(ref adj) => {"}, {"sha": "f07464592faacbd887fc3785d97f635bfd07d9b6", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -67,7 +67,7 @@ use middle::traits::{self, ObligationCause};\n use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::adjustment::{AutoAdjustment, AutoDerefRef, AdjustDerefRef};\n use middle::ty::adjustment::{AutoPtr, AutoUnsafe, AdjustReifyFnPointer};\n-use middle::ty::adjustment::{AdjustUnsafeFnPointer};\n+use middle::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use middle::ty::{self, LvaluePreference, TypeAndMut, Ty};\n use middle::ty::fold::TypeFoldable;\n use middle::ty::error::TypeError;\n@@ -427,6 +427,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 autoref: Some(AutoUnsafe(mutbl_b)),\n                 unsize: None\n             })))\n+        } else if mt_a.mutbl != mutbl_b {\n+            Ok(Some(AdjustMutToConstPointer))\n         } else {\n             Ok(None)\n         }"}, {"sha": "513532397903445c33eaa9fe3be5bf6f5662dacd", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76608c8e0a09687e485b8a1eb0b47156ac54a7f3/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "patch": "@@ -305,6 +305,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                         adjustment::AdjustReifyFnPointer\n                     }\n \n+                    adjustment::AdjustMutToConstPointer => {\n+                        adjustment::AdjustMutToConstPointer\n+                    }\n+\n                     adjustment::AdjustUnsafeFnPointer => {\n                         adjustment::AdjustUnsafeFnPointer\n                     }"}]}