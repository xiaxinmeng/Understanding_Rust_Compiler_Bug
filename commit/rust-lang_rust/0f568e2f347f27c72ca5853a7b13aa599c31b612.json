{"sha": "0f568e2f347f27c72ca5853a7b13aa599c31b612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTY4ZTJmMzQ3ZjI3YzcyY2E1ODUzYTdiMTNhYTU5OWMzMWI2MTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-11T17:09:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-16T21:32:22Z"}, "message": "convert constant promotion into a query", "tree": {"sha": "c46973851d4781ff860c8a4c84634daef3c61e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c46973851d4781ff860c8a4c84634daef3c61e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f568e2f347f27c72ca5853a7b13aa599c31b612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f568e2f347f27c72ca5853a7b13aa599c31b612", "html_url": "https://github.com/rust-lang/rust/commit/0f568e2f347f27c72ca5853a7b13aa599c31b612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f568e2f347f27c72ca5853a7b13aa599c31b612/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "807e157b4cff0bcedb91abe482b876ea1ac3b1e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/807e157b4cff0bcedb91abe482b876ea1ac3b1e0", "html_url": "https://github.com/rust-lang/rust/commit/807e157b4cff0bcedb91abe482b876ea1ac3b1e0"}], "stats": {"total": 219, "additions": 165, "deletions": 54}, "files": [{"sha": "08acc22114b294af709c563d85f70892924d9c57", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -553,6 +553,7 @@ define_dep_nodes!( <'tcx>\n     [] LookupDeprecationEntry(DefId),\n     [] ItemBodyNestedBodies(DefId),\n     [] ConstIsRvaluePromotableToStatic(DefId),\n+    [] RvaluePromotableMap(DefId),\n     [] ImplParent(DefId),\n     [] TraitOfItem(DefId),\n     [] IsExportedSymbol(DefId),"}, {"sha": "e62cc2a658a474cf6f1d75da9956ebc627afa813", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -27,10 +27,11 @@ use middle::region;\n use ty::{self, TyCtxt, adjustment};\n \n use hir::{self, PatKind};\n-\n+use std::rc::Rc;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n+use util::nodemap::ItemLocalMap;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait\n@@ -262,15 +263,30 @@ macro_rules! return_if_err {\n }\n \n impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n+    /// Creates the ExprUseVisitor, configuring it with the various options provided:\n+    ///\n+    /// - `delegate` -- who receives the callbacks\n+    /// - `param_env` --- parameter environment for trait lookups (esp. pertaining to `Copy`)\n+    /// - `region_scope_tree` --- region scope tree for the code being analyzed\n+    /// - `tables` --- typeck results for the code being analyzed\n+    /// - `rvalue_promotable_map` --- if you care about rvalue promotion, then provide\n+    ///   the map here (it can be computed with `tcx.rvalue_promotable_map(def_id)`).\n+    ///   `None` means that rvalues will be given more conservative lifetimes.\n+    ///\n+    /// See also `with_infer`, which is used *during* typeck.\n     pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n-               tables: &'a ty::TypeckTables<'tcx>)\n+               tables: &'a ty::TypeckTables<'tcx>,\n+               rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>)\n                -> Self\n     {\n         ExprUseVisitor {\n-            mc: mc::MemCategorizationContext::new(tcx, region_scope_tree, tables),\n+            mc: mc::MemCategorizationContext::new(tcx,\n+                                                  region_scope_tree,\n+                                                  tables,\n+                                                  rvalue_promotable_map),\n             delegate,\n             param_env,\n         }"}, {"sha": "3ef7ee4d6b0e0747e830c979349d81e30171bae6", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -86,6 +86,7 @@ use syntax_pos::Span;\n \n use std::fmt;\n use std::rc::Rc;\n+use util::nodemap::ItemLocalMap;\n \n #[derive(Clone, PartialEq)]\n pub enum Categorization<'tcx> {\n@@ -285,6 +286,7 @@ pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pub region_scope_tree: &'a region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n+    rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>,\n     infcx: Option<&'a InferCtxt<'a, 'gcx, 'tcx>>,\n }\n \n@@ -392,21 +394,46 @@ impl MutabilityCategory {\n impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n-               tables: &'a ty::TypeckTables<'tcx>)\n+               tables: &'a ty::TypeckTables<'tcx>,\n+               rvalue_promotable_map: Option<Rc<ItemLocalMap<bool>>>)\n                -> MemCategorizationContext<'a, 'tcx, 'tcx> {\n-        MemCategorizationContext { tcx, region_scope_tree, tables, infcx: None }\n+        MemCategorizationContext {\n+            tcx,\n+            region_scope_tree,\n+            tables,\n+            rvalue_promotable_map,\n+            infcx: None\n+        }\n     }\n }\n \n impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n+    /// Creates a `MemCategorizationContext` during type inference.\n+    /// This is used during upvar analysis and a few other places.\n+    /// Because the typeck tables are not yet complete, the results\n+    /// from the analysis must be used with caution:\n+    ///\n+    /// - rvalue promotions are not known, so the lifetimes of\n+    ///   temporaries may be overly conservative;\n+    /// - similarly, as the results of upvar analysis are not yet\n+    ///   known, the results around upvar accesses may be incorrect.\n     pub fn with_infer(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n                       region_scope_tree: &'a region::ScopeTree,\n                       tables: &'a ty::TypeckTables<'tcx>)\n                       -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n+        let tcx = infcx.tcx;\n+\n+        // Subtle: we can't do rvalue promotion analysis until the\n+        // typeck false is complete, which means that you can't trust\n+        // the rvalue lifetimes that result, but that's ok, since we\n+        // don't need to know those during type inference.\n+        let rvalue_promotable_map = None;\n+\n         MemCategorizationContext {\n-            tcx: infcx.tcx,\n+            tcx,\n             region_scope_tree,\n             tables,\n+            rvalue_promotable_map,\n             infcx: Some(infcx),\n         }\n     }\n@@ -871,8 +898,9 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                            span: Span,\n                            expr_ty: Ty<'tcx>)\n                            -> cmt<'tcx> {\n-        let promotable = self.tcx.rvalue_promotable_to_static.borrow().get(&id).cloned()\n-                                   .unwrap_or(false);\n+        let hir_id = self.tcx.hir.node_to_hir_id(id);\n+        let promotable = self.rvalue_promotable_map.as_ref().map(|m| m[&hir_id.local_id])\n+                                                            .unwrap_or(false);\n \n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n@@ -887,7 +915,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let re = if promotable {\n             self.tcx.types.re_static\n         } else {\n-            self.temporary_scope(self.tcx.hir.node_to_hir_id(id).local_id)\n+            self.temporary_scope(hir_id.local_id)\n         };\n         let ret = self.cat_rvalue(id, span, re, expr_ty);\n         debug!(\"cat_rvalue_node ret {:?}\", ret);"}, {"sha": "3ba7dc68f9b0c4cf02c3ec7ec87b7a7c3104fd94", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -904,9 +904,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Merge this with `selection_cache`?\n     pub evaluation_cache: traits::EvaluationCache<'tcx>,\n \n-    /// Maps Expr NodeId's to `true` iff `&expr` can have 'static lifetime.\n-    pub rvalue_promotable_to_static: RefCell<NodeMap<bool>>,\n-\n     /// The definite name of the current crate after taking into account\n     /// attributes, commandline parameters, etc.\n     pub crate_name: Symbol,\n@@ -1178,7 +1175,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             normalized_cache: RefCell::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n-            rvalue_promotable_to_static: RefCell::new(NodeMap()),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n             layout_interner: RefCell::new(FxHashSet()),"}, {"sha": "2279dff1335fee49f666e4d1b1b53f813e94efdd", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -29,7 +29,12 @@ pub(super) trait QueryDescription: QueryConfig {\n \n impl<M: QueryConfig<Key=DefId>> QueryDescription for M {\n     default fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n-        format!(\"processing `{}`\", tcx.item_path_str(def_id))\n+        if !tcx.sess.verbose() {\n+            format!(\"processing `{}`\", tcx.item_path_str(def_id))\n+        } else {\n+            let name = unsafe { ::std::intrinsics::type_name::<M>() };\n+            format!(\"processing `{}` applied to `{:?}`\", name, def_id)\n+        }\n     }\n }\n \n@@ -214,6 +219,13 @@ impl<'tcx> QueryDescription for queries::const_is_rvalue_promotable_to_static<'t\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::rvalue_promotable_map<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"checking which parts of `{}` are promotable to static\",\n+                tcx.item_path_str(def_id))\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::is_mir_available<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"checking if item is mir available: `{}`\","}, {"sha": "07807429bfb38b0615859658e0e120bdba829576", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -37,7 +37,7 @@ use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::layout::{Layout, LayoutError};\n use ty::steal::Steal;\n use ty::subst::Substs;\n-use util::nodemap::{DefIdSet, DefIdMap};\n+use util::nodemap::{DefIdSet, DefIdMap, ItemLocalMap};\n use util::common::{profq_msg, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -228,6 +228,7 @@ define_maps! { <'tcx>\n     [] fn is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n     [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n+    [] fn rvalue_promotable_map: RvaluePromotableMap(DefId) -> Rc<ItemLocalMap<bool>>,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n     [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n                           -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>,"}, {"sha": "266fe406d012e1435aba92c94e07cbdd2c190afe", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -206,7 +206,13 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         all_loans,\n         param_env,\n     };\n-    euv::ExprUseVisitor::new(&mut clcx, bccx.tcx, param_env, &bccx.region_scope_tree, bccx.tables)\n+    let rvalue_promotable_map = bccx.tcx.rvalue_promotable_map(def_id);\n+    euv::ExprUseVisitor::new(&mut clcx,\n+                             bccx.tcx,\n+                             param_env,\n+                             &bccx.region_scope_tree,\n+                             bccx.tables,\n+                             Some(rvalue_promotable_map))\n         .consume_body(body);\n }\n "}, {"sha": "859f32f5bfc7f23c428ef6a2400b1e8ab3fe7e76", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -48,7 +48,13 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         move_error_collector: move_error::MoveErrorCollector::new(),\n     };\n \n-    euv::ExprUseVisitor::new(&mut glcx, bccx.tcx, param_env, &bccx.region_scope_tree, bccx.tables)\n+    let rvalue_promotable_map = bccx.tcx.rvalue_promotable_map(def_id);\n+    euv::ExprUseVisitor::new(&mut glcx,\n+                             bccx.tcx,\n+                             param_env,\n+                             &bccx.region_scope_tree,\n+                             bccx.tables,\n+                             Some(rvalue_promotable_map))\n         .consume_body(bccx.body);\n \n     glcx.report_potential_errors();"}, {"sha": "e6a04c9c57a6c05eba0cf2b049b28beb37546a67", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -526,7 +526,7 @@ fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) {\n     let mut checker = MutationChecker {\n         cx,\n     };\n-    ExprUseVisitor::new(&mut checker, cx.tcx, cx.param_env, cx.region_scope_tree, cx.tables)\n+    ExprUseVisitor::new(&mut checker, cx.tcx, cx.param_env, cx.region_scope_tree, cx.tables, None)\n         .walk_expr(guard);\n }\n "}, {"sha": "7dbf93da38598d15476770230b867dd46fe1c1d8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -38,7 +38,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{ast_validation, no_asm, loops, consts, static_recursion, hir_stats};\n+use rustc_passes::{self, ast_validation, no_asm, loops, consts, static_recursion, hir_stats};\n use rustc_const_eval::{self, check_match};\n use super::Compilation;\n use ::DefaultTransCrate;\n@@ -973,6 +973,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     traits::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_const_eval::provide(&mut local_providers);\n+    rustc_passes::provide(&mut local_providers);\n     middle::region::provide(&mut local_providers);\n     cstore::provide_local(&mut local_providers);\n     lint::provide(&mut local_providers);"}, {"sha": "722d0cad238f4f3f3eead66a3eb54e39626ce9c9", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -56,7 +56,8 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n         };\n \n         let lazy_body = self.lazy(body);\n-        let tables = self.tcx.body_tables(body_id);\n+        let body_owner_def_id = self.tcx.hir.body_owner_def_id(body_id);\n+        let tables = self.tcx.typeck_tables_of(body_owner_def_id);\n         let lazy_tables = self.lazy(tables);\n \n         let mut visitor = NestedBodyCollector {\n@@ -67,7 +68,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n         let lazy_nested_bodies = self.lazy_seq_ref_from_slice(&visitor.bodies_found);\n \n         let rvalue_promotable_to_static =\n-            self.tcx.rvalue_promotable_to_static.borrow()[&body.value.id];\n+            self.tcx.const_is_rvalue_promotable_to_static(body_owner_def_id);\n \n         self.lazy(&Ast {\n             body: lazy_body,"}, {"sha": "d3202ba4ab53548bad0e0353c30e1eb62ef8e80d", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 70, "deletions": 33, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -39,37 +39,79 @@ use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::maps::{queries, Providers};\n use rustc::ty::subst::Substs;\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n-use rustc::util::nodemap::NodeSet;\n+use rustc::util::nodemap::{ItemLocalMap, NodeSet};\n use rustc::lint::builtin::CONST_ERR;\n-\n use rustc::hir::{self, PatKind, RangeEnd};\n+use std::rc::Rc;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n \n-use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n \n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        rvalue_promotable_map,\n+        const_is_rvalue_promotable_to_static,\n+        ..*providers\n+    };\n+}\n+\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &body_id in &tcx.hir.krate().body_ids {\n-        let visitor = &mut CheckCrateVisitor {\n-            tcx,\n-            tables: &ty::TypeckTables::empty(None),\n-            in_fn: false,\n-            in_static: false,\n-            promotable: false,\n-            mut_rvalue_borrows: NodeSet(),\n-            param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n-            identity_substs: Substs::empty(),\n-        };\n-        visitor.visit_nested_body(body_id);\n+        let def_id = tcx.hir.body_owner_def_id(body_id);\n+        tcx.const_is_rvalue_promotable_to_static(def_id);\n     }\n     tcx.sess.abort_if_errors();\n }\n \n+fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                  def_id: DefId)\n+                                                  -> bool\n+{\n+    assert!(def_id.is_local());\n+\n+    let node_id = tcx.hir.as_local_node_id(def_id)\n+                     .expect(\"rvalue_promotable_map invoked with non-local def-id\");\n+    let body_id = tcx.hir.body_owned_by(node_id);\n+    let body_hir_id = tcx.hir.node_to_hir_id(body_id.node_id);\n+    tcx.rvalue_promotable_map(def_id).contains_key(&body_hir_id.local_id)\n+}\n+\n+fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   def_id: DefId)\n+                                   -> Rc<ItemLocalMap<bool>>\n+{\n+    let outer_def_id = tcx.closure_base_def_id(def_id);\n+    if outer_def_id != def_id {\n+        return tcx.rvalue_promotable_map(outer_def_id);\n+    }\n+\n+    let mut visitor = CheckCrateVisitor {\n+        tcx,\n+        tables: &ty::TypeckTables::empty(None),\n+        in_fn: false,\n+        in_static: false,\n+        promotable: false,\n+        mut_rvalue_borrows: NodeSet(),\n+        param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+        identity_substs: Substs::empty(),\n+        result_map: ItemLocalMap(),\n+    };\n+\n+    // `def_id` should be a `Body` owner\n+    let node_id = tcx.hir.as_local_node_id(def_id)\n+                     .expect(\"rvalue_promotable_map invoked with non-local def-id\");\n+    let body_id = tcx.hir.body_owned_by(node_id);\n+    visitor.visit_nested_body(body_id);\n+\n+    Rc::new(visitor.result_map)\n+}\n+\n struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     in_fn: bool,\n@@ -79,6 +121,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: &'tcx Substs<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    result_map: ItemLocalMap<bool>,\n }\n \n impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n@@ -126,18 +169,11 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        // note that we *do* visit nested bodies, because we override `visit_nested_body` below\n         NestedVisitorMap::None\n     }\n \n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n-        match self.tcx.rvalue_promotable_to_static.borrow_mut().entry(body_id.node_id) {\n-            Entry::Occupied(_) => return,\n-            Entry::Vacant(entry) => {\n-                // Prevent infinite recursion on re-entry.\n-                entry.insert(false);\n-            }\n-        }\n-\n         let item_id = self.tcx.hir.body_owner(body_id);\n         let item_def_id = self.tcx.hir.local_def_id(item_id);\n \n@@ -168,7 +204,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         let tcx = self.tcx;\n         let param_env = self.param_env;\n         let region_scope_tree = self.tcx.region_scope_tree(item_def_id);\n-        euv::ExprUseVisitor::new(self, tcx, param_env, &region_scope_tree, self.tables)\n+        euv::ExprUseVisitor::new(self, tcx, param_env, &region_scope_tree, self.tables, None)\n             .consume_body(body);\n \n         self.visit_body(body);\n@@ -287,7 +323,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             }\n         }\n \n-        self.tcx.rvalue_promotable_to_static.borrow_mut().insert(ex.id, self.promotable);\n+        self.result_map.insert(ex.hir_id.local_id, self.promotable);\n         self.promotable &= outer;\n     }\n }\n@@ -388,16 +424,17 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n                     let promotable = if v.tcx.trait_of_item(did).is_some() {\n                         // Don't peek inside trait associated constants.\n                         false\n-                    } else if let Some(node_id) = v.tcx.hir.as_local_node_id(did) {\n-                        match v.tcx.hir.maybe_body_owned_by(node_id) {\n-                            Some(body) => {\n-                                v.visit_nested_body(body);\n-                                v.tcx.rvalue_promotable_to_static.borrow()[&body.node_id]\n-                            }\n-                            None => false\n-                        }\n                     } else {\n-                        v.tcx.const_is_rvalue_promotable_to_static(did)\n+                        queries::const_is_rvalue_promotable_to_static::try_get(v.tcx, e.span, did)\n+                            .unwrap_or_else(|mut err| {\n+                                // A cycle between constants ought to be reported elsewhere.\n+                                err.cancel();\n+                                v.tcx.sess.delay_span_bug(\n+                                    e.span,\n+                                    &format!(\"cycle encountered during const qualification: {:?}\",\n+                                             did));\n+                                false\n+                            })\n                     };\n \n                     // Just in case the type is more specific than the definition,"}, {"sha": "9a150abea6691dd912aef649541dec6584df16f4", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f568e2f347f27c72ca5853a7b13aa599c31b612/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=0f568e2f347f27c72ca5853a7b13aa599c31b612", "patch": "@@ -33,6 +33,8 @@ extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n \n+use rustc::ty::maps::Providers;\n+\n mod diagnostics;\n \n pub mod ast_validation;\n@@ -44,3 +46,7 @@ pub mod no_asm;\n pub mod static_recursion;\n \n __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n+\n+pub fn provide(providers: &mut Providers) {\n+    consts::provide(providers);\n+}"}]}