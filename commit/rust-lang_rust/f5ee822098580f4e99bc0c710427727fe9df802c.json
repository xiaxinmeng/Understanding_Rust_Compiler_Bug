{"sha": "f5ee822098580f4e99bc0c710427727fe9df802c", "node_id": "C_kwDOAAsO6NoAKGY1ZWU4MjIwOTg1ODBmNGU5OWJjMGM3MTA0Mjc3MjdmZTlkZjgwMmM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-25T23:50:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-31T07:58:36Z"}, "message": "rustdoc: Fix resolution of `crate`-relative paths in doc links", "tree": {"sha": "10242b1e15a3988b6cee4f073607f4b0c6bd8238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10242b1e15a3988b6cee4f073607f4b0c6bd8238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ee822098580f4e99bc0c710427727fe9df802c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ee822098580f4e99bc0c710427727fe9df802c", "html_url": "https://github.com/rust-lang/rust/commit/f5ee822098580f4e99bc0c710427727fe9df802c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ee822098580f4e99bc0c710427727fe9df802c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1", "html_url": "https://github.com/rust-lang/rust/commit/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "082da70be3969a16dba130a35fb714d141e0175f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -3285,12 +3285,21 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         path_str: &str,\n         ns: Namespace,\n-        module_id: DefId,\n+        mut module_id: DefId,\n     ) -> Option<Res> {\n         let mut segments =\n             Vec::from_iter(path_str.split(\"::\").map(Ident::from_str).map(Segment::from_ident));\n-        if path_str.starts_with(\"::\") {\n-            segments[0].ident.name = kw::PathRoot;\n+        if let Some(segment) = segments.first_mut() {\n+            if segment.ident.name == kw::Crate {\n+                // FIXME: `resolve_path` always resolves `crate` to the current crate root, but\n+                // rustdoc wants it to resolve to the `module_id`'s crate root. This trick of\n+                // replacing `crate` with `self` and changing the current module should achieve\n+                // the same effect.\n+                segment.ident.name = kw::SelfLower;\n+                module_id = module_id.krate.as_def_id();\n+            } else if segment.ident.name == kw::Empty {\n+                segment.ident.name = kw::PathRoot;\n+            }\n         }\n \n         let module = self.expect_module(module_id);"}, {"sha": "e19920cc2ceb6975d7fd6a6be586a35a4656eabc", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::{\n     Namespace::{self, *},\n     PerNS,\n };\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::Mutability;\n use rustc_middle::ty::{DefIdTree, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug, ty};\n@@ -1043,16 +1043,11 @@ impl<'a, 'tcx> DocVisitor for LinkCollector<'a, 'tcx> {\n         // so we know which module it came from.\n         for (parent_module, doc) in item.attrs.collapsed_doc_value_by_module_level() {\n             debug!(\"combined_docs={}\", doc);\n-\n-            let (krate, parent_node) = if let Some(id) = parent_module {\n-                (id.krate, Some(id))\n-            } else {\n-                (item.def_id.krate(), parent_node)\n-            };\n             // NOTE: if there are links that start in one crate and end in another, this will not resolve them.\n             // This is a degenerate case and it's not supported by rustdoc.\n+            let parent_node = parent_module.or(parent_node);\n             for md_link in markdown_links(&doc) {\n-                let link = self.resolve_link(&item, &doc, parent_node, krate, md_link);\n+                let link = self.resolve_link(&item, &doc, parent_node, md_link);\n                 if let Some(link) = link {\n                     self.cx.cache.intra_doc_links.entry(item.def_id).or_default().push(link);\n                 }\n@@ -1187,7 +1182,6 @@ impl LinkCollector<'_, '_> {\n         item: &Item,\n         dox: &str,\n         parent_node: Option<DefId>,\n-        krate: CrateNum,\n         ori_link: MarkdownLink,\n     ) -> Option<ItemLink> {\n         trace!(\"considering link '{}'\", ori_link.link);\n@@ -1199,7 +1193,7 @@ impl LinkCollector<'_, '_> {\n             link_range: ori_link.range.clone(),\n         };\n \n-        let PreprocessingInfo { path_str, disambiguator, extra_fragment, link_text } =\n+        let PreprocessingInfo { ref path_str, disambiguator, extra_fragment, link_text } =\n             match preprocess_link(&ori_link)? {\n                 Ok(x) => x,\n                 Err(err) => {\n@@ -1221,7 +1215,6 @@ impl LinkCollector<'_, '_> {\n                     return None;\n                 }\n             };\n-        let mut path_str = &*path_str;\n \n         let inner_docs = item.inner_docs(self.cx.tcx);\n \n@@ -1239,7 +1232,7 @@ impl LinkCollector<'_, '_> {\n         let base_node =\n             if item.is_mod() && inner_docs { self.mod_ids.last().copied() } else { parent_node };\n \n-        let Some(mut module_id) = base_node else {\n+        let Some(module_id) = base_node else {\n             // This is a bug.\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n             resolution_failure(\n@@ -1252,26 +1245,6 @@ impl LinkCollector<'_, '_> {\n             return None;\n         };\n \n-        let resolved_self;\n-        let is_lone_crate = path_str == \"crate\";\n-        if path_str.starts_with(\"crate::\") || is_lone_crate {\n-            use rustc_span::def_id::CRATE_DEF_INDEX;\n-\n-            // HACK(jynelson): rustc_resolve thinks that `crate` is the crate currently being documented.\n-            // But rustdoc wants it to mean the crate this item was originally present in.\n-            // To work around this, remove it and resolve relative to the crate root instead.\n-            // HACK(jynelson)(2): If we just strip `crate::` then suddenly primitives become ambiguous\n-            // (consider `crate::char`). Instead, change it to `self::`. This works because 'self' is now the crate root.\n-            // FIXME(#78696): This doesn't always work.\n-            if is_lone_crate {\n-                path_str = \"self\";\n-            } else {\n-                resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n-                path_str = &resolved_self;\n-            }\n-            module_id = DefId { krate, index: CRATE_DEF_INDEX };\n-        }\n-\n         let (mut res, fragment) = self.resolve_with_disambiguator_cached(\n             ResolutionInfo {\n                 item_id: item.def_id,"}, {"sha": "39900270ccb6dfe8a6543a5c9208600df7aba49a", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -32,11 +32,6 @@ crate fn early_resolve_intra_doc_links(\n         all_trait_impls: Default::default(),\n     };\n \n-    // Because of the `crate::` prefix, any doc comment can reference\n-    // the crate root's set of in-scope traits. This line makes sure\n-    // it's available.\n-    loader.add_traits_in_scope(CRATE_DEF_ID.to_def_id());\n-\n     // Overridden `visit_item` below doesn't apply to the crate root,\n     // so we have to visit its attributes and reexports separately.\n     loader.load_links_in_attrs(&krate.attrs);\n@@ -105,9 +100,6 @@ impl IntraLinkCrateLoader<'_, '_> {\n     /// having impls in them.\n     fn add_foreign_traits_in_scope(&mut self) {\n         for cnum in Vec::from_iter(self.resolver.cstore().crates_untracked()) {\n-            // FIXME: Due to #78696 rustdoc can query traits in scope for any crate root.\n-            self.add_traits_in_scope(cnum.as_def_id());\n-\n             let all_traits = Vec::from_iter(self.resolver.cstore().traits_in_crate_untracked(cnum));\n             let all_trait_impls =\n                 Vec::from_iter(self.resolver.cstore().trait_impls_in_crate_untracked(cnum));"}, {"sha": "ceecfa6816c1ed04cacaa497d95e0e0c22ecb72f", "filename": "src/test/rustdoc-ui/intra-doc/crate-nonexistent.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.rs?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -0,0 +1,5 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+/// [crate::DoesNotExist]\n+//~^ ERROR unresolved link to `crate::DoesNotExist`\n+pub struct Item;"}, {"sha": "a69b1c52ac55757411747bc2ca851f8288cb483d", "filename": "src/test/rustdoc-ui/intra-doc/crate-nonexistent.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fcrate-nonexistent.stderr?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -0,0 +1,14 @@\n+error: unresolved link to `crate::DoesNotExist`\n+  --> $DIR/crate-nonexistent.rs:3:6\n+   |\n+LL | /// [crate::DoesNotExist]\n+   |      ^^^^^^^^^^^^^^^^^^^ no item named `DoesNotExist` in module `crate_nonexistent`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/crate-nonexistent.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d4a0ecc35aeafbd58ab2274fd925448d32a227cd", "filename": "src/test/rustdoc/intra-doc/crate-relative-assoc.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ee822098580f4e99bc0c710427727fe9df802c/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative-assoc.rs?ref=f5ee822098580f4e99bc0c710427727fe9df802c", "patch": "@@ -0,0 +1,17 @@\n+pub mod io {\n+    pub trait Read {\n+        fn read(&mut self);\n+    }\n+}\n+\n+pub mod bufreader {\n+    // @has crate_relative_assoc/bufreader/index.html '//a/@href' 'struct.TcpStream.html#method.read'\n+    //! [`crate::TcpStream::read`]\n+    use crate::io::Read;\n+}\n+\n+pub struct TcpStream;\n+\n+impl crate::io::Read for TcpStream {\n+    fn read(&mut self) {}\n+}"}]}