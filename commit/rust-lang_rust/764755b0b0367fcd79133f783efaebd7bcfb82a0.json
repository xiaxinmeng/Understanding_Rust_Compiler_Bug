{"sha": "764755b0b0367fcd79133f783efaebd7bcfb82a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDc1NWIwYjAzNjdmY2Q3OTEzM2Y3ODNlZmFlYmQ3YmNmYjgyYTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-14T15:59:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T15:59:11Z"}, "message": "Rollup merge of #53239 - cuviper:llvm5-closure-alloca, r=eddyb\n\nrustc_codegen_llvm: Restore the closure env alloca hack for LLVM 5.\n\nThis hack was removed in #50949, but without it I found that building\n`std` with full debuginfo would print many LLVM `DW_OP_LLVM_fragment`\nerrors, then die `LLVM ERROR: Failed to strip malformed debug info`.\n\nIt doesn't seem to be a problem for LLVM 6, so we can re-enable the hack\njust for older LLVM.\n\nThis reverts commit da579ef75e4a8ca11fb98b24a0a3ea0c7ccffeeb.\nFixes #53204.\nr? @eddyb", "tree": {"sha": "a8eabadf27afbb822215238618fd30ad9381b986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8eabadf27afbb822215238618fd30ad9381b986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764755b0b0367fcd79133f783efaebd7bcfb82a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcvxPCRBK7hj4Ov3rIwAAdHIIAKsV4cHlfg0DfuJ3icA4+kgw\nuO1pv8V9yX2tg1wfkj6iQCwDG0an0exKsSyECPbkcARs4wNCWO5PysoD5os1ucCT\nBaUKCqaFngYdTU+/i9b5pNWXwhrPy+TuaMoExY4nEf4hOtRHkJ/3f1N99+GqVrvr\nOfnC9oMkBTkFXWENxoGVc61JpWk/xhhyp4hWEB6nuN3zvmmReN7XCLjKvGZKVD3j\nRtfvbK1MfvcUucaN2nd7aEIlF/n59HKRCjaiaqZqXPh1KDz1UhVHawBz50BH0MJl\nDIe/yZOX5p5kjg2B0O+rVJkNjsNRWGM9lbiUKVM9Xehganil+MB4KyD/IuboUzs=\n=oaIC\n-----END PGP SIGNATURE-----\n", "payload": "tree a8eabadf27afbb822215238618fd30ad9381b986\nparent 2ae5f64daff3f7d01ab5f6816deb899d3fd9845c\nparent 763e72110a913c7aab396a0f687e2ebd3c9e572a\nauthor kennytm <kennytm@gmail.com> 1534262351 +0800\ncommitter GitHub <noreply@github.com> 1534262351 +0800\n\nRollup merge of #53239 - cuviper:llvm5-closure-alloca, r=eddyb\n\nrustc_codegen_llvm: Restore the closure env alloca hack for LLVM 5.\n\nThis hack was removed in #50949, but without it I found that building\n`std` with full debuginfo would print many LLVM `DW_OP_LLVM_fragment`\nerrors, then die `LLVM ERROR: Failed to strip malformed debug info`.\n\nIt doesn't seem to be a problem for LLVM 6, so we can re-enable the hack\njust for older LLVM.\n\nThis reverts commit da579ef75e4a8ca11fb98b24a0a3ea0c7ccffeeb.\nFixes #53204.\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764755b0b0367fcd79133f783efaebd7bcfb82a0", "html_url": "https://github.com/rust-lang/rust/commit/764755b0b0367fcd79133f783efaebd7bcfb82a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764755b0b0367fcd79133f783efaebd7bcfb82a0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae5f64daff3f7d01ab5f6816deb899d3fd9845c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae5f64daff3f7d01ab5f6816deb899d3fd9845c", "html_url": "https://github.com/rust-lang/rust/commit/2ae5f64daff3f7d01ab5f6816deb899d3fd9845c"}, {"sha": "763e72110a913c7aab396a0f687e2ebd3c9e572a", "url": "https://api.github.com/repos/rust-lang/rust/commits/763e72110a913c7aab396a0f687e2ebd3c9e572a", "html_url": "https://github.com/rust-lang/rust/commit/763e72110a913c7aab396a0f687e2ebd3c9e572a"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "8bb049be30549a237b68b2703767e3d3a61af013", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/764755b0b0367fcd79133f783efaebd7bcfb82a0/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764755b0b0367fcd79133f783efaebd7bcfb82a0/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=764755b0b0367fcd79133f783efaebd7bcfb82a0", "patch": "@@ -574,6 +574,25 @@ fn arg_local_refs(\n             };\n             let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n+            // Store the pointer to closure data in an alloca for debuginfo\n+            // because that's what the llvm.dbg.declare intrinsic expects.\n+\n+            // FIXME(eddyb) this shouldn't be necessary but SROA seems to\n+            // mishandle DW_OP_plus not preceded by DW_OP_deref, i.e. it\n+            // doesn't actually strip the offset when splitting the closure\n+            // environment into its components so it ends up out of bounds.\n+            // (cuviper) It seems to be fine without the alloca on LLVM 6 and later.\n+            let env_alloca = !env_ref && unsafe { llvm::LLVMRustVersionMajor() < 6 };\n+            let env_ptr = if env_alloca {\n+                let scratch = PlaceRef::alloca(bx,\n+                    bx.cx.layout_of(tcx.mk_mut_ptr(arg.layout.ty)),\n+                    \"__debuginfo_env_ptr\");\n+                bx.store(place.llval, scratch.llval, scratch.align);\n+                scratch.llval\n+            } else {\n+                place.llval\n+            };\n+\n             for (i, (decl, ty)) in mir.upvar_decls.iter().zip(upvar_tys).enumerate() {\n                 let byte_offset_of_var_in_env = closure_layout.fields.offset(i).bytes();\n \n@@ -585,7 +604,10 @@ fn arg_local_refs(\n                 };\n \n                 // The environment and the capture can each be indirect.\n-                let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n+\n+                // FIXME(eddyb) see above why we sometimes have to keep\n+                // a pointer in an alloca for debuginfo atm.\n+                let mut ops = if env_ref || env_alloca { &ops[..] } else { &ops[1..] };\n \n                 let ty = if let (true, &ty::TyRef(_, ty, _)) = (decl.by_ref, &ty.sty) {\n                     ty\n@@ -595,7 +617,7 @@ fn arg_local_refs(\n                 };\n \n                 let variable_access = VariableAccess::IndirectVariable {\n-                    alloca: place.llval,\n+                    alloca: env_ptr,\n                     address_operations: &ops\n                 };\n                 declare_local("}]}