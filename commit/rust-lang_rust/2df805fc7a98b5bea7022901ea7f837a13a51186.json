{"sha": "2df805fc7a98b5bea7022901ea7f837a13a51186", "node_id": "C_kwDOAAsO6NoAKDJkZjgwNWZjN2E5OGI1YmVhNzAyMjkwMWVhN2Y4MzdhMTNhNTExODY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T02:02:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T05:06:44Z"}, "message": "Store blocks in `Thir`.\n\nLike expressions, statements, and match arms. This shrinks `thir::Stmt`\nand is a precursor to further shrinking `thir::Expr`.", "tree": {"sha": "e8255755b38b2a167bfc7918f74530ba41272a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8255755b38b2a167bfc7918f74530ba41272a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df805fc7a98b5bea7022901ea7f837a13a51186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df805fc7a98b5bea7022901ea7f837a13a51186", "html_url": "https://github.com/rust-lang/rust/commit/2df805fc7a98b5bea7022901ea7f837a13a51186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df805fc7a98b5bea7022901ea7f837a13a51186/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "html_url": "https://github.com/rust-lang/rust/commit/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0"}], "stats": {"total": 113, "additions": 66, "deletions": 47}, "files": [{"sha": "b55268d07526f6faeea4b104a0b721ab97fe94b1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -75,6 +75,7 @@ macro_rules! thir_with_elements {\n \n thir_with_elements! {\n     arms: ArmId => Arm<'tcx> => \"a{}\",\n+    blocks: BlockId => Block => \"b{}\",\n     exprs: ExprId => Expr<'tcx> => \"e{}\",\n     stmts: StmtId => Stmt<'tcx> => \"s{}\",\n }\n@@ -168,7 +169,7 @@ pub enum StmtKind<'tcx> {\n         initializer: Option<ExprId>,\n \n         /// `let pat: ty = <INIT> else { <ELSE> }\n-        else_block: Option<Block>,\n+        else_block: Option<BlockId>,\n \n         /// The lint level for this `let` statement.\n         lint_level: LintLevel,\n@@ -292,7 +293,7 @@ pub enum ExprKind<'tcx> {\n     },\n     /// A block.\n     Block {\n-        body: Block,\n+        block: BlockId,\n     },\n     /// An assignment: `lhs = rhs`.\n     Assign {\n@@ -802,5 +803,5 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 88);\n     static_assert_size!(Pat<'_>, 24);\n-    static_assert_size!(Stmt<'_>, 120);\n+    static_assert_size!(Stmt<'_>, 72);\n }"}, {"sha": "758a42ea320f83ce30386a5579612bd5d37dc5d9", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -75,7 +75,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 visitor.visit_arm(&visitor.thir()[arm]);\n             }\n         }\n-        Block { ref body } => visitor.visit_block(body),\n+        Block { block } => visitor.visit_block(&visitor.thir()[block]),\n         Assign { lhs, rhs } | AssignOp { lhs, rhs, op: _ } => {\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[rhs]);\n@@ -174,7 +174,7 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             }\n             visitor.visit_pat(pattern);\n             if let Some(block) = else_block {\n-                visitor.visit_block(block)\n+                visitor.visit_block(&visitor.thir()[*block])\n             }\n         }\n     }"}, {"sha": "09045ef63a12b0783189f1ce42712c5103e88b68", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -10,7 +10,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         destination: Place<'tcx>,\n         block: BasicBlock,\n-        ast_block: &Block,\n+        ast_block: BlockId,\n         source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n         let Block {\n@@ -21,7 +21,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             expr,\n             targeted_by_break,\n             safety_mode,\n-        } = *ast_block;\n+        } = self.thir[ast_block];\n         let expr = expr.map(|expr| &self.thir[expr]);\n         self.in_opt_scope(opt_destruction_scope.map(|de| (de, source_info)), move |this| {\n             this.in_scope((region_scope, source_info), LintLevel::Inherited, move |this| {\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 block,\n                                                 init,\n                                                 initializer_span,\n-                                                else_block,\n+                                                *else_block,\n                                                 visibility_scope,\n                                                 *remainder_scope,\n                                                 remainder_span,"}, {"sha": "e5dafb820bf8dad745f0c2227b732a468a5d45fb", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -83,8 +83,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Don't bother with StorageLive and Dead for these temporaries,\n             // they are never assigned.\n             ExprKind::Break { .. } | ExprKind::Continue { .. } | ExprKind::Return { .. } => (),\n-            ExprKind::Block { body: Block { expr: None, targeted_by_break: false, .. } }\n-                if expr_ty.is_never() => {}\n+            ExprKind::Block { block }\n+                if let Block { expr: None, targeted_by_break: false, .. } = this.thir[block]\n+                    && expr_ty.is_never() => {}\n             _ => {\n                 this.cfg\n                     .push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });"}, {"sha": "1e35167fce2791b1a4a04bb1c5b7c16818e0ef00", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 })\n             }\n-            ExprKind::Block { body: ref ast_block } => {\n+            ExprKind::Block { block: ast_block } => {\n                 this.ast_block(destination, block, ast_block, source_info)\n             }\n             ExprKind::Match { scrutinee, ref arms } => {"}, {"sha": "00dbcaeb0c96f98866bdfc7a466d90785340d5df", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -116,14 +116,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n                 let adjusted_span = (|| {\n-                    if let ExprKind::Block { body } = &expr.kind && let Some(tail_ex) = body.expr {\n+                    if let ExprKind::Block { block } = expr.kind\n+                        && let Some(tail_ex) = this.thir[block].expr\n+                    {\n                         let mut expr = &this.thir[tail_ex];\n-                        while let ExprKind::Block {\n-                            body: Block { expr: Some(nested_expr), .. },\n-                        }\n-                        | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n-                        {\n-                            expr = &this.thir[nested_expr];\n+                        loop {\n+                            match expr.kind {\n+                                ExprKind::Block { block }\n+                                    if let Some(nested_expr) = this.thir[block].expr =>\n+                                {\n+                                    expr = &this.thir[nested_expr];\n+                                }\n+                                ExprKind::Scope { value: nested_expr, .. } => {\n+                                    expr = &this.thir[nested_expr];\n+                                }\n+                                _ => break,\n+                            }\n                         }\n                         this.block_context.push(BlockFrame::TailExpr {\n                             tail_result_is_ignored: true,"}, {"sha": "080dab0303166ea9747f5fce80ab106f5e43d134", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -2280,15 +2280,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n         init: &Expr<'tcx>,\n         initializer_span: Span,\n-        else_block: &Block,\n+        else_block: BlockId,\n         visibility_scope: Option<SourceScope>,\n         remainder_scope: region::Scope,\n         remainder_span: Span,\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<()> {\n+        let else_block_span = self.thir[else_block].span;\n         let (matching, failure) = self.in_if_then_scope(remainder_scope, |this| {\n             let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n-            let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+            let pat = Pat { ty: init.ty, span: else_block_span, kind: Box::new(PatKind::Wild) };\n             let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n             this.declare_bindings(\n                 visibility_scope,\n@@ -2318,7 +2319,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             );\n             // This block is for the failure case\n             let failure = this.bind_pattern(\n-                this.source_info(else_block.span),\n+                this.source_info(else_block_span),\n                 wildcard,\n                 None,\n                 &fake_borrow_temps,\n@@ -2334,19 +2335,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block.\n-        let dummy_place = self.temp(self.tcx.types.never, else_block.span);\n+        let dummy_place = self.temp(self.tcx.types.never, else_block_span);\n         let failure_block;\n         unpack!(\n             failure_block = self.ast_block(\n                 dummy_place,\n                 failure,\n                 else_block,\n-                self.source_info(else_block.span),\n+                self.source_info(else_block_span),\n             )\n         );\n         self.cfg.terminate(\n             failure_block,\n-            self.source_info(else_block.span),\n+            self.source_info(else_block_span),\n             TerminatorKind::Unreachable,\n         );\n         matching.unit()"}, {"sha": "54c4b9eda70dc16a8115c1a0a9ff8334ed383466", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -9,13 +9,13 @@ use rustc_index::vec::Idx;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'tcx> Cx<'tcx> {\n-    pub(crate) fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> Block {\n+    pub(crate) fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> BlockId {\n         // We have to eagerly lower the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = self.mirror_stmts(block.hir_id.local_id, block.stmts);\n         let opt_destruction_scope =\n             self.region_scope_tree.opt_destruction_scope(block.hir_id.local_id);\n-        Block {\n+        let block = Block {\n             targeted_by_break: block.targeted_by_break,\n             region_scope: region::Scope {\n                 id: block.hir_id.local_id,\n@@ -34,7 +34,9 @@ impl<'tcx> Cx<'tcx> {\n                     BlockSafety::ExplicitUnsafe(block.hir_id)\n                 }\n             },\n-        }\n+        };\n+\n+        self.thir.blocks.push(block)\n     }\n \n     fn mirror_stmts("}, {"sha": "5e1f1c8e84e818bb07270ec425cb9900a70aa88a", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -108,8 +108,8 @@ impl<'tcx> Cx<'tcx> {\n         //   // ^ error message points at this expression.\n         // }\n         let mut adjust_span = |expr: &mut Expr<'tcx>| {\n-            if let ExprKind::Block { body } = &expr.kind {\n-                if let Some(last_expr) = body.expr {\n+            if let ExprKind::Block { block } = expr.kind {\n+                if let Some(last_expr) = self.thir[block].expr {\n                     span = self.thir[last_expr].span;\n                     expr.span = span;\n                 }\n@@ -369,7 +369,7 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }\n             }\n \n-            hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },\n+            hir::ExprKind::Block(ref blk, _) => ExprKind::Block { block: self.mirror_block(blk) },\n \n             hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }\n@@ -680,8 +680,8 @@ impl<'tcx> Cx<'tcx> {\n                 let body = self.thir.exprs.push(Expr {\n                     ty: block_ty,\n                     temp_lifetime,\n-                    span: block.span,\n-                    kind: ExprKind::Block { body: block },\n+                    span: self.thir[block].span,\n+                    kind: ExprKind::Block { block },\n                 });\n                 ExprKind::Loop { body }\n             }"}, {"sha": "e8ce8e6f23ec9eb608eb24c76c386b7b445dfb47", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -311,8 +311,15 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             //     bar::<{ N + 1 }>();\n             // }\n             // ```\n-            ExprKind::Block { body: thir::Block { stmts: box [], expr: Some(e), .. } } => {\n-                self.recurse_build(*e)?\n+            ExprKind::Block { block } => {\n+                if let thir::Block { stmts: box [], expr: Some(e), .. } = &self.body.blocks[*block] {\n+                    self.recurse_build(*e)?\n+                } else {\n+                    self.maybe_supported_error(\n+                        node.span,\n+                        \"blocks are not supported in generic constant\",\n+                    )?\n+                }\n             }\n             // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n@@ -349,10 +356,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 node.span,\n                 \"array construction is not supported in generic constants\",\n             )?,\n-            ExprKind::Block { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"blocks are not supported in generic constant\",\n-            )?,\n             ExprKind::NeverToAny { .. } => self.maybe_supported_error(\n                 node.span,\n                 \"converting nevers to any is not supported in generic constant\","}, {"sha": "960b7f7f4ddea5739f9b6918f0011c96912995f9", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2df805fc7a98b5bea7022901ea7f837a13a51186/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2df805fc7a98b5bea7022901ea7f837a13a51186/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=2df805fc7a98b5bea7022901ea7f837a13a51186", "patch": "@@ -1,6 +1,17 @@\n DefId(0:3 ~ thir_tree[8f1d]::main):\n Thir {\n     arms: [],\n+    blocks: [\n+        Block {\n+            targeted_by_break: false,\n+            region_scope: Node(1),\n+            opt_destruction_scope: None,\n+            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            stmts: [],\n+            expr: None,\n+            safety_mode: Safe,\n+        },\n+    ],\n     exprs: [\n         Expr {\n             ty: (),\n@@ -9,15 +20,7 @@ Thir {\n             ),\n             span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n             kind: Block {\n-                body: Block {\n-                    targeted_by_break: false,\n-                    region_scope: Node(1),\n-                    opt_destruction_scope: None,\n-                    span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n-                    stmts: [],\n-                    expr: None,\n-                    safety_mode: Safe,\n-                },\n+                block: b0,\n             },\n         },\n         Expr {"}]}