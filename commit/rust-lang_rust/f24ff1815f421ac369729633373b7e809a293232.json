{"sha": "f24ff1815f421ac369729633373b7e809a293232", "node_id": "C_kwDOAAsO6NoAKGYyNGZmMTgxNWY0MjFhYzM2OTcyOTYzMzM3M2I3ZTgwOWEyOTMyMzI", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-23T23:11:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-02-23T03:46:51Z"}, "message": "rustc_errors: add `downgrade_to_delayed_bug` to `Diagnostic` itself.", "tree": {"sha": "e43472d9d3a42306c0b50958ec5cb9f60ef35a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43472d9d3a42306c0b50958ec5cb9f60ef35a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f24ff1815f421ac369729633373b7e809a293232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f24ff1815f421ac369729633373b7e809a293232", "html_url": "https://github.com/rust-lang/rust/commit/f24ff1815f421ac369729633373b7e809a293232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f24ff1815f421ac369729633373b7e809a293232/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "html_url": "https://github.com/rust-lang/rust/commit/5bd1ec3283874b97b27da4539b2950fbd01c4b0e"}], "stats": {"total": 177, "additions": 129, "deletions": 48}, "files": [{"sha": "7679b7eb2dd4220f9add25d4f25a307ebfbb3e9a", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -1709,7 +1709,7 @@ impl Emitter for SharedEmitter {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: diag.message(),\n             code: diag.code.clone(),\n-            lvl: diag.level,\n+            lvl: diag.level(),\n         })));\n         for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {"}, {"sha": "2835afb020854ce6ec610bca0b7a4243534af446", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -66,7 +66,9 @@ fn source_string(file: Lrc<SourceFile>, line: &Line) -> String {\n /// Maps `Diagnostic::Level` to `snippet::AnnotationType`\n fn annotation_type_for_level(level: Level) -> AnnotationType {\n     match level {\n-        Level::Bug | Level::Fatal | Level::Error { .. } => AnnotationType::Error,\n+        Level::Bug | Level::DelayedBug | Level::Fatal | Level::Error { .. } => {\n+            AnnotationType::Error\n+        }\n         Level::Warning => AnnotationType::Warning,\n         Level::Note => AnnotationType::Note,\n         Level::Help => AnnotationType::Help,"}, {"sha": "f62a3567c56f5f5ddc691f2ed64ba9fcaba9bf5f", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -19,7 +19,10 @@ pub struct SuggestionsDisabled;\n #[must_use]\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct Diagnostic {\n-    pub level: Level,\n+    // NOTE(eddyb) this is private to disallow arbitrary after-the-fact changes,\n+    // outside of what methods in this crate themselves allow.\n+    crate level: Level,\n+\n     pub message: Vec<(String, Style)>,\n     pub code: Option<DiagnosticId>,\n     pub span: MultiSpan,\n@@ -117,9 +120,18 @@ impl Diagnostic {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn level(&self) -> Level {\n+        self.level\n+    }\n+\n     pub fn is_error(&self) -> bool {\n         match self.level {\n-            Level::Bug | Level::Fatal | Level::Error { .. } | Level::FailureNote => true,\n+            Level::Bug\n+            | Level::DelayedBug\n+            | Level::Fatal\n+            | Level::Error { .. }\n+            | Level::FailureNote => true,\n \n             Level::Warning | Level::Note | Level::Help | Level::Cancelled | Level::Allow => false,\n         }\n@@ -150,6 +162,33 @@ impl Diagnostic {\n         self.level == Level::Cancelled\n     }\n \n+    /// Delay emission of this diagnostic as a bug.\n+    ///\n+    /// This can be useful in contexts where an error indicates a bug but\n+    /// typically this only happens when other compilation errors have already\n+    /// happened. In those cases this can be used to defer emission of this\n+    /// diagnostic as a bug in the compiler only if no other errors have been\n+    /// emitted.\n+    ///\n+    /// In the meantime, though, callsites are required to deal with the \"bug\"\n+    /// locally in whichever way makes the most sense.\n+    #[track_caller]\n+    pub fn downgrade_to_delayed_bug(&mut self) -> &mut Self {\n+        // FIXME(eddyb) this check is only necessary because cancellation exists,\n+        // but hopefully that can be removed in the future, if enough callers\n+        // of `.cancel()` can take `DiagnosticBuilder`, and by-value.\n+        if !self.cancelled() {\n+            assert!(\n+                self.is_error(),\n+                \"downgrade_to_delayed_bug: cannot downgrade {:?} to DelayedBug: not an error\",\n+                self.level\n+            );\n+            self.level = Level::DelayedBug;\n+        }\n+\n+        self\n+    }\n+\n     /// Adds a span/label to be included in the resulting snippet.\n     ///\n     /// This is pushed onto the [`MultiSpan`] that was created when the diagnostic"}, {"sha": "b4189cbfc62286b5f312aeaab6a7499510515b93", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -105,10 +105,9 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// See `emit` and `delay_as_bug` for details.\n     pub fn emit_unless(&mut self, delay: bool) {\n         if delay {\n-            self.delay_as_bug();\n-        } else {\n-            self.emit();\n+            self.downgrade_to_delayed_bug();\n         }\n+        self.emit();\n     }\n \n     /// Stashes diagnostic for possible later improvement in a different,\n@@ -162,12 +161,17 @@ impl<'a> DiagnosticBuilder<'a> {\n     ///\n     /// In the meantime, though, callsites are required to deal with the \"bug\"\n     /// locally in whichever way makes the most sense.\n+    #[track_caller]\n     pub fn delay_as_bug(&mut self) {\n-        self.level = Level::Bug;\n-        self.handler.delay_as_bug((*self.diagnostic).clone());\n-        self.cancel();\n+        self.downgrade_to_delayed_bug();\n+        self.emit();\n     }\n \n+    forward!(\n+        #[track_caller]\n+        pub fn downgrade_to_delayed_bug(&mut self,) -> &mut Self\n+    );\n+\n     /// Appends a labeled span to the diagnostic.\n     ///\n     /// Labels are used to convey additional context for the diagnostic's primary span. They will"}, {"sha": "539ddcec33254b9870c15ef5246a9e9586a76889", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -491,10 +491,15 @@ impl Drop for HandlerInner {\n             self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n         }\n \n+        // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n+        // They're `delayed_span_bugs` but for \"require some diagnostic happened\"\n+        // instead of \"require some error happened\". Sadly that isn't ideal, as\n+        // lints can be `#[allow]`'d, potentially leading to this triggering.\n+        // Also, \"good path\" should be replaced with a better naming.\n         if !self.has_any_message() {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs.into_iter().map(DelayedDiagnostic::decorate).collect(),\n+                bugs.into_iter().map(DelayedDiagnostic::decorate),\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n@@ -815,6 +820,8 @@ impl Handler {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n \n+    // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n+    // where the explanation of what \"good path\" is (also, it should be renamed).\n     pub fn delay_good_path_bug(&self, msg: &str) {\n         self.inner.borrow_mut().delay_good_path_bug(msg)\n     }\n@@ -915,10 +922,6 @@ impl Handler {\n     pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n         self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n     }\n-\n-    pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n-        self.inner.borrow_mut().delay_as_bug(diagnostic)\n-    }\n }\n \n impl HandlerInner {\n@@ -936,11 +939,24 @@ impl HandlerInner {\n         diags.iter().for_each(|diag| self.emit_diagnostic(diag));\n     }\n \n+    // FIXME(eddyb) this should ideally take `diagnostic` by value.\n     fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n         if diagnostic.cancelled() {\n             return;\n         }\n \n+        if diagnostic.level == Level::DelayedBug {\n+            // FIXME(eddyb) this should check for `has_errors` and stop pushing\n+            // once *any* errors were emitted (and truncate `delayed_span_bugs`\n+            // when an error is first emitted, also), but maybe there's a case\n+            // in which that's not sound? otherwise this is really inefficient.\n+            self.delayed_span_bugs.push(diagnostic.clone());\n+\n+            if !self.flags.report_delayed_bugs {\n+                return;\n+            }\n+        }\n+\n         if diagnostic.has_future_breakage() {\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n@@ -1119,14 +1135,16 @@ impl HandlerInner {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n-        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n         diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n-        self.delay_as_bug(diagnostic)\n+        self.emit_diagnostic(&diagnostic)\n     }\n \n+    // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n+    // where the explanation of what \"good path\" is (also, it should be renamed).\n     fn delay_good_path_bug(&mut self, msg: &str) {\n-        let diagnostic = Diagnostic::new(Level::Bug, msg);\n+        let diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&diagnostic);\n         }\n@@ -1160,20 +1178,34 @@ impl HandlerInner {\n         panic::panic_any(ExplicitBug);\n     }\n \n-    fn delay_as_bug(&mut self, diagnostic: Diagnostic) {\n-        if self.flags.report_delayed_bugs {\n-            self.emit_diagnostic(&diagnostic);\n-        }\n-        self.delayed_span_bugs.push(diagnostic);\n-    }\n+    fn flush_delayed(&mut self, bugs: impl IntoIterator<Item = Diagnostic>, explanation: &str) {\n+        let mut no_bugs = true;\n+        for mut bug in bugs {\n+            if no_bugs {\n+                // Put the overall explanation before the `DelayedBug`s, to\n+                // frame them better (e.g. separate warnings from them).\n+                self.emit_diagnostic(&Diagnostic::new(Bug, explanation));\n+                no_bugs = false;\n+            }\n+\n+            // \"Undelay\" the `DelayedBug`s (into plain `Bug`s).\n+            if bug.level != Level::DelayedBug {\n+                // NOTE(eddyb) not panicking here because we're already producing\n+                // an ICE, and the more information the merrier.\n+                bug.note(&format!(\n+                    \"`flushed_delayed` got diagnostic with level {:?}, \\\n+                     instead of the expected `DelayedBug`\",\n+                    bug.level,\n+                ));\n+            }\n+            bug.level = Level::Bug;\n \n-    fn flush_delayed(&mut self, bugs: Vec<Diagnostic>, explanation: &str) {\n-        let has_bugs = !bugs.is_empty();\n-        for bug in bugs {\n             self.emit_diagnostic(&bug);\n         }\n-        if has_bugs {\n-            panic!(\"{}\", explanation);\n+\n+        // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n+        if !no_bugs {\n+            panic::panic_any(ExplicitBug);\n         }\n     }\n \n@@ -1227,6 +1259,7 @@ impl DelayedDiagnostic {\n #[derive(Copy, PartialEq, Clone, Hash, Debug, Encodable, Decodable)]\n pub enum Level {\n     Bug,\n+    DelayedBug,\n     Fatal,\n     Error {\n         /// If this error comes from a lint, don't abort compilation even when abort_if_errors() is called.\n@@ -1250,7 +1283,7 @@ impl Level {\n     fn color(self) -> ColorSpec {\n         let mut spec = ColorSpec::new();\n         match self {\n-            Bug | Fatal | Error { .. } => {\n+            Bug | DelayedBug | Fatal | Error { .. } => {\n                 spec.set_fg(Some(Color::Red)).set_intense(true);\n             }\n             Warning => {\n@@ -1270,7 +1303,7 @@ impl Level {\n \n     pub fn to_str(self) -> &'static str {\n         match self {\n-            Bug => \"error: internal compiler error\",\n+            Bug | DelayedBug => \"error: internal compiler error\",\n             Fatal | Error { .. } => \"error\",\n             Warning => \"warning\",\n             Note => \"note\","}, {"sha": "159afa1bbbe48945b0b471ae5437150cf2e200bd", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -1066,7 +1066,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     })\n                     .unwrap_or(false)\n                 {\n-                    err.delay_as_bug();\n+                    err.downgrade_to_delayed_bug();\n                     // We already suggested changing `:` into `::` during parsing.\n                     return false;\n                 }\n@@ -1472,7 +1472,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                 .borrow_mut()\n                                 .insert(colon_sp)\n                             {\n-                                err.delay_as_bug();\n+                                err.downgrade_to_delayed_bug();\n                             }\n                         }\n                         if let Ok(base_snippet) = base_snippet {"}, {"sha": "aa18a2e4b9b5133f35670e7ecc1b631da09d467e", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if !lhs.is_syntactic_place_expr() {\n                     // We already emitted E0070 \"invalid left-hand side of assignment\", so we\n                     // silence this.\n-                    err.delay_as_bug();\n+                    err.downgrade_to_delayed_bug();\n                 }\n             }\n             _ => {}"}, {"sha": "34e30fe49b15d7b5d24ead3a8b86bf0948a69426", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -837,7 +837,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             kind: hir::ExprKind::Loop(_, _, hir::LoopSource::While, _),\n                                             ..\n                                         })) => {\n-                                            err.delay_as_bug();\n+                                            err.downgrade_to_delayed_bug();\n                                         }\n                                         _ => {}\n                                     }"}, {"sha": "bc2b99cb587da8f559f2d76b8da87ca5020c241b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -2098,8 +2098,15 @@ fn resolution_failure(\n                         )\n                     }\n                     ResolutionFailure::NoParentItem => {\n-                        diag.level = rustc_errors::Level::Bug;\n-                        \"all intra-doc links should have a parent item\".to_owned()\n+                        // FIXME(eddyb) this doesn't belong here, whatever made\n+                        // the `ResolutionFailure::NoParentItem` should emit an\n+                        // immediate or delayed `span_bug` about the issue.\n+                        tcx.sess.delay_span_bug(\n+                            sp.unwrap_or(DUMMY_SP),\n+                            \"intra-doc link missing parent item\",\n+                        );\n+\n+                        \"BUG: all intra-doc links should have a parent item\".to_owned()\n                     }\n                     ResolutionFailure::MalformedGenerics(variant) => match variant {\n                         MalformedGenerics::UnbalancedAngleBrackets => {"}, {"sha": "d26bb8c20255b073b5ebd65b37ee8a6dcd51c137", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f24ff1815f421ac369729633373b7e809a293232/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24ff1815f421ac369729633373b7e809a293232/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=f24ff1815f421ac369729633373b7e809a293232", "patch": "@@ -60,7 +60,7 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         None\n     }\n     fn emit_diagnostic(&mut self, db: &Diagnostic) {\n-        if db.level == DiagnosticLevel::Fatal {\n+        if db.level() == DiagnosticLevel::Fatal {\n             return self.handle_non_ignoreable_error(db);\n         }\n         if let Some(primary_span) = &db.span.primary_span() {\n@@ -292,7 +292,7 @@ mod tests {\n         use super::*;\n         use crate::config::IgnoreList;\n         use crate::utils::mk_sp;\n-        use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName, DUMMY_SP};\n+        use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName};\n         use std::path::PathBuf;\n         use std::sync::atomic::AtomicU32;\n \n@@ -310,16 +310,12 @@ mod tests {\n         }\n \n         fn build_diagnostic(level: DiagnosticLevel, span: Option<MultiSpan>) -> Diagnostic {\n-            Diagnostic {\n-                level,\n-                code: None,\n-                message: vec![],\n-                children: vec![],\n-                suggestions: Ok(vec![]),\n-                span: span.unwrap_or_else(MultiSpan::new),\n-                sort_span: DUMMY_SP,\n-                is_lint: false,\n+            let mut diag = Diagnostic::new(level, \"\");\n+            diag.message.clear();\n+            if let Some(span) = span {\n+                diag.span = span;\n             }\n+            diag\n         }\n \n         fn build_emitter("}]}