{"sha": "25ce315c7604e6617bd8b5868b45c9a3bd4867af", "node_id": "C_kwDOAAsO6NoAKDI1Y2UzMTVjNzYwNGU2NjE3YmQ4YjU4NjhiNDVjOWEzYmQ0ODY3YWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T05:47:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T05:47:38Z"}, "message": "Rollup merge of #93728 - JulianKnodt:toterm, r=oli-obk\n\nAdd in ValuePair::Term\n\nThis adds in an enum when matching on positions which can either be types or consts.\nIt will default to emitting old special cased error messages for types.\n\nr? `@oli-obk`\ncc `@matthiaskrgr`\nFixes #93578", "tree": {"sha": "fafdb2377d97609897235bc2f7e7b779806bf15d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fafdb2377d97609897235bc2f7e7b779806bf15d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ce315c7604e6617bd8b5868b45c9a3bd4867af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAgP7CRBK7hj4Ov3rIwAA1YkIAHrGLw6t8PvjX/9ZEunI8UxM\n2YQ5ZBehWY+DossXExPJkIA7Eo8m2XepJ+aXKjjOQyH9JYXLB+EXpohkkv0OJTAP\nJAZAF1DLcl0hlthCz2TmAdHOMWBza8MIHZqaHTqRbKKZyXmQTofv/gDGF1G9eevQ\ncy1zomf30U0qQsyhwYM/y6441pVCGePOzXnDcnl6UgpAXyBYgle3VLh0QnzzWxb7\ndhrsSsA/yu0Fmik16mPukoMkKgi7BzMoilZL/pV/+Baf2PqKCHRxZjTBnnKIZ6qK\nQBNVFaycECc6Tvo6HoFV1DANmcoFsOEYq/Ec5SL+z/dN+V9JcSCwuwFNQNJzJj8=\n=jPoM\n-----END PGP SIGNATURE-----\n", "payload": "tree fafdb2377d97609897235bc2f7e7b779806bf15d\nparent 1f90f4fb85e9924e24272f6bc12a0c561291c682\nparent be236d7fc2bab5edbd62d5250f62b448bbbaf858\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644299258 +0100\ncommitter GitHub <noreply@github.com> 1644299258 +0100\n\nRollup merge of #93728 - JulianKnodt:toterm, r=oli-obk\n\nAdd in ValuePair::Term\n\nThis adds in an enum when matching on positions which can either be types or consts.\nIt will default to emitting old special cased error messages for types.\n\nr? `@oli-obk`\ncc `@matthiaskrgr`\nFixes #93578\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ce315c7604e6617bd8b5868b45c9a3bd4867af", "html_url": "https://github.com/rust-lang/rust/commit/25ce315c7604e6617bd8b5868b45c9a3bd4867af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ce315c7604e6617bd8b5868b45c9a3bd4867af/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f90f4fb85e9924e24272f6bc12a0c561291c682", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f90f4fb85e9924e24272f6bc12a0c561291c682", "html_url": "https://github.com/rust-lang/rust/commit/1f90f4fb85e9924e24272f6bc12a0c561291c682"}, {"sha": "be236d7fc2bab5edbd62d5250f62b448bbbaf858", "url": "https://api.github.com/repos/rust-lang/rust/commits/be236d7fc2bab5edbd62d5250f62b448bbbaf858", "html_url": "https://github.com/rust-lang/rust/commit/be236d7fc2bab5edbd62d5250f62b448bbbaf858"}], "stats": {"total": 143, "additions": 74, "deletions": 69}, "files": [{"sha": "6515f948dd3bc873ff8e446a14c33eeda6c94489", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -268,7 +268,10 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n \n@@ -292,27 +295,22 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        match (a, b) {\n-            (ty::Term::Ty(a), ty::Term::Ty(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (ty::Term::Const(a), ty::Term::Const(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (_, _) => todo!(),\n-        }\n+        TypeTrace { cause: cause.clone(), values: Terms(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n }\n \n@@ -358,7 +356,7 @@ impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {\n         let b_ty = tcx.mk_projection(b.item_def_id, b.substs);\n         TypeTrace {\n             cause: cause.clone(),\n-            values: Types(ExpectedFound::new(a_is_expected, a_ty, b_ty)),\n+            values: Terms(ExpectedFound::new(a_is_expected, a_ty.into(), b_ty.into())),\n         }\n     }\n }"}, {"sha": "6fdfc8e39f10dd4eea6027b111f824400b0c0808", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -1582,18 +1582,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             None => (None, Mismatch::Fixed(\"type\"), false),\n             Some(values) => {\n                 let (is_simple_error, exp_found) = match values {\n-                    ValuePairs::Types(exp_found) => {\n-                        let is_simple_err =\n-                            exp_found.expected.is_simple_text() && exp_found.found.is_simple_text();\n-                        OpaqueTypesVisitor::visit_expected_found(\n-                            self.tcx,\n-                            exp_found.expected,\n-                            exp_found.found,\n-                            span,\n-                        )\n-                        .report(diag);\n+                    ValuePairs::Terms(infer::ExpectedFound {\n+                        expected: ty::Term::Ty(expected),\n+                        found: ty::Term::Ty(found),\n+                    }) => {\n+                        let is_simple_err = expected.is_simple_text() && found.is_simple_text();\n+                        OpaqueTypesVisitor::visit_expected_found(self.tcx, expected, found, span)\n+                            .report(diag);\n \n-                        (is_simple_err, Mismatch::Variable(exp_found))\n+                        (\n+                            is_simple_err,\n+                            Mismatch::Variable(infer::ExpectedFound { expected, found }),\n+                        )\n                     }\n                     ValuePairs::TraitRefs(_) => (false, Mismatch::Fixed(\"trait\")),\n                     _ => (false, Mismatch::Fixed(\"type\")),\n@@ -1624,7 +1624,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 };\n                 if let Some((sp, msg)) = secondary_span {\n                     if swap_secondary_and_primary {\n-                        let terr = if let Some(infer::ValuePairs::Types(infer::ExpectedFound {\n+                        let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n                             expected,\n                             ..\n                         })) = values\n@@ -2036,9 +2036,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             FailureCode::Error0308(failure_str) => {\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n-                if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n-                    trace.values\n-                {\n+                if let Some((expected, found)) = trace.values.ty() {\n                     match (expected.kind(), found.kind()) {\n                         (ty::Tuple(_), ty::Tuple(_)) => {}\n                         // If a tuple of length one was expected and the found expression has\n@@ -2148,9 +2146,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         values: ValuePairs<'tcx>,\n     ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         match values {\n-            infer::Types(exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n-            infer::Consts(exp_found) => self.expected_found_str(exp_found),\n+            infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),\n@@ -2178,16 +2175,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn expected_found_str_ty(\n+    fn expected_found_str_term(\n         &self,\n-        exp_found: ty::error::ExpectedFound<Ty<'tcx>>,\n+        exp_found: ty::error::ExpectedFound<ty::Term<'tcx>>,\n     ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         let exp_found = self.resolve_vars_if_possible(exp_found);\n         if exp_found.references_error() {\n             return None;\n         }\n \n-        Some(self.cmp(exp_found.expected, exp_found.found))\n+        Some(match (exp_found.expected, exp_found.found) {\n+            (ty::Term::Ty(expected), ty::Term::Ty(found)) => self.cmp(expected, found),\n+            (expected, found) => (\n+                DiagnosticStyledString::highlighted(expected.to_string()),\n+                DiagnosticStyledString::highlighted(found.to_string()),\n+            ),\n+        })\n     }\n \n     /// Returns a string of the form \"expected `{}`, found `{}`\"."}, {"sha": "a79ed20730b5cf014eff50d71b7ccc3ac8c528f8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -2,7 +2,7 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{SubregionOrigin, Subtype, ValuePairs};\n+use crate::infer::{SubregionOrigin, Subtype};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -34,16 +34,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         {\n             if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {\n                 if let (\n-                    ValuePairs::Types(sub_expected_found),\n-                    ValuePairs::Types(sup_expected_found),\n+                    sub_expected_found @ Some((sub_expected, sub_found)),\n+                    sup_expected_found @ Some(_),\n                     CompareImplMethodObligation { trait_item_def_id, .. },\n-                ) = (&sub_trace.values, &sup_trace.values, sub_trace.cause.code())\n+                ) = (&sub_trace.values.ty(), &sup_trace.values.ty(), sub_trace.cause.code())\n                 {\n                     if sup_expected_found == sub_expected_found {\n                         self.emit_err(\n                             var_origin.span(),\n-                            sub_expected_found.expected,\n-                            sub_expected_found.found,\n+                            sub_expected,\n+                            sub_found,\n                             *trait_item_def_id,\n                         );\n                         return Some(ErrorReported);"}, {"sha": "08320a0ff1d4229aaec90255cca58204cbdf6d27", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -366,13 +366,26 @@ pub struct InferCtxt<'a, 'tcx> {\n /// See the `error_reporting` module for more details.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub enum ValuePairs<'tcx> {\n-    Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n-    Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n+    Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }\n \n+impl<'tcx> ValuePairs<'tcx> {\n+    pub fn ty(&self) -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n+        if let ValuePairs::Terms(ExpectedFound {\n+            expected: ty::Term::Ty(expected),\n+            found: ty::Term::Ty(found),\n+        }) = self\n+        {\n+            Some((expected, found))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n /// The trace designates the path through inference that we took to\n /// encounter an error or subtyping constraint.\n ///\n@@ -1817,7 +1830,10 @@ impl<'tcx> TypeTrace<'tcx> {\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n \n     pub fn consts(\n@@ -1826,7 +1842,10 @@ impl<'tcx> TypeTrace<'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n "}, {"sha": "2cb2ac8666120badcc5549f629bef290ac9ce684", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -1382,26 +1382,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                     data.term,\n                 ) {\n-                    values = Some(match (normalized_ty, data.term) {\n-                        (ty::Term::Ty(normalized_ty), ty::Term::Ty(ty)) => {\n-                            infer::ValuePairs::Types(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ty,\n-                                ty,\n-                            ))\n-                        }\n-                        (ty::Term::Const(normalized_ct), ty::Term::Const(ct)) => {\n-                            infer::ValuePairs::Consts(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ct,\n-                                ct,\n-                            ))\n-                        }\n-                        (_, _) => span_bug!(\n-                            obligation.cause.span,\n-                            \"found const or type where other expected\"\n-                        ),\n-                    });\n+                    values = Some(infer::ValuePairs::Terms(ExpectedFound::new(\n+                        is_normalized_ty_expected,\n+                        normalized_ty,\n+                        data.term,\n+                    )));\n                     err_buf = error;\n                     err = &err_buf;\n                 }"}, {"sha": "5bb528458c59e07941570607ad8e0fcabb32d45f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ce315c7604e6617bd8b5868b45c9a3bd4867af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=25ce315c7604e6617bd8b5868b45c9a3bd4867af", "patch": "@@ -377,9 +377,9 @@ fn compare_predicate_entailment<'tcx>(\n                 &mut diag,\n                 &cause,\n                 trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n-                Some(infer::ValuePairs::Types(ExpectedFound {\n-                    expected: trait_fty,\n-                    found: impl_fty,\n+                Some(infer::ValuePairs::Terms(ExpectedFound {\n+                    expected: trait_fty.into(),\n+                    found: impl_fty.into(),\n                 })),\n                 &terr,\n                 false,\n@@ -1068,9 +1068,9 @@ crate fn compare_const_impl<'tcx>(\n                 &mut diag,\n                 &cause,\n                 trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n-                Some(infer::ValuePairs::Types(ExpectedFound {\n-                    expected: trait_ty,\n-                    found: impl_ty,\n+                Some(infer::ValuePairs::Terms(ExpectedFound {\n+                    expected: trait_ty.into(),\n+                    found: impl_ty.into(),\n                 })),\n                 &terr,\n                 false,"}]}