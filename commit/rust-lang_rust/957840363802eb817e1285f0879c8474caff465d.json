{"sha": "957840363802eb817e1285f0879c8474caff465d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Nzg0MDM2MzgwMmViODE3ZTEyODVmMDg3OWM4NDc0Y2FmZjQ2NWQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T13:36:31Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T14:31:16Z"}, "message": "new lint: looping over x.iter() or x.iter_mut() (fixes #157)", "tree": {"sha": "677e27cc56064300e1c0ed7473bbaf04e0a08ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677e27cc56064300e1c0ed7473bbaf04e0a08ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957840363802eb817e1285f0879c8474caff465d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957840363802eb817e1285f0879c8474caff465d", "html_url": "https://github.com/rust-lang/rust/commit/957840363802eb817e1285f0879c8474caff465d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957840363802eb817e1285f0879c8474caff465d/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b456e5fbd22e76ea064abad1e4ce9ed62b3454c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b456e5fbd22e76ea064abad1e4ce9ed62b3454c6", "html_url": "https://github.com/rust-lang/rust/commit/b456e5fbd22e76ea064abad1e4ce9ed62b3454c6"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "dd7d0158f030f919028fcee42b57d4b3316f0690", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -15,6 +15,7 @@ cmp_nan              | deny    | comparisons to NAN (which will always return fa\n cmp_owned            | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n collapsible_if       | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n eq_op                | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+explicit_iter_loop   | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n float_cmp            | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n identity_op          | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n ineffective_bit_mask | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`"}, {"sha": "ef3320d2543f61cc8d5347ab2c2b2df57faf99b1", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -64,7 +64,7 @@ fn is_relevant_trait(item: &TraitItem) -> bool {\n }\n \n fn is_relevant_block(block: &Block) -> bool {\n-    for stmt in block.stmts.iter() {\n+    for stmt in &block.stmts {\n         match stmt.node {\n             StmtDecl(_, _) => return true,\n             StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => {"}, {"sha": "7cb2877b2fdf05841ee4634d9d6508ef6b8f4fc1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -76,6 +76,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         lifetimes::NEEDLESS_LIFETIMES,\n+        loops::EXPLICIT_ITER_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,"}, {"sha": "bfb5ad6861daad31ccbe8a6774a8fb3be7178586", "filename": "src/loops.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -3,25 +3,29 @@ use syntax::ast::*;\n use syntax::visit::{Visitor, walk_expr};\n use std::collections::HashSet;\n \n-use utils::{span_lint, get_parent_expr};\n+use utils::{snippet, span_lint, get_parent_expr};\n \n declare_lint!{ pub NEEDLESS_RANGE_LOOP, Warn,\n                \"for-looping over a range of indices where an iterator over items would do\" }\n \n+declare_lint!{ pub EXPLICIT_ITER_LOOP, Warn,\n+               \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RANGE_LOOP)\n+        lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let Some((pat, arg, body)) = recover_for_loop(expr) {\n-            // the var must be a single name\n-            if let PatIdent(_, ref ident, _) = pat.node {\n-                // the iteratee must be a range literal\n-                if let ExprRange(_, _) = arg.node {\n+            // check for looping over a range and then indexing a sequence with it\n+            // -> the iteratee must be a range literal\n+            if let ExprRange(_, _) = arg.node {\n+                // the var must be a single name\n+                if let PatIdent(_, ref ident, _) = pat.node {\n                     let mut visitor = VarVisitor { cx: cx, var: ident.node.name,\n                                                    indexed: HashSet::new(), nonindex: false };\n                     walk_expr(&mut visitor, body);\n@@ -43,6 +47,25 @@ impl LintPass for LoopsPass {\n                     }\n                 }\n             }\n+\n+            // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n+            if let ExprMethodCall(ref method, _, ref args) = arg.node {\n+                // just the receiver, no arguments to iter() or iter_mut()\n+                if args.len() == 1 {\n+                    let method_name = method.node.name.as_str();\n+                    if method_name == \"iter\" {\n+                        let object = snippet(cx, args[0].span, \"_\");\n+                        span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!(\n+                            \"it is more idiomatic to loop over `&{}` instead of `{}.iter()`\",\n+                            object, object));\n+                    } else if method_name == \"iter_mut\" {\n+                        let object = snippet(cx, args[0].span, \"_\");\n+                        span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!(\n+                            \"it is more idiomatic to loop over `&mut {}` instead of `{}.iter_mut()`\",\n+                            object, object));\n+                    }\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "53d8850c59d46cc9122f1d22034112f65682fdb6", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -67,7 +67,7 @@ impl LintPass for TypePass {\n         let dlists = [vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n                       vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n                       vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n-        for path in dlists.iter() {\n+        for path in &dlists {\n             if match_ty_unwrap(ty, &path[..]).is_some() {\n                 span_help_and_lint(cx, LINKEDLIST, ty.span,\n                                    \"I see you're using a LinkedList! Perhaps you meant some other data structure?\","}, {"sha": "550f98692914a8445610ecdf64f6bcb5711cbeeb", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/957840363802eb817e1285f0879c8474caff465d/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957840363802eb817e1285f0879c8474caff465d/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=957840363802eb817e1285f0879c8474caff465d", "patch": "@@ -1,9 +1,9 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(needless_range_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop)]\n fn main() {\n-    let vec = vec![1, 2, 3, 4];\n+    let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n     for i in 0..vec.len() {      //~ERROR the loop variable `i` is only used to index `vec`.\n         println!(\"{}\", vec[i]);\n@@ -14,4 +14,10 @@ fn main() {\n     for i in 0..vec.len() {      // not an error, indexing more than one variable\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n+\n+    for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n+    for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n+\n+    for _v in &vec { } // these are fine\n+    for _v in &mut vec { } // these are fine\n }"}]}