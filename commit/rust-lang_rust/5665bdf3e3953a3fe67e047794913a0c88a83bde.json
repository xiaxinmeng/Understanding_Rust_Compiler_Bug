{"sha": "5665bdf3e3953a3fe67e047794913a0c88a83bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjViZGYzZTM5NTNhM2ZlNjdlMDQ3Nzk0OTEzYTBjODhhODNiZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-02T21:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-02T21:29:31Z"}, "message": "Auto merge of #37540 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 10 pull requests\n\n- Successful merges: #37351, #37405, #37473, #37482, #37488, #37498, #37502, #37513, #37517, #37523\n- Failed merges: #37521", "tree": {"sha": "c294643a3b5f7f6ccee7d331c75e73f245f74e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c294643a3b5f7f6ccee7d331c75e73f245f74e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5665bdf3e3953a3fe67e047794913a0c88a83bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5665bdf3e3953a3fe67e047794913a0c88a83bde", "html_url": "https://github.com/rust-lang/rust/commit/5665bdf3e3953a3fe67e047794913a0c88a83bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5665bdf3e3953a3fe67e047794913a0c88a83bde/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca9967af75f7a279dcf4921f119b2602b41dd71", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca9967af75f7a279dcf4921f119b2602b41dd71", "html_url": "https://github.com/rust-lang/rust/commit/0ca9967af75f7a279dcf4921f119b2602b41dd71"}, {"sha": "0befab23435fe6490ae2de30378f9bc834fcc1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0befab23435fe6490ae2de30378f9bc834fcc1a8", "html_url": "https://github.com/rust-lang/rust/commit/0befab23435fe6490ae2de30378f9bc834fcc1a8"}], "stats": {"total": 995, "additions": 906, "deletions": 89}, "files": [{"sha": "0bc9a4ad4198c35f89d485b145764736a606aeaf", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -15,7 +15,7 @@ before_install:\n script:\n   - docker run -v `pwd`:/build rust\n     sh -c \"\n-      ./configure --enable-rustbuild --llvm-root=/usr/lib/llvm-3.7 &&\n+      ./configure --enable-rustbuild --llvm-root=/usr/lib/llvm-3.7 --enable-quiet-tests &&\n       make tidy &&\n       make check -j4\n     \""}, {"sha": "cd22229b7993aa71f559124f7dfe18cea998870e", "filename": "configure", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/configure", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -507,11 +507,16 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=arm\n         ;;\n \n-    armv7l)\n+    armv6l)\n         CFG_CPUTYPE=arm\n         CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n         ;;\n \n+    armv7l)\n+        CFG_CPUTYPE=armv7\n+        CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n+        ;;\n+\n     aarch64)\n         CFG_CPUTYPE=aarch64\n         ;;\n@@ -610,6 +615,7 @@ opt docs     1 \"build standard library documentation\"\n opt compiler-docs     0 \"build compiler documentation\"\n opt optimize-tests 1 \"build tests with optimizations\"\n opt debuginfo-tests 0 \"build tests with debugger metadata\"\n+opt quiet-tests 0 \"enable quieter output when running tests\"\n opt libcpp 1 \"build llvm with libc++ instead of libstdc++ when using clang\"\n opt llvm-assertions 0 \"build LLVM with assertions\"\n opt debug-assertions 0 \"build with debugging assertions\""}, {"sha": "0a281b89c571f0bcdbf166adf831906acc79f268", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -187,6 +187,10 @@ pub fn compiletest(build: &Build,\n         cmd.arg(\"--verbose\");\n     }\n \n+    if build.config.quiet_tests {\n+        cmd.arg(\"--quiet\");\n+    }\n+\n     // Only pass correct values for these flags for the `run-make` suite as it\n     // requires that a C++ compiler was configured which isn't always the case.\n     if suite == \"run-make\" {\n@@ -277,7 +281,13 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     build.add_rustc_lib_path(compiler, &mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);\n-    cmd.arg(\"--test-args\").arg(build.flags.args.join(\" \"));\n+\n+    let mut test_args = build.flags.args.join(\" \");\n+    if build.config.quiet_tests {\n+        test_args.push_str(\" --quiet\");\n+    }\n+    cmd.arg(\"--test-args\").arg(test_args);\n+\n     build.run(&mut cmd);\n }\n \n@@ -367,6 +377,11 @@ pub fn krate(build: &Build,\n     dylib_path.insert(0, build.sysroot_libdir(compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n+    if build.config.quiet_tests {\n+        cargo.arg(\"--\");\n+        cargo.arg(\"--quiet\");\n+    }\n+\n     if target.contains(\"android\") {\n         build.run(cargo.arg(\"--no-run\"));\n         krate_android(build, compiler, target, mode);"}, {"sha": "abaa9389d809a90959edce68f4c6a50d154c1b46", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -77,6 +77,7 @@ pub struct Config {\n \n     // misc\n     pub channel: String,\n+    pub quiet_tests: bool,\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<String>,\n@@ -338,6 +339,7 @@ impl Config {\n                 (\"RPATH\", self.rust_rpath),\n                 (\"OPTIMIZE_TESTS\", self.rust_optimize_tests),\n                 (\"DEBUGINFO_TESTS\", self.rust_debuginfo_tests),\n+                (\"QUIET_TESTS\", self.quiet_tests),\n                 (\"LOCAL_REBUILD\", self.local_rebuild),\n                 (\"NINJA\", self.ninja),\n                 (\"CODEGEN_TESTS\", self.codegen_tests),"}, {"sha": "cae46a0dd0feb0f1e8164a724c2df364a65348cd", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -317,26 +317,27 @@ macro_rules! try {\n \n /// Write formatted data into a buffer\n ///\n-/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n-/// of arguments to format.\n+/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n+/// list of arguments to format.\n ///\n-/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n+/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n+/// these two traits.\n ///\n /// Passed arguments will be formatted according to the specified format string and the resulting\n /// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// Return value is completely dependent on the 'write_fmt' method.\n+/// `write!` returns whatever the 'write_fmt' method returns.\n ///\n-/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n ///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html\n-/// [enum_result]: ../std/result/enum.Result.html\n-/// [type_result]: ../std/io/type.Result.html\n+/// [fmt_result]: ../std/fmt/type.Result.html\n+/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -355,31 +356,32 @@ macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n \n-/// Write formatted data into a buffer, with appending a newline.\n+/// Write formatted data into a buffer, with a newline appended.\n ///\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n-/// of arguments to format.\n+/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n+/// list of arguments to format.\n ///\n-/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n+/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n+/// these two traits.\n ///\n /// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer.\n+/// string will be passed to the writer, along with the appended newline.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n-/// Return value is completely dependent on the 'write_fmt' method.\n+/// `write!` returns whatever the 'write_fmt' method returns.\n ///\n-/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n ///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html\n-/// [enum_result]: ../std/result/enum.Result.html\n-/// [type_result]: ../std/io/type.Result.html\n+/// [fmt_result]: ../std/fmt/type.Result.html\n+/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}, {"sha": "06838ee89bd37ca8f3b3f04ad5e33044f1c5e47a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -2484,13 +2484,13 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// impl<T> Deref for DerefMutExample<T> {\n ///     type Target = T;\n ///\n-///     fn deref<'a>(&'a self) -> &'a T {\n+///     fn deref(&self) -> &T {\n ///         &self.value\n ///     }\n /// }\n ///\n /// impl<T> DerefMut for DerefMutExample<T> {\n-///     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+///     fn deref_mut(&mut self) -> &mut T {\n ///         &mut self.value\n ///     }\n /// }"}, {"sha": "9ba5ff7c3a4620e719b52e39b4cac10895f3a140", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -821,7 +821,7 @@ impl<T: Default, E> Result<T, E> {\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"result_unwrap_or_default\", issue = \"0\")]\n+    #[unstable(feature = \"result_unwrap_or_default\", issue = \"37516\")]\n     pub fn unwrap_or_default(self) -> T {\n         match self {\n             Ok(x) => x,"}, {"sha": "c10f7e39fc39da0e13f768f993b98c0e128e03e8", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -166,6 +166,10 @@ pub enum Ordering {\n     /// sequentially consistent operations in the same order.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n+    // Prevent exhaustive matching to allow for future extension\n+    #[doc(hidden)]\n+    #[unstable(feature = \"future_atomic_orderings\", issue = \"0\")]\n+    __Nonexhaustive,\n }\n \n /// An `AtomicBool` initialized to `false`.\n@@ -1277,6 +1281,7 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n         SeqCst => SeqCst,\n         Acquire => Acquire,\n         AcqRel => Acquire,\n+        __Nonexhaustive => __Nonexhaustive,\n     }\n }\n \n@@ -1288,6 +1293,7 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n         SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1299,6 +1305,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n         SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1310,6 +1317,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xchg(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1322,6 +1330,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xadd(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1334,6 +1343,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xsub(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1354,6 +1364,8 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n+        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n+        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -1378,6 +1390,8 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n+        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n+        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -1393,6 +1407,7 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_and(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1404,6 +1419,7 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_or(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1415,6 +1431,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xor(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1448,6 +1465,7 @@ pub fn fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_fence_acqrel(),\n             SeqCst => intrinsics::atomic_fence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n+            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }"}, {"sha": "5e61c2ec7a292b588a727f33d05c560b74339dcd", "filename": "src/librustc_borrowck/borrowck/mir/abs_domain.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fabs_domain.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -21,13 +21,11 @@\n //! `a[x]` would still overlap them both. But that is not this\n //! representation does today.)\n \n-use rustc::mir::{Lvalue, LvalueElem};\n-use rustc::mir::{Operand, Projection, ProjectionElem};\n+use rustc::mir::LvalueElem;\n+use rustc::mir::{Operand, ProjectionElem};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct AbstractOperand;\n-pub type AbstractProjection<'tcx> =\n-    Projection<'tcx, Lvalue<'tcx>, AbstractOperand>;\n pub type AbstractElem<'tcx> =\n     ProjectionElem<'tcx, AbstractOperand>;\n "}, {"sha": "2f74ea3e475b5a9b4902e88620b2a2d373e6f20c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -300,8 +300,6 @@ struct BorrowStats {\n     guaranteed_paths: usize\n }\n \n-pub type BckResult<'tcx, T> = Result<T, BckError<'tcx>>;\n-\n ///////////////////////////////////////////////////////////////////////////\n // Loans and loan paths\n \n@@ -1064,6 +1062,19 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         db.note(\"values in a scope are dropped in the opposite order \\\n                                 they are created\");\n                     }\n+                    (Some(s1), Some(s2)) if !is_temporary && !is_closure => {\n+                        db.span = MultiSpan::from_span(s2);\n+                        db.span_label(error_span, &format!(\"borrow occurs here\"));\n+                        let msg = match opt_loan_path(&err.cmt) {\n+                            None => \"borrowed value\".to_string(),\n+                            Some(lp) => {\n+                                format!(\"`{}`\", self.loan_path_to_string(&lp))\n+                            }\n+                        };\n+                        db.span_label(s2,\n+                                      &format!(\"{} dropped here while still borrowed\", msg));\n+                        db.span_label(s1, &format!(\"{} needs to live until here\", value_kind));\n+                    }\n                     _ => {\n                         match sub_span {\n                             Some(s) => {"}, {"sha": "80c41f855ba5c95508e60369a9020879bc650e77", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 103, "deletions": 35, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -21,6 +21,7 @@ use self::SawTyComponent::*;\n use self::SawTraitOrImplItemComponent::*;\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n+use syntax::attr;\n use syntax::parse::token;\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n use rustc::hir;\n@@ -53,6 +54,7 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n     hash_spans: bool,\n     codemap: &'a mut CachingCodemapView<'tcx>,\n+    overflow_checks_enabled: bool,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n@@ -62,12 +64,16 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                codemap: &'a mut CachingCodemapView<'tcx>,\n                hash_spans: bool)\n                -> Self {\n+        let check_overflow = tcx.sess.opts.debugging_opts.force_overflow_checks\n+            .unwrap_or(tcx.sess.opts.debug_assertions);\n+\n         StrictVersionHashVisitor {\n             st: st,\n             tcx: tcx,\n             def_path_hashes: def_path_hashes,\n             hash_spans: hash_spans,\n             codemap: codemap,\n+            overflow_checks_enabled: check_overflow,\n         }\n     }\n \n@@ -83,7 +89,6 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     // Also note that we are hashing byte offsets for the column, not unicode\n     // codepoint offsets. For the purpose of the hash that's sufficient.\n     fn hash_span(&mut self, span: Span) {\n-        debug_assert!(self.hash_spans);\n         debug!(\"hash_span: st={:?}\", self.st);\n \n         // If this is not an empty or invalid span, we want to hash the last\n@@ -241,37 +246,80 @@ enum SawExprComponent<'a> {\n     SawExprRepeat,\n }\n \n-fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n+// The boolean returned indicates whether the span of this expression is always\n+// significant, regardless of debuginfo.\n+fn saw_expr<'a>(node: &'a Expr_,\n+                overflow_checks_enabled: bool)\n+                -> (SawExprComponent<'a>, bool) {\n+    let binop_can_panic_at_runtime = |binop| {\n+        match binop {\n+            BiAdd |\n+            BiSub |\n+            BiMul => overflow_checks_enabled,\n+\n+            BiDiv |\n+            BiRem => true,\n+\n+            BiAnd |\n+            BiOr |\n+            BiBitXor |\n+            BiBitAnd |\n+            BiBitOr |\n+            BiShl |\n+            BiShr |\n+            BiEq |\n+            BiLt |\n+            BiLe |\n+            BiNe |\n+            BiGe |\n+            BiGt => false\n+        }\n+    };\n+\n+    let unop_can_panic_at_runtime = |unop| {\n+        match unop {\n+            UnDeref |\n+            UnNot => false,\n+            UnNeg => overflow_checks_enabled,\n+        }\n+    };\n+\n     match *node {\n-        ExprBox(..)              => SawExprBox,\n-        ExprArray(..)            => SawExprArray,\n-        ExprCall(..)             => SawExprCall,\n-        ExprMethodCall(..)       => SawExprMethodCall,\n-        ExprTup(..)              => SawExprTup,\n-        ExprBinary(op, ..)       => SawExprBinary(op.node),\n-        ExprUnary(op, _)         => SawExprUnary(op),\n-        ExprLit(ref lit)         => SawExprLit(lit.node.clone()),\n-        ExprCast(..)             => SawExprCast,\n-        ExprType(..)             => SawExprType,\n-        ExprIf(..)               => SawExprIf,\n-        ExprWhile(..)            => SawExprWhile,\n-        ExprLoop(_, id)          => SawExprLoop(id.map(|id| id.node.as_str())),\n-        ExprMatch(..)            => SawExprMatch,\n-        ExprClosure(cc, _, _, _) => SawExprClosure(cc),\n-        ExprBlock(..)            => SawExprBlock,\n-        ExprAssign(..)           => SawExprAssign,\n-        ExprAssignOp(op, ..)     => SawExprAssignOp(op.node),\n-        ExprField(_, name)       => SawExprField(name.node.as_str()),\n-        ExprTupField(_, id)      => SawExprTupField(id.node),\n-        ExprIndex(..)            => SawExprIndex,\n-        ExprPath(ref qself, _)   => SawExprPath(qself.as_ref().map(|q| q.position)),\n-        ExprAddrOf(m, _)         => SawExprAddrOf(m),\n-        ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.as_str())),\n-        ExprAgain(id)            => SawExprAgain(id.map(|id| id.node.as_str())),\n-        ExprRet(..)              => SawExprRet,\n-        ExprInlineAsm(ref a,..)  => SawExprInlineAsm(a),\n-        ExprStruct(..)           => SawExprStruct,\n-        ExprRepeat(..)           => SawExprRepeat,\n+        ExprBox(..)              => (SawExprBox, false),\n+        ExprArray(..)            => (SawExprArray, false),\n+        ExprCall(..)             => (SawExprCall, false),\n+        ExprMethodCall(..)       => (SawExprMethodCall, false),\n+        ExprTup(..)              => (SawExprTup, false),\n+        ExprBinary(op, ..)       => {\n+            (SawExprBinary(op.node), binop_can_panic_at_runtime(op.node))\n+        }\n+        ExprUnary(op, _)         => {\n+            (SawExprUnary(op), unop_can_panic_at_runtime(op))\n+        }\n+        ExprLit(ref lit)         => (SawExprLit(lit.node.clone()), false),\n+        ExprCast(..)             => (SawExprCast, false),\n+        ExprType(..)             => (SawExprType, false),\n+        ExprIf(..)               => (SawExprIf, false),\n+        ExprWhile(..)            => (SawExprWhile, false),\n+        ExprLoop(_, id)          => (SawExprLoop(id.map(|id| id.node.as_str())), false),\n+        ExprMatch(..)            => (SawExprMatch, false),\n+        ExprClosure(cc, _, _, _) => (SawExprClosure(cc), false),\n+        ExprBlock(..)            => (SawExprBlock, false),\n+        ExprAssign(..)           => (SawExprAssign, false),\n+        ExprAssignOp(op, ..)     => {\n+            (SawExprAssignOp(op.node), binop_can_panic_at_runtime(op.node))\n+        }\n+        ExprField(_, name)       => (SawExprField(name.node.as_str()), false),\n+        ExprTupField(_, id)      => (SawExprTupField(id.node), false),\n+        ExprIndex(..)            => (SawExprIndex, true),\n+        ExprPath(ref qself, _)   => (SawExprPath(qself.as_ref().map(|q| q.position)), false),\n+        ExprAddrOf(m, _)         => (SawExprAddrOf(m), false),\n+        ExprBreak(id)            => (SawExprBreak(id.map(|id| id.node.as_str())), false),\n+        ExprAgain(id)            => (SawExprAgain(id.map(|id| id.node.as_str())), false),\n+        ExprRet(..)              => (SawExprRet, false),\n+        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(a), false),\n+        ExprStruct(..)           => (SawExprStruct, false),\n+        ExprRepeat(..)           => (SawExprRepeat, false),\n     }\n }\n \n@@ -421,10 +469,13 @@ macro_rules! hash_attrs {\n \n macro_rules! hash_span {\n     ($visitor:expr, $span:expr) => ({\n-        if $visitor.hash_spans {\n+        hash_span!($visitor, $span, false)\n+    });\n+    ($visitor:expr, $span:expr, $force:expr) => ({\n+        if $force || $visitor.hash_spans {\n             $visitor.hash_span($span);\n         }\n-    })\n+    });\n }\n \n impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n@@ -474,10 +525,12 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         debug!(\"visit_expr: st={:?}\", self.st);\n-        SawExpr(saw_expr(&ex.node)).hash(self.st);\n+        let (saw_expr, force_span) = saw_expr(&ex.node,\n+                                              self.overflow_checks_enabled);\n+        SawExpr(saw_expr).hash(self.st);\n         // No need to explicitly hash the discriminant here, since we are\n         // implicitly hashing the discriminant of SawExprComponent.\n-        hash_span!(self, ex.span);\n+        hash_span!(self, ex.span, force_span);\n         hash_attrs!(self, &ex.attrs);\n         visit::walk_expr(self, ex)\n     }\n@@ -519,6 +572,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_item(&mut self, i: &'tcx Item) {\n         debug!(\"visit_item: {:?} st={:?}\", i, self.st);\n+\n+        self.maybe_enable_overflow_checks(&i.attrs);\n+\n         SawItem(saw_item(&i.node)).hash(self.st);\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n@@ -545,6 +601,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n+\n+        self.maybe_enable_overflow_checks(&ti.attrs);\n+\n         SawTraitItem(saw_trait_item(&ti.node)).hash(self.st);\n         hash_span!(self, ti.span);\n         hash_attrs!(self, &ti.attrs);\n@@ -553,6 +612,9 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_impl_item(&mut self, ii: &'tcx ImplItem) {\n         debug!(\"visit_impl_item: st={:?}\", self.st);\n+\n+        self.maybe_enable_overflow_checks(&ii.attrs);\n+\n         SawImplItem(saw_impl_item(&ii.node)).hash(self.st);\n         hash_span!(self, ii.span);\n         hash_attrs!(self, &ii.attrs);\n@@ -842,4 +904,10 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n         indices.sort_by_key(|index| get_key(&items[*index]));\n         indices\n     }\n+\n+    fn maybe_enable_overflow_checks(&mut self, item_attrs: &[ast::Attribute]) {\n+        if attr::contains_name(item_attrs, \"rustc_inherit_overflow_checks\") {\n+            self.overflow_checks_enabled = true;\n+        }\n+    }\n }"}, {"sha": "7cef246b6cb2c5b6dc18c3abda5f0109a4694a70", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -32,8 +32,6 @@ use super::file_format;\n \n pub type DirtyNodes = FnvHashSet<DepNode<DefPathIndex>>;\n \n-type CleanEdges = Vec<(DepNode<DefId>, DepNode<DefId>)>;\n-\n /// If we are in incremental mode, and a previous dep-graph exists,\n /// then load up those nodes/edges that are still valid into the\n /// dep-graph for this session. (This is assumed to be running very"}, {"sha": "a28109c1471914d9a7ade462ebb979f8a9315f01", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -1189,7 +1189,7 @@ impl LateLintPass for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         use syntax::abi::Abi::RustIntrinsic;\n \n-        let msg = \"mutating transmuted &mut T from &T may cause undefined behavior,\\\n+        let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n                    consider instead using an UnsafeCell\";\n         match get_transmute_from_to(cx, expr) {\n             Some((&ty::TyRef(_, from_mt), &ty::TyRef(_, to_mt))) => {"}, {"sha": "ed46c1d96ad1705261918b3602cff02b859a4f6c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -12,7 +12,6 @@ use {Module, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::util::nodemap::FnvHashMap;\n use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast;\n@@ -80,8 +79,6 @@ pub struct LegacyBinding<'a> {\n     span: Span,\n }\n \n-pub type LegacyImports = FnvHashMap<ast::Name, (Rc<SyntaxExtension>, Span)>;\n-\n impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> ast::NodeId {\n         self.session.next_node_id()"}, {"sha": "4d3361c1873f032b33fd490f76a2e31409098fd1", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -48,7 +48,6 @@ use std;\n use llvm::{ValueRef, True, IntEQ, IntNE};\n use rustc::ty::layout;\n use rustc::ty::{self, Ty, AdtKind};\n-use syntax::attr;\n use build::*;\n use common::*;\n use debuginfo::DebugLoc;\n@@ -66,8 +65,6 @@ pub enum BranchKind {\n     Single\n }\n \n-type Hint = attr::ReprAttr;\n-\n #[derive(Copy, Clone)]\n pub struct MaybeSizedValue {\n     pub value: ValueRef,\n@@ -119,9 +116,6 @@ fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n     }\n }\n \n-/// This represents the (GEP) indices to follow to get to the discriminant field\n-pub type DiscrField = Vec<usize>;\n-\n /// LLVM-level types are a little complicated.\n ///\n /// C-like enums need to be actual ints, not wrapped in a struct,"}, {"sha": "1aa502fc443ec7bcb8d176ffdfada8b46c26be28", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -171,8 +171,6 @@ struct ConvertedBinding<'tcx> {\n     span: Span,\n }\n \n-type TraitAndProjections<'tcx> = (ty::PolyTraitRef<'tcx>, Vec<ty::PolyProjectionPredicate<'tcx>>);\n-\n /// Dummy type used for the `Self` of a `TraitRef` created for converting\n /// a trait object, and which gets removed in `ExistentialTraitRef`.\n /// This type must not appear anywhere in other converted types."}, {"sha": "a784d8e50f9d0d197af856ebd6bf09e68bc79770", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -124,10 +124,6 @@ pub struct FullBucket<K, V, M> {\n     table: M,\n }\n \n-pub type EmptyBucketImm<'table, K, V> = EmptyBucket<K, V, &'table RawTable<K, V>>;\n-pub type FullBucketImm<'table, K, V> = FullBucket<K, V, &'table RawTable<K, V>>;\n-\n-pub type EmptyBucketMut<'table, K, V> = EmptyBucket<K, V, &'table mut RawTable<K, V>>;\n pub type FullBucketMut<'table, K, V> = FullBucket<K, V, &'table mut RawTable<K, V>>;\n \n pub enum BucketState<K, V, M> {"}, {"sha": "f5f4c0042b4328cd1363b03be64e46208ebee180", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,173 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for exprs that can panic at runtime (e.g. because of bounds checking). For\n+// these expressions an error message containing their source location is\n+// generated, so their hash must always depend on their location in the source\n+// code, not just when debuginfo is enabled.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -C debug-assertions\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Indexing expression ---------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+\n+\n+// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n+\n+// bitwise ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+\n+// logical ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}"}, {"sha": "b84b7f5f378aad93d89386c88b1293c15ada10b2", "filename": "src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,251 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for exprs that can panic at runtime (e.g. because of bounds checking). For\n+// these expressions an error message containing their source location is\n+// generated, so their hash must always depend on their location in the source\n+// code, not just when debuginfo is enabled.\n+\n+// As opposed to the panic_exprs.rs test case, this test case checks that things\n+// behave as expected when overflow checks are off:\n+//\n+// - Addition, subtraction, and multiplication do not change the ICH, unless\n+//   the function containing them is marked with rustc_inherit_overflow_checks.\n+// - Division by zero and bounds checks always influence the ICH\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Indexing expression ---------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn indexing(slice: &[u8]) -> u8 {\n+    slice[100]\n+}\n+\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[rustc_inherit_overflow_checks]\n+pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n+    -val\n+}\n+\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn division_by_zero(val: i32) -> i32 {\n+    2 / val\n+}\n+\n+// Division by zero ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn mod_by_zero(val: i32) -> i32 {\n+    2 % val\n+}\n+\n+\n+\n+// THE FOLLOWING ITEMS SHOULD NOT BE INFLUENCED BY THEIR SOURCE LOCATION\n+\n+// bitwise ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise(val: i32) -> i32 {\n+    !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n+}\n+\n+\n+// logical ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n+    val1 && val2 || val3\n+}\n+\n+// Arithmetic overflow plus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n+    val + 1\n+}\n+\n+\n+// Arithmetic overflow minus ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n+    val - 1\n+}\n+\n+\n+// Arithmetic overflow mult ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n+    val * 2\n+}\n+\n+\n+// Arithmetic overflow negation ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n+    -val\n+}"}, {"sha": "726d4bcdf1d083a222c2680b15e8a1dc49f6fc00", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/borrowck/borrowck-ref-into-rvalue.rs"}, {"sha": "adbf39b3f7580f9d65b27ab52a2f1e18b93f32c5", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,16 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-ref-into-rvalue.rs:18:5\n+   |\n+14 |         Some(ref m) => { //~ ERROR borrowed value does not live long enough\n+   |              ----- borrow occurs here\n+...\n+18 |     }\n+   |     ^ borrowed value dropped here while still borrowed\n+19 |     println!(\"{}\", *msg);\n+20 | }\n+   | - borrowed value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "22f615cafd71eec06ce67f396d45542e0e1eb466", "filename": "src/test/ui/span/destructor-restrictions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/destructor-restrictions.rs"}, {"sha": "3253212c5b87ba389f519a689cc83de4256da09b", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,12 @@\n+error: `*a` does not live long enough\n+  --> $DIR/destructor-restrictions.rs:19:5\n+   |\n+18 |         *a.borrow() + 1    //~ ERROR `*a` does not live long enough\n+   |          - borrow occurs here\n+19 |     };\n+   |     ^- borrowed value needs to live until here\n+   |     |\n+   |     `*a` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ad9c27b8b9101418959815e2a929c52f5ed2538", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -4,8 +4,8 @@ error: `x` does not live long enough\n 18 |         let f = to_fn_once(move|| &x);\n    |                                    ^\n    |                                    |\n-   |                                    does not live long enough\n-   |                                    borrowed value only lives until here\n+   |                                    borrow occurs here\n+   |                                    `x` dropped here while still borrowed\n ...\n 23 | }\n    | - borrowed value needs to live until here"}, {"sha": "85a0002f2418081f2d43b4c12082fab811fcf94b", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -9,14 +9,14 @@ error: `y` does not live long enough\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: `y` does not live long enough\n-  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:28:5\n    |\n 27 |         y.borrow().clone() //~ ERROR `y` does not live long enough\n-   |         ^ does not live long enough\n+   |         - borrow occurs here\n 28 |     };\n-   |     -- borrowed value needs to live until here\n+   |     ^- borrowed value needs to live until here\n    |     |\n-   |     borrowed value only lives until here\n+   |     `y` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8e968d90a2f65750aeb87e9a8551653334cf630f", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs"}, {"sha": "0417eb075af85ab15a799543f41784b07eb82fbd", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,12 @@\n+error: `b` does not live long enough\n+  --> $DIR/mut-ptr-cant-outlive-ref.rs:19:5\n+   |\n+18 |         p = &*b; //~ ERROR `b` does not live long enough\n+   |               - borrow occurs here\n+19 |     }\n+   |     ^ `b` dropped here while still borrowed\n+20 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+"}, {"sha": "94967693ecf912d65d9c9db1b00b83bf83202d4c", "filename": "src/test/ui/span/range-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/range-2.rs"}, {"sha": "9f11de77be7e73dd9789ed987ff3c2fc8c99a50d", "filename": "src/test/ui/span/range-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,24 @@\n+error: `a` does not live long enough\n+  --> $DIR/range-2.rs:20:5\n+   |\n+17 |         &a..&b\n+   |          - borrow occurs here\n+...\n+20 |     };\n+   |     ^ `a` dropped here while still borrowed\n+21 | }\n+   | - borrowed value needs to live until here\n+\n+error: `b` does not live long enough\n+  --> $DIR/range-2.rs:20:5\n+   |\n+17 |         &a..&b\n+   |              - borrow occurs here\n+...\n+20 |     };\n+   |     ^ `b` dropped here while still borrowed\n+21 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8ec6036762f4886b74a90adfac129eb7ec35e533", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs"}, {"sha": "9c369e03e33ab8fdeee92b50327180907be3fb02", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,13 @@\n+error: `c` does not live long enough\n+  --> $DIR/regionck-unboxed-closure-lifetimes.rs:19:5\n+   |\n+17 |         let c_ref = &c; //~ ERROR `c` does not live long enough\n+   |                      - borrow occurs here\n+18 |         f = move |a: isize, b: isize| { a + b + *c_ref };\n+19 |     }\n+   |     ^ `c` dropped here while still borrowed\n+20 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+"}, {"sha": "053af49e0684b8b938d2d58a24d09f8b41dd2a38", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/regions-close-over-type-parameter-2.rs"}, {"sha": "ea652da7da46f57b6bd68e52bffc284ed9e426f9", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,13 @@\n+error: `tmp0` does not live long enough\n+  --> $DIR/regions-close-over-type-parameter-2.rs:35:5\n+   |\n+33 |         let tmp1 = &tmp0; //~ ERROR `tmp0` does not live long enough\n+   |                     ---- borrow occurs here\n+34 |         repeater3(tmp1)\n+35 |     };\n+   |     ^- borrowed value needs to live until here\n+   |     |\n+   |     `tmp0` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "f588655d1afa85af5b19e7fc1af8c8a46594d233", "filename": "src/test/ui/span/regions-escape-loop-via-variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs"}, {"sha": "09f2154905f38d7f536c43e7c5db0a500e232e0b", "filename": "src/test/ui/span/regions-escape-loop-via-variable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,12 @@\n+error: `x` does not live long enough\n+  --> $DIR/regions-escape-loop-via-variable.rs:22:5\n+   |\n+21 |         p = &x; //~ ERROR `x` does not live long enough\n+   |              - borrow occurs here\n+22 |     }\n+   |     ^ `x` dropped here while still borrowed\n+23 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+"}, {"sha": "8982b5cd98de49a9ed40dfae2311c5785eef60d7", "filename": "src/test/ui/span/regions-escape-loop-via-vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs"}, {"sha": "58f7849e443f5a52b8e07ac0f10b39adb826ef17", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,41 @@\n+error: `z` does not live long enough\n+  --> $DIR/regions-escape-loop-via-vec.rs:26:5\n+   |\n+22 |         _y.push(&mut z); //~ ERROR `z` does not live long enough\n+   |                      - borrow occurs here\n+...\n+26 |     }\n+   |     ^ `z` dropped here while still borrowed\n+27 |     //~^ NOTE borrowed value only lives until here\n+28 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:18:11\n+   |\n+14 |     let mut _y = vec![&mut x];\n+   |                            - borrow of `x` occurs here\n+...\n+18 |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+   |           ^ use of borrowed `x`\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:20:13\n+   |\n+14 |     let mut _y = vec![&mut x];\n+   |                            - borrow of `x` occurs here\n+...\n+20 |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+   |             ^^^^^ use of borrowed `x`\n+\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:24:9\n+   |\n+14 |     let mut _y = vec![&mut x];\n+   |                            - borrow of `x` occurs here\n+...\n+24 |         x += 1; //~ ERROR cannot assign\n+   |         ^^^^^^ assignment to borrowed `x` occurs here\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a05658e9e581db90f01f45d2f4ffbd5c5baa5142", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs"}, {"sha": "0e7b64ec2b36c08db9dca69805871f504a025146", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,14 @@\n+error: `*x` does not live long enough\n+  --> $DIR/regions-infer-borrow-scope-within-loop.rs:28:5\n+   |\n+24 |         y = borrow(&*x); //~ ERROR `*x` does not live long enough\n+   |                     -- borrow occurs here\n+...\n+28 |     }\n+   |     ^ `*x` dropped here while still borrowed\n+29 |     assert!(*y != 0);\n+30 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+"}, {"sha": "1b7718d2283a7bfd6a617c112f8a5d19bdd209a6", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/send-is-not-static-ensures-scoping.rs"}, {"sha": "5897921476d3ffde2d44dbc33e856264923c1148", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,28 @@\n+error: `x` does not live long enough\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:32:5\n+   |\n+26 |         let y = &x; //~ ERROR `x` does not live long enough\n+   |                  - borrow occurs here\n+...\n+32 |     };\n+   |     ^ `x` dropped here while still borrowed\n+...\n+35 | }\n+   | - borrowed value needs to live until here\n+\n+error: `y` does not live long enough\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:29:22\n+   |\n+28 |         scoped(|| {\n+   |                -- capture occurs here\n+29 |             let _z = y;\n+   |                      ^ does not live long enough\n+...\n+32 |     };\n+   |     - borrowed value only lives until here\n+...\n+35 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d9d3706586ba9e3c17615b0bc141140b8ed54043", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/send-is-not-static-std-sync-2.rs"}, {"sha": "08f85f17bf8adaa861f8e4d47e8cdf00e826f66a", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,36 @@\n+error: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:22:5\n+   |\n+21 |         Mutex::new(&x) //~ ERROR does not live long enough\n+   |                     - borrow occurs here\n+22 |     };\n+   |     ^ `x` dropped here while still borrowed\n+...\n+25 | }\n+   | - borrowed value needs to live until here\n+\n+error: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:31:5\n+   |\n+30 |         RwLock::new(&x) //~ ERROR does not live long enough\n+   |                      - borrow occurs here\n+31 |     };\n+   |     ^ `x` dropped here while still borrowed\n+32 |     let _dangling = *lock.read().unwrap();\n+33 | }\n+   | - borrowed value needs to live until here\n+\n+error: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:41:5\n+   |\n+39 |         let _ = tx.send(&x); //~ ERROR does not live long enough\n+   |                          - borrow occurs here\n+40 |         (tx, rx)\n+41 |     };\n+   |     ^ `x` dropped here while still borrowed\n+...\n+44 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8ec2fe8a1ec897492a55a85a76e08a80609428e6", "filename": "src/test/ui/span/send-is-not-static-std-sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/send-is-not-static-std-sync.rs"}, {"sha": "a86cf1e58846dbafb935fed38393a402f52f75d2", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,56 @@\n+error: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:27:5\n+   |\n+26 |         *lock.lock().unwrap() = &z; //~ ERROR does not live long enough\n+   |                                  - borrow occurs here\n+27 |     }\n+   |     ^ `z` dropped here while still borrowed\n+28 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:23:10\n+   |\n+22 |     *lock.lock().unwrap() = &*y;\n+   |                              -- borrow of `*y` occurs here\n+23 |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+\n+error: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:39:5\n+   |\n+38 |         *lock.write().unwrap() = &z; //~ ERROR does not live long enough\n+   |                                   - borrow occurs here\n+39 |     }\n+   |     ^ `z` dropped here while still borrowed\n+40 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:35:10\n+   |\n+34 |     *lock.write().unwrap() = &*y;\n+   |                               -- borrow of `*y` occurs here\n+35 |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+\n+error: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:53:5\n+   |\n+52 |         tx.send(&z).unwrap(); //~ ERROR does not live long enough\n+   |                  - borrow occurs here\n+53 |     }\n+   |     ^ `z` dropped here while still borrowed\n+54 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:49:10\n+   |\n+48 |     tx.send(&*y);\n+   |              -- borrow of `*y` occurs here\n+49 |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "b9d292fd1568552dcea5450360e00cbc213283c7", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "previous_filename": "src/test/compile-fail/wf-method-late-bound-regions.rs"}, {"sha": "aeac3102fbf3a94bb989bb332c55b538b111a8bf", "filename": "src/test/ui/span/wf-method-late-bound-regions.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665bdf3e3953a3fe67e047794913a0c88a83bde/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr?ref=5665bdf3e3953a3fe67e047794913a0c88a83bde", "patch": "@@ -0,0 +1,13 @@\n+error: `pointer` does not live long enough\n+  --> $DIR/wf-method-late-bound-regions.rs:31:5\n+   |\n+30 |         f2.xmute(&pointer) //~ ERROR `pointer` does not live long enough\n+   |                   ------- borrow occurs here\n+31 |     };\n+   |     ^ `pointer` dropped here while still borrowed\n+32 |     println!(\"{}\", dangling);\n+33 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+"}]}