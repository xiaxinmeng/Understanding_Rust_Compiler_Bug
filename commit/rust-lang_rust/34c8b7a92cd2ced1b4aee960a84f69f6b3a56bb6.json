{"sha": "34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzhiN2E5MmNkMmNlZDFiNGFlZTk2MGE4NGY2OWY2YjNhNTZiYjY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-02T01:24:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T01:24:29Z"}, "message": "Rollup merge of #76099 - camelid:patch-8, r=jyn514\n\nAdd info about `!` and `impl Trait`\n\nFixes #76094.\n\n@rustbot modify labels: T-doc C-enhancement", "tree": {"sha": "5509c1ab83cd8759faf9602c3feb5a6c0f94a05e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5509c1ab83cd8759faf9602c3feb5a6c0f94a05e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTvROCRBK7hj4Ov3rIwAAdHIIADisd1SmYnzN0DTI7OUaDwov\nVsi6wVE0L2cbWxW5NZQ1VeXjeIMXe5brl7CfJ7BSOdeahi6kydobTtJWVI4ImmL8\nc52ZGMjbxUWeLtsDVSZ9i4TBz72cx29WgdgdhRNwl2BEjBjFLxF7100QcBWuM1oj\nLf5vwQPwSLz5Oiv3yb2nAKRuVUjXIu67+t6YGLudzw4Rn7JBEjXN9UBHKOD78nzt\n8z26lUYRhncD5Pgbsj2Ypxr85PcXcMvil0GGO8fx3hgrixPJDNe/fZy1Mds3iVUV\nk12mOgMimEYDoKRVBRyrMMhu6XMJ4a1gsVBplGdu1LpK6yX7SGYdZcx7ox9aV2E=\n=L3pY\n-----END PGP SIGNATURE-----\n", "payload": "tree 5509c1ab83cd8759faf9602c3feb5a6c0f94a05e\nparent 7c1c7de85f47cd527d1935295e68218857d2d969\nparent 55637f566993e2f8659aa09288bfc00b9965c524\nauthor Tyler Mandry <tmandry@gmail.com> 1599009869 -0700\ncommitter GitHub <noreply@github.com> 1599009869 -0700\n\nRollup merge of #76099 - camelid:patch-8, r=jyn514\n\nAdd info about `!` and `impl Trait`\n\nFixes #76094.\n\n@rustbot modify labels: T-doc C-enhancement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6", "html_url": "https://github.com/rust-lang/rust/commit/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1c7de85f47cd527d1935295e68218857d2d969", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c7de85f47cd527d1935295e68218857d2d969", "html_url": "https://github.com/rust-lang/rust/commit/7c1c7de85f47cd527d1935295e68218857d2d969"}, {"sha": "55637f566993e2f8659aa09288bfc00b9965c524", "url": "https://api.github.com/repos/rust-lang/rust/commits/55637f566993e2f8659aa09288bfc00b9965c524", "html_url": "https://github.com/rust-lang/rust/commit/55637f566993e2f8659aa09288bfc00b9965c524"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "d00824cfb3e98b3429faae874348e0a195b5a058", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=34c8b7a92cd2ced1b4aee960a84f69f6b3a56bb6", "patch": "@@ -1,7 +1,6 @@\n #[doc(primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n-//\n /// The boolean type.\n ///\n /// The `bool` represents a value, which could only be either `true` or `false`. If you cast\n@@ -12,8 +11,8 @@\n /// `bool` implements various traits, such as [`BitAnd`], [`BitOr`], [`Not`], etc.,\n /// which allow us to perform boolean operations using `&`, `|` and `!`.\n ///\n-/// `if` always demands a `bool` value. [`assert!`], being an important macro in testing,\n-/// checks whether an expression returns `true`.\n+/// `if` always demands a `bool` value. [`assert!`], which is an important macro in testing,\n+/// checks whether an expression returns `true` and panics if it isn't.\n ///\n /// ```\n /// let bool_val = true & false | false;\n@@ -194,14 +193,48 @@ mod prim_bool {}\n /// # `!` and traits\n ///\n /// When writing your own traits, `!` should have an `impl` whenever there is an obvious `impl`\n-/// which doesn't `panic!`. As it turns out, most traits can have an `impl` for `!`. Take [`Debug`]\n+/// which doesn't `panic!`. The reason is that functions returning an `impl Trait` where `!`\n+/// does not have an `impl` of `Trait` cannot diverge as their only possible code path. In other\n+/// words, they can't return `!` from every code path. As an example, this code doesn't compile:\n+///\n+/// ```compile_fail\n+/// use core::ops::Add;\n+///\n+/// fn foo() -> impl Add<u32> {\n+///     unimplemented!()\n+/// }\n+/// ```\n+///\n+/// But this code does:\n+///\n+/// ```\n+/// use core::ops::Add;\n+///\n+/// fn foo() -> impl Add<u32> {\n+///     if true {\n+///         unimplemented!()\n+///     } else {\n+///         0\n+///     }\n+/// }\n+/// ```\n+///\n+/// The reason is that, in the first example, there are many possible types that `!` could coerce\n+/// to, because many types implement `Add<u32>`. However, in the second example,\n+/// the `else` branch returns a `0`, which the compiler infers from the return type to be of type\n+/// `u32`. Since `u32` is a concrete type, `!` can and will be coerced to it. See issue [#36375]\n+/// for more information on this quirk of `!`.\n+///\n+/// [#36375]: https://github.com/rust-lang/rust/issues/36375\n+///\n+/// As it turns out, though, most traits can have an `impl` for `!`. Take [`Debug`]\n /// for example:\n ///\n /// ```\n /// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n-/// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n+/// #     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n /// # }\n /// impl Debug for ! {\n ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {"}]}