{"sha": "fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZmE1MjFlNTA4MmZhNjEwYjdlNWVlYmNkZDk4YjU2ZGM2YjUyM2I=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-08T02:13:31Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-09T23:07:27Z"}, "message": "Move Deref to module.", "tree": {"sha": "990f3762de7e64427b447a9a5136fa5183209c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990f3762de7e64427b447a9a5136fa5183209c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "html_url": "https://github.com/rust-lang/rust/commit/fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fefa521e5082fa610b7e5eebcdd98b56dc6b523b/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "html_url": "https://github.com/rust-lang/rust/commit/bc9dc0ab3e26171da27fccf5775538e55c2a8e06"}], "stats": {"total": 233, "additions": 123, "deletions": 110}, "files": [{"sha": "3f4dabbbc0ce2d26cc802c540f668190605af720", "filename": "src/libcore/ops/deref.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/fefa521e5082fa610b7e5eebcdd98b56dc6b523b/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefa521e5082fa610b7e5eebcdd98b56dc6b523b/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// The `Deref` trait is used to specify the functionality of dereferencing\n+/// operations, like `*v`.\n+///\n+/// `Deref` also enables ['`Deref` coercions'][coercions].\n+///\n+/// [coercions]: ../../book/deref-coercions.html\n+///\n+/// # Examples\n+///\n+/// A struct with a single field which is accessible via dereferencing the\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::Deref;\n+///\n+/// struct DerefExample<T> {\n+///     value: T\n+/// }\n+///\n+/// impl<T> Deref for DerefExample<T> {\n+///     type Target = T;\n+///\n+///     fn deref(&self) -> &T {\n+///         &self.value\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let x = DerefExample { value: 'a' };\n+///     assert_eq!('a', *x);\n+/// }\n+/// ```\n+#[lang = \"deref\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Deref {\n+    /// The resulting type after dereferencing\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    type Target: ?Sized;\n+\n+    /// The method called to dereference a value\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> Deref for &'a T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T { *self }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> Deref for &'a mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T { *self }\n+}\n+\n+/// The `DerefMut` trait is used to specify the functionality of dereferencing\n+/// mutably like `*v = 1;`\n+///\n+/// `DerefMut` also enables ['`Deref` coercions'][coercions].\n+///\n+/// [coercions]: ../../book/deref-coercions.html\n+///\n+/// # Examples\n+///\n+/// A struct with a single field which is modifiable via dereferencing the\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::{Deref, DerefMut};\n+///\n+/// struct DerefMutExample<T> {\n+///     value: T\n+/// }\n+///\n+/// impl<T> Deref for DerefMutExample<T> {\n+///     type Target = T;\n+///\n+///     fn deref(&self) -> &T {\n+///         &self.value\n+///     }\n+/// }\n+///\n+/// impl<T> DerefMut for DerefMutExample<T> {\n+///     fn deref_mut(&mut self) -> &mut T {\n+///         &mut self.value\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let mut x = DerefMutExample { value: 'a' };\n+///     *x = 'b';\n+///     assert_eq!('b', *x);\n+/// }\n+/// ```\n+#[lang = \"deref_mut\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait DerefMut: Deref {\n+    /// The method called to mutably dereference a value\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn deref_mut(&mut self) -> &mut Self::Target;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, T: ?Sized> DerefMut for &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T { *self }\n+}"}, {"sha": "22e5695a8780c69a52ba2f9af36fde4fe15fbb69", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 4, "deletions": 110, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/fefa521e5082fa610b7e5eebcdd98b56dc6b523b/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefa521e5082fa610b7e5eebcdd98b56dc6b523b/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "patch": "@@ -149,6 +149,7 @@\n \n mod arith;\n mod bit;\n+mod deref;\n mod function;\n mod place;\n mod range;\n@@ -164,6 +165,9 @@ pub use self::bit::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub use self::bit::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::deref::{Deref, DerefMut};\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::function::{Fn, FnMut, FnOnce};\n \n@@ -423,116 +427,6 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n-/// The `Deref` trait is used to specify the functionality of dereferencing\n-/// operations, like `*v`.\n-///\n-/// `Deref` also enables ['`Deref` coercions'][coercions].\n-///\n-/// [coercions]: ../../book/deref-coercions.html\n-///\n-/// # Examples\n-///\n-/// A struct with a single field which is accessible via dereferencing the\n-/// struct.\n-///\n-/// ```\n-/// use std::ops::Deref;\n-///\n-/// struct DerefExample<T> {\n-///     value: T\n-/// }\n-///\n-/// impl<T> Deref for DerefExample<T> {\n-///     type Target = T;\n-///\n-///     fn deref(&self) -> &T {\n-///         &self.value\n-///     }\n-/// }\n-///\n-/// fn main() {\n-///     let x = DerefExample { value: 'a' };\n-///     assert_eq!('a', *x);\n-/// }\n-/// ```\n-#[lang = \"deref\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Deref {\n-    /// The resulting type after dereferencing\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    type Target: ?Sized;\n-\n-    /// The method called to dereference a value\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn deref(&self) -> &Self::Target;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a T {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T { *self }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Deref for &'a mut T {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T { *self }\n-}\n-\n-/// The `DerefMut` trait is used to specify the functionality of dereferencing\n-/// mutably like `*v = 1;`\n-///\n-/// `DerefMut` also enables ['`Deref` coercions'][coercions].\n-///\n-/// [coercions]: ../../book/deref-coercions.html\n-///\n-/// # Examples\n-///\n-/// A struct with a single field which is modifiable via dereferencing the\n-/// struct.\n-///\n-/// ```\n-/// use std::ops::{Deref, DerefMut};\n-///\n-/// struct DerefMutExample<T> {\n-///     value: T\n-/// }\n-///\n-/// impl<T> Deref for DerefMutExample<T> {\n-///     type Target = T;\n-///\n-///     fn deref(&self) -> &T {\n-///         &self.value\n-///     }\n-/// }\n-///\n-/// impl<T> DerefMut for DerefMutExample<T> {\n-///     fn deref_mut(&mut self) -> &mut T {\n-///         &mut self.value\n-///     }\n-/// }\n-///\n-/// fn main() {\n-///     let mut x = DerefMutExample { value: 'a' };\n-///     *x = 'b';\n-///     assert_eq!('b', *x);\n-/// }\n-/// ```\n-#[lang = \"deref_mut\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait DerefMut: Deref {\n-    /// The method called to mutably dereference a value\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn deref_mut(&mut self) -> &mut Self::Target;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> DerefMut for &'a mut T {\n-    fn deref_mut(&mut self) -> &mut T { *self }\n-}\n-\n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n ///"}]}