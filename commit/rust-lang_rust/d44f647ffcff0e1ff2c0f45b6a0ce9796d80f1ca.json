{"sha": "d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NGY2NDdmZmNmZjBlMWZmMmMwZjQ1YjZhMGNlOTc5NmQ4MGYxY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T15:19:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T15:19:39Z"}, "message": "Auto merge of #84982 - Dylan-DPC:rollup-q4cbec2, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83507 (Implement RFC 2951: Native link modifiers)\n - #84328 (Stablize {HashMap,BTreeMap}::into_{keys,values})\n - #84712 (Simplify chdir implementation and minimize unsafe block)\n - #84851 (:arrow_up: rust-analyzer)\n - #84923 (Only compute Obligation `cache_key` once  in `register_obligation_at`)\n - #84945 (E0583: Include secondary path in error message)\n - #84949 (Fix typo in `MaybeUninit::array_assume_init` safety comment)\n - #84950 (Revert PR 83866)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "11e72654b4a65b93a5c4249357b092a0c4293f26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e72654b4a65b93a5c4249357b092a0c4293f26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "html_url": "https://github.com/rust-lang/rust/commit/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "html_url": "https://github.com/rust-lang/rust/commit/109248a4eb99bc83684c94ca4ef36f2fadc17e2a"}, {"sha": "ccc820e1f8eb8d8d142bd93d578bb5c7d9bb6775", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc820e1f8eb8d8d142bd93d578bb5c7d9bb6775", "html_url": "https://github.com/rust-lang/rust/commit/ccc820e1f8eb8d8d142bd93d578bb5c7d9bb6775"}], "stats": {"total": 1158, "additions": 885, "deletions": 273}, "files": [{"sha": "dc3383dae843e20c131dad919fe4085adc0a3670", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -326,6 +326,45 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 );\n             }\n         }\n+\n+        // Check for unstable modifiers on `#[link(..)]` attribute\n+        if self.sess.check_name(attr, sym::link) {\n+            for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+                if nested_meta.has_name(sym::modifiers) {\n+                    gate_feature_post!(\n+                        self,\n+                        native_link_modifiers,\n+                        nested_meta.span(),\n+                        \"native link modifiers are experimental\"\n+                    );\n+\n+                    if let Some(modifiers) = nested_meta.value_str() {\n+                        for modifier in modifiers.as_str().split(',') {\n+                            if let Some(modifier) = modifier.strip_prefix(&['+', '-'][..]) {\n+                                macro_rules! gate_modifier { ($($name:literal => $feature:ident)*) => {\n+                                    $(if modifier == $name {\n+                                        let msg = concat!(\"`#[link(modifiers=\\\"\", $name, \"\\\")]` is unstable\");\n+                                        gate_feature_post!(\n+                                            self,\n+                                            $feature,\n+                                            nested_meta.name_value_literal_span().unwrap(),\n+                                            msg\n+                                        );\n+                                    })*\n+                                }}\n+\n+                                gate_modifier!(\n+                                    \"bundle\" => native_link_modifiers_bundle\n+                                    \"verbatim\" => native_link_modifiers_verbatim\n+                                    \"whole-archive\" => native_link_modifiers_whole_archive\n+                                    \"as-needed\" => native_link_modifiers_as_needed\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     fn visit_item(&mut self, i: &'a ast::Item) {"}, {"sha": "fc0823302e0189971c492fcf6c96cd77292c2cfb", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -85,8 +85,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ));\n     }\n \n-    fn add_native_library(&mut self, name: rustc_span::symbol::Symbol) {\n-        let location = find_library(name, &self.lib_search_paths, self.sess);\n+    fn add_native_library(&mut self, name: rustc_span::symbol::Symbol, verbatim: bool) {\n+        let location = find_library(name, verbatim, &self.lib_search_paths, self.sess);\n         self.add_archive(location.clone(), |_| false).unwrap_or_else(|e| {\n             panic!(\"failed to add native library {}: {}\", location.to_string_lossy(), e);\n         });"}, {"sha": "261affe2c427e1f01aa63dfe57cad8d5a7a4e9f3", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -100,8 +100,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n-    fn add_native_library(&mut self, name: Symbol) {\n-        let location = find_library(name, &self.config.lib_search_paths, self.config.sess);\n+    fn add_native_library(&mut self, name: Symbol, verbatim: bool) {\n+        let location =\n+            find_library(name, verbatim, &self.config.lib_search_paths, self.config.sess);\n         self.add_archive(&location, |_| false).unwrap_or_else(|e| {\n             self.config.sess.fatal(&format!(\n                 \"failed to add native library {}: {}\","}, {"sha": "c197d48d4ea64da30bbea8ef8ff51978f08a74fa", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,11 +4,19 @@ use rustc_span::symbol::Symbol;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-pub fn find_library(name: Symbol, search_paths: &[PathBuf], sess: &Session) -> PathBuf {\n+pub fn find_library(\n+    name: Symbol,\n+    verbatim: bool,\n+    search_paths: &[PathBuf],\n+    sess: &Session,\n+) -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib\n-    let oslibname =\n-        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix);\n+    let oslibname = if verbatim {\n+        name.to_string()\n+    } else {\n+        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix)\n+    };\n     let unixlibname = format!(\"lib{}.a\", name);\n \n     for path in search_paths {\n@@ -45,7 +53,7 @@ pub trait ArchiveBuilder<'a> {\n         lto: bool,\n         skip_objects: bool,\n     ) -> io::Result<()>;\n-    fn add_native_library(&mut self, name: Symbol);\n+    fn add_native_library(&mut self, name: Symbol, verbatim: bool);\n     fn update_symbols(&mut self);\n \n     fn build(self);"}, {"sha": "59f66c55572af3ed79166d43a72f1902444c75d1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -329,15 +329,15 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     // metadata of the rlib we're generating somehow.\n     for lib in codegen_results.crate_info.used_libraries.iter() {\n         match lib.kind {\n-            NativeLibKind::StaticBundle => {}\n-            NativeLibKind::StaticNoBundle\n-            | NativeLibKind::Dylib\n-            | NativeLibKind::Framework\n+            NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n+            NativeLibKind::Static { bundle: Some(false), .. }\n+            | NativeLibKind::Dylib { .. }\n+            | NativeLibKind::Framework { .. }\n             | NativeLibKind::RawDylib\n             | NativeLibKind::Unspecified => continue,\n         }\n         if let Some(name) = lib.name {\n-            ab.add_native_library(name);\n+            ab.add_native_library(name, lib.verbatim.unwrap_or(false));\n         }\n     }\n \n@@ -430,9 +430,10 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n         // Clearly this is not sufficient for a general purpose feature, and\n         // we'd want to read from the library's metadata to determine which\n         // object files come from where and selectively skip them.\n-        let skip_object_files = native_libs\n-            .iter()\n-            .any(|lib| lib.kind == NativeLibKind::StaticBundle && !relevant_lib(sess, lib));\n+        let skip_object_files = native_libs.iter().any(|lib| {\n+            matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n+                && !relevant_lib(sess, lib)\n+        });\n         ab.add_rlib(\n             path,\n             &name.as_str(),\n@@ -931,7 +932,7 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n         let path = find_sanitizer_runtime(&sess, &filename);\n         let rpath = path.to_str().expect(\"non-utf8 component in path\");\n         linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n-        linker.link_dylib(Symbol::intern(&filename));\n+        linker.link_dylib(Symbol::intern(&filename), false, true);\n     } else {\n         let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n         let path = find_sanitizer_runtime(&sess, &filename).join(&filename);\n@@ -1080,21 +1081,25 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n         .filter_map(|lib| {\n             let name = lib.name?;\n             match lib.kind {\n-                NativeLibKind::StaticNoBundle\n-                | NativeLibKind::Dylib\n+                NativeLibKind::Static { bundle: Some(false), .. }\n+                | NativeLibKind::Dylib { .. }\n                 | NativeLibKind::Unspecified => {\n+                    let verbatim = lib.verbatim.unwrap_or(false);\n                     if sess.target.is_like_msvc {\n-                        Some(format!(\"{}.lib\", name))\n+                        Some(format!(\"{}{}\", name, if verbatim { \"\" } else { \".lib\" }))\n+                    } else if sess.target.linker_is_gnu {\n+                        Some(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, name))\n                     } else {\n                         Some(format!(\"-l{}\", name))\n                     }\n                 }\n-                NativeLibKind::Framework => {\n+                NativeLibKind::Framework { .. } => {\n                     // ld-only syntax, since there are no frameworks in MSVC\n                     Some(format!(\"-framework {}\", name))\n                 }\n                 // These are included, no need to print them\n-                NativeLibKind::StaticBundle | NativeLibKind::RawDylib => None,\n+                NativeLibKind::Static { bundle: None | Some(true), .. }\n+                | NativeLibKind::RawDylib => None,\n             }\n         })\n         .collect();\n@@ -1812,11 +1817,20 @@ fn add_local_native_libraries(\n             Some(l) => l,\n             None => continue,\n         };\n+        let verbatim = lib.verbatim.unwrap_or(false);\n         match lib.kind {\n-            NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n-            NativeLibKind::Framework => cmd.link_framework(name),\n-            NativeLibKind::StaticNoBundle => cmd.link_staticlib(name),\n-            NativeLibKind::StaticBundle => cmd.link_whole_staticlib(name, &search_path),\n+            NativeLibKind::Dylib { as_needed } => {\n+                cmd.link_dylib(name, verbatim, as_needed.unwrap_or(true))\n+            }\n+            NativeLibKind::Unspecified => cmd.link_dylib(name, verbatim, true),\n+            NativeLibKind::Framework { as_needed } => {\n+                cmd.link_framework(name, as_needed.unwrap_or(true))\n+            }\n+            NativeLibKind::Static { bundle: None | Some(true), .. }\n+            | NativeLibKind::Static { whole_archive: Some(true), .. } => {\n+                cmd.link_whole_staticlib(name, verbatim, &search_path);\n+            }\n+            NativeLibKind::Static { .. } => cmd.link_staticlib(name, verbatim),\n             NativeLibKind::RawDylib => {\n                 // FIXME(#58713): Proper handling for raw dylibs.\n                 bug!(\"raw_dylib feature not yet implemented\");\n@@ -2000,9 +2014,10 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         // there's a static library that's not relevant we skip all object\n         // files.\n         let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n-        let skip_native = native_libs\n-            .iter()\n-            .any(|lib| lib.kind == NativeLibKind::StaticBundle && !relevant_lib(sess, lib));\n+        let skip_native = native_libs.iter().any(|lib| {\n+            matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n+                && !relevant_lib(sess, lib)\n+        });\n \n         if (!are_upstream_rust_objects_already_included(sess)\n             || ignored_for_lto(sess, &codegen_results.crate_info, cnum))\n@@ -2144,22 +2159,28 @@ fn add_upstream_native_libraries(\n             if !relevant_lib(sess, &lib) {\n                 continue;\n             }\n+            let verbatim = lib.verbatim.unwrap_or(false);\n             match lib.kind {\n-                NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n-                NativeLibKind::Framework => cmd.link_framework(name),\n-                NativeLibKind::StaticNoBundle => {\n+                NativeLibKind::Dylib { as_needed } => {\n+                    cmd.link_dylib(name, verbatim, as_needed.unwrap_or(true))\n+                }\n+                NativeLibKind::Unspecified => cmd.link_dylib(name, verbatim, true),\n+                NativeLibKind::Framework { as_needed } => {\n+                    cmd.link_framework(name, as_needed.unwrap_or(true))\n+                }\n+                NativeLibKind::Static { bundle: Some(false), .. } => {\n                     // Link \"static-nobundle\" native libs only if the crate they originate from\n                     // is being linked statically to the current crate.  If it's linked dynamically\n                     // or is an rlib already included via some other dylib crate, the symbols from\n                     // native libs will have already been included in that dylib.\n                     if data[cnum.as_usize() - 1] == Linkage::Static {\n-                        cmd.link_staticlib(name)\n+                        cmd.link_staticlib(name, verbatim)\n                     }\n                 }\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously\n-                NativeLibKind::StaticBundle => {}\n+                NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n                 NativeLibKind::RawDylib => {\n                     // FIXME(#58713): Proper handling for raw dylibs.\n                     bug!(\"raw_dylib feature not yet implemented\");"}, {"sha": "401d379b0d1613541167309f3eb3928e8f7cffd9", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 89, "deletions": 35, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -103,18 +103,19 @@ impl LinkerInfo {\n pub trait Linker {\n     fn cmd(&mut self) -> &mut Command;\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path);\n-    fn link_dylib(&mut self, lib: Symbol);\n+    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool);\n     fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n-    fn link_framework(&mut self, framework: Symbol);\n-    fn link_staticlib(&mut self, lib: Symbol);\n+    fn link_framework(&mut self, framework: Symbol, as_needed: bool);\n+    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool);\n     fn link_rlib(&mut self, lib: &Path);\n     fn link_whole_rlib(&mut self, lib: &Path);\n-    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]);\n+    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]);\n     fn include_path(&mut self, path: &Path);\n     fn framework_path(&mut self, path: &Path);\n     fn output_filename(&mut self, path: &Path);\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n+    fn no_gc_sections(&mut self);\n     fn full_relro(&mut self);\n     fn partial_relro(&mut self);\n     fn no_relro(&mut self);\n@@ -338,13 +339,32 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol) {\n+    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool) {\n+        if !as_needed {\n+            if self.sess.target.is_like_osx {\n+                // FIXME(81490): ld64 doesn't support these flags but macOS 11\n+                // has -needed-l{} / -needed_library {}\n+                // but we have no way to detect that here.\n+                self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n+            } else if self.sess.target.linker_is_gnu {\n+                self.linker_arg(\"--no-as-needed\");\n+            } else {\n+                self.sess.warn(\"`as-needed` modifier not supported for current linker\");\n+            }\n+        }\n         self.hint_dynamic();\n-        self.cmd.arg(format!(\"-l{}\", lib));\n+        self.cmd.arg(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, lib));\n+        if !as_needed {\n+            if self.sess.target.is_like_osx {\n+                // See above FIXME comment\n+            } else if self.sess.target.linker_is_gnu {\n+                self.linker_arg(\"--as-needed\");\n+            }\n+        }\n     }\n-    fn link_staticlib(&mut self, lib: Symbol) {\n+    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n         self.hint_static();\n-        self.cmd.arg(format!(\"-l{}\", lib));\n+        self.cmd.arg(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, lib));\n     }\n     fn link_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n@@ -378,8 +398,14 @@ impl<'a> Linker for GccLinker<'a> {\n         self.cmd.arg(format!(\"-l{}\", lib));\n     }\n \n-    fn link_framework(&mut self, framework: Symbol) {\n+    fn link_framework(&mut self, framework: Symbol, as_needed: bool) {\n         self.hint_dynamic();\n+        if !as_needed {\n+            // FIXME(81490): ld64 as of macOS 11 supports the -needed_framework\n+            // flag but we have no way to detect that here.\n+            // self.cmd.arg(\"-needed_framework\").sym_arg(framework);\n+            self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n+        }\n         self.cmd.arg(\"-framework\").sym_arg(framework);\n     }\n \n@@ -389,17 +415,21 @@ impl<'a> Linker for GccLinker<'a> {\n     // don't otherwise explicitly reference them. This can occur for\n     // libraries which are just providing bindings, libraries with generic\n     // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target;\n         if !target.is_like_osx {\n-            self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\", lib));\n+            self.linker_arg(\"--whole-archive\").cmd.arg(format!(\n+                \"-l{}{}\",\n+                if verbatim { \":\" } else { \"\" },\n+                lib\n+            ));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n             self.linker_arg(\"-force_load\");\n-            let lib = archive::find_library(lib, search_path, &self.sess);\n+            let lib = archive::find_library(lib, verbatim, search_path, &self.sess);\n             self.linker_arg(&lib);\n         }\n     }\n@@ -443,6 +473,16 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n+    fn no_gc_sections(&mut self) {\n+        if self.sess.target.is_like_osx {\n+            self.linker_arg(\"-no_dead_strip\");\n+        } else if self.sess.target.is_like_solaris {\n+            self.linker_arg(\"-zrecord\");\n+        } else {\n+            self.linker_arg(\"--no-gc-sections\");\n+        }\n+    }\n+\n     fn optimize(&mut self) {\n         if !self.sess.target.linker_is_gnu {\n             return;\n@@ -710,8 +750,12 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol) {\n-        self.cmd.arg(&format!(\"{}.lib\", lib));\n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"/OPT:NOREF,NOICF\");\n+    }\n+\n+    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n+        self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n     fn link_rust_dylib(&mut self, lib: Symbol, path: &Path) {\n@@ -725,8 +769,8 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol) {\n-        self.cmd.arg(&format!(\"{}.lib\", lib));\n+    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n+        self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n     fn full_relro(&mut self) {\n@@ -764,13 +808,13 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n-    fn link_framework(&mut self, _framework: Symbol) {\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n-        self.link_staticlib(lib);\n-        self.cmd.arg(format!(\"/WHOLEARCHIVE:{}.lib\", lib));\n+    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n+        self.link_staticlib(lib, verbatim);\n+        self.cmd.arg(format!(\"/WHOLEARCHIVE:{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n     fn link_whole_rlib(&mut self, path: &Path) {\n         self.link_rlib(path);\n@@ -919,7 +963,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol) {\n+    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n@@ -931,14 +975,14 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(path);\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol) {\n+    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n         // Emscripten always links statically\n-        self.link_staticlib(lib);\n+        self.link_staticlib(lib, verbatim);\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n         // not supported?\n-        self.link_staticlib(lib);\n+        self.link_staticlib(lib, verbatim);\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n@@ -947,7 +991,7 @@ impl<'a> Linker for EmLinker<'a> {\n     }\n \n     fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n-        self.link_dylib(lib);\n+        self.link_dylib(lib, false, true);\n     }\n \n     fn link_rlib(&mut self, lib: &Path) {\n@@ -970,14 +1014,18 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol) {\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n     fn gc_sections(&mut self, _keep_metadata: bool) {\n         // noop\n     }\n \n+    fn no_gc_sections(&mut self) {\n+        // noop\n+    }\n+\n     fn optimize(&mut self) {\n         // Emscripten performs own optimizations\n         self.cmd.arg(match self.sess.opts.optimize {\n@@ -1121,11 +1169,11 @@ impl<'a> Linker for WasmLd<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol) {\n+    fn link_dylib(&mut self, lib: Symbol, _verbatim: bool, _as_needed: bool) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol) {\n+    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n@@ -1159,11 +1207,11 @@ impl<'a> Linker for WasmLd<'a> {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol) {\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n         self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n@@ -1175,6 +1223,10 @@ impl<'a> Linker for WasmLd<'a> {\n         self.cmd.arg(\"--gc-sections\");\n     }\n \n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"--no-gc-sections\");\n+    }\n+\n     fn optimize(&mut self) {\n         self.cmd.arg(match self.sess.opts.optimize {\n             OptLevel::No => \"-O0\",\n@@ -1329,27 +1381,27 @@ impl<'a> Linker for PtxLinker<'a> {\n         });\n     }\n \n-    fn link_dylib(&mut self, _lib: Symbol) {\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n \n     fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: Symbol) {\n+    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: Symbol, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol) {\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n@@ -1361,6 +1413,8 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn gc_sections(&mut self, _keep_metadata: bool) {}\n \n+    fn no_gc_sections(&mut self) {}\n+\n     fn pgo_gen(&mut self) {}\n \n     fn no_crt_objects(&mut self) {}"}, {"sha": "1b53b551901645601bece68dc0a8e54f1f11c004", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -114,11 +114,12 @@ pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n     pub cfg: Option<ast::MetaItem>,\n+    pub verbatim: Option<bool>,\n }\n \n impl From<&cstore::NativeLib> for NativeLib {\n     fn from(lib: &cstore::NativeLib) -> Self {\n-        NativeLib { kind: lib.kind, name: lib.name, cfg: lib.cfg.clone() }\n+        NativeLib { kind: lib.kind, name: lib.name, cfg: lib.cfg.clone(), verbatim: lib.verbatim }\n     }\n }\n "}, {"sha": "29d685ab530d63f035f889d0b007a1a6751d7dae", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -336,12 +336,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     // Returns Err(()) if we already know this obligation failed.\n     fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {\n-        if self.done_cache.contains(&obligation.as_cache_key()) {\n+        let cache_key = obligation.as_cache_key();\n+        if self.done_cache.contains(&cache_key) {\n             debug!(\"register_obligation_at: ignoring already done obligation: {:?}\", obligation);\n             return Ok(());\n         }\n \n-        match self.active_cache.entry(obligation.as_cache_key()) {\n+        match self.active_cache.entry(cache_key.clone()) {\n             Entry::Occupied(o) => {\n                 let node = &mut self.nodes[*o.get()];\n                 if let Some(parent_index) = parent {\n@@ -365,7 +366,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     && self\n                         .error_cache\n                         .get(&obligation_tree_id)\n-                        .map(|errors| errors.contains(&obligation.as_cache_key()))\n+                        .map(|errors| errors.contains(&cache_key))\n                         .unwrap_or(false);\n \n                 if already_failed {"}, {"sha": "4d777049f0d627614d9d322fa7b47d0f175c7753", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -36,7 +36,7 @@ crate struct ParsedExternalMod {\n pub enum ModError<'a> {\n     CircularInclusion(Vec<PathBuf>),\n     ModInBlock(Option<Ident>),\n-    FileNotFound(Ident, PathBuf),\n+    FileNotFound(Ident, PathBuf, PathBuf),\n     MultipleCandidates(Ident, PathBuf, PathBuf),\n     ParserError(DiagnosticBuilder<'a>),\n }\n@@ -219,7 +219,7 @@ pub fn default_submod_path<'a>(\n             file_path: secondary_path,\n             dir_ownership: DirOwnership::Owned { relative: None },\n         }),\n-        (false, false) => Err(ModError::FileNotFound(ident, default_path)),\n+        (false, false) => Err(ModError::FileNotFound(ident, default_path, secondary_path)),\n         (true, true) => Err(ModError::MultipleCandidates(ident, default_path, secondary_path)),\n     }\n }\n@@ -247,7 +247,7 @@ impl ModError<'_> {\n                 }\n                 err\n             }\n-            ModError::FileNotFound(ident, default_path) => {\n+            ModError::FileNotFound(ident, default_path, secondary_path) => {\n                 let mut err = struct_span_err!(\n                     diag,\n                     span,\n@@ -256,9 +256,10 @@ impl ModError<'_> {\n                     ident,\n                 );\n                 err.help(&format!(\n-                    \"to create the module `{}`, create file \\\"{}\\\"\",\n+                    \"to create the module `{}`, create file \\\"{}\\\" or \\\"{}\\\"\",\n                     ident,\n                     default_path.display(),\n+                    secondary_path.display(),\n                 ));\n                 err\n             }"}, {"sha": "f747f8545145ee00a0451d5c16dae9cc240a7c50", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -656,6 +656,21 @@ declare_features! (\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n \n+    /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n+    (active, native_link_modifiers, \"1.53.0\", Some(81490), None),\n+\n+    /// Allows specifying the bundle link modifier\n+    (active, native_link_modifiers_bundle, \"1.53.0\", Some(81490), None),\n+\n+    /// Allows specifying the verbatim link modifier\n+    (active, native_link_modifiers_verbatim, \"1.53.0\", Some(81490), None),\n+\n+    /// Allows specifying the whole-archive link modifier\n+    (active, native_link_modifiers_whole_archive, \"1.53.0\", Some(81490), None),\n+\n+    /// Allows specifying the as-needed link modifier\n+    (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -683,6 +698,11 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics_defaults,\n     sym::inherent_associated_types,\n     sym::type_alias_impl_trait,\n+    sym::native_link_modifiers,\n+    sym::native_link_modifiers_bundle,\n+    sym::native_link_modifiers_verbatim,\n+    sym::native_link_modifiers_whole_archive,\n+    sym::native_link_modifiers_as_needed,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "4d87bbead41cbacdf9dd50682ef50566b9c88fcf", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 151, "deletions": 22, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -12,7 +12,7 @@ use rustc_session::config::{\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n-use rustc_session::utils::{CanonicalizedPath, NativeLibKind};\n+use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n@@ -303,38 +303,122 @@ fn test_native_libs_tracking_hash_different_values() {\n     let mut v2 = Options::default();\n     let mut v3 = Options::default();\n     let mut v4 = Options::default();\n+    let mut v5 = Options::default();\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"b\"), None, NativeLibKind::Framework),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     // Change label\n     v2.libs = vec![\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"X\"), None, NativeLibKind::Framework),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"X\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     // Change kind\n     v3.libs = vec![\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"b\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     // Change new-name\n     v4.libs = vec![\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"b\"), Some(String::from(\"X\")), NativeLibKind::Framework),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: Some(String::from(\"X\")),\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n+    ];\n+\n+    // Change verbatim\n+    v5.libs = vec![\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: Some(true),\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     assert_different_hash(&v1, &v2);\n     assert_different_hash(&v1, &v3);\n     assert_different_hash(&v1, &v4);\n+    assert_different_hash(&v1, &v5);\n }\n \n #[test]\n@@ -345,21 +429,66 @@ fn test_native_libs_tracking_hash_different_order() {\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"b\"), None, NativeLibKind::Framework),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     v2.libs = vec![\n-        (String::from(\"b\"), None, NativeLibKind::Framework),\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n     ];\n \n     v3.libs = vec![\n-        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n-        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n-        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        NativeLib {\n+            name: String::from(\"c\"),\n+            new_name: None,\n+            kind: NativeLibKind::Unspecified,\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"a\"),\n+            new_name: None,\n+            kind: NativeLibKind::Static { bundle: None, whole_archive: None },\n+            verbatim: None,\n+        },\n+        NativeLib {\n+            name: String::from(\"b\"),\n+            new_name: None,\n+            kind: NativeLibKind::Framework { as_needed: None },\n+            verbatim: None,\n+        },\n     ];\n \n     assert_same_hash(&v1, &v2);"}, {"sha": "bc342119efb991caee85c946c82fa7c9f5331a41", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 100, "deletions": 22, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -8,8 +8,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n-use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n@@ -56,6 +56,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 cfg: None,\n                 foreign_module: Some(it.def_id.to_def_id()),\n                 wasm_import_module: None,\n+                verbatim: None,\n             };\n             let mut kind_specified = false;\n \n@@ -67,10 +68,18 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         None => continue, // skip like historical compilers\n                     };\n                     lib.kind = match &*kind.as_str() {\n-                        \"static\" => NativeLibKind::StaticBundle,\n-                        \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n-                        \"dylib\" => NativeLibKind::Dylib,\n-                        \"framework\" => NativeLibKind::Framework,\n+                        \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n+                        \"static-nobundle\" => {\n+                            sess.struct_span_warn(\n+                                item.span(),\n+                                \"library kind `static-nobundle` has been superseded by specifying \\\n+                                modifier `-bundle` with library kind `static`\",\n+                            )\n+                            .emit();\n+                            NativeLibKind::Static { bundle: Some(false), whole_archive: None }\n+                        }\n+                        \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n+                        \"framework\" => NativeLibKind::Framework { as_needed: None },\n                         \"raw-dylib\" => NativeLibKind::RawDylib,\n                         k => {\n                             struct_span_err!(sess, item.span(), E0458, \"unknown kind: `{}`\", k)\n@@ -108,6 +117,71 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 }\n             }\n \n+            // Do this outside the above loop so we don't depend on modifiers coming\n+            // after kinds\n+            if let Some(item) = items.iter().find(|item| item.has_name(sym::modifiers)) {\n+                if let Some(modifiers) = item.value_str() {\n+                    let span = item.name_value_literal_span().unwrap();\n+                    for modifier in modifiers.as_str().split(',') {\n+                        let (modifier, value) = match modifier.strip_prefix(&['+', '-'][..]) {\n+                            Some(m) => (m, modifier.starts_with('+')),\n+                            None => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n+                                    before one of: bundle, verbatim, whole-archive, as-needed\",\n+                                );\n+                                continue;\n+                            }\n+                        };\n+\n+                        match (modifier, &mut lib.kind) {\n+                            (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                                *bundle = Some(value);\n+                            }\n+                            (\"bundle\", _) => sess.span_err(\n+                                span,\n+                                \"bundle linking modifier is only compatible with \\\n+                                `static` linking kind\",\n+                            ),\n+\n+                            (\"verbatim\", _) => lib.verbatim = Some(value),\n+\n+                            (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                                *whole_archive = Some(value);\n+                            }\n+                            (\"whole-archive\", _) => sess.span_err(\n+                                span,\n+                                \"whole-archive linking modifier is only compatible with \\\n+                                `static` linking kind\",\n+                            ),\n+\n+                            (\"as-needed\", NativeLibKind::Dylib { as_needed })\n+                            | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                                *as_needed = Some(value);\n+                            }\n+                            (\"as-needed\", _) => sess.span_err(\n+                                span,\n+                                \"as-needed linking modifier is only compatible with \\\n+                                `dylib` and `framework` linking kinds\",\n+                            ),\n+\n+                            _ => sess.span_err(\n+                                span,\n+                                &format!(\n+                                    \"unrecognized linking modifier `{}`, expected one \\\n+                                    of: bundle, verbatim, whole-archive, as-needed\",\n+                                    modifier\n+                                ),\n+                            ),\n+                        }\n+                    }\n+                } else {\n+                    let msg = \"must be of the form `#[link(modifiers = \\\"...\\\")]`\";\n+                    sess.span_err(item.span(), msg);\n+                }\n+            }\n+\n             // In general we require #[link(name = \"...\")] but we allow\n             // #[link(wasm_import_module = \"...\")] without the `name`.\n             let requires_name = kind_specified || lib.wasm_import_module.is_none();\n@@ -152,7 +226,7 @@ impl Collector<'tcx> {\n             return;\n         }\n         let is_osx = self.tcx.sess.target.is_like_osx;\n-        if lib.kind == NativeLibKind::Framework && !is_osx {\n+        if matches!(lib.kind, NativeLibKind::Framework { .. }) && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {\n                 Some(span) => struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit(),\n@@ -168,7 +242,9 @@ impl Collector<'tcx> {\n             )\n             .emit();\n         }\n-        if lib.kind == NativeLibKind::StaticNoBundle && !self.tcx.features().static_nobundle {\n+        if matches!(lib.kind, NativeLibKind::Static { bundle: Some(false), .. })\n+            && !self.tcx.features().static_nobundle\n+        {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::static_nobundle,\n@@ -193,30 +269,30 @@ impl Collector<'tcx> {\n     fn process_command_line(&mut self) {\n         // First, check for errors\n         let mut renames = FxHashSet::default();\n-        for (name, new_name, _) in &self.tcx.sess.opts.libs {\n-            if let Some(ref new_name) = new_name {\n+        for lib in &self.tcx.sess.opts.libs {\n+            if let Some(ref new_name) = lib.new_name {\n                 let any_duplicate = self\n                     .libs\n                     .iter()\n                     .filter_map(|lib| lib.name.as_ref())\n-                    .any(|n| &n.as_str() == name);\n+                    .any(|n| &n.as_str() == &lib.name);\n                 if new_name.is_empty() {\n                     self.tcx.sess.err(&format!(\n                         \"an empty renaming target was specified for library `{}`\",\n-                        name\n+                        lib.name\n                     ));\n                 } else if !any_duplicate {\n                     self.tcx.sess.err(&format!(\n                         \"renaming of the library `{}` was specified, \\\n                                                 however this crate contains no `#[link(...)]` \\\n                                                 attributes referencing this library.\",\n-                        name\n+                        lib.name\n                     ));\n-                } else if !renames.insert(name) {\n+                } else if !renames.insert(&lib.name) {\n                     self.tcx.sess.err(&format!(\n                         \"multiple renamings were \\\n                                                 specified for library `{}` .\",\n-                        name\n+                        lib.name\n                     ));\n                 }\n             }\n@@ -229,21 +305,22 @@ impl Collector<'tcx> {\n         // it.  (This ensures that the linker is able to see symbols from\n         // all possible dependent libraries before linking in the library\n         // in question.)\n-        for &(ref name, ref new_name, kind) in &self.tcx.sess.opts.libs {\n+        for passed_lib in &self.tcx.sess.opts.libs {\n             // If we've already added any native libraries with the same\n             // name, they will be pulled out into `existing`, so that we\n             // can move them to the end of the list below.\n             let mut existing = self\n                 .libs\n                 .drain_filter(|lib| {\n                     if let Some(lib_name) = lib.name {\n-                        if lib_name.as_str() == *name {\n-                            if kind != NativeLibKind::Unspecified {\n-                                lib.kind = kind;\n+                        if lib_name.as_str() == passed_lib.name {\n+                            if passed_lib.kind != NativeLibKind::Unspecified {\n+                                lib.kind = passed_lib.kind;\n                             }\n-                            if let Some(new_name) = new_name {\n+                            if let Some(new_name) = &passed_lib.new_name {\n                                 lib.name = Some(Symbol::intern(new_name));\n                             }\n+                            lib.verbatim = passed_lib.verbatim;\n                             return true;\n                         }\n                     }\n@@ -252,13 +329,14 @@ impl Collector<'tcx> {\n                 .collect::<Vec<_>>();\n             if existing.is_empty() {\n                 // Add if not found\n-                let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+                let new_name = passed_lib.new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLib {\n-                    name: Some(Symbol::intern(new_name.unwrap_or(name))),\n-                    kind,\n+                    name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n+                    kind: passed_lib.kind,\n                     cfg: None,\n                     foreign_module: None,\n                     wasm_import_module: None,\n+                    verbatim: passed_lib.verbatim,\n                 };\n                 self.register_native_lib(None, lib);\n             } else {"}, {"sha": "b11ad6c7ff86757450be57681c88ab9921076d7b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -256,16 +256,13 @@ pub fn provide(providers: &mut Providers) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibKind::Dylib | NativeLibKind::RawDylib | NativeLibKind::Unspecified) => {\n-                true\n-            }\n+            Some(\n+                NativeLibKind::Dylib { .. } | NativeLibKind::RawDylib | NativeLibKind::Unspecified,\n+            ) => true,\n             _ => false,\n         },\n         is_statically_included_foreign_item: |tcx, id| {\n-            matches!(\n-                tcx.native_library_kind(id),\n-                Some(NativeLibKind::StaticBundle | NativeLibKind::StaticNoBundle)\n-            )\n+            matches!(tcx.native_library_kind(id), Some(NativeLibKind::Static { .. }))\n         },\n         native_library_kind: |tcx, id| {\n             tcx.native_libraries(id.krate)"}, {"sha": "82b9ebcc7eca32ca4edd1dc5c372851639809a4d", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -94,6 +94,7 @@ pub struct NativeLib {\n     pub cfg: Option<ast::MetaItem>,\n     pub foreign_module: Option<DefId>,\n     pub wasm_import_module: Option<Symbol>,\n+    pub verbatim: Option<bool>,\n }\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]"}, {"sha": "6956b815f192222f04e79f0aebc41a145a9477b3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 116, "deletions": 37, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -5,7 +5,7 @@ pub use crate::options::*;\n \n use crate::lint;\n use crate::search_paths::SearchPath;\n-use crate::utils::{CanonicalizedPath, NativeLibKind};\n+use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -1027,8 +1027,11 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"\",\n             \"Link the generated crate(s) to the specified native\n                              library NAME. The optional KIND can be one of\n-                             static, framework, or dylib (the default).\",\n-            \"[KIND=]NAME\",\n+                             static, framework, or dylib (the default).\n+                             Optional comma separated MODIFIERS (bundle|verbatim|whole-archive|as-needed)\n+                             may be specified each with a prefix of either '+' to\n+                             enable or '-' to disable.\",\n+            \"[KIND[:MODIFIERS]=]NAME[:RENAME]\",\n         ),\n         make_crate_type_option(),\n         opt::opt_s(\"\", \"crate-name\", \"Specify the name of the crate being built\", \"NAME\"),\n@@ -1591,52 +1594,127 @@ fn select_debuginfo(\n     }\n }\n \n-fn parse_libs(\n-    matches: &getopts::Matches,\n+fn parse_native_lib_kind(kind: &str, error_format: ErrorOutputType) -> NativeLibKind {\n+    match kind {\n+        \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n+        \"framework\" => NativeLibKind::Framework { as_needed: None },\n+        \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n+        \"static-nobundle\" => {\n+            early_warn(\n+                error_format,\n+                \"library kind `static-nobundle` has been superseded by specifying \\\n+                `-bundle` on library kind `static`. Try `static:-bundle`\",\n+            );\n+            NativeLibKind::Static { bundle: Some(false), whole_archive: None }\n+        }\n+        s => early_error(\n+            error_format,\n+            &format!(\"unknown library kind `{}`, expected one of dylib, framework, or static\", s),\n+        ),\n+    }\n+}\n+\n+fn parse_native_lib_modifiers(\n+    is_nightly: bool,\n+    mut kind: NativeLibKind,\n+    modifiers: &str,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, NativeLibKind)> {\n+) -> (NativeLibKind, Option<bool>) {\n+    let mut verbatim = None;\n+    for modifier in modifiers.split(',') {\n+        let (modifier, value) = match modifier.strip_prefix(&['+', '-'][..]) {\n+            Some(m) => (m, modifier.starts_with('+')),\n+            None => early_error(\n+                error_format,\n+                \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n+                    before one of: bundle, verbatim, whole-archive, as-needed\",\n+            ),\n+        };\n+\n+        if !is_nightly {\n+            early_error(\n+                error_format,\n+                \"linking modifiers are currently unstable and only accepted on \\\n+                the nightly compiler\",\n+            );\n+        }\n+\n+        match (modifier, &mut kind) {\n+            (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                *bundle = Some(value);\n+            }\n+            (\"bundle\", _) => early_error(\n+                error_format,\n+                \"bundle linking modifier is only compatible with \\\n+                    `static` linking kind\",\n+            ),\n+\n+            (\"verbatim\", _) => verbatim = Some(value),\n+\n+            (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                *whole_archive = Some(value);\n+            }\n+            (\"whole-archive\", _) => early_error(\n+                error_format,\n+                \"whole-archive linking modifier is only compatible with \\\n+                    `static` linking kind\",\n+            ),\n+\n+            (\"as-needed\", NativeLibKind::Dylib { as_needed })\n+            | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                *as_needed = Some(value);\n+            }\n+            (\"as-needed\", _) => early_error(\n+                error_format,\n+                \"as-needed linking modifier is only compatible with \\\n+                    `dylib` and `framework` linking kinds\",\n+            ),\n+\n+            _ => early_error(\n+                error_format,\n+                &format!(\n+                    \"unrecognized linking modifier `{}`, expected one \\\n+                    of: bundle, verbatim, whole-archive, as-needed\",\n+                    modifier\n+                ),\n+            ),\n+        }\n+    }\n+\n+    (kind, verbatim)\n+}\n+\n+fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<NativeLib> {\n+    let is_nightly = nightly_options::match_is_nightly_build(matches);\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n         .map(|s| {\n-            // Parse string of the form \"[KIND=]lib[:new_name]\",\n-            // where KIND is one of \"dylib\", \"framework\", \"static\".\n-            let (name, kind) = match s.split_once('=') {\n-                None => (s, NativeLibKind::Unspecified),\n+            // Parse string of the form \"[KIND[:MODIFIERS]=]lib[:new_name]\",\n+            // where KIND is one of \"dylib\", \"framework\", \"static\" and\n+            // where MODIFIERS are  a comma separated list of supported modifiers\n+            // (bundle, verbatim, whole-archive, as-needed). Each modifier is prefixed\n+            // with either + or - to indicate whether it is enabled or disabled.\n+            // The last value specified for a given modifier wins.\n+            let (name, kind, verbatim) = match s.split_once('=') {\n+                None => (s, NativeLibKind::Unspecified, None),\n                 Some((kind, name)) => {\n-                    let kind = match kind {\n-                        \"dylib\" => NativeLibKind::Dylib,\n-                        \"framework\" => NativeLibKind::Framework,\n-                        \"static\" => NativeLibKind::StaticBundle,\n-                        \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n-                        s => {\n-                            early_error(\n-                                error_format,\n-                                &format!(\n-                                    \"unknown library kind `{}`, expected \\\n-                                     one of dylib, framework, or static\",\n-                                    s\n-                                ),\n-                            );\n+                    let (kind, verbatim) = match kind.split_once(':') {\n+                        None => (parse_native_lib_kind(kind, error_format), None),\n+                        Some((kind, modifiers)) => {\n+                            let kind = parse_native_lib_kind(kind, error_format);\n+                            parse_native_lib_modifiers(is_nightly, kind, modifiers, error_format)\n                         }\n                     };\n-                    (name.to_string(), kind)\n+                    (name.to_string(), kind, verbatim)\n                 }\n             };\n-            if kind == NativeLibKind::StaticNoBundle\n-                && !nightly_options::match_is_nightly_build(matches)\n-            {\n-                early_error(\n-                    error_format,\n-                    \"the library kind 'static-nobundle' is only \\\n-                     accepted on the nightly compiler\",\n-                );\n-            }\n+\n             let (name, new_name) = match name.split_once(':') {\n                 None => (name, None),\n                 Some((name, new_name)) => (name.to_string(), Some(new_name.to_owned())),\n             };\n-            (name, new_name, kind)\n+            NativeLib { name, new_name, kind, verbatim }\n         })\n         .collect()\n }\n@@ -2316,7 +2394,7 @@ crate mod dep_tracking {\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n-    use crate::utils::NativeLibKind;\n+    use crate::utils::{NativeLib, NativeLibKind};\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n@@ -2391,6 +2469,7 @@ crate mod dep_tracking {\n         DebugInfo,\n         UnstableFeatures,\n         OutputTypes,\n+        NativeLib,\n         NativeLibKind,\n         SanitizerSet,\n         CFGuard,\n@@ -2409,8 +2488,8 @@ crate mod dep_tracking {\n         PathBuf,\n         (PathBuf, PathBuf),\n         CrateType,\n+        NativeLib,\n         (String, lint::Level),\n-        (String, Option<String>, NativeLibKind),\n         (String, u64)\n     );\n "}, {"sha": "7799dfd19782aae312730b230edf96bb190243cc", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -3,7 +3,7 @@ use crate::config::*;\n use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n-use crate::utils::NativeLibKind;\n+use crate::utils::NativeLib;\n \n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n@@ -133,7 +133,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, NativeLibKind)> [TRACKED],\n+        libs: Vec<NativeLib> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],"}, {"sha": "1a044e677a02fedb4aef8be2057044c6dc05c244", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -19,25 +19,42 @@ impl Session {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub enum NativeLibKind {\n-    /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC) included\n-    /// when linking a final binary, but not when archiving an rlib.\n-    StaticNoBundle,\n-    /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC) included\n-    /// when linking a final binary, but also included when archiving an rlib.\n-    StaticBundle,\n+    /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC)\n+    Static {\n+        /// Whether to bundle objects from static library into produced rlib\n+        bundle: Option<bool>,\n+        /// Whether to link static library without throwing any object files away\n+        whole_archive: Option<bool>,\n+    },\n     /// Dynamic library (e.g. `libfoo.so` on Linux)\n     /// or an import library corresponding to a dynamic library (e.g. `foo.lib` on Windows/MSVC).\n-    Dylib,\n+    Dylib {\n+        /// Whether the dynamic library will be linked only if it satifies some undefined symbols\n+        as_needed: Option<bool>,\n+    },\n     /// Dynamic library (e.g. `foo.dll` on Windows) without a corresponding import library.\n     RawDylib,\n     /// A macOS-specific kind of dynamic libraries.\n-    Framework,\n+    Framework {\n+        /// Whether the framework will be linked only if it satifies some undefined symbols\n+        as_needed: Option<bool>,\n+    },\n     /// The library kind wasn't specified, `Dylib` is currently used as a default.\n     Unspecified,\n }\n \n rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);\n \n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n+pub struct NativeLib {\n+    pub name: String,\n+    pub new_name: Option<String>,\n+    pub kind: NativeLibKind,\n+    pub verbatim: Option<bool>,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(NativeLib);\n+\n /// A path that has been canonicalized along with its original, non-canonicalized form\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub struct CanonicalizedPath {"}, {"sha": "4c80b84e3d275be55b5bb25313739ff7e6eb5d21", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -748,6 +748,7 @@ symbols! {\n         minnumf64,\n         mips_target_feature,\n         misc,\n+        modifiers,\n         module,\n         module_path,\n         more_struct_aliases,\n@@ -763,6 +764,11 @@ symbols! {\n         naked,\n         naked_functions,\n         name,\n+        native_link_modifiers,\n+        native_link_modifiers_as_needed,\n+        native_link_modifiers_bundle,\n+        native_link_modifiers_verbatim,\n+        native_link_modifiers_whole_archive,\n         ne,\n         nearbyintf32,\n         nearbyintf64,"}, {"sha": "0a46387c34e9c09fae28bd7628f8825605b93cbf", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -398,12 +398,12 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: BTreeMap::into_keys\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(key, _)| key)).finish()\n@@ -416,12 +416,12 @@ impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: BTreeMap::into_values\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V: fmt::Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n@@ -1242,7 +1242,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1253,7 +1252,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -1265,7 +1264,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1276,7 +1274,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1776,7 +1774,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -1801,24 +1799,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n     fn next_back(&mut self) -> Option<K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -1835,21 +1833,21 @@ impl<K, V> Iterator for IntoValues<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n     fn next_back(&mut self) -> Option<V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "10219201a40d33131b0c6831958cfbb8fd5f4e75", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -870,7 +870,7 @@ impl<T> MaybeUninit<T> {\n         // SAFETY:\n         // * The caller guarantees that all elements of the array are initialized\n         // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n-        // * MaybeUnint does not drop, so there are no double-frees\n+        // * `MaybeUninit` does not drop, so there are no double-frees\n         // And thus the conversion is safe\n         unsafe {\n             intrinsics::assert_inhabited::<[T; N]>();"}, {"sha": "a1f52a9c2e88019534c64fe6355dfb791d1ad9c0", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -962,7 +962,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -973,7 +972,7 @@ where\n     /// let vec: Vec<&str> = map.into_keys().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -985,7 +984,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -996,7 +994,7 @@ where\n     /// let vec: Vec<i32> = map.into_values().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1405,15 +1403,13 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_keys();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -1428,15 +1424,13 @@ pub struct IntoKeys<K, V> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_values();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -2137,7 +2131,7 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -2150,24 +2144,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K: Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -2180,17 +2174,17 @@ impl<K, V> Iterator for IntoValues<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V: Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()"}, {"sha": "51c3e5d175cca86a0b9c351c19a6ccf459378b1d", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -155,12 +155,10 @@ pub fn getcwd() -> io::Result<PathBuf> {\n pub fn chdir(p: &path::Path) -> io::Result<()> {\n     let p: &OsStr = p.as_ref();\n     let p = CString::new(p.as_bytes())?;\n-    unsafe {\n-        match libc::chdir(p.as_ptr()) == (0 as c_int) {\n-            true => Ok(()),\n-            false => Err(io::Error::last_os_error()),\n-        }\n+    if unsafe { libc::chdir(p.as_ptr()) } != 0 {\n+        return Err(io::Error::last_os_error());\n     }\n+    Ok(())\n }\n \n pub struct SplitPaths<'a> {"}, {"sha": "1757673612c4818e4d004b1ff3290cf54d2b6f56", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-as-needed.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-as-needed.md", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-as-needed.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-as-needed.md?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,18 @@\n+# `native_link_modifiers_as_needed`\n+\n+The tracking issue for this feature is: [#81490]\n+\n+[#81490]: https://github.com/rust-lang/rust/issues/81490\n+\n+------------------------\n+\n+The `native_link_modifiers_as_needed` feature allows you to use the `as-needed` modifier.\n+\n+`as-needed` is only compatible with the `dynamic` and `framework` linking kinds. Using any other kind will result in a compiler error.\n+\n+`+as-needed` means that the library will be actually linked only if it satisfies some undefined symbols at the point at which it is specified on the command line, making it similar to static libraries in this regard.\n+\n+This modifier translates to `--as-needed` for ld-like linkers, and to `-dead_strip_dylibs` / `-needed_library` / `-needed_framework` for ld64.\n+The modifier does nothing for linkers that don't support it (e.g. `link.exe`).\n+\n+The default for this modifier is unclear, some targets currently specify it as `+as-needed`, some do not. We may want to try making `+as-needed` a default for all targets."}, {"sha": "ac192cff13a3d2ecbbaf244120af4d37cd85160d", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-bundle.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-bundle.md", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-bundle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-bundle.md?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,19 @@\n+# `native_link_modifiers_bundle`\n+\n+The tracking issue for this feature is: [#81490]\n+\n+[#81490]: https://github.com/rust-lang/rust/issues/81490\n+\n+------------------------\n+\n+The `native_link_modifiers_bundle` feature allows you to use the `bundle` modifier.\n+\n+Only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n+\n+`+bundle` means objects from the static library are bundled into the produced crate (a rlib, for example) and are used from this crate later during linking of the final binary.\n+\n+`-bundle` means the static library is included into the produced rlib \"by name\" and object files from it are included only during linking of the final binary, the file search by that name is also performed during final linking.\n+\n+This modifier is supposed to supersede the `static-nobundle` linking kind defined by [RFC 1717](https://github.com/rust-lang/rfcs/pull/1717).\n+\n+The default for this modifier is currently `+bundle`, but it could be changed later on some future edition boundary."}, {"sha": "02bd87e50956d4ee83acec6e389a63e83513e4a2", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-verbatim.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-verbatim.md", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-verbatim.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-verbatim.md?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,20 @@\n+# `native_link_modifiers_verbatim`\n+\n+The tracking issue for this feature is: [#81490]\n+\n+[#81490]: https://github.com/rust-lang/rust/issues/81490\n+\n+------------------------\n+\n+The `native_link_modifiers_verbatim` feature allows you to use the `verbatim` modifier.\n+\n+`+verbatim` means that rustc itself won't add any target-specified library prefixes or suffixes (like `lib` or `.a`) to the library name, and will try its best to ask for the same thing from the linker.\n+\n+For `ld`-like linkers rustc will use the `-l:filename` syntax (note the colon) when passing the library, so the linker won't add any prefixes or suffixes as well.\n+See [`-l namespec`](https://sourceware.org/binutils/docs/ld/Options.html) in ld documentation for more details.\n+For linkers not supporting any verbatim modifiers (e.g. `link.exe` or `ld64`) the library name will be passed as is.\n+\n+The default for this modifier is `-verbatim`.\n+\n+This RFC changes the behavior of `raw-dylib` linking kind specified by [RFC 2627](https://github.com/rust-lang/rfcs/pull/2627). The `.dll` suffix (or other target-specified suffixes for other targets) is now added automatically.\n+If your DLL doesn't have the `.dll` suffix, it can be specified with `+verbatim`."}, {"sha": "4961e88cad1e0ba1a519f7995ef3db43b0019445", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-whole-archive.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,18 @@\n+# `native_link_modifiers_whole_archive`\n+\n+The tracking issue for this feature is: [#81490]\n+\n+[#81490]: https://github.com/rust-lang/rust/issues/81490\n+\n+------------------------\n+\n+The `native_link_modifiers_whole_archive` feature allows you to use the `whole-archive` modifier.\n+\n+Only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n+\n+`+whole-archive` means that the static library is linked as a whole archive without throwing any object files away.\n+\n+This modifier translates to `--whole-archive` for `ld`-like linkers, to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n+The modifier does nothing for linkers that don't support it.\n+\n+The default for this modifier is `-whole-archive`."}, {"sha": "fc8b575462175ee0c2c721c3d27f1eb8afae0838", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,11 @@\n+# `native_link_modifiers`\n+\n+The tracking issue for this feature is: [#81490]\n+\n+[#81490]: https://github.com/rust-lang/rust/issues/81490\n+\n+------------------------\n+\n+The `native_link_modifiers` feature allows you to use the `modifiers` syntax with the `#[link(..)]` attribute.\n+\n+Modifiers are specified as a comma-delimited string with each modifier prefixed with either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively. The last boolean value specified for a given modifier wins."}, {"sha": "47dae63f1fdf73f8f7bb65aaa547ac46c222ceb2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -517,10 +517,9 @@ impl Item {\n                                 Some(ExternalLocation::Remote(ref s)) => {\n                                     format!(\"{}/std/\", s.trim_end_matches('/'))\n                                 }\n-                                Some(ExternalLocation::Unknown) | None => format!(\n-                                    \"https://doc.rust-lang.org/{}/std/\",\n-                                    crate::doc_rust_lang_org_channel(),\n-                                ),\n+                                Some(ExternalLocation::Unknown) | None => {\n+                                    \"https://doc.rust-lang.org/nightly/std/\".to_string()\n+                                }\n                             };\n                             // This is a primitive so the url is done \"by hand\".\n                             let tail = fragment.find('#').unwrap_or_else(|| fragment.len());"}, {"sha": "51a011cf1977364ec7081bac0e954156f8835b31", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -542,14 +542,3 @@ crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n             && attr.meta_item_list().map_or(false, |l| rustc_attr::list_contains_name(&l, flag))\n     })\n }\n-\n-/// Return a channel suitable for using in a `doc.rust-lang.org/{channel}` format string.\n-crate fn doc_rust_lang_org_channel() -> &'static str {\n-    match env!(\"CFG_RELEASE_CHANNEL\") {\n-        \"stable\" => env!(\"CFG_RELEASE_NUM\"),\n-        \"beta\" => \"beta\",\n-        \"nightly\" | \"dev\" => \"nightly\",\n-        // custom build of rustdoc maybe? link to the stable docs just in case\n-        _ => \"\",\n-    }\n-}"}, {"sha": "7b0c0b6699653a1f0a877140a4109b5db4e2c6ff", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -406,18 +406,15 @@ crate fn run_global_ctxt(\n     let mut krate = tcx.sess.time(\"clean_crate\", || clean::krate(&mut ctxt));\n \n     if krate.module.doc_value().map(|d| d.is_empty()).unwrap_or(true) {\n-        let help = format!(\n-            \"The following guide may be of use:\\n\\\n-            https://doc.rust-lang.org/{}/rustdoc/how-to-write-documentation.html\",\n-            crate::doc_rust_lang_org_channel(),\n-        );\n+        let help = \"The following guide may be of use:\\n\\\n+                https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n         tcx.struct_lint_node(\n             crate::lint::MISSING_CRATE_LEVEL_DOCS,\n             DocContext::as_local_hir_id(tcx, krate.module.def_id).unwrap(),\n             |lint| {\n                 let mut diag =\n                     lint.build(\"no documentation found for this crate's top-level module\");\n-                diag.help(&help);\n+                diag.help(help);\n                 diag.emit();\n             },\n         );"}, {"sha": "169ef015fa88c71bff5c03da04b59b27fb83a1b5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -82,8 +82,6 @@ use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGro\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n \n-use crate::clean::utils::doc_rust_lang_org_channel;\n-\n /// A macro to create a FxHashMap.\n ///\n /// Example:\n@@ -606,10 +604,7 @@ fn usage(argv0: &str) {\n     }\n     println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n     println!(\"    @path               Read newline separated options from `path`\\n\");\n-    println!(\n-        \"More information available at https://doc.rust-lang.org/{}/rustdoc/what-is-rustdoc.html\",\n-        doc_rust_lang_org_channel()\n-    );\n+    println!(\"More information available at https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html\")\n }\n \n /// A result type used by several functions under `main()`."}, {"sha": "25b6c187f3b27315d67b68d56f63f96edb39d07e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -2017,14 +2017,7 @@ fn disambiguator_error(\n     msg: &str,\n ) {\n     diag_info.link_range = disambiguator_range;\n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |diag, _sp| {\n-        let msg = format!(\n-            \"see https://doc.rust-lang.org/{}/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators \\\n-             for more info about disambiguators\",\n-            crate::doc_rust_lang_org_channel(),\n-        );\n-        diag.note(&msg);\n-    });\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |_diag, _sp| {});\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions."}, {"sha": "de215b2163bd4e28d1100720c34876aa08ec4f8f", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -10,7 +10,6 @@ note: the lint level is defined here\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to previous error\n "}, {"sha": "195aaca32a27d860b1a4ac9eecddaeec966e73f7", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -10,47 +10,36 @@ note: the lint level is defined here\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `bar`\n   --> $DIR/unknown-disambiguator.rs:3:35\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                                   ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:9:34\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                  ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:9:48\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                                ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:6:31\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                               ^\n-   |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:6:57\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                                                         ^\n-   |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c7bbbf114997d36b612fa344abc1b1a8f7c87ded", "filename": "src/test/ui/error-codes/E0583.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `module_that_doesnt_exist`\n LL | mod module_that_doesnt_exist;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: to create the module `module_that_doesnt_exist`, create file \"$DIR/module_that_doesnt_exist.rs\"\n+   = help: to create the module `module_that_doesnt_exist`, create file \"$DIR/module_that_doesnt_exist.rs\" or \"$DIR/module_that_doesnt_exist/mod.rs\"\n \n error: aborting due to previous error\n "}, {"sha": "2d00aa2a3cfcbb8fc48f30d3a16248480a53e9c6", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,5 @@\n+#[link(name = \"foo\", modifiers = \"\")]\n+//~^ ERROR: native link modifiers are experimental\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "20a2d6a26fa5787dc62f83a2539e7fcd2d65cd64", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: native link modifiers are experimental\n+  --> $DIR/feature-gate-native_link_modifiers.rs:1:22\n+   |\n+LL | #[link(name = \"foo\", modifiers = \"\")]\n+   |                      ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n+   = help: add `#![feature(native_link_modifiers)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4cf8067592ec2c1f53384e6dda5595477d151ecd", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,8 @@\n+#![allow(incomplete_features)]\n+#![feature(native_link_modifiers)]\n+\n+#[link(name = \"foo\", modifiers = \"+as-needed\")]\n+//~^ ERROR: `#[link(modifiers=\"as-needed\")]` is unstable\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "08ce807851b386bdd7a77a03956c496a35429fd3", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[link(modifiers=\"as-needed\")]` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:4:34\n+   |\n+LL | #[link(name = \"foo\", modifiers = \"+as-needed\")]\n+   |                                  ^^^^^^^^^^^^\n+   |\n+   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n+   = help: add `#![feature(native_link_modifiers_as_needed)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b2b1dc28e47b995b1fe835ec4552284eb497a828", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,8 @@\n+#![allow(incomplete_features)]\n+#![feature(native_link_modifiers)]\n+\n+#[link(name = \"foo\", modifiers = \"+bundle\")]\n+//~^ ERROR: `#[link(modifiers=\"bundle\")]` is unstable\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "b3e22b0644aa8c7aa22c201e9a93b84d88f3ac3e", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[link(modifiers=\"bundle\")]` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:4:34\n+   |\n+LL | #[link(name = \"foo\", modifiers = \"+bundle\")]\n+   |                                  ^^^^^^^^^\n+   |\n+   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n+   = help: add `#![feature(native_link_modifiers_bundle)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "042ce0b3f65b2488de2b52996e0c32381bc4322b", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,8 @@\n+#![allow(incomplete_features)]\n+#![feature(native_link_modifiers)]\n+\n+#[link(name = \"foo\", modifiers = \"+verbatim\")]\n+//~^ ERROR: `#[link(modifiers=\"verbatim\")]` is unstable\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "8159416edfa3dec30be1ab4570dff655d514f8a0", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[link(modifiers=\"verbatim\")]` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:4:34\n+   |\n+LL | #[link(name = \"foo\", modifiers = \"+verbatim\")]\n+   |                                  ^^^^^^^^^^^\n+   |\n+   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n+   = help: add `#![feature(native_link_modifiers_verbatim)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ca801e59114328e2f2b4af24d314dec95384fca4", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,8 @@\n+#![allow(incomplete_features)]\n+#![feature(native_link_modifiers)]\n+\n+#[link(name = \"foo\", modifiers = \"+whole-archive\")]\n+//~^ ERROR: `#[link(modifiers=\"whole-archive\")]` is unstable\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "cacaa789ecb799205be0b72c6f3fc41d85333293", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[link(modifiers=\"whole-archive\")]` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_whole_archive.rs:4:34\n+   |\n+LL | #[link(name = \"foo\", modifiers = \"+whole-archive\")]\n+   |                                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n+   = help: add `#![feature(native_link_modifiers_whole_archive)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "301a1e1341eedc692a6ffa72f328f2e8c028a347", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -1,3 +1,5 @@\n+warning: library kind `static-nobundle` has been superseded by specifying `-bundle` on library kind `static`. Try `static:-bundle`\n+\n error[E0658]: kind=\"static-nobundle\" is unstable\n    |\n    = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information"}, {"sha": "e4bfe8e8e05cae507bda21f81492bf3e91ceb0f5", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -1,5 +1,6 @@\n #[link(name = \"foo\", kind = \"static-nobundle\")]\n-//~^ ERROR: kind=\"static-nobundle\" is unstable\n+//~^ WARNING: library kind `static-nobundle` has been superseded by specifying modifier `-bundle` with library kind `static`\n+//~^^ ERROR: kind=\"static-nobundle\" is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "9695618207cc9289127727dee4d08b43c1e25941", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -1,3 +1,9 @@\n+warning: library kind `static-nobundle` has been superseded by specifying modifier `-bundle` with library kind `static`\n+  --> $DIR/feature-gate-static-nobundle.rs:1:22\n+   |\n+LL | #[link(name = \"foo\", kind = \"static-nobundle\")]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0658]: kind=\"static-nobundle\" is unstable\n   --> $DIR/feature-gate-static-nobundle.rs:1:1\n    |\n@@ -7,6 +13,6 @@ LL | #[link(name = \"foo\", kind = \"static-nobundle\")]\n    = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7bc8efd7e4a97ee2cdde8a50e7d015d6968f50da", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `baz`\n LL | pub mod baz;\n    | ^^^^^^^^^^^^\n    |\n-   = help: to create the module `baz`, create file \"$DIR/auxiliary/foo/bar/baz.rs\"\n+   = help: to create the module `baz`, create file \"$DIR/auxiliary/foo/bar/baz.rs\" or \"$DIR/auxiliary/foo/bar/baz/mod.rs\"\n \n error: aborting due to previous error\n "}, {"sha": "31e4206a5463abeafc3656b63a5dc6cddbe959b8", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `missing`\n LL | mod missing;\n    | ^^^^^^^^^^^^\n    |\n-   = help: to create the module `missing`, create file \"$DIR/foo/missing.rs\"\n+   = help: to create the module `missing`, create file \"$DIR/foo/missing.rs\" or \"$DIR/foo/missing/mod.rs\"\n \n error: aborting due to previous error\n "}, {"sha": "9d252398b7a14bf0d492678bfa82da2f75ea9442", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod_inline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `missing`\n LL |     mod missing;\n    |     ^^^^^^^^^^^^\n    |\n-   = help: to create the module `missing`, create file \"$DIR/foo_inline/inline/missing.rs\"\n+   = help: to create the module `missing`, create file \"$DIR/foo_inline/inline/missing.rs\" or \"$DIR/foo_inline/inline/missing/mod.rs\"\n \n error: aborting due to previous error\n "}, {"sha": "6f93d38ca93b0d257f0c7aab2102c83aa06a2216", "filename": "src/test/ui/native-library-link-flags/empty-kind-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,6 @@\n+// Unspecified kind should fail with an error\n+\n+// compile-flags: -l =mylib\n+// error-pattern: unknown library kind ``, expected one of dylib, framework, or static\n+\n+fn main() {}"}, {"sha": "2a4a82d538f5b0707e24516860c7a559ef845f12", "filename": "src/test/ui/native-library-link-flags/empty-kind-1.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,2 @@\n+error: unknown library kind ``, expected one of dylib, framework, or static\n+"}, {"sha": "c0c355770574e9086742169fd5f98c8b4cef7718", "filename": "src/test/ui/native-library-link-flags/empty-kind-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,6 @@\n+// Unspecified kind should fail with an error\n+\n+// compile-flags: -l :+bundle=mylib\n+// error-pattern: unknown library kind ``, expected one of dylib, framework, or static\n+\n+fn main() {}"}, {"sha": "2a4a82d538f5b0707e24516860c7a559ef845f12", "filename": "src/test/ui/native-library-link-flags/empty-kind-2.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -0,0 +1,2 @@\n+error: unknown library kind ``, expected one of dylib, framework, or static\n+"}, {"sha": "62456d518804feb0646358d5412a88b90d79f970", "filename": "src/test/ui/parser/mod_file_not_exist.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `not_a_real_file`\n LL | mod not_a_real_file;\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n+   = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\" or \"$DIR/not_a_real_file/mod.rs\"\n \n error[E0433]: failed to resolve: use of undeclared crate or module `mod_file_aux`\n   --> $DIR/mod_file_not_exist.rs:7:16"}, {"sha": "d5143dbe982ae28703b94d9f45a9e72166e7df79", "filename": "src/test/ui/parser/mod_file_not_exist_windows.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `not_a_real_file`\n LL | mod not_a_real_file;\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n+   = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\" or \"$DIR/not_a_real_file/mod.rs\"\n \n error[E0433]: failed to resolve: use of undeclared crate or module `mod_file_aux`\n   --> $DIR/mod_file_not_exist_windows.rs:7:16"}, {"sha": "dac6e7a3550567f89fcf5241381d2519ca84448d", "filename": "src/test/ui/parser/unsafe-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-mod.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `n`\n LL | unsafe mod n;\n    | ^^^^^^^^^^^^^\n    |\n-   = help: to create the module `n`, create file \"$DIR/n.rs\"\n+   = help: to create the module `n`, create file \"$DIR/n.rs\" or \"$DIR/n/mod.rs\"\n \n error: module cannot be declared unsafe\n   --> $DIR/unsafe-mod.rs:1:1"}, {"sha": "dd0dac95e36463f412007a7e1a0fb170137b2882", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -4,7 +4,7 @@ error[E0583]: file not found for module `\u0159\u0173\u015b\u0165`\n LL | mod \u0159\u0173\u015b\u0165;\n    | ^^^^^^^^^\n    |\n-   = help: to create the module `\u0159\u0173\u015b\u0165`, create file \"$DIR/\u0159\u0173\u015b\u0165.rs\"\n+   = help: to create the module `\u0159\u0173\u015b\u0165`, create file \"$DIR/\u0159\u0173\u015b\u0165.rs\" or \"$DIR/\u0159\u0173\u015b\u0165/mod.rs\"\n \n error[E0754]: trying to load file for module `\u0159\u0173\u015b\u0165` with non-ascii identifier name\n   --> $DIR/mod_file_nonascii_forbidden.rs:1:5"}, {"sha": "eb741e895f1a73420a401f2495c711afe37d9d19", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "patch": "@@ -1 +1 @@\n-Subproject commit 617535393bb5ccc7adf0bac8a3b9a9c306454e79\n+Subproject commit eb741e895f1a73420a401f2495c711afe37d9d19"}]}