{"sha": "6c2d704950a5f05b8ee5468df53d8db9b94e2028", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMmQ3MDQ5NTBhNWYwNWI4ZWU1NDY4ZGY1M2Q4ZGI5Yjk0ZTIwMjg=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-11T09:34:02Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-11T09:34:02Z"}, "message": "Remove env_alloca hack\n\nThis is no longer necessary for LLVM >= 6.", "tree": {"sha": "0bb2945aea7b0016806da3364e85e67d5a746c29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb2945aea7b0016806da3364e85e67d5a746c29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c2d704950a5f05b8ee5468df53d8db9b94e2028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2d704950a5f05b8ee5468df53d8db9b94e2028", "html_url": "https://github.com/rust-lang/rust/commit/6c2d704950a5f05b8ee5468df53d8db9b94e2028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c2d704950a5f05b8ee5468df53d8db9b94e2028/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "706e67b0a0143d651eb03f2fa2c30645899e81ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/706e67b0a0143d651eb03f2fa2c30645899e81ff", "html_url": "https://github.com/rust-lang/rust/commit/706e67b0a0143d651eb03f2fa2c30645899e81ff"}], "stats": {"total": 32, "additions": 2, "deletions": 30}, "files": [{"sha": "94b0a4b59d33d18aea635e40b47a0381ed7a467e", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6c2d704950a5f05b8ee5468df53d8db9b94e2028", "patch": "@@ -10,7 +10,6 @@\n \n use attributes;\n use llvm;\n-use llvm_util;\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n use debuginfo;\n@@ -447,10 +446,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         attributes::apply_target_cpu_attr(self, llfn)\n     }\n \n-    fn closure_env_needs_indirect_debuginfo(&self) -> bool {\n-        llvm_util::get_major_version() < 6\n-    }\n-\n     fn create_used_variable(&self) {\n         let name = const_cstr!(\"llvm.used\");\n         let section = const_cstr!(\"llvm.metadata\");"}, {"sha": "d316b3ec3508c71c69b52edcb1e862c9de2e3489", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=6c2d704950a5f05b8ee5468df53d8db9b94e2028", "patch": "@@ -610,35 +610,13 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             };\n             let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n-            // Store the pointer to closure data in an alloca for debuginfo\n-            // because that's what the llvm.dbg.declare intrinsic expects.\n-\n-            // FIXME(eddyb) this shouldn't be necessary but SROA seems to\n-            // mishandle DW_OP_plus not preceded by DW_OP_deref, i.e., it\n-            // doesn't actually strip the offset when splitting the closure\n-            // environment into its components so it ends up out of bounds.\n-            // (cuviper) It seems to be fine without the alloca on LLVM 6 and later.\n-            let env_alloca = !env_ref && bx.closure_env_needs_indirect_debuginfo();\n-            let env_ptr = if env_alloca {\n-                let scratch = PlaceRef::alloca(bx,\n-                    bx.layout_of(tcx.mk_mut_ptr(arg.layout.ty)),\n-                    \"__debuginfo_env_ptr\");\n-                bx.store(place.llval, scratch.llval, scratch.align);\n-                scratch.llval\n-            } else {\n-                place.llval\n-            };\n-\n             for (i, (decl, ty)) in mir.upvar_decls.iter().zip(upvar_tys).enumerate() {\n                 let byte_offset_of_var_in_env = closure_layout.fields.offset(i).bytes();\n \n                 let ops = bx.debuginfo_upvar_decls_ops_sequence(byte_offset_of_var_in_env);\n \n                 // The environment and the capture can each be indirect.\n-\n-                // FIXME(eddyb) see above why we sometimes have to keep\n-                // a pointer in an alloca for debuginfo atm.\n-                let mut ops = if env_ref || env_alloca { &ops[..] } else { &ops[1..] };\n+                let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n \n                 let ty = if let (true, &ty::Ref(_, ty, _)) = (decl.by_ref, &ty.sty) {\n                     ty\n@@ -648,7 +626,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 };\n \n                 let variable_access = VariableAccess::IndirectVariable {\n-                    alloca: env_ptr,\n+                    alloca: place.llval,\n                     address_operations: &ops\n                 };\n                 bx.declare_local("}, {"sha": "57afb800d014cc7fdead38ea10844bbede3ecebe", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d704950a5f05b8ee5468df53d8db9b94e2028/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=6c2d704950a5f05b8ee5468df53d8db9b94e2028", "patch": "@@ -32,7 +32,6 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn stats(&self) -> &RefCell<Stats>;\n     fn consume_stats(self) -> RefCell<Stats>;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n-    fn closure_env_needs_indirect_debuginfo(&self) -> bool;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_elimination(&self, llfn: Self::Value);\n     fn apply_target_cpu_attr(&self, llfn: Self::Value);"}]}