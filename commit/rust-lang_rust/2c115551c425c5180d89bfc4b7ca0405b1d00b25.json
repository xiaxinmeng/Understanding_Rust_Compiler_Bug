{"sha": "2c115551c425c5180d89bfc4b7ca0405b1d00b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTE1NTUxYzQyNWM1MTgwZDg5YmZjNGI3Y2EwNDA1YjFkMDBiMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T09:15:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T09:15:06Z"}, "message": "Auto merge of #46272 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\n- Successful merges: #46201, #46224, #46234, #46252, #46259, #46264, #46269\n- Failed merges:", "tree": {"sha": "5f874ca9ac0a2a44cd906ba2b7317cbe85f9996c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f874ca9ac0a2a44cd906ba2b7317cbe85f9996c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c115551c425c5180d89bfc4b7ca0405b1d00b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c115551c425c5180d89bfc4b7ca0405b1d00b25", "html_url": "https://github.com/rust-lang/rust/commit/2c115551c425c5180d89bfc4b7ca0405b1d00b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c115551c425c5180d89bfc4b7ca0405b1d00b25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4dc289f4bd5bff48b4eba393521b3eb899723a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dc289f4bd5bff48b4eba393521b3eb899723a8", "html_url": "https://github.com/rust-lang/rust/commit/d4dc289f4bd5bff48b4eba393521b3eb899723a8"}, {"sha": "0d664f9d805fa3faa059c792be4ecd47fb4cd1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d664f9d805fa3faa059c792be4ecd47fb4cd1ad", "html_url": "https://github.com/rust-lang/rust/commit/0d664f9d805fa3faa059c792be4ecd47fb4cd1ad"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "589aa1afe35ec7389bcafc875ffb130826af80ba", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -129,6 +129,9 @@ CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvars64.\n python x.py build\n ```\n \n+If you are seeing build failure when compiling `rustc_binaryen`, make sure the path\n+length of the rust folder is not longer than 22 characters.\n+\n #### Specifying an ABI\n [specifying-an-abi]: #specifying-an-abi\n "}, {"sha": "a092bfb3b0a8a5899da6d8d5955cd5101bc4cc6e", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -236,6 +236,8 @@\n //! writeln!     // same as write but appends a newline\n //! print!       // the format string is printed to the standard output\n //! println!     // same as print but appends a newline\n+//! eprint!      // the format string is printed to the standard error\n+//! eprintln!    // same as eprint but appends a newline\n //! format_args! // described below.\n //! ```\n //!\n@@ -264,6 +266,11 @@\n //! print!(\"Hello {}!\", \"world\");\n //! println!(\"I have a newline {}\", \"character at the end\");\n //! ```\n+//! ### `eprint!`\n+//!\n+//! The [`eprint!`] and [`eprintln!`] macros are identical to\n+//! [`print!`] and [`println!`], respectively, except they emit their\n+//! output to stderr.\n //!\n //! ### `format_args!`\n //!\n@@ -490,7 +497,10 @@\n //! [`writeln!`]: ../../std/macro.writeln.html\n //! [`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt\n //! [`std::io::Write`]: ../../std/io/trait.Write.html\n+//! [`print!`]: ../../std/macro.print.html\n //! [`println!`]: ../../std/macro.println.html\n+//! [`eprint!`]: ../../std/macro.eprint.html\n+//! [`eprintln!`]: ../../std/macro.eprintln.html\n //! [`write!`]: ../../std/macro.write.html\n //! [`format_args!`]: ../../std/macro.format_args.html\n //! [`fmt::Arguments`]: struct.Arguments.html"}, {"sha": "99ad424cc20b78b57a9002cacea8a9d1f94fbe36", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -1288,6 +1288,8 @@ mod tests {\n             let mut node_ptr: &Node<T>;\n             match list.head {\n                 None => {\n+                    // tail node should also be None.\n+                    assert!(list.tail.is_none());\n                     assert_eq!(0, list.len);\n                     return;\n                 }\n@@ -1314,6 +1316,11 @@ mod tests {\n                     }\n                 }\n             }\n+\n+            // verify that the tail node points to the last node.\n+            let tail = list.tail.as_ref().expect(\"some tail node\").as_ref();\n+            assert_eq!(tail as *const Node<T>, node_ptr as *const Node<T>);\n+            // check that len matches interior links.\n             assert_eq!(len, list.len);\n         }\n     }"}, {"sha": "0b0724b7a26ff0894b5b384dd45827af3e6d38ce", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -314,7 +314,7 @@ pub trait Copy : Clone {\n ///\n /// For cases when one does need thread-safe interior mutability,\n /// Rust provides [atomic data types], as well as explicit locking via\n-/// [`sync::Mutex`][mutex] and [`sync::RWLock`][rwlock]. These types\n+/// [`sync::Mutex`][mutex] and [`sync::RwLock`][rwlock]. These types\n /// ensure that any mutation cannot cause data races, hence the types\n /// are `Sync`. Likewise, [`sync::Arc`][arc] provides a thread-safe\n /// analogue of [`Rc`][rc]."}, {"sha": "f8933d06360e0acec355d6aeefc61ee3aadb8d98", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -40,7 +40,7 @@ macro_rules! language_item_table {\n \n \n enum_from_u32! {\n-    #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n     pub enum LangItem {\n         $($variant,)*\n     }"}, {"sha": "d66d4b14d693d993ed21b7859c4cc89a64a886ad", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -10,10 +10,10 @@\n \n //! Performs various peephole optimizations.\n \n-use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n+use rustc::mir::{Constant, Literal, Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::ty::{TyCtxt, TypeVariants};\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n use transform::{MirPass, MirSource};\n@@ -44,11 +44,11 @@ impl MirPass for InstCombine {\n     }\n }\n \n-pub struct InstCombineVisitor {\n-    optimizations: OptimizationList,\n+pub struct InstCombineVisitor<'tcx> {\n+    optimizations: OptimizationList<'tcx>,\n }\n \n-impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n+impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         if self.optimizations.and_stars.remove(&location) {\n             debug!(\"Replacing `&*`: {:?}\", rvalue);\n@@ -62,6 +62,11 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n             *rvalue = Rvalue::Use(Operand::Consume(new_lvalue))\n         }\n \n+        if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n+            debug!(\"Replacing `Len([_; N])`: {:?}\", rvalue);\n+            *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n@@ -70,7 +75,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n     mir: &'b Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    optimizations: OptimizationList,\n+    optimizations: OptimizationList<'tcx>,\n }\n \n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n@@ -93,11 +98,23 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n             }\n         }\n \n+        if let Rvalue::Len(ref lvalue) = *rvalue {\n+            let lvalue_ty = lvalue.ty(&self.mir.local_decls, self.tcx).to_ty(self.tcx);\n+            if let TypeVariants::TyArray(_, len) = lvalue_ty.sty {\n+                let span = self.mir.source_info(location).span;\n+                let ty = self.tcx.types.usize;\n+                let literal = Literal::Value { value: len };\n+                let constant = Constant { span, ty, literal };\n+                self.optimizations.arrays_lengths.insert(location, constant);\n+            }\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n \n #[derive(Default)]\n-struct OptimizationList {\n+struct OptimizationList<'tcx> {\n     and_stars: FxHashSet<Location>,\n+    arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n }"}, {"sha": "b7a3695b470966f99335d88fa3cc1b6910bea85f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -441,7 +441,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// # }\n /// ```\n ///\n-/// Read from `&str` because [`&[u8]`] implements [`Read`]:\n+/// Read from `&str` because [`&[u8]`] implements `Read`:\n ///\n /// ```\n /// # use std::io;\n@@ -465,7 +465,6 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// [`BufRead`]: trait.BufRead.html\n /// [`BufReader`]: struct.BufReader.html\n /// [`&[u8]`]: primitive.slice.html\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Read {"}, {"sha": "136c3493fa40705b155928b0bd98989dafd25372", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c115551c425c5180d89bfc4b7ca0405b1d00b25/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=2c115551c425c5180d89bfc4b7ca0405b1d00b25", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn norm2(x: [f32; 2]) -> f32 {\n+    let a = x[0];\n+    let b = x[1];\n+    a*a + b*b\n+}\n+\n+fn main() {\n+    assert_eq!(norm2([3.0, 4.0]), 5.0*5.0);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.norm2.InstCombine.before.mir\n+//     _5 = Len(_1);\n+//     ...\n+//     _10 = Len(_1);\n+// END rustc.norm2.InstCombine.before.mir\n+\n+// START rustc.norm2.InstCombine.after.mir\n+//     _5 = const 2usize;\n+//     ...\n+//     _10 = const 2usize;\n+// END rustc.norm2.InstCombine.after.mir"}]}