{"sha": "00b380b8cad11abd07299fd181173b3c9b1d869e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjM4MGI4Y2FkMTFhYmQwNzI5OWZkMTgxMTczYjNjOWIxZDg2OWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-27T11:41:53Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-27T12:03:42Z"}, "message": "More ensure stack to avoid segfault with increased `recursion_limit`", "tree": {"sha": "8ccf90c89b07214ff249945ea6604df9841b86b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ccf90c89b07214ff249945ea6604df9841b86b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b380b8cad11abd07299fd181173b3c9b1d869e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl8ewp4ACgkQsJhshcDi\n2qF+sA//dNXOPQDvbT4KfOx/hPa4mz0jILgygbe2mZRMibu88kitnTeHEOjW5Y8z\n7o3glTbfHLGLAOOYMvic4Bw+kCI9xkrALp1v8I5X0sKRIXOo1B+cbhEb+nxEdg+P\naRwUfNGpPNseP3u1yQncAFDNZ7fSMfcwH2nFz84HeZPQAHEv+CgJlfkFametcIm+\nysx04ZJ/bY2/RSGxppgwfVdaSEWKmTO6R954Lynh+rTIDE9zonJS/zNGb+t2ZlYl\nyI0WoiHFFY9+uZ7ScJcU7u2wLXKkiIDwGDrIcYYp8bBeWkt4j36Jl8scXex0jT77\ne3dcHyb7yZZrK2ydqT7PaDOkMWDiVqYHodVcQU307uluDGjFVQN0SlI9OJWcorVL\nP1Qnr89iBwPnx3XVq/jS3C6Kc/GlkJT2nzIYai9atECYlCK6pQ+yYuCfZCRDHRgS\nVjT5bOUm7uKslhvqEswulGtpXu0A3Y6o+dz4RrR/jQizK6bwhY01+M18LDPP795L\nn5IEBTHDnHRTFZOkJL5zj7qLAGbwb5wvyy3/fv80b8vuxj6pzo1kJTsCE3So4jPf\nut5i/XQGDjDpYSewio+oz+FtrFJ/IgrnlmmDI6ijuWeXVHVfpW5fs37cAcp4a0XS\nU7L11shgitow4cbytYRFovK8FvjR7fba0jPxlal7TGfqscJLQ3o=\n=WM0V\n-----END PGP SIGNATURE-----", "payload": "tree 8ccf90c89b07214ff249945ea6604df9841b86b4\nparent 1841fb97e17f5e41c609cd11ab114c7ac1f3de2a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1595850113 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1595851422 +0900\n\nMore ensure stack to avoid segfault with increased `recursion_limit`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b380b8cad11abd07299fd181173b3c9b1d869e", "html_url": "https://github.com/rust-lang/rust/commit/00b380b8cad11abd07299fd181173b3c9b1d869e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b380b8cad11abd07299fd181173b3c9b1d869e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "html_url": "https://github.com/rust-lang/rust/commit/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "432abee6d1cf910d71fa26d35c360e111e848515", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/00b380b8cad11abd07299fd181173b3c9b1d869e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b380b8cad11abd07299fd181173b3c9b1d869e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=00b380b8cad11abd07299fd181173b3c9b1d869e", "patch": "@@ -7,6 +7,7 @@ use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_projection_type;\n \n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -1912,12 +1913,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n-                    self.note_obligation_cause_code(\n-                        err,\n-                        &parent_predicate,\n-                        &data.parent_code,\n-                        obligated_types,\n-                    );\n+                    // #74711: avoid a stack overflow\n+                    ensure_sufficient_stack(|| {\n+                        self.note_obligation_cause_code(\n+                            err,\n+                            &parent_predicate,\n+                            &data.parent_code,\n+                            obligated_types,\n+                        )\n+                    });\n                 }\n             }\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {\n@@ -1928,22 +1932,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     parent_trait_ref.skip_binder().self_ty()\n                 ));\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::DerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!("}]}