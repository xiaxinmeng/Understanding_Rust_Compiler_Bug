{"sha": "0a913fd11194faff9c0100bc78f2d4fe682075aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTEzZmQxMTE5NGZhZmY5YzAxMDBiYzc4ZjJkNGZlNjgyMDc1YWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-28T18:14:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-28T18:14:53Z"}, "message": "Merge #7812\n\n7812: Use consistent naming for assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ab17d9e641f19bcf514673c9ed5e9c35646fe269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab17d9e641f19bcf514673c9ed5e9c35646fe269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a913fd11194faff9c0100bc78f2d4fe682075aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgO92dCRBK7hj4Ov3rIwAAdHIIAJyqGAqETxn3S/vlhq3qA/52\nFSItLb8+cFmHl2LBWdpQLWK/NPmm8UhBFC+TWIka4653jBcS9R3alkDF7u8FINu+\nQ+n11wMpeQYoCr/uAvn4Qx5IxfexGlkISvJEb9m3VH+4XgVyho4CMwq5WkOlmouy\n0gZYvkl410KgHNCNQyef8Audz4QLeccmsOomCblTwF6qf29GF7/A1+dyYJL6nS19\nCEYHCr398ifIz/Z7onNYwz14aLrI6eWVilUSNswY5HzFFIFDceJQmdZPG814gF1T\nViRbPSGXx7FXwnJQIsgbN0YW1xFcmju91Rvu4WWDhso1q79fjZstFGqmdTDhV2Q=\n=x/zj\n-----END PGP SIGNATURE-----\n", "payload": "tree ab17d9e641f19bcf514673c9ed5e9c35646fe269\nparent 358b9a50f73000711371a82546161956f53f8c9c\nparent 406d96c7d4c3a78d42b58a91ba633333ec37d487\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614536093 +0000\ncommitter GitHub <noreply@github.com> 1614536093 +0000\n\nMerge #7812\n\n7812: Use consistent naming for assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a913fd11194faff9c0100bc78f2d4fe682075aa", "html_url": "https://github.com/rust-lang/rust/commit/0a913fd11194faff9c0100bc78f2d4fe682075aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a913fd11194faff9c0100bc78f2d4fe682075aa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "358b9a50f73000711371a82546161956f53f8c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/358b9a50f73000711371a82546161956f53f8c9c", "html_url": "https://github.com/rust-lang/rust/commit/358b9a50f73000711371a82546161956f53f8c9c"}, {"sha": "406d96c7d4c3a78d42b58a91ba633333ec37d487", "url": "https://api.github.com/repos/rust-lang/rust/commits/406d96c7d4c3a78d42b58a91ba633333ec37d487", "html_url": "https://github.com/rust-lang/rust/commit/406d96c7d4c3a78d42b58a91ba633333ec37d487"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "27da28bc0aa51ba729eb8574b7dc3905f779ae55", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "renamed", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=0a913fd11194faff9c0100bc78f2d4fe682075aa", "patch": "@@ -3,17 +3,18 @@ use hir::known;\n use ide_db::helpers::FamousDefs;\n use stdx::format_to;\n use syntax::{ast, AstNode};\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: convert_for_to_iter_for_each\n+// Assist: replace_for_loop_with_for_each\n //\n // Converts a for loop into a for_each loop on the Iterator.\n //\n // ```\n // fn main() {\n //     let x = vec![1, 2, 3];\n-//     for $0v in x {\n+//     for$0 v in x {\n //         let y = v * 2;\n //     }\n // }\n@@ -27,15 +28,19 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //     });\n // }\n // ```\n-pub(crate) fn convert_for_to_iter_for_each(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn replace_for_loop_with_for_each(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let for_loop = ctx.find_node_at_offset::<ast::ForExpr>()?;\n     let iterable = for_loop.iterable()?;\n     let pat = for_loop.pat()?;\n     let body = for_loop.loop_body()?;\n+    if body.syntax().text_range().start() < ctx.offset() {\n+        mark::hit!(not_available_in_body);\n+        return None;\n+    }\n \n     acc.add(\n-        AssistId(\"convert_for_to_iter_for_each\", AssistKind::RefactorRewrite),\n-        \"Convert a for loop into an Iterator::for_each\",\n+        AssistId(\"replace_for_loop_with_for_each\", AssistKind::RefactorRewrite),\n+        \"Replace this for loop with `Iterator::for_each`\",\n         for_loop.syntax().text_range(),\n         |builder| {\n             let mut buf = String::new();\n@@ -145,13 +150,13 @@ pub struct NoIterMethod;\n             FamousDefs::FIXTURE,\n             EMPTY_ITER_FIXTURE\n         );\n-        check_assist(convert_for_to_iter_for_each, before, after);\n+        check_assist(replace_for_loop_with_for_each, before, after);\n     }\n \n     #[test]\n     fn test_not_for() {\n         check_assist_not_applicable(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n let mut x = vec![1, 2, 3];\n x.iter_mut().$0for_each(|v| *v *= 2);\n@@ -162,7 +167,7 @@ x.iter_mut().$0for_each(|v| *v *= 2);\n     #[test]\n     fn test_simple_for() {\n         check_assist(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n fn main() {\n     let x = vec![1, 2, 3];\n@@ -180,6 +185,21 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn not_available_in_body() {\n+        mark::check!(not_available_in_body);\n+        check_assist_not_applicable(\n+            replace_for_loop_with_for_each,\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for v in x {\n+        $0v *= 2;\n+    }\n+}\",\n+        )\n+    }\n+\n     #[test]\n     fn test_for_borrowed() {\n         check_assist_with_fixtures(\n@@ -255,7 +275,7 @@ fn main() {\n     #[test]\n     fn test_for_borrowed_mut_behind_var() {\n         check_assist(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n fn main() {\n     let x = vec![1, 2, 3];", "previous_filename": "crates/ide_assists/src/handlers/convert_for_to_iter_for_each.rs"}, {"sha": "be7e724b568e5ac708eac952b2fc454db2799fdd", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=0a913fd11194faff9c0100bc78f2d4fe682075aa", "patch": "@@ -1,5 +1,6 @@\n use std::iter::once;\n \n+use ide_db::ty_filter::TryEnum;\n use syntax::{\n     ast::{\n         self,\n@@ -10,7 +11,6 @@ use syntax::{\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n-use ide_db::ty_filter::TryEnum;\n \n // Assist: replace_let_with_if_let\n //"}, {"sha": "53542d43347c192e9951f42e13db243eef5193b5", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=0a913fd11194faff9c0100bc78f2d4fe682075aa", "patch": "@@ -114,7 +114,6 @@ mod handlers {\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_visibility;\n-    mod convert_for_to_iter_for_each;\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n@@ -132,8 +131,8 @@ mod handlers {\n     mod generate_enum_projection_method;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n-    mod generate_getter;\n     mod generate_getter_mut;\n+    mod generate_getter;\n     mod generate_impl;\n     mod generate_new;\n     mod generate_setter;\n@@ -156,6 +155,7 @@ mod handlers {\n     mod reorder_fields;\n     mod reorder_impl;\n     mod replace_derive_with_manual_impl;\n+    mod replace_for_loop_with_for_each;\n     mod replace_if_let_with_match;\n     mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n@@ -177,11 +177,9 @@ mod handlers {\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,\n-            convert_for_to_iter_for_each::convert_for_to_iter_for_each,\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n-            move_module_to_file::move_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n@@ -191,12 +189,12 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n-            generate_enum_projection_method::generate_enum_try_into_method,\n             generate_enum_projection_method::generate_enum_as_method,\n+            generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_getter::generate_getter,\n             generate_getter_mut::generate_getter_mut,\n+            generate_getter::generate_getter,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             generate_setter::generate_setter,\n@@ -210,6 +208,7 @@ mod handlers {\n             move_bounds::move_bounds_to_where_clause,\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n+            move_module_to_file::move_module_to_file,\n             pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,\n@@ -221,6 +220,7 @@ mod handlers {\n             reorder_fields::reorder_fields,\n             reorder_impl::reorder_impl,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n+            replace_for_loop_with_for_each::replace_for_loop_with_for_each,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,"}, {"sha": "b7f6167607a1d243209a18d4a1921f7cddc4d18d", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=0a913fd11194faff9c0100bc78f2d4fe682075aa", "patch": "@@ -190,8 +190,8 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }"}, {"sha": "4f007aa48bb4998094acf78ffce2158dae1af46f", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a913fd11194faff9c0100bc78f2d4fe682075aa/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0a913fd11194faff9c0100bc78f2d4fe682075aa", "patch": "@@ -192,29 +192,6 @@ pub(crate) fn frobnicate() {}\n     )\n }\n \n-#[test]\n-fn doctest_convert_for_to_iter_for_each() {\n-    check_doc_test(\n-        \"convert_for_to_iter_for_each\",\n-        r#####\"\n-fn main() {\n-    let x = vec![1, 2, 3];\n-    for $0v in x {\n-        let y = v * 2;\n-    }\n-}\n-\"#####,\n-        r#####\"\n-fn main() {\n-    let x = vec![1, 2, 3];\n-    x.into_iter().for_each(|v| {\n-        let y = v * 2;\n-    });\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_convert_integer_literal() {\n     check_doc_test(\n@@ -1179,6 +1156,29 @@ impl Debug for S {\n     )\n }\n \n+#[test]\n+fn doctest_replace_for_loop_with_for_each() {\n+    check_doc_test(\n+        \"replace_for_loop_with_for_each\",\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for$0 v in x {\n+        let y = v * 2;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.into_iter().for_each(|v| {\n+        let y = v * 2;\n+    });\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_if_let_with_match() {\n     check_doc_test("}]}