{"sha": "7b4b4ef02681053299dda5111c0d4b0113e29224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNGI0ZWYwMjY4MTA1MzI5OWRkYTUxMTFjMGQ0YjAxMTNlMjkyMjQ=", "commit": {"author": {"name": "Michael-F-Bryan", "email": "michaelfbryan@gmail.com", "date": "2021-01-02T05:47:35Z"}, "committer": {"name": "Michael-F-Bryan", "email": "michaelfbryan@gmail.com", "date": "2021-01-04T20:18:57Z"}, "message": "Created an inline-function assist (fixes #6863)", "tree": {"sha": "1c84b3438d96f522efd1d2e7039c585291e56391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c84b3438d96f522efd1d2e7039c585291e56391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b4b4ef02681053299dda5111c0d4b0113e29224", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEESFmVaIvsl13ZhFRh6cYCsNmpmNwFAl/zeDMACgkQ6cYCsNmp\nmNy6ewf9EoPmsu1bG/1SErKB+yzi8r7zcTEyqf+jeO3npbIfZ7wiX/c3ehuK0DHr\nIC2vD+BRr5hqBzsGt4SOMMjWxQt41S4d2I4dglTSylN09Xb6DwkwBJ4xrWmEFl1k\nm8Za91ajns3Y6tnw4PqpfEe/u3EQsxM2LPBwmZikFwI6YiaXoRXxHgWekcTD6FhY\nug1KU/WGyn6AGJawD+hq/19dyffxcupsHuY8KL8EHXBXyZskGhQc64bO5BPMo1EW\nV0kSb66JfSbtqFpjvAmiwlxXhHiZ8U/eDhNZF7TqiWDaLl4b7M0XhuFgaSxCZC5u\nsJuMdumjHovnjxymr/u7O2vURUQLFw==\n=I6Sl\n-----END PGP SIGNATURE-----", "payload": "tree 1c84b3438d96f522efd1d2e7039c585291e56391\nparent 0708bfeb7270923be5a2059ad5b99de183e667ba\nauthor Michael-F-Bryan <michaelfbryan@gmail.com> 1609566455 +0800\ncommitter Michael-F-Bryan <michaelfbryan@gmail.com> 1609791537 +0800\n\nCreated an inline-function assist (fixes #6863)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4b4ef02681053299dda5111c0d4b0113e29224", "html_url": "https://github.com/rust-lang/rust/commit/7b4b4ef02681053299dda5111c0d4b0113e29224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b4b4ef02681053299dda5111c0d4b0113e29224/comments", "author": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Michael-F-Bryan", "id": 17380079, "node_id": "MDQ6VXNlcjE3MzgwMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/17380079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Bryan", "html_url": "https://github.com/Michael-F-Bryan", "followers_url": "https://api.github.com/users/Michael-F-Bryan/followers", "following_url": "https://api.github.com/users/Michael-F-Bryan/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Bryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Bryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Bryan/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Bryan/orgs", "repos_url": "https://api.github.com/users/Michael-F-Bryan/repos", "events_url": "https://api.github.com/users/Michael-F-Bryan/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Bryan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0708bfeb7270923be5a2059ad5b99de183e667ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0708bfeb7270923be5a2059ad5b99de183e667ba", "html_url": "https://github.com/rust-lang/rust/commit/0708bfeb7270923be5a2059ad5b99de183e667ba"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "2edf252b7f3e040348bdb6001628994f2d0816c5", "filename": "crates/assists/src/handlers/inline_function.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs?ref=7b4b4ef02681053299dda5111c0d4b0113e29224", "patch": "@@ -0,0 +1,202 @@\n+use ast::make;\n+use hir::{HasSource, PathResolution};\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, ArgListOwner},\n+    AstNode,\n+};\n+use test_utils::mark;\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: inline_function\n+//\n+// Inlines a function body.\n+//\n+// ```\n+// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn main() {\n+//     let x = add<|>(1, 2);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn main() {\n+//     let x = {\n+//         let a = 1;\n+//         let b = 2;\n+//         a + b\n+//     };\n+// }\n+// ```\n+pub(crate) fn inline_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n+    let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n+    let path = path_expr.path()?;\n+\n+    let function = match ctx.sema.resolve_path(&path)? {\n+        PathResolution::Def(hir::ModuleDef::Function(f)) => f,\n+        _ => return None,\n+    };\n+\n+    let function_source = function.source(ctx.db())?;\n+    let arguments: Vec<_> = call.arg_list()?.args().collect();\n+    let parameters = function_parameter_patterns(&function_source.value)?;\n+\n+    if arguments.len() != parameters.len() {\n+        // Can't inline the function because they've passed the wrong number of\n+        // arguments to this function\n+        mark::hit!(inline_function_incorrect_number_of_arguments);\n+        return None;\n+    }\n+\n+    let new_bindings = parameters.into_iter().zip(arguments);\n+\n+    let body = function_source.value.body()?;\n+\n+    acc.add(\n+        AssistId(\"inline_function\", AssistKind::RefactorInline),\n+        format!(\"Inline `{}`\", path),\n+        call.syntax().text_range(),\n+        |builder| {\n+            let mut statements: Vec<ast::Stmt> = Vec::new();\n+\n+            for (pattern, value) in new_bindings {\n+                statements.push(make::let_stmt(pattern, Some(value)).into());\n+            }\n+\n+            statements.extend(body.statements());\n+\n+            let original_indentation = call.indent_level();\n+            let replacement = make::block_expr(statements, body.expr())\n+                .reset_indent()\n+                .indent(original_indentation);\n+\n+            builder.replace_ast(ast::Expr::CallExpr(call), ast::Expr::BlockExpr(replacement));\n+        },\n+    )\n+}\n+\n+fn function_parameter_patterns(value: &ast::Fn) -> Option<Vec<ast::Pat>> {\n+    let mut patterns = Vec::new();\n+\n+    for param in value.param_list()?.params() {\n+        let pattern = param.pat()?;\n+        patterns.push(pattern);\n+    }\n+\n+    Some(patterns)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn no_args_or_return_value_gets_inlined_without_block() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo() { println!(\"Hello, World!\"); }\n+fn main() {\n+    fo<|>o();\n+}\n+\"#,\n+            r#\"\n+fn foo() { println!(\"Hello, World!\"); }\n+fn main() {\n+    {\n+        println!(\"Hello, World!\");\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn args_with_side_effects() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn main() {\n+    foo<|>(String::from(\"Michael\"));\n+}\n+\"#,\n+            r#\"\n+fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn main() {\n+    {\n+        let name = String::from(\"Michael\");\n+        println!(\"Hello, {}!\", name);\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn method_inlining_isnt_supported() {\n+        check_assist_not_applicable(\n+            inline_function,\n+            r\"\n+struct Foo;\n+impl Foo { fn bar(&self) {} }\n+\n+fn main() { Foo.bar<|>(); }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n+        mark::check!(inline_function_incorrect_number_of_arguments);\n+        check_assist_not_applicable(\n+            inline_function,\n+            r#\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() { let x = add<|>(42); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn function_with_multiple_statements() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo(a: u32, b: u32) -> u32 {\n+    let x = a + b;\n+    let y = x - b;\n+    x * y\n+}\n+\n+fn main() {\n+    let x = foo<|>(1, 2);\n+}\n+\"#,\n+            r#\"\n+fn foo(a: u32, b: u32) -> u32 {\n+    let x = a + b;\n+    let y = x - b;\n+    x * y\n+}\n+\n+fn main() {\n+    let x = {\n+        let a = 1;\n+        let b = 2;\n+        let x = a + b;\n+        let y = x - b;\n+        x * y\n+    };\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "9c2a9573574c52ce8f72173149409bfeb4878df6", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=7b4b4ef02681053299dda5111c0d4b0113e29224", "patch": "@@ -131,6 +131,7 @@ mod handlers {\n     mod generate_impl;\n     mod generate_new;\n     mod infer_function_return_type;\n+    mod inline_function;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -183,6 +184,7 @@ mod handlers {\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             infer_function_return_type::infer_function_return_type,\n+            inline_function::inline_function,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "b15352cf32ccb3cb6605ebe94c1a67ec47a8d69d", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4b4ef02681053299dda5111c0d4b0113e29224/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=7b4b4ef02681053299dda5111c0d4b0113e29224", "patch": "@@ -530,6 +530,29 @@ fn foo() -> i32 { 42i32 }\n     )\n }\n \n+#[test]\n+fn doctest_inline_function() {\n+    check_doc_test(\n+        \"inline_function\",\n+        r#####\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() {\n+    let x = add<|>(1, 2);\n+}\n+\"#####,\n+        r#####\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() {\n+    let x = {\n+        let a = 1;\n+        let b = 2;\n+        a + b\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_local_variable() {\n     check_doc_test("}]}