{"sha": "4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmU2MDJjOTQxOWNjNWVkNDY0MzQzYjIzNzNjN2ZlODZmYjg5ZDY=", "commit": {"author": {"name": "Benjamin Bouvier", "email": "public@benj.me", "date": "2021-02-11T16:34:56Z"}, "committer": {"name": "Benjamin Bouvier", "email": "public@benj.me", "date": "2021-02-13T17:20:46Z"}, "message": "Allow automatically detect the rustc-src directory (fixes #3517).\n\nIf the configured rustcSource is set to \"discover\", try to automatically\ndetect a source from the sysroot rustc directory.", "tree": {"sha": "ed4148a4ccb0a7e81cb897f611e66e40bf492488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4148a4ccb0a7e81cb897f611e66e40bf492488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "html_url": "https://github.com/rust-lang/rust/commit/4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/comments", "author": {"login": "bnjbvr", "id": 1180019, "node_id": "MDQ6VXNlcjExODAwMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1180019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjbvr", "html_url": "https://github.com/bnjbvr", "followers_url": "https://api.github.com/users/bnjbvr/followers", "following_url": "https://api.github.com/users/bnjbvr/following{/other_user}", "gists_url": "https://api.github.com/users/bnjbvr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjbvr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjbvr/subscriptions", "organizations_url": "https://api.github.com/users/bnjbvr/orgs", "repos_url": "https://api.github.com/users/bnjbvr/repos", "events_url": "https://api.github.com/users/bnjbvr/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjbvr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjbvr", "id": 1180019, "node_id": "MDQ6VXNlcjExODAwMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1180019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjbvr", "html_url": "https://github.com/bnjbvr", "followers_url": "https://api.github.com/users/bnjbvr/followers", "following_url": "https://api.github.com/users/bnjbvr/following{/other_user}", "gists_url": "https://api.github.com/users/bnjbvr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjbvr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjbvr/subscriptions", "organizations_url": "https://api.github.com/users/bnjbvr/orgs", "repos_url": "https://api.github.com/users/bnjbvr/repos", "events_url": "https://api.github.com/users/bnjbvr/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjbvr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2967e783ac53e89f06a8f8bd1afc12433311fded", "url": "https://api.github.com/repos/rust-lang/rust/commits/2967e783ac53e89f06a8f8bd1afc12433311fded", "html_url": "https://github.com/rust-lang/rust/commit/2967e783ac53e89f06a8f8bd1afc12433311fded"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "1d8d34a0b8562ffe434180a67b0dd533ab008842", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -44,6 +44,15 @@ impl ops::Index<Target> for CargoWorkspace {\n     }\n }\n \n+/// Describes how to set the rustc source directory.\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum RustcSource {\n+    /// Explicit path for the rustc source directory.\n+    Path(AbsPathBuf),\n+    /// Try to automatically detect where the rustc source directory is.\n+    Discover,\n+}\n+\n #[derive(Default, Clone, Debug, PartialEq, Eq)]\n pub struct CargoConfig {\n     /// Do not activate the `default` feature.\n@@ -64,7 +73,7 @@ pub struct CargoConfig {\n     pub no_sysroot: bool,\n \n     /// rustc private crate source\n-    pub rustc_source: Option<AbsPathBuf>,\n+    pub rustc_source: Option<RustcSource>,\n }\n \n pub type Package = Idx<PackageData>;"}, {"sha": "a5b35ed953f42bf6b5ad94d73c80e6836596d8dc", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -21,8 +21,8 @@ use rustc_hash::FxHashSet;\n pub use crate::{\n     build_data::{BuildDataCollector, BuildDataResult},\n     cargo_workspace::{\n-        CargoConfig, CargoWorkspace, Package, PackageData, PackageDependency, Target, TargetData,\n-        TargetKind,\n+        CargoConfig, CargoWorkspace, Package, PackageData, PackageDependency, RustcSource, Target,\n+        TargetData, TargetKind,\n     },\n     project_json::{ProjectJson, ProjectJsonData},\n     sysroot::Sysroot,"}, {"sha": "3b0ff506d49a1914cdf13fd97c4bd1ce01baccbc", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -51,11 +51,18 @@ impl Sysroot {\n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n         log::debug!(\"Discovering sysroot for {}\", cargo_toml.display());\n         let current_dir = cargo_toml.parent().unwrap();\n-        let sysroot_src_dir = discover_sysroot_src_dir(current_dir)?;\n+        let sysroot_dir = discover_sysroot_dir(current_dir)?;\n+        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, current_dir)?;\n         let res = Sysroot::load(&sysroot_src_dir)?;\n         Ok(res)\n     }\n \n+    pub fn discover_rustc(cargo_toml: &AbsPath) -> Option<AbsPathBuf> {\n+        log::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n+        let current_dir = cargo_toml.parent().unwrap();\n+        discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n+    }\n+\n     pub fn load(sysroot_src_dir: &AbsPath) -> Result<Sysroot> {\n         let mut sysroot = Sysroot { crates: Arena::default() };\n \n@@ -110,7 +117,18 @@ impl Sysroot {\n     }\n }\n \n-fn discover_sysroot_src_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n+fn discover_sysroot_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n+    let mut rustc = Command::new(toolchain::rustc());\n+    rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n+    log::debug!(\"Discovering sysroot by {:?}\", rustc);\n+    let stdout = utf8_stdout(rustc)?;\n+    Ok(AbsPathBuf::assert(PathBuf::from(stdout)))\n+}\n+\n+fn discover_sysroot_src_dir(\n+    sysroot_path: &AbsPathBuf,\n+    current_dir: &AbsPath,\n+) -> Result<AbsPathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         let path = AbsPathBuf::try_from(path.as_str())\n             .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n@@ -122,14 +140,6 @@ fn discover_sysroot_src_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n         log::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n     }\n \n-    let sysroot_path = {\n-        let mut rustc = Command::new(toolchain::rustc());\n-        rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n-        log::debug!(\"Discovering sysroot by {:?}\", rustc);\n-        let stdout = utf8_stdout(rustc)?;\n-        AbsPathBuf::assert(PathBuf::from(stdout))\n-    };\n-\n     get_rust_src(&sysroot_path)\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n@@ -149,6 +159,16 @@ try installing the Rust source the same way you installed rustc\",\n         })\n }\n \n+fn get_rustc_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n+    let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n+    log::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n+    if rustc_src.exists() {\n+        Some(rustc_src)\n+    } else {\n+        None\n+    }\n+}\n+\n fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     // Try the new path first since the old one still exists.\n     let rust_src = sysroot_path.join(\"lib/rustlib/src/rust\");"}, {"sha": "0220efdb4e5bc97a73420ea32b7ea0c44104acc7", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -114,6 +114,7 @@ impl ProjectWorkspace {\n                             cargo_version\n                         )\n                     })?;\n+\n                 let sysroot = if config.no_sysroot {\n                     Sysroot::default()\n                 } else {\n@@ -125,7 +126,17 @@ impl ProjectWorkspace {\n                     })?\n                 };\n \n-                let rustc = if let Some(rustc_dir) = &config.rustc_source {\n+                let rustc_dir = if let Some(rustc_source) = &config.rustc_source {\n+                    use cargo_workspace::RustcSource;\n+                    match rustc_source {\n+                        RustcSource::Path(path) => Some(path.clone()),\n+                        RustcSource::Discover => Sysroot::discover_rustc(&cargo_toml),\n+                    }\n+                } else {\n+                    None\n+                };\n+\n+                let rustc = if let Some(rustc_dir) = rustc_dir {\n                     Some(\n                         CargoWorkspace::from_cargo_metadata(&rustc_dir, config, progress)\n                             .with_context(|| {"}, {"sha": "f9098968a8277455d973179745a53a9e745498e0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -18,7 +18,7 @@ use ide_db::helpers::{\n };\n use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n-use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n+use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource};\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n@@ -177,8 +177,9 @@ config_data! {\n         /// tests or binaries.\\nFor example, it may be `--release`.\n         runnables_cargoExtraArgs: Vec<String>   = \"[]\",\n \n-        /// Path to the rust compiler sources, for usage in rustc_private projects.\n-        rustcSource : Option<PathBuf> = \"null\",\n+        /// Path to the rust compiler sources, for usage in rustc_private projects, or \"discover\"\n+        /// to try to automatically find it.\n+        rustcSource : Option<String> = \"null\",\n \n         /// Additional arguments to `rustfmt`.\n         rustfmt_extraArgs: Vec<String>               = \"[]\",\n@@ -473,7 +474,13 @@ impl Config {\n         self.data.cargo_loadOutDirsFromCheck\n     }\n     pub fn cargo(&self) -> CargoConfig {\n-        let rustc_source = self.data.rustcSource.as_ref().map(|it| self.root_path.join(&it));\n+        let rustc_source = self.data.rustcSource.as_ref().map(|rustc_src| {\n+            if rustc_src == \"discover\" {\n+                RustcSource::Discover\n+            } else {\n+                RustcSource::Path(self.root_path.join(rustc_src))\n+            }\n+        });\n \n         CargoConfig {\n             no_default_features: self.data.cargo_noDefaultFeatures,"}, {"sha": "f91e04c31d1d86401a1356a6281b35a4bda6fb8f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -105,7 +105,7 @@\n [[rust-analyzer.runnables.cargoExtraArgs]]rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n  Additional arguments to be passed to cargo for runnables such as  tests or binaries.\\nFor example, it may be `--release`.\n [[rust-analyzer.rustcSource]]rust-analyzer.rustcSource (default: `null`)::\n- Path to the rust compiler sources, for usage in rustc_private projects.\n+ Path to the rust compiler sources, for usage in rustc_private projects, or \"discover\"  to try to automatically find it.\n [[rust-analyzer.rustfmt.extraArgs]]rust-analyzer.rustfmt.extraArgs (default: `[]`)::\n  Additional arguments to `rustfmt`.\n [[rust-analyzer.rustfmt.overrideCommand]]rust-analyzer.rustfmt.overrideCommand (default: `null`)::"}, {"sha": "defa108cb793834f72ab91c9a49deb5157c138ac", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e602c9419cc5ed464343b2373c7fe86fb89d6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=4a6e602c9419cc5ed464343b2373c7fe86fb89d6", "patch": "@@ -707,7 +707,7 @@\n                     }\n                 },\n                 \"rust-analyzer.rustcSource\": {\n-                    \"markdownDescription\": \"Path to the rust compiler sources, for usage in rustc_private projects.\",\n+                    \"markdownDescription\": \"Path to the rust compiler sources, for usage in rustc_private projects, or \\\"discover\\\" to try to automatically find it.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\","}]}