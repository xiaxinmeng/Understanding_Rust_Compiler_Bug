{"sha": "e9315a60e42d355a36c778f43d92b5ffc8b54252", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzE1YTYwZTQyZDM1NWEzNmM3NzhmNDNkOTJiNWZmYzhiNTQyNTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-05T15:18:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-06T08:10:15Z"}, "message": "Rustup", "tree": {"sha": "6814ab455d3005d8730c879b8b4f34f815958df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6814ab455d3005d8730c879b8b4f34f815958df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9315a60e42d355a36c778f43d92b5ffc8b54252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9315a60e42d355a36c778f43d92b5ffc8b54252", "html_url": "https://github.com/rust-lang/rust/commit/e9315a60e42d355a36c778f43d92b5ffc8b54252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9315a60e42d355a36c778f43d92b5ffc8b54252/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5383fe2a035bcd5f1140e0e5e1f952b1bfa5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5383fe2a035bcd5f1140e0e5e1f952b1bfa5ff", "html_url": "https://github.com/rust-lang/rust/commit/ee5383fe2a035bcd5f1140e0e5e1f952b1bfa5ff"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "bc227fcc3985ed2bbf94ffe1445cfc22e6bab7f3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e9315a60e42d355a36c778f43d92b5ffc8b54252", "patch": "@@ -467,8 +467,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             for block in mir.basic_blocks() {\n                 for stmt in block.statements.iter() {\n                     match stmt.kind {\n-                        StorageLive(mir::Lvalue::Local(local)) |\n-                        StorageDead(mir::Lvalue::Local(local)) => {\n+                        StorageLive(local) |\n+                        StorageDead(local) => {\n                             set.insert(local);\n                         }\n                         _ => {}"}, {"sha": "3342be7300e7762bca572bfca99339dbe58ec290", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=e9315a60e42d355a36c778f43d92b5ffc8b54252", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::layout::{Size, Align};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::{EvalResult, EvalContext, MemoryPointer, PrimVal, Value, Pointer, Machine, PtrAndAlign};\n+use super::{EvalResult, EvalContext, MemoryPointer, PrimVal, Value, Pointer, Machine, PtrAndAlign, ValTy};\n \n #[derive(Copy, Clone, Debug)]\n pub enum Lvalue {\n@@ -400,7 +400,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         base: Lvalue,\n         base_ty: Ty<'tcx>,\n-        proj_elem: &mir::ProjectionElem<'tcx, mir::Operand<'tcx>, Ty<'tcx>>,\n+        proj_elem: &mir::ProjectionElem<'tcx, mir::Local, Ty<'tcx>>,\n     ) -> EvalResult<'tcx, Lvalue> {\n         use rustc::mir::ProjectionElem::*;\n         let (ptr, extra) = match *proj_elem {\n@@ -439,9 +439,10 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 return self.val_to_lvalue(val, pointee_type);\n             }\n \n-            Index(ref operand) => {\n-                let n_ptr = self.eval_operand(operand)?;\n-                let n = self.value_to_primval(n_ptr)?.to_u64()?;\n+            Index(local) => {\n+                let value = self.frame().get_local(local)?;\n+                let ty = self.tcx.types.usize;\n+                let n = self.value_to_primval(ValTy { value, ty })?.to_u64()?;\n                 return self.lvalue_index(base, base_ty, n);\n             }\n "}, {"sha": "e7d5a83532b312b79fbf0a2ac516dac79e6f27ee", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9315a60e42d355a36c778f43d92b5ffc8b54252/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=e9315a60e42d355a36c778f43d92b5ffc8b54252", "patch": "@@ -145,22 +145,15 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 }\n             }\n \n-            // Mark locals as dead or alive.\n-            StorageLive(ref lvalue) |\n-            StorageDead(ref lvalue) => {\n-                let (frame, local) =\n-                    match self.eval_lvalue(lvalue)? {\n-                        Lvalue::Local { frame, local } if self.cur_frame() == frame => (\n-                            frame,\n-                            local,\n-                        ),\n-                        _ => return err!(Unimplemented(\"Storage annotations must refer to locals of the topmost stack frame.\".to_owned())), // FIXME maybe this should get its own error type\n-                    };\n-                let old_val = match stmt.kind {\n-                    StorageLive(_) => self.stack[frame].storage_live(local)?,\n-                    StorageDead(_) => self.stack[frame].storage_dead(local)?,\n-                    _ => bug!(\"We already checked that we are a storage stmt\"),\n-                };\n+            // Mark locals as alive\n+            StorageLive(local) => {\n+                let old_val = self.frame_mut().storage_live(local)?;\n+                self.deallocate_local(old_val)?;\n+            }\n+\n+            // Mark locals as dead\n+            StorageDead(local) => {\n+                let old_val = self.frame_mut().storage_dead(local)?;\n                 self.deallocate_local(old_val)?;\n             }\n "}, {"sha": "acaedebbf9b8496f9c8ebd21f3feb1eff3577f13", "filename": "tests/run-pass-fullmir/unsized-tuple-impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9315a60e42d355a36c778f43d92b5ffc8b54252/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9315a60e42d355a36c778f43d92b5ffc8b54252/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs?ref=e9315a60e42d355a36c778f43d92b5ffc8b54252", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Zmir-emit-validate=0\n+\n #![feature(unsized_tuple_coercion)]\n use std::mem;\n "}]}