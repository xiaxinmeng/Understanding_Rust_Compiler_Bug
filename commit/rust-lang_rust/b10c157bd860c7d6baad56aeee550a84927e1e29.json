{"sha": "b10c157bd860c7d6baad56aeee550a84927e1e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMGMxNTdiZDg2MGM3ZDZiYWFkNTZhZWVlNTUwYTg0OTI3ZTFlMjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-29T09:24:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:30:10Z"}, "message": "rustc: turn mir::LocalDecl's syntactic_scope into a SourceInfo.", "tree": {"sha": "f74e69e8b4f67655f5e2b00fcfd2d11a844b060e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74e69e8b4f67655f5e2b00fcfd2d11a844b060e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10c157bd860c7d6baad56aeee550a84927e1e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10c157bd860c7d6baad56aeee550a84927e1e29", "html_url": "https://github.com/rust-lang/rust/commit/b10c157bd860c7d6baad56aeee550a84927e1e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10c157bd860c7d6baad56aeee550a84927e1e29/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1ac6b6fb820765a678fa3decb343fa9f720737", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1ac6b6fb820765a678fa3decb343fa9f720737", "html_url": "https://github.com/rust-lang/rust/commit/ca1ac6b6fb820765a678fa3decb343fa9f720737"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "a3acb6c1b24731b4927e0d422bf4a1a136eeba43", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -26,8 +26,8 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     ty,\n     name,\n     source_info,\n+    syntactic_source_info,\n     internal,\n-    syntactic_scope,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref, mutability });"}, {"sha": "2faacfb598f1f1f5592d8d34412877f3d940ad50", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -506,7 +506,7 @@ pub struct LocalDecl<'tcx> {\n     pub name: Option<Name>,\n \n     /// Source info of the local. The `SourceScope` is the *visibility* one,\n-    /// not the the *syntactic* one (see `syntactic_scope` for more details).\n+    /// not the the *syntactic* one (see `syntactic_source_info` for more details).\n     pub source_info: SourceInfo,\n \n     /// The *syntactic* (i.e. not visibility) source scope the local is defined\n@@ -560,9 +560,9 @@ pub struct LocalDecl<'tcx> {\n     /// `drop(x)`, we want it to refer to `x: u32`.\n     ///\n     /// To allow both uses to work, we need to have more than a single scope\n-    /// for a local. We have the `syntactic_scope` represent the\n+    /// for a local. We have the `syntactic_source_info.scope` represent the\n     /// \"syntactic\" lint scope (with a variable being under its let\n-    /// block) while the source-info scope represents the \"local variable\"\n+    /// block) while the `source_info.scope` represents the \"local variable\"\n     /// scope (where the \"rest\" of a block is under all prior let-statements).\n     ///\n     /// The end result looks like this:\n@@ -574,10 +574,10 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502{ #[allow(unused_mut] } // this is actually split into 2 scopes\n     ///  \u2502 \u2502                        // in practice because I'm lazy.\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502\u2190 x.syntactic_scope\n+    ///  \u2502 \u2502\u2190 x.syntactic_source_info.scope\n     ///  \u2502 \u2502\u2190 `x.parse().unwrap()`\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.syntactic_scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.syntactic_source_info.scope\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502 \u2502{ let y: u32 }\n     ///  \u2502 \u2502 \u2502\n@@ -588,7 +588,7 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502\u2190 x.source_info.scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n     /// ```\n-    pub syntactic_scope: SourceScope,\n+    pub syntactic_source_info: SourceInfo,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -603,7 +603,10 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+            syntactic_source_info: SourceInfo {\n+                span,\n+                scope: OUTERMOST_SOURCE_SCOPE\n+            },\n             internal: false,\n             is_user_variable: false\n         }\n@@ -620,7 +623,10 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+            syntactic_source_info: SourceInfo {\n+                span,\n+                scope: OUTERMOST_SOURCE_SCOPE\n+            },\n             internal: true,\n             is_user_variable: false\n         }\n@@ -638,7 +644,10 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+            syntactic_source_info: SourceInfo {\n+                span,\n+                scope: OUTERMOST_SOURCE_SCOPE\n+            },\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false\n@@ -2192,7 +2201,7 @@ BraceStructTypeFoldableImpl! {\n         ty,\n         name,\n         source_info,\n-        syntactic_scope,\n+        syntactic_source_info,\n     }\n }\n "}, {"sha": "72d7540b2871a78f2c40c6101e2372606bd7626a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -716,16 +716,16 @@ macro_rules! make_mir_visitor {\n                     name: _,\n                     ref $($mutability)* source_info,\n                     internal: _,\n-                    ref $($mutability)* syntactic_scope,\n+                    ref $($mutability)* syntactic_source_info,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty, TyContext::LocalDecl {\n                     local,\n                     source_info: *source_info,\n                 });\n+                self.visit_source_info(syntactic_source_info);\n                 self.visit_source_info(source_info);\n-                self.visit_source_scope(syntactic_scope);\n             }\n \n             fn super_source_scope(&mut self,"}, {"sha": "0fab6634e0bbf1276351e447efb20d7ecd10f092", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -311,7 +311,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n \n             tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n-                vsi[local_decl.syntactic_scope].lint_root,\n+                vsi[local_decl.syntactic_source_info.scope].lint_root,\n                 source_info.span,\n                 \"variable does not need to be mutable\"\n             )"}, {"sha": "f8b57bed93e020a0e606b56be6a02857d972910a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         ty: ptr_ty,\n                         name: None,\n                         source_info,\n-                        syntactic_scope: source_info.scope,\n+                        syntactic_source_info: source_info,\n                         internal: true,\n                         is_user_variable: false\n                     });"}, {"sha": "80739aa9d4f33f4ddd67a02628aab34e2dc8a792", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                                            None));\n                 // If we have lints, create a new source scope\n                 // that marks the lints for the locals. See the comment\n-                // on the `syntactic_scope` field for why this is needed.\n+                // on the `syntactic_source_info` field for why this is needed.\n                 if lint_level.is_explicit() {\n                     syntactic_scope =\n                         this.new_source_scope(scope_span, lint_level, None);\n@@ -324,7 +324,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 span,\n                 scope: var_scope.unwrap()\n             };\n-            this.declare_binding(source_info, syntactic_scope, mutability, name, var,\n+            let syntactic_source_info = SourceInfo {\n+                span,\n+                scope: syntactic_scope,\n+            };\n+            this.declare_binding(source_info, syntactic_source_info, mutability, name, var,\n                                  ty, has_guard);\n         });\n         var_scope\n@@ -1114,24 +1118,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// in the arm body, which will have type `T`.\n     fn declare_binding(&mut self,\n                        source_info: SourceInfo,\n-                       syntactic_scope: SourceScope,\n+                       syntactic_source_info: SourceInfo,\n                        mutability: Mutability,\n                        name: Name,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard)\n     {\n         debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, source_info={:?}, \\\n-                syntactic_scope={:?})\",\n-               var_id, name, var_ty, source_info, syntactic_scope);\n+                syntactic_source_info={:?})\",\n+               var_id, name, var_ty, source_info, syntactic_source_info);\n \n         let tcx = self.hir.tcx();\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info,\n-            syntactic_scope,\n+            syntactic_source_info,\n             internal: false,\n             is_user_variable: true,\n         };\n@@ -1143,7 +1147,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n                 name: Some(name),\n                 source_info,\n-                syntactic_scope,\n+                syntactic_source_info,\n                 internal: false,\n                 is_user_variable: true,\n             });"}, {"sha": "06f43ad46214b59120a85f051cfb37c08be804e7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -657,14 +657,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            let source_info = SourceInfo {\n+                scope: OUTERMOST_SOURCE_SCOPE,\n+                span: pattern.map_or(self.fn_span, |pat| pat.span)\n+            };\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n-                source_info: SourceInfo {\n-                    scope: OUTERMOST_SOURCE_SCOPE,\n-                    span: pattern.map_or(self.fn_span, |pat| pat.span)\n-                },\n-                syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+                source_info,\n+                syntactic_source_info: source_info,\n                 name,\n                 internal: false,\n                 is_user_variable: false,"}, {"sha": "6692849bd0f65aefc1e078431726d4072bd7b2ed", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -138,10 +138,11 @@ enum CallKind {\n }\n \n fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n+    let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability, ty, name: None,\n-        source_info: SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span },\n-        syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+        source_info,\n+        syntactic_source_info: source_info,\n         internal: false,\n         is_user_variable: false\n     }"}, {"sha": "1c833453c36191f337a36c6f111e3f97bd86d0cc", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -295,12 +295,13 @@ fn make_generator_state_argument_indirect<'a, 'tcx>(\n \n fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n                             mir: &mut Mir<'tcx>) -> Local {\n+    let source_info = source_info(mir);\n     let new_ret = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n         name: None,\n-        source_info: source_info(mir),\n-        syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+        source_info,\n+        syntactic_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -641,7 +642,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         source_info,\n-        syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+        syntactic_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -657,7 +658,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         }),\n         name: None,\n         source_info,\n-        syntactic_scope: OUTERMOST_SOURCE_SCOPE,\n+        syntactic_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };"}, {"sha": "2434f3031784af2d0f6852baa1e51420dc9d0ade", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -400,6 +400,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n                     local.source_info.scope = scope_map[local.source_info.scope];\n                     local.source_info.span = callsite.location.span;\n+                    local.syntactic_source_info.scope =\n+                        scope_map[local.syntactic_source_info.scope];\n+                    local.syntactic_source_info.span = callsite.location.span;\n \n                     let idx = caller_mir.local_decls.push(local);\n                     local_map.push(idx);"}, {"sha": "61f43f23a232bc27c2e0815ebaab70e5d916d73e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10c157bd860c7d6baad56aeee550a84927e1e29/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b10c157bd860c7d6baad56aeee550a84927e1e29", "patch": "@@ -335,6 +335,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // otherwise we would use the `promoted` directly.\n                             let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n                             promoted_ref.source_info = statement.source_info;\n+                            promoted_ref.syntactic_source_info = statement.source_info;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n                             self.extra_statements.push((loc, Statement {"}]}