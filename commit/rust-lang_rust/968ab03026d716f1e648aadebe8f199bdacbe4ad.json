{"sha": "968ab03026d716f1e648aadebe8f199bdacbe4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OGFiMDMwMjZkNzE2ZjFlNjQ4YWFkZWJlOGYxOTliZGFjYmU0YWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-19T15:06:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-19T15:06:36Z"}, "message": "rt: fix memory-unsafe random seed logic, r=valgrindclean", "tree": {"sha": "4a27364dcfcab05c01198462ab343e0a968ce5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a27364dcfcab05c01198462ab343e0a968ce5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968ab03026d716f1e648aadebe8f199bdacbe4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968ab03026d716f1e648aadebe8f199bdacbe4ad", "html_url": "https://github.com/rust-lang/rust/commit/968ab03026d716f1e648aadebe8f199bdacbe4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968ab03026d716f1e648aadebe8f199bdacbe4ad/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "html_url": "https://github.com/rust-lang/rust/commit/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e"}], "stats": {"total": 130, "additions": 64, "deletions": 66}, "files": [{"sha": "79dd29604e42e2c0e157aa2beb82cd25dc91de78", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -18,6 +18,7 @@ use u32;\n use uint;\n use util;\n use vec;\n+use libc::size_t;\n \n /// A type that can be randomly generated using an RNG\n pub trait Rand {\n@@ -120,9 +121,9 @@ enum rust_rng {}\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    unsafe fn rand_seed() -> ~[u8];\n-    unsafe fn rand_new() -> *rust_rng;\n-    unsafe fn rand_new_seeded2(&&seed: ~[u8]) -> *rust_rng;\n+    unsafe fn rand_seed_size() -> size_t;\n+    unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n+    unsafe fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n     unsafe fn rand_next(rng: *rust_rng) -> u32;\n     unsafe fn rand_free(rng: *rust_rng);\n }\n@@ -388,15 +389,18 @@ impl Rng for @RandRes {\n /// Create a new random seed for seeded_rng\n pub fn seed() -> ~[u8] {\n     unsafe {\n-        rustrt::rand_seed()\n+        let n = rustrt::rand_seed_size() as uint;\n+        let mut s = vec::from_elem(n, 0_u8);\n+        do vec::as_mut_buf(s) |p, sz| {\n+            rustrt::rand_gen_seed(p, sz as size_t)\n+        }\n+        s\n     }\n }\n \n /// Create a random number generator with a system specified seed\n pub fn Rng() -> Rng {\n-    unsafe {\n-        @RandRes(rustrt::rand_new()) as Rng\n-    }\n+    seeded_rng(seed())\n }\n \n /**\n@@ -405,9 +409,15 @@ pub fn Rng() -> Rng {\n  * all other generators constructed with the same seed. The seed may be any\n  * length.\n  */\n-pub fn seeded_rng(seed: &~[u8]) -> Rng {\n+pub fn seeded_rng(seed: &[u8]) -> Rng {\n+    seeded_randres(seed) as Rng\n+}\n+\n+fn seeded_randres(seed: &[u8]) -> @RandRes {\n     unsafe {\n-        @RandRes(rustrt::rand_new_seeded2(*seed)) as Rng\n+        do vec::as_imm_buf(seed) |p, sz| {\n+            @RandRes(rustrt::rand_new_seeded(p, sz as size_t))\n+        }\n     }\n }\n \n@@ -457,7 +467,7 @@ pub fn task_rng() -> Rng {\n     match r {\n         None => {\n             unsafe {\n-                let rng = @RandRes(rustrt::rand_new());\n+                let rng = seeded_randres(seed());\n                 task::local_data::local_data_set(tls_rng_state, rng);\n                 rng as Rng\n             }\n@@ -483,24 +493,24 @@ pub mod tests {\n     #[test]\n     pub fn rng_seeded() {\n         let seed = rand::seed();\n-        let ra = rand::seeded_rng(&seed);\n-        let rb = rand::seeded_rng(&seed);\n+        let ra = rand::seeded_rng(seed);\n+        let rb = rand::seeded_rng(seed);\n         assert ra.gen_str(100u) == rb.gen_str(100u);\n     }\n \n     #[test]\n     pub fn rng_seeded_custom_seed() {\n         // much shorter than generated seeds which are 1024 bytes\n-        let seed = ~[2u8, 32u8, 4u8, 32u8, 51u8];\n-        let ra = rand::seeded_rng(&seed);\n-        let rb = rand::seeded_rng(&seed);\n+        let seed = [2u8, 32u8, 4u8, 32u8, 51u8];\n+        let ra = rand::seeded_rng(seed);\n+        let rb = rand::seeded_rng(seed);\n         assert ra.gen_str(100u) == rb.gen_str(100u);\n     }\n \n     #[test]\n     pub fn rng_seeded_custom_seed2() {\n-        let seed = ~[2u8, 32u8, 4u8, 32u8, 51u8];\n-        let ra = rand::seeded_rng(&seed);\n+        let seed = [2u8, 32u8, 4u8, 32u8, 51u8];\n+        let ra = rand::seeded_rng(seed);\n         // Regression test that isaac is actually using the above vector\n         let r = ra.next();\n         error!(\"%?\", r);"}, {"sha": "2c5b56f3fa4efc513125198e6b9f2d6eb9ed1cad", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -128,49 +128,30 @@ vec_reserve_shared(type_desc* ty, rust_vec_box** vp,\n     reserve_vec_exact(task, vp, n_elts * ty->size);\n }\n \n-extern \"C\" CDECL rust_vec*\n-rand_seed() {\n-    size_t size = sizeof(ub4) * RANDSIZ;\n-    rust_task *task = rust_get_current_task();\n-    rust_vec *v = (rust_vec *) task->kernel->malloc(vec_size<uint8_t>(size),\n-                                            \"rand_seed\");\n-    v->fill = v->alloc = size;\n-    rng_gen_seed(task->kernel, (uint8_t*) &v->data, size);\n-    return v;\n+extern \"C\" CDECL size_t\n+rand_seed_size() {\n+    return rng_seed_size();\n }\n \n-extern \"C\" CDECL void *\n-rand_new() {\n+extern \"C\" CDECL void\n+rand_gen_seed(uint8_t* dest, size_t size) {\n     rust_task *task = rust_get_current_task();\n-    rust_sched_loop *thread = task->sched_loop;\n-    rust_rng *rng = (rust_rng *) task->malloc(sizeof(rust_rng), \"rand_new\");\n-    if (!rng) {\n-        task->fail();\n-        return NULL;\n-    }\n-    rng_init(thread->kernel, rng, NULL);\n-    return rng;\n+    rng_gen_seed(task->kernel, dest, size);\n }\n \n extern \"C\" CDECL void *\n-rand_new_seeded(rust_vec_box* seed) {\n+rand_new_seeded(uint8_t* seed, size_t seed_size) {\n     rust_task *task = rust_get_current_task();\n-    rust_sched_loop *thread = task->sched_loop;\n     rust_rng *rng = (rust_rng *) task->malloc(sizeof(rust_rng),\n                                               \"rand_new_seeded\");\n     if (!rng) {\n         task->fail();\n         return NULL;\n     }\n-    rng_init(thread->kernel, rng, seed);\n+    rng_init(task->kernel, rng, seed, seed_size);\n     return rng;\n }\n \n-extern \"C\" CDECL void *\n-rand_new_seeded2(rust_vec_box** seed) {\n-    return rand_new_seeded(*seed);\n-}\n-\n extern \"C\" CDECL uint32_t\n rand_next(rust_rng *rng) {\n     rust_task *task = rust_get_current_task();"}, {"sha": "2c11691bf86b9d71e0d6e33dc39c8e5c98ce6fa6", "filename": "src/rt/rust_rng.cpp", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -12,6 +12,12 @@\n #include \"rust_rng.h\"\n #include \"rust_util.h\"\n \n+size_t\n+rng_seed_size() {\n+    randctx rctx;\n+    return sizeof(rctx.randrsl);\n+}\n+\n // Initialization helpers for ISAAC RNG\n \n void\n@@ -48,31 +54,36 @@ rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n }\n \n static void\n-isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed) {\n+isaac_init(rust_kernel *kernel, randctx *rctx,\n+           uint8_t* user_seed, size_t seed_len) {\n     memset(rctx, 0, sizeof(randctx));\n \n     char *env_seed = kernel->env->rust_seed;\n     if (user_seed != NULL) {\n         // ignore bytes after the required length\n-        size_t seed_len = user_seed->body.fill < sizeof(rctx->randrsl)\n-            ? user_seed->body.fill : sizeof(rctx->randrsl);\n-        memcpy(&rctx->randrsl, user_seed->body.data, seed_len);\n+        if (seed_len > sizeof(rctx->randrsl)) {\n+            seed_len = sizeof(rctx->randrsl);\n+        }\n+        memcpy(&rctx->randrsl, user_seed, seed_len);\n     } else if (env_seed != NULL) {\n         ub4 seed = (ub4) atoi(env_seed);\n         for (size_t i = 0; i < RANDSIZ; i ++) {\n             memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n             seed = (seed + 0x7ed55d16) + (seed << 12);\n         }\n     } else {\n-        rng_gen_seed(kernel, (uint8_t*)&rctx->randrsl, sizeof(rctx->randrsl));\n+        rng_gen_seed(kernel,\n+                     (uint8_t*)&rctx->randrsl,\n+                     sizeof(rctx->randrsl));\n     }\n \n     randinit(rctx, 1);\n }\n \n void\n-rng_init(rust_kernel* kernel, rust_rng* rng, rust_vec_box* user_seed) {\n-    isaac_init(kernel, &rng->rctx, user_seed);\n+rng_init(rust_kernel* kernel, rust_rng* rng,\n+         uint8_t *user_seed, size_t seed_len) {\n+    isaac_init(kernel, &rng->rctx, user_seed, seed_len);\n     rng->reseedable = !user_seed && !kernel->env->rust_seed;\n }\n \n@@ -85,15 +96,9 @@ rng_maybe_reseed(rust_kernel* kernel, rust_rng* rng) {\n     if (bytes_generated < RESEED_THRESHOLD || !rng->reseedable) {\n         return;\n     }\n-\n-    uint32_t new_seed[RANDSIZ];\n-    rng_gen_seed(kernel, (uint8_t*) new_seed, RANDSIZ * sizeof(uint32_t));\n-\n-    // Stir new seed into PRNG's entropy pool.\n-    for (size_t i = 0; i < RANDSIZ; i++) {\n-        rng->rctx.randrsl[i] ^= new_seed[i];\n-    }\n-\n+    rng_gen_seed(kernel,\n+                 (uint8_t*)rng->rctx.randrsl,\n+                 sizeof(rng->rctx.randrsl));\n     randinit(&rng->rctx, 1);\n }\n "}, {"sha": "3879b1138fa201d86327064bf10a367a2de2fe71", "filename": "src/rt/rust_rng.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -14,7 +14,6 @@\n #include \"rand.h\"\n \n class rust_kernel;\n-struct rust_vec_box;\n \n // Initialization helpers for ISAAC RNG\n \n@@ -23,8 +22,11 @@ struct rust_rng {\n     bool reseedable;\n };\n \n-void rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size);\n-void rng_init(rust_kernel *kernel, rust_rng *rng, rust_vec_box* user_seed);\n+size_t rng_seed_size();\n+void rng_gen_seed(rust_kernel* kernel,\n+                  uint8_t* dest, size_t size);\n+void rng_init(rust_kernel *kernel, rust_rng *rng,\n+              uint8_t *user_seed, size_t seed_len);\n uint32_t rng_gen_u32(rust_kernel *kernel, rust_rng *rng);\n \n //"}, {"sha": "c215752d8dd391d045db631452d751cb791d7d78", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -41,7 +41,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched, int id, bool killed) :\n     name(\"main\")\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n-    rng_init(kernel, &rng, NULL);\n+    rng_init(kernel, &rng, NULL, 0);\n \n     if (!tls_initialized)\n         init_tls();"}, {"sha": "8fc8fceff864559edc45af49cae55ba48d02f935", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/968ab03026d716f1e648aadebe8f199bdacbe4ad/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=968ab03026d716f1e648aadebe8f199bdacbe4ad", "patch": "@@ -17,9 +17,9 @@ rust_mktime\n new_task\n precise_time_ns\n rand_free\n-rand_new\n rand_new_seeded\n-rand_new_seeded2\n+rand_seed_size\n+rand_gen_seed\n rand_next\n rand_seed\n rust_get_sched_id"}]}