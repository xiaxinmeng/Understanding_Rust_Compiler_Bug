{"sha": "6977f7dbe9011f3a0e06e2e649636e02ba51fbf0", "node_id": "C_kwDOAAsO6NoAKDY5NzdmN2RiZTkwMTFmM2EwZTA2ZTJlNjQ5NjM2ZTAyYmE1MWZiZjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T07:44:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T14:18:42Z"}, "message": "Reduce visibilities and remove dead code.", "tree": {"sha": "ed7b102bc1da310d82a3effe74ee073b81b15897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7b102bc1da310d82a3effe74ee073b81b15897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0", "html_url": "https://github.com/rust-lang/rust/commit/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41db9b152f13f8559f4e77dfdc0ef866b4cc0e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/41db9b152f13f8559f4e77dfdc0ef866b4cc0e75", "html_url": "https://github.com/rust-lang/rust/commit/41db9b152f13f8559f4e77dfdc0ef866b4cc0e75"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "cbe7e4707a4e200a9c1796102f80d3b8571d38a0", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6977f7dbe9011f3a0e06e2e649636e02ba51fbf0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=6977f7dbe9011f3a0e06e2e649636e02ba51fbf0", "patch": "@@ -29,28 +29,28 @@ use crate::errors::{\n };\n \n #[derive(Debug)]\n-pub struct LintLevelSets {\n-    pub list: IndexVec<LintStackIndex, LintSet>,\n+struct LintLevelSets {\n+    list: IndexVec<LintStackIndex, LintSet>,\n }\n \n rustc_index::newtype_index! {\n-    pub struct LintStackIndex {\n+    struct LintStackIndex {\n         ENCODABLE = custom, // we don't need encoding\n         const COMMAND_LINE = 0,\n     }\n }\n \n #[derive(Debug)]\n-pub struct LintSet {\n+struct LintSet {\n     // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n     // flag.\n-    pub specs: FxHashMap<LintId, LevelAndSource>,\n+    specs: FxHashMap<LintId, LevelAndSource>,\n \n-    pub parent: LintStackIndex,\n+    parent: LintStackIndex,\n }\n \n impl LintLevelSets {\n-    pub fn new() -> Self {\n+    fn new() -> Self {\n         LintLevelSets { list: IndexVec::new() }\n     }\n \n@@ -62,15 +62,14 @@ impl LintLevelSets {\n         sess: &Session,\n     ) -> LevelAndSource {\n         let lint = LintId::of(lint);\n-        let (level, mut src) = self.get_lint_id_level(lint, idx, aux);\n+        let (level, mut src) = self.raw_lint_id_level(lint, idx, aux);\n         let level = reveal_actual_level(level, &mut src, sess, lint, |id| {\n-            self.get_lint_id_level(id, idx, aux)\n+            self.raw_lint_id_level(id, idx, aux)\n         });\n-\n         (level, src)\n     }\n \n-    pub fn get_lint_id_level(\n+    fn raw_lint_id_level(\n         &self,\n         id: LintId,\n         mut idx: LintStackIndex,\n@@ -292,13 +291,12 @@ pub struct LintLevelsBuilder<'s, P> {\n     registered_tools: &'s RegisteredTools,\n }\n \n-pub struct BuilderPush {\n+pub(crate) struct BuilderPush {\n     prev: LintStackIndex,\n-    pub changed: bool,\n }\n \n impl<'s> LintLevelsBuilder<'s, TopDown> {\n-    pub fn new(\n+    pub(crate) fn new(\n         sess: &'s Session,\n         warn_about_weird_lints: bool,\n         store: &'s LintStore,\n@@ -356,11 +354,11 @@ impl<'s> LintLevelsBuilder<'s, TopDown> {\n             self.provider.cur = prev;\n         }\n \n-        BuilderPush { prev, changed: prev != self.provider.cur }\n+        BuilderPush { prev }\n     }\n \n     /// Called after `push` when the scope of a set of attributes are exited.\n-    pub fn pop(&mut self, push: BuilderPush) {\n+    pub(crate) fn pop(&mut self, push: BuilderPush) {\n         self.provider.cur = push.prev;\n     }\n }\n@@ -929,7 +927,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n \n     /// Used to emit a lint-related diagnostic based on the current state of\n     /// this lint context.\n-    pub fn struct_lint(\n+    pub(crate) fn struct_lint(\n         &self,\n         lint: &'static Lint,\n         span: Option<MultiSpan>,"}]}