{"sha": "cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZmU0MGJiMGMxNWQ4N2E3MzBiNzIzZTVjZjI0ZGZlN2RlZjVlNTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-28T13:13:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T13:13:14Z"}, "message": "Rollup merge of #80353 - ssomers:btree_test_split_off, r=Mark-Simulacrum\n\nBTreeMap: test split_off (and append) more thoroughly\n\nUsing DeterministicRng as a poor man's property based testing rig.\nr? ``@Mark-Simulacrum``", "tree": {"sha": "ec6452655a4bf1d822590d3b52f84a87b0b0df36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec6452655a4bf1d822590d3b52f84a87b0b0df36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6dnqCRBK7hj4Ov3rIwAAdHIIAH4AqGIVLs6DQQGr9Qk6UHuh\nAJV3kuykfv9hXNC5K0cCyJJgUqURYWijEZM/OJfXS5icMbFqKmKUyaYw6dF50+eE\nIiLygP08MHaJApFuU1K6JKF/aatoxNnqbm09+22SezeF4EiR3EP366xyUFG6eyfq\nPoIdKDQ3zjqFwwd1IRXFFumX1HoagD4y4VT7Ibh5O/13N+L7HmSjpx4tkZkAzVex\nV8BM3ZQRVYXZyzlo7+d+O2IOXckN8pYE5UmJAc9wh/z/kusosAkZq3cavXk49wWN\nlb5sOYpKE9Bvl+4osMaNkyle8RK7hC7geOp6nNuEs3hEArPCsMHjL8s46nuO5+8=\n=y0cc\n-----END PGP SIGNATURE-----\n", "payload": "tree ec6452655a4bf1d822590d3b52f84a87b0b0df36\nparent c51172f38a901ab170432330dd943c5a9b1adb53\nparent d473cbe75b50dd583b582d0e99ba0c17228c1f86\nauthor Dylan DPC <dylan.dpc@gmail.com> 1609161194 +0100\ncommitter GitHub <noreply@github.com> 1609161194 +0100\n\nRollup merge of #80353 - ssomers:btree_test_split_off, r=Mark-Simulacrum\n\nBTreeMap: test split_off (and append) more thoroughly\n\nUsing DeterministicRng as a poor man's property based testing rig.\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "html_url": "https://github.com/rust-lang/rust/commit/cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51172f38a901ab170432330dd943c5a9b1adb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51172f38a901ab170432330dd943c5a9b1adb53", "html_url": "https://github.com/rust-lang/rust/commit/c51172f38a901ab170432330dd943c5a9b1adb53"}, {"sha": "d473cbe75b50dd583b582d0e99ba0c17228c1f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/d473cbe75b50dd583b582d0e99ba0c17228c1f86", "html_url": "https://github.com/rust-lang/rust/commit/d473cbe75b50dd583b582d0e99ba0c17228c1f86"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "1d6488dd2dfe32b44de7e70f43f890d71d316862", "filename": "library/alloc/src/collections/btree/append.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs?ref=cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "patch": "@@ -81,15 +81,18 @@ impl<K, V> Root<K, V> {\n             // the appended elements even if advancing the iterator panicks.\n             *length += 1;\n         }\n-        self.fix_right_edge();\n+        self.fix_right_border_of_plentiful();\n     }\n \n-    fn fix_right_edge(&mut self) {\n-        // Handle underfull nodes, start from the top.\n+    /// Stock up any underfull nodes on the right border of the tree.\n+    /// The other nodes, those that are not the root nor a rightmost edge,\n+    /// must have MIN_LEN elements to spare.\n+    fn fix_right_border_of_plentiful(&mut self) {\n         let mut cur_node = self.borrow_mut();\n         while let Internal(internal) = cur_node.force() {\n             // Check if right-most child is underfull.\n             let mut last_kv = internal.last_kv().consider_for_balancing();\n+            debug_assert!(last_kv.left_child_len() >= MIN_LEN * 2);\n             let right_child_len = last_kv.right_child_len();\n             if right_child_len < MIN_LEN {\n                 // We need to steal."}, {"sha": "f92aed8ce15bf8b10397ed9e2a77f79fbdfb5853", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "patch": "@@ -1821,7 +1821,6 @@ fn test_append_ord_chaos() {\n }\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {\n-    assert!(len * 2 <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| (rng.next(), rng.next())))\n }\n@@ -1886,6 +1885,25 @@ fn test_split_off_tiny_right_height_2() {\n     assert_eq!(*right.last_key_value().unwrap().0, last);\n }\n \n+#[test]\n+fn test_split_off_halfway() {\n+    let mut rng = DeterministicRng::new();\n+    for &len in &[NODE_CAPACITY, 25, 50, 75, 100] {\n+        let mut data = Vec::from_iter((0..len).map(|_| (rng.next(), ())));\n+        // Insertion in non-ascending order creates some variation in node length.\n+        let mut map = BTreeMap::from_iter(data.iter().copied());\n+        data.sort();\n+        let small_keys = data.iter().take(len / 2).map(|kv| kv.0);\n+        let large_keys = data.iter().skip(len / 2).map(|kv| kv.0);\n+        let split_key = large_keys.clone().next().unwrap();\n+        let right = map.split_off(&split_key);\n+        map.check();\n+        right.check();\n+        assert!(map.keys().copied().eq(small_keys));\n+        assert!(right.keys().copied().eq(large_keys));\n+    }\n+}\n+\n #[test]\n fn test_split_off_large_random_sorted() {\n     // Miri is too slow"}, {"sha": "cdb39104047f0db0472e7a08757e9cfe9a180ed2", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "patch": "@@ -38,6 +38,7 @@ pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n #[cfg(test)]\n /// XorShiftRng\n struct DeterministicRng {\n+    count: usize,\n     x: u32,\n     y: u32,\n     z: u32,\n@@ -47,11 +48,13 @@ struct DeterministicRng {\n #[cfg(test)]\n impl DeterministicRng {\n     fn new() -> Self {\n-        DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n+        DeterministicRng { count: 0, x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n     }\n \n-    /// Guarantees that the first 70029 results are unique.\n+    /// Guarantees that each returned number is unique.\n     fn next(&mut self) -> u32 {\n+        self.count += 1;\n+        assert!(self.count <= 70029);\n         let x = self.x;\n         let t = x ^ (x << 11);\n         self.x = self.y;"}, {"sha": "fd19c0078a7487ef4af93cf9cc7287cbf97914a8", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "patch": "@@ -696,8 +696,10 @@ fn test_first_last() {\n     assert_eq!(a.pop_last(), None);\n }\n \n+// Unlike the function with the same name in map/tests, returns no values.\n+// Which also means it returns different predetermined pseudo-random keys,\n+// and the test cases using this function explore slightly different trees.\n fn rand_data(len: usize) -> Vec<u32> {\n-    assert!(len <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| rng.next()))\n }"}, {"sha": "4561c8eaf47fb135bea1bd4194ee5a234ac3440e", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefe40bb0c15d87a730b723e5cf24dfe7def5e57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=cefe40bb0c15d87a730b723e5cf24dfe7def5e57", "patch": "@@ -53,6 +53,9 @@ impl<K, V> Root<K, V> {\n         }\n     }\n \n+    /// Stock up or merge away any underfull nodes on the right border of the\n+    /// tree. The other nodes, those that are not the root nor a rightmost edge,\n+    /// must already have at least MIN_LEN elements.\n     fn fix_right_border(&mut self) {\n         self.fix_top();\n \n@@ -72,6 +75,7 @@ impl<K, V> Root<K, V> {\n                     }\n                     cur_node = last_kv.into_right_child();\n                 }\n+                debug_assert!(cur_node.len() > MIN_LEN);\n             }\n         }\n \n@@ -98,6 +102,7 @@ impl<K, V> Root<K, V> {\n                     }\n                     cur_node = first_kv.into_left_child();\n                 }\n+                debug_assert!(cur_node.len() > MIN_LEN);\n             }\n         }\n "}]}