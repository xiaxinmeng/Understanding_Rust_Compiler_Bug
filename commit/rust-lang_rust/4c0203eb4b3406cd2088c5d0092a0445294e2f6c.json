{"sha": "4c0203eb4b3406cd2088c5d0092a0445294e2f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDIwM2ViNGIzNDA2Y2QyMDg4YzVkMDA5MmEwNDQ1Mjk0ZTJmNmM=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-08-24T15:53:58Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-08-24T15:53:58Z"}, "message": "io::ErrorKind: rationalise ordering in main enum\n\nIt is useful to keep some coherent structure to this ordering.  In\nparticular, Other and Uncategorized should be next to each other, at\nthe end.\n\nAlso it seems to make sense to treat UnexpectedEof and OutOfMemory\nspecially, since they are not like the other errors (despite\nOutOfMemory also being generatable by some OS errors).\n\nSo:\n * Move Other to the end, just before Uncategorized\n * Move Unsupported to between Interrupted and UnexpectedEof\n * Add some comments documenting where to add things\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "b1199f5012ed6171ac1b5cd0cd887428fbe36d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1199f5012ed6171ac1b5cd0cd887428fbe36d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0203eb4b3406cd2088c5d0092a0445294e2f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0203eb4b3406cd2088c5d0092a0445294e2f6c", "html_url": "https://github.com/rust-lang/rust/commit/4c0203eb4b3406cd2088c5d0092a0445294e2f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0203eb4b3406cd2088c5d0092a0445294e2f6c/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54df693dd7e6668b78f0636e269f7f928d4932d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/54df693dd7e6668b78f0636e269f7f928d4932d2", "html_url": "https://github.com/rust-lang/rust/commit/54df693dd7e6668b78f0636e269f7f928d4932d2"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "6880106a943710ccb7cc522a08dc5cab19efea3c", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4c0203eb4b3406cd2088c5d0092a0445294e2f6c/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0203eb4b3406cd2088c5d0092a0445294e2f6c/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=4c0203eb4b3406cd2088c5d0092a0445294e2f6c", "patch": "@@ -261,18 +261,14 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Interrupted,\n \n-    /// A custom error that does not fall under any other I/O error kind.\n-    ///\n-    /// This can be used to construct your own [`Error`]s that do not match any\n-    /// [`ErrorKind`].\n-    ///\n-    /// This [`ErrorKind`] is not used by the standard library.\n+    /// This operation is unsupported on this platform.\n     ///\n-    /// Errors from the standard library that do not fall under any of the I/O\n-    /// error kinds cannot be `match`ed on, and will only match a wildcard (`_`) pattern.\n-    /// New [`ErrorKind`]s might be added in the future for some of those.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Other,\n+    /// This means that the operation can never succeed.\n+    #[stable(feature = \"unsupported_error\", since = \"1.53.0\")]\n+    Unsupported,\n+\n+    // ErrorKinds which are primarily categorisations for OS error\n+    // codes should be added above.\n \n     /// An error returned when an operation could not be completed because an\n     /// \"end of file\" was reached prematurely.\n@@ -283,17 +279,28 @@ pub enum ErrorKind {\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     UnexpectedEof,\n \n-    /// This operation is unsupported on this platform.\n-    ///\n-    /// This means that the operation can never succeed.\n-    #[stable(feature = \"unsupported_error\", since = \"1.53.0\")]\n-    Unsupported,\n-\n     /// An operation could not be completed, because it failed\n     /// to allocate enough memory.\n     #[stable(feature = \"out_of_memory_error\", since = \"1.54.0\")]\n     OutOfMemory,\n \n+    // \"Unusual\" error kinds which do not correspond simply to (sets\n+    // of) OS error codes, should be added just above this comment.\n+    // `Other` and `Uncategorised` should remain at the end:\n+\n+    /// A custom error that does not fall under any other I/O error kind.\n+    ///\n+    /// This can be used to construct your own [`Error`]s that do not match any\n+    /// [`ErrorKind`].\n+    ///\n+    /// This [`ErrorKind`] is not used by the standard library.\n+    ///\n+    /// Errors from the standard library that do not fall under any of the I/O\n+    /// error kinds cannot be `match`ed on, and will only match a wildcard (`_`) pattern.\n+    /// New [`ErrorKind`]s might be added in the future for some of those.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    Other,\n+\n     /// Any I/O error from the standard library that's not part of this list.\n     ///\n     /// Errors that are `Uncategorized` now may move to a different or a new"}]}