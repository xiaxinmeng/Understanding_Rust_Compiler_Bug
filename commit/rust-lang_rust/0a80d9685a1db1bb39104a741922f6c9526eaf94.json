{"sha": "0a80d9685a1db1bb39104a741922f6c9526eaf94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODBkOTY4NWExZGIxYmIzOTEwNGE3NDE5MjJmNmM5NTI2ZWFmOTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T10:47:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T12:21:31Z"}, "message": "visibility owner", "tree": {"sha": "c18017b57947b56d4019e9a8181f4bc16b84a2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18017b57947b56d4019e9a8181f4bc16b84a2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a80d9685a1db1bb39104a741922f6c9526eaf94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a80d9685a1db1bb39104a741922f6c9526eaf94", "html_url": "https://github.com/rust-lang/rust/commit/0a80d9685a1db1bb39104a741922f6c9526eaf94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a80d9685a1db1bb39104a741922f6c9526eaf94/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ca7b8aacc931fe2efe6cbfefc73d30e80289a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ca7b8aacc931fe2efe6cbfefc73d30e80289a2", "html_url": "https://github.com/rust-lang/rust/commit/d7ca7b8aacc931fe2efe6cbfefc73d30e80289a2"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "e968c9728161700db3d94ccdeb3d0c89a859050d", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=0a80d9685a1db1bb39104a741922f6c9526eaf94", "patch": "@@ -30,6 +30,12 @@ pub trait NameOwner<'a>: AstNode<'a> {\n     }\n }\n \n+pub trait VisibilityOwner<'a>: AstNode<'a> {\n+    fn visibility(self) -> Option<Visibility<'a>> {\n+        child_opt(self)\n+    }\n+}\n+\n pub trait LoopBodyOwner<'a>: AstNode<'a> {\n     fn loop_body(self) -> Option<Block<'a>> {\n         child_opt(self)"}, {"sha": "c619fc130363a9839c671de09b6797671ffa7d29", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=0a80d9685a1db1bb39104a741922f6c9526eaf94", "patch": "@@ -695,6 +695,7 @@ impl<R: TreeRoot<RaTypes>> ConstDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for ConstDef<'a> {}\n impl<'a> ast::NameOwner<'a> for ConstDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for ConstDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for ConstDef<'a> {}\n@@ -810,6 +811,7 @@ impl<R: TreeRoot<RaTypes>> EnumDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::NameOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for EnumDef<'a> {}\n@@ -1213,6 +1215,7 @@ impl<R: TreeRoot<RaTypes>> FnDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for FnDef<'a> {}\n impl<'a> ast::NameOwner<'a> for FnDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for FnDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for FnDef<'a> {}\n@@ -2136,6 +2139,7 @@ impl<R: TreeRoot<RaTypes>> ModuleNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for Module<'a> {}\n impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n impl<'a> ast::DocCommentsOwner<'a> for Module<'a> {}\n@@ -2351,6 +2355,7 @@ impl<R: TreeRoot<RaTypes>> NamedFieldDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for NamedFieldDef<'a> {}\n impl<'a> ast::NameOwner<'a> for NamedFieldDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for NamedFieldDef<'a> {}\n impl<'a> NamedFieldDef<'a> {\n@@ -3082,6 +3087,7 @@ impl<R: TreeRoot<RaTypes>> PosFieldNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for PosField<'a> {}\n impl<'a> ast::AttrsOwner<'a> for PosField<'a> {}\n impl<'a> PosField<'a> {\n     pub fn type_ref(self) -> Option<TypeRef<'a>> {\n@@ -3639,6 +3645,7 @@ impl<R: TreeRoot<RaTypes>> StaticDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for StaticDef<'a> {}\n impl<'a> ast::NameOwner<'a> for StaticDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for StaticDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for StaticDef<'a> {}\n@@ -3742,6 +3749,7 @@ impl<R: TreeRoot<RaTypes>> StructDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for StructDef<'a> {}\n impl<'a> ast::NameOwner<'a> for StructDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for StructDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for StructDef<'a> {}\n@@ -3902,6 +3910,7 @@ impl<R: TreeRoot<RaTypes>> TraitDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for TraitDef<'a> {}\n impl<'a> ast::NameOwner<'a> for TraitDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for TraitDef<'a> {}\n impl<'a> ast::DocCommentsOwner<'a> for TraitDef<'a> {}\n@@ -4135,6 +4144,7 @@ impl<R: TreeRoot<RaTypes>> TypeDefNode<R> {\n }\n \n \n+impl<'a> ast::VisibilityOwner<'a> for TypeDef<'a> {}\n impl<'a> ast::NameOwner<'a> for TypeDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for TypeDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for TypeDef<'a> {}\n@@ -4409,6 +4419,43 @@ impl<'a> UseTreeList<'a> {\n     }\n }\n \n+// Visibility\n+#[derive(Debug, Clone, Copy,)]\n+pub struct VisibilityNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type Visibility<'a> = VisibilityNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<VisibilityNode<R1>> for VisibilityNode<R2> {\n+    fn eq(&self, other: &VisibilityNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for VisibilityNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for VisibilityNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for Visibility<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            VISIBILITY => Some(Visibility { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> VisibilityNode<R> {\n+    pub fn borrowed(&self) -> Visibility {\n+        VisibilityNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> VisibilityNode {\n+        VisibilityNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> Visibility<'a> {}\n+\n // WhereClause\n #[derive(Debug, Clone, Copy,)]\n pub struct WhereClauseNode<R: TreeRoot<RaTypes> = OwnedRoot> {"}, {"sha": "2abb9da61fd4ce0d406028ebaef9654cf1e4780f", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/0a80d9685a1db1bb39104a741922f6c9526eaf94/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=0a80d9685a1db1bb39104a741922f6c9526eaf94", "patch": "@@ -247,6 +247,7 @@ Grammar(\n         ),\n         \"FnDef\": (\n             traits: [\n+                \"VisibilityOwner\",\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n@@ -257,45 +258,50 @@ Grammar(\n         \"RetType\": (options: [\"TypeRef\"]),\n         \"StructDef\": (\n             traits: [\n+                \"VisibilityOwner\",\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n                 \"DocCommentsOwner\"\n             ]\n         ),\n         \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n-        \"NamedFieldDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"], options: [\"TypeRef\"] ),\n+        \"NamedFieldDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\"], options: [\"TypeRef\"] ),\n         \"PosFieldList\": (collections: [[\"fields\", \"PosField\"]]),\n-        \"PosField\": ( traits: [\"AttrsOwner\"], options: [\"TypeRef\"]),\n+        \"PosField\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n+            \"VisibilityOwner\",\n             \"NameOwner\",\n             \"TypeParamsOwner\",\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n         \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n         \"EnumVariant\": ( traits: [\"NameOwner\"], options: [\"Expr\"] ),\n-        \"TraitDef\": ( traits: [\"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"] ),\n+        \"TraitDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"] ),\n         \"Module\": (\n-            traits: [\"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],\n+            traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],\n             options: [ \"ItemList\" ]\n         ),\n         \"ItemList\": (\n             traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n         \"ConstDef\": ( traits: [\n+            \"VisibilityOwner\",\n             \"NameOwner\",\n             \"TypeParamsOwner\",\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ] ),\n         \"StaticDef\": ( traits: [\n+            \"VisibilityOwner\",\n             \"NameOwner\",\n             \"TypeParamsOwner\",\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ] ),\n         \"TypeDef\": ( traits: [\n+            \"VisibilityOwner\",\n             \"NameOwner\",\n             \"TypeParamsOwner\",\n             \"AttrsOwner\",\n@@ -482,6 +488,7 @@ Grammar(\n             ],\n         ),\n \n+        \"Visibility\": (),\n         \"Name\": (),\n         \"NameRef\": (),\n         \"MacroCall\": ( options: [ \"TokenTree\", \"Path\" ] ),"}]}