{"sha": "815d3703469194355d6fae6bc5844a1f7bbae4e1", "node_id": "C_kwDOAAsO6NoAKDgxNWQzNzAzNDY5MTk0MzU1ZDZmYWU2YmM1ODQ0YTFmN2JiYWU0ZTE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-25T15:02:53Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-25T15:02:53Z"}, "message": "Add documentation for `has_escaping_bound_vars`", "tree": {"sha": "90f94d219c1129f030658c00fe89cc0555c12b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f94d219c1129f030658c00fe89cc0555c12b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/815d3703469194355d6fae6bc5844a1f7bbae4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/815d3703469194355d6fae6bc5844a1f7bbae4e1", "html_url": "https://github.com/rust-lang/rust/commit/815d3703469194355d6fae6bc5844a1f7bbae4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/815d3703469194355d6fae6bc5844a1f7bbae4e1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "html_url": "https://github.com/rust-lang/rust/commit/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "4cdfd9e594042ba3550aa038094c7c707ad836b2", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/815d3703469194355d6fae6bc5844a1f7bbae4e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815d3703469194355d6fae6bc5844a1f7bbae4e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=815d3703469194355d6fae6bc5844a1f7bbae4e1", "patch": "@@ -72,12 +72,18 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n         self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()\n     }\n \n-    /// Returns `true` if this `self` has any regions that escape `binder` (and\n+    /// Returns `true` if this type has any regions that escape `binder` (and\n     /// hence are not bound by it).\n     fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n         self.has_vars_bound_at_or_above(binder.shifted_in(1))\n     }\n \n+    /// Return `true` if this type has regions that are not a part of the type.\n+    /// For example, `for<'a> fn(&'a i32)` return `false`, while `fn(&'a i32)`\n+    /// would return `true`. The latter can occur when traversing through the\n+    /// former.\n+    ///\n+    /// See [`HasEscapingVarsVisitor`] for more information.\n     fn has_escaping_bound_vars(&self) -> bool {\n         self.has_vars_bound_at_or_above(ty::INNERMOST)\n     }"}]}