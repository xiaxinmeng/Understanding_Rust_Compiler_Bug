{"sha": "1cf7af70326372ed2e11cb94f4ec868f32780193", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZjdhZjcwMzI2MzcyZWQyZTExY2I5NGY0ZWM4NjhmMzI3ODAxOTM=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T20:08:14Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T20:08:14Z"}, "message": "wip enum record/tuple generation", "tree": {"sha": "53f0f9a4c937985685d008e9b7051ccdf76da745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f0f9a4c937985685d008e9b7051ccdf76da745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf7af70326372ed2e11cb94f4ec868f32780193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf7af70326372ed2e11cb94f4ec868f32780193", "html_url": "https://github.com/rust-lang/rust/commit/1cf7af70326372ed2e11cb94f4ec868f32780193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf7af70326372ed2e11cb94f4ec868f32780193/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ce87cad827349fe2c86489b90762a4585de85c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ce87cad827349fe2c86489b90762a4585de85c", "html_url": "https://github.com/rust-lang/rust/commit/65ce87cad827349fe2c86489b90762a4585de85c"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "7aa99bb937e9e7108b3233fd0e51a55c29feb0d7", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=1cf7af70326372ed2e11cb94f4ec868f32780193", "patch": "@@ -765,7 +765,7 @@ enum Foo {\n     Baz {\n         quz: String,\n         fez: String,\n-    }\n+    },\n }\n \n impl PartialEq for Foo {"}, {"sha": "782bc56ab32777be50dfffefe3894fa195caab1b", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 65, "deletions": 7, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=1cf7af70326372ed2e11cb94f4ec868f32780193", "patch": "@@ -346,15 +346,73 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         // `Hash` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => return None,\n \n-        // FIXME: generate trait variants\n         ast::Adt::Enum(enum_) => {\n             // => std::mem::discriminant(self) == std::mem::discriminant(other)\n-            let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n-            let lhs = make::expr_call(gen_discriminant(), make::arg_list(Some(lhs)));\n-            let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n-            let rhs = make::expr_call(gen_discriminant(), make::arg_list(Some(rhs)));\n-            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n-            make::block_expr(None, Some(cmp)).indent(ast::edit::IndentLevel(1))\n+            let self_name = make::expr_path(make::ext::ident_path(\"self\"));\n+            let lhs = make::expr_call(gen_discriminant(), make::arg_list(Some(self_name.clone())));\n+            let other_name = make::expr_path(make::ext::ident_path(\"other\"));\n+            let rhs = make::expr_call(gen_discriminant(), make::arg_list(Some(other_name.clone())));\n+            let eq_check = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+\n+            let mut case_count = 0;\n+            let mut arms = vec![];\n+            for variant in enum_.variant_list()?.variants() {\n+                case_count += 1;\n+                match variant.field_list() {\n+                    // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n+                    Some(ast::FieldList::RecordFieldList(list)) => {\n+                        // let mut pats = vec![];\n+                        // let mut fields = vec![];\n+                        for field in list.fields() {\n+                            // let field_name = field.name()?;\n+                            // let pat = make::record_pat(path, pats);\n+                            // let pat = make::ident_pat(false, false, field_name.clone());\n+                            // pats.push(pat.into());\n+\n+                            // let path = make::ext::ident_path(&field_name.to_string());\n+                            // let method_call = gen_clone_call(make::expr_path(path));\n+                            // let name_ref = make::name_ref(&field_name.to_string());\n+                            // let field = make::record_expr_field(name_ref, Some(method_call));\n+                            // fields.push(field);\n+                        }\n+                        // let pat = make::record_pat(variant_name.clone(), pats.into_iter());\n+                        // let fields = make::record_expr_field_list(fields);\n+                        // let record_expr = make::record_expr(variant_name, fields).into();\n+                        // arms.push(make::match_arm(Some(pat.into()), None, record_expr));\n+                        todo!(\"implement tuple record iteration\")\n+                    }\n+                    Some(ast::FieldList::TupleFieldList(list)) => {\n+                        todo!(\"implement tuple enum iteration\")\n+                    }\n+                    None => continue,\n+                }\n+            }\n+\n+            if !arms.is_empty() && case_count > arms.len() {\n+                let lhs = make::wildcard_pat().into();\n+                arms.push(make::match_arm(Some(lhs), None, make::expr_literal(\"true\").into()));\n+            }\n+\n+            let expr = match arms.len() {\n+                0 => eq_check,\n+                _ => {\n+                    let condition = make::condition(eq_check, None);\n+\n+                    let match_target = make::expr_tuple(vec![self_name, other_name]);\n+                    let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+                    let match_expr = Some(make::expr_match(match_target, list));\n+                    let then_branch = make::block_expr(None, match_expr);\n+                    let then_branch = then_branch.indent(ast::edit::IndentLevel(1));\n+\n+                    let else_branche = make::expr_literal(\"false\");\n+                    let else_branche = make::block_expr(None, Some(else_branche.into()))\n+                        .indent(ast::edit::IndentLevel(1));\n+\n+                    make::expr_if(condition, then_branch, Some(else_branche.into()))\n+                }\n+            };\n+\n+            make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n         }\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {"}, {"sha": "2dfb0d1ad31cfeb516e521e7041c88e6d2a00661", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf7af70326372ed2e11cb94f4ec868f32780193/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=1cf7af70326372ed2e11cb94f4ec868f32780193", "patch": "@@ -160,6 +160,18 @@ pub enum ElseBranch {\n     IfExpr(ast::IfExpr),\n }\n \n+impl From<ast::BlockExpr> for ElseBranch {\n+    fn from(block_expr: ast::BlockExpr) -> Self {\n+        Self::Block(block_expr)\n+    }\n+}\n+\n+impl From<ast::IfExpr> for ElseBranch {\n+    fn from(if_expr: ast::IfExpr) -> Self {\n+        Self::IfExpr(if_expr)\n+    }\n+}\n+\n impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n         self.blocks().next()"}]}