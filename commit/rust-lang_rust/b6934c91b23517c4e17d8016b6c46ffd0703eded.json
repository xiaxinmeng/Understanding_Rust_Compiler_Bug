{"sha": "b6934c91b23517c4e17d8016b6c46ffd0703eded", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTM0YzkxYjIzNTE3YzRlMTdkODAxNmI2YzQ2ZmZkMDcwM2VkZWQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-03-21T18:32:46Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-03-21T18:32:46Z"}, "message": "termination_trait: Put examples in error help, not label", "tree": {"sha": "7a1410a8946ae3da985ed3516a784e99ba5460aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1410a8946ae3da985ed3516a784e99ba5460aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6934c91b23517c4e17d8016b6c46ffd0703eded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6934c91b23517c4e17d8016b6c46ffd0703eded", "html_url": "https://github.com/rust-lang/rust/commit/b6934c91b23517c4e17d8016b6c46ffd0703eded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6934c91b23517c4e17d8016b6c46ffd0703eded/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdc7af41366182259a05435e325d7444653a3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc7af41366182259a05435e325d7444653a3e8", "html_url": "https://github.com/rust-lang/rust/commit/2cdc7af41366182259a05435e325d7444653a3e8"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "8572c4077142b1a3d9323b1df0a49712806cd9db", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b6934c91b23517c4e17d8016b6c46ffd0703eded", "patch": "@@ -585,20 +585,25 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          trait_ref.to_predicate(), post_message)\n                             }));\n \n+                        let explanation = match obligation.cause.code {\n+                            ObligationCauseCode::MainFunctionType => {\n+                                \"consider using `()`, or a `Result`\".to_owned()\n+                            }\n+                            _ => {\n+                                format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                         pre_message,\n+                                         trait_ref,\n+                                         trait_ref.self_ty())\n+                            }\n+                        };\n+\n                         if let Some(ref s) = label {\n                             // If it has a custom \"#[rustc_on_unimplemented]\"\n                             // error message, let's display it as the label!\n                             err.span_label(span, s.as_str());\n-                            err.help(&format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                              pre_message,\n-                                              trait_ref,\n-                                              trait_ref.self_ty()));\n+                            err.help(&explanation);\n                         } else {\n-                            err.span_label(span,\n-                                           &*format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                                     pre_message,\n-                                                     trait_ref,\n-                                                     trait_ref.self_ty()));\n+                            err.span_label(span, explanation);\n                         }\n                         if let Some(ref s) = note {\n                             // If it has a custom \"#[rustc_on_unimplemented]\" note, let's display it"}, {"sha": "d5ac2d19e831f81c6fa4b7c15d1c6800493277ab", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b6934c91b23517c4e17d8016b6c46ffd0703eded", "patch": "@@ -1443,7 +1443,7 @@ pub fn id() -> u32 {\n #[cfg_attr(not(test), lang = \"termination\")]\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n #[rustc_on_unimplemented =\n-  \"`main` can only return types like `()` that implement {Termination}, not `{Self}`\"]\n+  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}, {"sha": "2cf9fdcfb4dbd4e98fb34a7f3761bd25e035c166", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-i32.rs?ref=b6934c91b23517c4e17d8016b6c46ffd0703eded", "patch": "@@ -10,6 +10,6 @@\n \n fn main() -> i32 {\n //~^ ERROR `i32: std::process::Termination` is not satisfied\n-//~| NOTE `main` can only return types like `()` that implement std::process::Termination, not `i32`\n+//~| NOTE `main` can only return types that implement std::process::Termination, not `i32`\n     0\n }"}, {"sha": "211247757cbc1210c9311f76c4554201db37d507", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-main-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6934c91b23517c4e17d8016b6c46ffd0703eded/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.stderr?ref=b6934c91b23517c4e17d8016b6c46ffd0703eded", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `char: std::process::Termination` is not satisfied\n   --> $DIR/termination-trait-main-wrong-type.rs:11:14\n    |\n LL | fn main() -> char { //~ ERROR\n-   |              ^^^^ `main` can only return types like `()` that implement std::process::Termination, not `char`\n+   |              ^^^^ `main` can only return types that implement std::process::Termination, not `char`\n    |\n-   = help: the trait `std::process::Termination` is not implemented for `char`\n+   = help: consider using `()`, or a `Result`\n \n error: aborting due to previous error\n "}]}