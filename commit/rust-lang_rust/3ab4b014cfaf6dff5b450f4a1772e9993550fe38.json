{"sha": "3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjRiMDE0Y2ZhZjZkZmY1YjQ1MGY0YTE3NzJlOTk5MzU1MGZlMzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-16T01:46:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-17T17:13:45Z"}, "message": "Remove the class keyword", "tree": {"sha": "cff9c62a771f5e86819095f9cfa348fd935ba207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff9c62a771f5e86819095f9cfa348fd935ba207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "html_url": "https://github.com/rust-lang/rust/commit/3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7b143036e1d61c8f58864db3445d2a0ae4ad11", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7b143036e1d61c8f58864db3445d2a0ae4ad11", "html_url": "https://github.com/rust-lang/rust/commit/6d7b143036e1d61c8f58864db3445d2a0ae4ad11"}], "stats": {"total": 606, "additions": 185, "deletions": 421}, "files": [{"sha": "a34c32e1200344032ecd76055ae0657f9a1fc4cf", "filename": "doc/rust.md", "status": "modified", "additions": 7, "deletions": 163, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -211,7 +211,7 @@ The keywords in [source files](#source-files) are the following strings:\n ~~~~~~~~ {.keyword}\n again assert\n break\n-check class const copy\n+check const copy\n drop\n else enum export extern\n fail false fn for\n@@ -220,6 +220,7 @@ let log loop\n match mod mut\n pure\n return\n+struct\n true trait type\n unchecked unsafe\n while\n@@ -1097,151 +1098,6 @@ enum list<T> {\n let a: list<int> = cons(7, @cons(13, @nil));\n ~~~~\n \n-### Classes\n-\n-A _class_ is a named record type that collects together fields and\n-methods. It must have a _constructor_ (a function called `new` that\n-returns a new instance of the class), and may have a destructor (a\n-nullary function called `drop` that executes before the memory manager\n-frees the memory for a given class). For historical reasons, we may\n-call a class with a destructor and a single field a \"resource\".\n-\n-A _class item_ declares a class type:\n-\n-~~~~\n-class file_descriptor {\n-    let fd: libc::c_int;\n-    new(fd: libc::c_int) { self.fd = fd; }\n-    drop { libc::close(self.fd); }\n-}\n-~~~~\n-\n-Calling the `file_descriptor` constructor function on an integer will\n-produce a value with the `file_descriptor` type.\n-\n-_Fields_ are immutable by default, so instances of `file_descriptor`\n-can't have their `fd` fields reassigned. A mutable field declaration\n-looks like:\n-\n-~~~~\n-    let mut fd: libc::c_int;\n-~~~~\n-\n-The only exception is that the body of the class constructor begins\n-with all the class's fields uninitialized, and is allowed to -- in\n-fact, must -- initialize all the fields. The compiler enforces this\n-invariant.\n-\n-Usually, the class constructor stores its argument or arguments in the\n-class's named fields. In this case, the `file_descriptor`'s data field\n-would be accessed like `f.fd`, if `f` is a value of type\n-`file_descriptor`. By default, class fields are _public_: they can be\n-accessed both from methods inside the class, and code outside the\n-class. Classes can also have private fields:\n-\n-~~~~\n-class file_descriptor {\n-    let fd: *libc::FILE;\n-    new(fd: *libc::FILE) {\n-      self.fd = fd; self.name = none;\n-    }\n-    priv {\n-      let mut name: option<~str>;\n-    }\n-    fn get_name() -> ~str {\n-      match self.name {\n-         none    => fail ~\"File has no name!\",\n-         some(n) => n\n-      }\n-    }\n-}\n-~~~~\n-\n-Private fields are instance-private: methods in a class `C` can access\n-`self`'s private fields, but not private fields of other values of\n-type `C`. Code outside a class can't access any private fields.\n-\n-A class item may contain _methods_, which take an implicit `self`\n-argument:\n-\n-~~~~\n-class file_descriptor {\n-    let fd: *libc::FILE;\n-    new(fd: *libc::FILE) { self.fd = fd; }\n-    fn flush() {\n-       libc::fflush(self.fd);\n-    }\n-}\n-~~~~\n-\n-In this case, ```open``` is a nullary method that calls the\n-```fopen``` function, defined in another library, on the ```fd```\n-field. As in this example, methods must refer to their self's fields\n-as fields of ```self```; bare references to ```fd``` can't\n-occur. Methods can be public or private; just like fields, they are\n-public by default and private if enclosed in a `priv` section.\n-\n-Classes may be polymorphic:\n-\n-~~~~\n-class file<A: copy> {\n-  let data: A;\n-  let fd: *libc::FILE;\n-  new(data: A, fd: *libc::FILE) { self.data = data; self.fd = fd; }\n-}\n-~~~~\n-\n-Methods may also be polymorphic, and can have additional type\n-parameters other than those bound in the class:\n-\n-~~~~\n-class file<A: copy> {\n-  let data: A;\n-  let fd: *libc::FILE;\n-  new(fd: *libc::FILE, data: A) { self.fd = fd; self.data = data; }\n-  fn map_data<B>(f: fn(A) -> B) -> B {\n-     f(self.data)\n-  }\n-}\n-~~~~\n-\n-Classes do not support inheritance, except through traits. As a\n-result, all class method dispatch is static (non-virtual).\n-\n-A class may implement a trait (see [traits](#traits)):\n-\n-~~~~\n-trait to_str {\n-  fn to_str() -> ~str;\n-}\n-\n-class file : to_str {\n-  let fd: *libc::FILE;\n-  new(fd: *libc::FILE) { self.fd = fd; }\n-  fn to_str() -> ~str { ~\"a file\" }\n-}\n-~~~~\n-\n-The syntax `class file: to_str` is pronounced \"class `file`\n-implements trait `to_str`\".\n-\n-Class instances may be allocated on the stack, in the exchange heap,\n-or on the task heap. A value with a class type ```C``` has a\n-noncopyable [type kind](#type-kinds) if ```C``` has a destructor, and\n-thus may not be copied. Class types that don't have destructors may be\n-copied if all their fields are copyable.\n-\n-The semantics guarantee that for each constructed resource value, the\n-destructor will run once: when the value is disposed of (barring\n-drastic program termination that somehow prevents unwinding from\n-taking place). For stack-allocated values, disposal happens when the\n-value goes out of scope. For values in shared boxes, it happens when\n-the reference count of the box reaches zero.\n-\n-The order of fields in a class instance is significant; its runtime\n-representation is the same as that of a record with identical fields\n-laid out in the same order.\n-\n ### Traits\n \n A _trait item_ describes a set of method types. [_implementation\n@@ -1348,7 +1204,7 @@ trait.  The methods in such an implementation can only be used\n statically (as direct calls on the values of the type that the\n implementation targets). In such an implementation, the `of` clause is\n not given, and the name is mandatory.  Such implementations are\n-limited to nominal types (enums, classes) and the implementation must\n+limited to nominal types (enums, structs) and the implementation must\n appear in the same module or a sub-module as the receiver type.\n \n _When_ a trait is specified, all methods declared as part of the\n@@ -2744,9 +2600,9 @@ fn main() {\n In this example, the trait `printable` occurs as a type in both the type signature of\n `print`, and the cast expression in `main`.\n \n-### Class types\n+### Struct types\n \n-Every class item defines a type. See [classes](#classes).\n+Every struct item defines a type.\n \n ### Type parameters\n \n@@ -2766,7 +2622,7 @@ type `~[B]`, a vector type with element type `B`.\n \n ### Self type\n \n-The special type `self` has a meaning within methods inside a class or\n+The special type `self` has a meaning within methods inside an\n impl item. It refers to the type of the implicit `self` argument. For\n example, in:\n \n@@ -2781,19 +2637,7 @@ impl ~str: printable {\n ~~~~~~\n \n `self` refers to the value of type `str` that is the receiver for a\n-call to the method `to_str`. Similarly, in a class declaration:\n-\n-~~~~~~\n-class cat {\n-  let mut meows: uint;\n-  new() { self.meows = 0; }\n-  fn meow() { self.meows = self.meows + 1; }\n-}\n-~~~~~~\n-\n-`self` refers to the class instance that is the receiver of the method\n-(except in the constructor `new`, where `self` is the class instance\n-that the constructor implicitly returns).\n+call to the method `to_str`.\n \n ## Type kinds\n "}, {"sha": "5a2fce3bc772d6c6824c35ae03e483ded0db8d6a", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1821,85 +1821,6 @@ fn contains(v: ~[int], elt: int) -> bool {\n \n `for` syntax only works with stack closures.\n \n-# Classes\n-\n-Rust lets users define new types with fields and methods, called 'classes', in\n-the style of object-oriented languages.\n-\n-> ***Warning:*** Rust's classes are in the process of changing rapidly. Some more\n-> information about some of the potential changes is [here][classchanges].\n-\n-[classchanges]: http://pcwalton.github.com/blog/2012/06/03/maximally-minimal-classes-for-rust/\n-\n-An example of a class:\n-\n-~~~~\n-class example {\n-  let mut x: int;\n-  let y: int;\n-\n-  priv {\n-    let mut private_member: int;\n-    fn private_method() {}\n-  }\n-\n-  new(x: int) {\n-    // Constructor\n-    self.x = x;\n-    self.y = 7;\n-    self.private_member = 8;\n-  }\n-\n-  fn a() {\n-    io::println(~\"a\");\n-  }\n-\n-  drop {\n-    // Destructor\n-    self.x = 0;\n-  }\n-}\n-\n-fn main() {\n-  let x: example = example(1);\n-  let y: @example = @example(2);\n-  x.a();\n-  x.x = 5;\n-}\n-~~~~\n-\n-Fields and methods are declared just like functions and local variables, using\n-'fn' and 'let'. As usual, 'let mut' can be used to create mutable fields. At\n-minimum, Rust classes must have at least one field.\n-\n-Rust classes must also have a constructor, and can optionally have a destructor\n-as well. The constructor and destructor are declared as shown in the example:\n-like methods named 'new' and 'drop', but without 'fn', and without arguments\n-for drop.\n-\n-In the constructor, the compiler will enforce that all fields are initialized\n-before doing anything that might allow them to be accessed. This includes\n-returning from the constructor, calling any method on 'self', calling any\n-function with 'self' as an argument, or taking a reference to 'self'. Mutation\n-of immutable fields is possible only in the constructor, and only before doing\n-any of these things; afterwards it is an error.\n-\n-Private fields and methods are declared as shown above, using a `priv { ... }`\n-block within the class. They are accessible only from within the same instance\n-of the same class. (For example, even from within class A, you cannot call\n-private methods, or access private fields, on other instances of class A; only\n-on `self`.) This accessibility restriction may change in the future.\n-\n-As mentioned below, in the section on copying types, classes with destructors\n-are considered 'resource' types and are not copyable.\n-\n-Declaring a class also declares its constructor as a function of the same name.\n-You can construct an instance of the class, as in the example, by calling that\n-function. The function and the type, though they have the same name, are\n-otherwise independent. As with other Rust types, you can use `@` or `~` to\n-construct a heap-allocated instance of a class, either shared or unique; just\n-call e.g. `@example(...)` as shown above.\n-\n # Argument passing\n \n Rust datatypes are not trivial to copy (the way, for example,"}, {"sha": "4d67e98d68af0b918fa7475128d35aee30c42114", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -97,7 +97,7 @@ fn listen<T: send, U>(f: fn(Chan<T>) -> U) -> U {\n     f(po.chan())\n }\n \n-class PortPtr<T:send> {\n+struct PortPtr<T:send> {\n   let po: *rust_port;\n   new(po: *rust_port) { self.po = po; }\n   drop unsafe {\n@@ -132,7 +132,7 @@ class PortPtr<T:send> {\n  */\n fn as_raw_port<T: send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n \n-    class PortRef {\n+    struct PortRef {\n        let p: *rust_port;\n        new(p: *rust_port) { self.p = p; }\n        drop {"}, {"sha": "8ef9556a95846b42ebbef61c938b0e885db501d5", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -237,7 +237,7 @@ impl<T: Reader, C> {base: T, cleanup: C}: Reader {\n     fn tell() -> uint { self.base.tell() }\n }\n \n-class FILERes {\n+struct FILERes {\n     let f: *libc::FILE;\n     new(f: *libc::FILE) { self.f = f; }\n     drop { libc::fclose(self.f); }\n@@ -415,7 +415,7 @@ impl fd_t: Writer {\n     }\n }\n \n-class FdRes {\n+struct FdRes {\n     let fd: fd_t;\n     new(fd: fd_t) { self.fd = fd; }\n     drop { libc::close(self.fd); }\n@@ -764,7 +764,7 @@ mod fsync {\n \n \n     // Artifacts that need to fsync on destruction\n-    class Res<t> {\n+    struct Res<t> {\n         let arg: Arg<t>;\n         new(-arg: Arg<t>) { self.arg <- arg; }\n         drop {"}, {"sha": "c122fb9e46f81e11c728c46f351b0d4a6c9c3fb6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -264,7 +264,7 @@ fn test_unwrap_str() {\n \n #[test]\n fn test_unwrap_resource() {\n-    class r {\n+    struct r {\n        let i: @mut int;\n        new(i: @mut int) { self.i = i; }\n        drop { *(self.i) += 1; }"}, {"sha": "c02b094ad36a112ebc8e33424855311709078ca9", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -194,7 +194,7 @@ unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n     let _unweaken = Unweaken(ch);\n     f(po);\n \n-    class Unweaken {\n+    struct Unweaken {\n       let ch: comm::Chan<()>;\n       new(ch: comm::Chan<()>) { self.ch = ch; }\n       drop unsafe {"}, {"sha": "cf2a3712b069c1ab5180ad76c85cf140011c972c", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -243,7 +243,7 @@ impl Rng {\n \n }\n \n-class RandRes {\n+struct RandRes {\n     let c: *rctx;\n     new(c: *rctx) { self.c = c; }\n     drop { rustrt::rand_free(self.c); }"}, {"sha": "3ccdc87997d267da49b24723b4f02836d7bff689", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -225,7 +225,7 @@ fn start_program(prog: &str, args: &[~str]) -> Program {\n        libc::fclose(r.out_file);\n        libc::fclose(r.err_file);\n     }\n-    class ProgRes {\n+    struct ProgRes {\n         let r: ProgRepr;\n         new(+r: ProgRepr) { self.r = r; }\n         drop { destroy_repr(&self.r); }"}, {"sha": "959ee4cf5a8a436888402e2f151533966d1bc662", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -6,7 +6,7 @@ import sys::size_of;\n \n type Word = uint;\n \n-class Frame {\n+struct Frame {\n     let fp: *Word;\n \n     new(fp: *Word) {"}, {"sha": "90dd00d994a6d45a419bc83e0b91b37f98d7d742", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -578,7 +578,7 @@ fn get_task() -> Task {\n  * ~~~\n  */\n unsafe fn unkillable<U>(f: fn() -> U) -> U {\n-    class AllowFailure {\n+    struct AllowFailure {\n         let t: *rust_task;\n         new(t: *rust_task) { self.t = t; }\n         drop { rustrt::rust_task_allow_kill(self.t); }\n@@ -592,7 +592,7 @@ unsafe fn unkillable<U>(f: fn() -> U) -> U {\n \n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n unsafe fn rekillable<U>(f: fn() -> U) -> U {\n-    class DisallowFailure {\n+    struct DisallowFailure {\n         let t: *rust_task;\n         new(t: *rust_task) { self.t = t; }\n         drop { rustrt::rust_task_inhibit_kill(self.t); }\n@@ -609,7 +609,7 @@ unsafe fn rekillable<U>(f: fn() -> U) -> U {\n  * For use with exclusive ARCs, which use pthread mutexes directly.\n  */\n unsafe fn atomically<U>(f: fn() -> U) -> U {\n-    class DeferInterrupts {\n+    struct DeferInterrupts {\n         let t: *rust_task;\n         new(t: *rust_task) { self.t = t; }\n         drop {\n@@ -911,7 +911,7 @@ fn each_ancestor(list:        &mut AncestorList,\n }\n \n // One of these per task.\n-class Tcb {\n+struct Tcb {\n     let me:            *rust_task;\n     // List of tasks with whose fates this one's is intertwined.\n     let tasks:         TaskGroupArc; // 'none' means the group has failed.\n@@ -952,7 +952,7 @@ class Tcb {\n     }\n }\n \n-class AutoNotify {\n+struct AutoNotify {\n     let notify_chan: comm::Chan<Notification>;\n     let mut failed:  bool;\n     new(chan: comm::Chan<Notification>) {"}, {"sha": "80fb4dc7d629527d70801892f7e5941b34a05f04", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -74,7 +74,7 @@ type ArcData<T> = {\n     data: T\n };\n \n-class ArcDestruct<T> {\n+struct ArcDestruct<T> {\n    let data: *libc::c_void;\n    new(data: *libc::c_void) { self.data = data; }\n    drop unsafe {\n@@ -162,7 +162,7 @@ extern mod rustrt {\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n-class LittleLock {\n+struct LittleLock {\n     let l: rust_little_lock;\n     new() {\n         self.l = rustrt::rust_create_little_lock();\n@@ -173,7 +173,7 @@ class LittleLock {\n impl LittleLock {\n     #[inline(always)]\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n-        class Unlock {\n+        struct Unlock {\n             let l: rust_little_lock;\n             new(l: rust_little_lock) { self.l = l; }\n             drop { rustrt::rust_unlock_little_lock(self.l); }"}, {"sha": "c68ee317da4788be2e550c399a1c868905392651", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -33,7 +33,7 @@ fn replace<T>(dest: &mut T, +src: T) -> T {\n }\n \n /// A non-copyable dummy type.\n-class NonCopyable {\n+struct NonCopyable {\n     i: ();\n     new() { self.i = (); }\n     drop { }"}, {"sha": "77d39616b61c8f06f7c756182a26e9a322253747", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -19,7 +19,7 @@ export to_str;\n export eq_vec;\n export methods;\n \n-class small_bitv {\n+struct small_bitv {\n     let mut bits: u32;\n     new(bits: u32) { self.bits = bits; }\n     priv {\n@@ -78,7 +78,7 @@ class small_bitv {\n     fn invert() { self.bits = !self.bits; }\n }\n \n-class big_bitv {\n+struct big_bitv {\n // only mut b/c of clone and lack of other constructor\n     let mut storage: ~[mut uint];\n     new(-storage: ~[mut uint]) {\n@@ -153,7 +153,7 @@ enum a_bitv { big(~big_bitv), small(~small_bitv) }\n enum op {union, intersect, assign, difference}\n \n // The bitvector type\n-class bitv {\n+struct bitv {\n     let rep: a_bitv;\n     let nbits: uint;\n "}, {"sha": "0cba532fa579d9bf5c1f1b32fcbadb2dbb2f7ce0", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -42,7 +42,7 @@ enum c_vec<T> {\n     c_vec_({ base: *mut T, len: uint, rsrc: @dtor_res})\n }\n \n-class dtor_res {\n+struct dtor_res {\n   let dtor: option<fn@()>;\n   new(dtor: option<fn@()>) { self.dtor = dtor; }\n   drop {"}, {"sha": "aadbe09bc4e1833067e27f5783635d13aa2863bd", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -38,7 +38,7 @@ extern mod rustrt {\n  * underlying libuv data structures when it goes out of scope. This is the\n  * data structure that is used for read/write operations over a TCP stream.\n  */\n-class tcp_socket {\n+struct tcp_socket {\n   let socket_data: @tcp_socket_data;\n   new(socket_data: @tcp_socket_data) { self.socket_data = socket_data; }\n   drop {\n@@ -54,7 +54,7 @@ class tcp_socket {\n  * It is created with a call to `net::tcp::socket_buf()` and has impls that\n  * satisfy both the `io::reader` and `io::writer` traits.\n  */\n-class tcp_socket_buf {\n+struct tcp_socket_buf {\n   let data: @tcp_buffered_socket_data;\n   new(data: @tcp_buffered_socket_data) { self.data = data; }\n }"}, {"sha": "9e44ce7acdad620c60050531d871c501153b2800", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -109,7 +109,7 @@ fn protocol(name: ident, +span: span) -> protocol {\n     @protocol_(name, span)\n }\n \n-class protocol_ {\n+struct protocol_ {\n     let name: ident;\n     let span: span;\n     let states: DVec<state>;"}, {"sha": "c1e5de487411723c3dc26c17c3a7819042c20800", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -180,7 +180,7 @@ pure fn maybe_append(+lhs: ~[attribute], rhs: option<~[attribute]>)\n \n /* ident is handled by common.rs */\n \n-class parser {\n+struct parser {\n     let sess: parse_sess;\n     let cfg: crate_cfg;\n     let file_type: file_type;\n@@ -3201,8 +3201,7 @@ class parser {\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n-        } else if items_allowed &&\n-                (self.eat_keyword(~\"class\") || self.eat_keyword(~\"struct\")) {\n+        } else if items_allowed && self.eat_keyword(~\"struct\") {\n             let (ident, item_, extra_attrs) = self.parse_item_class();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,"}, {"sha": "0f4d71c281c633b87c39005a740361f3b6717c19", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -335,7 +335,7 @@ fn restricted_keyword_table() -> hashmap<~str, ()> {\n     let keys = ~[\n         ~\"again\", ~\"assert\",\n         ~\"break\",\n-        ~\"check\", ~\"class\", ~\"const\", ~\"copy\",\n+        ~\"check\", ~\"const\", ~\"copy\",\n         ~\"do\", ~\"drop\",\n         ~\"else\", ~\"enum\", ~\"export\", ~\"extern\",\n         ~\"fail\", ~\"false\", ~\"fn\", ~\"for\","}, {"sha": "f115125647765614c1802c7ca05793050b76e295", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -230,7 +230,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n             diagnostic::emit(cmsp, msg, lvl);\n         };\n \n-        class finally {\n+        struct finally {\n             let ch: comm::Chan<monitor_msg>;\n             new(ch: comm::Chan<monitor_msg>) { self.ch = ch; }\n             drop { comm::send(self.ch, done); }"}, {"sha": "8f705781adfd429f0e7abd63b962c64c4670f412", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1122,7 +1122,7 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> ~[TypeRef] unsafe {\n \n /* Memory-managed interface to target data. */\n \n-class target_data_res {\n+struct target_data_res {\n     let TD: TargetDataRef;\n     new(TD: TargetDataRef) { self.TD = TD; }\n     drop { llvm::LLVMDisposeTargetData(self.TD); }\n@@ -1138,7 +1138,7 @@ fn mk_target_data(string_rep: ~str) -> target_data {\n \n /* Memory-managed interface to pass managers. */\n \n-class pass_manager_res {\n+struct pass_manager_res {\n     let PM: PassManagerRef;\n     new(PM: PassManagerRef) { self.PM = PM; }\n     drop { llvm::LLVMDisposePassManager(self.PM); }\n@@ -1153,7 +1153,7 @@ fn mk_pass_manager() -> pass_manager {\n \n /* Memory-managed interface to object files. */\n \n-class object_file_res {\n+struct object_file_res {\n     let ObjectFile: ObjectFileRef;\n     new(ObjectFile: ObjectFileRef) { self.ObjectFile = ObjectFile; }\n     drop { llvm::LLVMDisposeObjectFile(self.ObjectFile); }\n@@ -1169,7 +1169,7 @@ fn mk_object_file(llmb: MemoryBufferRef) -> option<object_file> {\n \n /* Memory-managed interface to section iterators. */\n \n-class section_iter_res {\n+struct section_iter_res {\n     let SI: SectionIteratorRef;\n     new(SI: SectionIteratorRef) { self.SI = SI; }\n     drop { llvm::LLVMDisposeSectionIterator(self.SI); }"}, {"sha": "c36b99ba9d56d38c7a631aa9ad63f4e8f2e708d7", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -403,7 +403,7 @@ fn def_like_to_def(def_like: def_like) -> ast::def {\n }\n \n // A path.\n-class path_entry {\n+struct path_entry {\n     // The full path, separated by '::'.\n     let path_string: ~str;\n     // The definition, implementation, or field that this path corresponds to."}, {"sha": "557ee9661a2ce1c576ef2bb8a0d8e88190cc94ff", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -22,7 +22,7 @@ import syntax::visit::{visit_crate, visit_item};\n import std::map::{hashmap, str_hash};\n import str_eq = str::eq;\n \n-class LanguageItems {\n+struct LanguageItems {\n     let mut const_trait: option<def_id>;\n     let mut copy_trait: option<def_id>;\n     let mut send_trait: option<def_id>;\n@@ -62,7 +62,7 @@ class LanguageItems {\n     }\n }\n \n-class LanguageItemCollector {\n+struct LanguageItemCollector {\n     let items: &LanguageItems;\n \n     let crate: @crate;"}, {"sha": "321e3db318e769929a505a4d84054a0e2b2dec3b", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -208,7 +208,7 @@ fn relevant_def(def: def) -> option<relevant_def> {\n     }\n }\n \n-class ir_maps {\n+struct ir_maps {\n     let tcx: ty::ctxt;\n     let method_map: typeck::method_map;\n     let last_use_map: last_use_map;\n@@ -505,7 +505,7 @@ const ACC_READ: uint = 1u;\n const ACC_WRITE: uint = 2u;\n const ACC_USE: uint = 4u;\n \n-class liveness {\n+struct liveness {\n     let tcx: ty::ctxt;\n     let ir: @ir_maps;\n     let s: specials;"}, {"sha": "7ff5d96c9934d051eaf70c9aa1c49444f2b34fd3", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -249,7 +249,7 @@ fn Atom(n: uint) -> Atom {\n     return n;\n }\n \n-class AtomTable {\n+struct AtomTable {\n     let atoms: hashmap<@~str,Atom>;\n     let strings: DVec<@~str>;\n     let mut atom_count: uint;\n@@ -312,7 +312,7 @@ fn atom_hashmap<V:copy>() -> hashmap<Atom,V> {\n }\n \n /// One local scope.\n-class Rib {\n+struct Rib {\n     let bindings: hashmap<Atom,def_like>;\n     let kind: RibKind;\n \n@@ -323,7 +323,7 @@ class Rib {\n }\n \n /// One import directive.\n-class ImportDirective {\n+struct ImportDirective {\n     let module_path: @DVec<Atom>;\n     let subclass: @ImportDirectiveSubclass;\n     let span: span;\n@@ -339,7 +339,7 @@ class ImportDirective {\n }\n \n /// The item that an import resolves to.\n-class Target {\n+struct Target {\n     let target_module: @Module;\n     let bindings: @NameBindings;\n \n@@ -349,7 +349,7 @@ class Target {\n     }\n }\n \n-class ImportResolution {\n+struct ImportResolution {\n     let span: span;\n \n     // The number of outstanding references to this name. When this reaches\n@@ -402,7 +402,7 @@ enum ParentLink {\n }\n \n /// One node in the tree of modules.\n-class Module {\n+struct Module {\n     let parent_link: ParentLink;\n     let mut def_id: option<def_id>;\n \n@@ -491,7 +491,7 @@ fn unused_import_lint_level(session: session) -> level {\n \n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n-class NameBindings {\n+struct NameBindings {\n     let mut module_def: ModuleDef;      //< Meaning in the module namespace.\n     let mut type_def: option<def>;      //< Meaning in the type namespace.\n     let mut value_def: option<def>;     //< Meaning in the value namespace.\n@@ -611,7 +611,7 @@ class NameBindings {\n }\n \n /// Interns the names of the primitive types.\n-class PrimitiveTypeTable {\n+struct PrimitiveTypeTable {\n     let primitive_types: hashmap<Atom,prim_ty>;\n \n     new(atom_table: @AtomTable) {\n@@ -652,7 +652,7 @@ fn namespace_to_str(ns: Namespace) -> ~str {\n }\n \n /// The main resolver class.\n-class Resolver {\n+struct Resolver {\n     let session: session;\n     let lang_items: LanguageItems;\n     let crate: @crate;"}, {"sha": "d1452fa49063fa0c995dafaad619980302d786bd", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -83,7 +83,7 @@ fn dup_for_join(dest: dest) -> dest {\n     }\n }\n \n-class icx_popper {\n+struct icx_popper {\n     let ccx: @crate_ctxt;\n     new(ccx: @crate_ctxt) { self.ccx = ccx; }\n     drop {"}, {"sha": "8e10be8e211cb202d4cfdab3b474bfe3a7c11195", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -72,7 +72,7 @@ type stats =\n      llvm_insns: hashmap<~str, uint>,\n      fn_times: @mut ~[{ident: ~str, time: int}]};\n \n-class BuilderRef_res {\n+struct BuilderRef_res {\n     let B: BuilderRef;\n     new(B: BuilderRef) { self.B = B; }\n     drop { llvm::LLVMDisposeBuilder(self.B); }\n@@ -390,7 +390,7 @@ type node_info = {\n // code.  Each basic block we generate is attached to a function, typically\n // with many basic blocks per function.  All the basic blocks attached to a\n // function are organized as a directed graph.\n-class block_ {\n+struct block_ {\n     // The BasicBlockRef returned from a call to\n     // llvm::LLVMAppendBasicBlock(llfn, name), which adds a basic\n     // block to the function pointed to by llfn.  We insert"}, {"sha": "4e47b7524499d198d82089b9d5d506e2343fd246", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -56,7 +56,7 @@ fn transform_self_type_for_method\n     }\n }\n \n-class lookup {\n+struct lookup {\n     let fcx: @fn_ctxt;\n     let expr: @ast::expr;\n     let self_expr: @ast::expr;"}, {"sha": "bfc2365f1a9a5d63859f8cb50ab41ec0679a7caa", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -118,7 +118,7 @@ fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n     }\n }\n \n-class CoherenceInfo {\n+struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n     let inherent_methods: hashmap<def_id,@DVec<@Impl>>;\n@@ -133,7 +133,7 @@ class CoherenceInfo {\n     }\n }\n \n-class CoherenceChecker {\n+struct CoherenceChecker {\n     let crate_context: @crate_ctxt;\n     let inference_context: infer_ctxt;\n "}, {"sha": "e34113432aece8840e388bae69ce45e33f7f9319", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -14,7 +14,7 @@ fn indent<R>(op: fn() -> R) -> R {\n     return r;\n }\n \n-class _indenter {\n+struct _indenter {\n     let _i: ();\n     new(_i: ()) { self._i = (); }\n     drop { debug!{\"<<\"}; }"}, {"sha": "8968d481f6a09dfb4eb34849e6e005f276fe6908", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -111,7 +111,7 @@ mod blade_runner {\n  * eget ante feugiat tortor congue auctor ac quis ante. Proin\n  * condimentum lacinia tincidunt.\n  */\n-class bored {\n+struct bored {\n   let bored: bool;\n   new(bored: bool) { self.bored = bored; }\n   drop { log(error, self.bored); }"}, {"sha": "46312dc989bdeb6b961779b26eca84010d27cf62", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "bd3e17000b1d94dc60e6f81252f51b1ad387f9f8", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "6b62cd166dbe01b5c8f351b2bf2389f2aea2dacb", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "56debd8574846255ae216ad023c3f356eb42e31f", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "5e5c5c53d9c3f11a6e3445cb43c09f70eee2a5f7", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n       fn nap() { for uint::range(1u, 10000u) |_i|{}}"}, {"sha": "18ffb35d3e5e52590ea3b4e7f5096d3bef0c4611", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n mod kitties {\n \n-class cat<U> {\n+struct cat<U> {\n   priv {\n     let mut info : ~[U];\n     let mut meows : uint;"}, {"sha": "fad0197564ca7c984821551ea9defc1854b3eba6", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ import to_str::ToStr;\n \n mod kitty {\n \n-class cat : ToStr {\n+struct cat : ToStr {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "1d1adbf179d550559d69263199e34925cdb257c3", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -7,7 +7,7 @@ use std;\n \n export context;\n \n-class arc_destruct<T:const> {\n+struct arc_destruct<T:const> {\n   let _data: int;\n   new(data: int) { self._data = data; }\n   drop {}\n@@ -21,7 +21,7 @@ fn init() -> arc_destruct<context_res> unsafe {\n     arc(context_res())\n }\n \n-class context_res {\n+struct context_res {\n     let ctx : int;\n \n     new() { self.ctx = 0; }"}, {"sha": "d47f16c7f11002413800a8f9dfd415ac853cfb8e", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -5,7 +5,7 @@ mod socket {\n \n export socket_handle;\n \n-class socket_handle {\n+struct socket_handle {\n     let sockfd: libc::c_int;\n     new(x: libc::c_int) {self.sockfd = x;}\n     drop { /* c::close(self.sockfd); */ }"}, {"sha": "cca092faf002fae841636ff4df51fa90fb9dc8bc", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ export rsrc;\n fn foo(_x: i32) {\n }\n \n-class rsrc {\n+struct rsrc {\n   let x: i32;\n   new(x: i32) { self.x = x; }\n   drop { foo(self.x); }"}, {"sha": "dbc59ec0071c1fdb0ec2f3fb9d3df8d1ae981ca8", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -27,7 +27,7 @@ fn port<T: send>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n }\n \n-class port_ptr<T:send> {\n+struct port_ptr<T:send> {\n    let po: *rust_port;\n    new(po: *rust_port) {\n     debug!{\"in the port_ptr constructor\"};"}, {"sha": "3c2dfec2d7f93c2edc8428438ba73de2a60c20af", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -40,7 +40,7 @@ enum st {\n     })\n }\n \n-class r {\n+struct r {\n   let _l: @nillist;\n   new(l: @nillist) { self._l = l; }\n   drop {}"}, {"sha": "2c45896acd9fb509e3dd17c4d5e75ed6b9c5ad28", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -104,7 +104,7 @@ fn reduce(&&word: ~str, get: map_reduce::getter<int>) {\n     io::println(fmt!{\"%s\\t%?\", word, count});\n }\n \n-class box<T> {\n+struct box<T> {\n     let mut contents: option<T>;\n     new(+x: T) { self.contents = some(x); }\n \n@@ -350,7 +350,7 @@ fn is_word_char(c: char) -> bool {\n     char::is_alphabetic(c) || char::is_digit(c) || c == '_'\n }\n \n-class random_word_reader: word_reader {\n+struct random_word_reader: word_reader {\n     let mut remaining: uint;\n     let rng: rand::Rng;\n     new(count: uint) {"}, {"sha": "42781866f9a1c8444d40a48b5cafb43502b90006", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "958cabb61b84953031d2a1bcb8feff58dc77db9d", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:mismatched types: expected `()` but found `bool`\n \n-class r {\n+struct r {\n   new() {}\n   drop { true }\n }"}, {"sha": "82c09f5036b34e7f0968fd143db584e88cacc67d", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class noncopyable {\n+struct noncopyable {\n     i: (); new() { self.i = (); } drop { #error[\"dropped\"]; }\n }\n enum wrapper = noncopyable;"}, {"sha": "3703c44f520d51e868d27898db22db948674b95a", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class foo { let x: int; new(x: int) { self.x = x; } drop { } }\n+struct foo { let x: int; new(x: int) { self.x = x; } drop { } }\n \n fn to_lambda2(b: foo) -> fn@(uint) -> uint {\n     // test case where copy clause specifies a value that is not used"}, {"sha": "ac4741a0e68443b91036c19b1f102a59b90f4ae8", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ trait noisy {\n   fn speak();\n }\n \n-class cat : noisy {\n+struct cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "9f86953c3cf92399d0f3599cbfd6c3877407f689", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat : int { //~ ERROR trait\n+struct cat : int { //~ ERROR trait\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "31cc23d8162e114441861a9596ea9ac4f8e5de77", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ trait animal {\n   fn eat();\n }\n \n-class cat : animal {\n+struct cat : animal {\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "84cd137f23e51e9c507c678174d74bd4decf8271", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n     fn sleep() { loop{} }"}, {"sha": "2e8673156bf15eb06cef7561f1dfd894653b5207", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class foo {\n+struct foo {\n   let i: int;\n   new(i:int) { self.i = i; }\n   drop {}"}, {"sha": "98eb509c8d77432329c670ed8b8d0331ee7a9712", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,7 +1,7 @@\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-class t { //~ ERROR this type cannot be instantiated\n+struct t { //~ ERROR this type cannot be instantiated\n   let x: x;\n   let to_str: ();\n   new(x: x) { self.x = x; self.to_str = (); }"}, {"sha": "e8abfd3f450e8c5cd192fe65c01e80d3ff19df1d", "filename": "src/test/compile-fail/issue-2370-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: type cat cannot be dereferenced\n-class cat { new() {} }\n+struct cat { new() {} }\n \n fn main() {\n   let kitty : cat = cat();"}, {"sha": "9074eb7e1b8053bf27ac416dec94bc691028afde", "filename": "src/test/compile-fail/issue-2370.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: type cat cannot be dereferenced\n-class cat { new() {} }\n+struct cat { new() {} }\n \n fn main() {\n   let nyan = cat();"}, {"sha": "ada5b6ffa05d583f74927c81dc158e24a08cc62a", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class socket {\n+struct socket {\n     let sock: int;\n \n     new() { self.sock = 1; }"}, {"sha": "fc1f4dc7159feef3c74fd7087a9288cf33c99581", "filename": "src/test/compile-fail/issue-2509-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class c { //~ ERROR a struct must have at least one field\n+struct c { //~ ERROR a struct must have at least one field\n     new() { }\n }\n "}, {"sha": "d7ea3f67d417c6b864b9c65386aed5c34782f219", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class send_packet<T: copy> {\n+struct send_packet<T: copy> {\n   let p: T;\n   new(p: T) { self.p = p; }\n }"}, {"sha": "7be3d077050ac8ae863447daf768620d9cd0a9e2", "filename": "src/test/compile-fail/issue-2825-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class example {\n+struct example {\n     let x: int;\n     new() {\n         self.x = 1;"}, {"sha": "82a76273bd473881bc479f66a56723d866737554", "filename": "src/test/compile-fail/issue-2825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2825.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class example {\n+struct example {\n   let x: int;\n   new() { //~ ERROR First constructor declared here\n     self.x = 1;"}, {"sha": "005cae43081b3e722a48682b83958e11eabf1e25", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@ use std;\n \n fn siphash(k0 : u64) {\n \n-    class siphash {\n+    struct siphash {\n         let mut v0: u64;\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture"}, {"sha": "94043961484e761c3c888bab4d8262a40aef3924", "filename": "src/test/compile-fail/lint-non-camel-case-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n #[forbid(non_camel_case_types)]\n-class foo { //~ ERROR type, variant, or trait must be camel case\n+struct foo { //~ ERROR type, variant, or trait must be camel case\n     let bar: int;\n \n     new() {"}, {"sha": "a3277db4fcec473e05169543f1e5183e85df2437", "filename": "src/test/compile-fail/liveness-ctor-access-self-with-uninit-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-access-self-with-uninit-fields.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   let how_hungry : int;\n   fn meow() {}\n   new() {"}, {"sha": "405c1a4b57b98cbe533d1aff921ec7d7911b5b1b", "filename": "src/test/compile-fail/liveness-ctor-field-never-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-field-never-init.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   let how_hungry : int;\n   new() {} //~ ERROR field `self.how_hungry` is never initialized\n }"}, {"sha": "9a846efae4e2b4f3d37e85511d8c07e294083bb6", "filename": "src/test/compile-fail/liveness-ctor-uninit-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-field.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   let mut a: int;\n   let mut b: int;\n   let mut c: int;"}, {"sha": "041812a575f3a2dbbd720c2eee16a0e831e4ddc2", "filename": "src/test/compile-fail/liveness-ctor-uninit-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-ctor-uninit-var.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "f778a8da323293b01824624ec17a4e44b529137d", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -35,7 +35,7 @@ fn f4() {\n }\n \n // leave this in here just to trigger compile-fail:\n-class r {\n+struct r {\n     let x: ();\n     new() { self.x = (); }\n     drop {}"}, {"sha": "808b7ff31772562a0403e36389e31c8c792c11cc", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:assigning to immutable field\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "011656ac3ad9a06b4f8e6ed9fba6aed898cf0c79", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:assigning to immutable field\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "1fa823938caa5ad7bc09c60a8cfdce965bddd74a", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    class foo {\n+    struct foo {\n       let _x: comm::Port<()>;\n       new(x: comm::Port<()>) { self._x = x; }\n       drop {}"}, {"sha": "cd160294f748291db0c93d7c9562ea6a77938b8c", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,13 +2,13 @@\n \n fn foo<T: const>(_x: T) { }\n \n-class r {\n+struct r {\n   let x:int;\n   new(x:int) { self.x = x; }\n   drop {}\n }\n \n-class r2 {\n+struct r2 {\n   let x:@mut int;\n   new(x:@mut int) { self.x = x; }\n   drop {}"}, {"sha": "e1fd1294b14ab69c665eb4b76f5725c484abd483", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,13 +2,13 @@\n \n // Test that a class with a non-copyable field can't be\n // copied\n-class bar {\n+struct bar {\n   let x: int;\n   new(x:int) {self.x = x;}\n   drop {}\n }\n \n-class foo {\n+struct foo {\n   let i: int;\n   let j: bar;\n   new(i:int) { self.i = i; self.j = bar(5); }"}, {"sha": "ce9dfbc3f623f14cf751753612b5589e215f4156", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class r {\n+struct r {\n   let i: @mut int;\n   new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }"}, {"sha": "ae0ae7c4a574236a6d9cbf98c3e002adadf21e6b", "filename": "src/test/compile-fail/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:no public field or method with that name\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "a1d71ba6af91cb9021a39c57a630a6d3451faed3", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:call to private method not allowed\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n       fn nap() { uint::range(1u, 10000u, |_i|{})}"}, {"sha": "3540f03e800bb44d20293ede1872b94274de9d37", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class my_resource {\n+struct my_resource {\n   let x: int;\n   new(x: int) { self.x = x; }\n   drop { log(error, self.x); }"}, {"sha": "ea1181cd94a8d42fa37c5955cc3e4d0480ab6961", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class dog {\n+struct dog {\n     let mut cats_chased: uint;\n \n     new() {"}, {"sha": "31d2fef14ebd29aa17b2fe01e2b6743ce90c787d", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class dog {\n+struct dog {\n     let mut food: uint;\n \n     new() {"}, {"sha": "a4faeed69589453fb501cd20451b5160eada5d31", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -4,7 +4,7 @@\n \n enum an_enum = &int;\n trait a_trait { fn foo() -> &self/int; }\n-class a_class { let x:&self/int; new(x:&self/int) { self.x = x; } }\n+struct a_class { let x:&self/int; new(x:&self/int) { self.x = x; } }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "e02683b737204b82a3120fd5b15cddbd7139c444", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,16 +1,16 @@\n-class yes0 {\n+struct yes0 {\n   let x: &uint;\n   new(x: &uint) { self.x = x; }\n   drop {}\n }\n \n-class yes1 {\n+struct yes1 {\n   let x: &self/uint;\n   new(x: &self/uint) { self.x = x; }\n   drop {}\n }\n \n-class yes2 {\n+struct yes2 {\n   let x: &foo/uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   new(x: &foo/uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}"}, {"sha": "641e0351a471cc9cd075727441a649cd2383e2bf", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class box_impl<T> {\n+struct box_impl<T> {\n     let mut f: T;\n \n     new(f: T) {"}, {"sha": "d729aad5f02b500e5b123c49294ad16db8c2296c", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class r {\n+struct r {\n   let b:bool;\n   new(b: bool) { self.b = b; }\n   drop {}"}, {"sha": "e357bf28373d4dcb4a68086a956532e5ce59db33", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class r {\n+struct r {\n   let i: @mut int;\n   new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }"}, {"sha": "7a724ff3d5c2eada913d84e9c4b9a4b16f5e4c9a", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,7 +1,7 @@\n // Test that a class with an unsendable field can't be\n // sent\n \n-class foo {\n+struct foo {\n   let i: int;\n   let j: @~str;\n   new(i:int, j: @~str) { self.i = i; self.j = j; }"}, {"sha": "7fbcc67da17d7a21d5b0e70909c0c4345d44f5c8", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-class r {\n+struct r {\n   let i:int;\n   new(i:int) {self.i = i;}\n   drop {}"}, {"sha": "3edc22252b253adc3b41c31b39c3f3f18a82b4c7", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -20,7 +20,7 @@ fn getbig_call_c_and_fail(i: int) {\n     }\n }\n \n-class and_then_get_big_again {\n+struct and_then_get_big_again {\n   let x:int;\n   new(x:int) {self.x = x;}\n   drop {"}, {"sha": "fd537df50eb78d1763e1c06d944668eb758e4050", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -13,7 +13,7 @@ fn getbig_and_fail(&&i: int) {\n     }\n }\n \n-class and_then_get_big_again {\n+struct and_then_get_big_again {\n   let x:int;\n   new(x:int) {self.x = x;}\n   drop {"}, {"sha": "9977e4616d8c8f5701bca523cf64f2ae4c6dd9a7", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -13,7 +13,7 @@ fn getbig_and_fail(&&i: int) {\n     }\n }\n \n-class and_then_get_big_again {\n+struct and_then_get_big_again {\n   let x:int;\n   new(x:int) {self.x = x;}\n   drop {}"}, {"sha": "6a722ecdedfc8e96ec382f416b8407cd58fa3efa", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:whatever\n \n-class r {\n+struct r {\n   let x:int;\n             // Setting the exit status after the runtime has already\n             // failed has no effect and the process exits with the"}, {"sha": "90850e44867a8c216ad0a187cea5f3f9de31dab1", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -4,7 +4,7 @@ fn failfn() {\n     fail;\n }\n \n-class r {\n+struct r {\n   let v: *int;\n   new(v: *int) { self.v = v; }\n   drop unsafe {"}, {"sha": "9697084fe5cc623012a86be56390b6ade10e75f5", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -125,7 +125,7 @@ fn test_foreign_fn() {\n     assert test::rust_get_sched_id == test::rust_get_sched_id;\n }\n \n-class p {\n+struct p {\n   let mut x: int;\n   let mut y: int;\n   new(x: int, y: int) { self.x = x; self.y = y; }"}, {"sha": "9bd86183cba694e528b7220a82a323799397db3c", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -7,7 +7,7 @@ type Tree<T> = {\n \n fn empty<T>() -> Tree<T> { fail }\n \n-class Box {\n+struct Box {\n     let tree: Tree<@Box>;\n \n     new() {"}, {"sha": "ff1b85125ea30ff8dd398b09dabd8e6356c52715", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   let name: ~str;\n   #[cat_maker]\n   /**"}, {"sha": "735426abf2c0867d3a4c14dd208d5299be2b704b", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@ trait noisy {\n   fn speak() -> int;\n }\n \n-class dog : noisy {\n+struct dog : noisy {\n   priv {\n     let barks : @mut uint;\n     fn bark() -> int {\n@@ -26,7 +26,7 @@ class dog : noisy {\n   fn speak() -> int { self.bark() }\n }\n \n-class cat : noisy {\n+struct cat : noisy {\n   priv {\n     let meows : @mut uint;\n     fn meow() -> uint {"}, {"sha": "8f5318f2bf15818e9957e1a32332cb16a8d66bcc", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@ trait noisy {\n   fn speak();\n }\n \n-class cat : noisy {\n+struct cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "9c22f23aceab698e2eccadc7c78079d5cd9d32a9", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   let done : extern fn(uint);\n   let meows : uint;\n   new(done: extern fn(uint)) {"}, {"sha": "d5a2c4da1da7e77e28a8c13b440a413da4fa81e8", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -5,7 +5,7 @@ import kitty::*;\n \n mod kitty {\n   export cat;\n-  class cat {\n+  struct cat {\n     let meows: uint;\n     let name: ~str;\n "}, {"sha": "43c3315577f20a30fff9b3435404a5a1cc2f5a83", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -7,7 +7,7 @@ enum cat_type { tuxedo, tabby, tortoiseshell }\n // for any int value that's less than the meows field\n \n // ok: T should be in scope when resolving the trait ref for map\n-class cat<T: copy> : map<int, T> {\n+struct cat<T: copy> : map<int, T> {\n   priv {\n     // Yes, you can have negative meows\n     let mut meows : int;"}, {"sha": "2a4c112a3ac945f1646d933dfe03d7395e919170", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@\n use cci_class_trait;\n import cci_class_trait::animals::*;\n \n-class cat : noisy {\n+struct cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "f6cc934eb86cd9be805ae63132b88ab610ca0e41", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@ trait noisy {\n   fn speak();\n }\n \n-class cat : noisy {\n+struct cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "825f9caf395136381e251163c46d2ab1637e6702", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "8eb9c19a963e6bbd18867acd734b62d19701b769", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat<U> {\n+struct cat<U> {\n   priv {\n     let mut info : ~[U];\n     let mut meows : uint;"}, {"sha": "af4a37d3c8d9725e1fa786a52df623c06fdf44da", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@\n import to_str::*;\n import to_str::ToStr;\n \n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "97ffdea1e59dc56a9f76ee9a04d1622529c45a0a", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n \n   let name : ~str;\n "}, {"sha": "834988eaf97572b17f66f88137a08a4490cdf073", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat<U> {\n+struct cat<U> {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "bc55737487816a2a78ea995308c395edb079ee83", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class kitten {\n+struct kitten {\n     let cat: option<cat>;\n     new(cat: option<cat>) {\n        self.cat = cat;"}, {"sha": "388ea5f8776f482cca8174b11f031fd70191eff7", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "ef93e0e3bc6690a1ef6ed9329118140a53fd7b45", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "624c850f6a8e1c7f0640b928edc3a8766aefd5d2", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "4066b054a8aea0b226d57b87daec4126e2433bde", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -25,12 +25,12 @@ enum tg { foo, }\n enum tg { bar, }\n \n #[cfg(bogus)]\n-class r {\n+struct r {\n   let i: int;\n   new(i:int) { self.i = i; }\n }\n \n-class r {\n+struct r {\n   let i: int;\n   new(i:int) { self.i = i; }\n }"}, {"sha": "2609080ebc9148f5514ac780567434b15f012ce0", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,7 +1,7 @@\n // Resources can't be copied, but storing into data structures counts\n // as a move unless the stored thing is used afterwards.\n \n-class r {\n+struct r {\n   let i: @mut int;\n   new(i: @mut int) {\n     self.i = i;"}, {"sha": "52d71e6adcb12d39693dfded524ef5c3a968bdf4", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,7 +1,7 @@\n trait clam<A: copy> {\n   fn chowder(y: A);\n }\n-class foo<A: copy> : clam<A> {\n+struct foo<A: copy> : clam<A> {\n   let x: A;\n   new(b: A) { self.x = b; }\n   fn chowder(y: A) {"}, {"sha": "4c8e99ab46f13f56c5e13458ac4722efb591efa8", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n trait clam<A: copy> { }\n-class foo<A: copy> {\n+struct foo<A: copy> {\n   let x: A;\n   new(b: A) { self.x = b; }\n    fn bar<B,C:clam<A>>(c: C) -> B {"}, {"sha": "b2f149254811cdc7ede2ee610b75b31afb3efd3d", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class c1<T: copy> {\n+struct c1<T: copy> {\n   let x: T;\n   new(x: T) {self.x = x;}\n "}, {"sha": "5dea6ff2269f9512f7a7d8e6cd1be8dcdd3cb1a6", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n import dvec::dvec;\n \n-class c1<T: copy> {\n+struct c1<T: copy> {\n   let x: T;\n   new(x: T) {self.x = x;}\n "}, {"sha": "0cff6b57c2acc08e38768b9bc74aba8fb60a4266", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class socket {\n+struct socket {\n     let sock: int;\n \n     new() { self.sock = 1; }"}, {"sha": "b554fef4564daba632f3350767445a05ed62fd8c", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class font {\n+struct font {\n     let fontbuf: &self/~[u8];\n \n     new(fontbuf: &self/~[u8]) {"}, {"sha": "70af9ca03dc2ef30e68571409eccaa4ebfaf4289", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class C {\n+struct C {\n     let x: uint;\n \n     new(x: uint) {"}, {"sha": "0c49fc577452e47656b823d70c21899e9805d7fc", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n     let mut meow: fn@();\n     new() { self.meow = fn@() { error!{\"meow\"}; };}\n }"}, {"sha": "18d9338739c7ca4697cb876235af4919aa90b10f", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class Font {\n+struct Font {\n     let fontbuf: uint;\n     let cairo_font: uint;\n     let font_dtor: uint;"}, {"sha": "cc3e18bff84011d76b65cc98dbf92d4d1ee1796a", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -133,7 +133,7 @@ mod pipes {\n         }\n     }\n \n-    class send_packet<T: send> {\n+    struct send_packet<T: send> {\n         let mut p: option<*packet<T>>;\n         new(p: *packet<T>) { self.p = some(p); }\n         drop {\n@@ -150,7 +150,7 @@ mod pipes {\n         }\n     }\n \n-    class recv_packet<T: send> {\n+    struct recv_packet<T: send> {\n         let mut p: option<*packet<T>>;\n         new(p: *packet<T>) { self.p = some(p); }\n         drop {"}, {"sha": "eaec723de297bb5ae5c39cceda23d0aa8f0bb8dc", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // This test should behave exactly like issue-2735-3\n-class defer {\n+struct defer {\n     let b: &mut bool;\n     new(b: &mut bool) {\n         self.b = b;"}, {"sha": "b41b65cf6df39424ad7f5504a4a2b793c2b57566", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // This test should behave exactly like issue-2735-2\n-class defer {\n+struct defer {\n     let b: &mut bool;\n     new(b: &mut bool) {\n         self.b = b;"}, {"sha": "fb7e10a2b17ea97637ade460a2e19ddd5e78edb7", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class CMap {\n+struct CMap {\n     let buf: &[u8];\n \n     new(buf: &self/[u8]) {"}, {"sha": "9c2f4940fa567bbf1a3fd39d6af884a4e9d79de7", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class r {\n+struct r {\n   let b: @mut int;\n   new(b: @mut int) {\n     self.b = b;"}, {"sha": "cfc3064b55227162a41d84db35a85296fa1e147d", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n   \n-  class b {\n+  struct b {\n     let i: int;\n     fn do_stuff() -> int { return 37; }\n     new(i:int) { self.i = i; }"}, {"sha": "a988ad467373e3400f7c3025085a120463d68f2f", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n   }"}, {"sha": "569359a9db134699d1afb35480e42817b6791fdd", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class cat {\n+struct cat {\n   priv {\n     let mut meows : uint;\n       fn nap() { for uint::range(1u, 10u) |_i| { }}"}, {"sha": "08fc743af8022fee56b20f29783f76ccd92dbda5", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class r {\n+struct r {\n   let i: @mut int;\n   new(i: @mut int) {\n     self.i = i;"}, {"sha": "8e8ede16d8c22471213b678023d1bade089059c7", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // Don't leak the unique pointers\n \n-class r {\n+struct r {\n   let v: *int;\n   new(v: *int) unsafe {\n     self.v = v;"}, {"sha": "69bed27f91373cbf2a2c2dbc91f1aee77c0938fc", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -6,7 +6,7 @@ type u = {\n     c: *int\n };\n \n-class r {\n+struct r {\n   let v: u;\n   new(v: u) { self.v = v; }\n   drop unsafe {"}, {"sha": "f0b47024f409cbb48ff03bb3da120e975dcdd6e5", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -8,7 +8,7 @@ type u = {\n     c: *int\n };\n \n-class r {\n+struct r {\n   let v: u;\n   let w: int;\n   let x: *int;"}, {"sha": "f6e32650b8ea58fb62054e6a64bdcaba2c5198c1", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class shrinky_pointer {\n+struct shrinky_pointer {\n   let i: @@mut int;\n   fn look_at() -> int { return **(self.i); }\n   new(i: @@mut int) { self.i = i; }"}, {"sha": "618848e1edd251e3b591d4a1d3f256b273849535", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class finish<T: copy> {\n+struct finish<T: copy> {\n   let arg: {val: T, fin: extern fn(T)};\n   new(arg: {val: T, fin: extern fn(T)}) {\n     self.arg = arg;"}, {"sha": "2fbe658fd6cc45e06cade6cc8b1fd62691818a72", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@\n \n type closable = @mut bool;\n \n-class close_res {\n+struct close_res {\n   let i: closable;\n  \n   new(i: closable) { self.i = i; }"}, {"sha": "bb3957e2707c160e079c1e3e48813b42a5ac10d0", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,7 +1,7 @@\n import task::*;\n import comm::*;\n \n-class test {\n+struct test {\n   let f: int;\n   new(f: int) { self.f = f; }\n   drop {}"}, {"sha": "9d26e3d26d8a277a90a98eb77c182e6820a93c5a", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,6 +1,6 @@\n // Test that a class with only sendable fields can be sent\n \n-class foo {\n+struct foo {\n   let i: int;\n   let j: char;\n   new(i:int, j: char) { self.i = i; self.j = j; }"}, {"sha": "85f842a49a9618e5ff05152b5689b293c5a7ab8b", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -6,7 +6,7 @@\n use std;\n import task;\n \n-class notify {\n+struct notify {\n     let ch: comm::Chan<bool>; let v: @mut bool;\n     new(ch: comm::Chan<bool>, v: @mut bool) { self.ch = ch; self.v = v; }\n     drop {"}, {"sha": "e049c0ecf38af2dbf6730834b4ef2a5d67ec4f56", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -2,7 +2,7 @@ fn p_foo<T>(pinned: T) { }\n fn s_foo<T: copy>(shared: T) { }\n fn u_foo<T: send>(unique: T) { }\n \n-class r {\n+struct r {\n   let i: int;\n   new(i:int) { self.i = i; }\n   drop {}"}, {"sha": "db550ca608e8fa3aa28215171774cf810b3c4906", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,4 +1,4 @@\n-class r {\n+struct r {\n   let i: @mut int;\n   new(i: @mut int) { self.i = i; }\n   drop { *(self.i) = *(self.i) + 1; }"}, {"sha": "a358f0822253bccd2e9c9a1af2d614d48d01b825", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ use std;\n import task;\n import comm;\n \n-class complainer {\n+struct complainer {\n   let c: comm::Chan<bool>;\n   new(c: comm::Chan<bool>) {\n     error!{\"Hello!\"};"}, {"sha": "4b3ae5b76b2d0ddd47441ecf2bc6ffd6b2b966ed", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -3,7 +3,7 @@ use std;\n import task;\n import comm;\n \n-class complainer {\n+struct complainer {\n   let c: @int;\n   new(c: @int) { self.c = c; }\n   drop {}"}, {"sha": "771fb94621116bead88af2dcc388ad62fd6c0794", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab4b014cfaf6dff5b450f4a1772e9993550fe38/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "patch": "@@ -1,5 +1,5 @@\n // Make sure that destructors get run on slice literals\n-class foo {\n+struct foo {\n     let x: @mut int;\n     new(x: @mut int) { self.x = x; }\n     drop { *self.x += 1; }"}]}