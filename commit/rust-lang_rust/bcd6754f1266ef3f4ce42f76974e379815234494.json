{"sha": "bcd6754f1266ef3f4ce42f76974e379815234494", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZDY3NTRmMTI2NmVmM2Y0Y2U0MmY3Njk3NGUzNzk4MTUyMzQ0OTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-07T13:32:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-07T13:32:09Z"}, "message": "semis after blcoks", "tree": {"sha": "ade8a7e0f2af6378c0d2cbba95e6dcdcf2d6779f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade8a7e0f2af6378c0d2cbba95e6dcdcf2d6779f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd6754f1266ef3f4ce42f76974e379815234494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd6754f1266ef3f4ce42f76974e379815234494", "html_url": "https://github.com/rust-lang/rust/commit/bcd6754f1266ef3f4ce42f76974e379815234494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd6754f1266ef3f4ce42f76974e379815234494/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab1e255ee5c70aedd4d243e0e11109fc4bbcef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab1e255ee5c70aedd4d243e0e11109fc4bbcef2", "html_url": "https://github.com/rust-lang/rust/commit/0ab1e255ee5c70aedd4d243e0e11109fc4bbcef2"}], "stats": {"total": 226, "additions": 212, "deletions": 14}, "files": [{"sha": "524a69a8c25606a8d8c5956981613f971914130f", "filename": "src/grammar/expressions/atom.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fatom.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -133,7 +133,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     if fn_ret_type(p) {\n         block(p);\n     } else {\n-        expr(p)\n+        expr(p);\n     }\n     m.complete(p, LAMBDA_EXPR)\n }\n@@ -225,8 +225,17 @@ fn match_expr(p: &mut Parser) -> CompletedMarker {\n     expr_no_struct(p);\n     p.eat(L_CURLY);\n     while !p.at(EOF) && !p.at(R_CURLY) {\n-        match_arm(p);\n-        if !p.at(R_CURLY) {\n+        // test match_arms_commas\n+        // fn foo() {\n+        //     match () {\n+        //         _ => (),\n+        //         _ => {}\n+        //         _ => ()\n+        //     }\n+        // }\n+        if match_arm(p).is_block() {\n+            p.eat(COMMA);\n+        } else if !p.at(R_CURLY) {\n             p.expect(COMMA);\n         }\n     }\n@@ -241,7 +250,7 @@ fn match_expr(p: &mut Parser) -> CompletedMarker {\n //         X | Y if Z => (),\n //     };\n // }\n-fn match_arm(p: &mut Parser) {\n+fn match_arm(p: &mut Parser) -> BlockLike {\n     let m = p.start();\n     loop {\n         patterns::pattern(p);\n@@ -253,8 +262,9 @@ fn match_arm(p: &mut Parser) {\n         expr_no_struct(p);\n     }\n     p.expect(FAT_ARROW);\n-    expr(p);\n+    let ret = expr(p);\n     m.complete(p, MATCH_ARM);\n+    ret\n }\n \n // test block_expr\n@@ -285,8 +295,8 @@ pub(super) fn block_expr(p: &mut Parser) -> CompletedMarker {\n                     // test pub_expr\n                     // fn foo() { pub 92; } //FIXME\n                     items::MaybeItem::None => {\n-                        expressions::expr(p);\n-                        if p.eat(SEMI) {\n+                        let is_blocklike = expressions::expr(p) == BlockLike::Block;\n+                        if p.eat(SEMI) || (is_blocklike && !p.at(R_CURLY)) {\n                             m.complete(p, EXPR_STMT);\n                         } else {\n                             m.abandon(p);"}, {"sha": "ce709dbb2f139c23cfd1c8aec42525bf7392ab9a", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -5,14 +5,14 @@ pub(super) use self::atom::literal;\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n-pub(super) fn expr(p: &mut Parser) {\n+pub(super) fn expr(p: &mut Parser) -> BlockLike {\n     let r = Restrictions { forbid_structs: false };\n     expr_bp(p, r, 1)\n }\n \n fn expr_no_struct(p: &mut Parser) {\n     let r = Restrictions { forbid_structs: true };\n-    expr_bp(p, r, 1)\n+    expr_bp(p, r, 1);\n }\n \n // test block\n@@ -85,10 +85,14 @@ fn current_op(p: &Parser) -> (u8, Op) {\n }\n \n // Parses expression with binding power of at least bp.\n-fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n+fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n+    let mut block: bool;\n     let mut lhs = match lhs(p, r) {\n-        Some(lhs) => lhs,\n-        None => return,\n+        Some(lhs) => {\n+            block = is_block(lhs.kind());\n+            lhs\n+        },\n+        None => return BlockLike::NotBlock,\n     };\n \n     loop {\n@@ -97,6 +101,7 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n         if op_bp < bp {\n             break;\n         }\n+        block = false;\n         let m = lhs.precede(p);\n         match op {\n             Op::Simple => p.bump(),\n@@ -107,6 +112,24 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n+    if block { BlockLike::Block } else { BlockLike::NotBlock }\n+}\n+\n+// test no_semi_after_block\n+// fn foo() {\n+//     if true {}\n+//     loop {}\n+//     match () {}\n+//     while true {}\n+//     for _ in () {}\n+//     {}\n+//     {}\n+// }\n+fn is_block(kind: SyntaxKind) -> bool {\n+    match kind {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => true,\n+        _ => false,\n+    }\n }\n \n const LHS_FIRST: TokenSet ="}, {"sha": "b6da0d0133a599c5fb66a0f200c2c9eaec53cdc6", "filename": "src/grammar/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fmod.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -44,11 +44,16 @@ pub(crate) fn file(p: &mut Parser) {\n }\n \n \n+#[derive(Clone, Copy, PartialEq, Eq)]\n enum BlockLike {\n     Block,\n     NotBlock,\n }\n \n+impl BlockLike {\n+    fn is_block(self) -> bool { self == BlockLike::Block }\n+}\n+\n fn visibility(p: &mut Parser) {\n     if p.at(PUB_KW) {\n         let vis = p.start();"}, {"sha": "58002a8fcfa6386082b68a01047f60f7cd59ec02", "filename": "src/parser_api.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/src%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_api.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -6,6 +6,7 @@ use {\n \n #[derive(Clone, Copy)]\n pub(crate) struct TokenSet(pub(crate) u128);\n+\n fn mask(kind: SyntaxKind) -> u128 {\n     1u128 << (kind as usize)\n }\n@@ -154,7 +155,7 @@ impl Marker {\n     pub(crate) fn complete(mut self, p: &mut Parser, kind: SyntaxKind) -> CompletedMarker {\n         self.bomb.defuse();\n         p.0.complete(self.pos, kind);\n-        CompletedMarker(self.pos)\n+        CompletedMarker(self.pos, kind)\n     }\n \n     /// Abandons the syntax tree node. All its children\n@@ -165,7 +166,7 @@ impl Marker {\n     }\n }\n \n-pub(crate) struct CompletedMarker(u32);\n+pub(crate) struct CompletedMarker(u32, SyntaxKind);\n \n impl CompletedMarker {\n     /// This one is tricky :-)\n@@ -178,4 +179,8 @@ impl CompletedMarker {\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n         Marker::new(p.0.precede(self.0))\n     }\n+\n+    pub(crate) fn kind(&self) -> SyntaxKind {\n+        self.1\n+    }\n }"}, {"sha": "1f25d577a9550e989b619321826bae90272ecd39", "filename": "tests/data/parser/inline/0085_match_arms_commas.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -0,0 +1,7 @@\n+fn foo() {\n+    match () {\n+        _ => (),\n+        _ => {}\n+        _ => ()\n+    }\n+}"}, {"sha": "6dfc6c9dd4dcee7254b14ea67fdf0fc68902c918", "filename": "tests/data/parser/inline/0085_match_arms_commas.txt", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0085_match_arms_commas.txt?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -0,0 +1,57 @@\n+FILE@[0; 83)\n+  FN_ITEM@[0; 82)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 82)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      MATCH_EXPR@[15; 80)\n+        MATCH_KW@[15; 20)\n+        WHITESPACE@[20; 21)\n+        TUPLE_EXPR@[21; 23)\n+          L_PAREN@[21; 22)\n+          R_PAREN@[22; 23)\n+        WHITESPACE@[23; 24)\n+        L_CURLY@[24; 25)\n+        WHITESPACE@[25; 34)\n+        MATCH_ARM@[34; 41)\n+          PLACEHOLDER_PAT@[34; 35)\n+            UNDERSCORE@[34; 35)\n+          WHITESPACE@[35; 36)\n+          FAT_ARROW@[36; 38)\n+          WHITESPACE@[38; 39)\n+          TUPLE_EXPR@[39; 41)\n+            L_PAREN@[39; 40)\n+            R_PAREN@[40; 41)\n+        COMMA@[41; 42)\n+        WHITESPACE@[42; 51)\n+        MATCH_ARM@[51; 58)\n+          PLACEHOLDER_PAT@[51; 52)\n+            UNDERSCORE@[51; 52)\n+          WHITESPACE@[52; 53)\n+          FAT_ARROW@[53; 55)\n+          WHITESPACE@[55; 56)\n+          BLOCK_EXPR@[56; 58)\n+            L_CURLY@[56; 57)\n+            R_CURLY@[57; 58)\n+        WHITESPACE@[58; 67)\n+        MATCH_ARM@[67; 74)\n+          PLACEHOLDER_PAT@[67; 68)\n+            UNDERSCORE@[67; 68)\n+          WHITESPACE@[68; 69)\n+          FAT_ARROW@[69; 71)\n+          WHITESPACE@[71; 72)\n+          TUPLE_EXPR@[72; 74)\n+            L_PAREN@[72; 73)\n+            R_PAREN@[73; 74)\n+        WHITESPACE@[74; 79)\n+        R_CURLY@[79; 80)\n+      WHITESPACE@[80; 81)\n+      R_CURLY@[81; 82)\n+  WHITESPACE@[82; 83)"}, {"sha": "d769da43dd4e6c67e65040b771d89232c28aeb6e", "filename": "tests/data/parser/inline/0086_no_semi_after_block.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -0,0 +1,9 @@\n+fn foo() {\n+    if true {}\n+    loop {}\n+    match () {}\n+    while true {}\n+    for _ in () {}\n+    {}\n+    {}\n+}"}, {"sha": "dd05a8a9f7e931e46f9865725e96c23895f00baa", "filename": "tests/data/parser/inline/0086_no_semi_after_block.txt", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcd6754f1266ef3f4ce42f76974e379815234494/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt?ref=bcd6754f1266ef3f4ce42f76974e379815234494", "patch": "@@ -0,0 +1,82 @@\n+FILE@[0; 107)\n+  FN_ITEM@[0; 106)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 106)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 25)\n+        IF_EXPR@[15; 25)\n+          IF_KW@[15; 17)\n+          WHITESPACE@[17; 18)\n+          LITERAL@[18; 22)\n+            TRUE_KW@[18; 22)\n+          WHITESPACE@[22; 23)\n+          BLOCK_EXPR@[23; 25)\n+            L_CURLY@[23; 24)\n+            R_CURLY@[24; 25)\n+      WHITESPACE@[25; 30)\n+      EXPR_STMT@[30; 37)\n+        LOOP_EXPR@[30; 37)\n+          LOOP_KW@[30; 34)\n+          WHITESPACE@[34; 35)\n+          BLOCK_EXPR@[35; 37)\n+            L_CURLY@[35; 36)\n+            R_CURLY@[36; 37)\n+      WHITESPACE@[37; 42)\n+      EXPR_STMT@[42; 53)\n+        MATCH_EXPR@[42; 53)\n+          MATCH_KW@[42; 47)\n+          WHITESPACE@[47; 48)\n+          TUPLE_EXPR@[48; 50)\n+            L_PAREN@[48; 49)\n+            R_PAREN@[49; 50)\n+          WHITESPACE@[50; 51)\n+          L_CURLY@[51; 52)\n+          R_CURLY@[52; 53)\n+      WHITESPACE@[53; 58)\n+      EXPR_STMT@[58; 71)\n+        WHILE_EXPR@[58; 71)\n+          WHILE_KW@[58; 63)\n+          WHITESPACE@[63; 64)\n+          LITERAL@[64; 68)\n+            TRUE_KW@[64; 68)\n+          WHITESPACE@[68; 69)\n+          BLOCK_EXPR@[69; 71)\n+            L_CURLY@[69; 70)\n+            R_CURLY@[70; 71)\n+      WHITESPACE@[71; 76)\n+      EXPR_STMT@[76; 90)\n+        FOR_EXPR@[76; 90)\n+          FOR_KW@[76; 79)\n+          WHITESPACE@[79; 80)\n+          PLACEHOLDER_PAT@[80; 81)\n+            UNDERSCORE@[80; 81)\n+          WHITESPACE@[81; 82)\n+          IN_KW@[82; 84)\n+          WHITESPACE@[84; 85)\n+          TUPLE_EXPR@[85; 87)\n+            L_PAREN@[85; 86)\n+            R_PAREN@[86; 87)\n+          WHITESPACE@[87; 88)\n+          BLOCK_EXPR@[88; 90)\n+            L_CURLY@[88; 89)\n+            R_CURLY@[89; 90)\n+      WHITESPACE@[90; 95)\n+      EXPR_STMT@[95; 97)\n+        BLOCK_EXPR@[95; 97)\n+          L_CURLY@[95; 96)\n+          R_CURLY@[96; 97)\n+      WHITESPACE@[97; 102)\n+      BLOCK_EXPR@[102; 104)\n+        L_CURLY@[102; 103)\n+        R_CURLY@[103; 104)\n+      WHITESPACE@[104; 105)\n+      R_CURLY@[105; 106)\n+  WHITESPACE@[106; 107)"}]}