{"sha": "1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTg0YmY1Yzk4NThiZWU1NGE5ZmJmZjI1YWIyOGIyYWQyOWViNTc=", "commit": {"author": {"name": "mandeep", "email": "mandeep@users.noreply.github.com", "date": "2018-10-09T05:51:22Z"}, "committer": {"name": "mandeep", "email": "mandeep@users.noreply.github.com", "date": "2018-10-09T05:51:22Z"}, "message": "Refactor macro comment and add resize with zeros example", "tree": {"sha": "1906b83cbcbaf6e6646fdb8c2d948b8ae5b8cbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1906b83cbcbaf6e6646fdb8c2d948b8ae5b8cbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "html_url": "https://github.com/rust-lang/rust/commit/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57/comments", "author": {"login": "mandeep", "id": 10521687, "node_id": "MDQ6VXNlcjEwNTIxNjg3", "avatar_url": "https://avatars.githubusercontent.com/u/10521687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mandeep", "html_url": "https://github.com/mandeep", "followers_url": "https://api.github.com/users/mandeep/followers", "following_url": "https://api.github.com/users/mandeep/following{/other_user}", "gists_url": "https://api.github.com/users/mandeep/gists{/gist_id}", "starred_url": "https://api.github.com/users/mandeep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mandeep/subscriptions", "organizations_url": "https://api.github.com/users/mandeep/orgs", "repos_url": "https://api.github.com/users/mandeep/repos", "events_url": "https://api.github.com/users/mandeep/events{/privacy}", "received_events_url": "https://api.github.com/users/mandeep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mandeep", "id": 10521687, "node_id": "MDQ6VXNlcjEwNTIxNjg3", "avatar_url": "https://avatars.githubusercontent.com/u/10521687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mandeep", "html_url": "https://github.com/mandeep", "followers_url": "https://api.github.com/users/mandeep/followers", "following_url": "https://api.github.com/users/mandeep/following{/other_user}", "gists_url": "https://api.github.com/users/mandeep/gists{/gist_id}", "starred_url": "https://api.github.com/users/mandeep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mandeep/subscriptions", "organizations_url": "https://api.github.com/users/mandeep/orgs", "repos_url": "https://api.github.com/users/mandeep/repos", "events_url": "https://api.github.com/users/mandeep/events{/privacy}", "received_events_url": "https://api.github.com/users/mandeep/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82444aa753180c9c13028066ae9ddc4933dc610d", "url": "https://api.github.com/repos/rust-lang/rust/commits/82444aa753180c9c13028066ae9ddc4933dc610d", "html_url": "https://github.com/rust-lang/rust/commit/82444aa753180c9c13028066ae9ddc4933dc610d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "f7a0bbdceafc93325359fbb83a51b413548db0da", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "patch": "@@ -121,12 +121,16 @@ use raw_vec::RawVec;\n /// ```\n ///\n /// It can also initialize each element of a `Vec<T>` with a given value.\n-/// Initializing a `Vec<T>` in this manner is the most efficient and safest way to allocate a\n-/// vector of zeros as previously zeroed memory is requested from the operating system:\n+/// This may be more efficient than performing allocation and initialization\n+/// in separate steps, especially when initializing a vector of zeros:\n ///\n /// ```\n /// let vec = vec![0; 5];\n /// assert_eq!(vec, [0, 0, 0, 0, 0]);\n+///\n+/// // The following is equivalent, but potentially slower:\n+/// let mut vec1 = Vec::with_capacity(5);\n+/// vec1.resize(5, 0);\n /// ```\n ///\n /// Use a `Vec<T>` as an efficient stack:"}]}