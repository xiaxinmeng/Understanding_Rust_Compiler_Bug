{"sha": "967c088e01e3e2967ff8f17a020bc28b3afa17fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2N2MwODhlMDFlM2UyOTY3ZmY4ZjE3YTAyMGJjMjhiM2FmYTE3ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-10T11:34:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-10T11:34:05Z"}, "message": "internal: document codebase stance on using functional combinators", "tree": {"sha": "14e9c1bd99b2327fc5241901f45d5b49ad1eefab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e9c1bd99b2327fc5241901f45d5b49ad1eefab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967c088e01e3e2967ff8f17a020bc28b3afa17fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967c088e01e3e2967ff8f17a020bc28b3afa17fb", "html_url": "https://github.com/rust-lang/rust/commit/967c088e01e3e2967ff8f17a020bc28b3afa17fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967c088e01e3e2967ff8f17a020bc28b3afa17fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65254547298588e2c9304b65366b6e8139e4243", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65254547298588e2c9304b65366b6e8139e4243", "html_url": "https://github.com/rust-lang/rust/commit/e65254547298588e2c9304b65366b6e8139e4243"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "9d90aa4ca9a0c81f5401e4f6056603a79a855913", "filename": "docs/dev/style.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/967c088e01e3e2967ff8f17a020bc28b3afa17fb/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/967c088e01e3e2967ff8f17a020bc28b3afa17fb/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=967c088e01e3e2967ff8f17a020bc28b3afa17fb", "patch": "@@ -925,6 +925,31 @@ Don't use the `ref` keyword.\n Today, it is redundant.\n Between `ref` and mach ergonomics, the latter is more ergonomic in most cases, and is simpler (does not require a keyword).\n \n+## Functional Combinators\n+\n+Use high order monadic combinators like `map`, `then`, only when they are a natural choice, don't bend the code to fit into some combinator.\n+If writing a chain of combinators creates friction, replace them with control flow constructs: `for`, `if`, `match`.\n+Mostly avoid `bool::then` and `Option::filter`.\n+\n+```rust\n+// GOOD\n+if !x.cond() {\n+    return None;\n+}\n+Some(x)\n+\n+// BAD\n+Some(x).filter(|it| it.cond())\n+```\n+\n+This rule is more \"soft\" then others, and boils down mostly to taste.\n+The guiding principle behind this rule is that code should be dense in computation, and sparse in the number of expressions per line.\n+The second example contains *less* computation -- `filter` function is an indirection for `if`, it doesn't do any useful work by itself.\n+At the same time, it is more crowded -- it takes more time to visually scan it.\n+\n+**Rationale:** consistency, playing to language's strengths.\n+Rust has first-class support for imperative control flow constructs like `for` and `if`, while functions are less first-class due to lack of universal function type, currying, and non-first-class effects (`?`, `.await`).\n+\n ## Helper Functions\n \n Avoid creating singe-use helper functions:"}]}