{"sha": "cd8973250dff50a2b71641659baa36c70ab3d57e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODk3MzI1MGRmZjUwYTJiNzE2NDE2NTliYWEzNmM3MGFiM2Q1N2U=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-11-23T03:58:21Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-11-23T03:58:21Z"}, "message": "Use Option::map instead of open coding it", "tree": {"sha": "2adf9688ee8e2532d300eecc6a44aac1053ba798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adf9688ee8e2532d300eecc6a44aac1053ba798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8973250dff50a2b71641659baa36c70ab3d57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8973250dff50a2b71641659baa36c70ab3d57e", "html_url": "https://github.com/rust-lang/rust/commit/cd8973250dff50a2b71641659baa36c70ab3d57e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8973250dff50a2b71641659baa36c70ab3d57e/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "html_url": "https://github.com/rust-lang/rust/commit/c643dd2ec8fed2852f5eee8f776d657293a6a8f2"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "96484034da7cd7102384d361d20c46472c83731c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=cd8973250dff50a2b71641659baa36c70ab3d57e", "patch": "@@ -1152,10 +1152,7 @@ impl<'ll> MemberDescription<'ll> {\n                 self.size.bits(),\n                 self.align.bits() as u32,\n                 self.offset.bits(),\n-                match self.discriminant {\n-                    None => None,\n-                    Some(value) => Some(cx.const_u64(value)),\n-                },\n+                self.discriminant.map(|v| cx.const_u64(v)),\n                 self.flags,\n                 self.type_metadata,\n             )"}, {"sha": "c906b8ac901a57656a929a3b380fd0169e446214", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=cd8973250dff50a2b71641659baa36c70ab3d57e", "patch": "@@ -1106,10 +1106,7 @@ impl<T> Binder<T> {\n \n impl<T> Binder<Option<T>> {\n     pub fn transpose(self) -> Option<Binder<T>> {\n-        match self.0 {\n-            Some(v) => Some(Binder(v)),\n-            None => None,\n-        }\n+        self.0.map(Binder)\n     }\n }\n "}, {"sha": "d12d2cb59a5a9e7dc076252ca586b564d835c8c2", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8973250dff50a2b71641659baa36c70ab3d57e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=cd8973250dff50a2b71641659baa36c70ab3d57e", "patch": "@@ -810,10 +810,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // can be given the suggestion \"u32::from(x) > y\" rather than\n                 // \"x > y.try_into().unwrap()\".\n                 let lhs_expr_and_src = expected_ty_expr.and_then(|expr| {\n-                    match self.tcx.sess.source_map().span_to_snippet(expr.span).ok() {\n-                        Some(src) => Some((expr, src)),\n-                        None => None,\n-                    }\n+                    self.tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(expr.span)\n+                        .ok()\n+                        .map(|src| (expr, src))\n                 });\n                 let (span, msg, suggestion) = if let (Some((lhs_expr, lhs_src)), false) =\n                     (lhs_expr_and_src, exp_to_found_is_fallible)"}]}