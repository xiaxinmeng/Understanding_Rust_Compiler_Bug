{"sha": "e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZWRlMzhkNDc5YTFiOGUyYjczOWJjYjRjNDc4ZDFlODU3ZTZjZWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-02T15:30:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-02T15:30:55Z"}, "message": "Use correct search scopes for macros", "tree": {"sha": "b7b03a327161d4f033959a12652eaf34fea7ce03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b03a327161d4f033959a12652eaf34fea7ce03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "html_url": "https://github.com/rust-lang/rust/commit/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f84a7b60bcbd7ec5fa6434d92d9e7a8eb9731b", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f84a7b60bcbd7ec5fa6434d92d9e7a8eb9731b", "html_url": "https://github.com/rust-lang/rust/commit/48f84a7b60bcbd7ec5fa6434d92d9e7a8eb9731b"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "6994e41c8aa40f55ee6b8140e3d5da67e05c84c1", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "patch": "@@ -9,7 +9,9 @@ use ide_db::{\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, LoopBodyOwner},\n-    match_ast, AstNode, SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n+    match_ast, AstNode,\n+    SyntaxKind::IDENT,\n+    SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n \n use crate::{display::TryToNav, references, NavigationTarget};\n@@ -46,9 +48,10 @@ pub(crate) fn highlight_related(\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n     let token = pick_best_token(syntax.token_at_offset(position.offset), |kind| match kind {\n-        T![?] => 3, // prefer `?` when the cursor is sandwiched like in `await$0?`\n-        T![->] => 2,\n-        kind if kind.is_keyword() => 1,\n+        T![?] => 4, // prefer `?` when the cursor is sandwiched like in `await$0?`\n+        T![->] => 3,\n+        kind if kind.is_keyword() => 2,\n+        IDENT => 1,\n         _ => 0,\n     })?;\n \n@@ -75,7 +78,7 @@ fn highlight_references(\n     let defs = find_defs(sema, syntax, offset);\n     let usages = defs\n         .iter()\n-        .flat_map(|&d| {\n+        .filter_map(|&d| {\n             d.usages(sema)\n                 .set_scope(Some(SearchScope::single_file(file_id)))\n                 .include_self_refs()"}, {"sha": "8b8c91b2fce32b236c4a5247022f9151c9d5be0f", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ede38d479a1b8e2b739bcb4c478d1e857e6cec/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=e2ede38d479a1b8e2b739bcb4c478d1e857e6cec", "patch": "@@ -71,7 +71,7 @@ pub enum ReferenceAccess {\n /// For `pub(crate)` things it's a crate, for `pub` things it's a crate and dependant crates.\n /// In some cases, the location of the references is known to within a `TextRange`,\n /// e.g. for things like local variables.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct SearchScope {\n     entries: FxHashMap<FileId, Option<TextRange>>,\n }\n@@ -216,6 +216,14 @@ impl Definition {\n             return SearchScope::crate_graph(db);\n         }\n \n+        // def is crate root\n+        // FIXME: We don't do searches for crates currently, as a crate does not actually have a single name\n+        if let &Definition::ModuleDef(hir::ModuleDef::Module(module)) = self {\n+            if module.crate_root(db) == module {\n+                return SearchScope::reverse_dependencies(db, module.krate());\n+            }\n+        }\n+\n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),\n@@ -273,13 +281,22 @@ impl Definition {\n         }\n \n         if let Definition::Macro(macro_def) = self {\n-            if macro_def.kind() == hir::MacroKind::Declarative {\n-                return if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n+            return match macro_def.kind() {\n+                hir::MacroKind::Declarative => {\n+                    if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n+                        SearchScope::reverse_dependencies(db, module.krate())\n+                    } else {\n+                        SearchScope::krate(db, module.krate())\n+                    }\n+                }\n+                hir::MacroKind::BuiltIn => SearchScope::crate_graph(db),\n+                // FIXME: We don't actually see derives in derive attributes as these do not\n+                // expand to something that references the derive macro in the output.\n+                // We could get around this by emitting dummy `use DeriveMacroPathHere as _;` items maybe?\n+                hir::MacroKind::Derive | hir::MacroKind::Attr | hir::MacroKind::ProcMacro => {\n                     SearchScope::reverse_dependencies(db, module.krate())\n-                } else {\n-                    SearchScope::krate(db, module.krate())\n-                };\n-            }\n+                }\n+            };\n         }\n \n         let vis = self.visibility(db);"}]}