{"sha": "48e877a435ad4370aada571913a642384d81c175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTg3N2E0MzVhZDQzNzBhYWRhNTcxOTEzYTY0MjM4NGQ4MWMxNzU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-06-12T23:16:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-13T01:10:19Z"}, "message": "Rewrite int/uint helper functions to use refs\n\nThis lets us pass them to generic functions.", "tree": {"sha": "9d7f39b270863e15360326d43d3f98339c6d5f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7f39b270863e15360326d43d3f98339c6d5f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e877a435ad4370aada571913a642384d81c175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e877a435ad4370aada571913a642384d81c175", "html_url": "https://github.com/rust-lang/rust/commit/48e877a435ad4370aada571913a642384d81c175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e877a435ad4370aada571913a642384d81c175/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4335ce47f36ff4f7e842e241b2006abd48f55a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/4335ce47f36ff4f7e842e241b2006abd48f55a50", "html_url": "https://github.com/rust-lang/rust/commit/4335ce47f36ff4f7e842e241b2006abd48f55a50"}], "stats": {"total": 78, "additions": 36, "deletions": 42}, "files": [{"sha": "b1d1457654e22b6f35c26c839b2d9c99a0937c20", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=48e877a435ad4370aada571913a642384d81c175", "patch": "@@ -16,21 +16,21 @@ export ord, eq, num;\n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n \n-pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n-pure fn max(x: T, y: T) -> T { if x > y { x } else { y } }\n-\n-pure fn add(x: T, y: T) -> T { x + y }\n-pure fn sub(x: T, y: T) -> T { x - y }\n-pure fn mul(x: T, y: T) -> T { x * y }\n-pure fn div(x: T, y: T) -> T { x / y }\n-pure fn rem(x: T, y: T) -> T { x % y }\n-\n-pure fn lt(x: T, y: T) -> bool { x < y }\n-pure fn le(x: T, y: T) -> bool { x <= y }\n-pure fn eq(x: T, y: T) -> bool { x == y }\n-pure fn ne(x: T, y: T) -> bool { x != y }\n-pure fn ge(x: T, y: T) -> bool { x >= y }\n-pure fn gt(x: T, y: T) -> bool { x > y }\n+pure fn min(&&x: T, &&y: T) -> T { if x < y { x } else { y } }\n+pure fn max(&&x: T, &&y: T) -> T { if x > y { x } else { y } }\n+\n+pure fn add(&&x: T, &&y: T) -> T { x + y }\n+pure fn sub(&&x: T, &&y: T) -> T { x - y }\n+pure fn mul(&&x: T, &&y: T) -> T { x * y }\n+pure fn div(&&x: T, &&y: T) -> T { x / y }\n+pure fn rem(&&x: T, &&y: T) -> T { x % y }\n+\n+pure fn lt(&&x: T, &&y: T) -> bool { x < y }\n+pure fn le(&&x: T, &&y: T) -> bool { x <= y }\n+pure fn eq(&&x: T, &&y: T) -> bool { x == y }\n+pure fn ne(&&x: T, &&y: T) -> bool { x != y }\n+pure fn ge(&&x: T, &&y: T) -> bool { x >= y }\n+pure fn gt(&&x: T, &&y: T) -> bool { x > y }\n \n pure fn is_positive(x: T) -> bool { x > 0 as T }\n pure fn is_negative(x: T) -> bool { x < 0 as T }"}, {"sha": "d28333c79e63d62ce087362280364e6106ec4da6", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=48e877a435ad4370aada571913a642384d81c175", "patch": "@@ -7,7 +7,7 @@ const bits: T = 32 as T;\n const bits: T = 64 as T;\n \n #[doc = \"Produce a uint suitable for use in a hash table\"]\n-pure fn hash(x: int) -> uint { ret x as uint; }\n+pure fn hash(&&x: int) -> uint { ret x as uint; }\n \n #[doc = \"Returns `base` raised to the power of `exponent`\"]\n fn pow(base: int, exponent: uint) -> int {"}, {"sha": "fda4253a688d4b46849bd06d610cec5976a41ea3", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=48e877a435ad4370aada571913a642384d81c175", "patch": "@@ -16,21 +16,21 @@ export ord, eq, num;\n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n \n-pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n-pure fn max(x: T, y: T) -> T { if x > y { x } else { y } }\n-\n-pure fn add(x: T, y: T) -> T { x + y }\n-pure fn sub(x: T, y: T) -> T { x - y }\n-pure fn mul(x: T, y: T) -> T { x * y }\n-pure fn div(x: T, y: T) -> T { x / y }\n-pure fn rem(x: T, y: T) -> T { x % y }\n-\n-pure fn lt(x: T, y: T) -> bool { x < y }\n-pure fn le(x: T, y: T) -> bool { x <= y }\n-pure fn eq(x: T, y: T) -> bool { x == y }\n-pure fn ne(x: T, y: T) -> bool { x != y }\n-pure fn ge(x: T, y: T) -> bool { x >= y }\n-pure fn gt(x: T, y: T) -> bool { x > y }\n+pure fn min(&&x: T, &&y: T) -> T { if x < y { x } else { y } }\n+pure fn max(&&x: T, &&y: T) -> T { if x > y { x } else { y } }\n+\n+pure fn add(&&x: T, &&y: T) -> T { x + y }\n+pure fn sub(&&x: T, &&y: T) -> T { x - y }\n+pure fn mul(&&x: T, &&y: T) -> T { x * y }\n+pure fn div(&&x: T, &&y: T) -> T { x / y }\n+pure fn rem(&&x: T, &&y: T) -> T { x % y }\n+\n+pure fn lt(&&x: T, &&y: T) -> bool { x < y }\n+pure fn le(&&x: T, &&y: T) -> bool { x <= y }\n+pure fn eq(&&x: T, &&y: T) -> bool { x == y }\n+pure fn ne(&&x: T, &&y: T) -> bool { x != y }\n+pure fn ge(&&x: T, &&y: T) -> bool { x >= y }\n+pure fn gt(&&x: T, &&y: T) -> bool { x > y }\n \n pure fn is_positive(x: T) -> bool { x > 0 as T }\n pure fn is_negative(x: T) -> bool { x < 0 as T }"}, {"sha": "e1bb89c27c4e7288b1cf3e4044c09e00955d5d5e", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e877a435ad4370aada571913a642384d81c175/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=48e877a435ad4370aada571913a642384d81c175", "patch": "@@ -54,7 +54,7 @@ is either `x/y` or `x/y + 1`.\n pure fn div_floor(x: uint, y: uint) -> uint { ret x / y; }\n \n #[doc = \"Produce a uint suitable for use in a hash table\"]\n-pure fn hash(x: uint) -> uint { ret x; }\n+pure fn hash(&&x: uint) -> uint { ret x; }\n \n #[doc = \"\n Iterate over the range [`lo`..`hi`), or stop when requested"}, {"sha": "afcf77ad800301ec231b9be01f5e10119ca1cf68", "filename": "src/libstd/map.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48e877a435ad4370aada571913a642384d81c175/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e877a435ad4370aada571913a642384d81c175/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=48e877a435ad4370aada571913a642384d81c175", "patch": "@@ -297,20 +297,14 @@ fn bytes_hash<V: copy>() -> hashmap<[u8], V> {\n     ret hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n-fn hash_int(&&x: int) -> uint { int::hash(x) }\n-fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n-\n #[doc = \"Construct a hashmap for int keys\"]\n fn int_hash<V: copy>() -> hashmap<int, V> {\n-    ret hashmap(hash_int, eq_int);\n+    ret hashmap(int::hash, int::eq);\n }\n \n-fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n-fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n-\n #[doc = \"Construct a hashmap for uint keys\"]\n fn uint_hash<V: copy>() -> hashmap<uint, V> {\n-    ret hashmap(hash_uint, eq_uint);\n+    ret hashmap(uint::hash, uint::eq);\n }\n \n #[doc = \"\n@@ -355,12 +349,12 @@ fn hash_from_bytes<V: copy>(items: [([u8], V)]) -> hashmap<[u8], V> {\n \n #[doc = \"Construct a hashmap from a vector with int keys\"]\n fn hash_from_ints<V: copy>(items: [(int, V)]) -> hashmap<int, V> {\n-    hash_from_vec(hash_int, eq_int, items)\n+    hash_from_vec(int::hash, int::eq, items)\n }\n \n #[doc = \"Construct a hashmap from a vector with uint keys\"]\n fn hash_from_uints<V: copy>(items: [(uint, V)]) -> hashmap<uint, V> {\n-    hash_from_vec(hash_uint, eq_uint, items)\n+    hash_from_vec(uint::hash, uint::eq, items)\n }\n \n #[cfg(test)]"}]}