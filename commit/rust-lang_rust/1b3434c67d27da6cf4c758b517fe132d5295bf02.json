{"sha": "1b3434c67d27da6cf4c758b517fe132d5295bf02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzQzNGM2N2QyN2RhNmNmNGM3NThiNTE3ZmUxMzJkNTI5NWJmMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T18:50:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T15:04:31Z"}, "message": "adjust for init_allocation_extra", "tree": {"sha": "72ec487fc19e40de8e3ec4b010679b33bfae3d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ec487fc19e40de8e3ec4b010679b33bfae3d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3434c67d27da6cf4c758b517fe132d5295bf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3434c67d27da6cf4c758b517fe132d5295bf02", "html_url": "https://github.com/rust-lang/rust/commit/1b3434c67d27da6cf4c758b517fe132d5295bf02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3434c67d27da6cf4c758b517fe132d5295bf02/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae53b1222a1cbb21b057e294ea93f1283210fb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae53b1222a1cbb21b057e294ea93f1283210fb1a", "html_url": "https://github.com/rust-lang/rust/commit/ae53b1222a1cbb21b057e294ea93f1283210fb1a"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "b974c956c2e9caa5cd858b96496a9f0e7de85e77", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b3434c67d27da6cf4c758b517fe132d5295bf02/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3434c67d27da6cf4c758b517fe132d5295bf02/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1b3434c67d27da6cf4c758b517fe132d5295bf02", "patch": "@@ -291,27 +291,24 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         Ok(())\n     }\n \n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         memory_extra: &MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-    ) -> (\n-        Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>,\n-        Self::PointerTag,\n-    ) {\n+    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>> {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let (stacks, base_tag) = if !memory_extra.validate {\n-            (None, Tag::Untagged)\n-        } else {\n-            let (stacks, base_tag) = Stacks::new_allocation(\n+        let stacks = if memory_extra.validate {\n+            Some(Stacks::new_allocation(\n                 id,\n                 alloc.size,\n                 Rc::clone(&memory_extra.stacked_borrows),\n                 kind,\n-            );\n-            (Some(stacks), base_tag)\n+            ))\n+        } else {\n+            // No stacks.\n+            None\n         };\n         let mut stacked_borrows = memory_extra.stacked_borrows.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n@@ -328,7 +325,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n                 stacked_borrows: stacks,\n             },\n         );\n-        (Cow::Owned(alloc), base_tag)\n+        Cow::Owned(alloc)\n     }\n \n     #[inline(always)]"}, {"sha": "dc06f12ffeb46cd0df33c2e5f94cc4cc757346ae", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b3434c67d27da6cf4c758b517fe132d5295bf02/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3434c67d27da6cf4c758b517fe132d5295bf02/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1b3434c67d27da6cf4c758b517fe132d5295bf02", "patch": "@@ -462,7 +462,7 @@ impl Stacks {\n         size: Size,\n         extra: MemoryExtra,\n         kind: MemoryKind<MiriMemoryKind>,\n-    ) -> (Self, Tag) {\n+    ) -> Self {\n         let (tag, perm) = match kind {\n             MemoryKind::Stack =>\n                 // New unique borrow. This tag is not accessible by the program,\n@@ -472,12 +472,15 @@ impl Stacks {\n                 // and in particular, *all* raw pointers.\n                 (Tag::Tagged(extra.borrow_mut().new_ptr()), Permission::Unique),\n             MemoryKind::Machine(MiriMemoryKind::Static) =>\n+                // Statics are inherently shared, so we do not derive any uniqueness assumptions\n+                // from direct accesses to a static. Thus, the base permission is `SharedReadWrite`.\n                 (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n             _ =>\n+                // Everything else we handle entirely untagged for now.\n+                // FIXME: experiment with more precise tracking.\n                 (Tag::Untagged, Permission::SharedReadWrite),\n         };\n-        let stack = Stacks::new(size, perm, tag, extra);\n-        (stack, tag)\n+        Stacks::new(size, perm, tag, extra)\n     }\n \n     #[inline(always)]\n@@ -591,7 +594,12 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Compute new borrow.\n         let new_tag = match kind {\n+            // Give up tracking for raw pointers.\n+            // FIXME: Experiment with more precise tracking. Blocked on `&raw`\n+            // because `Rc::into_raw` currently creates intermediate references,\n+            // breaking `Rc::from_raw`.\n             RefKind::Raw { .. } => Tag::Untagged,\n+            // All other pointesr are properly tracked.\n             _ => Tag::Tagged(this.memory.extra.stacked_borrows.borrow_mut().new_ptr()),\n         };\n "}]}