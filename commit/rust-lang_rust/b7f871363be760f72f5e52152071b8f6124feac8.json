{"sha": "b7f871363be760f72f5e52152071b8f6124feac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Zjg3MTM2M2JlNzYwZjcyZjVlNTIxNTIwNzFiOGY2MTI0ZmVhYzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T18:14:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T20:41:15Z"}, "message": "region_infer: rustfmt", "tree": {"sha": "05cc9b0c814448b4b029cbcc09fad88adcbdd75f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05cc9b0c814448b4b029cbcc09fad88adcbdd75f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f871363be760f72f5e52152071b8f6124feac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f871363be760f72f5e52152071b8f6124feac8", "html_url": "https://github.com/rust-lang/rust/commit/b7f871363be760f72f5e52152071b8f6124feac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f871363be760f72f5e52152071b8f6124feac8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb789f4c763a43d4f2098243fb94d9551feb151", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb789f4c763a43d4f2098243fb94d9551feb151", "html_url": "https://github.com/rust-lang/rust/commit/8eb789f4c763a43d4f2098243fb94d9551feb151"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "bc26cb7a97a10672cee8742e676b7e5eb61b3ea0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7f871363be760f72f5e52152071b8f6124feac8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f871363be760f72f5e52152071b8f6124feac8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=b7f871363be760f72f5e52152071b8f6124feac8", "patch": "@@ -686,7 +686,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             test: _,\n         } = type_test;\n \n-\n         let generic_ty = generic_kind.to_ty(tcx);\n         let subject = match self.try_promote_type_test_subject(infcx, generic_ty) {\n             Some(s) => s,\n@@ -704,11 +703,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(\"try_promote_type_test: non_local_ub={:?}\", non_local_ub);\n \n             assert!(self.universal_regions.is_universal_region(non_local_ub));\n-            assert!(\n-                !self\n-                .universal_regions\n-                .is_local_free_region(non_local_ub)\n-            );\n+            assert!(!self.universal_regions.is_local_free_region(non_local_ub));\n \n             let requirement = ClosureOutlivesRequirement {\n                 subject,\n@@ -922,8 +917,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // now). Therefore, the sup-region outlives the sub-region if,\n         // for each universal region R1 in the sub-region, there\n         // exists some region R2 in the sup-region that outlives R1.\n-        let universal_outlives = self\n-            .scc_values\n+        let universal_outlives = self.scc_values\n             .universal_regions_outlived_by(sub_region_scc)\n             .all(|r1| {\n                 self.scc_values\n@@ -1034,8 +1028,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // (because `fr` includes `end(o)`).\n         for shorter_fr in self.scc_values.universal_regions_outlived_by(longer_fr_scc) {\n             // If it is known that `fr: o`, carry on.\n-            if self\n-                .universal_region_relations\n+            if self.universal_region_relations\n                 .outlives(longer_fr, shorter_fr)\n             {\n                 continue;\n@@ -1051,8 +1044,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n                 // We'll call that `fr-` -- it's ever so slightly smaller than `fr`.\n-                if let Some(fr_minus) = self\n-                    .universal_region_relations\n+                if let Some(fr_minus) = self.universal_region_relations\n                     .non_local_lower_bound(longer_fr)\n                 {\n                     debug!(\"check_universal_region: fr_minus={:?}\", fr_minus);\n@@ -1061,8 +1053,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     // region. (We always will.)  We'll call that\n                     // `shorter_fr+` -- it's ever so slightly larger than\n                     // `fr`.\n-                    let shorter_fr_plus = self\n-                        .universal_region_relations\n+                    let shorter_fr_plus = self.universal_region_relations\n                         .non_local_upper_bound(shorter_fr);\n                     debug!(\n                         \"check_universal_region: shorter_fr_plus={:?}\",\n@@ -1122,8 +1113,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let error_region = match error_element {\n             RegionElement::Location(l) => self.find_sub_region_live_at(longer_fr, l),\n             RegionElement::RootUniversalRegion(r) => r,\n-            RegionElement::SubUniversalRegion(error_ui) => self\n-                .definitions\n+            RegionElement::SubUniversalRegion(error_ui) => self.definitions\n                 .iter_enumerated()\n                 .filter_map(|(r, definition)| match definition.origin {\n                     NLLRegionVariableOrigin::BoundRegion(ui) if error_ui == ui => Some(r),\n@@ -1220,7 +1210,11 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         // into a vector.  These are the regions that we will be\n         // relating to one another.\n         let closure_mapping = &UniversalRegions::closure_mapping(\n-            tcx, user_closure_ty, self.num_external_vids, tcx.closure_base_def_id(closure_def_id));\n+            tcx,\n+            user_closure_ty,\n+            self.num_external_vids,\n+            tcx.closure_base_def_id(closure_def_id),\n+        );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n \n         // Create the predicates."}]}