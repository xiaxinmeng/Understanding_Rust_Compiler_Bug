{"sha": "9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "node_id": "C_kwDOAAsO6NoAKDkwNTdhNmQ2NmE5ZTNhMTkyOWE0MzQ2MGU3YjAyMzBkYzZiNmZiZGE", "commit": {"author": {"name": "Brennan Vincent", "email": "brennan@umanwizard.com", "date": "2022-01-09T22:58:52Z"}, "committer": {"name": "Brennan Vincent", "email": "brennan@umanwizard.com", "date": "2022-01-09T23:01:44Z"}, "message": "Clarify explicitly that BTree{Map,Set} are ordered.", "tree": {"sha": "e878bc22c31a5e1aa31438245688fadaa413e7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e878bc22c31a5e1aa31438245688fadaa413e7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "html_url": "https://github.com/rust-lang/rust/commit/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/comments", "author": {"login": "umanwizard", "id": 1893159, "node_id": "MDQ6VXNlcjE4OTMxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1893159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umanwizard", "html_url": "https://github.com/umanwizard", "followers_url": "https://api.github.com/users/umanwizard/followers", "following_url": "https://api.github.com/users/umanwizard/following{/other_user}", "gists_url": "https://api.github.com/users/umanwizard/gists{/gist_id}", "starred_url": "https://api.github.com/users/umanwizard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umanwizard/subscriptions", "organizations_url": "https://api.github.com/users/umanwizard/orgs", "repos_url": "https://api.github.com/users/umanwizard/repos", "events_url": "https://api.github.com/users/umanwizard/events{/privacy}", "received_events_url": "https://api.github.com/users/umanwizard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "umanwizard", "id": 1893159, "node_id": "MDQ6VXNlcjE4OTMxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1893159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umanwizard", "html_url": "https://github.com/umanwizard", "followers_url": "https://api.github.com/users/umanwizard/followers", "following_url": "https://api.github.com/users/umanwizard/following{/other_user}", "gists_url": "https://api.github.com/users/umanwizard/gists{/gist_id}", "starred_url": "https://api.github.com/users/umanwizard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umanwizard/subscriptions", "organizations_url": "https://api.github.com/users/umanwizard/orgs", "repos_url": "https://api.github.com/users/umanwizard/repos", "events_url": "https://api.github.com/users/umanwizard/events{/privacy}", "received_events_url": "https://api.github.com/users/umanwizard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092e1c9d23158d81be27bb6f71bdd0c6282478fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/092e1c9d23158d81be27bb6f71bdd0c6282478fb", "html_url": "https://github.com/rust-lang/rust/commit/092e1c9d23158d81be27bb6f71bdd0c6282478fb"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "9e4c22c3f4565815c5de5eb97ed49970cc19ddb1", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "patch": "@@ -31,7 +31,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n // An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n-/// A map based on a [B-Tree].\n+/// An ordered map based on a [B-Tree].\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n /// the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\n@@ -65,6 +65,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Entries in a `BTreeMap` are stored in ascending order according to the [`Ord`] implementation on the key.\n+/// Thus, iteration methods are guaranteed to produce iterators that yield items in that order.\n+///\n /// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "c2bf63b4a413fd560e626e6ad1c58e3a7b94e543", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "patch": "@@ -15,7 +15,7 @@ use super::Recover;\n \n // FIXME(conventions): implement bounded iterators\n \n-/// A set based on a B-Tree.\n+/// An ordered set based on a B-Tree.\n ///\n /// See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance\n /// benefits and drawbacks.\n@@ -27,6 +27,9 @@ use super::Recover;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Entries in a `BTreeSet` are stored in ascending order according to the [`Ord`] implementation on the key.\n+/// Thus, iteration methods are guaranteed to produce iterators that yield items in that order.\n+///\n /// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "628a5b155673c9cc1cb9f4ce72799b2bc926e9ea", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9057a6d66a9e3a1929a43460e7b0230dc6b6fbda/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=9057a6d66a9e3a1929a43460e7b0230dc6b6fbda", "patch": "@@ -14,15 +14,15 @@ pub mod vec_deque;\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_map {\n-    //! A map based on a B-Tree.\n+    //! An ordered map based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::map::*;\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_set {\n-    //! A set based on a B-Tree.\n+    //! An ordered set based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::set::*;\n }"}]}