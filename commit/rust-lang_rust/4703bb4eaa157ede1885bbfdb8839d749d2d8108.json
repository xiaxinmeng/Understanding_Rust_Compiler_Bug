{"sha": "4703bb4eaa157ede1885bbfdb8839d749d2d8108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDNiYjRlYWExNTdlZGUxODg1YmJmZGI4ODM5ZDc0OWQyZDgxMDg=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-26T15:43:32Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-07-04T00:34:49Z"}, "message": "liburl: Generic input for {en,de}code.", "tree": {"sha": "aeaeef4e72665dc86ea6a5bab544ec0d7cc6d559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeaeef4e72665dc86ea6a5bab544ec0d7cc6d559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4703bb4eaa157ede1885bbfdb8839d749d2d8108", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4703bb4eaa157ede1885bbfdb8839d749d2d8108", "html_url": "https://github.com/rust-lang/rust/commit/4703bb4eaa157ede1885bbfdb8839d749d2d8108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4703bb4eaa157ede1885bbfdb8839d749d2d8108/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "465ec239184ea3aa24fb6108d6d78901e3f84b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/465ec239184ea3aa24fb6108d6d78901e3f84b94", "html_url": "https://github.com/rust-lang/rust/commit/465ec239184ea3aa24fb6108d6d78901e3f84b94"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "585d96e930715e05c1972e265d3ed6daa9e9e0f4", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4703bb4eaa157ede1885bbfdb8839d749d2d8108/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4703bb4eaa157ede1885bbfdb8839d749d2d8108/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=4703bb4eaa157ede1885bbfdb8839d749d2d8108", "patch": "@@ -26,6 +26,7 @@ use std::fmt;\n use std::from_str::FromStr;\n use std::hash;\n use std::uint;\n+use std::path::BytesContainer;\n \n /// A Uniform Resource Locator (URL).  A URL is a form of URI (Uniform Resource\n /// Identifier) that includes network location information, such as hostname or\n@@ -182,8 +183,8 @@ impl UserInfo {\n     }\n }\n \n-fn encode_inner(s: &str, full_url: bool) -> String {\n-    s.bytes().fold(String::new(), |mut out, b| {\n+fn encode_inner<T: BytesContainer>(c: T, full_url: bool) -> String {\n+    c.container_as_bytes().iter().fold(String::new(), |mut out, &b| {\n         match b as char {\n             // unreserved:\n             'A' .. 'Z'\n@@ -218,17 +219,17 @@ fn encode_inner(s: &str, full_url: bool) -> String {\n /// let url = encode(\"https://example.com/Rust (programming language)\");\n /// println!(\"{}\", url); // https://example.com/Rust%20(programming%20language)\n /// ```\n-pub fn encode(s: &str) -> String {\n-    encode_inner(s, true)\n+pub fn encode<T: BytesContainer>(container: T) -> String {\n+    encode_inner(container, true)\n }\n \n \n /// Encodes a URI component by replacing reserved characters with percent-\n /// encoded character sequences.\n ///\n /// This function is compliant with RFC 3986.\n-pub fn encode_component(s: &str) -> String {\n-    encode_inner(s, false)\n+pub fn encode_component<T: BytesContainer>(container: T) -> String {\n+    encode_inner(container, false)\n }\n \n pub type DecodeResult<T> = Result<T, String>;\n@@ -245,18 +246,18 @@ pub type DecodeResult<T> = Result<T, String>;\n /// let url = decode(\"https://example.com/Rust%20(programming%20language)\");\n /// println!(\"{}\", url); // https://example.com/Rust (programming language)\n /// ```\n-pub fn decode(s: &str) -> DecodeResult<String> {\n-    decode_inner(s, true)\n+pub fn decode<T: BytesContainer>(container: T) -> DecodeResult<String> {\n+    decode_inner(container, true)\n }\n \n /// Decode a string encoded with percent encoding.\n-pub fn decode_component(s: &str) -> DecodeResult<String> {\n-    decode_inner(s, false)\n+pub fn decode_component<T: BytesContainer>(container: T) -> DecodeResult<String> {\n+    decode_inner(container, false)\n }\n \n-fn decode_inner(s: &str, full_url: bool) -> DecodeResult<String> {\n+fn decode_inner<T: BytesContainer>(c: T, full_url: bool) -> DecodeResult<String> {\n     let mut out = String::new();\n-    let mut iter = s.bytes();\n+    let mut iter = c.container_as_bytes().iter().map(|&b| b);\n \n     loop {\n         match iter.next() {\n@@ -864,6 +865,7 @@ mod tests {\n         encode_component, decode_component, UserInfo, get_scheme, Url, Path};\n \n     use std::collections::HashMap;\n+    use std::path::BytesContainer;\n \n     #[test]\n     fn test_url_parse() {\n@@ -1057,7 +1059,7 @@ mod tests {\n \n     #[test]\n     fn test_encode() {\n-        fn t(input: &str, expected: &str) {\n+        fn t<T: BytesContainer>(input: T, expected: &str) {\n             assert_eq!(encode(input), expected.to_string())\n         }\n \n@@ -1087,11 +1089,13 @@ mod tests {\n         t(\"]\", \"]\");\n         t(\"\\0\", \"%00\");\n         t(\"\\n\", \"%0A\");\n+\n+        t(&[0u8, 10, 37], \"%00%0A%25\");\n     }\n \n     #[test]\n     fn test_encode_component() {\n-        fn t(input: &str, expected: &str) {\n+        fn t<T: BytesContainer>(input: T, expected: &str) {\n             assert_eq!(encode_component(input), expected.to_string())\n         }\n \n@@ -1120,11 +1124,13 @@ mod tests {\n         t(\"]\", \"%5D\");\n         t(\"\\0\", \"%00\");\n         t(\"\\n\", \"%0A\");\n+\n+        t(&[0u8, 10, 37], \"%00%0A%25\");\n     }\n \n     #[test]\n     fn test_decode() {\n-        fn t(input: &str, expected: &str) {\n+        fn t<T: BytesContainer>(input: T, expected: &str) {\n             assert_eq!(decode(input), Ok(expected.to_string()))\n         }\n \n@@ -1154,11 +1160,13 @@ mod tests {\n         t(\"%40\", \"%40\");\n         t(\"%5B\", \"%5B\");\n         t(\"%5D\", \"%5D\");\n+\n+        t(\"%00%0A%25\".as_bytes(), \"\\0\\n%\");\n     }\n \n     #[test]\n     fn test_decode_component() {\n-        fn t(input: &str, expected: &str) {\n+        fn t<T: BytesContainer>(input: T, expected: &str) {\n             assert_eq!(decode_component(input), Ok(expected.to_string()))\n         }\n \n@@ -1188,6 +1196,8 @@ mod tests {\n         t(\"%40\", \"@\");\n         t(\"%5B\", \"[\");\n         t(\"%5D\", \"]\");\n+\n+        t(\"%00%0A%25\".as_bytes(), \"\\0\\n%\");\n     }\n \n     #[test]"}]}