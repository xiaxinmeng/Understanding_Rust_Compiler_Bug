{"sha": "4b0f702608d11a45491cc4a07e3b968d4a917f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMGY3MDI2MDhkMTFhNDU0OTFjYzRhMDdlM2I5NjhkNGE5MTdmMmU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-14T00:51:48Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:15:54Z"}, "message": "convert ast::attribute_ and ast::view_item to a struct", "tree": {"sha": "3c8cbf51a5486a189b13832e1cd641119ed04bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c8cbf51a5486a189b13832e1cd641119ed04bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b0f702608d11a45491cc4a07e3b968d4a917f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f702608d11a45491cc4a07e3b968d4a917f2e", "html_url": "https://github.com/rust-lang/rust/commit/4b0f702608d11a45491cc4a07e3b968d4a917f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f702608d11a45491cc4a07e3b968d4a917f2e/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eafed93d72845581e04bacd3aaea4b28a3f49396", "url": "https://api.github.com/repos/rust-lang/rust/commits/eafed93d72845581e04bacd3aaea4b28a3f49396", "html_url": "https://github.com/rust-lang/rust/commit/eafed93d72845581e04bacd3aaea4b28a3f49396"}], "stats": {"total": 136, "additions": 79, "deletions": 57}, "files": [{"sha": "4896bb826bffb1eaa71adc70f627aa4169e9f8f6", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -345,7 +345,7 @@ mod test {\n     use syntax::ast_util;\n \n     fn make_crate_type_attr(+t: ~str) -> ast::attribute {\n-        ast_util::respan(ast_util::dummy_sp(), {\n+        ast_util::respan(ast_util::dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n             value: ast_util::respan(ast_util::dummy_sp(),\n                 ast::meta_name_value("}, {"sha": "e3de8448130395cce34a85b96c27d46ae1ae1554", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -45,22 +45,21 @@ fn inject_libcore_ref(sess: Session,\n     let precursor = @fold::AstFoldFns {\n         fold_crate: |crate, span, fld| {\n             let n1 = sess.next_node_id();\n-            let vi1 = @{node: ast::view_item_use(sess.ident_of(~\"core\"),\n-                                                 ~[],\n-                                                 n1),\n-                        attrs: ~[\n-                            spanned({\n-                                style: ast::attr_inner,\n-                                value: spanned(ast::meta_name_value(\n-                                    ~\"vers\",\n-                                    spanned(ast::lit_str(\n-                                        @CORE_VERSION.to_str()))\n-                                )),\n-                                is_sugared_doc: false\n-                            })\n-                        ],\n-                        vis: ast::private,\n-                        span: dummy_sp()};\n+            let vi1 = @ast::view_item {\n+                node: ast::view_item_use(sess.ident_of(~\"core\"), ~[], n1),\n+                attrs: ~[\n+                    spanned(ast::attribute_ {\n+                        style: ast::attr_inner,\n+                        value: spanned(ast::meta_name_value(\n+                            ~\"vers\",\n+                            spanned(ast::lit_str(@CORE_VERSION.to_str()))\n+                        )),\n+                        is_sugared_doc: false\n+                    })\n+                ],\n+                vis: ast::private,\n+                span: dummy_sp()\n+            };\n \n             let vis = vec::append(~[vi1], crate.module.view_items);\n             let mut new_module = {\n@@ -88,10 +87,10 @@ fn inject_libcore_ref(sess: Session,\n             };\n \n             let vp = @spanned(ast::view_path_glob(prelude_path, n2));\n-            let vi2 = @{node: ast::view_item_import(~[vp]),\n-                        attrs: ~[],\n-                        vis: ast::private,\n-                        span: dummy_sp()};\n+            let vi2 = @ast::view_item { node: ast::view_item_import(~[vp]),\n+                                        attrs: ~[],\n+                                        vis: ast::private,\n+                                        span: dummy_sp() };\n \n             let vis = vec::append(~[vi2], module.view_items);\n "}, {"sha": "979cc902cc71fbcdf08484ac9a0ba6a25cd8e357", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -268,7 +268,7 @@ fn mk_std(cx: test_ctxt) -> @ast::view_item {\n     let vi = ast::view_item_use(cx.sess.ident_of(~\"std\"),\n                                 ~[@mi],\n                                 cx.sess.next_node_id());\n-    let vi = {\n+    let vi = ast::view_item {\n         node: vi,\n         attrs: ~[],\n         vis: ast::private,"}, {"sha": "84da4169c3dc583f59b08ae444d0f50d04a56ea0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -1034,10 +1034,14 @@ fn get_attributes(md: ebml::Doc) -> ~[ast::attribute] {\n             assert (vec::len(meta_items) == 1u);\n             let meta_item = meta_items[0];\n             attrs.push(\n-                ast::spanned { node: { style: ast::attr_outer,\n-                                       value: /*bad*/copy *meta_item,\n-                                       is_sugared_doc: false },\n-                               span: ast_util::dummy_sp()});\n+                ast::spanned {\n+                    node: ast::attribute_ {\n+                        style: ast::attr_outer,\n+                        value: /*bad*/copy *meta_item,\n+                        is_sugared_doc: false,\n+                    },\n+                    span: ast_util::dummy_sp()\n+                });\n         };\n       }\n       option::None => ()"}, {"sha": "ba8d9fc41cc600e3f41465df8ed652c72201cda7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -1393,8 +1393,12 @@ enum view_path_ {\n \n #[auto_encode]\n #[auto_decode]\n-type view_item = {node: view_item_, attrs: ~[attribute],\n-                  vis: visibility, span: span};\n+struct view_item {\n+    node: view_item_,\n+    attrs: ~[attribute],\n+    vis: visibility,\n+    span: span,\n+}\n \n #[auto_encode]\n #[auto_decode]\n@@ -1424,7 +1428,11 @@ impl attr_style : cmp::Eq {\n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[auto_encode]\n #[auto_decode]\n-type attribute_ = {style: attr_style, value: meta_item, is_sugared_doc: bool};\n+struct attribute_ {\n+    style: attr_style,\n+    value: meta_item,\n+    is_sugared_doc: bool,\n+}\n \n /*\n   trait_refs appear in impls."}, {"sha": "3906711b4b645626839bdfcbc48d4d237b0a94cd", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -91,19 +91,20 @@ fn mk_word_item(name: ~str) -> @ast::meta_item {\n }\n \n fn mk_attr(item: @ast::meta_item) -> ast::attribute {\n-    return dummy_spanned({style: ast::attr_inner, value: *item,\n-                       is_sugared_doc: false});\n+    dummy_spanned(ast::attribute_ { style: ast::attr_inner,\n+                                    value: *item,\n+                                    is_sugared_doc: false })\n }\n \n fn mk_sugared_doc_attr(text: ~str,\n                        +lo: BytePos, +hi: BytePos) -> ast::attribute {\n     let lit = spanned(lo, hi, ast::lit_str(@text));\n-    let attr = {\n+    let attr = ast::attribute_ {\n         style: doc_comment_style(text),\n         value: spanned(lo, hi, ast::meta_name_value(~\"doc\", lit)),\n         is_sugared_doc: true\n     };\n-    return spanned(lo, hi, attr);\n+    spanned(lo, hi, attr)\n }\n \n /* Conversion */"}, {"sha": "4d02c4bc40c2ed3d404eb43851ad022aeef8428d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -173,10 +173,10 @@ fn mk_glob_use(cx: ext_ctxt, sp: span,\n         node: ast::view_path_glob(mk_raw_path(sp, path), cx.next_id()),\n         span: sp,\n     };\n-    @{node: ast::view_item_import(~[glob]),\n-      attrs: ~[],\n-      vis: ast::private,\n-      span: sp}\n+    @ast::view_item { node: ast::view_item_import(~[glob]),\n+                      attrs: ~[],\n+                      vis: ast::private,\n+                      span: sp }\n }\n fn mk_local(cx: ext_ctxt, sp: span, mutbl: bool,\n             ident: ast::ident, ex: @ast::expr) -> @ast::stmt {"}, {"sha": "66d8cde012401bde4bfdbdf01df4c64d38cc1cdd", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -219,7 +219,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n \n         // XXX: Would be nice if our generated code didn't violate\n         // Rust coding conventions\n-        let non_camel_case_attribute = respan(dummy_sp(), {\n+        let non_camel_case_attribute = respan(dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n             value: respan(dummy_sp(),\n                           ast::meta_list(~\"allow\", ~[\n@@ -306,7 +306,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n                 span: ast_util::dummy_sp()\n             }\n         ]);\n-        let vi = @{\n+        let vi = @ast::view_item {\n             node: vi,\n             attrs: ~[],\n             vis: ast::private,"}, {"sha": "b99a1a025403880a6b7fc02e7636b4f448c00ade", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -114,10 +114,14 @@ fn fold_meta_item_(&&mi: @meta_item, fld: ast_fold) -> @meta_item {\n }\n //used in noop_fold_item and noop_fold_crate\n fn fold_attribute_(at: attribute, fld: ast_fold) -> attribute {\n-    spanned { node: { style: at.node.style,\n-                      value: *fold_meta_item_(@at.node.value, fld),\n-                      is_sugared_doc: at.node.is_sugared_doc },\n-              span: fld.new_span(at.span) }\n+    spanned {\n+        node: ast::attribute_ {\n+            style: at.node.style,\n+            value: *fold_meta_item_(@at.node.value, fld),\n+            is_sugared_doc: at.node.is_sugared_doc,\n+        },\n+        span: fld.new_span(at.span),\n+    }\n }\n //used in noop_fold_foreign_item and noop_fold_fn_decl\n fn fold_arg_(a: arg, fld: ast_fold) -> arg {\n@@ -679,11 +683,13 @@ impl ast_fold_fns: ast_fold {\n     }\n     fn fold_view_item(&&x: @view_item) ->\n        @view_item {\n-        return @{node: (self.fold_view_item)(x.node, self as ast_fold),\n-              attrs: vec::map(x.attrs, |a|\n+        @ast::view_item {\n+            node: (self.fold_view_item)(x.node, self as ast_fold),\n+            attrs: vec::map(x.attrs, |a|\n                   fold_attribute_(*a, self as ast_fold)),\n-              vis: x.vis,\n-              span: (self.new_span)(x.span)};\n+            vis: x.vis,\n+            span: (self.new_span)(x.span),\n+        }\n     }\n     fn fold_foreign_item(&&x: @foreign_item)\n         -> @foreign_item {"}, {"sha": "375fefa64b4967348410487f1f456679f2bd73e3", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -72,8 +72,9 @@ impl Parser: parser_attr {\n         let meta_item = self.parse_meta_item();\n         self.expect(token::RBRACKET);\n         let mut hi = self.span.hi;\n-        return spanned(lo, hi, {style: style, value: *meta_item,\n-                             is_sugared_doc: false});\n+        return spanned(lo, hi, ast::attribute_ { style: style,\n+                                                 value: *meta_item,\n+                                                 is_sugared_doc: false });\n     }\n \n     // Parse attributes that appear after the opening of an item, each\n@@ -101,8 +102,9 @@ impl Parser: parser_attr {\n                     // It's not really an inner attribute\n                     let outer_attr =\n                         spanned(attr.span.lo, attr.span.hi,\n-                            {style: ast::attr_outer, value: attr.node.value,\n-                             is_sugared_doc: false});\n+                            ast::attribute_ { style: ast::attr_outer,\n+                                              value: attr.node.value,\n+                                              is_sugared_doc: false });\n                     next_outer_attrs += ~[outer_attr];\n                     break;\n                 }"}, {"sha": "a5330b113ddc6b2d726ec0cf8d92fba21de4b39f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f702608d11a45491cc4a07e3b968d4a917f2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4b0f702608d11a45491cc4a07e3b968d4a917f2e", "patch": "@@ -3276,12 +3276,12 @@ impl Parser {\n         // extern mod foo;\n         let metadata = self.parse_optional_meta();\n         self.expect(token::SEMI);\n-        return iovi_view_item(@{\n+        iovi_view_item(@ast::view_item {\n             node: view_item_use(ident, metadata, self.get_id()),\n             attrs: attrs,\n             vis: visibility,\n             span: mk_sp(lo, self.last_span.hi)\n-        });\n+        })\n     }\n \n     fn parse_type_decl() -> {lo: BytePos, ident: ident} {\n@@ -3573,7 +3573,7 @@ impl Parser {\n         } else if self.eat_keyword(~\"use\") {\n             let view_item = self.parse_use();\n             self.expect(token::SEMI);\n-            return iovi_view_item(@{\n+            return iovi_view_item(@ast::view_item {\n                 node: view_item,\n                 attrs: attrs,\n                 vis: visibility,\n@@ -3582,7 +3582,7 @@ impl Parser {\n         } else if self.eat_keyword(~\"export\") {\n             let view_paths = self.parse_view_paths();\n             self.expect(token::SEMI);\n-            return iovi_view_item(@{\n+            return iovi_view_item(@ast::view_item {\n                 node: view_item_export(view_paths),\n                 attrs: attrs,\n                 vis: visibility,\n@@ -3780,8 +3780,10 @@ impl Parser {\n             fail;\n         };\n         self.expect(token::SEMI);\n-        @{node: node, attrs: attrs,\n-          vis: vis, span: mk_sp(lo, self.last_span.hi)}\n+        @ast::view_item { node: node,\n+                          attrs: attrs,\n+                          vis: vis,\n+                          span: mk_sp(lo, self.last_span.hi) }\n     }\n \n     fn parse_items_and_view_items(+first_item_attrs: ~[attribute],"}]}