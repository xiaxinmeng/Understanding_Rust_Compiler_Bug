{"sha": "6bf2c4d73986d003941e6b63d64cab213729b44f", "node_id": "C_kwDOAAsO6NoAKDZiZjJjNGQ3Mzk4NmQwMDM5NDFlNmI2M2Q2NGNhYjIxMzcyOWI0NGY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-06T19:03:02Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-31T17:09:30Z"}, "message": "implement const iterator using `rustc_do_not_const_check`", "tree": {"sha": "573df2feb4e59c94d31737ceb0a73085ec1ace77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/573df2feb4e59c94d31737ceb0a73085ec1ace77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf2c4d73986d003941e6b63d64cab213729b44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf2c4d73986d003941e6b63d64cab213729b44f", "html_url": "https://github.com/rust-lang/rust/commit/6bf2c4d73986d003941e6b63d64cab213729b44f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf2c4d73986d003941e6b63d64cab213729b44f/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64ef7d07d0411315be85a646586cb85eeb9c136", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64ef7d07d0411315be85a646586cb85eeb9c136", "html_url": "https://github.com/rust-lang/rust/commit/a64ef7d07d0411315be85a646586cb85eeb9c136"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "651b3114484cbf4aa897c9e75e31ee5313fb89bb", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6bf2c4d73986d003941e6b63d64cab213729b44f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf2c4d73986d003941e6b63d64cab213729b44f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=6bf2c4d73986d003941e6b63d64cab213729b44f", "patch": "@@ -67,7 +67,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config;\n use rustc_session::Session;\n use rustc_span::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n #[macro_export]\n macro_rules! type_error_struct {\n@@ -201,6 +201,11 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n+        let param_env = if tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+            param_env.without_const()\n+        } else {\n+            param_env\n+        };\n         let mut fcx = FnCtxt::new(&inh, param_env, def_id);\n \n         if let Some(hir::FnSig { header, decl, .. }) = fn_sig {"}, {"sha": "357c808276234bbb7b83d1d0e8aec8b96dac97e2", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6bf2c4d73986d003941e6b63d64cab213729b44f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf2c4d73986d003941e6b63d64cab213729b44f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=6bf2c4d73986d003941e6b63d64cab213729b44f", "patch": "@@ -69,6 +69,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[doc(notable_trait)]\n #[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[rustc_diagnostic_item = \"IteratorItem\"]\n@@ -141,6 +142,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue = \"98326\")]\n+    #[rustc_do_not_const_check]\n     fn next_chunk<const N: usize>(\n         &mut self,\n     ) -> Result<[Self::Item; N], array::IntoIter<Self::Item, N>>\n@@ -218,6 +220,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (0, None)\n     }\n@@ -255,6 +258,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn count(self) -> usize\n     where\n         Self: Sized,\n@@ -285,6 +289,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn last(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -331,6 +336,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n+    #[rustc_do_not_const_check]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         for i in 0..n {\n             self.next().ok_or(i)?;\n@@ -379,6 +385,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.advance_by(n).ok()?;\n         self.next()\n@@ -431,6 +438,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n+    #[rustc_do_not_const_check]\n     fn step_by(self, step: usize) -> StepBy<Self>\n     where\n         Self: Sized,\n@@ -502,6 +510,7 @@ pub trait Iterator {\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n     where\n         Self: Sized,\n@@ -620,6 +629,7 @@ pub trait Iterator {\n     /// [`zip`]: crate::iter::zip\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n     where\n         Self: Sized,\n@@ -662,6 +672,7 @@ pub trait Iterator {\n     /// [`intersperse_with`]: Iterator::intersperse_with\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[rustc_do_not_const_check]\n     fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n     where\n         Self: Sized,\n@@ -720,6 +731,7 @@ pub trait Iterator {\n     /// [`intersperse`]: Iterator::intersperse\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[rustc_do_not_const_check]\n     fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n     where\n         Self: Sized,\n@@ -779,6 +791,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn map<B, F>(self, f: F) -> Map<Self, F>\n     where\n         Self: Sized,\n@@ -824,6 +837,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]\n+    #[rustc_do_not_const_check]\n     fn for_each<F>(self, f: F)\n     where\n         Self: Sized,\n@@ -899,6 +913,7 @@ pub trait Iterator {\n     /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn filter<P>(self, predicate: P) -> Filter<Self, P>\n     where\n         Self: Sized,\n@@ -944,6 +959,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n     where\n         Self: Sized,\n@@ -990,6 +1006,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn enumerate(self) -> Enumerate<Self>\n     where\n         Self: Sized,\n@@ -1061,6 +1078,7 @@ pub trait Iterator {\n     /// [`next`]: Iterator::next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn peekable(self) -> Peekable<Self>\n     where\n         Self: Sized,\n@@ -1126,6 +1144,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(alias = \"drop_while\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1207,6 +1226,7 @@ pub trait Iterator {\n     /// the iteration should stop, but wasn't placed back into the iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1295,6 +1315,7 @@ pub trait Iterator {\n     /// [`fuse`]: Iterator::fuse\n     #[inline]\n     #[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n+    #[rustc_do_not_const_check]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1326,6 +1347,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn skip(self, n: usize) -> Skip<Self>\n     where\n         Self: Sized,\n@@ -1379,6 +1401,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn take(self, n: usize) -> Take<Self>\n     where\n         Self: Sized,\n@@ -1428,6 +1451,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n     where\n         Self: Sized,\n@@ -1468,6 +1492,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n     where\n         Self: Sized,\n@@ -1552,6 +1577,7 @@ pub trait Iterator {\n     /// [`flat_map()`]: Iterator::flat_map\n     #[inline]\n     #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n+    #[rustc_do_not_const_check]\n     fn flatten(self) -> Flatten<Self>\n     where\n         Self: Sized,\n@@ -1620,6 +1646,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn fuse(self) -> Fuse<Self>\n     where\n         Self: Sized,\n@@ -1704,6 +1731,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn inspect<F>(self, f: F) -> Inspect<Self, F>\n     where\n         Self: Sized,\n@@ -1734,6 +1762,7 @@ pub trait Iterator {\n     /// assert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn by_ref(&mut self) -> &mut Self\n     where\n         Self: Sized,\n@@ -1853,6 +1882,7 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n     #[cfg_attr(not(test), rustc_diagnostic_item = \"iterator_collect_fn\")]\n+    #[rustc_do_not_const_check]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B\n     where\n         Self: Sized,\n@@ -1931,6 +1961,7 @@ pub trait Iterator {\n     /// [`collect`]: Iterator::collect\n     #[inline]\n     #[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]\n+    #[rustc_do_not_const_check]\n     fn try_collect<B>(&mut self) -> ChangeOutputType<Self::Item, B>\n     where\n         Self: Sized,\n@@ -2004,6 +2035,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue = \"94780\")]\n+    #[rustc_do_not_const_check]\n     fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n     where\n         Self: Sized,\n@@ -2038,6 +2070,7 @@ pub trait Iterator {\n     /// assert_eq!(odd, vec![1, 3]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn partition<B, F>(self, f: F) -> (B, B)\n     where\n         Self: Sized,\n@@ -2100,6 +2133,7 @@ pub trait Iterator {\n     /// assert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n     /// ```\n     #[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue = \"62543\")]\n+    #[rustc_do_not_const_check]\n     fn partition_in_place<'a, T: 'a, P>(mut self, ref mut predicate: P) -> usize\n     where\n         Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n@@ -2157,6 +2191,7 @@ pub trait Iterator {\n     /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n     /// ```\n     #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"62544\")]\n+    #[rustc_do_not_const_check]\n     fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n     where\n         Self: Sized,\n@@ -2251,6 +2286,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -2309,6 +2345,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn try_for_each<F, R>(&mut self, f: F) -> R\n     where\n         Self: Sized,\n@@ -2428,6 +2465,7 @@ pub trait Iterator {\n     #[doc(alias = \"inject\", alias = \"foldl\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n@@ -2465,6 +2503,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]\n+    #[rustc_do_not_const_check]\n     fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -2536,6 +2575,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue = \"87053\")]\n+    #[rustc_do_not_const_check]\n     fn try_reduce<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<R::Output>>\n     where\n         Self: Sized,\n@@ -2593,6 +2633,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn all<F>(&mut self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -2646,6 +2687,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn any<F>(&mut self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -2709,6 +2751,7 @@ pub trait Iterator {\n     /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -2740,6 +2783,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_find_map\", since = \"1.30.0\")]\n+    #[rustc_do_not_const_check]\n     fn find_map<B, F>(&mut self, f: F) -> Option<B>\n     where\n         Self: Sized,\n@@ -2796,6 +2840,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[rustc_do_not_const_check]\n     fn try_find<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<Self::Item>>\n     where\n         Self: Sized,\n@@ -2878,6 +2923,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn position<P>(&mut self, predicate: P) -> Option<usize>\n     where\n         Self: Sized,\n@@ -2935,6 +2981,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn rposition<P>(&mut self, predicate: P) -> Option<usize>\n     where\n         P: FnMut(Self::Item) -> bool,\n@@ -2986,6 +3033,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn max(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3024,6 +3072,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn min(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3046,6 +3095,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    #[rustc_do_not_const_check]\n     fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3079,6 +3129,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_max_by\", since = \"1.15.0\")]\n+    #[rustc_do_not_const_check]\n     fn max_by<F>(self, compare: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3106,6 +3157,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    #[rustc_do_not_const_check]\n     fn min_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3139,6 +3191,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_min_by\", since = \"1.15.0\")]\n+    #[rustc_do_not_const_check]\n     fn min_by<F>(self, compare: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3176,6 +3229,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(alias = \"reverse\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn rev(self) -> Rev<Self>\n     where\n         Self: Sized + DoubleEndedIterator,\n@@ -3214,6 +3268,7 @@ pub trait Iterator {\n     /// assert_eq!(z, [3, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)\n     where\n         FromA: Default + Extend<A>,\n@@ -3246,6 +3301,7 @@ pub trait Iterator {\n     /// assert_eq!(v_map, vec![1, 2, 3]);\n     /// ```\n     #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n+    #[rustc_do_not_const_check]\n     fn copied<'a, T: 'a>(self) -> Copied<Self>\n     where\n         Self: Sized + Iterator<Item = &'a T>,\n@@ -3293,6 +3349,7 @@ pub trait Iterator {\n     /// assert_eq!(&[vec![23]], &faster[..]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n     where\n         Self: Sized + Iterator<Item = &'a T>,\n@@ -3327,6 +3384,7 @@ pub trait Iterator {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[rustc_do_not_const_check]\n     fn cycle(self) -> Cycle<Self>\n     where\n         Self: Sized + Clone,\n@@ -3370,6 +3428,7 @@ pub trait Iterator {\n     /// ```\n     #[track_caller]\n     #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"100450\")]\n+    #[rustc_do_not_const_check]\n     fn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N>\n     where\n         Self: Sized,\n@@ -3400,6 +3459,7 @@ pub trait Iterator {\n     /// assert_eq!(sum, 6);\n     /// ```\n     #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n+    #[rustc_do_not_const_check]\n     fn sum<S>(self) -> S\n     where\n         Self: Sized,\n@@ -3429,6 +3489,7 @@ pub trait Iterator {\n     /// assert_eq!(factorial(5), 120);\n     /// ```\n     #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n+    #[rustc_do_not_const_check]\n     fn product<P>(self) -> P\n     where\n         Self: Sized,\n@@ -3450,6 +3511,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn cmp<I>(self, other: I) -> Ordering\n     where\n         I: IntoIterator<Item = Self::Item>,\n@@ -3479,6 +3541,7 @@ pub trait Iterator {\n     /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering\n     where\n         Self: Sized,\n@@ -3517,6 +3580,7 @@ pub trait Iterator {\n     /// assert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n     where\n         I: IntoIterator,\n@@ -3555,6 +3619,7 @@ pub trait Iterator {\n     /// );\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>\n     where\n         Self: Sized,\n@@ -3588,6 +3653,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn eq<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3613,6 +3679,7 @@ pub trait Iterator {\n     /// assert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn eq_by<I, F>(self, other: I, eq: F) -> bool\n     where\n         Self: Sized,\n@@ -3645,6 +3712,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().ne([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn ne<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3666,6 +3734,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn lt<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3687,6 +3756,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().le([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn le<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3708,6 +3778,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn gt<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3729,6 +3800,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn ge<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3760,6 +3832,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted(self) -> bool\n     where\n         Self: Sized,\n@@ -3788,6 +3861,7 @@ pub trait Iterator {\n     ///\n     /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted_by<F>(mut self, compare: F) -> bool\n     where\n         Self: Sized,\n@@ -3834,6 +3908,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted_by_key<F, K>(self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -3849,6 +3924,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(hidden)]\n     #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+    #[rustc_do_not_const_check]\n     unsafe fn __iterator_get_unchecked(&mut self, _idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "3528ef0a3e5c33e7be44a56375dc4354acfff967", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bf2c4d73986d003941e6b63d64cab213729b44f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf2c4d73986d003941e6b63d64cab213729b44f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=6bf2c4d73986d003941e6b63d64cab213729b44f", "patch": "@@ -194,6 +194,7 @@\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![cfg_attr(not(bootstrap), feature(const_closures))]\n #![feature(const_fn_floating_point_arithmetic)]\n+#![feature(const_for)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_refs_to_cell)]"}, {"sha": "3c39c53de5f0a4a537d97cdd26fe5343bcc9b869", "filename": "tests/ui/rfc-2632-const-trait-impl/do-not-const-check.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bf2c4d73986d003941e6b63d64cab213729b44f/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf2c4d73986d003941e6b63d64cab213729b44f/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs?ref=6bf2c4d73986d003941e6b63d64cab213729b44f", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_trait_impl, rustc_attrs)]\n+\n+#[const_trait]\n+trait IntoIter {\n+    fn into_iter(self);\n+}\n+\n+#[const_trait]\n+trait Hmm: Sized {\n+    #[rustc_do_not_const_check]\n+    fn chain<U>(self, other: U) where U: IntoIter,\n+    {\n+        other.into_iter()\n+    }\n+}\n+\n+fn main() {}"}]}