{"sha": "8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjUyMGMxZGNjOGMxZWIwNjE0MTQwNGY5YjlhMTkzMzQ3MTFkMWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-18T17:42:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-18T17:42:37Z"}, "message": "Sync from rust a5560a6a90f08a84728802bb5fa5632a17a78672", "tree": {"sha": "6b4a49a5da92b66e64818adc473e0d9e463f7b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4a49a5da92b66e64818adc473e0d9e463f7b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "html_url": "https://github.com/rust-lang/rust/commit/8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beab7510cfbfb3aaa541922f2298b91b5bfff99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/beab7510cfbfb3aaa541922f2298b91b5bfff99d", "html_url": "https://github.com/rust-lang/rust/commit/beab7510cfbfb3aaa541922f2298b91b5bfff99d"}, {"sha": "3c530059496200e02ab8ffe7c7ed3cc07cf08863", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c530059496200e02ab8ffe7c7ed3cc07cf08863", "html_url": "https://github.com/rust-lang/rust/commit/3c530059496200e02ab8ffe7c7ed3cc07cf08863"}], "stats": {"total": 119, "additions": 33, "deletions": 86}, "files": [{"sha": "357a9f2daf746e67e4f9bdea0e38a37637251e27", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });"}, {"sha": "8d323efee69c4ccd3564dc9f70f2db9208e7e1be", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -334,7 +334,9 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = self.tcx.const_caller_location((\n-            rustc_span::symbol::Symbol::intern(&caller.file.name.to_string()),\n+            rustc_span::symbol::Symbol::intern(\n+                &caller.file.name.prefer_remapped().to_string_lossy(),\n+            ),\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));"}, {"sha": "9eb067706309e12cebc5a06146d24e433da1f6e0", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -66,7 +66,7 @@ fn line_program_add_file(\n ) -> FileId {\n     match &file.name {\n         FileName::Real(path) => {\n-            let (dir_path, file_name) = split_path_dir_and_file(path.stable_name());\n+            let (dir_path, file_name) = split_path_dir_and_file(path.remapped_path_if_available());\n             let dir_name = osstr_as_utf8_bytes(dir_path.as_os_str());\n             let file_name = osstr_as_utf8_bytes(file_name);\n \n@@ -87,7 +87,7 @@ fn line_program_add_file(\n         filename => {\n             let dir_id = line_program.default_directory();\n             let dummy_file_name = LineString::new(\n-                filename.to_string().into_bytes(),\n+                filename.prefer_remapped().to_string().into_bytes(),\n                 line_program.encoding(),\n                 line_strings,\n             );"}, {"sha": "61e54a76f29ba514956cb25c6066ef6182190e79", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> DebugContext<'tcx> {\n         // FIXME: how to get version when building out of tree?\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n-        let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n+        let comp_dir = tcx.sess.working_dir.to_string_lossy(false).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}, {"sha": "0a104947eae0ab463672b52a820277bb078144c4", "filename": "src/driver/aot.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -3,6 +3,7 @@\n \n use std::path::PathBuf;\n \n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -41,7 +42,7 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n@@ -73,7 +74,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx\n-            .output_filenames(LOCAL_CRATE)\n+            .output_filenames(())\n             .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n@@ -125,9 +126,19 @@ fn module_codegen(\n             MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),\n             MonoItem::GlobalAsm(item_id) => {\n                 let item = cx.tcx.hir().item(item_id);\n-                if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n-                    cx.global_asm.push_str(&*asm.as_str());\n-                    cx.global_asm.push_str(\"\\n\\n\");\n+                if let rustc_hir::ItemKind::GlobalAsm(asm) = item.kind {\n+                    if !asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                        cx.global_asm.push_str(\"\\n.intel_syntax noprefix\\n\");\n+                    } else {\n+                        cx.global_asm.push_str(\"\\n.att_syntax\\n\");\n+                    }\n+                    for piece in asm.template {\n+                        match *piece {\n+                            InlineAsmTemplatePiece::String(ref s) => cx.global_asm.push_str(s),\n+                            InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+                        }\n+                    }\n+                    cx.global_asm.push_str(\"\\n.att_syntax\\n\\n\");\n                 } else {\n                     bug!(\"Expected GlobalAsm found {:?}\", item);\n                 }\n@@ -185,7 +196,7 @@ pub(crate) fn run_aot(\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1\n+        tcx.collect_and_partition_mono_items(()).1\n     } else {\n         // If only `--emit metadata` is used, we shouldn't perform any codegen.\n         // Also `tcx.collect_and_partition_mono_items` may panic in that case.\n@@ -271,7 +282,7 @@ pub(crate) fn run_aot(\n                 .to_string();\n \n             let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n+                .output_filenames(())\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n@@ -304,7 +315,7 @@ pub(crate) fn run_aot(\n             metadata_module,\n             metadata,\n             windows_subsystem,\n-            linker_info: LinkerInfo::new(tcx),\n+            linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n             crate_info: CrateInfo::new(tcx),\n         },\n         work_products,\n@@ -348,7 +359,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .join(\"\\n\");\n \n     let output_object_file =\n-        tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(cgu_name));\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "199327a9ff1ce58ee01bd40801c5f624c98776a2", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -66,7 +66,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n \n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n@@ -179,7 +179,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let mut dylib_paths = Vec::new();\n \n     let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let data = &formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)"}, {"sha": "a9475997f7553bb669d0db033d542b2f97a9f446", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -165,7 +165,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        Box::new(crate::metadata::CraneliftMetadataLoader)\n+        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n     }\n \n     fn provide(&self, _providers: &mut Providers) {}\n@@ -218,13 +218,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     ) -> Result<(), ErrorReported> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        let target_cpu = crate::target_triple(sess).to_string();\n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n             sess,\n             &codegen_results,\n             outputs,\n             &codegen_results.crate_name.as_str(),\n-            &target_cpu,\n         );\n \n         Ok(())"}, {"sha": "8fd1e4f5811f5d4f9d26fb6166f7981d5e699117", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     is_jit: bool,\n     is_primary_cgu: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n+    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {"}, {"sha": "ab238244d68d504c983bfff1ffea366fd6eb7c5f", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -1,73 +1,9 @@\n-//! Reading and writing of the rustc metadata for rlibs and dylibs\n+//! Writing of the rustc metadata for dylibs\n \n-use std::fs::File;\n-use std::path::Path;\n-\n-use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::rustc_erase_owner;\n-use rustc_data_structures::sync::MetadataRef;\n-use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_middle::ty::TyCtxt;\n-use rustc_target::spec::Target;\n \n use crate::backend::WriteMetadata;\n \n-/// The metadata loader used by cg_clif.\n-///\n-/// The metadata is stored in the same format as cg_llvm.\n-///\n-/// # Metadata location\n-///\n-/// <dl>\n-/// <dt>rlib</dt>\n-/// <dd>The metadata can be found in the `lib.rmeta` file inside of the ar archive.</dd>\n-/// <dt>dylib</dt>\n-/// <dd>The metadata can be found in the `.rustc` section of the shared library.</dd>\n-/// </dl>\n-pub(crate) struct CraneliftMetadataLoader;\n-\n-fn load_metadata_with(\n-    path: &Path,\n-    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n-    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n-    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n-    let metadata = OwningRef::new(data).try_map(f)?;\n-    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n-}\n-\n-impl MetadataLoader for CraneliftMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        load_metadata_with(path, |data| {\n-            let archive = object::read::archive::ArchiveFile::parse(&*data)\n-                .map_err(|e| format!(\"{:?}\", e))?;\n-\n-            for entry_result in archive.members() {\n-                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-                if entry.name() == METADATA_FILENAME.as_bytes() {\n-                    return Ok(entry.data());\n-                }\n-            }\n-\n-            Err(\"couldn't find metadata entry\".to_string())\n-        })\n-    }\n-\n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        use object::{Object, ObjectSection};\n-\n-        load_metadata_with(path, |data| {\n-            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n-            file.section_by_name(\".rustc\")\n-                .ok_or(\"no .rustc section\")?\n-                .data()\n-                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n-        })\n-    }\n-}\n-\n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O) {\n     use snap::write::FrameEncoder;"}, {"sha": "cd8c5b516083611ee316c93c816c523d29863fa3", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2520c1dcc8c1eb06141404f9b9a19334711d1d/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=8a2520c1dcc8c1eb06141404f9b9a19334711d1d", "patch": "@@ -214,7 +214,7 @@ pub(crate) fn write_ir_file(\n         return;\n     }\n \n-    let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n+    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}"}]}