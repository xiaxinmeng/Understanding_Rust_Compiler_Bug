{"sha": "ac9ba5eb32073c16608acaa04324e7dc46d303d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOWJhNWViMzIwNzNjMTY2MDhhY2FhMDQzMjRlN2RjNDZkMzAzZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T16:06:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T16:06:58Z"}, "message": "Merge #2387\n\n2387: Simplify r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a88c9a76a24787c1eac988f318e938406a288677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88c9a76a24787c1eac988f318e938406a288677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac9ba5eb32073c16608acaa04324e7dc46d303d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2qqiCRBK7hj4Ov3rIwAAdHIIAIcPGHSMPUOdVaKZLLBN7qRM\n07VSEK1b2ew0iqVjRrfA+yMwJSWK72fv8XoL0J+H5V4O1F04+pe9EVOb6Qz2Zmy+\naeCCJxfpylaea2iUkC+ASvulL+5a7lOZitDiEYqGeIcMpgYhmOb4tfUwdDQHwSYx\nbtELv8jOBU0ONbqEXH9EdJ6C5Yoile29oE5tcUf2puL0dk6l5h/0yt4vEwkQiQXg\nlT/YKCwNswc4XoHfMU5m/RAgKXhjBZM1U35Z0IdmH9Z9c8ddHOXOmZapayyyiR0i\njSlB5tB0wO7m5UXTrmNe902+2iN8spiXF3GVkpQANsY62W5faFjBmatkDtB6Sg4=\n=C4yg\n-----END PGP SIGNATURE-----\n", "payload": "tree a88c9a76a24787c1eac988f318e938406a288677\nparent b0581c2403f49c68738c039065fa2cfc41345738\nparent 434f108adad75b7c5e25db745a9f9fefa5cdaa31\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574611618 +0000\ncommitter GitHub <noreply@github.com> 1574611618 +0000\n\nMerge #2387\n\n2387: Simplify r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9ba5eb32073c16608acaa04324e7dc46d303d6", "html_url": "https://github.com/rust-lang/rust/commit/ac9ba5eb32073c16608acaa04324e7dc46d303d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac9ba5eb32073c16608acaa04324e7dc46d303d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0581c2403f49c68738c039065fa2cfc41345738", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0581c2403f49c68738c039065fa2cfc41345738", "html_url": "https://github.com/rust-lang/rust/commit/b0581c2403f49c68738c039065fa2cfc41345738"}, {"sha": "434f108adad75b7c5e25db745a9f9fefa5cdaa31", "url": "https://api.github.com/repos/rust-lang/rust/commits/434f108adad75b7c5e25db745a9f9fefa5cdaa31", "html_url": "https://github.com/rust-lang/rust/commit/434f108adad75b7c5e25db745a9f9fefa5cdaa31"}], "stats": {"total": 170, "additions": 74, "deletions": 96}, "files": [{"sha": "135de7ffb3d5529c992f23b6720ed48051912233", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -109,7 +109,7 @@ pub fn run(\n         }\n         let body = f.body(db);\n         let inference_result = f.infer(db);\n-        for (expr_id, _) in body.exprs() {\n+        for (expr_id, _) in body.exprs.iter() {\n             let ty = &inference_result[expr_id];\n             num_exprs += 1;\n             if let Ty::Unknown = ty {"}, {"sha": "9f06b147cf6287cd5efcfa4c55285845b48b20ed", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -62,7 +62,7 @@ impl Crate {\n     }\n \n     pub fn root_module(self, db: &impl DefDatabase) -> Option<Module> {\n-        let module_id = db.crate_def_map(self.crate_id).root();\n+        let module_id = db.crate_def_map(self.crate_id).root;\n         Some(Module::new(self, module_id))\n     }\n \n@@ -195,7 +195,7 @@ impl Module {\n     /// in the module tree of any target in `Cargo.toml`.\n     pub fn crate_root(self, db: &impl DefDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id.krate);\n-        self.with_module_id(def_map.root())\n+        self.with_module_id(def_map.root)\n     }\n \n     /// Finds a child module with the specified name."}, {"sha": "43fedde7aa056eb69437e747f9d5dd693d2cdcff", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -44,15 +44,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n         let body = self.func.body(db);\n \n-        for e in body.exprs() {\n+        for e in body.exprs.iter() {\n             if let (id, Expr::RecordLit { path, fields, spread }) = e {\n                 self.validate_record_literal(id, path, fields, *spread, db);\n             }\n         }\n \n-        let body_expr = &body[body.body_expr()];\n+        let body_expr = &body[body.body_expr];\n         if let Expr::Block { statements: _, tail: Some(t) } = body_expr {\n-            self.validate_results_in_tail_expr(body.body_expr(), *t, db);\n+            self.validate_results_in_tail_expr(body.body_expr, *t, db);\n         }\n     }\n "}, {"sha": "efee2f658bba7e2e30febe0a4965ae3d968e7a32", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -80,7 +80,7 @@ impl TestDB {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter().next() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for module_id in crate_def_map.modules() {\n+            for (module_id, _) in crate_def_map.modules.iter() {\n                 let module_id = ModuleId { krate, module_id };\n                 let module = crate::Module::from(module_id);\n                 module.diagnostics("}, {"sha": "2e744e5ece0c40947fe7ab588dfa0e66e671ad2c", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -565,7 +565,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        for (type_ref, pat) in data.params.iter().zip(body.params()) {\n+        for (type_ref, pat) in data.params.iter().zip(body.params.iter()) {\n             let ty = self.make_ty(type_ref);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n@@ -574,7 +574,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn infer_body(&mut self) {\n-        self.infer_expr(self.body.body_expr(), &Expectation::has_type(self.return_ty.clone()));\n+        self.infer_expr(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAlias> {"}, {"sha": "a43f553aa43d3dea5a8beaf82a6d369b3afe7060", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -95,7 +95,7 @@ fn lower_enum(\n                 name: var.name().map(|it| it.as_name()),\n                 variant_data: Arc::new(VariantData::new(var.kind())),\n             },\n-        )\n+        );\n     }\n }\n \n@@ -160,7 +160,7 @@ fn lower_struct(\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                     },\n-                )\n+                );\n             }\n             StructKind::Tuple\n         }\n@@ -172,7 +172,7 @@ fn lower_struct(\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                     },\n-                )\n+                );\n             }\n             StructKind::Record\n         }"}, {"sha": "45a36d7935d4ae504d6ca5871b28fcb39b2f1460", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -20,15 +20,15 @@ use crate::{\n     DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n };\n \n-pub struct Expander {\n+struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n     module: ModuleId,\n }\n \n impl Expander {\n-    pub fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n+    fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n         Expander { crate_def_map, current_file_id, hygiene, module }\n@@ -101,17 +101,17 @@ impl Drop for Mark {\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    exprs: Arena<ExprId, Expr>,\n-    pats: Arena<PatId, Pat>,\n+    pub exprs: Arena<ExprId, Expr>,\n+    pub pats: Arena<PatId, Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n     /// the external type of the function).\n     ///\n     /// If this `Body` is for the body of a constant, this will just be\n     /// empty.\n-    params: Vec<PatId>,\n+    pub params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n-    body_expr: ExprId,\n+    pub body_expr: ExprId,\n }\n \n pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n@@ -182,22 +182,6 @@ impl Body {\n     ) -> (Body, BodySourceMap) {\n         lower::lower(db, expander, params, body)\n     }\n-\n-    pub fn params(&self) -> &[PatId] {\n-        &self.params\n-    }\n-\n-    pub fn body_expr(&self) -> ExprId {\n-        self.body_expr\n-    }\n-\n-    pub fn exprs(&self) -> impl Iterator<Item = (ExprId, &Expr)> {\n-        self.exprs.iter()\n-    }\n-\n-    pub fn pats(&self) -> impl Iterator<Item = (PatId, &Pat)> {\n-        self.pats.iter()\n-    }\n }\n \n impl Index<ExprId> for Body {"}, {"sha": "5240a59d5185edd8d7b1e3c58f90943020e76276", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -54,8 +54,8 @@ impl ExprScopes {\n         let mut scopes =\n             ExprScopes { scopes: Arena::default(), scope_by_expr: FxHashMap::default() };\n         let root = scopes.root_scope();\n-        scopes.add_params_bindings(body, root, body.params());\n-        compute_expr_scopes(body.body_expr(), body, &mut scopes, root);\n+        scopes.add_params_bindings(body, root, &body.params);\n+        compute_expr_scopes(body.body_expr, body, &mut scopes, root);\n         scopes\n     }\n "}, {"sha": "f15c23db9df815dab2aa2b0dc89f3162049d8a26", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -39,8 +39,9 @@ impl LangItems {\n         let crate_def_map = db.crate_def_map(krate);\n \n         crate_def_map\n-            .modules()\n-            .filter_map(|module_id| db.module_lang_items(ModuleId { krate, module_id }))\n+            .modules\n+            .iter()\n+            .filter_map(|(module_id, _)| db.module_lang_items(ModuleId { krate, module_id }))\n             .for_each(|it| lang_items.items.extend(it.items.iter().map(|(k, v)| (k.clone(), *v))));\n \n         Arc::new(lang_items)"}, {"sha": "2359386c2806c51ba4e6e0aff9176c1088f75238", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -80,16 +80,16 @@ use crate::{\n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateDefMap {\n-    krate: CrateId,\n-    edition: Edition,\n+    pub root: LocalModuleId,\n+    pub modules: Arena<LocalModuleId, ModuleData>,\n+    pub(crate) krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n     /// a dependency (`std` or `core`).\n-    prelude: Option<ModuleId>,\n-    extern_prelude: FxHashMap<Name, ModuleDefId>,\n-    root: LocalModuleId,\n-    modules: Arena<LocalModuleId, ModuleData>,\n+    pub(crate) prelude: Option<ModuleId>,\n+    pub(crate) extern_prelude: FxHashMap<Name, ModuleDefId>,\n \n+    edition: Edition,\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -229,22 +229,6 @@ impl CrateDefMap {\n         Arc::new(def_map)\n     }\n \n-    pub fn krate(&self) -> CrateId {\n-        self.krate\n-    }\n-\n-    pub fn root(&self) -> LocalModuleId {\n-        self.root\n-    }\n-\n-    pub fn prelude(&self) -> Option<ModuleId> {\n-        self.prelude\n-    }\n-\n-    pub fn extern_prelude(&self) -> &FxHashMap<Name, ModuleDefId> {\n-        &self.extern_prelude\n-    }\n-\n     pub fn add_diagnostics(\n         &self,\n         db: &impl DefDatabase,\n@@ -254,10 +238,6 @@ impl CrateDefMap {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, module, sink))\n     }\n \n-    pub fn modules(&self) -> impl Iterator<Item = LocalModuleId> + '_ {\n-        self.modules.iter().map(|(id, _data)| id)\n-    }\n-\n     pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = LocalModuleId> + '_ {\n         self.modules\n             .iter()"}, {"sha": "41becf8dffd22bab59f4f1563a7721f32a33c01a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -1,4 +1,7 @@\n-//! FIXME: write short doc here\n+//! The core of the module-level name resolution algorithm.\n+//!\n+//! `DefCollector::collect` contains the fixed-point iteration loop which\n+//! resolves imports and expands macros.\n \n use hir_expand::{\n     builtin_macro::find_builtin_macro,"}, {"sha": "401af031cc8feeaf38434b38561840b7e34f4a2e", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -22,7 +22,8 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::Path, FileAstId, HirFileId, LocalImportId, Source,\n+    attr::Attrs, db::DefDatabase, path::Path, trace::Trace, FileAstId, HirFileId, LocalImportId,\n+    Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -48,10 +49,6 @@ pub struct ImportSourceMap {\n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: LocalImportId, ptr: ImportSourcePtr) {\n-        self.map.insert(import, ptr)\n-    }\n-\n     pub fn get(&self, import: LocalImportId) -> ImportSourcePtr {\n         self.map[import].clone()\n     }\n@@ -72,7 +69,7 @@ impl RawItems {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_ast_id_map: db.ast_id_map(file_id),\n-            source_map: ImportSourceMap::default(),\n+            imports: Trace::new(),\n             file_id,\n             hygiene: Hygiene::new(db, file_id),\n         };\n@@ -83,7 +80,11 @@ impl RawItems {\n                 collector.process_module(None, item_list);\n             }\n         }\n-        (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n+        let mut raw_items = collector.raw_items;\n+        let (arena, map) = collector.imports.into_arena_and_map();\n+        raw_items.imports = arena;\n+        let source_map = ImportSourceMap { map };\n+        (Arc::new(raw_items), Arc::new(source_map))\n     }\n \n     pub(super) fn items(&self) -> &[RawItem] {\n@@ -207,8 +208,8 @@ pub(super) struct ImplData {\n \n struct RawItemsCollector {\n     raw_items: RawItems,\n+    imports: Trace<LocalImportId, ImportData, ImportSourcePtr>,\n     source_ast_id_map: Arc<AstIdMap>,\n-    source_map: ImportSourceMap,\n     file_id: HirFileId,\n     hygiene: Hygiene,\n }\n@@ -392,8 +393,7 @@ impl RawItemsCollector {\n         data: ImportData,\n         source: ImportSourcePtr,\n     ) {\n-        let import = self.raw_items.imports.alloc(data);\n-        self.source_map.insert(import, source);\n+        let import = self.imports.alloc(|| source, || data);\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n "}, {"sha": "f502f1cb30e1eb11a0b999c2463e06fac4045c9c", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -25,7 +25,7 @@ fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n \n fn render_crate_def_map(map: &CrateDefMap) -> String {\n     let mut buf = String::new();\n-    go(&mut buf, map, \"\\ncrate\", map.root());\n+    go(&mut buf, map, \"\\ncrate\", map.root);\n     return buf.trim().to_string();\n \n     fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: LocalModuleId) {"}, {"sha": "c24a9b165e616945b70e8f66296c466204f51aa0", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -321,7 +321,7 @@ impl Resolver {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     traits.extend(prelude_def_map[prelude.module_id].scope.traits());\n                 }\n@@ -340,7 +340,7 @@ impl Resolver {\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {\n-        self.module().map(|t| t.0.krate())\n+        self.module().map(|t| t.0.krate)\n     }\n \n     pub fn where_predicates_in_scope<'a>(\n@@ -395,10 +395,10 @@ impl Scope {\n                 m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_)));\n                 });\n-                m.crate_def_map.extern_prelude().iter().for_each(|(name, &def)| {\n+                m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def.into())));\n                 });\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.module_id].scope.entries().for_each(|(name, res)| {\n                         f(name.clone(), ScopeDef::PerNs(res.def));"}, {"sha": "2bcd707bcd3a46901e87e8a55fa78b42681bd839", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9ba5eb32073c16608acaa04324e7dc46d303d6/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=ac9ba5eb32073c16608acaa04324e7dc46d303d6", "patch": "@@ -12,38 +12,48 @@\n use ra_arena::{map::ArenaMap, Arena, ArenaId, RawId};\n \n pub(crate) struct Trace<ID: ArenaId, T, V> {\n-    for_arena: bool,\n-    arena: Arena<ID, T>,\n-    map: ArenaMap<ID, V>,\n+    arena: Option<Arena<ID, T>>,\n+    map: Option<ArenaMap<ID, V>>,\n     len: u32,\n }\n \n-impl<ID: ra_arena::ArenaId, T, V> Trace<ID, T, V> {\n+impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n+    pub(crate) fn new() -> Trace<ID, T, V> {\n+        Trace { arena: Some(Arena::default()), map: Some(ArenaMap::default()), len: 0 }\n+    }\n+\n     pub(crate) fn new_for_arena() -> Trace<ID, T, V> {\n-        Trace { for_arena: true, arena: Arena::default(), map: ArenaMap::default(), len: 0 }\n+        Trace { arena: Some(Arena::default()), map: None, len: 0 }\n     }\n \n     pub(crate) fn new_for_map() -> Trace<ID, T, V> {\n-        Trace { for_arena: false, arena: Arena::default(), map: ArenaMap::default(), len: 0 }\n+        Trace { arena: None, map: Some(ArenaMap::default()), len: 0 }\n     }\n \n-    pub(crate) fn alloc(&mut self, value: impl Fn() -> V, data: impl Fn() -> T) {\n-        if self.for_arena {\n-            self.arena.alloc(data());\n+    pub(crate) fn alloc(&mut self, value: impl FnOnce() -> V, data: impl FnOnce() -> T) -> ID {\n+        let id = if let Some(arena) = &mut self.arena {\n+            arena.alloc(data())\n         } else {\n             let id = ID::from_raw(RawId::from(self.len));\n             self.len += 1;\n-            self.map.insert(id, value());\n+            id\n+        };\n+\n+        if let Some(map) = &mut self.map {\n+            map.insert(id, value());\n         }\n+        id\n+    }\n+\n+    pub(crate) fn into_arena(mut self) -> Arena<ID, T> {\n+        self.arena.take().unwrap()\n     }\n \n-    pub(crate) fn into_arena(self) -> Arena<ID, T> {\n-        assert!(self.for_arena);\n-        self.arena\n+    pub(crate) fn into_map(mut self) -> ArenaMap<ID, V> {\n+        self.map.take().unwrap()\n     }\n \n-    pub(crate) fn into_map(self) -> ArenaMap<ID, V> {\n-        assert!(!self.for_arena);\n-        self.map\n+    pub(crate) fn into_arena_and_map(mut self) -> (Arena<ID, T>, ArenaMap<ID, V>) {\n+        (self.arena.take().unwrap(), self.map.take().unwrap())\n     }\n }"}]}