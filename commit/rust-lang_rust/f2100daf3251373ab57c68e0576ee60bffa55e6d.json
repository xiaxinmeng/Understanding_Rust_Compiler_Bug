{"sha": "f2100daf3251373ab57c68e0576ee60bffa55e6d", "node_id": "C_kwDOAAsO6NoAKGYyMTAwZGFmMzI1MTM3M2FiNTdjNjhlMDU3NmVlNjBiZmZhNTVlNmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-13T03:33:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-13T03:33:13Z"}, "message": "Rollup merge of #96989 - cjgillot:defpath-use, r=davidtwco\n\nBe more precise than DefPathData::Misc.\n\nThis variant was used for two unrelated things. Let's make this cleaner.", "tree": {"sha": "faa017cf86f4d15f69bb9127871cb8aef9e8b920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa017cf86f4d15f69bb9127871cb8aef9e8b920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2100daf3251373ab57c68e0576ee60bffa55e6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifdF6CRBK7hj4Ov3rIwAAtQ4IAGtLbLP43qGhtBjBEc0k5B5C\nRPmpKj+/8YcJTC9V7fhocmIVCpT1fmjuHbHQi82P4G1t2uGhqup0Li2uKIOmyQbw\nvbJU60vWp8bAi8UEwvRsifkZscfL/yLcMMA5d515yE5Ewmdt887ydWwD9XnA1bm6\nyZJgX+dVIQCMVgesXBu715LaEGzITgpjKrTRq1mGMhW3MsEKVv/6WNyshgHFpTS8\njYp2vrL39an4hVIEgYFD0tm4SgMSiN5SUxn/y8I1fzCErH+IjO/hE9sVZ2Qm8f4L\n6uYQbaxRnH6WnVveLbm7JEfCwEKAKJuoSmjNkiTJudxP304JDAc+X7dvxX+z3ss=\n=xSwc\n-----END PGP SIGNATURE-----\n", "payload": "tree faa017cf86f4d15f69bb9127871cb8aef9e8b920\nparent ececa7f79c6b8d3b519e9d6bde953b8710839afc\nparent b7f050958844dbb677411bbee5bf74b0f7b6fcdf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652412793 +0200\ncommitter GitHub <noreply@github.com> 1652412793 +0200\n\nRollup merge of #96989 - cjgillot:defpath-use, r=davidtwco\n\nBe more precise than DefPathData::Misc.\n\nThis variant was used for two unrelated things. Let's make this cleaner.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2100daf3251373ab57c68e0576ee60bffa55e6d", "html_url": "https://github.com/rust-lang/rust/commit/f2100daf3251373ab57c68e0576ee60bffa55e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2100daf3251373ab57c68e0576ee60bffa55e6d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ececa7f79c6b8d3b519e9d6bde953b8710839afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ececa7f79c6b8d3b519e9d6bde953b8710839afc", "html_url": "https://github.com/rust-lang/rust/commit/ececa7f79c6b8d3b519e9d6bde953b8710839afc"}, {"sha": "b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "html_url": "https://github.com/rust-lang/rust/commit/b7f050958844dbb677411bbee5bf74b0f7b6fcdf"}], "stats": {"total": 157, "additions": 116, "deletions": 41}, "files": [{"sha": "5c32dd372dde1c0278b93eeab74ccddf3e118fa3", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -261,14 +261,16 @@ pub enum DefPathData {\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker).\n     CrateRoot,\n-    // Catch-all for random `DefId` things like `DUMMY_NODE_ID`.\n-    Misc,\n \n     // Different kinds of items and item-like things:\n     /// An impl.\n     Impl,\n     /// An `extern` block.\n     ForeignMod,\n+    /// A `use` item.\n+    Use,\n+    /// A global asm item.\n+    GlobalAsm,\n     /// Something in the type namespace.\n     TypeNs(Symbol),\n     /// Something in the value namespace.\n@@ -443,9 +445,8 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            Impl | ForeignMod | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => {\n-                None\n-            }\n+            Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n+            | ImplTrait => None,\n         }\n     }\n \n@@ -459,7 +460,8 @@ impl DefPathData {\n             CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n             Impl => DefPathDataName::Anon { namespace: kw::Impl },\n             ForeignMod => DefPathDataName::Anon { namespace: kw::Extern },\n-            Misc => DefPathDataName::Anon { namespace: sym::misc },\n+            Use => DefPathDataName::Anon { namespace: kw::Use },\n+            GlobalAsm => DefPathDataName::Anon { namespace: sym::global_asm },\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },"}, {"sha": "c4e0ebdc63876c6c17abdb30817577bae1c98ffb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -1994,6 +1994,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n+    /// Look up the name of a definition across crates. This does not look at HIR.\n     fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n         if let Some(cnum) = def_id.as_crate_root() {\n             Some(self.crate_name(cnum))\n@@ -2014,16 +2015,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Look up the name of a definition across crates. This does not look at HIR.\n     ///\n-    /// When possible, this function should be used for cross-crate lookups over\n-    /// [`opt_item_name`] to avoid invalidating the incremental cache. If you\n-    /// need to handle items without a name, or HIR items that will not be\n-    /// serialized cross-crate, or if you need the span of the item, use\n+    /// This method will ICE if the corresponding item does not have a name.  In these cases, use\n     /// [`opt_item_name`] instead.\n     ///\n     /// [`opt_item_name`]: Self::opt_item_name\n     pub fn item_name(self, id: DefId) -> Symbol {\n-        // Look at cross-crate items first to avoid invalidating the incremental cache\n-        // unless we have to.\n         self.opt_item_name(id).unwrap_or_else(|| {\n             bug!(\"item_name: no name for {:?}\", self.def_path(id));\n         })"}, {"sha": "f0861103098d25f802cdd68e3e00c100d614421e", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                 visit::walk_item(self, i);\n                 return self.visit_macro_invoc(i.id);\n             }\n-            ItemKind::GlobalAsm(..) => DefPathData::Misc,\n+            ItemKind::GlobalAsm(..) => DefPathData::GlobalAsm,\n             ItemKind::Use(..) => {\n                 return visit::walk_item(self, i);\n             }\n@@ -160,11 +160,11 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        self.create_def(id, DefPathData::Misc, use_tree.span);\n+        self.create_def(id, DefPathData::Use, use_tree.span);\n         match use_tree.kind {\n             UseTreeKind::Simple(_, id1, id2) => {\n-                self.create_def(id1, DefPathData::Misc, use_tree.prefix.span);\n-                self.create_def(id2, DefPathData::Misc, use_tree.prefix.span);\n+                self.create_def(id1, DefPathData::Use, use_tree.prefix.span);\n+                self.create_def(id2, DefPathData::Use, use_tree.prefix.span);\n             }\n             UseTreeKind::Glob => (),\n             UseTreeKind::Nested(..) => {}"}, {"sha": "e1e14011e52b4f9a0f9c9756ca7451c5fc09f5b5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -788,7 +788,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // These should never show up as `path_append` arguments.\n             DefPathData::CrateRoot\n-            | DefPathData::Misc\n+            | DefPathData::Use\n+            | DefPathData::GlobalAsm\n             | DefPathData::Impl\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {"}, {"sha": "450157e64284f74cac6041918f60cdc3e56e8ccb", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -4,22 +4,55 @@\n   fn g() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:11:8: 11:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-          _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:12:5: 12:6\n-                                           // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         _2 = main;                       // scope 0 at $DIR/cycle.rs:12:5: 12:12\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:12:5: 12:6\n+-                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:12:12: 12:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:11:8: 13:2\n           return;                          // scope 0 at $DIR/cycle.rs:13:2: 13:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "5e2f70799e41e40d86584e3d6c8ba7b8ff6120d7", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -4,22 +4,72 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:16:11: 16:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n++                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n++                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++                     }\n++                 }\n++             }\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-          _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:17:5: 17:6\n-                                           // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         _2 = g;                          // scope 0 at $DIR/cycle.rs:17:5: 17:9\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:17:5: 17:6\n+-                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:17:9: 17:10\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:16:11: 18:2\n           return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n++         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "267f53a8dfe7b4f7b57b6fb1ff6872595b20303a", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -4,20 +4,13 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n+          _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n-+                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "3ad4ed24cf7fc7e09dff18e4a6183dd4160750ff", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h87acd86b3a6f1754E)\n+error: symbol-name(_ZN5basic4main17hcbad207c0eeb0b3bE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h87acd86b3a6f1754)\n+error: demangling(basic::main::hcbad207c0eeb0b3b)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "21bf21ee71c6ff9a3697e87fb38983f7f1a7e9bd", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h8d22952c45e20d65E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h2f2efcf580c9b1eeE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h8d22952c45e20d65)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h2f2efcf580c9b1ee)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "2c9b41eea2abeb28209337b450fc04090669179d", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -7,7 +7,7 @@ trait Trait: SuperTrait<A = <Self as SuperTrait>::B> {}\n \n fn transmute<A, B>(x: A) -> B {\n     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-    //~^ ERROR type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+    //~^ ERROR type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n }\n \n fn foo<A, B, T: ?Sized>(x: T::A) -> B"}, {"sha": "eab42ca568a04b3c24f6c69cb575557d90a1d698", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2100daf3251373ab57c68e0576ee60bffa55e6d/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=f2100daf3251373ab57c68e0576ee60bffa55e6d", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+error[E0271]: type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n   --> $DIR/enforce-supertrait-projection.rs:9:5\n    |\n LL | fn transmute<A, B>(x: A) -> B {"}]}