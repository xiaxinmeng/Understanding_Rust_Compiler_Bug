{"sha": "5c6e2342f61ed9296fafb3781f0a89675a470eb9", "node_id": "C_kwDOAAsO6NoAKDVjNmUyMzQyZjYxZWQ5Mjk2ZmFmYjM3ODFmMGE4OTY3NWE0NzBlYjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-24T01:04:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-08T14:23:19Z"}, "message": "Encode types in SMIR", "tree": {"sha": "4492a9fce86a258bc414453aba546a5ef97944b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4492a9fce86a258bc414453aba546a5ef97944b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c6e2342f61ed9296fafb3781f0a89675a470eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6e2342f61ed9296fafb3781f0a89675a470eb9", "html_url": "https://github.com/rust-lang/rust/commit/5c6e2342f61ed9296fafb3781f0a89675a470eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c6e2342f61ed9296fafb3781f0a89675a470eb9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f74ae57e8e24e87b7177af43db6ec0e8262cd5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f74ae57e8e24e87b7177af43db6ec0e8262cd5d", "html_url": "https://github.com/rust-lang/rust/commit/7f74ae57e8e24e87b7177af43db6ec0e8262cd5d"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "609a04d263c961eabe7092aba59bd1b66544668a", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=5c6e2342f61ed9296fafb3781f0a89675a470eb9", "patch": "@@ -47,5 +47,5 @@ pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {\n }\n \n pub fn run(tcx: TyCtxt<'_>, f: impl FnOnce()) {\n-    crate::stable_mir::run(Tables { tcx, def_ids: vec![] }, f);\n+    crate::stable_mir::run(Tables { tcx, def_ids: vec![], types: vec![] }, f);\n }"}, {"sha": "6af43f5d3f358fe73aed0a4fa5cf913c1d20b30f", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=5c6e2342f61ed9296fafb3781f0a89675a470eb9", "patch": "@@ -7,8 +7,8 @@\n //!\n //! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n \n-use crate::stable_mir::{self, Context};\n-use rustc_middle::ty::TyCtxt;\n+use crate::stable_mir::{self, ty::TyKind, Context};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use tracing::debug;\n \n@@ -34,7 +34,7 @@ impl<'tcx> Context for Tables<'tcx> {\n     fn entry_fn(&mut self) -> Option<stable_mir::CrateItem> {\n         Some(self.crate_item(self.tcx.entry_fn(())?.0))\n     }\n-    fn mir_body(&self, item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n+    fn mir_body(&mut self, item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n         let def_id = self.item_def_id(item);\n         let mir = self.tcx.optimized_mir(def_id);\n         stable_mir::mir::Body {\n@@ -46,17 +46,68 @@ impl<'tcx> Context for Tables<'tcx> {\n                     statements: block.statements.iter().map(rustc_statement_to_statement).collect(),\n                 })\n                 .collect(),\n+            locals: mir.local_decls.iter().map(|decl| self.intern_ty(decl.ty)).collect(),\n         }\n     }\n \n     fn rustc_tables(&mut self, f: &mut dyn FnMut(&mut Tables<'_>)) {\n         f(self)\n     }\n+\n+    fn ty_kind(&mut self, ty: crate::stable_mir::ty::Ty) -> TyKind {\n+        self.rustc_ty_to_ty(self.types[ty.0])\n+    }\n }\n \n pub struct Tables<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub def_ids: Vec<DefId>,\n+    pub types: Vec<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> Tables<'tcx> {\n+    fn rustc_ty_to_ty(&mut self, ty: Ty<'tcx>) -> TyKind {\n+        match ty.kind() {\n+            ty::Bool => TyKind::Bool,\n+            ty::Char => todo!(),\n+            ty::Int(_) => todo!(),\n+            ty::Uint(_) => todo!(),\n+            ty::Float(_) => todo!(),\n+            ty::Adt(_, _) => todo!(),\n+            ty::Foreign(_) => todo!(),\n+            ty::Str => todo!(),\n+            ty::Array(_, _) => todo!(),\n+            ty::Slice(_) => todo!(),\n+            ty::RawPtr(_) => todo!(),\n+            ty::Ref(_, _, _) => todo!(),\n+            ty::FnDef(_, _) => todo!(),\n+            ty::FnPtr(_) => todo!(),\n+            ty::Placeholder(..) => todo!(),\n+            ty::Dynamic(_, _, _) => todo!(),\n+            ty::Closure(_, _) => todo!(),\n+            ty::Generator(_, _, _) => todo!(),\n+            ty::GeneratorWitness(_) => todo!(),\n+            ty::GeneratorWitnessMIR(_, _) => todo!(),\n+            ty::Never => todo!(),\n+            ty::Tuple(fields) => {\n+                TyKind::Tuple(fields.iter().map(|ty| self.intern_ty(ty)).collect())\n+            }\n+            ty::Alias(_, _) => todo!(),\n+            ty::Param(_) => todo!(),\n+            ty::Bound(_, _) => todo!(),\n+            ty::Infer(_) => todo!(),\n+            ty::Error(_) => todo!(),\n+        }\n+    }\n+\n+    fn intern_ty(&mut self, ty: Ty<'tcx>) -> stable_mir::ty::Ty {\n+        if let Some(id) = self.types.iter().position(|&t| t == ty) {\n+            return stable_mir::ty::Ty(id);\n+        }\n+        let id = self.types.len();\n+        self.types.push(ty);\n+        stable_mir::ty::Ty(id)\n+    }\n }\n \n /// Build a stable mir crate from a given crate number."}, {"sha": "6328c35aa5982f563e4c4e127a20ddd35f214228", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=5c6e2342f61ed9296fafb3781f0a89675a470eb9", "patch": "@@ -1,6 +1,9 @@\n+use crate::stable_mir::ty::Ty;\n+\n #[derive(Clone, Debug)]\n pub struct Body {\n     pub blocks: Vec<BasicBlock>,\n+    pub locals: Vec<Ty>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "f27801b0f6caec31947c984b6ca4f3575057b736", "filename": "compiler/rustc_smir/src/stable_mir/ty.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6e2342f61ed9296fafb3781f0a89675a470eb9/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs?ref=5c6e2342f61ed9296fafb3781f0a89675a470eb9", "patch": "@@ -0,0 +1,15 @@\n+use super::with;\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Ty(pub usize);\n+\n+impl Ty {\n+    pub fn kind(&self) -> TyKind {\n+        with(|context| context.ty_kind(*self))\n+    }\n+}\n+\n+pub enum TyKind {\n+    Bool,\n+    Tuple(Vec<Ty>),\n+}"}, {"sha": "a3db2e9ef24c4a2db9e86dd0078b9b3e546e5fa2", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6e2342f61ed9296fafb3781f0a89675a470eb9/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6e2342f61ed9296fafb3781f0a89675a470eb9/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=5c6e2342f61ed9296fafb3781f0a89675a470eb9", "patch": "@@ -40,6 +40,7 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     let bar = get_item(tcx, &items, (DefKind::Fn, \"bar\")).unwrap();\n     let body = bar.body();\n+    assert_eq!(body.locals.len(), 2);\n     assert_eq!(body.blocks.len(), 1);\n     let block = &body.blocks[0];\n     assert_eq!(block.statements.len(), 1);\n@@ -54,6 +55,7 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     let foo_bar = get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).unwrap();\n     let body = foo_bar.body();\n+    assert_eq!(body.locals.len(), 7);\n     assert_eq!(body.blocks.len(), 4);\n     let block = &body.blocks[0];\n     match &block.terminator {"}]}