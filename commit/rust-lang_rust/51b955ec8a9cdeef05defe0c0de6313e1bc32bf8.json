{"sha": "51b955ec8a9cdeef05defe0c0de6313e1bc32bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjk1NWVjOGE5Y2RlZWYwNWRlZmUwYzBkZTYzMTNlMWJjMzJiZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-31T11:54:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-31T12:09:46Z"}, "message": "internal: simplify", "tree": {"sha": "e9fd88535d1177bcb425b283cdf9646da8fa66b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fd88535d1177bcb425b283cdf9646da8fa66b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8", "html_url": "https://github.com/rust-lang/rust/commit/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f70086203b006c31e4a7e70f1b09a25eb8bc34a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70086203b006c31e4a7e70f1b09a25eb8bc34a7", "html_url": "https://github.com/rust-lang/rust/commit/f70086203b006c31e4a7e70f1b09a25eb8bc34a7"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "f982679b640c7a7b12883282c20308d701bea8d0", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b955ec8a9cdeef05defe0c0de6313e1bc32bf8/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=51b955ec8a9cdeef05defe0c0de6313e1bc32bf8", "patch": "@@ -666,42 +666,22 @@ pub fn to_fragment_kind(call: &ast::MacroCall) -> FragmentKind {\n     };\n \n     match parent.kind() {\n-        MACRO_ITEMS | SOURCE_FILE => FragmentKind::Items,\n-        MACRO_STMTS => FragmentKind::Statements,\n+        MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => FragmentKind::Items,\n+        MACRO_STMTS | EXPR_STMT | BLOCK_EXPR => FragmentKind::Statements,\n         MACRO_PAT => FragmentKind::Pattern,\n         MACRO_TYPE => FragmentKind::Type,\n-        ITEM_LIST => FragmentKind::Items,\n+\n+        ARG_LIST | TRY_EXPR | TUPLE_EXPR | PAREN_EXPR | ARRAY_EXPR | FOR_EXPR | PATH_EXPR\n+        | CLOSURE_EXPR | CONDITION | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM\n+        | MATCH_GUARD | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR\n+        | FIELD_EXPR | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR => {\n+            FragmentKind::Expr\n+        }\n         LET_STMT => {\n             // FIXME: Handle LHS Pattern\n             FragmentKind::Expr\n         }\n-        EXPR_STMT => FragmentKind::Statements,\n-        BLOCK_EXPR => FragmentKind::Statements,\n-        ARG_LIST => FragmentKind::Expr,\n-        TRY_EXPR => FragmentKind::Expr,\n-        TUPLE_EXPR => FragmentKind::Expr,\n-        PAREN_EXPR => FragmentKind::Expr,\n-        ARRAY_EXPR => FragmentKind::Expr,\n-        FOR_EXPR => FragmentKind::Expr,\n-        PATH_EXPR => FragmentKind::Expr,\n-        CLOSURE_EXPR => FragmentKind::Expr,\n-        CONDITION => FragmentKind::Expr,\n-        BREAK_EXPR => FragmentKind::Expr,\n-        RETURN_EXPR => FragmentKind::Expr,\n-        MATCH_EXPR => FragmentKind::Expr,\n-        MATCH_ARM => FragmentKind::Expr,\n-        MATCH_GUARD => FragmentKind::Expr,\n-        RECORD_EXPR_FIELD => FragmentKind::Expr,\n-        CALL_EXPR => FragmentKind::Expr,\n-        INDEX_EXPR => FragmentKind::Expr,\n-        METHOD_CALL_EXPR => FragmentKind::Expr,\n-        FIELD_EXPR => FragmentKind::Expr,\n-        AWAIT_EXPR => FragmentKind::Expr,\n-        CAST_EXPR => FragmentKind::Expr,\n-        REF_EXPR => FragmentKind::Expr,\n-        PREFIX_EXPR => FragmentKind::Expr,\n-        RANGE_EXPR => FragmentKind::Expr,\n-        BIN_EXPR => FragmentKind::Expr,\n+\n         _ => {\n             // Unknown , Just guess it is `Items`\n             FragmentKind::Items"}]}