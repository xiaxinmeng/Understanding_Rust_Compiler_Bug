{"sha": "e29149552e2afd1a524d562a910b20b996c31ec7", "node_id": "C_kwDOAAsO6NoAKGUyOTE0OTU1MmUyYWZkMWE1MjRkNTYyYTkxMGIyMGI5OTZjMzFlYzc", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-10-06T14:52:54Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-03-03T12:58:38Z"}, "message": "Add -Z oom={panic,abort} command-line option", "tree": {"sha": "b79df20167c39254725ed988e5cd98c5cb06926b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79df20167c39254725ed988e5cd98c5cb06926b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29149552e2afd1a524d562a910b20b996c31ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29149552e2afd1a524d562a910b20b996c31ec7", "html_url": "https://github.com/rust-lang/rust/commit/e29149552e2afd1a524d562a910b20b996c31ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29149552e2afd1a524d562a910b20b996c31ec7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5cbb87e628d267ecc5c1353c6abba63db02a2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cbb87e628d267ecc5c1353c6abba63db02a2dd", "html_url": "https://github.com/rust-lang/rust/commit/b5cbb87e628d267ecc5c1353c6abba63db02a2dd"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "c3b99b64263f2988585865eba773efbab4b8eb1d", "filename": "src/allocator.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e29149552e2afd1a524d562a910b20b996c31ec7/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29149552e2afd1a524d562a910b20b996c31ec7/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=e29149552e2afd1a524d562a910b20b996c31ec7", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_session::config::OomStrategy;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -18,7 +19,13 @@ pub(crate) fn codegen(\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(module, unwind_context, kind, tcx.lang_items().oom().is_some());\n+        codegen_inner(\n+            module,\n+            unwind_context,\n+            kind,\n+            tcx.lang_items().oom().is_some(),\n+            tcx.sess.opts.debugging_opts.oom,\n+        );\n         true\n     } else {\n         false\n@@ -30,6 +37,7 @@ fn codegen_inner(\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n     has_alloc_error_handler: bool,\n+    oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n@@ -129,4 +137,11 @@ fn codegen_inner(\n     }\n     module.define_function(func_id, &mut ctx).unwrap();\n     unwind_context.add_function(func_id, &ctx, module.isa());\n+\n+    let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.set_align(1);\n+    let val = oom_strategy.should_panic();\n+    data_ctx.define(Box::new([val]));\n+    module.define_data(data_id, &data_ctx).unwrap();\n }"}]}