{"sha": "6ad1a0711631d8017791a6dfe85bbe205d6c7414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZDFhMDcxMTYzMWQ4MDE3NzkxYTZkZmU4NWJiZTIwNWQ2Yzc0MTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-24T23:28:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T23:28:57Z"}, "message": "Merge #3710\n\n3710: Inlay hints for method chaining pattern r=matklad a=M-J-Hooper\n\nThis PR adds inlay hints on method call chains:\r\n![image](https://user-images.githubusercontent.com/13765376/77472008-8dc2a880-6e13-11ea-9c18-2c2e2b809799.png)\r\n\r\nIt is not only explicit `MethodCall`s where this can be helpful. The heuristic used here is that whenever any expression is followed by a new line and then a dot, it resembles a call chain and type information can be  #useful.\r\n\r\nChanges:\r\n- A new `InlayKind` for chaining.\r\n- New option for disabling this type of hints.\r\n- Tree traversal rules for identifying the chaining hints.\r\n- VSCode decorators in the extension layer (and associated types).\r\n\r\nNotes:\r\n- IntelliJ has additional rules and configuration on this topic. Eg. minimum length of chain to start displaying hints and only displaying distinct types in the chain.\r\n- I am checking for chaining on every `ast::Expr` in the tree; Are there performance concerns there?\r\n\r\nThis is my first contribution (to RA and to Rust in general) so would appreciate any feedback.\r\nThe only issue I can find the references this feature is #2741.\n\nCo-authored-by: Matt Hooper <matthewjhooper94@gmail.com>", "tree": {"sha": "ce2d6448ff8770c8fe73086eefb85dab38d298d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2d6448ff8770c8fe73086eefb85dab38d298d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ad1a0711631d8017791a6dfe85bbe205d6c7414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeepe5CRBK7hj4Ov3rIwAAdHIIAHKVvVsIH0c+7PF1gij4pAhp\nWtIqqgrbOhiwjFEz2r+/7Af6WA5k68dv5neFTDlsV59ji/sw1P4qXne6/ka6y/io\nrWtSXoHE6IXdJXeskBQghVVteiiLEzKZq1SJHyyft5N3MeCWNFEKOG9ZFb8Y4XO5\nayF41cDKRslfweT0lFLHTfz1rX+HfNntu6JBI7hPiD8uKPLZ7t4ab3yC8qIorlZG\nh9bPxFiFV0qqIvko5FZrWyx0dYRUA60FlWvq89mDzClrSD83jQshD1Ll9h/SVqH9\n8ZtQr494OJCI41JzCNtH9vD0J3/5MpdTTmTJMKgIzB5aFuETmNsXi9Vjt8TYKLg=\n=NFou\n-----END PGP SIGNATURE-----\n", "payload": "tree ce2d6448ff8770c8fe73086eefb85dab38d298d8\nparent fae627174aecae0b4f4d2c087a856eda1a97a1ac\nparent 7b35da04bf56a5461321a6dca515dcd29f44b57f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585092537 +0000\ncommitter GitHub <noreply@github.com> 1585092537 +0000\n\nMerge #3710\n\n3710: Inlay hints for method chaining pattern r=matklad a=M-J-Hooper\n\nThis PR adds inlay hints on method call chains:\r\n![image](https://user-images.githubusercontent.com/13765376/77472008-8dc2a880-6e13-11ea-9c18-2c2e2b809799.png)\r\n\r\nIt is not only explicit `MethodCall`s where this can be helpful. The heuristic used here is that whenever any expression is followed by a new line and then a dot, it resembles a call chain and type information can be  #useful.\r\n\r\nChanges:\r\n- A new `InlayKind` for chaining.\r\n- New option for disabling this type of hints.\r\n- Tree traversal rules for identifying the chaining hints.\r\n- VSCode decorators in the extension layer (and associated types).\r\n\r\nNotes:\r\n- IntelliJ has additional rules and configuration on this topic. Eg. minimum length of chain to start displaying hints and only displaying distinct types in the chain.\r\n- I am checking for chaining on every `ast::Expr` in the tree; Are there performance concerns there?\r\n\r\nThis is my first contribution (to RA and to Rust in general) so would appreciate any feedback.\r\nThe only issue I can find the references this feature is #2741.\n\nCo-authored-by: Matt Hooper <matthewjhooper94@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad1a0711631d8017791a6dfe85bbe205d6c7414", "html_url": "https://github.com/rust-lang/rust/commit/6ad1a0711631d8017791a6dfe85bbe205d6c7414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ad1a0711631d8017791a6dfe85bbe205d6c7414/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae627174aecae0b4f4d2c087a856eda1a97a1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae627174aecae0b4f4d2c087a856eda1a97a1ac", "html_url": "https://github.com/rust-lang/rust/commit/fae627174aecae0b4f4d2c087a856eda1a97a1ac"}, {"sha": "7b35da04bf56a5461321a6dca515dcd29f44b57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b35da04bf56a5461321a6dca515dcd29f44b57f", "html_url": "https://github.com/rust-lang/rust/commit/7b35da04bf56a5461321a6dca515dcd29f44b57f"}], "stats": {"total": 227, "additions": 218, "deletions": 9}, "files": [{"sha": "f4f0751c051ffe079358a7a38a8c4685ba9090f2", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 171, "deletions": 5, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -5,7 +5,7 @@ use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n-    match_ast, SmolStr, TextRange,\n+    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange,\n };\n \n use crate::{FileId, FunctionSignature};\n@@ -14,19 +14,21 @@ use crate::{FileId, FunctionSignature};\n pub struct InlayHintsOptions {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n+    pub chaining_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n impl Default for InlayHintsOptions {\n     fn default() -> Self {\n-        Self { type_hints: true, parameter_hints: true, max_length: None }\n+        Self { type_hints: true, parameter_hints: true, chaining_hints: true, max_length: None }\n     }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n+    ChainingHint,\n }\n \n #[derive(Debug)]\n@@ -47,6 +49,10 @@ pub(crate) fn inlay_hints(\n \n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            get_chaining_hints(&mut res, &sema, options, expr);\n+        }\n+\n         match_ast! {\n             match node {\n                 ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n@@ -59,6 +65,46 @@ pub(crate) fn inlay_hints(\n     res\n }\n \n+fn get_chaining_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    options: &InlayHintsOptions,\n+    expr: ast::Expr,\n+) -> Option<()> {\n+    if !options.chaining_hints {\n+        return None;\n+    }\n+\n+    let ty = sema.type_of_expr(&expr)?;\n+    if ty.is_unknown() {\n+        return None;\n+    }\n+\n+    let mut tokens = expr\n+        .syntax()\n+        .siblings_with_tokens(Direction::Next)\n+        .filter_map(NodeOrToken::into_token)\n+        .filter(|t| match t.kind() {\n+            SyntaxKind::WHITESPACE if !t.text().contains('\\n') => false,\n+            SyntaxKind::COMMENT => false,\n+            _ => true,\n+        });\n+\n+    // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n+    // Ignoring extra whitespace and comments\n+    let next = tokens.next()?.kind();\n+    let next_next = tokens.next()?.kind();\n+    if next == SyntaxKind::WHITESPACE && next_next == SyntaxKind::DOT {\n+        let label = ty.display_truncated(sema.db, options.max_length).to_string();\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ChainingHint,\n+            label: label.into(),\n+        });\n+    }\n+    Some(())\n+}\n+\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n@@ -238,7 +284,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -262,7 +308,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -274,7 +320,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),\n@@ -1052,4 +1098,124 @@ fn main() {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn chaining_hints_ignore_comments() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            struct A(B);\n+            impl A { fn into_b(self) -> B { self.0 } }\n+            struct B(C);\n+            impl B { fn into_c(self) -> C { self.0 } }\n+            struct C;\n+\n+            fn main() {\n+                let c = A(B(C))\n+                    .into_b() // This is a comment\n+                    .into_c();\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [232; 269),\n+                kind: ChainingHint,\n+                label: \"B\",\n+            },\n+            InlayHint {\n+                range: [232; 239),\n+                kind: ChainingHint,\n+                label: \"A\",\n+            },\n+        ]\"###);\n+    }\n+\n+    #[test]\n+    fn chaining_hints_without_newlines() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            struct A(B);\n+            impl A { fn into_b(self) -> B { self.0 } }\n+            struct B(C);\n+            impl B { fn into_c(self) -> C { self.0 } }\n+            struct C;\n+\n+            fn main() {\n+                let c = A(B(C)).into_b().into_c();\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"[]\"###);\n+    }\n+\n+    #[test]\n+    fn struct_access_chaining_hints() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            struct A { pub b: B }\n+            struct B { pub c: C }\n+            struct C(pub bool);\n+\n+            fn main() {\n+                let x = A { b: B { c: C(true) } }\n+                    .b\n+                    .c\n+                    .0;\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [150; 221),\n+                kind: ChainingHint,\n+                label: \"C\",\n+            },\n+            InlayHint {\n+                range: [150; 198),\n+                kind: ChainingHint,\n+                label: \"B\",\n+            },\n+            InlayHint {\n+                range: [150; 175),\n+                kind: ChainingHint,\n+                label: \"A\",\n+            },\n+        ]\"###);\n+    }\n+\n+    #[test]\n+    fn generic_chaining_hints() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            struct A<T>(T);\n+            struct B<T>(T);\n+            struct C<T>(T);\n+            struct X<T,R>(T, R);\n+\n+            impl<T> A<T> {\n+                fn new(t: T) -> Self { A(t) }\n+                fn into_b(self) -> B<T> { B(self.0) }\n+            }\n+            impl<T> B<T> {\n+                fn into_c(self) -> C<T> { C(self.0) }\n+            }\n+            fn main() {\n+                let c = A::new(X(42, true))\n+                    .into_b()\n+                    .into_c();\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [403; 452),\n+                kind: ChainingHint,\n+                label: \"B<X<i32, bool>>\",\n+            },\n+            InlayHint {\n+                range: [403; 422),\n+                kind: ChainingHint,\n+                label: \"A<X<i32, bool>>\",\n+            },\n+        ]\"###);\n+    }\n }"}, {"sha": "628ed107e99afa0e41ea41219b1cd2e88e24bc68", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -34,6 +34,8 @@ pub struct ServerConfig {\n     pub inlay_hints_type: bool,\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub inlay_hints_parameter: bool,\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub inlay_hints_chaining: bool,\n     pub inlay_hints_max_length: Option<usize>,\n \n     pub cargo_watch_enable: bool,\n@@ -66,6 +68,7 @@ impl Default for ServerConfig {\n             lru_capacity: None,\n             inlay_hints_type: true,\n             inlay_hints_parameter: true,\n+            inlay_hints_chaining: true,\n             inlay_hints_max_length: None,\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),"}, {"sha": "6edc03fe0fe90b5790f2d033107e96760d535c0e", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -332,6 +332,7 @@ impl ConvWith<&LineIndex> for InlayHint {\n             kind: match self.kind {\n                 InlayKind::ParameterHint => req::InlayKind::ParameterHint,\n                 InlayKind::TypeHint => req::InlayKind::TypeHint,\n+                InlayKind::ChainingHint => req::InlayKind::ChainingHint,\n             },\n         }\n     }"}, {"sha": "7825b007798169c9a8464c5adc17db9d6eb7fb56", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -183,6 +183,7 @@ pub fn main_loop(\n                 inlay_hints: InlayHintsOptions {\n                     type_hints: config.inlay_hints_type,\n                     parameter_hints: config.inlay_hints_parameter,\n+                    chaining_hints: config.inlay_hints_chaining,\n                     max_length: config.inlay_hints_max_length,\n                 },\n                 cargo_watch: CheckOptions {"}, {"sha": "8557294f62630179ce02c5c9bf585081d68f0359", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -200,6 +200,7 @@ pub struct InlayHintsParams {\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n+    ChainingHint,\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}, {"sha": "56d2969fd43e480d5a62af28c7c10a3fc8b1609a", "filename": "docs/user/features.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -185,13 +185,15 @@ These contain extended information on the hovered language item.\n Two types of inlay hints are displayed currently:\n \n * type hints, displaying the minimal information on the type of the expression (if the information is available)\n+* method chaining hints, type information for multi-line method chains\n * parameter name hints, displaying the names of the parameters in the corresponding methods\n \n #### VS Code\n \n In VS Code, the following settings can be used to configure the inlay hints:\n \n * `rust-analyzer.inlayHints.typeHints` - enable hints for inferred types.\n+* `rust-analyzer.inlayHints.chainingHints` - enable hints for inferred types on method chains.\n * `rust-analyzer.inlayHints.parameterHints` - enable hints for function parameters.\n * `rust-analyzer.inlayHints.maxLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n "}, {"sha": "37e0832208f4c46dc643553a1bebce2912f29263", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -333,6 +333,11 @@\n                     \"default\": true,\n                     \"description\": \"Whether to show inlay type hints\"\n                 },\n+                \"rust-analyzer.inlayHints.chainingHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to show inlay type hints for method chains\"\n+                },\n                 \"rust-analyzer.inlayHints.parameterHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "98f2f232f4613f5e82624eedbea103e80a20aa5a", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -32,6 +32,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n \n             inlayHintsType: config.inlayHints.typeHints,\n             inlayHintsParameter: config.inlayHints.parameterHints,\n+            inlayHintsChaining: config.inlayHints.chainingHints,\n             inlayHintsMaxLength: config.inlayHints.maxLength,\n \n             cargoWatchEnable: cargoWatchOpts.enable,"}, {"sha": "637aea27dae7c0bf33f57b45c2cdd26bf495f45c", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -88,6 +88,7 @@ export class Config {\n         return {\n             typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n             parameterHints: this.cfg.get<boolean>(\"inlayHints.parameterHints\")!,\n+            chainingHints: this.cfg.get<boolean>(\"inlayHints.chainingHints\")!,\n             maxLength: this.cfg.get<null | number>(\"inlayHints.maxLength\")!,\n         };\n     }"}, {"sha": "542d1f3672bde767efc71fd6f73f18bf70ca127a", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -10,7 +10,11 @@ export function activateInlayHints(ctx: Ctx) {\n     const maybeUpdater = {\n         updater: null as null | HintsUpdater,\n         onConfigChange() {\n-            if (!ctx.config.inlayHints.typeHints && !ctx.config.inlayHints.parameterHints) {\n+            if (\n+                !ctx.config.inlayHints.typeHints &&\n+                !ctx.config.inlayHints.parameterHints &&\n+                !ctx.config.inlayHints.chainingHints\n+            ) {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);\n@@ -63,6 +67,22 @@ const paramHints = {\n     }\n };\n \n+const chainingHints = {\n+    decorationType: vscode.window.createTextEditorDecorationType({\n+        after: {\n+            color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n+            fontStyle: \"normal\",\n+        }\n+    }),\n+\n+    toDecoration(hint: ra.InlayHint.ChainingHint, conv: lc.Protocol2CodeConverter): vscode.DecorationOptions {\n+        return {\n+            range: conv.asRange(hint.range),\n+            renderOptions: { after: { contentText: ` ${hint.label}` } }\n+        };\n+    }\n+};\n+\n class HintsUpdater implements Disposable {\n     private sourceFiles = new Map<string, RustSourceFile>(); // map Uri -> RustSourceFile\n     private readonly disposables: Disposable[] = [];\n@@ -95,7 +115,7 @@ class HintsUpdater implements Disposable {\n \n     dispose() {\n         this.sourceFiles.forEach(file => file.inlaysRequest?.cancel());\n-        this.ctx.visibleRustEditors.forEach(editor => this.renderDecorations(editor, { param: [], type: [] }));\n+        this.ctx.visibleRustEditors.forEach(editor => this.renderDecorations(editor, { param: [], type: [], chaining: [] }));\n         this.disposables.forEach(d => d.dispose());\n     }\n \n@@ -154,10 +174,11 @@ class HintsUpdater implements Disposable {\n     private renderDecorations(editor: RustEditor, decorations: InlaysDecorations) {\n         editor.setDecorations(typeHints.decorationType, decorations.type);\n         editor.setDecorations(paramHints.decorationType, decorations.param);\n+        editor.setDecorations(chainingHints.decorationType, decorations.chaining);\n     }\n \n     private hintsToDecorations(hints: ra.InlayHint[]): InlaysDecorations {\n-        const decorations: InlaysDecorations = { type: [], param: [] };\n+        const decorations: InlaysDecorations = { type: [], param: [], chaining: [] };\n         const conv = this.ctx.client.protocol2CodeConverter;\n \n         for (const hint of hints) {\n@@ -170,6 +191,10 @@ class HintsUpdater implements Disposable {\n                     decorations.param.push(paramHints.toDecoration(hint, conv));\n                     continue;\n                 }\n+                case ra.InlayHint.Kind.ChainingHint: {\n+                    decorations.chaining.push(chainingHints.toDecoration(hint, conv));\n+                    continue;\n+                }\n             }\n         }\n         return decorations;\n@@ -196,6 +221,7 @@ class HintsUpdater implements Disposable {\n interface InlaysDecorations {\n     type: vscode.DecorationOptions[];\n     param: vscode.DecorationOptions[];\n+    chaining: vscode.DecorationOptions[];\n }\n \n interface RustSourceFile {"}, {"sha": "400ac3714544332384a4a684d580ca06ec2f782a", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1a0711631d8017791a6dfe85bbe205d6c7414/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=6ad1a0711631d8017791a6dfe85bbe205d6c7414", "patch": "@@ -86,19 +86,21 @@ export interface Runnable {\n }\n export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n \n-export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint;\n+export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n \n export namespace InlayHint {\n     export const enum Kind {\n         TypeHint = \"TypeHint\",\n         ParamHint = \"ParameterHint\",\n+        ChainingHint = \"ChainingHint\",\n     }\n     interface Common {\n         range: lc.Range;\n         label: string;\n     }\n     export type TypeHint = Common & { kind: Kind.TypeHint };\n     export type ParamHint = Common & { kind: Kind.ParamHint };\n+    export type ChainingHint = Common & { kind: Kind.ChainingHint };\n }\n export interface InlayHintsParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}