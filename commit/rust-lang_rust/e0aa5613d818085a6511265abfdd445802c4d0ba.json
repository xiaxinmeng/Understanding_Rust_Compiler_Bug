{"sha": "e0aa5613d818085a6511265abfdd445802c4d0ba", "node_id": "C_kwDOAAsO6NoAKGUwYWE1NjEzZDgxODA4NWE2NTExMjY1YWJmZGQ0NDU4MDJjNGQwYmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-17T11:39:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-17T11:39:05Z"}, "message": "Rollup merge of #107592 - workingjubilee:use-16-bit-enum-on-16-bit-targets, r=WaffleLapkin\n\nDefault `repr(C)` enums to `c_int` size\n\nThis is what ISO C strongly implies this is correct, and\nmany processor-specific ABIs imply or mandate this size, so\n\"everyone\" (LLVM, gcc...) defaults to emitting enums this way.\nHowever, this is by no means guaranteed by ISO C,\nand the bare-metal Arm targets show it can be overridden,\nwhich rustc supports via `c-enum-min-bits` in a target.json.\n\nThe override is a flag named `-fshort-enums` in clang and gcc,\nbut introducing a CLI flag is probably unnecessary for rustc.\nThis flag can be used by non-Arm microcontroller targets,\nlike AVR and MSP430, but it is not enabled for them by default.\nRust programmers who know the size of a target's enums\ncan use explicit reprs, which also lets them match C23 code.\n\nThis change is most relevant to 16-bit targets: AVR and MSP430.\nMost of rustc's targets use 32-bit ints, but ILP64 does exist.\nRegardless, rustc should now correctly handle enums for\nboth very small and very large targets.\n\nThanks to William for confirming MSP430 behavior,\nand to Waffle for better style and no-core `size_of` asserts.\n\nFixes rust-lang/rust#107361\nFixes rust-lang/rust#77806", "tree": {"sha": "1957ac850ffd87e654022af581ad1282037b4fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1957ac850ffd87e654022af581ad1282037b4fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0aa5613d818085a6511265abfdd445802c4d0ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj72dZCRBK7hj4Ov3rIwAAykYIAH6Yu8JG8ill/TX1uyQkee9s\n4x/xgGgPMn7zP67oMdYXYXGwNERJ1BSuZk9KwRPY4enZ4iNihrgma9s8/Y/4xQ3K\nLo9hSNDDoQpTQw4WOHmLfn46VX4a5+HaXpKPBRzjmaIc7zUn2sPlvd6tu6jfNbDN\nCGCxF+tfRiG0LZ7uTeCnCMB2IZVLIEJOZJpq1GcBGuN//Yycad8H1aGmiPyEMeQE\nQFXyPS2RPLWHZX24EW3ghe8/Qz9k/UL4UDARKhbUsDrsjEA2ANX0D635E3oEkGn5\nfNAGK+cDw9Hxr2LB/mcEa/zyZvxfAwh9Pz3HKYYwMj4uryZHWyFc7olx+FovNrY=\n=VRPx\n-----END PGP SIGNATURE-----\n", "payload": "tree 1957ac850ffd87e654022af581ad1282037b4fc2\nparent b5c8c329a7b4f6a12ae72ae41cb834989228221e\nparent 2edf6c878449294efee45ca5b7f5a921658ff666\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676633945 +0100\ncommitter GitHub <noreply@github.com> 1676633945 +0100\n\nRollup merge of #107592 - workingjubilee:use-16-bit-enum-on-16-bit-targets, r=WaffleLapkin\n\nDefault `repr(C)` enums to `c_int` size\n\nThis is what ISO C strongly implies this is correct, and\nmany processor-specific ABIs imply or mandate this size, so\n\"everyone\" (LLVM, gcc...) defaults to emitting enums this way.\nHowever, this is by no means guaranteed by ISO C,\nand the bare-metal Arm targets show it can be overridden,\nwhich rustc supports via `c-enum-min-bits` in a target.json.\n\nThe override is a flag named `-fshort-enums` in clang and gcc,\nbut introducing a CLI flag is probably unnecessary for rustc.\nThis flag can be used by non-Arm microcontroller targets,\nlike AVR and MSP430, but it is not enabled for them by default.\nRust programmers who know the size of a target's enums\ncan use explicit reprs, which also lets them match C23 code.\n\nThis change is most relevant to 16-bit targets: AVR and MSP430.\nMost of rustc's targets use 32-bit ints, but ILP64 does exist.\nRegardless, rustc should now correctly handle enums for\nboth very small and very large targets.\n\nThanks to William for confirming MSP430 behavior,\nand to Waffle for better style and no-core `size_of` asserts.\n\nFixes rust-lang/rust#107361\nFixes rust-lang/rust#77806\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5613d818085a6511265abfdd445802c4d0ba", "html_url": "https://github.com/rust-lang/rust/commit/e0aa5613d818085a6511265abfdd445802c4d0ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5613d818085a6511265abfdd445802c4d0ba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c8c329a7b4f6a12ae72ae41cb834989228221e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c8c329a7b4f6a12ae72ae41cb834989228221e", "html_url": "https://github.com/rust-lang/rust/commit/b5c8c329a7b4f6a12ae72ae41cb834989228221e"}, {"sha": "2edf6c878449294efee45ca5b7f5a921658ff666", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edf6c878449294efee45ca5b7f5a921658ff666", "html_url": "https://github.com/rust-lang/rust/commit/2edf6c878449294efee45ca5b7f5a921658ff666"}], "stats": {"total": 106, "additions": 81, "deletions": 25}, "files": [{"sha": "aa3a666b0b29c596ade00ff46a4d1a5ab18e3146", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -171,7 +171,9 @@ pub struct TargetDataLayout {\n \n     pub instruction_address_space: AddressSpace,\n \n-    /// Minimum size of #[repr(C)] enums (default I32 bits)\n+    /// Minimum size of #[repr(C)] enums (default c_int::BITS, usually 32)\n+    /// Note: This isn't in LLVM's data layout string, it is `short_enum`\n+    /// so the only valid spec for LLVM is c_int::BITS or 8\n     pub c_enum_min_size: Integer,\n }\n "}, {"sha": "f6f46aac4c391d698422cc73f50c6e66e4668b8f", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "9608efe8bcf60ac5f49808f2587eac3d420c1a6c", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "28b109889e92807935c6428f93f4a2473be896fd", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -49,7 +49,7 @@ pub fn target() -> Target {\n             // from thumb_base, rust-lang/rust#44993.\n             emit_debug_gdb_scripts: false,\n             // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "d59de86a23012c8f4f4bf66c13904721cbba8c2f", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "8cdf3c36ba2ea2a4c4e25abcc6f67cb814b940f0", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n         // GCC and Clang default to 8 for arm-none here\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "5225abf44fca494fecb5b581248fa17788e3fde5", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "9a35e04617f9c71d5759e6bacf8a4408ec4ed91d", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "4c6ab5f5ae45433e60235e1cd5156d5eeb5d94d9", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n     base.has_rpath = true;\n     base.linker_flavor = LinkerFlavor::Unix(Cc::Yes);\n \n-    base.c_enum_min_bits = 8;\n+    base.c_enum_min_bits = Some(8);\n \n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".into(),"}, {"sha": "ef60956a6178aa5eacc919643791cde372e2cf81", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -1344,10 +1344,18 @@ impl Target {\n             });\n         }\n \n-        dl.c_enum_min_size = match Integer::from_size(Size::from_bits(self.c_enum_min_bits)) {\n-            Ok(bits) => bits,\n-            Err(err) => return Err(TargetDataLayoutErrors::InvalidBitsSize { err }),\n-        };\n+        dl.c_enum_min_size = self\n+            .c_enum_min_bits\n+            .map_or_else(\n+                || {\n+                    self.c_int_width\n+                        .parse()\n+                        .map_err(|_| String::from(\"failed to parse c_int_width\"))\n+                },\n+                Ok,\n+            )\n+            .and_then(|i| Integer::from_size(Size::from_bits(i)))\n+            .map_err(|err| TargetDataLayoutErrors::InvalidBitsSize { err })?;\n \n         Ok(dl)\n     }\n@@ -1701,8 +1709,8 @@ pub struct TargetOptions {\n     /// If present it's a default value to use for adjusting the C ABI.\n     pub default_adjusted_cabi: Option<Abi>,\n \n-    /// Minimum number of bits in #[repr(C)] enum. Defaults to 32.\n-    pub c_enum_min_bits: u64,\n+    /// Minimum number of bits in #[repr(C)] enum. Defaults to the size of c_int\n+    pub c_enum_min_bits: Option<u64>,\n \n     /// Whether or not the DWARF `.debug_aranges` section should be generated.\n     pub generate_arange_section: bool,\n@@ -1935,7 +1943,7 @@ impl Default for TargetOptions {\n             supported_split_debuginfo: Cow::Borrowed(&[SplitDebuginfo::Off]),\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n-            c_enum_min_bits: 32,\n+            c_enum_min_bits: None,\n             generate_arange_section: true,\n             supports_stack_protector: true,\n             entry_name: \"main\".into(),\n@@ -2122,12 +2130,6 @@ impl Target {\n                     base.$key_name = s;\n                 }\n             } );\n-            ($key_name:ident, u64) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove(&name).and_then(|j| Json::as_u64(&j)) {\n-                    base.$key_name = s;\n-                }\n-            } );\n             ($key_name:ident, u32) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove(&name).and_then(|b| b.as_u64()) {\n@@ -2496,6 +2498,7 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(c_int_width = \"target-c-int-width\");\n+        key!(c_enum_min_bits, Option<u64>); // if None, matches c_int_width\n         key!(os);\n         key!(env);\n         key!(abi);\n@@ -2591,7 +2594,6 @@ impl Target {\n         key!(supported_split_debuginfo, falliable_list)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n-        key!(c_enum_min_bits, u64);\n         key!(generate_arange_section, bool);\n         key!(supports_stack_protector, bool);\n         key!(entry_name);"}, {"sha": "4dcf47fe465c3144a206d7c0c95b93ba98a3fe4d", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -53,7 +53,7 @@ pub fn opts() -> TargetOptions {\n         frame_pointer: FramePointer::Always,\n         // ARM supports multiple ABIs for enums, the linux one matches the default of 32 here\n         // but any arm-none or thumb-none target will be defaulted to 8 on GCC and clang\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     }\n }"}, {"sha": "e3734932f88553346f0b2afc74aa78f17b176a7c", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -55,7 +55,7 @@ pub fn target() -> Target {\n             // suggested from thumb_base, rust-lang/rust#44993.\n             emit_debug_gdb_scripts: false,\n             // suggested from thumb_base, with no-os gcc/clang use 8-bit enums\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             frame_pointer: FramePointer::MayOmit,\n \n             main_needs_argc_argv: false,"}, {"sha": "2acfde4be46d9b0a579fe1f14a527dd121f06720", "filename": "tests/ui/repr/16-bit-repr-c-enum.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5613d818085a6511265abfdd445802c4d0ba/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5613d818085a6511265abfdd445802c4d0ba/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs?ref=e0aa5613d818085a6511265abfdd445802c4d0ba", "patch": "@@ -0,0 +1,52 @@\n+// build-pass\n+// revisions: avr msp430\n+//\n+// [avr] needs-llvm-components: avr\n+// [avr] compile-flags: --target=avr-unknown-gnu-atmega328 --crate-type=rlib\n+// [msp430] needs-llvm-components: msp430\n+// [msp430] compile-flags: --target=msp430-none-elf --crate-type=rlib\n+#![feature(no_core, lang_items, intrinsics, staged_api)]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+#![stable(feature = \"\", since = \"\")]\n+#![allow(dead_code)]\n+\n+// Test that the repr(C) attribute doesn't break compilation\n+// Previous bad assumption was that 32-bit enum default width is fine on msp430, avr\n+// But the width of the C int on these platforms is 16 bits, and C enums <= C int range\n+// so we want no more than that, usually. This resulted in errors like\n+// \"layout decided on a larger discriminant type (I32) than typeck (I16)\"\n+#[repr(C)]\n+enum Foo {\n+    Bar,\n+}\n+\n+extern \"rust-intrinsic\" {\n+    #[stable(feature = \"\", since = \"\")]\n+    #[rustc_const_stable(feature = \"\", since = \"\")]\n+    #[rustc_safe_intrinsic]\n+    fn size_of<T>() -> usize;\n+}\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+#[lang=\"copy\"]\n+trait Copy {}\n+\n+const EXPECTED: usize = 2;\n+const ACTUAL: usize = size_of::<Foo>();\n+// Validate that the size is indeed 16 bits, to match this C static_assert:\n+/**\n+```c\n+#include <assert.h>\n+enum foo {\n+    BAR\n+};\n+int main(void)\n+{\n+    /* passes on msp430-elf-gcc */\n+    static_assert(sizeof(enum foo) == 2);\n+}\n+```\n+*/\n+const _: [(); EXPECTED] = [(); ACTUAL];"}]}