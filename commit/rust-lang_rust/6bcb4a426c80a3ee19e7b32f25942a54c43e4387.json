{"sha": "6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2I0YTQyNmM4MGEzZWUxOWU3YjMyZjI1OTQyYTU0YzQzZTQzODc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T10:31:48Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T10:31:48Z"}, "message": "Remove last uses of iterators from stdlib\n\nIssue #1056", "tree": {"sha": "c2ee3f9583e18bda30cc62a1a28ac387549e6b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ee3f9583e18bda30cc62a1a28ac387549e6b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "html_url": "https://github.com/rust-lang/rust/commit/6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ebbbe597e44dbed0da3027fbf4e564390e0daeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebbbe597e44dbed0da3027fbf4e564390e0daeb", "html_url": "https://github.com/rust-lang/rust/commit/4ebbbe597e44dbed0da3027fbf4e564390e0daeb"}], "stats": {"total": 103, "additions": 46, "deletions": 57}, "files": [{"sha": "2098e7343978bf883778a3b759164b3b49a668b6", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -137,9 +137,7 @@ fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n \n     let path = [];\n \n-    for each _ in uint::range(start_idx, len1 - 1u) {\n-        path += [\"..\"];\n-    }\n+    uint::range(start_idx, len1 - 1u) {|_i| path += [\"..\"]; };\n \n     path += vec::slice(split2, start_idx, len2 - 1u);\n "}, {"sha": "12ec6ed8860a45210d86af5229cafa888e3fb9a8", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -41,12 +41,12 @@ fn lookup_hash(d: ebml::doc, eq_fn: fn@([u8]) -> bool, hash: uint) ->\n \n     let result: [ebml::doc] = [];\n     let belt = tag_index_buckets_bucket_elt;\n-    for each elt: ebml::doc in ebml::tagged_docs(bucket, belt) {\n+    ebml::tagged_docs(bucket, belt) {|elt|\n         let pos = ebml::be_uint_from_bytes(elt.data, elt.start, 4u);\n         if eq_fn(vec::slice::<u8>(*elt.data, elt.start + 4u, elt.end)) {\n             result += [ebml::doc_at(d.data, pos)];\n         }\n-    }\n+    };\n     ret result;\n }\n \n@@ -111,7 +111,7 @@ fn item_type(item: ebml::doc, this_cnum: ast::crate_num, tcx: ty::ctxt,\n fn item_ty_param_kinds(item: ebml::doc) -> [ast::kind] {\n     let ks: [ast::kind] = [];\n     let tp = tag_items_data_item_ty_param_kinds;\n-    for each p: ebml::doc in ebml::tagged_docs(item, tp) {\n+    ebml::tagged_docs(item, tp) {|p|\n         let dat: [u8] = ebml::doc_data(p);\n         let vi = ebml::vint_at(dat, 0u);\n         let i = 0u;\n@@ -125,18 +125,18 @@ fn item_ty_param_kinds(item: ebml::doc) -> [ast::kind] {\n             ks += [k];\n             i += 1u;\n         }\n-    }\n+    };\n     ret ks;\n }\n \n fn tag_variant_ids(item: ebml::doc, this_cnum: ast::crate_num) ->\n    [ast::def_id] {\n     let ids: [ast::def_id] = [];\n     let v = tag_items_data_item_variant;\n-    for each p: ebml::doc in ebml::tagged_docs(item, v) {\n+    ebml::tagged_docs(item, v) {|p|\n         let ext = parse_def_id(ebml::doc_data(p));\n         ids += [{crate: this_cnum, node: ext.node}];\n-    }\n+    };\n     ret ids;\n }\n \n@@ -300,38 +300,34 @@ fn item_family_to_str(fam: u8) -> str {\n \n fn get_meta_items(md: ebml::doc) -> [@ast::meta_item] {\n     let items: [@ast::meta_item] = [];\n-    for each meta_item_doc: ebml::doc in\n-             ebml::tagged_docs(md, tag_meta_item_word) {\n+    ebml::tagged_docs(md, tag_meta_item_word) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         items += [attr::mk_word_item(n)];\n-    }\n-    for each meta_item_doc: ebml::doc in\n-             ebml::tagged_docs(md, tag_meta_item_name_value) {\n+    };\n+    ebml::tagged_docs(md, tag_meta_item_name_value) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         let vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n         let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         let v = str::unsafe_from_bytes(ebml::doc_data(vd));\n         // FIXME (#611): Should be able to decode meta_name_value variants,\n         // but currently they can't be encoded\n         items += [attr::mk_name_value_item_str(n, v)];\n-    }\n-    for each meta_item_doc: ebml::doc in\n-             ebml::tagged_docs(md, tag_meta_item_list) {\n+    };\n+    ebml::tagged_docs(md, tag_meta_item_list) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         let subitems = get_meta_items(meta_item_doc);\n         items += [attr::mk_list_item(n, subitems)];\n-    }\n+    };\n     ret items;\n }\n \n fn get_attributes(md: ebml::doc) -> [ast::attribute] {\n     let attrs: [ast::attribute] = [];\n     alt ebml::maybe_get_doc(md, tag_attributes) {\n       option::some(attrs_d) {\n-        for each attr_doc: ebml::doc in\n-                 ebml::tagged_docs(attrs_d, tag_attribute) {\n+        ebml::tagged_docs(attrs_d, tag_attribute) {|attr_doc|\n             let meta_items = get_meta_items(attr_doc);\n             // Currently it's only possible to have a single meta item on\n             // an attribute\n@@ -340,7 +336,7 @@ fn get_attributes(md: ebml::doc) -> [ast::attribute] {\n             attrs +=\n                 [{node: {style: ast::attr_outer, value: *meta_item},\n                   span: ast_util::dummy_sp()}];\n-        }\n+        };\n       }\n       option::none. { }\n     }\n@@ -374,11 +370,11 @@ fn get_crate_deps(data: @[u8]) -> [crate_dep] {\n     let cratedoc = ebml::new_doc(data);\n     let depsdoc = ebml::get_doc(cratedoc, tag_crate_deps);\n     let crate_num = 1;\n-    for each depdoc: ebml::doc in ebml::tagged_docs(depsdoc, tag_crate_dep) {\n+    ebml::tagged_docs(depsdoc, tag_crate_dep) {|depdoc|\n         let depname = str::unsafe_from_bytes(ebml::doc_data(depdoc));\n         deps += [{cnum: crate_num, ident: depname}];\n         crate_num += 1;\n-    }\n+    };\n     ret deps;\n }\n \n@@ -398,18 +394,17 @@ fn list_crate_items(bytes: @[u8], md: ebml::doc, out: io::writer) {\n     let items = ebml::get_doc(md, tag_items);\n     let index = ebml::get_doc(paths, tag_index);\n     let bs = ebml::get_doc(index, tag_index_buckets);\n-    for each bucket: ebml::doc in\n-             ebml::tagged_docs(bs, tag_index_buckets_bucket) {\n+    ebml::tagged_docs(bs, tag_index_buckets_bucket) {|bucket|\n         let et = tag_index_buckets_bucket_elt;\n-        for each elt: ebml::doc in ebml::tagged_docs(bucket, et) {\n+        ebml::tagged_docs(bucket, et) {|elt|\n             let data = read_path(elt);\n             let def = ebml::doc_at(bytes, data.pos);\n             let did_doc = ebml::get_doc(def, tag_def_id);\n             let did = parse_def_id(ebml::doc_data(did_doc));\n             out.write_str(#fmt[\"%s (%s)\\n\", data.path,\n                                describe_def(items, did)]);\n-        }\n-    }\n+        };\n+    };\n     out.write_str(\"\\n\");\n }\n "}, {"sha": "96a4edb017ccc839430b6ea7cec13f233d7547ce", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -394,7 +394,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer) ->\n fn create_index<@T>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n    [@[entry<T>]] {\n     let buckets: [@mutable [entry<T>]] = [];\n-    for each i: uint in uint::range(0u, 256u) { buckets += [@mutable []]; }\n+    uint::range(0u, 256u) {|_i| buckets += [@mutable []]; };\n     for elt: entry<T> in index {\n         let h = hash_fn(elt.val);\n         *buckets[h % 256u] += [elt];"}, {"sha": "d9aa57fce2a634980b9953cc11d4b362d097d886", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -5825,15 +5825,15 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n     if uses_retptr { call_args += [bcx.fcx.llretptr]; }\n \n     let arg_n = 2u;\n-    for each i: uint in uint::range(0u, num_ty_param) {\n+    uint::range(0u, num_ty_param) {|_i|\n         let llarg = llvm::LLVMGetParam(fcx.llfn, arg_n);\n         fcx.lltydescs += [llarg];\n         assert (llarg as int != 0);\n         if cast_to_i32 {\n             call_args += [vp2i(bcx, llarg)];\n         } else { call_args += [llarg]; }\n         arg_n += 1u;\n-    }\n+    };\n     fn convert_arg_to_i32(cx: @block_ctxt, v: ValueRef, t: ty::t,\n                           mode: ty::mode) -> ValueRef {\n         if mode == ast::by_ref || mode == ast::by_val {"}, {"sha": "e3a02da9e54f8eb8a08779d92057a79ad50ed7ed", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -198,9 +198,7 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     let lines = [];\n-    for each i: uint in uint::range(lo.line - 1u, hi.line as uint) {\n-        lines += [i];\n-    }\n+    uint::range(lo.line - 1u, hi.line as uint) {|i| lines += [i]; };\n     ret @{name: lo.filename, lines: lines};\n }\n "}, {"sha": "4bbd4118d323fb46b73338db70c085bea6f35804", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -40,12 +40,12 @@ fn process(op: block(uint, uint) -> uint, v0: t, v1: t) -> bool {\n     assert (vec::len(v0.storage) == len);\n     assert (v0.nbits == v1.nbits);\n     let changed = false;\n-    for each i: uint in uint::range(0u, len) {\n+    uint::range(0u, len) {|i|\n         let w0 = v0.storage[i];\n         let w1 = v1.storage[i];\n         let w = op(w0, w1);\n         if w0 != w { changed = true; v0.storage[i] = w; }\n-    }\n+    };\n     ret changed;\n }\n \n@@ -67,7 +67,7 @@ fn assign(v0: t, v1: t) -> bool { let sub = right; ret process(sub, v0, v1); }\n fn clone(v: t) -> t {\n     let storage = vec::init_elt_mut::<uint>(0u, v.nbits / uint_bits() + 1u);\n     let len = vec::len(v.storage);\n-    for each i: uint in uint::range(0u, len) { storage[i] = v.storage[i]; }\n+    uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};\n }\n \n@@ -94,19 +94,17 @@ fn equal(v0: t, v1: t) -> bool {\n }\n \n fn clear(v: t) {\n-    for each i: uint in uint::range(0u, vec::len(v.storage)) {\n-        v.storage[i] = 0u;\n-    }\n+    uint::range(0u, vec::len(v.storage)) {|i| v.storage[i] = 0u; };\n }\n \n fn set_all(v: t) {\n-    for each i: uint in uint::range(0u, v.nbits) { set(v, i, true); }\n+    uint::range(0u, v.nbits) {|i| set(v, i, true); };\n }\n \n fn invert(v: t) {\n-    for each i: uint in uint::range(0u, vec::len(v.storage)) {\n+    uint::range(0u, vec::len(v.storage)) {|i|\n         v.storage[i] = !v.storage[i];\n-    }\n+    };\n }\n \n "}, {"sha": "4a49dd473f402882d60363abf2c18a2e8a9efd14", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -72,25 +72,24 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     }\n }\n \n-iter docs(d: doc) -> {tag: uint, doc: doc} {\n+fn docs(d: doc, it: block(uint, doc)) {\n     let pos = d.start;\n     while pos < d.end {\n         let elt_tag = vint_at(*d.data, pos);\n         let elt_size = vint_at(*d.data, elt_tag.next);\n         pos = elt_size.next + elt_size.val;\n-        put {tag: elt_tag.val,\n-             doc: {data: d.data, start: elt_size.next, end: pos}};\n+        it(elt_tag.val, {data: d.data, start: elt_size.next, end: pos});\n     }\n }\n \n-iter tagged_docs(d: doc, tg: uint) -> doc {\n+fn tagged_docs(d: doc, tg: uint, it: block(doc)) {\n     let pos = d.start;\n     while pos < d.end {\n         let elt_tag = vint_at(*d.data, pos);\n         let elt_size = vint_at(*d.data, elt_tag.next);\n         pos = elt_size.next + elt_size.val;\n         if elt_tag.val == tg {\n-            put {data: d.data, start: elt_size.next, end: pos};\n+            it({data: d.data, start: elt_size.next, end: pos});\n         }\n     }\n }"}, {"sha": "7b08b1d8df3d282889e80dddbab8e77b18d04ca6", "filename": "src/lib/int.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fint.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -43,9 +43,8 @@ fn hash(x: int) -> uint { ret x as uint; }\n \n fn eq_alias(x: int, y: int) -> bool { ret x == y; }\n \n-iter range(lo: int, hi: int) -> int {\n-    let lo_: int = lo;\n-    while lo_ < hi { put lo_; lo_ += 1; }\n+fn range(lo: int, hi: int, it: block(int)) {\n+    while lo < hi { it(lo); lo += 1; }\n }\n \n fn parse_buf(buf: [u8], radix: uint) -> int {"}, {"sha": "b7995a7d97905a10b09e2089a23330f86516a0e9", "filename": "src/lib/u8.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu8.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -23,7 +23,10 @@ pure fn ge(x: u8, y: u8) -> bool { ret x >= y; }\n \n pure fn gt(x: u8, y: u8) -> bool { ret x > y; }\n \n-iter range(lo: u8, hi: u8) -> u8 { while lo < hi { put lo; lo += 1u8; } }\n+fn range(lo: u8, hi: u8, it: block(u8)) {\n+    while lo < hi { it(lo); lo += 1u8; }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "7c93ee7fc72ccf10a81731a342db3b4879038e3a", "filename": "src/lib/uint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -40,9 +40,8 @@ fn max(x: uint, y: uint) -> uint { if x > y { ret x; } ret y; }\n \n fn min(x: uint, y: uint) -> uint { if x > y { ret y; } ret x; }\n \n-iter range(lo: uint, hi: uint) -> uint {\n-    let lo_ = lo;\n-    while lo_ < hi { put lo_; lo_ += 1u; }\n+fn range(lo: uint, hi: uint, it: block(uint)) {\n+    while lo < hi { it(lo); lo += 1u; }\n }\n \n fn next_power_of_two(n: uint) -> uint {"}, {"sha": "af3e31fafed47c30eaa7d6522b6bb52c66070a43", "filename": "src/lib/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcb4a426c80a3ee19e7b32f25942a54c43e4387/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=6bcb4a426c80a3ee19e7b32f25942a54c43e4387", "patch": "@@ -343,9 +343,9 @@ fn eachi<@T>(f: block(T, uint) -> (), v: [mutable? T]) {\n }\n \n // Iterate over a list with with the indexes\n-iter iter2<@T>(v: [T]) -> (uint, T) {\n+fn iter2<@T>(v: [T], it: block(uint, T)) {\n     let i = 0u;\n-    for x in v { put (i, x); i += 1u; }\n+    for x in v { it(i, x); i += 1u; }\n }\n \n mod unsafe {"}]}