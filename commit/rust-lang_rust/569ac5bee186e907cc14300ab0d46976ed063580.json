{"sha": "569ac5bee186e907cc14300ab0d46976ed063580", "node_id": "C_kwDOAAsO6NoAKDU2OWFjNWJlZTE4NmU5MDdjYzE0MzAwYWIwZDQ2OTc2ZWQwNjM1ODA", "commit": {"author": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-22T08:07:26Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-22T08:07:26Z"}, "message": "use find_definition in go to", "tree": {"sha": "a4f27074bda64ef806d6ccc94ba51c5f14b161f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f27074bda64ef806d6ccc94ba51c5f14b161f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569ac5bee186e907cc14300ab0d46976ed063580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569ac5bee186e907cc14300ab0d46976ed063580", "html_url": "https://github.com/rust-lang/rust/commit/569ac5bee186e907cc14300ab0d46976ed063580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569ac5bee186e907cc14300ab0d46976ed063580/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887b7ddc376a94f228cade75d90c38719fe4262b", "url": "https://api.github.com/repos/rust-lang/rust/commits/887b7ddc376a94f228cade75d90c38719fe4262b", "html_url": "https://github.com/rust-lang/rust/commit/887b7ddc376a94f228cade75d90c38719fe4262b"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "c2fdc8dc7cd75d4a8b98d187f59576211ca916d3", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=569ac5bee186e907cc14300ab0d46976ed063580", "patch": "@@ -1,5 +1,11 @@\n use std::{convert::TryInto, iter};\n \n+use crate::hover::find_definition;\n+use crate::{\n+    display::{ToNav, TryToNav},\n+    doc_links::{doc_attributes, extract_definitions_from_docs, resolve_doc_path_for_def},\n+    FilePosition, NavigationTarget, RangeInfo,\n+};\n use either::Either;\n use hir::{AsAssocItem, InFile, ModuleDef, Semantics};\n use ide_db::{\n@@ -11,12 +17,6 @@ use ide_db::{\n use itertools::Itertools;\n use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n-use crate::{\n-    display::{ToNav, TryToNav},\n-    doc_links::{doc_attributes, extract_definitions_from_docs, resolve_doc_path_for_def},\n-    FilePosition, NavigationTarget, RangeInfo,\n-};\n-\n // Feature: Go to Definition\n //\n // Navigates to the definition of an identifier.\n@@ -58,39 +58,22 @@ pub(crate) fn goto_definition(\n         .into_iter()\n         .filter_map(|token| {\n             let parent = token.parent()?;\n-            let navs = match_ast! {\n+            let result = find_definition(&sema, &parent)\n+                .flat_map(|def| {\n+                    try_find_trait_item_definition(sema.db, &def)\n+                        .unwrap_or_else(|| def_to_nav(sema.db, def))\n+                })\n+                .collect::<Vec<_>>();\n+            if !result.is_empty() {\n+                return Some(result);\n+            }\n+            match_ast! {\n                 match parent {\n-                    ast::NameRef(name_ref) => {\n-                        reference_definition(&sema, Either::Right(&name_ref))\n-                    },\n-                    ast::Name(name) => {\n-                        match NameClass::classify(&sema, &name)? {\n-                            NameClass::Definition(def) | NameClass::ConstReference(def) => {\n-                                try_find_trait_item_definition(sema.db, &def)\n-                                    .unwrap_or_else(|| def_to_nav(sema.db, def))\n-                            }\n-                            NameClass::PatFieldShorthand { local_def, field_ref } => {\n-                                local_and_field_to_nav(sema.db, local_def, field_ref)\n-                            },\n-                        }\n-                    },\n-                    ast::Lifetime(lt) => {\n-                        match NameClass::classify_lifetime(&sema, &lt) {\n-                            Some(name_class) => {\n-                                match name_class {\n-                                    NameClass::Definition(def) => def_to_nav(sema.db, def),\n-                                    _ => return None,\n-                                }\n-                            }\n-                            None => reference_definition(&sema, Either::Left(&lt)),\n-                        }\n-                    },\n                     ast::TokenTree(tt) =>\n-                        try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n-                    _ => return None,\n+                        try_lookup_include_path_or_derive(&sema, tt, token, position.file_id),\n+                    _ => None\n                 }\n-            };\n-            Some(navs)\n+            }\n         })\n         .flatten()\n         .unique()"}, {"sha": "a01e272e5354b2a175287f8255629f7680fd0b50", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=569ac5bee186e907cc14300ab0d46976ed063580", "patch": "@@ -1,4 +1,4 @@\n-use std::{collections::HashSet, ops::ControlFlow};\n+use std::{collections::HashSet, iter, ops::ControlFlow};\n \n use either::Either;\n use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n@@ -199,7 +199,7 @@ fn find_hover_result(\n     // so don't add them to the `seen` duplicate check\n     let mut add_to_seen_definitions = true;\n \n-    let definition = find_definition(sema, node).or_else(|| {\n+    let definition = find_definition(sema, node).next().or_else(|| {\n         // intra-doc links\n         // FIXME: move comment + attribute special cases somewhere else to simplify control flow,\n         // hopefully simplifying the return type of this function in the process\n@@ -724,34 +724,51 @@ fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     def.module(db).map(|module| render_path(db, module, definition_owner_name(db, def)))\n }\n \n-pub(crate) fn find_definition(\n-    sema: &Semantics<RootDatabase>,\n+pub(crate) fn find_definition<'a>(\n+    sema: &'a Semantics<RootDatabase>,\n     node: &SyntaxNode,\n-) -> Option<Definition> {\n-    match_ast! {\n-        match node {\n-            ast::Name(name) => NameClass::classify(sema, &name).map(|class| match class {\n-                NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-                NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n-            }),\n-            ast::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref).map(|class| match class {\n-                NameRefClass::Definition(def) => def,\n-                NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n-                    Definition::Field(field_ref)\n-                }\n-            }),\n-            ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n-                || {\n-                    NameRefClass::classify_lifetime(&sema, &lifetime).and_then(|class| match class {\n-                        NameRefClass::Definition(it) => Some(it),\n-                        _ => None,\n-                    })\n+) -> impl Iterator<Item = Definition> + 'a {\n+    iter::once(node.clone()).flat_map(move |node| {\n+        match_ast! {\n+            match node {\n+                ast::Name(name) => {\n+                    let class = if let Some(x) = NameClass::classify(&sema, &name) {\n+                        x\n+                    } else {\n+                        return vec![];\n+                    };\n+                    match class {\n+                        NameClass::Definition(it) | NameClass::ConstReference(it) => vec![it],\n+                        NameClass::PatFieldShorthand { local_def, field_ref } => vec![Definition::Local(local_def), Definition::Field(field_ref)],\n+                    }\n                 },\n-                NameClass::defined,\n-            ),\n-            _ => None,\n+                ast::NameRef(name_ref) => {\n+                    let class = if let Some(x) = NameRefClass::classify(sema, &name_ref) {\n+                        x\n+                    } else {\n+                        return vec![];\n+                    };\n+                    match class {\n+                        NameRefClass::Definition(def) => vec![def],\n+                        NameRefClass::FieldShorthand { local_ref, field_ref } => {\n+                            vec![Definition::Field(field_ref), Definition::Local(local_ref)]\n+                        }\n+                    }\n+                },\n+                ast::Lifetime(lifetime) => {\n+                    (if let Some(x) = NameClass::classify_lifetime(&sema, &lifetime) {\n+                        NameClass::defined(x)\n+                    } else {\n+                        NameRefClass::classify_lifetime(&sema, &lifetime).and_then(|class| match class {\n+                            NameRefClass::Definition(it) => Some(it),\n+                            _ => None,\n+                        })\n+                    }).into_iter().collect()\n+                },\n+                _ => vec![],\n+            }\n         }\n-    }\n+    })\n }\n \n pub(crate) fn hover_for_definition("}, {"sha": "9ea0fe171c3668acc08c10ce980af739a8da622f", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569ac5bee186e907cc14300ab0d46976ed063580/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=569ac5bee186e907cc14300ab0d46976ed063580", "patch": "@@ -35,7 +35,7 @@ mod goto_declaration;\n mod goto_definition;\n mod goto_implementation;\n mod goto_type_definition;\n-mod hover;\n+pub mod hover;\n mod inlay_hints;\n mod join_lines;\n mod markdown_remove;"}]}