{"sha": "ee62514b16b610870e001b14f15e7e71b15e54e7", "node_id": "C_kwDOAAsO6NoAKGVlNjI1MTRiMTZiNjEwODcwZTAwMWIxNGYxNWU3ZTcxYjE1ZTU0ZTc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-18T16:02:32Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "fix rustdoc wrt builtin impls switch", "tree": {"sha": "bfd2796e23aefe2fe38ec675a40c5549c4a4eb61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd2796e23aefe2fe38ec675a40c5549c4a4eb61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee62514b16b610870e001b14f15e7e71b15e54e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee62514b16b610870e001b14f15e7e71b15e54e7", "html_url": "https://github.com/rust-lang/rust/commit/ee62514b16b610870e001b14f15e7e71b15e54e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee62514b16b610870e001b14f15e7e71b15e54e7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6153e8218e70e70f3c5d61adcb78d87d0e89152", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6153e8218e70e70f3c5d61adcb78d87d0e89152", "html_url": "https://github.com/rust-lang/rust/commit/a6153e8218e70e70f3c5d61adcb78d87d0e89152"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "7c5f6d4c62d0b9853f68a5472b7f642a9e82da97", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -1033,11 +1033,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the language items in the given crate.\n-    fn get_lang_items(self) -> impl Iterator<Item = (DefId, usize)> + 'a {\n-        self.root\n-            .lang_items\n-            .decode(self)\n-            .map(move |(def_index, index)| (self.local_def_id(def_index), index))\n+    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n+        tcx.arena.alloc_from_iter(\n+            self.root\n+                .lang_items\n+                .decode(self)\n+                .map(move |(def_index, index)| (self.local_def_id(def_index), index)),\n+        )\n     }\n \n     /// Iterates over the diagnostic items in the given crate.\n@@ -1343,6 +1345,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         })\n     }\n \n+    fn get_all_incoherent_impls(self) -> impl Iterator<Item = DefId> + 'a {\n+        self.cdata\n+            .incoherent_impls\n+            .values()\n+            .flat_map(move |impls| impls.decode(self).map(move |idx| self.local_def_id(idx)))\n+    }\n+\n     fn get_incoherent_impls(self, tcx: TyCtxt<'tcx>, simp: SimplifiedType) -> &'tcx [DefId] {\n         if let Some(impls) = self.cdata.incoherent_impls.get(&simp) {\n             tcx.arena.alloc_from_iter(impls.decode(self).map(|idx| self.local_def_id(idx)))"}, {"sha": "70358ae0e22aafc5f793bbb48ac484f750231e09", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -223,7 +223,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n-    defined_lang_items => { tcx.arena.alloc_from_iter(cdata.get_lang_items()) }\n+    defined_lang_items => { cdata.get_lang_items(tcx) }\n     diagnostic_items => { cdata.get_diagnostic_items() }\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n@@ -523,9 +523,12 @@ impl CStore {\n         self.get_crate_data(cnum).get_inherent_impls()\n     }\n \n-    /// Decodes all lang items in the crate (for rustdoc).\n-    pub fn lang_items_untracked(&self, cnum: CrateNum) -> impl Iterator<Item = DefId> + '_ {\n-        self.get_crate_data(cnum).get_lang_items().map(|(def_id, _)| def_id)\n+    /// Decodes all incoherent inherent impls in the crate (for rustdoc).\n+    pub fn incoherent_impls_in_crate_untracked(\n+        &self,\n+        cnum: CrateNum,\n+    ) -> impl Iterator<Item = DefId> + '_ {\n+        self.get_crate_data(cnum).get_all_incoherent_impls()\n     }\n }\n "}, {"sha": "75e952c5122b8069a72550162dc6a447b2bb4abd", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -113,7 +113,8 @@ impl IntraLinkCrateLoader<'_, '_> {\n                 Vec::from_iter(self.resolver.cstore().trait_impls_in_crate_untracked(cnum));\n             let all_inherent_impls =\n                 Vec::from_iter(self.resolver.cstore().inherent_impls_in_crate_untracked(cnum));\n-            let all_lang_items = Vec::from_iter(self.resolver.cstore().lang_items_untracked(cnum));\n+            let all_incoherent_impls =\n+                Vec::from_iter(self.resolver.cstore().incoherent_impls_in_crate_untracked(cnum));\n \n             // Querying traits in scope is expensive so we try to prune the impl and traits lists\n             // using privacy, private traits and impls from other crates are never documented in\n@@ -137,7 +138,7 @@ impl IntraLinkCrateLoader<'_, '_> {\n                     self.add_traits_in_parent_scope(impl_def_id);\n                 }\n             }\n-            for def_id in all_lang_items {\n+            for def_id in all_incoherent_impls {\n                 self.add_traits_in_parent_scope(def_id);\n             }\n "}, {"sha": "d9a08cb41b82d9b1672d2137cc08661f3843819a", "filename": "src/test/rustdoc/intra-doc/auxiliary/extern-builtin-type-impl-dep.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-builtin-type-impl-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-builtin-type-impl-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-builtin-type-impl-dep.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -1,7 +1,6 @@\n // no-prefer-dynamic\n \n-#![feature(lang_items)]\n-\n+#![feature(lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n #![no_std]\n \n@@ -15,9 +14,9 @@ impl core::ops::Deref for DerefsToF64 {\n }\n \n mod inner {\n-    #[lang = \"f64_runtime\"]\n     impl f64 {\n         /// [f64::clone]\n+        #[rustc_allow_incoherent_impl]\n         pub fn method() {}\n     }\n }", "previous_filename": "src/test/rustdoc/intra-doc/auxiliary/extern-lang-item-impl-dep.rs"}, {"sha": "e22feb03ae6ac2731cbcb4a4bc9330b49e2053bd", "filename": "src/test/rustdoc/intra-doc/auxiliary/my-core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -1,12 +1,12 @@\n-#![feature(no_core, lang_items, rustdoc_internals)]\n+#![feature(no_core, lang_items, rustdoc_internals, rustc_attrs)]\n #![no_core]\n+#![rustc_coherence_is_core]\n #![crate_type=\"rlib\"]\n \n #[doc(primitive = \"char\")]\n /// Some char docs\n mod char {}\n \n-#[lang = \"char\"]\n impl char {\n     pub fn len_utf8(self) -> usize {\n         42"}, {"sha": "7bb1ded3f3c2e152b44d52887533dc06a7e48306", "filename": "src/test/rustdoc/intra-doc/extern-builtin-type-impl.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-builtin-type-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-builtin-type-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-builtin-type-impl.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -2,10 +2,10 @@\n // comments. The doc link points to an associated item, so we check that traits in scope for that\n // link are populated.\n \n-// aux-build:extern-lang-item-impl-dep.rs\n+// aux-build:extern-builtin-type-impl-dep.rs\n \n #![no_std]\n \n-extern crate extern_lang_item_impl_dep;\n+extern crate extern_builtin_type_impl_dep;\n \n-pub use extern_lang_item_impl_dep::DerefsToF64;\n+pub use extern_builtin_type_impl_dep::DerefsToF64;", "previous_filename": "src/test/rustdoc/intra-doc/extern-lang-item-impl.rs"}, {"sha": "79d8df045158fd5a93aa4f1cf68c30362f264d62", "filename": "src/test/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -1,6 +1,7 @@\n #![deny(rustdoc::broken_intra_doc_links)]\n-#![feature(no_core, lang_items, rustdoc_internals)]\n+#![feature(no_core, lang_items, rustc_attrs, rustdoc_internals)]\n #![no_core]\n+#![rustc_coherence_is_core]\n #![crate_type = \"rlib\"]\n \n // @has prim_methods_local/index.html\n@@ -12,7 +13,6 @@\n #[doc(primitive = \"char\")]\n mod char {}\n \n-#[lang = \"char\"]\n impl char {\n     pub fn len_utf8(self) -> usize {\n         42"}, {"sha": "2d2a7908fb187a619c60088af3eb48d7e681d633", "filename": "src/test/rustdoc/issue-23511.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee62514b16b610870e001b14f15e7e71b15e54e7/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=ee62514b16b610870e001b14f15e7e71b15e54e7", "patch": "@@ -1,13 +1,13 @@\n-#![feature(lang_items)]\n+#![feature(rustc_attrs)]\n #![feature(rustdoc_internals)]\n #![no_std]\n \n pub mod str {\n     #![doc(primitive = \"str\")]\n \n-    #[lang = \"str_alloc\"]\n     impl str {\n         // @has search-index.js foo\n+        #[rustc_allow_incoherent_impl]\n         pub fn foo(&self) {}\n     }\n }"}]}