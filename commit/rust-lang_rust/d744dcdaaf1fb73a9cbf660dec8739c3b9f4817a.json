{"sha": "d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDRkY2RhYWYxZmI3M2E5Y2JmNjYwZGVjODczOWMzYjlmNDgxN2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-06-25T21:34:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-06-25T21:34:07Z"}, "message": "find_by_hir_id -> find", "tree": {"sha": "3d6eb1e801f2b1716a00b583e84c9147a18e41b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6eb1e801f2b1716a00b583e84c9147a18e41b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "html_url": "https://github.com/rust-lang/rust/commit/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "html_url": "https://github.com/rust-lang/rust/commit/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "4b87ce7cb9b427dc06fd1bc0e84c67233c460102", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n     ) {\n         // If the method is an impl for a trait, don't warn.\n         let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-        let parent_node = cx.tcx.hir().find_by_hir_id(parent_id);\n+        let parent_node = cx.tcx.hir().find(parent_id);\n \n         if let Some(Node::Item(item)) = parent_node {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.node {\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         let map = &self.cx.tcx.hir();\n         if map.is_argument(map.hir_to_node_id(consume_pat.hir_id)) {\n             // Skip closure arguments\n-            if let Some(Node::Expr(..)) = map.find_by_hir_id(map.get_parent_node(consume_pat.hir_id)) {\n+            if let Some(Node::Expr(..)) = map.find(map.get_parent_node(consume_pat.hir_id)) {\n                 return;\n             }\n             if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             return;\n         }\n         if let Categorization::Rvalue(..) = cmt.cat {\n-            if let Some(Node::Stmt(st)) = map.find_by_hir_id(map.get_parent_node(cmt.hir_id)) {\n+            if let Some(Node::Stmt(st)) = map.find(map.get_parent_node(cmt.hir_id)) {\n                 if let StmtKind::Local(ref loc) = st.node {\n                     if let Some(ref ex) = loc.init {\n                         if let ExprKind::Box(..) = ex.node {"}, {"sha": "2db3a2bc00b7c6efeeeddb06ed7af813d56efbdb", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -180,7 +180,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n         if parent_id == cur_id {\n             break;\n         }\n-        let parent_node = match map.find_by_hir_id(parent_id) {\n+        let parent_node = match map.find(parent_id) {\n             Some(parent) => parent,\n             None => break,\n         };"}, {"sha": "1c72b60b32020f904b399adbd0264bcfe9e43f15", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         let is_impl = if let Some(hir::Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n+            .find(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             matches!(item.node, hir::ItemKind::Impl(_, _, _, _, Some(_), _, _))\n         } else {"}, {"sha": "61bb3e2f82383bbc83b3308858795ea487140ce3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -2219,7 +2219,7 @@ fn is_nested(cx: &LateContext<'_, '_>, match_expr: &Expr, iter_expr: &Expr) -> b\n     if_chain! {\n         if let Some(loop_block) = get_enclosing_block(cx, match_expr.hir_id);\n         let parent_node = cx.tcx.hir().get_parent_node(loop_block.hir_id);\n-        if let Some(Node::Expr(loop_expr)) = cx.tcx.hir().find_by_hir_id(parent_node);\n+        if let Some(Node::Expr(loop_expr)) = cx.tcx.hir().find(parent_node);\n         then {\n             return is_loop_nested(cx, loop_expr, iter_expr)\n         }\n@@ -2239,7 +2239,7 @@ fn is_loop_nested(cx: &LateContext<'_, '_>, loop_expr: &Expr, iter_expr: &Expr)\n         if parent == id {\n             return false;\n         }\n-        match cx.tcx.hir().find_by_hir_id(parent) {\n+        match cx.tcx.hir().find(parent) {\n             Some(Node::Expr(expr)) => match expr.node {\n                 ExprKind::Loop(..) | ExprKind::While(..) => {\n                     return true;"}, {"sha": "1409e9725c3c6adf6e577d4f9151417c2e890e04", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         if let Some(Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n+            .find(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))\n@@ -364,7 +364,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                 }\n                 id = parent;\n \n-                if let Some(node) = self.cx.tcx.hir().find_by_hir_id(id) {\n+                if let Some(node) = self.cx.tcx.hir().find(id) {\n                     match node {\n                         Node::Expr(e) => {\n                             // `match` and `if let`"}, {"sha": "62e4f692ef8ea155d7636d53a194339544acc7f1", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n                 if parent_id == cur_expr.hir_id {\n                     break;\n                 }\n-                if let Some(Node::Expr(parent_expr)) = cx.tcx.hir().find_by_hir_id(parent_id) {\n+                if let Some(Node::Expr(parent_expr)) = cx.tcx.hir().find(parent_id) {\n                     match &parent_expr.node {\n                         ExprKind::AddrOf(..) => {\n                             // `&e` => `e` must be referenced."}, {"sha": "ff49ee952084f940c40ddb27ef65a7bdf76244b7", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, body_id) = item.node {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n-            if let Some(Node::Item(it)) = cx.tcx.hir().find_by_hir_id(parent_item) {\n+            if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n                 if let ItemKind::Impl(_, _, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls\n                 }"}, {"sha": "b3a3b0a658bd967dfbbede6b024b08ae875f297c", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         if let Some(Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n+            .find(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))"}, {"sha": "36a4b699fb6c926c45bd47185b8cbab5ad9f7aaf", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -168,7 +168,7 @@ declare_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROW\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n-        if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_hir_id(cx.tcx.hir().get_parent_item(id)) {\n+        if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.node {\n                 return;\n             }\n@@ -585,7 +585,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n         }\n         if_chain! {\n             let map = &cx.tcx.hir();\n-            let opt_parent_node = map.find_by_hir_id(map.get_parent_node(expr.hir_id));\n+            let opt_parent_node = map.find(map.get_parent_node(expr.hir_id));\n             if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n             if is_questionmark_desugar_marked_call(parent_expr);\n             then {"}, {"sha": "4647058ddfbb8921cae8ccb4c9f4fe472b1376ab", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d744dcdaaf1fb73a9cbf660dec8739c3b9f4817a", "patch": "@@ -404,7 +404,7 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Name> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    match cx.tcx.hir().find_by_hir_id(parent_id) {\n+    match cx.tcx.hir().find(parent_id) {\n         Some(Node::Item(&Item { ref ident, .. })) => Some(ident.name),\n         Some(Node::TraitItem(&TraitItem { ident, .. })) | Some(Node::ImplItem(&ImplItem { ident, .. })) => {\n             Some(ident.name)\n@@ -596,7 +596,7 @@ pub fn get_parent_expr<'c>(cx: &'c LateContext<'_, '_>, e: &Expr) -> Option<&'c\n     if hir_id == parent_id {\n         return None;\n     }\n-    map.find_by_hir_id(parent_id).and_then(|node| {\n+    map.find(parent_id).and_then(|node| {\n         if let Node::Expr(parent) = node {\n             Some(parent)\n         } else {\n@@ -609,7 +609,7 @@ pub fn get_enclosing_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, hir_id: HirId)\n     let map = &cx.tcx.hir();\n     let enclosing_node = map\n         .get_enclosing_scope(hir_id)\n-        .and_then(|enclosing_id| map.find_by_hir_id(enclosing_id));\n+        .and_then(|enclosing_id| map.find(enclosing_id));\n     if let Some(node) = enclosing_node {\n         match node {\n             Node::Block(block) => Some(block),"}]}