{"sha": "3fb03d0650825ba254f67fdd5ac94e83e2622415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjAzZDA2NTA4MjViYTI1NGY2N2ZkZDVhYzk0ZTgzZTI2MjI0MTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-12T06:59:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T21:50:20Z"}, "message": "use MaybeUninit in core::ptr::swap\n\nCode by @japaric, I just split it into individual commits", "tree": {"sha": "865f5af7e264f996295765f38666c77c1545fdee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865f5af7e264f996295765f38666c77c1545fdee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb03d0650825ba254f67fdd5ac94e83e2622415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb03d0650825ba254f67fdd5ac94e83e2622415", "html_url": "https://github.com/rust-lang/rust/commit/3fb03d0650825ba254f67fdd5ac94e83e2622415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb03d0650825ba254f67fdd5ac94e83e2622415/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "html_url": "https://github.com/rust-lang/rust/commit/0bb2e2d6d49c7c148ec19d72a2e844081de9f623"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "5032c112f7cc09c1014a89e0887cc737cb461322", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fb03d0650825ba254f67fdd5ac94e83e2622415/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb03d0650825ba254f67fdd5ac94e83e2622415/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3fb03d0650825ba254f67fdd5ac94e83e2622415", "patch": "@@ -295,17 +295,14 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n-    // Give ourselves some scratch space to work with\n-    let mut tmp: T = mem::uninitialized();\n+    // Give ourselves some scratch space to work with.\n+    // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n \n     // Perform the swap\n-    copy_nonoverlapping(x, &mut tmp, 1);\n+    copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);\n     copy(y, x, 1); // `x` and `y` may overlap\n-    copy_nonoverlapping(&tmp, y, 1);\n-\n-    // y and t now point to the same thing, but we need to completely forget `tmp`\n-    // because it's no longer relevant.\n-    mem::forget(tmp);\n+    copy_nonoverlapping(tmp.get_ref(), y, 1);\n }\n \n /// Swaps `count * size_of::<T>()` bytes between the two regions of memory"}]}