{"sha": "e5872990d13abb088397e23b226439b1b4926b91", "node_id": "C_kwDOAAsO6NoAKGU1ODcyOTkwZDEzYWJiMDg4Mzk3ZTIzYjIyNjQzOWIxYjQ5MjZiOTE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-20T13:52:23Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-20T14:50:59Z"}, "message": "passes: check implied feature exists\n\nAdd a check confirming that features referenced in `implied_by` meta\nitems actually exist.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "a19bcf24a2ac63980e5638db5101d204a0abd81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19bcf24a2ac63980e5638db5101d204a0abd81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5872990d13abb088397e23b226439b1b4926b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5872990d13abb088397e23b226439b1b4926b91", "html_url": "https://github.com/rust-lang/rust/commit/e5872990d13abb088397e23b226439b1b4926b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5872990d13abb088397e23b226439b1b4926b91/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6246d66c6da3064f658831c0ed8162df169a001e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6246d66c6da3064f658831c0ed8162df169a001e", "html_url": "https://github.com/rust-lang/rust/commit/6246d66c6da3064f658831c0ed8162df169a001e"}], "stats": {"total": 90, "additions": 60, "deletions": 30}, "files": [{"sha": "8dc68b1f5a820d415d0e21d696eeaedf3c780000", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=e5872990d13abb088397e23b226439b1b4926b91", "patch": "@@ -3,23 +3,23 @@ pub mod dependency_format;\n pub mod exported_symbols;\n pub mod lang_items;\n pub mod lib_features {\n-    use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-    use rustc_span::symbol::Symbol;\n+    use rustc_data_structures::fx::FxHashMap;\n+    use rustc_span::{symbol::Symbol, Span};\n \n     #[derive(HashStable, Debug)]\n     pub struct LibFeatures {\n-        // A map from feature to stabilisation version.\n-        pub stable: FxHashMap<Symbol, Symbol>,\n-        pub unstable: FxHashSet<Symbol>,\n+        /// A map from feature to stabilisation version.\n+        pub stable: FxHashMap<Symbol, (Symbol, Span)>,\n+        pub unstable: FxHashMap<Symbol, Span>,\n     }\n \n     impl LibFeatures {\n         pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n             let mut all_features: Vec<_> = self\n                 .stable\n                 .iter()\n-                .map(|(f, s)| (*f, Some(*s)))\n-                .chain(self.unstable.iter().map(|f| (*f, None)))\n+                .map(|(f, (s, _))| (*f, Some(*s)))\n+                .chain(self.unstable.iter().map(|(f, _)| (*f, None)))\n                 .collect();\n             all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());\n             all_features"}, {"sha": "e05994f13e4d9b8ef73bc5c8b50ca878cb599636", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=e5872990d13abb088397e23b226439b1b4926b91", "patch": "@@ -71,11 +71,11 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n \n     fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {\n         let already_in_stable = self.lib_features.stable.contains_key(&feature);\n-        let already_in_unstable = self.lib_features.unstable.contains(&feature);\n+        let already_in_unstable = self.lib_features.unstable.contains_key(&feature);\n \n         match (since, already_in_stable, already_in_unstable) {\n             (Some(since), _, false) => {\n-                if let Some(prev_since) = self.lib_features.stable.get(&feature) {\n+                if let Some((prev_since, _)) = self.lib_features.stable.get(&feature) {\n                     if *prev_since != since {\n                         self.span_feature_error(\n                             span,\n@@ -89,10 +89,10 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                     }\n                 }\n \n-                self.lib_features.stable.insert(feature, since);\n+                self.lib_features.stable.insert(feature, (since, span));\n             }\n             (None, false, _) => {\n-                self.lib_features.unstable.insert(feature);\n+                self.lib_features.unstable.insert(feature, span);\n             }\n             (Some(_), _, true) | (None, true, _) => {\n                 self.span_feature_error("}, {"sha": "81b04c414ed9b6c11ba48e8f078310476b359407", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5872990d13abb088397e23b226439b1b4926b91/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=e5872990d13abb088397e23b226439b1b4926b91", "patch": "@@ -3,7 +3,7 @@\n \n use attr::StabilityLevel;\n use rustc_attr::{self as attr, ConstStability, Stability, Unstable};\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -952,40 +952,52 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     remaining_lib_features.remove(&sym::libc);\n     remaining_lib_features.remove(&sym::test);\n \n+    // We always collect the lib features declared in the current crate, even if there are\n+    // no unknown features, because the collection also does feature attribute validation.\n+    let local_defined_features = tcx.lib_features(());\n+    let mut all_lib_features: FxHashMap<_, _> =\n+        local_defined_features.to_vec().iter().map(|el| *el).collect();\n     let mut implications = tcx.stability_implications(rustc_hir::def_id::LOCAL_CRATE).clone();\n     for &cnum in tcx.crates(()) {\n         implications.extend(tcx.stability_implications(cnum));\n+        all_lib_features.extend(tcx.defined_lib_features(cnum).iter().map(|el| *el));\n+    }\n+\n+    // Check that every feature referenced by an `implied_by` exists (for features defined in the\n+    // local crate).\n+    for (implied_by, feature) in tcx.stability_implications(rustc_hir::def_id::LOCAL_CRATE) {\n+        // Only `implied_by` needs to be checked, `feature` is guaranteed to exist.\n+        if !all_lib_features.contains_key(implied_by) {\n+            let span = local_defined_features\n+                .stable\n+                .get(feature)\n+                .map(|(_, span)| span)\n+                .or_else(|| local_defined_features.unstable.get(feature))\n+                .expect(\"feature that implied another does not exist\");\n+            tcx.sess\n+                .struct_span_err(\n+                    *span,\n+                    format!(\"feature `{implied_by}` implying `{feature}` does not exist\"),\n+                )\n+                .emit();\n+        }\n     }\n \n-    let check_features = |remaining_lib_features: &mut FxIndexMap<_, _>, defined_features: &[_]| {\n-        for &(feature, since) in defined_features {\n+    if !remaining_lib_features.is_empty() {\n+        for (feature, since) in all_lib_features.iter() {\n             if let Some(since) = since && let Some(span) = remaining_lib_features.get(&feature) {\n                 // Warn if the user has enabled an already-stable lib feature.\n                 if let Some(implies) = implications.get(&feature) {\n-                    unnecessary_partially_stable_feature_lint(tcx, *span, feature, *implies, since);\n+                    unnecessary_partially_stable_feature_lint(tcx, *span, *feature, *implies, *since);\n                 } else {\n-                    unnecessary_stable_feature_lint(tcx, *span, feature, since);\n+                    unnecessary_stable_feature_lint(tcx, *span, *feature, *since);\n                 }\n             }\n             remaining_lib_features.remove(&feature);\n             if remaining_lib_features.is_empty() {\n                 break;\n             }\n         }\n-    };\n-\n-    // We always collect the lib features declared in the current crate, even if there are\n-    // no unknown features, because the collection also does feature attribute validation.\n-    let local_defined_features = tcx.lib_features(()).to_vec();\n-    if !remaining_lib_features.is_empty() {\n-        check_features(&mut remaining_lib_features, &local_defined_features);\n-\n-        for &cnum in tcx.crates(()) {\n-            if remaining_lib_features.is_empty() {\n-                break;\n-            }\n-            check_features(&mut remaining_lib_features, tcx.defined_lib_features(cnum));\n-        }\n     }\n \n     for (feature, span) in remaining_lib_features {"}, {"sha": "613878536721b3eeda65d59930abcd2c714811b4", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-missing.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5872990d13abb088397e23b226439b1b4926b91/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5872990d13abb088397e23b226439b1b4926b91/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs?ref=e5872990d13abb088397e23b226439b1b4926b91", "patch": "@@ -0,0 +1,10 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+// Tests that `implied_by = \"bar\"` results in an error being emitted if `bar` does not exist.\n+\n+#[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"bar\")]\n+//~^ ERROR feature `bar` implying `foobar` does not exist\n+pub fn foobar() {}\n+\n+fn main() {}"}, {"sha": "ff1856f1763f94573db427224a9fed0c9a000814", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-missing.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5872990d13abb088397e23b226439b1b4926b91/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5872990d13abb088397e23b226439b1b4926b91/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr?ref=e5872990d13abb088397e23b226439b1b4926b91", "patch": "@@ -0,0 +1,8 @@\n+error: feature `bar` implying `foobar` does not exist\n+  --> $DIR/stability-attribute-implies-missing.rs:6:1\n+   |\n+LL | #[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"bar\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}