{"sha": "0ff055ad6640e26a4ddf783682545320de0d1c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjA1NWFkNjY0MGUyNmE0ZGRmNzgzNjgyNTQ1MzIwZGUwZDFjMDM=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-01-15T19:43:14Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-11T17:45:52Z"}, "message": "Pass through diagnostic handler instead", "tree": {"sha": "d918826422bbf9d81d971c87d65af560a8955cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d918826422bbf9d81d971c87d65af560a8955cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff055ad6640e26a4ddf783682545320de0d1c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff055ad6640e26a4ddf783682545320de0d1c03", "html_url": "https://github.com/rust-lang/rust/commit/0ff055ad6640e26a4ddf783682545320de0d1c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff055ad6640e26a4ddf783682545320de0d1c03/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a141c52816b606f01a3eb432ea1c5e1131513d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a141c52816b606f01a3eb432ea1c5e1131513d1c", "html_url": "https://github.com/rust-lang/rust/commit/a141c52816b606f01a3eb432ea1c5e1131513d1c"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "d2e1b3edc3a68e7af6f086f23a00bd9e9047dc41", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=0ff055ad6640e26a4ddf783682545320de0d1c03", "patch": "@@ -237,7 +237,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 } else {\n                     false\n                 };\n-                if reachable || attr::contains_extern_indicator(&item.attrs) {\n+                let is_extern = attr::contains_extern_indicator(&self.tcx.sess.diagnostic(),\n+                                                                &item.attrs);\n+                if reachable || is_extern {\n                     self.reachable_symbols.insert(search_item);\n                 }\n             }"}, {"sha": "8409a0c74b869eb05ea34623345b0feaa498f44e", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0ff055ad6640e26a4ddf783682545320de0d1c03", "patch": "@@ -1586,7 +1586,8 @@ pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt) -> bool {\n     };\n \n     if applicable {\n-        attr::contains_extern_indicator(&get_attributes(item_doc))\n+        attr::contains_extern_indicator(tcx.sess.diagnostic(),\n+                                        &get_attributes(item_doc))\n     } else {\n         false\n     }"}, {"sha": "4748c62921de6f24e4376093d0460f11a97477ff", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0ff055ad6640e26a4ddf783682545320de0d1c03", "patch": "@@ -2727,7 +2727,7 @@ fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         None => {}\n     }\n \n-    match attr::find_export_name_attr(Some(ccx.sess().diagnostic()), attrs) {\n+    match attr::find_export_name_attr(ccx.sess().diagnostic(), attrs) {\n         // Use provided name\n         Some(name) => name.to_string(),\n         _ => {"}, {"sha": "9953947eb52b7c797c2a2a0538a1ddef76fbb602", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff055ad6640e26a4ddf783682545320de0d1c03/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=0ff055ad6640e26a4ddf783682545320de0d1c03", "patch": "@@ -298,16 +298,16 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n }\n \n /// Find the value of #[export_name=*] attribute and check its validity.\n-pub fn find_export_name_attr(diag: Option<&Handler>, attrs: &[Attribute]) -> Option<InternedString> {\n+pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<InternedString> {\n     attrs.iter().fold(None, |ia,attr| {\n         if attr.check_name(\"export_name\") {\n             if let s@Some(_) = attr.value_str() {\n                 s\n             } else {\n-                diag.map(|d| d.struct_span_err(attr.span,\n+                diag.struct_span_err(attr.span,\n                                      \"export_name attribute has invalid format\")\n                     .help(\"use #[export_name=\\\"*\\\"]\")\n-                    .emit());\n+                    .emit();\n                 None\n             }\n         } else {\n@@ -316,9 +316,9 @@ pub fn find_export_name_attr(diag: Option<&Handler>, attrs: &[Attribute]) -> Opt\n     })\n }\n \n-pub fn contains_extern_indicator(attrs: &[Attribute]) -> bool {\n+pub fn contains_extern_indicator(diag: &Handler, attrs: &[Attribute]) -> bool {\n     contains_name(attrs, \"no_mangle\") ||\n-        find_export_name_attr(None, attrs).is_some()\n+        find_export_name_attr(diag, attrs).is_some()\n }\n \n #[derive(Copy, Clone, PartialEq)]"}]}