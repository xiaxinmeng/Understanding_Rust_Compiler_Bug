{"sha": "5cc050b265509c19717e11e12dd785d8c73f5b11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYzA1MGIyNjU1MDljMTk3MTdlMTFlMTJkZDc4NWQ4YzczZjViMTE=", "commit": {"author": {"name": "Grahame Bowland", "email": "grahame@angrygoats.net", "date": "2012-04-03T15:27:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T18:52:27Z"}, "message": "Logfile output from tests; summarise in make check\n\nAdd an optional --logfile argument to std::test::test_main and to\ncompiletest.\n\nUse this features and the new 'check-summary.py' script to\nsummarise all the tests performed by the 'check' target. This is\na short term fix for #2075.", "tree": {"sha": "11e769b6f53a22930f19dbb5796ec130deb129f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e769b6f53a22930f19dbb5796ec130deb129f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cc050b265509c19717e11e12dd785d8c73f5b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc050b265509c19717e11e12dd785d8c73f5b11", "html_url": "https://github.com/rust-lang/rust/commit/5cc050b265509c19717e11e12dd785d8c73f5b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cc050b265509c19717e11e12dd785d8c73f5b11/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aed498842473e58b8123cb57a6e3c8165769fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aed498842473e58b8123cb57a6e3c8165769fb2", "html_url": "https://github.com/rust-lang/rust/commit/3aed498842473e58b8123cb57a6e3c8165769fb2"}], "stats": {"total": 148, "additions": 122, "deletions": 26}, "files": [{"sha": "61dcfe4465b1e68e9a1079ae643fb1f5f1052d20", "filename": "mk/clean.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -31,6 +31,7 @@ clean-misc:\n \t$(Q)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -Rf $(DOCS)\n \t$(Q)rm -Rf $(GENERATED)\n+\t$(Q)rm -f tmp/*.log\n \t$(Q)rm -f rustllvm/$(CFG_RUSTLLVM) rustllvm/rustllvmbits.a\n \t$(Q)rm -f rt/$(CFG_RUNTIME)\n \t$(Q)find rustllvm rt -name '*.[odasS]' -delete"}, {"sha": "a18f2df89d3a644a4c13c13c8dbedf59588ec997", "filename": "mk/tests.mk", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -66,9 +66,11 @@ endif\n # Main test targets\n ######################################################################\n \n-check: tidy all check-stage2 \\\n+check: tidy all check-stage2\n+\t$(S)src/etc/check-summary.py tmp/*.log\n \n-check-full: tidy all check-stage1 check-stage2 check-stage3 \\\n+check-full: tidy all check-stage1 check-stage2 check-stage3\n+\t$(S)src/etc/check-summary.py tmp/*.log\n \n # Run the tidy script in multiple parts to avoid huge 'echo' commands\n ifdef CFG_NOTIDY\n@@ -120,7 +122,6 @@ tidy:\n \t  \t| xargs -n 10 python $(S)src/etc/tidy.py\n endif\n \n-\n ######################################################################\n # Extracting tests for docs\n ######################################################################\n@@ -232,7 +233,8 @@ $(3)/test/coretest.stage$(1)-$(2)$$(X):\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-core-dummy:\t\t\t\\\n \t\t$(3)/test/coretest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n+\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-core.log\n \n # Rules for the standard library test runner\n \n@@ -245,7 +247,8 @@ $(3)/test/stdtest.stage$(1)-$(2)$$(X):\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-std-dummy:\t\t\t\\\n \t\t$(3)/test/stdtest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n+\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-std.log\n \n # Rules for the rustc test runner\n \n@@ -260,7 +263,8 @@ $(3)/test/rustctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-rustc-dummy:\t\t\\\n \t\t$(3)/test/rustctest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)   \\\n+\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rustc.log\n \n # Rules for the rustdoc test runner\n \n@@ -276,7 +280,8 @@ $(3)/test/rustdoctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy:\t\t\\\n \t\t$(3)/test/rustdoctest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n+\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rustdoc.log\n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n@@ -365,87 +370,98 @@ check-stage$(1)-T-$(2)-H-$(3)-cfail-dummy:\t\t\\\n \t        $$(CFAIL_TESTS)\n \t@$$(call E, run cfail: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(CFAIL_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(CFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-cfail.log\n \n check-stage$(1)-T-$(2)-H-$(3)-rfail-dummy:\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t\t$$(RFAIL_TESTS)\n \t@$$(call E, run rfail: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(RFAIL_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(RFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rfail.log\n \n check-stage$(1)-T-$(2)-H-$(3)-rpass-dummy:\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(RPASS_TESTS)\n \t@$$(call E, run rpass: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(RPASS_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(RPASS_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rpass.log\n \n check-stage$(1)-T-$(2)-H-$(3)-bench-dummy:\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t\t$$(BENCH_TESTS)\n \t@$$(call E, run bench: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(BENCH_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(BENCH_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-bench.log\n \n check-stage$(1)-T-$(2)-H-$(3)-perf-dummy:\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(BENCH_TESTS)\n \t@$$(call E, perf: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PERF_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(PERF_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-perf.log\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-dummy:\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(RPASS_TESTS)\n \t@$$(call E, run pretty-rpass: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_RPASS_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(PRETTY_RPASS_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass.log\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-dummy:\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(RFAIL_TESTS)\n \t@$$(call E, run pretty-rfail: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_RFAIL_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(PRETTY_RFAIL_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-rfail.log\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-bench-dummy:\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(BENCH_TESTS)\n \t@$$(call E, run pretty-bench: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_BENCH_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(PRETTY_BENCH_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-bench.log\n \n check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-dummy:\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(PRETTY_TESTS)\n \t@$$(call E, run pretty-pretty: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3))\n+\t\t$$(PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty.log\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-dummy:       \\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n                 doc-tutorial-extract$(3)\n \t@$$(call E, run doc-tutorial: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3))\n+                $$(DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial.log\n \n check-stage$(1)-T-$(2)-H-$(3)-doc-ref-dummy:            \\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n                 doc-ref-extract$(3)\n \t@$$(call E, run doc-ref: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_REF_ARGS$(1)-T-$(2)-H-$(3))\n+                $$(DOC_REF_ARGS$(1)-T-$(2)-H-$(3)) \\\n+\t\t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-doc-ref.log\n \n endef\n \n@@ -489,7 +505,8 @@ $(3)/test/$$(FT_DRIVER)-$(2)$$(X): \\\n $(3)/test/$$(FT_DRIVER)-$(2).out: \\\n \t\t$(3)/test/$$(FT_DRIVER)-$(2)$$(X) \\\n \t\t$$(SREQ2_T_$(2)_H_$(3))\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3))\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) \\\n+\t--logfile tmp/$$(FT_DRIVER)-$(2).log\n \n check-fast-T-$(2)-H-$(3): tidy\t\t\t\\\n \tcheck-stage2-T-$(2)-H-$(3)-rustc\t\\"}, {"sha": "0f68a756ec86eac34939869160ef0d747d707bf7", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -33,6 +33,9 @@ type config = {\n     // Only run tests that match this filter\n     filter: option<str>,\n \n+    // Write out a parseable log of tests that were run\n+    logfile: option<str>,\n+\n     // A command line to prefix program execution with,\n     // for running under valgrind\n     runtool: option<str>,"}, {"sha": "efe5db13d0ac74a5c59e200bb254c87a76c04a3a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -35,7 +35,8 @@ fn parse_config(args: [str]) -> config {\n          getopts::reqopt(\"stage-id\"),\n          getopts::reqopt(\"mode\"), getopts::optflag(\"ignored\"),\n          getopts::optopt(\"runtool\"), getopts::optopt(\"rustcflags\"),\n-         getopts::optflag(\"verbose\")];\n+         getopts::optflag(\"verbose\"),\n+         getopts::optopt(\"logfile\")];\n \n     check (vec::is_not_empty(args));\n     let args_ = vec::tail(args);\n@@ -58,6 +59,7 @@ fn parse_config(args: [str]) -> config {\n              if vec::len(match.free) > 0u {\n                  option::some(match.free[0])\n              } else { option::none },\n+         logfile: getopts::opt_maybe_str(match, \"logfile\"),\n          runtool: getopts::opt_maybe_str(match, \"runtool\"),\n          rustcflags: getopts::opt_maybe_str(match, \"rustcflags\"),\n          verbose: getopts::opt_present(match, \"verbose\")};\n@@ -121,7 +123,13 @@ fn test_opts(config: config) -> test::test_opts {\n            option::some(s) { option::some(s) }\n            option::none { option::none }\n          },\n-     run_ignored: config.run_ignored}\n+     run_ignored: config.run_ignored,\n+     logfile:\n+         alt config.logfile {\n+           option::some(s) { option::some(s) }\n+           option::none { option::none }\n+         }\n+    }\n }\n \n fn make_tests(config: config) -> [test::test_desc] {"}, {"sha": "7c7e807f43c486d1c43dc8d70368389854d15ea1", "filename": "src/etc/check-summary.py", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python\n+\n+import sys\n+\n+if __name__ == '__main__':\n+    summaries = []\n+    def summarise(fname):\n+        summary = {}\n+        fd = open(fname)\n+        for line in fd:\n+            status, test = line.strip().split(' ', 1)\n+            if not summary.has_key(status):\n+                summary[status] = []\n+            summary[status].append(test)\n+        summaries.append((fname, summary))\n+    def count(t):\n+        return sum(map(lambda (f, s): len(s.get(t, [])), summaries))\n+    logfiles = sys.argv[1:]\n+    map(summarise, logfiles)\n+    ok = count('ok')\n+    failed = count('failed')\n+    ignored = count('ignored')\n+    print \"summary of %d test logs: %d passed; %d failed; %d ignored\" % \\\n+            (len(logfiles), ok, failed, ignored)\n+    if failed > 0:\n+        print \"failed tests:\"\n+        for f, s in summaries:\n+            failures = s.get('failed', [])\n+            if len(failures) > 0:\n+                print \"  %s:\" % (f)\n+            for test in failures:\n+                print \"    %s\" % (test)"}, {"sha": "353d57df231614237ef0178ba55f733e55ca3337", "filename": "src/libstd/test.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc050b265509c19717e11e12dd785d8c73f5b11/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=5cc050b265509c19717e11e12dd785d8c73f5b11", "patch": "@@ -57,14 +57,15 @@ fn test_main(args: [str], tests: [test_desc]) {\n     if !run_tests_console(opts, tests) { fail \"Some tests failed\"; }\n }\n \n-type test_opts = {filter: option<str>, run_ignored: bool};\n+type test_opts = {filter: option<str>, run_ignored: bool,\n+    logfile: option<str>};\n \n type opt_res = either<test_opts, str>;\n \n // Parses command line arguments into test options\n fn parse_opts(args: [str]) -> opt_res {\n     let args_ = vec::tail(args);\n-    let opts = [getopts::optflag(\"ignored\")];\n+    let opts = [getopts::optflag(\"ignored\"), getopts::optopt(\"logfile\")];\n     let match =\n         alt getopts::getopts(args_, opts) {\n           ok(m) { m }\n@@ -77,8 +78,10 @@ fn parse_opts(args: [str]) -> opt_res {\n         } else { option::none };\n \n     let run_ignored = getopts::opt_present(match, \"ignored\");\n+    let logfile = getopts::opt_maybe_str(match, \"logfile\");\n \n-    let test_opts = {filter: filter, run_ignored: run_ignored};\n+    let test_opts = {filter: filter, run_ignored: run_ignored,\n+        logfile: logfile};\n \n     ret either::left(test_opts);\n }\n@@ -87,6 +90,7 @@ enum test_result { tr_ok, tr_failed, tr_ignored, }\n \n type console_test_state =\n     @{out: io::writer,\n+      log_out: option<io::writer>,\n       use_color: bool,\n       mut total: uint,\n       mut passed: uint,\n@@ -106,6 +110,12 @@ fn run_tests_console(opts: test_opts,\n           }\n           te_wait(test) { st.out.write_str(#fmt[\"test %s ... \", test.name]); }\n           te_result(test, result) {\n+            alt st.log_out {\n+                some(f) {\n+                    write_log(f, result, test);\n+                }\n+                none {}\n+            }\n             alt result {\n               tr_ok {\n                 st.passed += 1u;\n@@ -128,8 +138,21 @@ fn run_tests_console(opts: test_opts,\n         }\n     }\n \n+    let log_out = alt opts.logfile {\n+        some(path) {\n+            alt io::file_writer(path, [io::create, io::truncate]) {\n+                result::ok(w) { some(w) }\n+                result::err(s) {\n+                    fail(#fmt(\"can't open output file: %s\", s))\n+                }\n+            }\n+        }\n+        none { none }\n+    };\n+\n     let st =\n         @{out: io::stdout(),\n+          log_out: log_out,\n           use_color: use_color(),\n           mut total: 0u,\n           mut passed: 0u,\n@@ -156,6 +179,15 @@ fn run_tests_console(opts: test_opts,\n \n     ret success;\n \n+    fn write_log(out: io::writer, result: test_result, test: test_desc) {\n+        out.write_line(#fmt(\"%s %s\",\n+                    alt result {\n+                        tr_ok { \"ok\" }\n+                        tr_failed { \"failed\" }\n+                        tr_ignored { \"ignored\" }\n+                    }, test.name));\n+    }\n+\n     fn write_ok(out: io::writer, use_color: bool) {\n         write_pretty(out, \"ok\", term::color_green, use_color);\n     }\n@@ -209,6 +241,7 @@ fn should_sort_failures_before_printing_them() {\n \n     let st =\n         @{out: writer,\n+          log_out: option::none,\n           use_color: false,\n           mut total: 0u,\n           mut passed: 0u,\n@@ -466,7 +499,8 @@ mod tests {\n         // When we run ignored tests the test filter should filter out all the\n         // unignored tests and flip the ignore flag on the rest to false\n \n-        let opts = {filter: option::none, run_ignored: true};\n+        let opts = {filter: option::none, run_ignored: true,\n+            logfile: option::none};\n         let tests =\n             [{name: \"1\", fn: fn~() { }, ignore: true, should_fail: false},\n              {name: \"2\", fn: fn~() { }, ignore: false, should_fail: false}];\n@@ -479,7 +513,8 @@ mod tests {\n \n     #[test]\n     fn sort_tests() {\n-        let opts = {filter: option::none, run_ignored: false};\n+        let opts = {filter: option::none, run_ignored: false,\n+            logfile: option::none};\n \n         let names =\n             [\"sha1::test\", \"int::test_to_str\", \"int::test_pow\","}]}