{"sha": "d0fa4c6239accc08aae11d9db3e13d4153add432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmE0YzYyMzlhY2NjMDhhYWUxMWQ5ZGIzZTEzZDQxNTNhZGQ0MzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-04T21:25:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-06T11:48:24Z"}, "message": "Remove the unboxed closure `|:|` notation from types and trait references completely.", "tree": {"sha": "6acb078eaf06ad01af0b2849cba93131f82411ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6acb078eaf06ad01af0b2849cba93131f82411ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0fa4c6239accc08aae11d9db3e13d4153add432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fa4c6239accc08aae11d9db3e13d4153add432", "html_url": "https://github.com/rust-lang/rust/commit/d0fa4c6239accc08aae11d9db3e13d4153add432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0fa4c6239accc08aae11d9db3e13d4153add432/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221edbae3843848047825701e25b6f9d8b096075", "url": "https://api.github.com/repos/rust-lang/rust/commits/221edbae3843848047825701e25b6f9d8b096075", "html_url": "https://github.com/rust-lang/rust/commit/221edbae3843848047825701e25b6f9d8b096075"}], "stats": {"total": 377, "additions": 29, "deletions": 348}, "files": [{"sha": "0420506d00175428353aec8c5fc9dde3e20d3eda", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -40,7 +40,7 @@ use syntax::ast::{TupleVariantKind, Ty, TyBool, TyChar, TyClosure, TyF32};\n use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt};\n use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyProc, TyQPath};\n use syntax::ast::{TyRptr, TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n-use syntax::ast::{TypeImplItem, UnboxedFnTyParamBound, UnnamedField};\n+use syntax::ast::{TypeImplItem, UnnamedField};\n use syntax::ast::{Variant, ViewItem, ViewItemExternCrate};\n use syntax::ast::{ViewItemUse, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::ast::{Visibility};\n@@ -4523,41 +4523,6 @@ impl<'a> Resolver<'a> {\n             TraitTyParamBound(ref tref) => {\n                 self.resolve_trait_reference(id, tref, reference_type)\n             }\n-            UnboxedFnTyParamBound(ref unboxed_function) => {\n-                match self.resolve_path(unboxed_function.ref_id,\n-                                        &unboxed_function.path,\n-                                        TypeNS,\n-                                        true) {\n-                    None => {\n-                        let path_str = self.path_names_to_string(\n-                            &unboxed_function.path);\n-                        self.resolve_error(unboxed_function.path.span,\n-                                           format!(\"unresolved trait `{}`\",\n-                                                   path_str).as_slice())\n-                    }\n-                    Some(def) => {\n-                        match def {\n-                            (DefTrait(_), _) => {\n-                                self.record_def(unboxed_function.ref_id, def);\n-                            }\n-                            _ => {\n-                                let msg =\n-                                    format!(\"`{}` is not a trait\",\n-                                            self.path_names_to_string(\n-                                                &unboxed_function.path));\n-                                self.resolve_error(unboxed_function.path.span,\n-                                                   msg.as_slice());\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                for argument in unboxed_function.decl.inputs.iter() {\n-                    self.resolve_type(&*argument.ty);\n-                }\n-\n-                self.resolve_type(&*unboxed_function.decl.output);\n-            }\n             RegionTyParamBound(..) => {}\n         }\n     }"}, {"sha": "8246970c24ad7695ad37943603cbbdb42ed2930a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -204,9 +204,6 @@ impl<'a> LifetimeContext<'a> {\n                 ast::TraitTyParamBound(ref trait_ref) => {\n                     self.visit_trait_ref(trait_ref);\n                 }\n-                ast::UnboxedFnTyParamBound(ref fn_decl) => {\n-                    self.visit_unboxed_fn_ty_param_bound(&**fn_decl);\n-                }\n                 ast::RegionTyParamBound(ref lifetime) => {\n                     self.visit_lifetime_ref(lifetime);\n                 }\n@@ -226,18 +223,6 @@ impl<'a> LifetimeContext<'a> {\n         })\n     }\n \n-    fn visit_unboxed_fn_ty_param_bound(&mut self,\n-                                       bound: &ast::UnboxedFnBound) {\n-        self.with(|scope, f| {\n-            f(LateScope(bound.ref_id, &bound.lifetimes, scope))\n-        }, |v| {\n-            for argument in bound.decl.inputs.iter() {\n-                v.visit_ty(&*argument.ty);\n-            }\n-            v.visit_ty(&*bound.decl.output);\n-        })\n-    }\n-\n     /// Visits self by adding a scope and handling recursive walk over the contents with `walk`.\n     fn visit_fn_decl(&mut self,\n                      n: ast::NodeId,"}, {"sha": "b64a160ab1f28c915aab829310be1bf3fa21d981", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -705,7 +705,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 ast::TraitTyParamBound(ref trait_ref) => {\n                     trait_ref\n                 }\n-                ast::UnboxedFnTyParamBound(..) | ast::RegionTyParamBound(..) => {\n+                ast::RegionTyParamBound(..) => {\n                     continue;\n                 }\n             };"}, {"sha": "05d315e5fec32cbdfa64681b7e56526f16d43184", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -620,15 +620,6 @@ enum PointerTy {\n     Uniq\n }\n \n-impl PointerTy {\n-    fn default_region(&self) -> ty::Region {\n-        match *self {\n-            Uniq => ty::ReStatic,\n-            RPtr(r) => r,\n-        }\n-    }\n-}\n-\n pub fn trait_ref_for_unboxed_function<'tcx, AC: AstConv<'tcx>,\n                                       RS:RegionScope>(\n                                       this: &AC,\n@@ -687,31 +678,6 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n             let ty = ast_ty_to_ty(this, rscope, &**ty);\n             return constr(ty::mk_vec(tcx, ty, None));\n         }\n-        ast::TyUnboxedFn(ref unboxed_function) => {\n-            let ty::TraitRef {\n-                def_id,\n-                substs\n-            } = trait_ref_for_unboxed_function(this,\n-                                               rscope,\n-                                               unboxed_function.kind,\n-                                               &*unboxed_function.decl,\n-                                               None);\n-            let r = ptr_ty.default_region();\n-            let tr = ty::mk_trait(this.tcx(),\n-                                  def_id,\n-                                  substs,\n-                                  ty::region_existential_bound(r));\n-            match ptr_ty {\n-                Uniq => {\n-                    return ty::mk_uniq(this.tcx(), tr);\n-                }\n-                RPtr(r) => {\n-                    return ty::mk_rptr(this.tcx(),\n-                                       r,\n-                                       ty::mt {mutbl: a_seq_mutbl, ty: tr});\n-                }\n-            }\n-        }\n         ast::TyPath(ref path, ref opt_bounds, id) => {\n             // Note that the \"bounds must be empty if path is not a trait\"\n             // restriction is enforced in the below case for ty_path, which\n@@ -941,11 +907,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n \n                 ty::mk_closure(tcx, fn_decl)\n             }\n-            ast::TyUnboxedFn(..) => {\n-                tcx.sess.span_err(ast_ty.span,\n-                                  \"cannot use unboxed functions here\");\n-                ty::mk_err()\n-            }\n             ast::TyPath(ref path, ref bounds, id) => {\n                 let a_def = match tcx.def_map.borrow().find(&id) {\n                     None => {\n@@ -1425,8 +1386,7 @@ pub fn conv_existential_bounds<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n \n     let PartitionedBounds { builtin_bounds,\n                             trait_bounds,\n-                            region_bounds,\n-                            unboxed_fn_ty_bounds } =\n+                            region_bounds } =\n         partition_bounds(this.tcx(), span, ast_bound_refs.as_slice());\n \n     if !trait_bounds.is_empty() {\n@@ -1437,13 +1397,6 @@ pub fn conv_existential_bounds<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n                      as closure or object bounds\").as_slice());\n     }\n \n-    if !unboxed_fn_ty_bounds.is_empty() {\n-        this.tcx().sess.span_err(\n-            span,\n-            format!(\"only the builtin traits can be used \\\n-                     as closure or object bounds\").as_slice());\n-    }\n-\n     // The \"main trait refs\", rather annoyingly, have no type\n     // specified for the `Self` parameter of the trait. The reason for\n     // this is that they are, after all, *existential* types, and\n@@ -1572,7 +1525,6 @@ fn compute_region_bound<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n pub struct PartitionedBounds<'a> {\n     pub builtin_bounds: ty::BuiltinBounds,\n     pub trait_bounds: Vec<&'a ast::TraitRef>,\n-    pub unboxed_fn_ty_bounds: Vec<&'a ast::UnboxedFnBound>,\n     pub region_bounds: Vec<&'a ast::Lifetime>,\n }\n \n@@ -1590,7 +1542,6 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n     let mut builtin_bounds = ty::empty_builtin_bounds();\n     let mut region_bounds = Vec::new();\n     let mut trait_bounds = Vec::new();\n-    let mut unboxed_fn_ty_bounds = Vec::new();\n     let mut trait_def_ids = HashMap::new();\n     for &ast_bound in ast_bounds.iter() {\n         match *ast_bound {\n@@ -1635,17 +1586,13 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n             ast::RegionTyParamBound(ref l) => {\n                 region_bounds.push(l);\n             }\n-            ast::UnboxedFnTyParamBound(ref unboxed_function) => {\n-                unboxed_fn_ty_bounds.push(&**unboxed_function);\n-            }\n         }\n     }\n \n     PartitionedBounds {\n         builtin_bounds: builtin_bounds,\n         trait_bounds: trait_bounds,\n         region_bounds: region_bounds,\n-        unboxed_fn_ty_bounds: unboxed_fn_ty_bounds\n     }\n }\n "}, {"sha": "38de50f68318f9dce0f06451d9f8663cd96f1420", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -638,7 +638,7 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n         let mut bounds = bounds.chain(ty_param.unbound.iter());\n         for bound in bounds {\n             match *bound {\n-                ast::TraitTyParamBound(..) | ast::UnboxedFnTyParamBound(..) => {\n+                ast::TraitTyParamBound(..) => {\n                     // According to accepted RFC #XXX, we should\n                     // eventually accept these, but it will not be\n                     // part of this PR. Still, convert to warning to\n@@ -1356,20 +1356,6 @@ pub fn instantiate_trait_ref<'tcx,AC>(this: &AC,\n     }\n }\n \n-pub fn instantiate_unboxed_fn_ty<'tcx,AC>(this: &AC,\n-                                          unboxed_function: &ast::UnboxedFnTy,\n-                                          param_ty: ty::ParamTy)\n-                                          -> Rc<ty::TraitRef>\n-                                          where AC: AstConv<'tcx> {\n-    let rscope = ExplicitRscope;\n-    let param_ty = param_ty.to_ty(this.tcx());\n-    Rc::new(astconv::trait_ref_for_unboxed_function(this,\n-                                                    &rscope,\n-                                                    unboxed_function.kind,\n-                                                    &*unboxed_function.decl,\n-                                                    Some(param_ty)))\n-}\n-\n fn get_trait_def(ccx: &CrateCtxt, trait_id: ast::DefId) -> Rc<ty::TraitDef> {\n     if trait_id.krate != ast::LOCAL_CRATE {\n         return ty::lookup_trait_def(ccx.tcx, trait_id)\n@@ -1879,7 +1865,6 @@ fn ty_generics<'tcx,AC>(this: &AC,\n                 // In the above example, `ast_trait_ref` is `Iterator`.\n                 let ast_trait_ref = match *bound {\n                     ast::TraitTyParamBound(ref r) => r,\n-                    ast::UnboxedFnTyParamBound(..) => { continue; }\n                     ast::RegionTyParamBound(..) => { continue; }\n                 };\n \n@@ -2057,45 +2042,8 @@ fn conv_param_bounds<'tcx,AC>(this: &AC,\n         merge_param_bounds(this.tcx(), param_ty, ast_bounds, where_clause);\n     let astconv::PartitionedBounds { builtin_bounds,\n                                      trait_bounds,\n-                                     region_bounds,\n-                                     unboxed_fn_ty_bounds } =\n+                                     region_bounds } =\n         astconv::partition_bounds(this.tcx(), span, all_bounds.as_slice());\n-\n-    let unboxed_fn_ty_bounds = unboxed_fn_ty_bounds.into_iter().map(|b| {\n-        let trait_id = (*this.tcx().def_map.borrow())[b.ref_id].def_id();\n-        let mut kind = None;\n-        for &(lang_item, this_kind) in [\n-            (this.tcx().lang_items.fn_trait(), ast::FnUnboxedClosureKind),\n-            (this.tcx().lang_items.fn_mut_trait(),\n-             ast::FnMutUnboxedClosureKind),\n-            (this.tcx().lang_items.fn_once_trait(),\n-             ast::FnOnceUnboxedClosureKind)\n-        ].iter() {\n-            if Some(trait_id) == lang_item {\n-                kind = Some(this_kind);\n-                break\n-            }\n-        }\n-\n-        let kind = match kind {\n-            Some(kind) => kind,\n-            None => {\n-                this.tcx().sess.span_err(b.path.span,\n-                                         \"unboxed function trait must be one \\\n-                                          of `Fn`, `FnMut`, or `FnOnce`\");\n-                ast::FnMutUnboxedClosureKind\n-            }\n-        };\n-\n-        let rscope = ExplicitRscope;\n-        let param_ty = param_ty.to_ty(this.tcx());\n-        Rc::new(astconv::trait_ref_for_unboxed_function(this,\n-                                                        &rscope,\n-                                                        kind,\n-                                                        &*b.decl,\n-                                                        Some(param_ty)))\n-    });\n-\n     let trait_bounds: Vec<Rc<ty::TraitRef>> =\n         trait_bounds.into_iter()\n         .map(|b| {\n@@ -2104,7 +2052,6 @@ fn conv_param_bounds<'tcx,AC>(this: &AC,\n                                   param_ty.to_ty(this.tcx()),\n                                   Some(param_ty.to_ty(this.tcx())))\n         })\n-        .chain(unboxed_fn_ty_bounds)\n         .collect();\n     let region_bounds: Vec<ty::Region> =\n         region_bounds.into_iter()"}, {"sha": "4882059e91b62fea08550b4489faa7082da3303b", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -1102,9 +1102,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     // be passing down a map.\n                     ast::RegionTyParamBound(lt)\n                 }\n-                &ast::UnboxedFnTyParamBound(ref unboxed_function_type) => {\n-                    ast::UnboxedFnTyParamBound((*unboxed_function_type).clone())\n-                }\n                 &ast::TraitTyParamBound(ref tr) => {\n                     let last_seg = tr.path.segments.last().unwrap();\n                     let mut insert = Vec::new();"}, {"sha": "a3bf0160471ec0af5335ddcc2d240b397af3e2f5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -323,7 +323,6 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n                     clean::TraitBound(ty) => ty,\n-                    clean::UnboxedFnBound(..) |\n                     clean::RegionBound(..) => unreachable!(),\n                 }\n             }),"}, {"sha": "d3bfe42dcb2195c78a2fb4e08ad46f2206e7e9d0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -476,15 +476,13 @@ impl Clean<TyParam> for ty::TypeParameterDef {\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n-    UnboxedFnBound(UnboxedFnType),\n     TraitBound(Type)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n             ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n-            ast::UnboxedFnTyParamBound(ref ty) => { UnboxedFnBound(ty.clean(cx)) },\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n         }\n     }\n@@ -599,21 +597,6 @@ impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n-pub struct UnboxedFnType {\n-    pub path: Path,\n-    pub decl: FnDecl\n-}\n-\n-impl Clean<UnboxedFnType> for ast::UnboxedFnBound {\n-    fn clean(&self, cx: &DocContext) -> UnboxedFnType {\n-        UnboxedFnType {\n-            path: self.path.clean(cx),\n-            decl: self.decl.clean(cx)\n-        }\n-    }\n-}\n-\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct Lifetime(String);\n "}, {"sha": "ea6cbbb6b833862829c202a09c9730d5883d1984", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -143,9 +143,6 @@ impl fmt::Show for clean::TyParamBound {\n             clean::RegionBound(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n-            clean::UnboxedFnBound(ref ty) => {\n-                write!(f, \"{}{}\", ty.path, ty.decl)\n-            }\n             clean::TraitBound(ref ty) => {\n                 write!(f, \"{}\", *ty)\n             }\n@@ -404,8 +401,7 @@ impl fmt::Show for clean::Type {\n                            let mut ret = String::new();\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n-                                    clean::RegionBound(..) |\n-                                    clean::UnboxedFnBound(..) => {}\n+                                    clean::RegionBound(..) => {}\n                                     clean::TraitBound(ref t) => {\n                                         if ret.len() == 0 {\n                                             ret.push_str(\": \");"}, {"sha": "6a354fa20e1b40bbb88b48d0ea5ee6cac1f11fcb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -308,20 +308,11 @@ pub const DUMMY_NODE_ID: NodeId = -1;\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),\n-    UnboxedFnTyParamBound(P<UnboxedFnBound>),\n     RegionTyParamBound(Lifetime)\n }\n \n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n-pub struct UnboxedFnBound {\n-    pub path: Path,\n-    pub decl: P<FnDecl>,\n-    pub lifetimes: Vec<LifetimeDef>,\n-    pub ref_id: NodeId,\n-}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct TyParam {\n     pub ident: Ident,\n@@ -1089,12 +1080,6 @@ pub struct BareFnTy {\n     pub decl: P<FnDecl>\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n-pub struct UnboxedFnTy {\n-    pub kind: UnboxedClosureKind,\n-    pub decl: P<FnDecl>,\n-}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Ty_ {\n     TyNil,\n@@ -1107,7 +1092,6 @@ pub enum Ty_ {\n     TyClosure(P<ClosureTy>),\n     TyProc(P<ClosureTy>),\n     TyBareFn(P<BareFnTy>),\n-    TyUnboxedFn(P<UnboxedFnTy>),\n     TyTup(Vec<P<Ty>> ),\n     TyPath(Path, Option<TyParamBounds>, NodeId), // for #7264; see above\n     /// A \"qualified path\", e.g. `<Vec<T> as SomeTrait>::SomeType`"}, {"sha": "3adb062864e1e128ffe207dac5be3702ba254c72", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -848,9 +848,6 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             TyBareFn(ref fd) => {\n                 self.visit_fn_decl(&*fd.decl);\n             }\n-            TyUnboxedFn(ref fd) => {\n-                self.visit_fn_decl(&*fd.decl);\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty);"}, {"sha": "80b158a54d36cf90dd8d20fc473044134e3c89fd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -313,11 +313,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                                    experimental and likely to be removed\");\n \n             },\n-            ast::TyUnboxedFn(..) => {\n-                self.gate_feature(\"unboxed_closure_sugar\",\n-                                  t.span,\n-                                  \"unboxed closure trait sugar is experimental\");\n-            }\n             _ => {}\n         }\n "}, {"sha": "cd4a3d10c48825749105d304305b494adcbc94d5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -424,12 +424,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n             }\n-            TyUnboxedFn(f) => {\n-                TyUnboxedFn(f.map(|UnboxedFnTy {decl, kind}| UnboxedFnTy {\n-                    decl: fld.fold_fn_decl(decl),\n-                    kind: kind,\n-                }))\n-            }\n             TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyParen(ty) => TyParen(fld.fold_ty(ty)),\n             TyPath(path, bounds, id) => {\n@@ -715,23 +709,6 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n     match tpb {\n         TraitTyParamBound(ty) => TraitTyParamBound(fld.fold_trait_ref(ty)),\n         RegionTyParamBound(lifetime) => RegionTyParamBound(fld.fold_lifetime(lifetime)),\n-        UnboxedFnTyParamBound(bound) => {\n-            match *bound {\n-                UnboxedFnBound {\n-                    ref path,\n-                    ref decl,\n-                    ref lifetimes,\n-                    ref_id\n-                } => {\n-                    UnboxedFnTyParamBound(P(UnboxedFnBound {\n-                        path: fld.fold_path(path.clone()),\n-                        decl: fld.fold_fn_decl(decl.clone()),\n-                        lifetimes: fld.fold_lifetime_defs(lifetimes.clone()),\n-                        ref_id: fld.new_id(ref_id),\n-                    }))\n-                }\n-            }\n-        }\n     }\n }\n "}, {"sha": "18dd7074d28b32e8389d4ae3bddc9735b9d28b60", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -53,9 +53,8 @@ use ast::{TtNonterminal, TupleVariantKind, Ty, Ty_, TyBot};\n use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyParen, TyPath, TyPtr, TyQPath};\n-use ast::{TyRptr, TyTup, TyU32, TyUnboxedFn, TyUniq, TyVec, UnUniq};\n+use ast::{TyRptr, TyTup, TyU32, TyUniq, TyVec, UnUniq};\n use ast::{TypeImplItem, TypeTraitItem, Typedef, UnboxedClosureKind};\n-use ast::{UnboxedFnBound, UnboxedFnTy, UnboxedFnTyParamBound};\n use ast::{UnnamedField, UnsafeBlock};\n use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n@@ -1127,19 +1126,16 @@ impl<'a> Parser<'a> {\n             Vec::new()\n         };\n \n-        let (optional_unboxed_closure_kind, inputs) = if self.eat(&token::OrOr) {\n-            (None, Vec::new())\n+        let inputs = if self.eat(&token::OrOr) {\n+            Vec::new()\n         } else {\n             self.expect_or();\n \n-            let optional_unboxed_closure_kind =\n-                self.parse_optional_unboxed_closure_kind();\n-\n             let inputs = self.parse_seq_to_before_or(\n                 &token::Comma,\n                 |p| p.parse_arg_general(false));\n             self.expect_or();\n-            (optional_unboxed_closure_kind, inputs)\n+            inputs\n         };\n \n         let bounds = self.parse_colon_then_ty_param_bounds();\n@@ -1152,23 +1148,13 @@ impl<'a> Parser<'a> {\n             variadic: false\n         });\n \n-        match optional_unboxed_closure_kind {\n-            Some(unboxed_closure_kind) => {\n-                TyUnboxedFn(P(UnboxedFnTy {\n-                    kind: unboxed_closure_kind,\n-                    decl: decl,\n-                }))\n-            }\n-            None => {\n-                TyClosure(P(ClosureTy {\n-                    fn_style: fn_style,\n-                    onceness: onceness,\n-                    bounds: bounds,\n-                    decl: decl,\n-                    lifetimes: lifetime_defs,\n-                }))\n-            }\n-        }\n+        TyClosure(P(ClosureTy {\n+            fn_style: fn_style,\n+            onceness: onceness,\n+            bounds: bounds,\n+            decl: decl,\n+            lifetimes: lifetime_defs,\n+        }))\n     }\n \n     pub fn parse_unsafety(&mut self) -> FnStyle {\n@@ -3935,31 +3921,11 @@ impl<'a> Parser<'a> {\n                 token::ModSep | token::Ident(..) => {\n                     let path =\n                         self.parse_path(LifetimeAndTypesWithoutColons).path;\n-                    if self.token == token::OpenDelim(token::Paren) {\n-                        self.bump();\n-                        let inputs = self.parse_seq_to_end(\n-                            &token::CloseDelim(token::Paren),\n-                            seq_sep_trailing_allowed(token::Comma),\n-                            |p| p.parse_arg_general(false));\n-                        let (return_style, output) = self.parse_ret_ty();\n-                        result.push(UnboxedFnTyParamBound(P(UnboxedFnBound {\n-                            path: path,\n-                            decl: P(FnDecl {\n-                                inputs: inputs,\n-                                output: output,\n-                                cf: return_style,\n-                                variadic: false,\n-                            }),\n-                            lifetimes: lifetime_defs,\n-                            ref_id: ast::DUMMY_NODE_ID,\n-                        })));\n-                    } else {\n-                        result.push(TraitTyParamBound(ast::TraitRef {\n-                            path: path,\n-                            ref_id: ast::DUMMY_NODE_ID,\n-                            lifetimes: lifetime_defs,\n-                        }))\n-                    }\n+                    result.push(TraitTyParamBound(ast::TraitRef {\n+                        path: path,\n+                        ref_id: ast::DUMMY_NODE_ID,\n+                        lifetimes: lifetime_defs,\n+                    }))\n                 }\n                 _ => break,\n             }"}, {"sha": "2448eacbb39986a32e5290cb729d739d9c3574b9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 50, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -13,7 +13,7 @@ use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n-use ast::{UnboxedClosureKind, UnboxedFnTyParamBound};\n+use ast::{UnboxedClosureKind};\n use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -699,7 +699,6 @@ impl<'a> State<'a> {\n                                       None,\n                                       &OwnedSlice::empty(),\n                                       Some(&generics),\n-                                      None,\n                                       None));\n             }\n             ast::TyClosure(ref f) => {\n@@ -719,7 +718,6 @@ impl<'a> State<'a> {\n                                       None,\n                                       &f.bounds,\n                                       Some(&generics),\n-                                      None,\n                                       None));\n             }\n             ast::TyProc(ref f) => {\n@@ -739,21 +737,8 @@ impl<'a> State<'a> {\n                                       None,\n                                       &f.bounds,\n                                       Some(&generics),\n-                                      None,\n                                       None));\n             }\n-            ast::TyUnboxedFn(ref f) => {\n-                try!(self.print_ty_fn(None,\n-                                      None,\n-                                      ast::NormalFn,\n-                                      ast::Many,\n-                                      &*f.decl,\n-                                      None,\n-                                      &OwnedSlice::empty(),\n-                                      None,\n-                                      None,\n-                                      Some(f.kind)));\n-            }\n             ast::TyPath(ref path, ref bounds, _) => {\n                 try!(self.print_bounded_path(path, bounds));\n             }\n@@ -1212,8 +1197,7 @@ impl<'a> State<'a> {\n                               Some(m.ident),\n                               &OwnedSlice::empty(),\n                               Some(&m.generics),\n-                              Some(&m.explicit_self.node),\n-                              None));\n+                              Some(&m.explicit_self.node)));\n         word(&mut self.s, \";\")\n     }\n \n@@ -2407,15 +2391,6 @@ impl<'a> State<'a> {\n                     RegionTyParamBound(ref lt) => {\n                         self.print_lifetime(lt)\n                     }\n-                    UnboxedFnTyParamBound(ref unboxed_function_type) => {\n-                        try!(self.print_path(&unboxed_function_type.path,\n-                                             false));\n-                        try!(self.popen());\n-                        try!(self.print_fn_args(&*unboxed_function_type.decl,\n-                                                None));\n-                        try!(self.pclose());\n-                        self.print_fn_output(&*unboxed_function_type.decl)\n-                    }\n                 })\n             }\n             Ok(())\n@@ -2675,9 +2650,7 @@ impl<'a> State<'a> {\n                        id: Option<ast::Ident>,\n                        bounds: &OwnedSlice<ast::TyParamBound>,\n                        generics: Option<&ast::Generics>,\n-                       opt_explicit_self: Option<&ast::ExplicitSelf_>,\n-                       opt_unboxed_closure_kind:\n-                        Option<ast::UnboxedClosureKind>)\n+                       opt_explicit_self: Option<&ast::ExplicitSelf_>)\n                        -> IoResult<()> {\n         try!(self.ibox(indent_unit));\n \n@@ -2694,9 +2667,7 @@ impl<'a> State<'a> {\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(self.print_onceness(onceness));\n-            if opt_unboxed_closure_kind.is_none() {\n-                try!(word(&mut self.s, \"fn\"));\n-            }\n+            try!(word(&mut self.s, \"fn\"));\n         }\n \n         match id {\n@@ -2710,30 +2681,15 @@ impl<'a> State<'a> {\n         match generics { Some(g) => try!(self.print_generics(g)), _ => () }\n         try!(zerobreak(&mut self.s));\n \n-        if opt_unboxed_closure_kind.is_some() || opt_sigil == Some('&') {\n+        if opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             try!(self.popen());\n         }\n \n-        match opt_unboxed_closure_kind {\n-            Some(ast::FnUnboxedClosureKind) => {\n-                try!(word(&mut self.s, \"&\"));\n-                try!(self.word_space(\":\"));\n-            }\n-            Some(ast::FnMutUnboxedClosureKind) => {\n-                try!(word(&mut self.s, \"&mut\"));\n-                try!(self.word_space(\":\"));\n-            }\n-            Some(ast::FnOnceUnboxedClosureKind) => {\n-                try!(self.word_space(\":\"));\n-            }\n-            None => {}\n-        }\n-\n         try!(self.print_fn_args(decl, opt_explicit_self));\n \n-        if opt_unboxed_closure_kind.is_some() || opt_sigil == Some('&') {\n+        if opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             if decl.variadic {"}, {"sha": "9751abacbd3ff863bc42cae0f235763e72777e15", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -365,12 +365,6 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_ty(&*function_declaration.decl.output);\n             walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n         }\n-        TyUnboxedFn(ref function_declaration) => {\n-            for argument in function_declaration.decl.inputs.iter() {\n-                visitor.visit_ty(&*argument.ty)\n-            }\n-            visitor.visit_ty(&*function_declaration.decl.output);\n-        }\n         TyPath(ref path, ref opt_bounds, id) => {\n             visitor.visit_path(path, id);\n             match *opt_bounds {\n@@ -505,13 +499,6 @@ pub fn walk_ty_param_bounds<'v, V: Visitor<'v>>(visitor: &mut V,\n             TraitTyParamBound(ref typ) => {\n                 walk_trait_ref_helper(visitor, typ)\n             }\n-            UnboxedFnTyParamBound(ref function_declaration) => {\n-                for argument in function_declaration.decl.inputs.iter() {\n-                    visitor.visit_ty(&*argument.ty)\n-                }\n-                visitor.visit_ty(&*function_declaration.decl.output);\n-                walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n-            }\n             RegionTyParamBound(ref lifetime) => {\n                 visitor.visit_lifetime_ref(lifetime);\n             }"}, {"sha": "8f6cfe0499703ff7c7116c016bff80af6f060744", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fa4c6239accc08aae11d9db3e13d4153add432/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=d0fa4c6239accc08aae11d9db3e13d4153add432", "patch": "@@ -25,7 +25,7 @@ fn call_it<F:FnMut(int)->int>(mut f: F, x: int) -> int {\n     f.call_mut((x,)) + 3\n }\n \n-fn call_box(f: &mut |&mut: int|->int, x: int) -> int {\n+fn call_box(f: &mut FnMut(int) -> int, x: int) -> int {\n     f.call_mut((x,)) + 3\n }\n "}]}