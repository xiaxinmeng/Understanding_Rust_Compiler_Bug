{"sha": "47c9145bd04afd0d00649e6c0eff542b35502410", "node_id": "C_kwDOAAsO6NoAKDQ3YzkxNDViZDA0YWZkMGQwMDY0OWU2YzBlZmY1NDJiMzU1MDI0MTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:23:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:23:53Z"}, "message": "Auto merge of #9497 - kraktus:needless_return2, r=llogiq\n\n[`needless_return`] Recursively remove unneeded semicolons\n\nfix #8336,\nfix #8156,\nfix https://github.com/rust-lang/rust-clippy/issues/7358,\nfix #9192,\nfix https://github.com/rust-lang/rust-clippy/issues/9503\n\nchangelog: [`needless_return`] Recursively remove unneeded semicolons\n\nFor now the suggestion about removing the semicolons are hidden because they would be very noisy and should be obvious if the user wants to apply the lint manually instead of using `--fix`. This could be an issue for beginner, but haven't found better way to display it.", "tree": {"sha": "8381e32cd7c6089fc4c946f655da0e241c7f2381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8381e32cd7c6089fc4c946f655da0e241c7f2381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c9145bd04afd0d00649e6c0eff542b35502410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c9145bd04afd0d00649e6c0eff542b35502410", "html_url": "https://github.com/rust-lang/rust/commit/47c9145bd04afd0d00649e6c0eff542b35502410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c9145bd04afd0d00649e6c0eff542b35502410/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31db02e477b642b0caf3057d034663d306fa733", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31db02e477b642b0caf3057d034663d306fa733", "html_url": "https://github.com/rust-lang/rust/commit/d31db02e477b642b0caf3057d034663d306fa733"}, {"sha": "b33364597105dc60555957a4ae59bb780eb15147", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33364597105dc60555957a4ae59bb780eb15147", "html_url": "https://github.com/rust-lang/rust/commit/b33364597105dc60555957a4ae59bb780eb15147"}], "stats": {"total": 452, "additions": 316, "deletions": 136}, "files": [{"sha": "f758f4cff8ba1521f08802c556ef662cfd4ff22e", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 75, "deletions": 98, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/47c9145bd04afd0d00649e6c0eff542b35502410/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c9145bd04afd0d00649e6c0eff542b35502410/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=47c9145bd04afd0d00649e6c0eff542b35502410", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_hir_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n@@ -72,6 +72,27 @@ enum RetReplacement {\n     Unit,\n }\n \n+impl RetReplacement {\n+    fn sugg_help(self) -> &'static str {\n+        match self {\n+            Self::Empty => \"remove `return`\",\n+            Self::Block => \"replace `return` with an empty block\",\n+            Self::Unit => \"replace `return` with a unit value\",\n+        }\n+    }\n+}\n+\n+impl ToString for RetReplacement {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            Self::Empty => \"\",\n+            Self::Block => \"{}\",\n+            Self::Unit => \"()\",\n+        }\n+        .to_string()\n+    }\n+}\n+\n declare_lint_pass!(Return => [LET_AND_RETURN, NEEDLESS_RETURN]);\n \n impl<'tcx> LateLintPass<'tcx> for Return {\n@@ -139,62 +160,67 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, body.value, Some(body.value.span), replacement);\n+                check_final_expr(cx, body.value, vec![], replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                if let ExprKind::Block(block, _) = body.value.kind {\n-                    check_block_return(cx, block);\n-                }\n+                check_block_return(cx, &body.value.kind, vec![]);\n             },\n         }\n     }\n }\n \n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n-    if let Some(expr) = block.expr {\n-        check_final_expr(cx, expr, Some(expr.span), RetReplacement::Empty);\n-    } else if let Some(stmt) = block.stmts.iter().last() {\n-        match stmt.kind {\n-            StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n-                check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n-            },\n-            _ => (),\n+// if `expr` is a block, check if there are needless returns in it\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, semi_spans: Vec<Span>) {\n+    if let ExprKind::Block(block, _) = expr_kind {\n+        if let Some(block_expr) = block.expr {\n+            check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n+        } else if let Some(stmt) = block.stmts.iter().last() {\n+            match stmt.kind {\n+                StmtKind::Expr(expr) => {\n+                    check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n+                },\n+                StmtKind::Semi(semi_expr) => {\n+                    let mut semi_spans_and_this_one = semi_spans;\n+                    // we only want the span containing the semicolon so we can remove it later. From `entry.rs:382`\n+                    if let Some(semicolon_span) = stmt.span.trim_start(semi_expr.span) {\n+                        semi_spans_and_this_one.push(semicolon_span);\n+                        check_final_expr(cx, semi_expr, semi_spans_and_this_one, RetReplacement::Empty);\n+                    }\n+                },\n+                _ => (),\n+            }\n         }\n     }\n }\n \n fn check_final_expr<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n-    span: Option<Span>,\n+    semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n+                            * needless return */\n     replacement: RetReplacement,\n ) {\n-    match expr.kind {\n+    let peeled_drop_expr = expr.peel_drop_temps();\n+    match &peeled_drop_expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint(\n                         cx,\n-                        inner.map_or(expr.hir_id, |inner| inner.hir_id),\n-                        span.expect(\"`else return` is not possible\"),\n+                        peeled_drop_expr.span,\n+                        semi_spans,\n                         inner.as_ref().map(|i| i.span),\n                         replacement,\n                     );\n                 }\n             }\n         },\n-        // a whole block? check it!\n-        ExprKind::Block(block, _) => {\n-            check_block_return(cx, block);\n-        },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            if let ExprKind::Block(ifblock, _) = then.kind {\n-                check_block_return(cx, ifblock);\n-            }\n+            check_block_return(cx, &then.kind, semi_spans.clone());\n             if let Some(else_clause) = else_clause_opt {\n-                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n+                check_block_return(cx, &else_clause.kind, semi_spans);\n             }\n         },\n         // a match expr, check all arms\n@@ -203,93 +229,44 @@ fn check_final_expr<'tcx>(\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Unit);\n+                check_final_expr(cx, arm.body, semi_spans.clone(), RetReplacement::Unit);\n             }\n         },\n-        ExprKind::DropTemps(expr) => check_final_expr(cx, expr, None, RetReplacement::Empty),\n-        _ => (),\n+        // if it's a whole block, check it\n+        other_expr_kind => check_block_return(cx, other_expr_kind, semi_spans),\n     }\n }\n \n fn emit_return_lint(\n     cx: &LateContext<'_>,\n-    emission_place: HirId,\n     ret_span: Span,\n+    semi_spans: Vec<Span>,\n     inner_span: Option<Span>,\n     replacement: RetReplacement,\n ) {\n     if ret_span.from_expansion() {\n         return;\n     }\n-    match inner_span {\n-        Some(inner_span) => {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_hir_and_then(\n-                cx,\n-                NEEDLESS_RETURN,\n-                emission_place,\n-                ret_span,\n-                \"unneeded `return` statement\",\n-                |diag| {\n-                    let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n-                },\n-            );\n-        },\n-        None => match replacement {\n-            RetReplacement::Empty => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"remove `return`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n-            RetReplacement::Block => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with an empty block\",\n-                            \"{}\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n-            RetReplacement::Unit => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with a unit value\",\n-                            \"()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n+    let mut applicability = Applicability::MachineApplicable;\n+    let return_replacement = inner_span.map_or_else(\n+        || replacement.to_string(),\n+        |inner_span| {\n+            let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+            snippet.to_string()\n         },\n-    }\n+    );\n+    let sugg_help = if inner_span.is_some() {\n+        \"remove `return`\"\n+    } else {\n+        replacement.sugg_help()\n+    };\n+    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n+        diag.span_suggestion_hidden(ret_span, sugg_help, return_replacement, applicability);\n+        // for each parent statement, we need to remove the semicolon\n+        for semi_stmt_span in semi_spans {\n+            diag.tool_only_span_suggestion(semi_stmt_span, \"remove this semicolon\", \"\", applicability);\n+        }\n+    });\n }\n \n fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {"}, {"sha": "112a2f57b419e7f68f663468ca5067accf178bfd", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=47c9145bd04afd0d00649e6c0eff542b35502410", "patch": "@@ -233,4 +233,41 @@ fn issue_9361() -> i32 {\n     return 1 + 2;\n }\n \n+fn issue8336(x: i32) -> bool {\n+    if x > 0 {\n+        println!(\"something\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn issue8156(x: u8) -> u64 {\n+    match x {\n+        80 => {\n+            10\n+        },\n+        _ => {\n+            100\n+        },\n+    }\n+}\n+\n+// Ideally the compiler should throw `unused_braces` in this case\n+fn issue9192() -> i32 {\n+    {\n+        0\n+    }\n+}\n+\n+fn issue9503(x: usize) -> isize {\n+    unsafe {\n+        if x > 12 {\n+            *(x as *const isize)\n+        } else {\n+            !*(x as *const isize)\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "22aa2e11fadb1e90457c1cc4b8e71a11a01146c3", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=47c9145bd04afd0d00649e6c0eff542b35502410", "patch": "@@ -233,4 +233,41 @@ fn issue_9361() -> i32 {\n     return 1 + 2;\n }\n \n+fn issue8336(x: i32) -> bool {\n+    if x > 0 {\n+        println!(\"something\");\n+        return true;\n+    } else {\n+        return false;\n+    };\n+}\n+\n+fn issue8156(x: u8) -> u64 {\n+    match x {\n+        80 => {\n+            return 10;\n+        },\n+        _ => {\n+            return 100;\n+        },\n+    };\n+}\n+\n+// Ideally the compiler should throw `unused_braces` in this case\n+fn issue9192() -> i32 {\n+    {\n+        return 0;\n+    };\n+}\n+\n+fn issue9503(x: usize) -> isize {\n+    unsafe {\n+        if x > 12 {\n+            return *(x as *const isize);\n+        } else {\n+            return !*(x as *const isize);\n+        };\n+    };\n+}\n+\n fn main() {}"}, {"sha": "45090dbe2064ef00480363d08329291e5200497b", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 167, "deletions": 38, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47c9145bd04afd0d00649e6c0eff542b35502410/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=47c9145bd04afd0d00649e6c0eff542b35502410", "patch": "@@ -2,225 +2,354 @@ error: unneeded `return` statement\n   --> $DIR/needless_return.rs:27:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:31:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:36:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:38:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:44:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n+   |                 ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:46:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |             ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:53:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:55:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return`: `true`\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:59:5\n    |\n LL |     return the_answer!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:63:5\n    |\n LL |     return;\n-   |     ^^^^^^^ help: remove `return`\n+   |     ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:68:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:70:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:77:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:86:13\n    |\n LL |             return;\n-   |             ^^^^^^^ help: remove `return`\n+   |             ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:88:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:101:9\n    |\n LL |         return String::from(\"test\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:103:9\n    |\n LL |         return String::new();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:125:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n-   |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |                                ^^^^^^\n+   |\n+   = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:130:13\n    |\n LL |             return;\n-   |             ^^^^^^^ help: remove `return`\n+   |             ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:132:20\n    |\n LL |         let _ = || return;\n-   |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |                    ^^^^^^\n+   |\n+   = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:138:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n-   |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n+   |                                ^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:147:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:151:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:156:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:158:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:164:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n+   |                 ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:166:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |             ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:173:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:175:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return`: `true`\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:179:5\n    |\n LL |     return the_answer!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:183:5\n    |\n LL |     return;\n-   |     ^^^^^^^ help: remove `return`\n+   |     ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:188:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:190:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:197:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:210:9\n    |\n LL |         return String::from(\"test\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:212:9\n    |\n LL |         return String::new();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:228:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:239:9\n+   |\n+LL |         return true;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:241:9\n+   |\n+LL |         return false;\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:248:13\n+   |\n+LL |             return 10;\n+   |             ^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:251:13\n+   |\n+LL |             return 100;\n+   |             ^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:259:9\n+   |\n+LL |         return 0;\n+   |         ^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:266:13\n+   |\n+LL |             return *(x as *const isize);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:268:13\n+   |\n+LL |             return !*(x as *const isize);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 44 previous errors\n "}]}