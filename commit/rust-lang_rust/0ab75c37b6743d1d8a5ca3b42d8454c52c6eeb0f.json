{"sha": "0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjc1YzM3YjY3NDNkMWQ4YTVjYTNiNDJkODQ1NGM1MmM2ZWViMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T16:22:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T16:22:20Z"}, "message": "Auto merge of #5977 - xvschneider:AddLintPanicInResult, r=matthiaskrgr\n\nAdd lint panic in result\n\n### Change\nAdding a new \"restriction\" lint that will emit a warning when using \"panic\", \"unimplemented\" or \"unreachable\" in a function of type option/result.\n\n### Motivation\nSome codebases must avoid crashes at all costs, and hence functions of type option/result must return an error instead of crashing.\n\n### Test plan\nRunning:\nTESTNAME=panic_in_result cargo uitest ---\n\nchangelog: none", "tree": {"sha": "fdbbd56a87ff3fd54744ea5353233c3fc17ba5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdbbd56a87ff3fd54744ea5353233c3fc17ba5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "html_url": "https://github.com/rust-lang/rust/commit/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6d7bfbefe4e09241fcee7060645bd01866c9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6d7bfbefe4e09241fcee7060645bd01866c9d8", "html_url": "https://github.com/rust-lang/rust/commit/df6d7bfbefe4e09241fcee7060645bd01866c9d8"}, {"sha": "f90b1fc0636cb50bd225caeb20d6a1309d7b966f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90b1fc0636cb50bd225caeb20d6a1309d7b966f", "html_url": "https://github.com/rust-lang/rust/commit/f90b1fc0636cb50bd225caeb20d6a1309d7b966f"}], "stats": {"total": 278, "additions": 278, "deletions": 0}, "files": [{"sha": "285a2ff8060d2af6da54d34a27e56464e36b1a5b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -1755,6 +1755,7 @@ Released 2018-09-13\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n+[`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl"}, {"sha": "1795fd10fa139c7ab388895fda0113ca25a76607", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -269,6 +269,7 @@ mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n mod overflow_check_conditional;\n+mod panic_in_result_fn;\n mod panic_unimplemented;\n mod partialeq_ne_impl;\n mod path_buf_push_overwrite;\n@@ -751,6 +752,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &option_if_let_else::OPTION_IF_LET_ELSE,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        &panic_in_result_fn::PANIC_IN_RESULT_FN,\n         &panic_unimplemented::PANIC,\n         &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n@@ -1091,6 +1093,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n+    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n+\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1135,6 +1139,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n         LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n+        LintId::of(&panic_in_result_fn::PANIC_IN_RESULT_FN),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "4077aba6ef17dabb99ca7f14b75f3e4d2d2efc28", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -0,0 +1,90 @@\n+use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!` or `unreachable!` in a function of type result.\n+    ///\n+    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn result_with_panic() -> Result<bool, String>\n+    /// {\n+    ///     panic!(\"error\");\n+    /// }\n+    /// ```\n+    pub PANIC_IN_RESULT_FN,\n+    restriction,\n+    \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n+}\n+\n+declare_lint_pass!(PanicInResultFn  => [PANIC_IN_RESULT_FN]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        _: &'tcx hir::FnDecl<'tcx>,\n+        body: &'tcx hir::Body<'tcx>,\n+        span: Span,\n+        hir_id: hir::HirId,\n+    ) {\n+        if !matches!(fn_kind, FnKind::Closure(_))\n+            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type))\n+        {\n+            lint_impl_body(cx, span, body);\n+        }\n+    }\n+}\n+\n+struct FindPanicUnimplementedUnreachable {\n+    result: Vec<Span>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if [\"unimplemented\", \"unreachable\", \"panic\", \"todo\"]\n+            .iter()\n+            .any(|fun| is_expn_of(expr.span, fun).is_some())\n+        {\n+            self.result.push(expr.span);\n+        }\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n+    let mut panics = FindPanicUnimplementedUnreachable { result: Vec::new() };\n+    panics.visit_expr(&body.value);\n+    if !panics.result.is_empty() {\n+        span_lint_and_then(\n+            cx,\n+            PANIC_IN_RESULT_FN,\n+            impl_span,\n+            \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n+            move |diag| {\n+                diag.help(\n+                    \"`unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n+                );\n+                diag.span_note(panics.result, \"return Err() instead of panicking\");\n+            },\n+        );\n+    }\n+}"}, {"sha": "04d486438b1eb079f85cffa917ab3e6e4522ec4d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -1718,6 +1718,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"panic_unimplemented\",\n     },\n+    Lint {\n+        name: \"panic_in_result_fn\",\n+        group: \"restriction\",\n+        desc: \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \",\n+        deprecation: None,\n+        module: \"panic_in_result_fn\",\n+    },\n     Lint {\n         name: \"panic_params\",\n         group: \"style\","}, {"sha": "287726f7a2d4e99e827784da54e9a805e47bba14", "filename": "tests/ui/panic_in_result_fn.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -0,0 +1,70 @@\n+#![warn(clippy::panic_in_result_fn)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_panic() -> Result<bool, String> // should emit lint\n+    {\n+        panic!(\"error\");\n+    }\n+\n+    fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn result_with_todo() -> Result<bool, String> // should emit lint\n+    {\n+        todo!(\"Finish this\");\n+    }\n+\n+    fn other_with_panic() // should not emit lint\n+    {\n+        panic!(\"\");\n+    }\n+\n+    fn other_with_unreachable() // should not emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn other_with_unimplemented() // should not emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn other_with_todo() // should not emit lint\n+    {\n+        todo!(\"finish this\")\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        Ok(true)\n+    }\n+}\n+\n+fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+{\n+    panic!(\"error\");\n+}\n+\n+fn todo() {\n+    println!(\"something\");\n+}\n+\n+fn function_result_with_custom_todo() -> Result<bool, String> // should not emit lint\n+{\n+    todo();\n+    Ok(true)\n+}\n+\n+fn main() -> Result<(), String> {\n+    todo!(\"finish main method\");\n+    Ok(())\n+}"}, {"sha": "c6936fd86923cfab412f794ce9aea9e47a2a43b0", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "patch": "@@ -0,0 +1,105 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:6:5\n+   |\n+LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         panic!(\"error\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:8:9\n+   |\n+LL |         panic!(\"error\");\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:11:5\n+   |\n+LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:13:9\n+   |\n+LL |         unimplemented!();\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:16:5\n+   |\n+LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unreachable!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:18:9\n+   |\n+LL |         unreachable!();\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:21:5\n+   |\n+LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         todo!(\"Finish this\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:23:9\n+   |\n+LL |         todo!(\"Finish this\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:52:1\n+   |\n+LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+LL | | {\n+LL | |     panic!(\"error\");\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:54:5\n+   |\n+LL |     panic!(\"error\");\n+   |     ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:67:1\n+   |\n+LL | / fn main() -> Result<(), String> {\n+LL | |     todo!(\"finish main method\");\n+LL | |     Ok(())\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:68:5\n+   |\n+LL |     todo!(\"finish main method\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}]}