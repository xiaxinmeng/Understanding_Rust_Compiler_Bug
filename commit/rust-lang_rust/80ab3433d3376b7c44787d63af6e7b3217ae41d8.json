{"sha": "80ab3433d3376b7c44787d63af6e7b3217ae41d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYWIzNDMzZDMzNzZiN2M0NDc4N2Q2M2FmNmU3YjMyMTdhZTQxZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T17:37:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T17:37:33Z"}, "message": "complete imports", "tree": {"sha": "acd067ca08c5155521444d3975f8ba016bcc8424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd067ca08c5155521444d3975f8ba016bcc8424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ab3433d3376b7c44787d63af6e7b3217ae41d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab3433d3376b7c44787d63af6e7b3217ae41d8", "html_url": "https://github.com/rust-lang/rust/commit/80ab3433d3376b7c44787d63af6e7b3217ae41d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ab3433d3376b7c44787d63af6e7b3217ae41d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e14a99ed4d0baf849bbd5766f6c16e7d37930c", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e14a99ed4d0baf849bbd5766f6c16e7d37930c", "html_url": "https://github.com/rust-lang/rust/commit/49e14a99ed4d0baf849bbd5766f6c16e7d37930c"}], "stats": {"total": 199, "additions": 180, "deletions": 19}, "files": [{"sha": "25faee3b8f02a1470a01d4b50ffb268cf46cd00d", "filename": "crates/libeditor/src/scope/mod_scope.rs", "status": "modified", "additions": 74, "deletions": 14, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs?ref=80ab3433d3376b7c44787d63af6e7b3217ae41d8", "patch": "@@ -6,21 +6,38 @@ pub struct ModuleScope {\n     entries: Vec<Entry>,\n }\n \n+pub struct Entry {\n+    node: SyntaxNode,\n+    kind: EntryKind,\n+}\n+\n+enum EntryKind {\n+    Item, Import,\n+}\n+\n impl ModuleScope {\n     pub fn new(m: ast::Root) -> ModuleScope {\n-        let entries = m.items().filter_map(|item| {\n-            match item {\n+        let mut entries = Vec::new();\n+        for item in m.items() {\n+            let entry = match item {\n                 ast::ModuleItem::StructDef(item) => Entry::new(item),\n                 ast::ModuleItem::EnumDef(item) => Entry::new(item),\n                 ast::ModuleItem::FnDef(item) => Entry::new(item),\n                 ast::ModuleItem::ConstDef(item) => Entry::new(item),\n                 ast::ModuleItem::StaticDef(item) => Entry::new(item),\n                 ast::ModuleItem::TraitDef(item) => Entry::new(item),\n+                ast::ModuleItem::Module(item) => Entry::new(item),\n+                ast::ModuleItem::UseItem(item) => {\n+                    if let Some(tree) = item.use_tree() {\n+                        collect_imports(tree, &mut entries);\n+                    }\n+                    continue;\n+                },\n                 ast::ModuleItem::ExternCrateItem(_) |\n-                ast::ModuleItem::ImplItem(_) |\n-                ast::ModuleItem::UseItem(_) => None\n-            }\n-        }).collect();\n+                ast::ModuleItem::ImplItem(_) => continue,\n+            };\n+            entries.extend(entry)\n+        }\n \n         ModuleScope { entries }\n     }\n@@ -30,20 +47,63 @@ impl ModuleScope {\n     }\n }\n \n-pub struct Entry {\n-    name: SyntaxNode,\n-}\n-\n impl Entry {\n     fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n         let name = item.name()?;\n-        Some(Entry { name: name.syntax().owned() })\n+        Some(Entry { node: name.syntax().owned(), kind: EntryKind::Item })\n+    }\n+    fn new_import(path: ast::Path) -> Option<Entry> {\n+        let name_ref = path.segment()?.name_ref()?;\n+        Some(Entry { node: name_ref.syntax().owned(), kind: EntryKind::Import })\n     }\n     pub fn name(&self) -> SmolStr {\n-        self.ast().text()\n+        match self.kind {\n+            EntryKind::Item =>\n+                ast::Name::cast(self.node.borrowed()).unwrap()\n+                    .text(),\n+            EntryKind::Import =>\n+                ast::NameRef::cast(self.node.borrowed()).unwrap()\n+                    .text(),\n+        }\n     }\n-    fn ast(&self) -> ast::Name {\n-        ast::Name::cast(self.name.borrowed()).unwrap()\n+}\n+\n+fn collect_imports(tree: ast::UseTree, acc: &mut Vec<Entry>) {\n+    if let Some(use_tree_list) = tree.use_tree_list() {\n+        return use_tree_list.use_trees().for_each(|it| collect_imports(it, acc));\n+    }\n+    if let Some(path) = tree.path() {\n+        acc.extend(Entry::new_import(path));\n     }\n }\n \n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use libsyntax2::File;\n+\n+    fn do_check(code: &str, expected: &[&str]) {\n+        let file = File::parse(&code);\n+        let scope = ModuleScope::new(file.ast());\n+        let actual = scope.entries\n+            .iter()\n+            .map(|it| it.name())\n+            .collect::<Vec<_>>();\n+        assert_eq!(expected, actual.as_slice());\n+    }\n+\n+    #[test]\n+    fn test_module_scope() {\n+        do_check(\"\n+            struct Foo;\n+            enum Bar {}\n+            mod baz {}\n+            fn quux() {}\n+            use x::{\n+                y::z,\n+                t,\n+            };\n+        \", &[\"Foo\", \"Bar\", \"baz\", \"quux\", \"z\", \"t\"])\n+    }\n+}"}, {"sha": "1bb3b11d14085918ee9fcb72b45d4342cb778aec", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 83, "deletions": 2, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=80ab3433d3376b7c44787d63af6e7b3217ae41d8", "patch": "@@ -977,6 +977,7 @@ pub enum ModuleItem<'a> {\n     ExternCrateItem(ExternCrateItem<'a>),\n     ConstDef(ConstDef<'a>),\n     StaticDef(StaticDef<'a>),\n+    Module(Module<'a>),\n }\n \n impl<'a> AstNode<'a> for ModuleItem<'a> {\n@@ -991,6 +992,7 @@ impl<'a> AstNode<'a> for ModuleItem<'a> {\n             EXTERN_CRATE_ITEM => Some(ModuleItem::ExternCrateItem(ExternCrateItem { syntax })),\n             CONST_DEF => Some(ModuleItem::ConstDef(ConstDef { syntax })),\n             STATIC_DEF => Some(ModuleItem::StaticDef(StaticDef { syntax })),\n+            MODULE => Some(ModuleItem::Module(Module { syntax })),\n             _ => None,\n         }\n     }\n@@ -1005,6 +1007,7 @@ impl<'a> AstNode<'a> for ModuleItem<'a> {\n             ModuleItem::ExternCrateItem(inner) => inner.syntax(),\n             ModuleItem::ConstDef(inner) => inner.syntax(),\n             ModuleItem::StaticDef(inner) => inner.syntax(),\n+            ModuleItem::Module(inner) => inner.syntax(),\n         }\n     }\n }\n@@ -1294,7 +1297,11 @@ impl<'a> AstNode<'a> for Path<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Path<'a> {}\n+impl<'a> Path<'a> {\n+    pub fn segment(self) -> Option<PathSegment<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // PathExpr\n #[derive(Debug, Clone, Copy)]\n@@ -1332,6 +1339,28 @@ impl<'a> AstNode<'a> for PathPat<'a> {\n \n impl<'a> PathPat<'a> {}\n \n+// PathSegment\n+#[derive(Debug, Clone, Copy)]\n+pub struct PathSegment<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for PathSegment<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            PATH_SEGMENT => Some(PathSegment { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> PathSegment<'a> {\n+    pub fn name_ref(self) -> Option<NameRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // PathType\n #[derive(Debug, Clone, Copy)]\n pub struct PathType<'a> {\n@@ -1989,7 +2018,59 @@ impl<'a> AstNode<'a> for UseItem<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> UseItem<'a> {}\n+impl<'a> UseItem<'a> {\n+    pub fn use_tree(self) -> Option<UseTree<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// UseTree\n+#[derive(Debug, Clone, Copy)]\n+pub struct UseTree<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for UseTree<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            USE_TREE => Some(UseTree { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> UseTree<'a> {\n+    pub fn path(self) -> Option<Path<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn use_tree_list(self) -> Option<UseTreeList<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// UseTreeList\n+#[derive(Debug, Clone, Copy)]\n+pub struct UseTreeList<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for UseTreeList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            USE_TREE_LIST => Some(UseTreeList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> UseTreeList<'a> {\n+    pub fn use_trees(self) -> impl Iterator<Item = UseTree<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // WhereClause\n #[derive(Debug, Clone, Copy)]"}, {"sha": "8267c28544c2e9578e3ead13f6a556f8c80a999e", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/80ab3433d3376b7c44787d63af6e7b3217ae41d8/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=80ab3433d3376b7c44787d63af6e7b3217ae41d8", "patch": "@@ -337,7 +337,7 @@ Grammar(\n         ),\n         \"ModuleItem\": (\n             enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"ImplItem\",\n-                   \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\" ]\n+                   \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ]\n         ),\n \n         \"TupleExpr\": (),\n@@ -507,13 +507,33 @@ Grammar(\n         \"Param\": (\n             options: [[\"pat\", \"Pat\"]],\n         ),\n-        \"UseItem\": (),\n+        \"UseItem\": (\n+            options: [[\"use_tree\", \"UseTree\"]]\n+        ),\n+        \"UseTree\": (\n+            options: [\n+                [\"path\", \"Path\"],\n+                [\"use_tree_list\", \"UseTreeList\"],\n+            ]\n+        ),\n+        \"UseTreeList\": (\n+            collections: [[\"use_trees\", \"UseTree\"]]\n+        ),\n         \"ExternCrateItem\": (),\n         \"ArgList\": (\n             collections: [\n                 [\"args\", \"Expr\"]\n             ]\n         ),\n-        \"Path\": (),\n+        \"Path\": (\n+            options: [\n+                [\"segment\", \"PathSegment\"]\n+            ]\n+        ),\n+        \"PathSegment\": (\n+            options: [\n+                [\"name_ref\", \"NameRef\"]\n+            ]\n+        ),\n     },\n )"}]}