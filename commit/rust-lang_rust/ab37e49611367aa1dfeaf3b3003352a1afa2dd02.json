{"sha": "ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzdlNDk2MTEzNjdhYTFkZmVhZjNiMzAwMzM1MmExYWZhMmRkMDI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T15:54:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T15:54:56Z"}, "message": "Rollup merge of #88418 - fee1-dead:trait-assoc-tilde-const, r=oli-obk\n\nAllow `~const` bounds on trait assoc functions\n\nr? `@oli-obk`", "tree": {"sha": "6174b4991443843bd04d1832a22c106d0bdaac50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6174b4991443843bd04d1832a22c106d0bdaac50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLlDQCRBK7hj4Ov3rIwAANYsIAArb7IfnyuWD2wrQepIjVDOJ\no1fSdc+1+bZihEmfCpH9tbqdJ5nSg4HESBfRsxOIxFiFGxnOwG9PDdTZBBafRIuI\nTM9n1cAtOnj53McADXafSYTUMxNpoCIxtgg6MoCS/n+z/+5lrzmU+bylq/fqVrXA\nRfK78sBrQN2tRQclzyFFsL3KpEOk2zElOmmVmzkm71OJ6ZLbaDbvRzSWSGFVJCW5\n0hZdPC6q8UiQqpHow+6B4mvZGWlkuK6UU6T8ZEhL467wo4pDYovVaj46EtuzGJr2\nFjD2yyDi5ecwEYsURkRU9XBDr/BS/of6asKvvonCPxTQsXeVSL3gGhZaEfKvelI=\n=yNbr\n-----END PGP SIGNATURE-----\n", "payload": "tree 6174b4991443843bd04d1832a22c106d0bdaac50\nparent 4d089088f6f531c4126ec47620bf9a570f548316\nparent ee02c8e20a5098e77251bb07cca5fe9b932c84d7\nauthor Mara Bos <m-ou.se@m-ou.se> 1630425296 +0200\ncommitter GitHub <noreply@github.com> 1630425296 +0200\n\nRollup merge of #88418 - fee1-dead:trait-assoc-tilde-const, r=oli-obk\n\nAllow `~const` bounds on trait assoc functions\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "html_url": "https://github.com/rust-lang/rust/commit/ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d089088f6f531c4126ec47620bf9a570f548316", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d089088f6f531c4126ec47620bf9a570f548316", "html_url": "https://github.com/rust-lang/rust/commit/4d089088f6f531c4126ec47620bf9a570f548316"}, {"sha": "ee02c8e20a5098e77251bb07cca5fe9b932c84d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee02c8e20a5098e77251bb07cca5fe9b932c84d7", "html_url": "https://github.com/rust-lang/rust/commit/ee02c8e20a5098e77251bb07cca5fe9b932c84d7"}], "stats": {"total": 188, "additions": 180, "deletions": 8}, "files": [{"sha": "a243300edd9d2be480e3581bdcc970fe0edb3dff", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -1442,7 +1442,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if !self.is_tilde_const_allowed {\n                     self.err_handler()\n                         .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                        .note(\"only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\")\n+                        .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n                         .emit();\n                 }\n             }\n@@ -1616,7 +1616,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_ty, ty);\n             }\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n-                if self.in_const_trait_impl =>\n+                if self.in_const_trait_impl || ctxt == AssocCtxt::Trait =>\n             {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);"}, {"sha": "033ec21ba8408defa7bc509cef0053531482df2c", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -4,47 +4,47 @@ error: `~const` is not allowed here\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:11:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:14:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:17:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:20:15\n    |\n LL | fn generic<P: ~const T>() {}\n    |               ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:23:31\n    |\n LL | fn where_clause<P>() where P: ~const T {}\n    |                               ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n   --> $DIR/tilde-const-invalid-places.rs:26:25"}, {"sha": "0cde5b6f84218951370ff4b47730b7659be77ef8", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-run.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+trait Bar {\n+    fn bar() -> u8;\n+}\n+\n+trait Foo {\n+    #[default_method_body_is_const]\n+    fn foo() -> u8 where Self: ~const Bar {\n+        <Self as Bar>::bar() * 6\n+    }\n+}\n+\n+struct NonConst;\n+struct Const;\n+\n+impl Bar for NonConst {\n+    fn bar() -> u8 {\n+        3\n+    }\n+}\n+\n+impl Foo for NonConst {}\n+\n+impl const Bar for Const {\n+    fn bar() -> u8 {\n+        4\n+    }\n+}\n+\n+impl const Foo for Const {}\n+\n+fn main() {\n+    const ANS1: u8 = Const::foo();\n+    let ans2 = NonConst::foo();\n+\n+    assert_eq!(ANS1 + ans2, 42);\n+}"}, {"sha": "ae9ab26cdc04ad708706007e9bc19e9dc742f512", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-self-referential.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+trait Foo {\n+    fn bar() where Self: ~const Foo;\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar() {}\n+}\n+\n+fn baz<T: Foo>() {\n+    T::bar();\n+}\n+\n+const fn qux<T: ~const Foo>() {\n+    T::bar();\n+}\n+\n+fn main() {}"}, {"sha": "d64822d7ce8af77a4d5296a668dfffe0c8551f5d", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -0,0 +1,40 @@\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+trait Bar {}\n+\n+trait Foo {\n+    fn a();\n+    fn b() where Self: ~const Bar;\n+    fn c<T: ~const Bar>();\n+}\n+\n+const fn test1<T: ~const Foo + Bar>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+    T::c::<T>();\n+    //~^ ERROR the trait bound\n+}\n+\n+const fn test2<T: ~const Foo + ~const Bar>() {\n+    T::a();\n+    T::b();\n+    T::c::<T>();\n+}\n+\n+fn test3<T: Foo>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+    T::c::<T>();\n+    //~^ ERROR the trait bound\n+}\n+\n+fn test4<T: Foo + Bar>() {\n+    T::a();\n+    T::b();\n+    T::c::<T>();\n+}\n+\n+fn main() {}"}, {"sha": "fffb91f98700bdf8f9c9210468645a851944d9ca", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab37e49611367aa1dfeaf3b3003352a1afa2dd02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "patch": "@@ -0,0 +1,67 @@\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:14:5\n+   |\n+LL |     T::b();\n+   |     ^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:5\n+   |\n+LL |     fn b() where Self: ~const Bar;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n+   |                                    +++++\n+\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:16:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n+   |\n+LL |     fn c<T: ~const Bar>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n+   |                                    +++++\n+\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:28:5\n+   |\n+LL |     T::b();\n+   |     ^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:5\n+   |\n+LL |     fn b() where Self: ~const Bar;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | fn test3<T: Foo + Bar>() {\n+   |                 +++++\n+\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:30:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n+   |\n+LL |     fn c<T: ~const Bar>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | fn test3<T: Foo + Bar>() {\n+   |                 +++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}