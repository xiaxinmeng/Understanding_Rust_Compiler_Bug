{"sha": "e845da90f9a49335ed379ed12ad0607ca3e933cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDVkYTkwZjlhNDkzMzVlZDM3OWVkMTJhZDA2MDdjYTNlOTMzY2I=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-31T20:53:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-31T20:53:34Z"}, "message": "Rollup merge of #36083 - GuillaumeGomez:missing_convert_urls, r=steveklabnik\n\nAdd missing urls into convert module\n\nr? @steveklabnik", "tree": {"sha": "d509331d64ea536f561d5a1b081e2d2e7b6a4dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d509331d64ea536f561d5a1b081e2d2e7b6a4dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e845da90f9a49335ed379ed12ad0607ca3e933cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e845da90f9a49335ed379ed12ad0607ca3e933cb", "html_url": "https://github.com/rust-lang/rust/commit/e845da90f9a49335ed379ed12ad0607ca3e933cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e845da90f9a49335ed379ed12ad0607ca3e933cb/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe51295b3e40e3f62b4949ba3b1eeeca9a8eaef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe51295b3e40e3f62b4949ba3b1eeeca9a8eaef", "html_url": "https://github.com/rust-lang/rust/commit/bfe51295b3e40e3f62b4949ba3b1eeeca9a8eaef"}, {"sha": "b712f74508f278a407b27c5b66d3dff1637bb6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b712f74508f278a407b27c5b66d3dff1637bb6fa", "html_url": "https://github.com/rust-lang/rust/commit/b712f74508f278a407b27c5b66d3dff1637bb6fa"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "5191cd76010649caa6b1e942916606bab6d18831", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e845da90f9a49335ed379ed12ad0607ca3e933cb/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e845da90f9a49335ed379ed12ad0607ca3e933cb/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e845da90f9a49335ed379ed12ad0607ca3e933cb", "patch": "@@ -42,17 +42,23 @@\n \n /// A cheap, reference-to-reference conversion.\n ///\n-/// `AsRef` is very similar to, but different than, `Borrow`. See\n+/// `AsRef` is very similar to, but different than, [`Borrow`]. See\n /// [the book][book] for more.\n ///\n /// [book]: ../../book/borrow-and-asref.html\n+/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an `Option<T>` or a `Result<T, E>`.\n+/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Examples\n ///\n-/// Both `String` and `&str` implement `AsRef<str>`:\n+/// Both [`String`] and `&str` implement `AsRef<str>`:\n+///\n+/// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```\n /// fn is_hello<T: AsRef<str>>(s: T) {\n@@ -81,7 +87,10 @@ pub trait AsRef<T: ?Sized> {\n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an `Option<T>` or a `Result<T, E>`.\n+/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Generic Impls\n ///\n@@ -97,16 +106,16 @@ pub trait AsMut<T: ?Sized> {\n \n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use `TryInto` or a dedicated\n-/// method which returns an `Option<T>` or a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use [`TryInto`] or a dedicated\n+/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// Library authors should not directly implement this trait, but should prefer implementing\n-/// the `From` trait, which offers greater flexibility and provides an equivalent `Into`\n+/// the [`From`][From] trait, which offers greater flexibility and provides an equivalent `Into`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n ///\n /// # Examples\n ///\n-/// `String` implements `Into<Vec<u8>>`:\n+/// [`String`] implements `Into<Vec<u8>>`:\n ///\n /// ```\n /// fn is_hello<T: Into<Vec<u8>>>(s: T) {\n@@ -120,9 +129,15 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// # Generic Impls\n ///\n-/// - `From<T> for U` implies `Into<U> for T`\n-/// - `into()` is reflexive, which means that `Into<T> for T` is implemented\n+/// - `[From<T>][From] for U` implies `Into<U> for T`\n+/// - [`into()`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n+/// [`TryInto`]: trait.TryInto.html\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`String`]: ../../std/string/struct.String.html\n+/// [From]: trait.From.html\n+/// [`into()`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -132,12 +147,12 @@ pub trait Into<T>: Sized {\n \n /// Construct `Self` via a conversion.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use `TryFrom` or a dedicated\n-/// method which returns an `Option<T>` or a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use [`TryFrom`] or a dedicated\n+/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// # Examples\n ///\n-/// `String` implements `From<&str>`:\n+/// [`String`] implements `From<&str>`:\n ///\n /// ```\n /// let string = \"hello\".to_string();\n@@ -147,9 +162,15 @@ pub trait Into<T>: Sized {\n /// ```\n /// # Generic impls\n ///\n-/// - `From<T> for U` implies `Into<U> for T`\n-/// - `from()` is reflexive, which means that `From<T> for T` is implemented\n+/// - `From<T> for U` implies `[Into<U>] for T`\n+/// - [`from()`] is reflexive, which means that `From<T> for T` is implemented\n ///\n+/// [`TryFrom`]: trait.TryFrom.html\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`String`]: ../../std/string/struct.String.html\n+/// [Into<U>]: trait.Into.html\n+/// [`from()`]: trait.From.html#tymethod.from\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n@@ -160,8 +181,10 @@ pub trait From<T>: Sized {\n /// An attempted conversion that consumes `self`, which may or may not be expensive.\n ///\n /// Library authors should not directly implement this trait, but should prefer implementing\n-/// the `TryFrom` trait, which offers greater flexibility and provides an equivalent `TryInto`\n+/// the [`TryFrom`] trait, which offers greater flexibility and provides an equivalent `TryInto`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n+///\n+/// [`TryFrom`]: trait.TryFrom.html\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error."}]}