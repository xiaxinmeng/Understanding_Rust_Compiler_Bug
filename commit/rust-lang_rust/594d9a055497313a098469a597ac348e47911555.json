{"sha": "594d9a055497313a098469a597ac348e47911555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NGQ5YTA1NTQ5NzMxM2EwOTg0NjlhNTk3YWMzNDhlNDc5MTE1NTU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-10T18:40:03Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T05:00:48Z"}, "message": "Use protocol compiler in future.rs. Also split recv into recv and try_recv.", "tree": {"sha": "3d4fd5a51d801c199bb3021d501d71ea99a0a736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4fd5a51d801c199bb3021d501d71ea99a0a736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594d9a055497313a098469a597ac348e47911555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594d9a055497313a098469a597ac348e47911555", "html_url": "https://github.com/rust-lang/rust/commit/594d9a055497313a098469a597ac348e47911555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594d9a055497313a098469a597ac348e47911555/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e6eb3d14d7ff3bcbfa5ca442a6928776982e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e6eb3d14d7ff3bcbfa5ca442a6928776982e98", "html_url": "https://github.com/rust-lang/rust/commit/26e6eb3d14d7ff3bcbfa5ca442a6928776982e98"}], "stats": {"total": 92, "additions": 22, "deletions": 70}, "files": [{"sha": "05af670db178b36da8dd82461df48a71807b4ea0", "filename": "src/libcore/future.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -12,6 +12,7 @@\n  */\n \n import either::either;\n+import pipes::recv;\n \n export future;\n export extensions;\n@@ -60,10 +61,6 @@ fn from_value<A>(+val: A) -> future<A> {\n }\n \n fn macros() {\n-    #macro[\n-        [#recv[chan],\n-         chan.recv()(chan)]\n-    ];\n     #macro[\n         [#move[x],\n          unsafe { let y <- *ptr::addr_of(x); y }]\n@@ -77,14 +74,13 @@ fn from_port<A:send>(-port: future_pipe::client::waiting<A>) -> future<A> {\n     The first time that the value is requested the task will block\n     waiting for the result to be received on the port.\n     \"];\n-    import future_pipe::client::recv;\n \n     let port = ~mut some(port);\n     do from_fn |move port| {\n         let mut port_ = none;\n         port_ <-> *port;\n         let port = option::unwrap(port_);\n-        alt (#recv(port)) {\n+        alt recv(port) {\n           future_pipe::completed(data, _next) { #move(data) }\n         }\n     }\n@@ -137,55 +133,12 @@ fn with<A,B>(future: future<A>, blk: fn(A) -> B) -> B {\n     blk(*v)\n }\n \n-// The pipe protocol, generated by pipec\n-/*\n proto! future_pipe {\n     waiting:recv<T:send> {\n         completed(T) -> terminated\n     }\n \n-    terminated { }\n-}\n-*/\n-mod future_pipe {\n-    fn init<T: send>() -> (client::waiting<T>, server::waiting<T>) {\n-        { let (s, c) = pipes::entangle(); (c, s) }\n-    }\n-    enum waiting<T: send> { completed(T, client::terminated), }\n-    enum terminated { }\n-    mod client {\n-        impl recv<T: send> for waiting<T> {\n-            fn recv() -> extern fn(+waiting<T>) -> future_pipe::waiting<T> {\n-                fn recv<T: send>(+pipe: waiting<T>) ->\n-                   future_pipe::waiting<T> {\n-                    option::unwrap(pipes::recv(pipe))\n-                }\n-                recv\n-            }\n-        }\n-        type waiting<T: send> = pipes::recv_packet<future_pipe::waiting<T>>;\n-        type terminated = pipes::send_packet<future_pipe::terminated>;\n-    }\n-    mod server {\n-        fn completed<T: send>(+pipe: waiting<T>, +x_0: T) -> terminated {\n-            {\n-                let (s, c) = pipes::entangle();\n-                let message = future_pipe::completed(x_0, s);\n-                pipes::send(pipe, message);\n-                c\n-            }\n-        }\n-        type waiting<T: send> = pipes::send_packet<future_pipe::waiting<T>>;\n-        impl recv for terminated {\n-            fn recv() -> extern fn(+terminated) -> future_pipe::terminated {\n-                fn recv(+pipe: terminated) -> future_pipe::terminated {\n-                    option::unwrap(pipes::recv(pipe))\n-                }\n-                recv\n-            }\n-        }\n-        type terminated = pipes::recv_packet<future_pipe::terminated>;\n-    }\n+    terminated:send { }\n }\n \n #[test]"}, {"sha": "94c99361ef840f9888895b2aa5d1975d9478c37b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -117,7 +117,11 @@ fn send<T: send>(-p: send_packet<T>, -payload: T) {\n     }\n }\n \n-fn recv<T: send>(-p: recv_packet<T>) -> option<T> {\n+fn recv<T: send>(-p: recv_packet<T>) -> T {\n+    option::unwrap(try_recv(p))\n+}\n+\n+fn try_recv<T: send>(-p: recv_packet<T>) -> option<T> {\n     let p_ = p.unwrap();\n     let p = unsafe { uniquify(p_) };\n     let this = rustrt::rust_get_task();\n@@ -288,10 +292,10 @@ fn select2<A: send, B: send>(\n \n     unsafe {\n         alt i {\n-          0 { left((recv(recv_packet(transmute(a))),\n+          0 { left((try_recv(recv_packet(transmute(a))),\n                     recv_packet(transmute(b)))) }\n           1 { right((recv_packet(transmute(a)),\n-                     recv(recv_packet(transmute(b))))) }\n+                     try_recv(recv_packet(transmute(b))))) }\n           _ { fail \"select2 return an invalid packet\" }\n         }\n     }\n@@ -312,7 +316,7 @@ fn select<T: send>(+endpoints: ~[recv_packet<T>])\n     do vec::consume(endpoints) |i, p| {\n         let p = recv_packet(unsafe { unsafe::transmute(p) });\n         if i == ready {\n-            result = recv(p);\n+            result = try_recv(p);\n         }\n         else {\n             vec::push(remaining, p);"}, {"sha": "aad9cdcdffa95b71584728a7970a4c427399ee82", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -43,7 +43,7 @@ fn thread_ring(i: uint,\n         num_port2 <-> num_port;\n         num_chan = some(ring::client::num(option::unwrap(num_chan2), i * j));\n         let port = option::unwrap(num_port2);\n-        alt (option::unwrap(recv(port))) {\n+        alt recv(port) {\n           ring::num(_n, p) {\n             //log(error, _n);\n             num_port = some(#move(p));"}, {"sha": "488af7a9b23ac123649d1554bce70ce7f4956f4e", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -43,7 +43,7 @@ mod stream {\n             let mut endp = none;\n             endp <-> self.endp;\n             let streamp::data(x, endp) = unwrap(\n-                pipes::recv(unwrap(endp)));\n+                pipes::try_recv(unwrap(endp)));\n             self.endp = some(endp);\n             x\n         }"}, {"sha": "8c3f1c00c7076f020d16c8163c6d8e1409df65ef", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -4,7 +4,7 @@\n //\n // http://theincredibleholk.wordpress.com/2012/07/06/rusty-pipes/\n \n-import pipes::recv;\n+import pipes::try_recv;\n \n type username = str;\n type password = str;\n@@ -43,7 +43,7 @@ fn bank_client(+bank: bank::client::login) {\n     import bank::*;\n \n     let bank = client::login(bank, \"theincredibleholk\", \"1234\");\n-    let bank = alt recv(bank) {\n+    let bank = alt try_recv(bank) {\n       some(ok(connected)) {\n         #move(connected)\n       }\n@@ -53,7 +53,7 @@ fn bank_client(+bank: bank::client::login) {\n \n     let bank = client::deposit(bank, 100.00);\n     let bank = client::withdrawal(bank, 50.00);\n-    alt recv(bank) {\n+    alt try_recv(bank) {\n       some(money(m, _)) {\n         io::println(\"Yay! I got money!\");\n       }"}, {"sha": "167d81ad8b392ee3e1bf74885c275a5731d1fac7", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -6,7 +6,7 @@ use std;\n import std::timer::sleep;\n import std::uv;\n \n-import pipes::{recv};\n+import pipes::{try_recv, recv};\n \n proto! oneshot {\n     waiting:send {\n@@ -20,7 +20,7 @@ fn main() {\n     let iotask = uv::global_loop::get();\n     \n     let c = pipes::spawn_service(oneshot::init, |p| { \n-        alt recv(p) {\n+        alt try_recv(p) {\n           some(*) { fail }\n           none { }\n         }"}, {"sha": "d0ea4a9a877e6b2639d9a06b733538be43f68926", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -21,14 +21,14 @@ mod test {\n \n         let chan = client::ping(chan);\n         log(error, \"Sent ping\");\n-        let pong(_chan) = option::unwrap(recv(chan));\n+        let pong(_chan) = recv(chan);\n         log(error, \"Received pong\");\n     }\n     \n     fn server(-chan: pingpong::server::ping) {\n         import pingpong::server;\n \n-        let ping(chan) = option::unwrap(recv(chan));\n+        let ping(chan) = recv(chan);\n         log(error, \"Received ping\");\n         let _chan = server::pong(chan);\n         log(error, \"Sent pong\");"}, {"sha": "1b1cc818074743dd4e169f3d0cf51b3db3400664", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594d9a055497313a098469a597ac348e47911555/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=594d9a055497313a098469a597ac348e47911555", "patch": "@@ -26,14 +26,9 @@ fn main() {\n \n     let iotask = uv::global_loop::get();\n     \n-    #macro[\n-        [#recv[chan],\n-         chan.recv()(chan)]\n-    ];\n-\n     let c = pipes::spawn_service(stream::init, |p| { \n         #error(\"waiting for pipes\");\n-        let stream::send(x, p) = option::unwrap(recv(p));\n+        let stream::send(x, p) = recv(p);\n         #error(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)\n@@ -44,7 +39,7 @@ fn main() {\n         assert i == 0;\n \n         #error(\"waiting for pipes\");\n-        let stream::send(x, _) = option::unwrap(recv(p));\n+        let stream::send(x, _) = recv(p);\n         #error(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)"}]}