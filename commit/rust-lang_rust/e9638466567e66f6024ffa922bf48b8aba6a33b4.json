{"sha": "e9638466567e66f6024ffa922bf48b8aba6a33b4", "node_id": "C_kwDOAAsO6NoAKGU5NjM4NDY2NTY3ZTY2ZjYwMjRmZmE5MjJiZjQ4YjhhYmE2YTMzYjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T12:03:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T12:03:44Z"}, "message": "Auto merge of #14816 - justahero:gh-14626, r=Veykril\n\nfeat: Assist to replace generic with impl trait\n\nThis adds a new assist named \"Replace named generic with impl\". It is the inverse operation to the existing \"Replace impl trait with generic\" assist.\n\nIt allows to refactor the following statement:\n\n```rust\n//      \ud83d\udc47 cursor\nfn new<T$0: ToString>(input: T) -> Self {}\n```\n\nto be transformed into:\n\n```rust\nfn new(input: impl ToString) -> Self {}\n```\n\n* adds new helper function `impl_trait_type` to create AST node\n* add method to remove an existing generic param type from param list\n\nCloses #14626", "tree": {"sha": "611313edd9c3687daf253ffaad4283a3ce5a4e61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611313edd9c3687daf253ffaad4283a3ce5a4e61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9638466567e66f6024ffa922bf48b8aba6a33b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9638466567e66f6024ffa922bf48b8aba6a33b4", "html_url": "https://github.com/rust-lang/rust/commit/e9638466567e66f6024ffa922bf48b8aba6a33b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9638466567e66f6024ffa922bf48b8aba6a33b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8589a2d843487081530d49100927e385d80cb836", "url": "https://api.github.com/repos/rust-lang/rust/commits/8589a2d843487081530d49100927e385d80cb836", "html_url": "https://github.com/rust-lang/rust/commit/8589a2d843487081530d49100927e385d80cb836"}, {"sha": "e78df83e2fb89b475187f7d4b631a68619b590b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78df83e2fb89b475187f7d4b631a68619b590b5", "html_url": "https://github.com/rust-lang/rust/commit/e78df83e2fb89b475187f7d4b631a68619b590b5"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "f32ceb42654bb6a48a64a2f53b36813fbb5d5f28", "filename": "crates/ide-assists/src/handlers/replace_named_generic_with_impl.rs", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs?ref=e9638466567e66f6024ffa922bf48b8aba6a33b4", "patch": "@@ -0,0 +1,213 @@\n+use hir::Semantics;\n+use ide_db::{\n+    base_db::{FileId, FileRange},\n+    defs::Definition,\n+    search::SearchScope,\n+    RootDatabase,\n+};\n+use syntax::{\n+    ast::{self, make::impl_trait_type, HasGenericParams, HasName, HasTypeBounds},\n+    ted, AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_named_generic_with_impl\n+//\n+// Replaces named generic with an `impl Trait` in function argument.\n+//\n+// ```\n+// fn new<P$0: AsRef<Path>>(location: P) -> Self {}\n+// ```\n+// ->\n+// ```\n+// fn new(location: impl AsRef<Path>) -> Self {}\n+// ```\n+pub(crate) fn replace_named_generic_with_impl(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    // finds `<P: AsRef<Path>>`\n+    let type_param = ctx.find_node_at_offset::<ast::TypeParam>()?;\n+    // returns `P`\n+    let type_param_name = type_param.name()?;\n+\n+    // The list of type bounds / traits: `AsRef<Path>`\n+    let type_bound_list = type_param.type_bound_list()?;\n+\n+    let fn_ = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let params = fn_\n+        .param_list()?\n+        .params()\n+        .filter_map(|param| {\n+            // function parameter type needs to match generic type name\n+            if let ast::Type::PathType(path_type) = param.ty()? {\n+                let left = path_type.path()?.segment()?.name_ref()?.ident_token()?.to_string();\n+                let right = type_param_name.to_string();\n+                if left == right {\n+                    Some(param)\n+                } else {\n+                    None\n+                }\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if params.is_empty() {\n+        return None;\n+    }\n+\n+    let type_param_hir_def = ctx.sema.to_def(&type_param)?;\n+    let type_param_def = Definition::GenericParam(hir::GenericParam::TypeParam(type_param_hir_def));\n+\n+    if is_referenced_outside(&ctx.sema, type_param_def, &fn_, ctx.file_id()) {\n+        return None;\n+    }\n+\n+    let target = type_param.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"replace_named_generic_with_impl\", AssistKind::RefactorRewrite),\n+        \"Replace named generic with impl\",\n+        target,\n+        |edit| {\n+            let type_param = edit.make_mut(type_param);\n+            let fn_ = edit.make_mut(fn_);\n+\n+            // get all params\n+            let param_types = params\n+                .iter()\n+                .filter_map(|param| match param.ty() {\n+                    Some(ast::Type::PathType(param_type)) => Some(edit.make_mut(param_type)),\n+                    _ => None,\n+                })\n+                .collect::<Vec<_>>();\n+\n+            if let Some(generic_params) = fn_.generic_param_list() {\n+                generic_params.remove_generic_param(ast::GenericParam::TypeParam(type_param));\n+                if generic_params.generic_params().count() == 0 {\n+                    ted::remove(generic_params.syntax());\n+                }\n+            }\n+\n+            // get type bounds in signature type: `P` -> `impl AsRef<Path>`\n+            let new_bounds = impl_trait_type(type_bound_list);\n+            for param_type in param_types.iter().rev() {\n+                ted::replace(param_type.syntax(), new_bounds.clone_for_update().syntax());\n+            }\n+        },\n+    )\n+}\n+\n+fn is_referenced_outside(\n+    sema: &Semantics<'_, RootDatabase>,\n+    type_param_def: Definition,\n+    fn_: &ast::Fn,\n+    file_id: FileId,\n+) -> bool {\n+    // limit search scope to function body & return type\n+    let search_ranges = vec![\n+        fn_.body().map(|body| body.syntax().text_range()),\n+        fn_.ret_type().map(|ret_type| ret_type.syntax().text_range()),\n+    ];\n+\n+    search_ranges.into_iter().flatten().any(|search_range| {\n+        let file_range = FileRange { file_id, range: search_range };\n+        !type_param_def.usages(sema).in_scope(SearchScope::file_range(file_range)).all().is_empty()\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn replace_generic_moves_into_function() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString>(input: T) -> Self {}\"#,\n+            r#\"fn new(input: impl ToString) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_inner_associated_type() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: AsRef<Path>>(input: P) -> Self {}\"#,\n+            r#\"fn new(input: impl AsRef<Path>) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_trait_applies_to_all_matching_params() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString>(a: T, b: T) -> Self {}\"#,\n+            r#\"fn new(a: impl ToString, b: impl ToString) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_multiple_generic_params() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P: AsRef<Path>, T$0: ToString>(t: T, p: P) -> Self {}\"#,\n+            r#\"fn new<P: AsRef<Path>>(t: impl ToString, p: P) -> Self {}\"#,\n+        );\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString, P: AsRef<Path>>(t: T, p: P) -> Self {}\"#,\n+            r#\"fn new<P: AsRef<Path>>(t: impl ToString, p: P) -> Self {}\"#,\n+        );\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<A: Send, B$0: ToString, C: Debug>(a: A, b: B, c: C) -> Self {}\"#,\n+            r#\"fn new<A: Send, C: Debug>(a: A, b: impl ToString, c: C) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_with_multiple_trait_bounds() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: Send + Sync>(p: P) -> Self {}\"#,\n+            r#\"fn new(p: impl Send + Sync) -> Self {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_not_applicable_if_param_used_as_return_type() {\n+        check_assist_not_applicable(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: Send + Sync>(p: P) -> P {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_not_applicable_if_param_used_in_fn_body() {\n+        check_assist_not_applicable(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: ToString>(p: P) { let x: &dyn P = &O; }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_ignores_another_function_with_same_param_type() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"\n+            fn new<P$0: Send + Sync>(p: P) {}\n+            fn hello<P: Debug>(p: P) { println!(\"{:?}\", p); }\n+            \"#,\n+            r#\"\n+            fn new(p: impl Send + Sync) {}\n+            fn hello<P: Debug>(p: P) { println!(\"{:?}\", p); }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "bd282e53434093629c58b2e225811a65b1c35cec", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=e9638466567e66f6024ffa922bf48b8aba6a33b4", "patch": "@@ -193,6 +193,7 @@ mod handlers {\n     mod replace_arith_op;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n+    mod replace_named_generic_with_impl;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n     mod replace_turbofish_with_explicit_type;\n@@ -299,6 +300,7 @@ mod handlers {\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_method_eager_lazy::replace_with_eager_method,\n             replace_method_eager_lazy::replace_with_lazy_method,\n+            replace_named_generic_with_impl::replace_named_generic_with_impl,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_arith_op::replace_arith_with_wrapping,"}, {"sha": "8a35fd290e686b4bf35e4431714a119143f071d6", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e9638466567e66f6024ffa922bf48b8aba6a33b4", "patch": "@@ -2338,6 +2338,19 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_replace_named_generic_with_impl() {\n+    check_doc_test(\n+        \"replace_named_generic_with_impl\",\n+        r#####\"\n+fn new<P$0: AsRef<Path>>(location: P) -> Self {}\n+\"#####,\n+        r#####\"\n+fn new(location: impl AsRef<Path>) -> Self {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_qualified_name_with_use() {\n     check_doc_test("}, {"sha": "b3ea6ca8d46a12bfa539916cc6604784e9091fd1", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=e9638466567e66f6024ffa922bf48b8aba6a33b4", "patch": "@@ -236,6 +236,21 @@ impl ast::GenericParamList {\n         }\n     }\n \n+    /// Removes the existing generic param\n+    pub fn remove_generic_param(&self, generic_param: ast::GenericParam) {\n+        if let Some(previous) = generic_param.syntax().prev_sibling() {\n+            if let Some(next_token) = previous.next_sibling_or_token() {\n+                ted::remove_all(next_token..=generic_param.syntax().clone().into());\n+            }\n+        } else if let Some(next) = generic_param.syntax().next_sibling() {\n+            if let Some(next_token) = next.prev_sibling_or_token() {\n+                ted::remove_all(generic_param.syntax().clone().into()..=next_token);\n+            }\n+        } else {\n+            ted::remove(generic_param.syntax());\n+        }\n+    }\n+\n     /// Constructs a matching [`ast::GenericArgList`]\n     pub fn to_generic_args(&self) -> ast::GenericArgList {\n         let args = self.generic_params().filter_map(|param| match param {"}, {"sha": "3a61fb0a52c2645cf31536c3a96ce88e6ad951cf", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9638466567e66f6024ffa922bf48b8aba6a33b4/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=e9638466567e66f6024ffa922bf48b8aba6a33b4", "patch": "@@ -232,6 +232,10 @@ pub fn impl_trait(\n     ast_from_text(&format!(\"impl{ty_params_str} {trait_} for {ty}{ty_genargs_str} {{}}\"))\n }\n \n+pub fn impl_trait_type(bounds: ast::TypeBoundList) -> ast::ImplTraitType {\n+    ast_from_text(&format!(\"fn f(x: impl {bounds}) {{}}\"))\n+}\n+\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"type __ = {name_ref};\"))\n }"}]}