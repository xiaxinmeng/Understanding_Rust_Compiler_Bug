{"sha": "d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZmQzN2YwMGYxZWM1ZTRhNGIwZDg3ZjVhZjBiOTNmMzZhYWIyNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T13:23:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T13:23:31Z"}, "message": "Auto merge of #86338 - JohnTitor:issue-86162, r=estebank\n\nDo not suggest impl traits as type arguments\n\nFixes #86162", "tree": {"sha": "7d3d9a9d7e67c6a10ad608d9a75ac650e3cbbb5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d3d9a9d7e67c6a10ad608d9a75ac650e3cbbb5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "html_url": "https://github.com/rust-lang/rust/commit/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "html_url": "https://github.com/rust-lang/rust/commit/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c"}, {"sha": "b84d08d1e46df54ee3a2729296697e0b1ecc6097", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84d08d1e46df54ee3a2729296697e0b1ecc6097", "html_url": "https://github.com/rust-lang/rust/commit/b84d08d1e46df54ee3a2729296697e0b1ecc6097"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "c2025f3fe4da27498f64b7bef5c8fbf12b7a2f1b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -753,23 +753,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             if let (UnderspecifiedArgKind::Const { .. }, Some(parent_data)) =\n                 (&arg_data.kind, &arg_data.parent)\n             {\n-                let has_impl_trait =\n-                    self.tcx.generics_of(parent_data.def_id).params.iter().any(|param| {\n-                        matches!(\n-                            param.kind,\n-                            ty::GenericParamDefKind::Type {\n-                                synthetic: Some(\n-                                    hir::SyntheticTyParamKind::ImplTrait\n-                                        | hir::SyntheticTyParamKind::FromAttr,\n-                                ),\n-                                ..\n-                            }\n-                        )\n-                    });\n-\n                 // (#83606): Do not emit a suggestion if the parent has an `impl Trait`\n                 // as an argument otherwise it will cause the E0282 error.\n-                if !has_impl_trait || self.tcx.features().explicit_generic_args_with_impl_trait {\n+                if !self.tcx.generics_of(parent_data.def_id).has_impl_trait()\n+                    || self.tcx.features().explicit_generic_args_with_impl_trait\n+                {\n                     err.span_suggestion_verbose(\n                         span,\n                         \"consider specifying the const argument\",\n@@ -814,7 +802,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let borrow = typeck_results.borrow();\n             if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n-                if !generics.params.is_empty() {\n+                if !generics.params.is_empty() && !generics.has_impl_trait() {\n                     err.span_suggestion_verbose(\n                         segment.ident.span.shrink_to_hi(),\n                         &format!("}, {"sha": "0f89581ae669c43f031343ed0ac4b30f7ed8bf8f", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -198,6 +198,21 @@ impl<'tcx> Generics {\n             _ => bug!(\"expected const parameter, but found another generic parameter\"),\n         }\n     }\n+\n+    /// Returns `true` if `params` has `impl Trait`.\n+    pub fn has_impl_trait(&'tcx self) -> bool {\n+        self.params.iter().any(|param| {\n+            matches!(\n+                param.kind,\n+                ty::GenericParamDefKind::Type {\n+                    synthetic: Some(\n+                        hir::SyntheticTyParamKind::ImplTrait | hir::SyntheticTyParamKind::FromAttr,\n+                    ),\n+                    ..\n+                }\n+            )\n+        })\n+    }\n }\n \n /// Bounds on generics."}, {"sha": "f46fae1326c8fc27ece8a5ad7c7bc26f38eedc04", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -1603,6 +1603,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     let generics = self.tcx.generics_of(*def_id);\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n+                        && !generics.has_impl_trait()\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't"}, {"sha": "0cfdde26c2b8fc3ed30f6a9c2ce627bd3ee210d4", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -647,17 +647,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return false;\n         }\n \n-        let impl_trait = generics.params.iter().any(|param| {\n-            matches!(\n-                param.kind,\n-                ty::GenericParamDefKind::Type {\n-                    synthetic: Some(\n-                        hir::SyntheticTyParamKind::ImplTrait | hir::SyntheticTyParamKind::FromAttr,\n-                    ),\n-                    ..\n-                }\n-            )\n-        });\n+        let impl_trait = generics.has_impl_trait();\n \n         if impl_trait {\n             let spans = seg"}, {"sha": "5a547eb38d1f9f2e683207265a70d59f100cfb39", "filename": "src/test/ui/inference/issue-86162-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -0,0 +1,9 @@\n+// Regression test of #86162.\n+\n+fn foo(x: impl Clone) {}\n+fn gen<T>() -> T { todo!() }\n+\n+fn main() {\n+    foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n+    //~^ ERROR: type annotations needed\n+}"}, {"sha": "f4e2161d7b86e87ba3fbb29730e72a0040e709c9", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-86162-1.rs:7:5\n+   |\n+LL | fn foo(x: impl Clone) {}\n+   |                ----- required by this bound in `foo`\n+...\n+LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n+   |     ^^^ cannot infer type for type parameter `impl Clone` declared on the function `foo`\n+   |\n+   = note: cannot satisfy `_: Clone`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "b8c75dd7728d282b12a367239d80bc94d771ec4d", "filename": "src/test/ui/inference/issue-86162-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.rs?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -0,0 +1,14 @@\n+// Regression test of #86162.\n+\n+fn gen<T>() -> T { todo!() }\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(x: impl Clone) {}\n+}\n+\n+fn main() {\n+    Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n+    //~^ ERROR: type annotations needed\n+}"}, {"sha": "19f741e1cf6f6f22a327d6d6b2205136b61c49ae", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=d5fd37f00f1ec5e4a4b0d87f5af0b93f36aab271", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-86162-2.rs:12:5\n+   |\n+LL |     fn bar(x: impl Clone) {}\n+   |                    ----- required by this bound in `Foo::bar`\n+...\n+LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n+   |     ^^^^^^^^ cannot infer type for type parameter `impl Clone` declared on the associated function `bar`\n+   |\n+   = note: cannot satisfy `_: Clone`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}