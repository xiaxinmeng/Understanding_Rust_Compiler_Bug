{"sha": "7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzdhNTZmM2I2ZmRlY2FhYzhiZDUzN2JlZmRjNWNlYmNjY2U4ZjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:50:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `FunctionContext::entry_bcx`", "tree": {"sha": "55fafd5b90a1fd9826e540e3124a332d3bdc7172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fafd5b90a1fd9826e540e3124a332d3bdc7172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "html_url": "https://github.com/rust-lang/rust/commit/7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e57db348aff7535bb7d2cf49f906d4a5366477", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e57db348aff7535bb7d2cf49f906d4a5366477", "html_url": "https://github.com/rust-lang/rust/commit/05e57db348aff7535bb7d2cf49f906d4a5366477"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "210186c3203ccb1581c74d2c1384cd9f2cd7ba15", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -1641,7 +1641,7 @@ pub fn make_return_pointer(fcx: @mut FunctionContext, output_type: ty::t) -> Val\n             llvm::LLVMGetParam(fcx.llfn, 0)\n         } else {\n             let lloutputtype = type_of::type_of(fcx.ccx, output_type);\n-            let bcx = fcx.entry_bcx.unwrap();\n+            let bcx = fcx.entry_bcx.get().unwrap();\n             Alloca(bcx, lloutputtype, \"__make_return_pointer\")\n         }\n     }\n@@ -1686,7 +1686,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n               Cell::new(llvm::LLVMGetUndef(Type::i8p().to_ref()))\n           },\n           llretptr: Cell::new(None),\n-          entry_bcx: None,\n+          entry_bcx: RefCell::new(None),\n           alloca_insert_pt: Cell::new(None),\n           llreturn: Cell::new(None),\n           llself: Cell::new(None),\n@@ -1710,7 +1710,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n         let entry_bcx = top_scope_block(fcx, opt_node_info);\n         Load(entry_bcx, C_null(Type::i8p()));\n \n-        fcx.entry_bcx = Some(entry_bcx);\n+        fcx.entry_bcx.set(Some(entry_bcx));\n         fcx.alloca_insert_pt.set(Some(\n                 llvm::LLVMGetFirstInstruction(entry_bcx.llbb)));\n     }\n@@ -1921,7 +1921,7 @@ pub fn trans_closure(ccx: @CrateContext,\n \n     // Create the first basic block in the function and keep a handle on it to\n     //  pass to finish_fn later.\n-    let bcx_top = fcx.entry_bcx.unwrap();\n+    let bcx_top = fcx.entry_bcx.get().unwrap();\n     let mut bcx = bcx_top;\n     let block_ty = node_id_type(bcx, body.id);\n \n@@ -2136,7 +2136,7 @@ pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n \n     let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n \n-    let bcx = fcx.entry_bcx.unwrap();\n+    let bcx = fcx.entry_bcx.get().unwrap();\n \n     insert_synthetic_type_entries(bcx, fn_args, arg_tys);\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);"}, {"sha": "e2d123bd63a3460092977f0ab9960f273982d2a2", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -304,7 +304,7 @@ pub fn load_environment(fcx: @mut FunctionContext,\n         return;\n     }\n \n-    let bcx = fcx.entry_bcx.unwrap();\n+    let bcx = fcx.entry_bcx.get().unwrap();\n \n     // Load a pointer to the closure data, skipping over the box header:\n     let llcdata = opaque_box_body(bcx, cdata_ty, fcx.llenv.get());"}, {"sha": "808168760a4a2e661b66c53a52e6ba46cf9466c0", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -214,7 +214,7 @@ pub struct FunctionContext {\n     // always be Some.\n     llretptr: Cell<Option<ValueRef>>,\n \n-    entry_bcx: Option<@Block>,\n+    entry_bcx: RefCell<Option<@Block>>,\n \n     // These elements: \"hoisted basic blocks\" containing\n     // administrative activities that have to happen in only one place in\n@@ -296,7 +296,7 @@ impl FunctionContext {\n                                                      .unwrap());\n         }\n         // Remove the cycle between fcx and bcx, so memory can be freed\n-        self.entry_bcx = None;\n+        self.entry_bcx.set(None);\n     }\n \n     pub fn get_llreturn(&mut self) -> BasicBlockRef {"}, {"sha": "335e14fc55ef235c9f0a4576ad4e16ccc03240c3", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -669,7 +669,7 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n     // llfn is expected be declared to take a parameter of the appropriate\n     // type, so we don't need to explicitly cast the function parameter.\n \n-    let bcx = fcx.entry_bcx.unwrap();\n+    let bcx = fcx.entry_bcx.get().unwrap();\n     let rawptr0_arg = fcx.arg_pos(0u);\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n     let bcx = helper(bcx, llrawptr0, t);"}, {"sha": "02df3ff9c2046f380a6dbfbc8106d4957211bf63", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -148,7 +148,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     set_always_inline(fcx.llfn);\n \n-    let mut bcx = fcx.entry_bcx.unwrap();\n+    let mut bcx = fcx.entry_bcx.get().unwrap();\n     let first_real_arg = fcx.arg_pos(0u);\n \n     let nm = ccx.sess.str_of(item.ident);"}, {"sha": "c30f421c9e54f2edf5a3f485a1b8640c0b95c6a1", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437a56f3b6fdecaac8bd537befdc5cebccce8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "patch": "@@ -306,7 +306,7 @@ impl Reflector {\n                     //\n                     llvm::LLVMGetParam(llfdecl, fcx.arg_pos(0u) as c_uint)\n                 };\n-                let mut bcx = fcx.entry_bcx.unwrap();\n+                let mut bcx = fcx.entry_bcx.get().unwrap();\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg, Some(Type::i64()));\n                 Store(bcx, ret, fcx.llretptr.get().unwrap());"}]}