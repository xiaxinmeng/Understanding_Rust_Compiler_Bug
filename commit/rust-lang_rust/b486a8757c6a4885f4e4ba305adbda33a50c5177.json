{"sha": "b486a8757c6a4885f4e4ba305adbda33a50c5177", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODZhODc1N2M2YTQ4ODVmNGU0YmEzMDVhZGJkYTMzYTUwYzUxNzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-12T17:36:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-12T18:18:03Z"}, "message": "add test case for changing private methods", "tree": {"sha": "e4c2966b1d658100d431e3c78a1d1506172bfa73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c2966b1d658100d431e3c78a1d1506172bfa73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b486a8757c6a4885f4e4ba305adbda33a50c5177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b486a8757c6a4885f4e4ba305adbda33a50c5177", "html_url": "https://github.com/rust-lang/rust/commit/b486a8757c6a4885f4e4ba305adbda33a50c5177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b486a8757c6a4885f4e4ba305adbda33a50c5177/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb50e3481a06089dbd13d860dadc7d8d7cd1649", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb50e3481a06089dbd13d860dadc7d8d7cd1649", "html_url": "https://github.com/rust-lang/rust/commit/acb50e3481a06089dbd13d860dadc7d8d7cd1649"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "43be51143d6937d80bd3c777cdee8856c974b6ae", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b486a8757c6a4885f4e4ba305adbda33a50c5177/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b486a8757c6a4885f4e4ba305adbda33a50c5177/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=b486a8757c6a4885f4e4ba305adbda33a50c5177", "patch": "@@ -0,0 +1,114 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we change the body of a private method in an impl.\n+// We then test what sort of functions must be rebuilt as a result.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![allow(dead_code)]\n+\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+\n+// FIXME(#37121) -- the following two modules *should* be reused but are not\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+\n+mod point {\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+    }\n+\n+    impl Point {\n+        fn distance_squared(&self) -> f32 {\n+            #[cfg(rpass1)]\n+            return self.x + self.y;\n+\n+            #[cfg(rpass2)]\n+            return self.x * self.x + self.y * self.y;\n+        }\n+\n+        pub fn distance_from_origin(&self) -> f32 {\n+            self.distance_squared().sqrt()\n+        }\n+    }\n+\n+    impl Point {\n+        pub fn translate(&mut self, x: f32, y: f32) {\n+            self.x += x;\n+            self.y += y;\n+        }\n+    }\n+\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+mod fn_calls_methods_in_same_impl {\n+    use point::Point;\n+\n+    // FIXME(#37121) -- we should not need to typeck this again\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let x = Point { x: 2.0, y: 2.0 };\n+        x.distance_from_origin();\n+    }\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from another impl\n+mod fn_calls_methods_in_another_impl {\n+    use point::Point;\n+\n+    // FIXME(#37121) -- we should not need to typeck this again\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let mut x = Point { x: 2.0, y: 2.0 };\n+        x.translate(3.0, 3.0);\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin() -> Point {\n+        Point { x: 2.0, y: 2.0 }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}]}