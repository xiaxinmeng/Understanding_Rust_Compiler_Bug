{"sha": "e74a268db511d4f124425c981300ebfaea0d64ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGEyNjhkYjUxMWQ0ZjEyNDQyNWM5ODEzMDBlYmZhZWEwZDY0ZWU=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-25T11:39:20Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-25T11:39:20Z"}, "message": "Test errors", "tree": {"sha": "37b376f559838b59fd7b32de1c8f613f61958bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b376f559838b59fd7b32de1c8f613f61958bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74a268db511d4f124425c981300ebfaea0d64ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74a268db511d4f124425c981300ebfaea0d64ee", "html_url": "https://github.com/rust-lang/rust/commit/e74a268db511d4f124425c981300ebfaea0d64ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74a268db511d4f124425c981300ebfaea0d64ee/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5976674a717f61167a930df0c1fa1fe4106a439e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5976674a717f61167a930df0c1fa1fe4106a439e", "html_url": "https://github.com/rust-lang/rust/commit/5976674a717f61167a930df0c1fa1fe4106a439e"}], "stats": {"total": 266, "additions": 191, "deletions": 75}, "files": [{"sha": "5fc23b4a69ec576d958f7836536d4e6d040c2548", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -241,16 +241,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             \"simd_insert\" => {\n                 let index = self.read_scalar(args[1])?.to_u32()? as u64;\n-                let scalar = self.read_immediate(args[2])?;\n+                let scalar = args[2];\n                 let input = args[0];\n                 let (len, e_ty) = self.read_vector_ty(input);\n                 assert!(\n                     index < len,\n-                    \"index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n+                    \"Index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n                     index, e_ty, len\n                 );\n                 assert_eq!(\n-                    args[0].layout, dest.layout,\n+                    input.layout, dest.layout,\n                     \"Return type `{}` must match vector type `{}`\",\n                     dest.layout.ty, input.layout.ty\n                 );\n@@ -261,34 +261,29 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 );\n \n                 for i in 0..len {\n-                    let place = self.place_field(dest, index)?;\n-                    if i == index {\n-                        self.write_immediate(*scalar, place)?;\n+                    let place = self.place_field(dest, i)?;\n+                    let value = if i == index {\n+                        scalar\n                     } else {\n-                        self.write_immediate(\n-                            *self.read_immediate(self.operand_field(input, index)?)?,\n-                            place\n-                        )?;\n+                        self.operand_field(input, i)?\n                     };\n+                    self.copy_op(value, place)?;\n                 }\n             }\n             \"simd_extract\" => {\n                 let index = self.read_scalar(args[1])?.to_u32()? as _;\n                 let (len, e_ty) = self.read_vector_ty(args[0]);\n                 assert!(\n                     index < len,\n-                    \"index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n+                    \"index `{}` is out-of-bounds of vector type `{}` with length `{}`\",\n                     index, e_ty, len\n                 );\n                 assert_eq!(\n                     e_ty, dest.layout.ty,\n                     \"Return type `{}` must match vector element type `{}`\",\n                     dest.layout.ty, e_ty\n                 );\n-                self.write_immediate(\n-                    *self.read_immediate(self.operand_field(args[0], index)?)?,\n-                    dest\n-                )?;\n+                self.copy_op(self.operand_field(args[0], index)?, dest)?;\n             }\n             _ => return Ok(false),\n         }"}, {"sha": "d2c313ddd0cd45a29eddfe12487014c81ef1a039", "filename": "src/test/ui/consts/const-eval/simd/extract-fail0.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,22 @@\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+const X: i8x1 = i8x1(42);\n+\n+const fn extract_wrong_ret() -> i16 {\n+    unsafe { simd_extract(X, 0_u32) }\n+}\n+\n+const A: i16 = extract_wrong_ret();\n+\n+fn main() {}"}, {"sha": "51518481941df8621bf13af3f32d644e6c7e78b2", "filename": "src/test/ui/consts/const-eval/simd/extract-fail0.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail0.stderr?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,15 @@\n+thread 'rustc' panicked at 'assertion failed: `(left == right)`\n+  left: `i8`,\n+ right: `i16`: Return type `i16` must match vector element type `i8`', src/librustc_mir/interpret/intrinsics.rs:281:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.39.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n+"}, {"sha": "ddff608181e93ae77b41a970ab8c3f3a8934872e", "filename": "src/test/ui/consts/const-eval/simd/extract-fail1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,22 @@\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+const X: i8x1 = i8x1(42);\n+\n+const fn extract_wrong_vec() -> i8 {\n+    unsafe { simd_extract(42_i8, 0_u32) }\n+}\n+\n+const B: i8 = extract_wrong_vec();\n+\n+fn main() {}"}, {"sha": "a00d98bf7fd9b3e830435a3bc2d79d646ff23275", "filename": "src/test/ui/consts/const-eval/simd/extract-fail1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail1.stderr?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,15 @@\n+error: internal compiler error: src/librustc_mir/interpret/operand.rs:346: Type `i8` is not a SIMD vector type\n+\n+thread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:643:9\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.39.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n+\n+error: aborting due to previous error\n+"}, {"sha": "e2eb449f977ce201c8e977bc1202cf4f23bcf2d0", "filename": "src/test/ui/consts/const-eval/simd/extract-fail2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,22 @@\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+const X: i8x1 = i8x1(42);\n+\n+const fn extract_wrong_idx() -> i8 {\n+    unsafe { simd_extract(X, 1_u32) }\n+}\n+\n+const C: i8 = extract_wrong_idx();\n+\n+fn main() {}"}, {"sha": "5d74e115ef87fb9a8033623264df0bc22a7c4b0d", "filename": "src/test/ui/consts/const-eval/simd/extract-fail2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fextract-fail2.stderr?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,13 @@\n+thread 'rustc' panicked at 'index `1` is out-of-bounds of vector type `i8` with length `1`', src/librustc_mir/interpret/intrinsics.rs:276:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.39.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n+"}, {"sha": "dca58fb2555a8b4e12e47d0e0036897d177ec534", "filename": "src/test/ui/consts/const-eval/simd/insert-fail0.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,22 @@\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+}\n+\n+const X: i8x1 = i8x1(42);\n+\n+const fn insert_wrong_scalar() -> i8x1 {\n+    unsafe { simd_insert(X, 0_u32, 42_i16) }\n+}\n+\n+const D: i8x1 = insert_wrong_scalar();\n+\n+fn main() {}"}, {"sha": "1ea31ec8deb6acb3723d906de2ef71f1f69f6ead", "filename": "src/test/ui/consts/const-eval/simd/insert-fail0.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail0.stderr?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,15 @@\n+thread 'rustc' panicked at 'assertion failed: `(left == right)`\n+  left: `i16`,\n+ right: `i8`: Scalar type `i16` must match vector element type `i8`', src/librustc_mir/interpret/intrinsics.rs:257:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.39.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n+"}, {"sha": "2a3d79b76c306bec7bd488083fcc27bd85f64a8d", "filename": "src/test/ui/consts/const-eval/simd/insert-fail1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.rs?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,22 @@\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+}\n+\n+const X: i8x1 = i8x1(42);\n+\n+const fn insert_wrong_idx() -> i8x1 {\n+    unsafe { simd_insert(X, 1_u32, 42_i8) }\n+}\n+\n+const E: i8x1 = insert_wrong_idx();\n+\n+fn main() {}"}, {"sha": "38d378226301084a85c5cb2c6d9ebc2222d05231", "filename": "src/test/ui/consts/const-eval/simd/insert-fail1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74a268db511d4f124425c981300ebfaea0d64ee/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert-fail1.stderr?ref=e74a268db511d4f124425c981300ebfaea0d64ee", "patch": "@@ -0,0 +1,13 @@\n+thread 'rustc' panicked at 'Index `1` must be in bounds of vector type `i8`: `[0, 1)`', src/librustc_mir/interpret/intrinsics.rs:247:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.39.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z unstable-options -C prefer-dynamic -C rpath -C debuginfo=0\n+"}, {"sha": "1d1df8d25a406e285f355bdfa6447e3e7a6338fa", "filename": "src/test/ui/consts/const-eval/simd/insert_extract-fail.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -1,27 +0,0 @@\n-#![feature(const_fn)]\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)] struct i8x1(i8);\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n-    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n-}\n-\n-const fn foo(x: i8x1) -> i8 {\n-    // 42 is a i16 that does not fit in a i8\n-    unsafe { simd_insert(x, 0_u32, 42_i16) }.0  //~ ERROR\n-}\n-\n-const fn bar(x: i8x1) -> i16 {\n-    // the i8 is not a i16:\n-    unsafe { simd_extract(x, 0_u32) }  //~ ERROR\n-}\n-\n-fn main() {\n-    const V: i8x1 = i8x1(13);\n-    const X: i8 = foo(V);\n-    const Y: i16 = bar(V);\n-}"}, {"sha": "cf4e6887f16d574e9016f333fc38e1161847f6aa", "filename": "src/test/ui/consts/const-eval/simd/insert_extract-fail.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.stderr?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -1,16 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/insert_extract-fail.rs:14:14\n-   |\n-LL |     unsafe { simd_insert(x, 0_u32, 42_i16) }.0\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              Inserting `i16` with size `2` to a vector element place of size `1`\n-   |              inside call to `foo` at $DIR/insert_extract-fail.rs:19:19\n-...\n-LL |     const X: i8 = foo(V);\n-   |     ---------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: aborting due to previous error\n-"}, {"sha": "c5109c16e4c6dcd570fdb12ef6b2c43836f4be62", "filename": "src/test/ui/consts/const-eval/simd/read_fail.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -1,17 +0,0 @@\n-#![feature(const_fn)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n-}\n-\n-const fn foo(x: i8) -> i8 {\n-    // i8 is not a vector type:\n-    unsafe { simd_extract(x, 0_u32) }  //~ ERROR\n-}\n-\n-fn main() {\n-    const V: i8 = 13;\n-    const X: i8 = foo(V);\n-}"}]}