{"sha": "16ba778c12e3303ab4d334c1c3dbfa5173248a80", "node_id": "C_kwDOAAsO6NoAKDE2YmE3NzhjMTJlMzMwM2FiNGQzMzRjMWMzZGJmYTUxNzMyNDhhODA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-06T21:27:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-06T21:28:32Z"}, "message": "Support parallel compiler.", "tree": {"sha": "652651c23e8e4437f37c28f010577105b5c17448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652651c23e8e4437f37c28f010577105b5c17448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ba778c12e3303ab4d334c1c3dbfa5173248a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ba778c12e3303ab4d334c1c3dbfa5173248a80", "html_url": "https://github.com/rust-lang/rust/commit/16ba778c12e3303ab4d334c1c3dbfa5173248a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ba778c12e3303ab4d334c1c3dbfa5173248a80/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448c25599747a777ff23cbb5d419021d6994c5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/448c25599747a777ff23cbb5d419021d6994c5cb", "html_url": "https://github.com/rust-lang/rust/commit/448c25599747a777ff23cbb5d419021d6994c5cb"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "a58f6e6e1de3987f6031d596878e6fe7d1e2ebcd", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16ba778c12e3303ab4d334c1c3dbfa5173248a80/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ba778c12e3303ab4d334c1c3dbfa5173248a80/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=16ba778c12e3303ab4d334c1c3dbfa5173248a80", "patch": "@@ -37,7 +37,6 @@ use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n-use std::cell::RefCell;\n use std::io;\n use std::iter::TrustedLen;\n use std::mem;\n@@ -100,7 +99,7 @@ pub(crate) struct CrateMetadata {\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate.\n-    source_map_import_info: RefCell<Vec<Option<ImportedSourceFile>>>,\n+    source_map_import_info: Lock<Vec<Option<ImportedSourceFile>>>,\n     /// For every definition in this crate, maps its `DefPathHash` to its `DefIndex`.\n     def_path_hash_map: DefPathHashMapRef<'static>,\n     /// Likewise for ExpnHash.\n@@ -1514,7 +1513,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             }\n         };\n \n-        let mut import_info = self.cdata.source_map_import_info.borrow_mut();\n+        let mut import_info = self.cdata.source_map_import_info.lock();\n         for _ in import_info.len()..=(source_file_index as usize) {\n             import_info.push(None);\n         }\n@@ -1667,7 +1666,7 @@ impl CrateMetadata {\n             trait_impls,\n             incoherent_impls: Default::default(),\n             raw_proc_macros,\n-            source_map_import_info: RefCell::new(Vec::new()),\n+            source_map_import_info: Lock::new(Vec::new()),\n             def_path_hash_map,\n             expn_hash_map: Default::default(),\n             alloc_decoding_state,"}]}