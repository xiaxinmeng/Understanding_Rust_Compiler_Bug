{"sha": "13371b59ee918445ede03cebb741539db807e0e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzcxYjU5ZWU5MTg0NDVlZGUwM2NlYmI3NDE1MzlkYjgwN2UwZTc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-08-01T10:57:35Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-03-08T07:17:48Z"}, "message": "Make doctests collect and emit the unused externs", "tree": {"sha": "2b89b21ab95a1a5db165d5bf289c54da22aa13c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b89b21ab95a1a5db165d5bf289c54da22aa13c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13371b59ee918445ede03cebb741539db807e0e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13371b59ee918445ede03cebb741539db807e0e7", "html_url": "https://github.com/rust-lang/rust/commit/13371b59ee918445ede03cebb741539db807e0e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13371b59ee918445ede03cebb741539db807e0e7/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5200605f18717efcb5483cfd2aece167cab7ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5200605f18717efcb5483cfd2aece167cab7ce", "html_url": "https://github.com/rust-lang/rust/commit/2d5200605f18717efcb5483cfd2aece167cab7ce"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "2965fe8e1e8b00fae6502bfb3ac87d90b5b2db1c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13371b59ee918445ede03cebb741539db807e0e7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13371b59ee918445ede03cebb741539db807e0e7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=13371b59ee918445ede03cebb741539db807e0e7", "patch": "@@ -485,6 +485,10 @@ impl Externs {\n     pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n+\n+    pub fn len(&self) -> usize {\n+        self.0.len()\n+    }\n }\n \n impl ExternEntry {"}, {"sha": "61035684ef3cda316513f3cf6439338ed27b482f", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13371b59ee918445ede03cebb741539db807e0e7/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13371b59ee918445ede03cebb741539db807e0e7/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=13371b59ee918445ede03cebb741539db807e0e7", "patch": "@@ -153,6 +153,8 @@ crate struct Options {\n     /// If this option is set to `true`, rustdoc will only run checks and not generate\n     /// documentation.\n     crate run_check: bool,\n+    /// Whether doctests should emit unused externs\n+    crate json_unused_externs: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -323,7 +325,8 @@ impl Options {\n         }\n \n         let color = config::parse_color(&matches);\n-        let config::JsonConfig { json_rendered, .. } = config::parse_json(&matches);\n+        let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n+            config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n@@ -644,6 +647,7 @@ impl Options {\n             },\n             crate_name,\n             output_format,\n+            json_unused_externs,\n         })\n     }\n "}, {"sha": "50cdf46ce4f41d1549f6b8bf663e52e5ca15e180", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 79, "deletions": 6, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/13371b59ee918445ede03cebb741539db807e0e7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13371b59ee918445ede03cebb741539db807e0e7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=13371b59ee918445ede03cebb741539db807e0e7", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n@@ -23,6 +23,8 @@ use std::panic;\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::{Arc, Mutex};\n \n use crate::clean::Attributes;\n use crate::config::Options;\n@@ -103,8 +105,10 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n+    let externs = options.externs.clone();\n+    let json_unused_externs = options.json_unused_externs;\n \n-    let tests = interface::run_compiler(config, |compiler| {\n+    let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n             let lower_to_hir = queries.lower_to_hir()?;\n \n@@ -147,12 +151,15 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             });\n             compiler.session().abort_if_errors();\n \n-            let ret: Result<_, ErrorReported> = Ok(collector.tests);\n+            let unused_extern_reports = collector.unused_extern_reports.clone();\n+            let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n+            let ret: Result<_, ErrorReported> =\n+                Ok((collector.tests, unused_extern_reports, compiling_test_count));\n             ret\n         })\n     });\n-    let tests = match tests {\n-        Ok(tests) => tests,\n+    let (tests, unused_extern_reports, compiling_test_count) = match res {\n+        Ok(res) => res,\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n@@ -164,6 +171,29 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Some(testing::Options::new().display_output(display_warnings)),\n     );\n \n+    // Collect and warn about unused externs, but only if we've gotten\n+    // reports for each doctest\n+    if json_unused_externs {\n+        let unused_extern_reports: Vec<_> =\n+            std::mem::take(&mut unused_extern_reports.lock().unwrap());\n+        if unused_extern_reports.len() == compiling_test_count {\n+            let extern_names = externs.iter().map(|(name, _)| name).collect::<FxHashSet<&String>>();\n+            let mut unused_extern_names = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.unused_extern_names.iter().collect::<FxHashSet<&String>>())\n+                .fold(extern_names, |uextsa, uextsb| {\n+                    uextsa.intersection(&uextsb).map(|v| *v).collect::<FxHashSet<&String>>()\n+                })\n+                .iter()\n+                .map(|v| (*v).clone())\n+                .collect::<Vec<String>>();\n+            unused_extern_names.sort();\n+            let unused_extern_json =\n+                serde_json::to_string(&UnusedExterns { unused_extern_names }).unwrap();\n+            eprintln!(\"{}\", unused_extern_json);\n+        }\n+    }\n+\n     Ok(())\n }\n \n@@ -233,6 +263,12 @@ impl DirState {\n     }\n }\n \n+#[derive(serde::Serialize, serde::Deserialize)]\n+struct UnusedExterns {\n+    /// List of unused externs by their names.\n+    unused_extern_names: Vec<String>,\n+}\n+\n fn run_test(\n     test: &str,\n     cratename: &str,\n@@ -251,6 +287,7 @@ fn run_test(\n     outdir: DirState,\n     path: PathBuf,\n     test_id: &str,\n+    report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n         make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n@@ -276,6 +313,11 @@ fn run_test(\n     if as_test_harness {\n         compiler.arg(\"--test\");\n     }\n+    if options.json_unused_externs && !compile_fail {\n+        compiler.arg(\"--error-format=json\");\n+        compiler.arg(\"--json\").arg(\"unused-externs\");\n+        compiler.arg(\"-Z\").arg(\"unstable-options\");\n+    }\n     for lib_str in &options.lib_strs {\n         compiler.arg(\"-L\").arg(&lib_str);\n     }\n@@ -335,7 +377,26 @@ fn run_test(\n             eprint!(\"{}\", self.0);\n         }\n     }\n-    let out = str::from_utf8(&output.stderr).unwrap();\n+    let mut out_lines = str::from_utf8(&output.stderr)\n+        .unwrap()\n+        .lines()\n+        .filter(|l| {\n+            if let Ok(uext) = serde_json::from_str::<UnusedExterns>(l) {\n+                report_unused_externs(uext);\n+                false\n+            } else {\n+                true\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    // Add a \\n to the end to properly terminate the last line,\n+    // but only if there was output to be printed\n+    if out_lines.len() > 0 {\n+        out_lines.push(\"\");\n+    }\n+\n+    let out = out_lines.join(\"\\n\");\n     let _bomb = Bomb(&out);\n     match (output.status.success(), compile_fail) {\n         (true, true) => {\n@@ -719,6 +780,8 @@ crate struct Collector {\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n     visited_tests: FxHashMap<(String, usize), usize>,\n+    unused_extern_reports: Arc<Mutex<Vec<UnusedExterns>>>,\n+    compiling_test_count: AtomicUsize,\n }\n \n impl Collector {\n@@ -743,6 +806,8 @@ impl Collector {\n             source_map,\n             filename,\n             visited_tests: FxHashMap::default(),\n+            unused_extern_reports: Default::default(),\n+            compiling_test_count: AtomicUsize::new(0),\n         }\n     }\n \n@@ -789,6 +854,10 @@ impl Tester for Collector {\n         let runtool_args = self.options.runtool_args.clone();\n         let target = self.options.target.clone();\n         let target_str = target.to_string();\n+        let unused_externs = self.unused_extern_reports.clone();\n+        if !config.compile_fail {\n+            self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n+        }\n \n         // FIXME(#44940): if doctests ever support path remapping, then this filename\n         // needs to be the result of `SourceMap::span_to_unmapped_path`.\n@@ -844,6 +913,9 @@ impl Tester for Collector {\n                 test_type: testing::TestType::DocTest,\n             },\n             testfn: testing::DynTestFn(box move || {\n+                let report_unused_externs = |uext| {\n+                    unused_externs.lock().unwrap().push(uext);\n+                };\n                 let res = run_test(\n                     &test,\n                     &cratename,\n@@ -862,6 +934,7 @@ impl Tester for Collector {\n                     outdir,\n                     path,\n                     &test_id,\n+                    report_unused_externs,\n                 );\n \n                 if let Err(err) = res {"}]}