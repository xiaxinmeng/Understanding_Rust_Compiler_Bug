{"sha": "2b6c456bf648e5a7b408b550649d409378e39539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNmM0NTZiZjY0OGU1YTdiNDA4YjU1MDY0OWQ0MDkzNzhlMzk1Mzk=", "commit": {"author": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2012-12-27T12:16:16Z"}, "committer": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2012-12-27T12:16:16Z"}, "message": "Enhance auto_encode to take number of struct fields\n\nemit_struct and read_struct takes an additional len:uint parameter which tells\nus how many fields the struct we are working on has.\n\nThis is required to implement an Encoder for the msgpack [1] serialization\nformat. To serialize a struct with msgpack you have to use arrays and the size\nof the array has to be know before each of the elements are written out. JSON\nas an example doesn't have this problem as it uses '[' and ']' delimiters for\narrays.\n\n[1]: www.msgpack.org", "tree": {"sha": "5a4ed572b84482f9003de920ea0580aae2fe6277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4ed572b84482f9003de920ea0580aae2fe6277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b6c456bf648e5a7b408b550649d409378e39539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6c456bf648e5a7b408b550649d409378e39539", "html_url": "https://github.com/rust-lang/rust/commit/2b6c456bf648e5a7b408b550649d409378e39539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b6c456bf648e5a7b408b550649d409378e39539/comments", "author": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bb07bed9166105ea961a42b5fff7739ae0d2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bb07bed9166105ea961a42b5fff7739ae0d2e9", "html_url": "https://github.com/rust-lang/rust/commit/09bb07bed9166105ea961a42b5fff7739ae0d2e9"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "f782b6ff6a7bd370fd88fb731305a73879c3aee4", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=2b6c456bf648e5a7b408b550649d409378e39539", "patch": "@@ -360,7 +360,7 @@ pub mod reader {\n             f()\n         }\n \n-        fn read_struct<T>(&self, name: &str, f: fn() -> T) -> T {\n+        fn read_struct<T>(&self, name: &str, _len: uint, f: fn() -> T) -> T {\n             debug!(\"read_struct(name=%s)\", name);\n             f()\n         }\n@@ -631,7 +631,7 @@ pub mod writer {\n         }\n \n         fn emit_rec(&self, f: fn()) { f() }\n-        fn emit_struct(&self, _name: &str, f: fn()) { f() }\n+        fn emit_struct(&self, _name: &str, _len: uint, f: fn()) { f() }\n         fn emit_field(&self, name: &str, _idx: uint, f: fn()) {\n             self._emit_label(name);\n             f()"}, {"sha": "1d46a54518589397fe1f1c91376a4e44a493f86e", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=2b6c456bf648e5a7b408b550649d409378e39539", "patch": "@@ -148,7 +148,7 @@ pub impl Encoder: serialize::Encoder {\n         f();\n         self.wr.write_char('}');\n     }\n-    fn emit_struct(&self, _name: &str, f: fn()) {\n+    fn emit_struct(&self, _name: &str, _len: uint, f: fn()) {\n         self.wr.write_char('{');\n         f();\n         self.wr.write_char('}');\n@@ -261,7 +261,7 @@ pub impl PrettyEncoder: serialize::Encoder {\n         self.indent -= 2;\n         self.wr.write_char('}');\n     }\n-    fn emit_struct(&self, _name: &str, f: fn()) {\n+    fn emit_struct(&self, _name: &str, _len: uint, f: fn()) {\n         self.emit_rec(f)\n     }\n     fn emit_field(&self, name: &str, idx: uint, f: fn()) {\n@@ -861,7 +861,7 @@ pub impl Decoder: serialize::Decoder {\n         move value\n     }\n \n-    fn read_struct<T>(&self, _name: &str, f: fn() -> T) -> T {\n+    fn read_struct<T>(&self, _name: &str, _len: uint, f: fn() -> T) -> T {\n         debug!(\"read_struct()\");\n         let value = f();\n         self.pop();"}, {"sha": "5e477042b6be25b88d1dfb907a21e39455f791fe", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=2b6c456bf648e5a7b408b550649d409378e39539", "patch": "@@ -160,7 +160,7 @@ pub impl Encoder: serialize::Encoder {\n         self.wr.write_str(~\"}\");\n     }\n \n-    fn emit_struct(&self, name: &str, f: fn()) {\n+    fn emit_struct(&self, name: &str, _len: uint, f: fn()) {\n         self.wr.write_str(fmt!(\"%s {\", name));\n         f();\n         self.wr.write_str(~\"}\");"}, {"sha": "a08d8defd5ce622a171a0fe9f8166ad9dc77c358", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=2b6c456bf648e5a7b408b550649d409378e39539", "patch": "@@ -54,7 +54,7 @@ pub trait Encoder {\n     fn emit_vec_elt(&self, idx: uint, f: fn());\n \n     fn emit_rec(&self, f: fn());\n-    fn emit_struct(&self, name: &str, f: fn());\n+    fn emit_struct(&self, name: &str, _len: uint, f: fn());\n     fn emit_field(&self, f_name: &str, f_idx: uint, f: fn());\n \n     fn emit_tup(&self, len: uint, f: fn());\n@@ -95,7 +95,7 @@ pub trait Decoder {\n     fn read_vec_elt<T>(&self, idx: uint, f: fn() -> T) -> T;\n \n     fn read_rec<T>(&self, f: fn() -> T) -> T;\n-    fn read_struct<T>(&self, name: &str, f: fn() -> T) -> T;\n+    fn read_struct<T>(&self, name: &str, _len: uint, f: fn() -> T) -> T;\n     fn read_field<T>(&self, name: &str, idx: uint, f: fn() -> T) -> T;\n \n     fn read_tup<T>(&self, sz: uint, f: fn() -> T) -> T;"}, {"sha": "680fa169afe79cca14d536376c55cb717eca0f9d", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6c456bf648e5a7b408b550649d409378e39539/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=2b6c456bf648e5a7b408b550649d409378e39539", "patch": "@@ -25,15 +25,15 @@ would generate two implementations like:\n \n     impl<S: Encoder> node_id: Encodable<S> {\n         fn encode(s: &S) {\n-            do s.emit_struct(\"Node\") {\n+            do s.emit_struct(\"Node\", 1) {\n                 s.emit_field(\"id\", 0, || s.emit_uint(self))\n             }\n         }\n     }\n \n     impl<D: Decoder> node_id: Decodable {\n         static fn decode(d: &D) -> Node {\n-            do d.read_struct(\"Node\") {\n+            do d.read_struct(\"Node\", 1) {\n                 Node {\n                     id: d.read_field(~\"x\", 0, || decode(d))\n                 }\n@@ -686,6 +686,7 @@ fn mk_struct_ser_impl(\n         ),\n         ~[\n             cx.lit_str(span, @cx.str_of(ident)),\n+            cx.lit_uint(span, vec::len(fields)),\n             cx.lambda_stmts(span, fields),\n         ]\n     );\n@@ -712,6 +713,7 @@ fn mk_struct_deser_impl(\n         ),\n         ~[\n             cx.lit_str(span, @cx.str_of(ident)),\n+            cx.lit_uint(span, vec::len(fields)),\n             cx.lambda_expr(\n                 cx.expr(\n                     span,"}]}