{"sha": "ab22f5521bdb940d8beabd442298a56ecb236b38", "node_id": "C_kwDOAAsO6NoAKGFiMjJmNTUyMWJkYjk0MGQ4YmVhYmQ0NDIyOThhNTZlY2IyMzZiMzg", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-02T20:57:44Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-02T20:57:44Z"}, "message": "change error_reported to use Result instead of an option", "tree": {"sha": "6049e7bd2c4ba20900d63e6155f1e443ab7b2042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6049e7bd2c4ba20900d63e6155f1e443ab7b2042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab22f5521bdb940d8beabd442298a56ecb236b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab22f5521bdb940d8beabd442298a56ecb236b38", "html_url": "https://github.com/rust-lang/rust/commit/ab22f5521bdb940d8beabd442298a56ecb236b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab22f5521bdb940d8beabd442298a56ecb236b38/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "html_url": "https://github.com/rust-lang/rust/commit/7df9d818ab07d1d014ac46a1f462d87a2d57ce21"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "3d3d3d2d94f05da6938184949675daa36fc515aa", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -1977,7 +1977,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n \n                     err.emit()\n-                } else if let Some(reported) = qself_ty.error_reported() {\n+                } else if let Err(reported) = qself_ty.error_reported() {\n                     reported\n                 } else {\n                     // Don't print `TyErr` to the user."}, {"sha": "e9674c93f3e4532434411d3046a7f2a340ffc6bf", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -23,9 +23,7 @@ pub(crate) fn orphan_check_impl(\n     impl_def_id: LocalDefId,\n ) -> Result<(), ErrorGuaranteed> {\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-    if let Some(err) = trait_ref.error_reported() {\n-        return Err(err);\n-    }\n+    trait_ref.error_reported()?;\n \n     let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);\n     if tcx.trait_is_auto(trait_ref.def_id) {"}, {"sha": "cf7587ffa0e82f9f7dab12d1513aca3b5a577829", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -92,10 +92,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"pointer_kind({:?}, {:?})\", t, span);\n \n         let t = self.resolve_vars_if_possible(t);\n-\n-        if let Some(reported) = t.error_reported() {\n-            return Err(reported);\n-        }\n+        t.error_reported()?;\n \n         if self.type_is_sized_modulo_regions(self.param_env, t, span) {\n             return Ok(Some(PointerKind::Thin));\n@@ -220,7 +217,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         match cast_ty.kind() {\n             ty::Dynamic(_, _, ty::Dyn) | ty::Slice(..) => {\n                 let reported = check.report_cast_to_unsized_type(fcx);\n-                Err(reported)\n+                return Err(reported);\n             }\n             _ => Ok(check),\n         }\n@@ -611,10 +608,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) -> ErrorGuaranteed {\n-        if let Some(reported) =\n-            self.cast_ty.error_reported().or_else(|| self.expr_ty.error_reported())\n-        {\n-            return reported;\n+        if let Err(err) = self.cast_ty.error_reported() {\n+            return err;\n+        }\n+        if let Err(err) = self.expr_ty.error_reported() {\n+            return err;\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);"}, {"sha": "82442c8430db514177e635757e3aaf63cf427158", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -249,7 +249,7 @@ pub fn ancestors<'tcx>(\n \n     if let Some(reported) = specialization_graph.has_errored {\n         Err(reported)\n-    } else if let Some(reported) = tcx.type_of(start_from_impl).error_reported() {\n+    } else if let Err(reported) = tcx.type_of(start_from_impl).error_reported() {\n         Err(reported)\n     } else {\n         Ok(Ancestors {"}, {"sha": "95004e5c5ca2c99f68b7a7353dbc539b80c1422b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -1315,10 +1315,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         msg: &str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Error(reported),\n-            ty,\n-        })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {"}, {"sha": "f0e9f990a8115e8f00bc7cefc9fc68b0408bab81", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -95,11 +95,11 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n-    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+    fn error_reported(&self) -> Result<(), ErrorGuaranteed> {\n         if self.references_error() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n-            None\n+            Ok(())\n         }\n     }\n     fn has_non_region_param(&self) -> bool {"}, {"sha": "384d03106b1e8c1cc67760bbfdf3345a741bb859", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab22f5521bdb940d8beabd442298a56ecb236b38/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=ab22f5521bdb940d8beabd442298a56ecb236b38", "patch": "@@ -122,7 +122,7 @@ mod rustc {\n \n             let c = c.eval(tcx, param_env);\n \n-            if let Some(err) = c.error_reported() {\n+            if let Err(err) = c.error_reported() {\n                 return Some(Self {\n                     alignment: true,\n                     lifetimes: true,"}]}