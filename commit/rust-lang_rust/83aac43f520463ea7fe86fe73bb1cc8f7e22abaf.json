{"sha": "83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYWFjNDNmNTIwNDYzZWE3ZmU4NmZlNzNiYjFjYzhmN2UyMmFiYWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-07T22:08:26Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:07:45Z"}, "message": "Refactor `Resolver::builtin_macros` to use `NameBinding`s instead of `DefId`s.", "tree": {"sha": "50684a0a57e34bbe7a33a742d9576e5532ed55d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50684a0a57e34bbe7a33a742d9576e5532ed55d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "html_url": "https://github.com/rust-lang/rust/commit/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641274f9072a3c2b5400d99d671d64ef2d696624", "url": "https://api.github.com/repos/rust-lang/rust/commits/641274f9072a3c2b5400d99d671d64ef2d696624", "html_url": "https://github.com/rust-lang/rust/commit/641274f9072a3c2b5400d99d671d64ef2d696624"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "4e631a2076b20cc8948ff40402af23d38866f91a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "patch": "@@ -518,10 +518,12 @@ impl<'b> Resolver<'b> {\n         module.populated.set(true)\n     }\n \n-    fn legacy_import_macro(&mut self, name: Name, def: Def, span: Span, allow_shadowing: bool) {\n-        self.used_crates.insert(def.def_id().krate);\n+    fn legacy_import_macro(\n+        &mut self, name: Name, binding: &'b NameBinding<'b>, span: Span, allow_shadowing: bool,\n+    ) {\n+        self.used_crates.insert(binding.def().def_id().krate);\n         self.macro_names.insert(name);\n-        if self.builtin_macros.insert(name, def.def_id()).is_some() && !allow_shadowing {\n+        if self.builtin_macros.insert(name, binding).is_some() && !allow_shadowing {\n             let msg = format!(\"`{}` is already in scope\", name);\n             let note =\n                 \"macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\";\n@@ -548,13 +550,13 @@ impl<'b> Resolver<'b> {\n \n         if let Some(span) = legacy_imports.import_all {\n             module.for_each_child(|name, ns, binding| if ns == MacroNS {\n-                self.legacy_import_macro(name, binding.def(), span, allow_shadowing);\n+                self.legacy_import_macro(name, binding, span, allow_shadowing);\n             });\n         } else {\n             for (name, span) in legacy_imports.imports {\n                 let result = self.resolve_name_in_module(module, name, MacroNS, false, None);\n                 if let Success(binding) = result {\n-                    self.legacy_import_macro(name, binding.def(), span, allow_shadowing);\n+                    self.legacy_import_macro(name, binding, span, allow_shadowing);\n                 } else {\n                     span_err!(self.session, span, E0469, \"imported macro not found\");\n                 }"}, {"sha": "d8fb56018a1c1d8054dbc9ebd44569193e323c35", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "patch": "@@ -1115,7 +1115,7 @@ pub struct Resolver<'a> {\n     pub exported_macros: Vec<ast::MacroDef>,\n     crate_loader: &'a mut CrateLoader,\n     macro_names: FxHashSet<Name>,\n-    builtin_macros: FxHashMap<Name, DefId>,\n+    builtin_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n     lexical_macro_resolutions: Vec<(Name, LegacyScope<'a>)>,\n     macro_map: FxHashMap<DefId, Rc<SyntaxExtension>>,\n     macro_exports: Vec<Export>,"}, {"sha": "8c6a1ab49ecb895824c18eaea240cdf521475f72", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {Module, ModuleKind, Resolver};\n+use {Module, ModuleKind, NameBinding, NameBindingKind, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n+use rustc::ty;\n use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast;\n@@ -28,7 +29,7 @@ use syntax::parse::token::intern;\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::Visitor;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Clone)]\n pub struct InvocationData<'a> {\n@@ -179,7 +180,12 @@ impl<'a> base::Resolver for Resolver<'a> {\n             index: DefIndex::new(self.macro_map.len()),\n         };\n         self.macro_map.insert(def_id, ext);\n-        self.builtin_macros.insert(ident.name, def_id);\n+        let binding = self.arenas.alloc_name_binding(NameBinding {\n+            kind: NameBindingKind::Def(Def::Macro(def_id)),\n+            span: DUMMY_SP,\n+            vis: ty::Visibility::PrivateExternal,\n+        });\n+        self.builtin_macros.insert(ident.name, binding);\n     }\n \n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>) {\n@@ -193,8 +199,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n-            match self.builtin_macros.get(&name) {\n-                Some(&def_id) => match *self.get_macro(Def::Macro(def_id)) {\n+            match self.builtin_macros.get(&name).cloned() {\n+                Some(binding) => match *self.get_macro(binding.def()) {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n                     }\n@@ -273,7 +279,7 @@ impl<'a> Resolver<'a> {\n         if let Some(scope) = possible_time_travel {\n             self.lexical_macro_resolutions.push((name, scope));\n         }\n-        self.builtin_macros.get(&name).cloned().map(|def_id| self.get_macro(Def::Macro(def_id)))\n+        self.builtin_macros.get(&name).cloned().map(|binding| self.get_macro(binding.def()))\n     }\n \n     fn suggest_macro_name(&mut self, name: &str, err: &mut DiagnosticBuilder<'a>) {"}]}