{"sha": "efb4d45ebc77a2e28f843fb22507e63339db829c", "node_id": "C_kwDOAAsO6NoAKGVmYjRkNDVlYmM3N2EyZTI4Zjg0M2ZiMjI1MDdlNjMzMzlkYjgyOWM", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-13T21:59:23Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-13T21:59:23Z"}, "message": "Update generate_delegate.rs", "tree": {"sha": "ba1f50710dafe15ba168b162ba784ac3e500e2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1f50710dafe15ba168b162ba784ac3e500e2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb4d45ebc77a2e28f843fb22507e63339db829c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb4d45ebc77a2e28f843fb22507e63339db829c", "html_url": "https://github.com/rust-lang/rust/commit/efb4d45ebc77a2e28f843fb22507e63339db829c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb4d45ebc77a2e28f843fb22507e63339db829c/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14a12edd75ea37f357d81ee73585669ad5c3e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14a12edd75ea37f357d81ee73585669ad5c3e5e", "html_url": "https://github.com/rust-lang/rust/commit/c14a12edd75ea37f357d81ee73585669ad5c3e5e"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "2b68920f22676638bb8bc952b9bad8575a675832", "filename": "crates/ide_assists/src/handlers/generate_delegate.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/efb4d45ebc77a2e28f843fb22507e63339db829c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb4d45ebc77a2e28f843fb22507e63339db829c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs?ref=efb4d45ebc77a2e28f843fb22507e63339db829c", "patch": "@@ -1,9 +1,8 @@\n use hir::{self, HasCrate, HirDisplay};\n-use stdx::format_to;\n use syntax::ast::{self, make, AstNode, HasName, HasVisibility};\n \n use crate::{\n-    utils::{find_impl_block_end, find_struct_impl, generate_impl_text, render_snippet, Cursor},\n+    utils::{find_struct_impl, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n \n@@ -31,9 +30,9 @@ use crate::{\n // ```\n pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n-    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+    let strukt_name = strukt.name()?;\n \n-    let field_name = field.name()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n     let field_ty = field.ty()?;\n \n     let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n@@ -61,23 +60,6 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n             format!(\"Generate a delegate method for '{}'\", method.name(ctx.db())),\n             target,\n             |builder| {\n-                let mut buf = String::with_capacity(512);\n-\n-                let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-                let return_type = method.ret_type(ctx.db());\n-                let return_type = if return_type.is_unit() || return_type.is_unknown() {\n-                    String::new()\n-                } else {\n-                    let module = match ctx.sema.scope(strukt.syntax()).module() {\n-                        Some(m) => m,\n-                        None => return,\n-                    };\n-                    match return_type.display_source_code(ctx.db(), module.into()) {\n-                        Ok(rt) => format!(\"-> {}\", rt),\n-                        Err(_) => return,\n-                    }\n-                };\n-\n                 // make function\n                 let vis = strukt.visibility();\n                 let name = make::name(&method.name(ctx.db()).to_string());\n@@ -89,21 +71,28 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                 let is_async = false;\n                 let f = make::fn_(vis, name, type_params, params, body, ret_type, is_async);\n \n-                let start_offset = impl_def\n-                    .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n-                    .unwrap_or_else(|| {\n-                        buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n-                        strukt.syntax().text_range().end()\n-                    });\n-\n-                let cap = ctx.config.snippet_cap.unwrap(); // FIXME.\n                 let cursor = Cursor::Before(f.syntax());\n+                let cap = ctx.config.snippet_cap.unwrap(); // FIXME.\n \n-                builder.insert_snippet(\n-                    cap,\n-                    start_offset,\n-                    format!(\"\\n\\n{}\", render_snippet(cap, f.syntax(), cursor)),\n-                );\n+                match impl_def {\n+                    Some(impl_def) => {\n+                        let impl_def = impl_def.clone_for_update();\n+                        let old_range = impl_def.syntax().text_range();\n+                        let assoc_items = impl_def.get_or_create_assoc_item_list();\n+                        assoc_items.add_item(f.clone().into());\n+                        let snippet = render_snippet(cap, impl_def.syntax(), cursor);\n+                        builder.replace_snippet(cap, old_range, snippet);\n+                    }\n+                    None => {\n+                        let name = &strukt_name.to_string();\n+                        let impl_def = make::impl_(make::ext::ident_path(name));\n+                        let assoc_items = impl_def.get_or_create_assoc_item_list();\n+                        assoc_items.add_item(f.clone().into());\n+                        let start_offset = strukt.syntax().text_range().end();\n+                        let snippet = render_snippet(cap, impl_def.syntax(), cursor);\n+                        builder.insert_snippet(cap, start_offset, snippet);\n+                    }\n+                }\n             },\n         )?;\n     }\n@@ -132,11 +121,13 @@ impl Age {\n struct Person {\n     ag$0e: Age,\n }\n+\n+impl Person {}\n \"#,\n             r#\"\n struct Age(u8);\n impl Age {\n-    fn age(&self) -> u8 {\n+    $0fn age(&self) -> u8 {\n         self.0\n     }\n }"}]}