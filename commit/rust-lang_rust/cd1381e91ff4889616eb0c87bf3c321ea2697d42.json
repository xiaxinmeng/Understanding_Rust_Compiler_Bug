{"sha": "cd1381e91ff4889616eb0c87bf3c321ea2697d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTM4MWU5MWZmNDg4OTYxNmViMGM4N2JmM2MzMjFlYTI2OTdkNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T08:35:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T08:35:46Z"}, "message": "Auto merge of #62549 - ehuss:update-cargo-vendor, r=alexcrichton\n\nUpdate cargo-vendor usage\n\nThis contains a variety of updates to clean up the usage of cargo-vendor.\n\n- Remove the install step for the old cargo-vendor now that it is built-in to cargo and available in the stage0 install.\n- Update installation instructions, dealing with vendoring. The current instructions of running `sudo ./x.py install` is broken, it will almost always fail (since the vendor directory doesn't exist). Since the steps for properly handling this are numerous, I'm recommending removing the suggestion to use `sudo` altogether.\n- If the sudo-forced-vendoring detects that the vendor directory is not available, abort with instructions on how to fix.\n- Now that cargo-vendor is built-in, automatically run it if it looks like it is needed.\n- Update instructions on how to install cargo.\n- Remove the unused markdown link references in README/CONTRIBUTING. This reverts most of #44935. These references don't do anything if they are unused.\n\nCloses #49269\ncc #61142 #48771 #40108", "tree": {"sha": "fda7834b24c2c2860071d89feab492f04fd4ec23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda7834b24c2c2860071d89feab492f04fd4ec23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1381e91ff4889616eb0c87bf3c321ea2697d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1381e91ff4889616eb0c87bf3c321ea2697d42", "html_url": "https://github.com/rust-lang/rust/commit/cd1381e91ff4889616eb0c87bf3c321ea2697d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1381e91ff4889616eb0c87bf3c321ea2697d42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b1b538843503568994c7ef37ea8206f0ee3c2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1b538843503568994c7ef37ea8206f0ee3c2e4", "html_url": "https://github.com/rust-lang/rust/commit/1b1b538843503568994c7ef37ea8206f0ee3c2e4"}, {"sha": "06c3256a6b1a42b2226a0f2ec75c43cd8951b962", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c3256a6b1a42b2226a0f2ec75c43cd8951b962", "html_url": "https://github.com/rust-lang/rust/commit/06c3256a6b1a42b2226a0f2ec75c43cd8951b962"}], "stats": {"total": 166, "additions": 71, "deletions": 95}, "files": [{"sha": "4daaa986a2dc2fbf31080efade8a989be2de2d69", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd1381e91ff4889616eb0c87bf3c321ea2697d42/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd1381e91ff4889616eb0c87bf3c321ea2697d42/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=cd1381e91ff4889616eb0c87bf3c321ea2697d42", "patch": "@@ -179,7 +179,6 @@ Speaking of tests, Rust has a comprehensive test suite. More information about\n it can be found [here][rctd].\n \n ### External Dependencies\n-[external-dependencies]: #external-dependencies\n \n Currently building Rust will also build the following external projects:\n \n@@ -209,7 +208,6 @@ Breakage is not allowed in the beta and stable channels, and must be addressed\n before the PR is merged.\n \n #### Breaking Tools Built With The Compiler\n-[breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n \n Rust's build system builds a number of tools that make use of the\n internals of the compiler. This includes\n@@ -242,7 +240,7 @@ Here are those same steps in detail:\n    `config.toml.example` in the root directory of the Rust repository.\n    Set `submodules = false` in the `[build]` section. This will prevent `x.py`\n    from resetting to the original branch after you make your changes. If you\n-   need to [update any submodules to their latest versions][updating-submodules],\n+   need to [update any submodules to their latest versions](#updating-submodules),\n    see the section of this file about that for more information.\n 2. (optional) Run `./x.py test src/tools/rustfmt` (substituting the submodule\n    that broke for `rustfmt`). Fix any errors in the submodule (and possibly others).\n@@ -256,7 +254,6 @@ Here are those same steps in detail:\n 8. (optional) Send a PR to rust-lang/rust updating the submodule.\n \n #### Updating submodules\n-[updating-submodules]: #updating-submodules\n \n These instructions are specific to updating `rustfmt`, however they may apply\n to the other submodules as well. Please help by improving these instructions\n@@ -310,7 +307,6 @@ This should change the version listed in `Cargo.lock` to the new version you upd\n the submodule to. Running `./x.py build` should work now.\n \n ## Writing Documentation\n-[writing-documentation]: #writing-documentation\n \n Documentation improvements are very welcome. The source of `doc.rust-lang.org`\n is located in `src/doc` in the tree, and standard API documentation is generated\n@@ -337,7 +333,6 @@ tracker in that repo is also a great way to find things that need doing. There\n are issues for beginners and advanced compiler devs alike!\n \n ## Issue Triage\n-[issue-triage]: #issue-triage\n \n Sometimes, an issue will stay open, even though the bug has been fixed. And\n sometimes, the original bug may go stale because something has changed in the\n@@ -405,7 +400,6 @@ If you're looking for somewhere to start, check out the [E-easy][eeasy] tag.\n [rfcbot]: https://github.com/anp/rfcbot-rs/\n \n ## Out-of-tree Contributions\n-[out-of-tree-contributions]: #out-of-tree-contributions\n \n There are a number of other ways to contribute to Rust that don't deal with\n this repository.\n@@ -425,7 +419,6 @@ valuable!\n [community-library]: https://github.com/rust-lang/rfcs/labels/A-community-library\n \n ## Helpful Links and Information\n-[helpful-info]: #helpful-info\n \n For people new to Rust, and just starting to contribute, or even for\n more seasoned developers, some useful places to look for information"}, {"sha": "d4bde44ff9d3c9a7031896fc9bbf77912d0e7a46", "filename": "README.md", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cd1381e91ff4889616eb0c87bf3c321ea2697d42/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd1381e91ff4889616eb0c87bf3c321ea2697d42/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cd1381e91ff4889616eb0c87bf3c321ea2697d42", "patch": "@@ -6,19 +6,22 @@ standard library, and documentation.\n [Rust]: https://www.rust-lang.org\n \n ## Quick Start\n-[quick-start]: #quick-start\n \n Read [\"Installation\"] from [The Book].\n \n [\"Installation\"]: https://doc.rust-lang.org/book/ch01-01-installation.html\n [The Book]: https://doc.rust-lang.org/book/index.html\n \n ## Installing from Source\n-[building-from-source]: #building-from-source\n \n-_Note: If you wish to contribute to the compiler, you should read\n-[this chapter](https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html)\n-of the rustc-guide instead of this section._\n+_Note: If you wish to contribute to the compiler, you should read [this\n+chapter][rustcguidebuild] of the rustc-guide instead of this section._\n+\n+The Rust build system has a Python script called `x.py` to bootstrap building\n+the compiler. More information about it may be found by running `./x.py --help`\n+or reading the [rustc guide][rustcguidebuild].\n+\n+[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html\n \n ### Building on *nix\n 1. Make sure you have installed the dependencies:\n@@ -39,43 +42,36 @@ of the rustc-guide instead of this section._\n \n [source]: https://github.com/rust-lang/rust\n \n-3. Build and install:\n-\n-    ```sh\n-    $ ./x.py build && sudo ./x.py install\n-    ```\n+3. Configure the build settings:\n \n-    If after running `sudo ./x.py install` you see an error message like\n+    The Rust build system uses a file named `config.toml` in the root of the\n+    source tree to determine various configuration settings for the build.\n+    Copy the default `config.toml.example` to `config.toml` to get started.\n \n-    ```\n-    error: failed to load source for a dependency on 'cc'\n+    ```sh\n+    $ cp config.toml.example config.toml\n     ```\n \n-    then run these two commands and then try `sudo ./x.py install` again:\n+    It is recommended that if you plan to use the Rust build system to create\n+    an installation (using `./x.py install`) that you set the `prefix` value\n+    in the `[install]` section to a directory that you have write permissions.\n \n-    ```\n-    $ cargo install cargo-vendor\n-    ```\n+4. Build and install:\n \n+    ```sh\n+    $ ./x.py build && ./x.py install\n     ```\n-    $ cargo vendor\n-    ```\n-\n-    > ***Note:*** Install locations can be adjusted by copying the config file\n-    > from `./config.toml.example` to `./config.toml`, and\n-    > adjusting the `prefix` option under `[install]`. Various other options, such\n-    > as enabling debug information, are also supported, and are documented in\n-    > the config file.\n \n-    When complete, `sudo ./x.py install` will place several programs into\n-    `/usr/local/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n+    When complete, `./x.py install` will place several programs into\n+    `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n     API-documentation tool. This install does not include [Cargo],\n-    Rust's package manager, which you may also want to build.\n+    Rust's package manager. To build and install Cargo, you may\n+    run `./x.py install cargo` or set the `build.extended` key in\n+    `config.toml` to `true` to build and install all tools.\n \n [Cargo]: https://github.com/rust-lang/cargo\n \n ### Building on Windows\n-[building-on-windows]: #building-on-windows\n \n There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\n Visual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust\n@@ -85,7 +81,6 @@ for interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU\n build.\n \n #### MinGW\n-[windows-mingw]: #windows-mingw\n \n [MSYS2][msys2] can be used to easily build Rust on Windows:\n \n@@ -126,7 +121,6 @@ build.\n    ```\n \n #### MSVC\n-[windows-msvc]: #windows-msvc\n \n MSVC builds of Rust additionally require an installation of Visual Studio 2017\n (or later) so `rustc` can use its linker.  The simplest way is to get the\n@@ -155,7 +149,6 @@ by manually calling the appropriate vcvars file before running the bootstrap.\n ```\n \n #### Specifying an ABI\n-[specifying-an-abi]: #specifying-an-abi\n \n Each specific ABI can also be used from either environment (for example, using\n the GNU ABI in PowerShell) by using an explicit build triple. The available\n@@ -169,11 +162,10 @@ Windows build triples are:\n \n The build triple can be specified by either specifying `--build=<triple>` when\n invoking `x.py` commands, or by copying the `config.toml` file (as described\n-in Building From Source), and modifying the `build` option under the `[build]`\n-section.\n+in [Installing From Source](#installing-from-source)), and modifying the\n+`build` option under the `[build]` section.\n \n ### Configure and Make\n-[configure-and-make]: #configure-and-make\n \n While it's not the recommended build system, this project also provides a\n configure script and makefile (the latter of which just invokes `x.py`).\n@@ -188,7 +180,6 @@ When using the configure script, the generated `config.mk` file may override the\n `config.mk` file.\n \n ## Building Documentation\n-[building-documentation]: #building-documentation\n \n If you\u2019d like to build the documentation, it\u2019s almost the same:\n \n@@ -201,7 +192,6 @@ the ABI used. I.e., if the ABI was `x86_64-pc-windows-msvc`, the directory will\n `build\\x86_64-pc-windows-msvc\\doc`.\n \n ## Notes\n-[notes]: #notes\n \n Since the Rust compiler is written in Rust, it must be built by a\n precompiled \"snapshot\" version of itself (made in an earlier stage of\n@@ -224,7 +214,6 @@ There is more advice about hacking on Rust in [CONTRIBUTING.md].\n [CONTRIBUTING.md]: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\n \n ## Getting Help\n-[getting-help]: #getting-help\n \n The Rust community congregates in a few places:\n \n@@ -237,7 +226,6 @@ The Rust community congregates in a few places:\n [users.rust-lang.org]: https://users.rust-lang.org/\n \n ## Contributing\n-[contributing]: #contributing\n \n To contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n \n@@ -258,7 +246,6 @@ Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n [rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n \n ## License\n-[license]: #license\n \n Rust is primarily distributed under the terms of both the MIT license\n and the Apache License (Version 2.0), with portions covered by various\n@@ -268,7 +255,6 @@ See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n [COPYRIGHT](COPYRIGHT) for details.\n \n ## Trademark\n-[trademark]: #trademark\n \n The Rust programming language is an open source, community project governed\n by a core team. It is also sponsored by the Mozilla Foundation (\u201cMozilla\u201d),"}, {"sha": "86901792d79740f1467f53baeb4862f598aad9e3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/cd1381e91ff4889616eb0c87bf3c321ea2697d42/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/cd1381e91ff4889616eb0c87bf3c321ea2697d42/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=cd1381e91ff4889616eb0c87bf3c321ea2697d42", "patch": "@@ -735,6 +735,47 @@ def set_dev_environment(self):\n         \"\"\"Set download URL for development environment\"\"\"\n         self._download_url = 'https://dev-static.rust-lang.org'\n \n+    def check_vendored_status(self):\n+        \"\"\"Check that vendoring is configured properly\"\"\"\n+        vendor_dir = os.path.join(self.rust_root, 'vendor')\n+        if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n+            if os.environ.get('USER') != os.environ['SUDO_USER']:\n+                self.use_vendored_sources = True\n+                print('info: looks like you are running this command under `sudo`')\n+                print('      and so in order to preserve your $HOME this will now')\n+                print('      use vendored sources by default.')\n+                if not os.path.exists(vendor_dir):\n+                    print('error: vendoring required, but vendor directory does not exist.')\n+                    print('       Run `cargo vendor` without sudo to initialize the '\n+                        'vendor directory.')\n+                    raise Exception(\"{} not found\".format(vendor_dir))\n+\n+        if self.use_vendored_sources:\n+            if not os.path.exists('.cargo'):\n+                os.makedirs('.cargo')\n+            with output('.cargo/config') as cargo_config:\n+                cargo_config.write(\n+                    \"[source.crates-io]\\n\"\n+                    \"replace-with = 'vendored-sources'\\n\"\n+                    \"registry = 'https://example.com'\\n\"\n+                    \"\\n\"\n+                    \"[source.vendored-sources]\\n\"\n+                    \"directory = '{}/vendor'\\n\"\n+                .format(self.rust_root))\n+        else:\n+            if os.path.exists('.cargo'):\n+                shutil.rmtree('.cargo')\n+\n+    def ensure_vendored(self):\n+        \"\"\"Ensure that the vendored sources are available if needed\"\"\"\n+        vendor_dir = os.path.join(self.rust_root, 'vendor')\n+        # Note that this does not handle updating the vendored dependencies if\n+        # the rust git repository is updated. Normal development usually does\n+        # not use vendoring, so hopefully this isn't too much of a problem.\n+        if self.use_vendored_sources and not os.path.exists(vendor_dir):\n+            run([self.cargo(), \"vendor\"],\n+                verbose=self.verbose, cwd=self.rust_root)\n+\n \n def bootstrap(help_triggered):\n     \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n@@ -776,30 +817,7 @@ def bootstrap(help_triggered):\n \n     build.use_locked_deps = '\\nlocked-deps = true' in build.config_toml\n \n-    if 'SUDO_USER' in os.environ and not build.use_vendored_sources:\n-        if os.environ.get('USER') != os.environ['SUDO_USER']:\n-            build.use_vendored_sources = True\n-            print('info: looks like you are running this command under `sudo`')\n-            print('      and so in order to preserve your $HOME this will now')\n-            print('      use vendored sources by default. Note that if this')\n-            print('      does not work you should run a normal build first')\n-            print('      before running a command like `sudo ./x.py install`')\n-\n-    if build.use_vendored_sources:\n-        if not os.path.exists('.cargo'):\n-            os.makedirs('.cargo')\n-        with output('.cargo/config') as cargo_config:\n-            cargo_config.write(\"\"\"\n-                [source.crates-io]\n-                replace-with = 'vendored-sources'\n-                registry = 'https://example.com'\n-\n-                [source.vendored-sources]\n-                directory = '{}/vendor'\n-            \"\"\".format(build.rust_root))\n-    else:\n-        if os.path.exists('.cargo'):\n-            shutil.rmtree('.cargo')\n+    build.check_vendored_status()\n \n     data = stage0_data(build.rust_root)\n     build.date = data['date']\n@@ -815,6 +833,7 @@ def bootstrap(help_triggered):\n     build.build = args.build or build.build_triple()\n     build.download_stage0()\n     sys.stdout.flush()\n+    build.ensure_vendored()\n     build.build_bootstrap()\n     sys.stdout.flush()\n "}, {"sha": "3e9596f446b380e48ec167e74130b37444a05325", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd1381e91ff4889616eb0c87bf3c321ea2697d42/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1381e91ff4889616eb0c87bf3c321ea2697d42/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=cd1381e91ff4889616eb0c87bf3c321ea2697d42", "patch": "@@ -935,8 +935,6 @@ impl Step for Src {\n     }\n }\n \n-const CARGO_VENDOR_VERSION: &str = \"0.1.22\";\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct PlainSourceTarball;\n \n@@ -998,26 +996,6 @@ impl Step for PlainSourceTarball {\n \n         // If we're building from git sources, we need to vendor a complete distribution.\n         if builder.rust_info.is_git() {\n-            // Get cargo-vendor installed, if it isn't already.\n-            let mut has_cargo_vendor = false;\n-            let mut cmd = Command::new(&builder.initial_cargo);\n-            for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n-                has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n-            }\n-            if !has_cargo_vendor {\n-                let mut cmd = builder.cargo(\n-                    builder.compiler(0, builder.config.build),\n-                    Mode::ToolBootstrap,\n-                    builder.config.build,\n-                    \"install\"\n-                );\n-                cmd.arg(\"--force\")\n-                   .arg(\"--debug\")\n-                   .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-                   .arg(\"cargo-vendor\");\n-                builder.run(&mut cmd);\n-            }\n-\n             // Vendor all Cargo dependencies\n             let mut cmd = Command::new(&builder.initial_cargo);\n             cmd.arg(\"vendor\")"}]}