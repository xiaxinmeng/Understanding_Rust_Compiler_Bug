{"sha": "da12c4f8e543cecb3c3841bf4a099522950d3b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMTJjNGY4ZTU0M2NlY2IzYzM4NDFiZjRhMDk5NTIyOTUwZDNiNzA=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-02T10:17:34Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-03T12:40:40Z"}, "message": "Handle ambiguous cases", "tree": {"sha": "5c9e660096cc0d6454780f507c9361521dfde83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9e660096cc0d6454780f507c9361521dfde83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da12c4f8e543cecb3c3841bf4a099522950d3b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da12c4f8e543cecb3c3841bf4a099522950d3b70", "html_url": "https://github.com/rust-lang/rust/commit/da12c4f8e543cecb3c3841bf4a099522950d3b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da12c4f8e543cecb3c3841bf4a099522950d3b70/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac919d527ced593e1b199b8c5b7b8cafa3840375", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac919d527ced593e1b199b8c5b7b8cafa3840375", "html_url": "https://github.com/rust-lang/rust/commit/ac919d527ced593e1b199b8c5b7b8cafa3840375"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "f929a7ef49e1a5acdb7d5404cb9dede3f5d2c2a7", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/da12c4f8e543cecb3c3841bf4a099522950d3b70/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da12c4f8e543cecb3c3841bf4a099522950d3b70/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=da12c4f8e543cecb3c3841bf4a099522950d3b70", "patch": "@@ -167,27 +167,40 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if result.rerun {\n             // We probe again, taking all traits into account (not only those in scope).\n-            if let Ok(new_pick) = self.lookup_probe(span,\n-                                                    segment.name,\n-                                                    self_ty,\n-                                                    call_expr,\n-                                                    ProbeScope::AllTraits) {\n-                // If we find a different result, the caller probably forgot to import the trait.\n-                // We span an error with an appropriate help message.\n-                if new_pick != pick {\n-                    let error = MethodError::NoMatch(\n-                        NoMatchData::new(Vec::new(),\n-                                         Vec::new(),\n-                                         vec![new_pick.item.container.id()],\n-                                         probe::Mode::MethodCall)\n-                    );\n-                    self.report_method_error(span,\n-                                             self_ty,\n-                                             segment.name,\n-                                             Some(self_expr),\n-                                             error,\n-                                             None);\n-                }\n+            let candidates =\n+                match self.lookup_probe(span,\n+                                        segment.name,\n+                                        self_ty,\n+                                        call_expr,\n+                                        ProbeScope::AllTraits) {\n+                    Ok(ref new_pick) if *new_pick != pick => vec![new_pick.item.container.id()],\n+                    Err(MethodError::Ambiguity(ref sources)) => {\n+                        sources.iter()\n+                               .filter_map(|source| {\n+                                   match *source {\n+                                       // Note: this cannot come from an inherent impl,\n+                                       // because the first probe succeeded.\n+                                       ImplSource(def) => self.tcx.trait_id_of_impl(def),\n+                                       TraitSource(_) => None,\n+                                   }\n+                               })\n+                               .collect()\n+                    }\n+                    _ => Vec::new(),\n+                };\n+\n+            // If we find a different result, the caller probably forgot to import a trait.\n+            // We span an error with an appropriate help message.\n+            if !candidates.is_empty() {\n+                let error = MethodError::NoMatch(\n+                    NoMatchData::new(Vec::new(), Vec::new(), candidates, probe::Mode::MethodCall)\n+                );\n+                self.report_method_error(span,\n+                                         self_ty,\n+                                         segment.name,\n+                                         Some(self_expr),\n+                                         error,\n+                                         None);\n             }\n         }\n "}]}