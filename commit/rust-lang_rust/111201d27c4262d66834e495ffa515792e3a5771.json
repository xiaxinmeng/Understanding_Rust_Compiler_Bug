{"sha": "111201d27c4262d66834e495ffa515792e3a5771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTIwMWQyN2M0MjYyZDY2ODM0ZTQ5NWZmYTUxNTc5MmUzYTU3NzE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T10:17:25Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T09:38:28Z"}, "message": "Use multi span suggestions for closure migrations.", "tree": {"sha": "2f33fa8c74bd67b06438b02324fa5a03da2d9e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f33fa8c74bd67b06438b02324fa5a03da2d9e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111201d27c4262d66834e495ffa515792e3a5771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111201d27c4262d66834e495ffa515792e3a5771", "html_url": "https://github.com/rust-lang/rust/commit/111201d27c4262d66834e495ffa515792e3a5771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111201d27c4262d66834e495ffa515792e3a5771/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23461b210f1b0a121592a18fc4fb666106006668", "url": "https://api.github.com/repos/rust-lang/rust/commits/23461b210f1b0a121592a18fc4fb666106006668", "html_url": "https://github.com/rust-lang/rust/commit/23461b210f1b0a121592a18fc4fb666106006668"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "f4da3d3c8704ea2f863992ee600e341f8d3c01dd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/111201d27c4262d66834e495ffa515792e3a5771/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111201d27c4262d66834e495ffa515792e3a5771/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=111201d27c4262d66834e495ffa515792e3a5771", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span, Symbol, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -645,6 +645,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n \n+                    let diagnostic_msg = format!(\n+                        \"add a dummy let to cause {} to be fully captured\",\n+                        migrated_variables_concat\n+                    );\n+\n                     let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n \n                     // If the body was entirely expanded from a macro\n@@ -655,43 +660,54 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n                     }\n \n-                    let (span, sugg, app) =\n-                        match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n-                            Ok(s) => {\n-                                let trimmed = s.trim_start();\n-                                let mut lines = trimmed.lines();\n-                                let line1 = lines.next().unwrap_or_default();\n-\n-                                // If the closure contains a block then replace the opening brace\n-                                // with \"{ let _ = (..); \"\n-                                let sugg = if line1.trim_end() == \"{\" {\n-                                    // This is a multi-line closure with just a `{` on the first line,\n-                                    // so we put the `let` on its own line.\n-                                    // We take the indentation from the next non-empty line.\n-                                    let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n-                                    let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n-                                    format!(\"{{\\n{}{};{}\", indent, migration_string, &trimmed[line1.len()..])\n-                                } else if line1.starts_with('{') {\n-                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..].trim_start())\n-                                } else {\n-                                    format!(\"{{ {}; {} }}\", migration_string, s)\n-                                };\n-                                (closure_body_span, sugg, Applicability::MachineApplicable)\n-                            }\n-                            Err(_) => (closure_span, migration_string.clone(), Applicability::HasPlaceholders),\n-                        };\n-\n-                    let diagnostic_msg = format!(\n-                        \"add a dummy let to cause {} to be fully captured\",\n-                        migrated_variables_concat\n-                    );\n+                    if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                        let mut lines = s.lines();\n+                        let line1 = lines.next().unwrap_or_default();\n+\n+                        if line1.trim_end() == \"{\" {\n+                            // This is a multi-line closure with just a `{` on the first line,\n+                            // so we put the `let` on its own line.\n+                            // We take the indentation from the next non-empty line.\n+                            let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n+                            let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos::from_usize(line1.len())).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\"\\n{}{};\", indent, migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if line1.starts_with('{') {\n+                            // This is a closure with its body wrapped in\n+                            // braces, but with more than just the opening\n+                            // brace on the first line. We put the `let`\n+                            // directly after the `{`.\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos(1)).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\" {};\", migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // This is a closure without braces around the body.\n+                            // We add braces to add the `let` before the body.\n+                            diagnostics_builder.multipart_suggestion(\n+                                &diagnostic_msg,\n+                                vec![\n+                                    (closure_body_span.shrink_to_lo(), format!(\"{{ {}; \", migration_string)),\n+                                    (closure_body_span.shrink_to_hi(), \" }\".to_string()),\n+                                ],\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n+                    } else {\n+                        diagnostics_builder.span_suggestion(\n+                            closure_span,\n+                            &diagnostic_msg,\n+                            migration_string,\n+                            Applicability::HasPlaceholders\n+                        );\n+                    }\n \n-                    diagnostics_builder.span_suggestion(\n-                        span,\n-                        &diagnostic_msg,\n-                        sugg,\n-                        app,\n-                    );\n                     diagnostics_builder.emit();\n                 },\n             );"}]}