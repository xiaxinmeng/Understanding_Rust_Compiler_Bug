{"sha": "6142f50845171bba9975be096f0fd4ea2a056fdf", "node_id": "C_kwDOAAsO6NoAKDYxNDJmNTA4NDUxNzFiYmE5OTc1YmUwOTZmMGZkNGVhMmEwNTZmZGY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T09:14:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:53:30Z"}, "message": "Directly encode DefPathHash in metadata.", "tree": {"sha": "3dc040772de5c6f04362cd3a5ee5c104c1ca398e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dc040772de5c6f04362cd3a5ee5c104c1ca398e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6142f50845171bba9975be096f0fd4ea2a056fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6142f50845171bba9975be096f0fd4ea2a056fdf", "html_url": "https://github.com/rust-lang/rust/commit/6142f50845171bba9975be096f0fd4ea2a056fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6142f50845171bba9975be096f0fd4ea2a056fdf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72be5b81df7d038411ea0f88f6ef351e386aca9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/72be5b81df7d038411ea0f88f6ef351e386aca9c", "html_url": "https://github.com/rust-lang/rust/commit/72be5b81df7d038411ea0f88f6ef351e386aca9c"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "7b500f1565da269007aebeda4926b7a90fe6cfef", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6142f50845171bba9975be096f0fd4ea2a056fdf", "patch": "@@ -1459,9 +1459,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         index: DefIndex,\n         def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,\n     ) -> DefPathHash {\n-        *def_path_hashes.entry(index).or_insert_with(|| {\n-            self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)\n-        })\n+        *def_path_hashes\n+            .entry(index)\n+            .or_insert_with(|| self.root.tables.def_path_hashes.get(self, index).unwrap())\n     }\n \n     #[inline]"}, {"sha": "be10ad490e11ec84ecf2e5d83d320aeb673b9572", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6142f50845171bba9975be096f0fd4ea2a056fdf", "patch": "@@ -461,16 +461,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))\n             {\n                 let def_key = self.lazy(table.def_key(def_index));\n-                let def_path_hash = self.lazy(table.def_path_hash(def_index));\n+                let def_path_hash = table.def_path_hash(def_index);\n                 self.tables.def_keys.set(def_index, def_key);\n                 self.tables.def_path_hashes.set(def_index, def_path_hash);\n             }\n         } else {\n             for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {\n                 let def_key = self.lazy(def_key);\n-                let def_path_hash = self.lazy(def_path_hash);\n                 self.tables.def_keys.set(def_index, def_key);\n-                self.tables.def_path_hashes.set(def_index, def_path_hash);\n+                self.tables.def_path_hashes.set(def_index, *def_path_hash);\n             }\n         }\n     }"}, {"sha": "37340ee3268411bcd08ae9c9f0b9d84f81f31aa2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6142f50845171bba9975be096f0fd4ea2a056fdf", "patch": "@@ -332,7 +332,7 @@ define_tables! {\n     // `DefPathTable` up front, since we may only ever use a few\n     // definitions from any given crate.\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n-    def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>,\n+    def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, Lazy<Span>>,\n }\n "}, {"sha": "3e0aa0728df435bd4820d41efa83e579e80a9ce6", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6142f50845171bba9975be096f0fd4ea2a056fdf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=6142f50845171bba9975be096f0fd4ea2a056fdf", "patch": "@@ -1,5 +1,6 @@\n use crate::rmeta::*;\n \n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n use rustc_serialize::opaque::Encoder;\n@@ -181,6 +182,24 @@ fixed_size_enum! {\n     }\n }\n \n+// We directly encode `DefPathHash` because a `Lazy` would encur a 25% cost.\n+impl FixedSizeEncoding for Option<DefPathHash> {\n+    fixed_size_encoding_byte_len_and_defaults!(16);\n+\n+    #[inline]\n+    fn from_bytes(b: &[u8]) -> Self {\n+        Some(DefPathHash(Fingerprint::from_le_bytes(b.try_into().unwrap())))\n+    }\n+\n+    #[inline]\n+    fn write_to_bytes(self, b: &mut [u8]) {\n+        let Some(DefPathHash(fingerprint)) = self else {\n+            panic!(\"Trying to encode absent DefPathHash.\")\n+        };\n+        b[..Self::BYTE_LEN].copy_from_slice(&fingerprint.to_le_bytes());\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}]}