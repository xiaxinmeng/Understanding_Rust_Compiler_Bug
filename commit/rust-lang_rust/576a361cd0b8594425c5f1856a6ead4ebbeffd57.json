{"sha": "576a361cd0b8594425c5f1856a6ead4ebbeffd57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmEzNjFjZDBiODU5NDQyNWM1ZjE4NTZhNmVhZDRlYmJlZmZkNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-10T16:18:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-10T16:18:07Z"}, "message": "Auto merge of #37780 - GuillaumeGomez:E0571, r=nikomatsakis\n\nAdd checkup for return statement outside of a function\n\nFixes #37778.\n\nr? @eddyb (don't know who is in charge. Don't hesitate to set another one)\n\ncc @jonathandturner", "tree": {"sha": "187efa86f1366be1ae73d88ac867c9d9d8bb4ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187efa86f1366be1ae73d88ac867c9d9d8bb4ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576a361cd0b8594425c5f1856a6ead4ebbeffd57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576a361cd0b8594425c5f1856a6ead4ebbeffd57", "html_url": "https://github.com/rust-lang/rust/commit/576a361cd0b8594425c5f1856a6ead4ebbeffd57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576a361cd0b8594425c5f1856a6ead4ebbeffd57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c9f184a285140f264d68b5365c5e27d4822781", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c9f184a285140f264d68b5365c5e27d4822781", "html_url": "https://github.com/rust-lang/rust/commit/39c9f184a285140f264d68b5365c5e27d4822781"}, {"sha": "ed3c483aa8472bf791718d6f157e4e55873e7e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3c483aa8472bf791718d6f157e4e55873e7e5d", "html_url": "https://github.com/rust-lang/rust/commit/ed3c483aa8472bf791718d6f157e4e55873e7e5d"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "478de1673170f79ea03cb1836a421d3cccf88c19", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=576a361cd0b8594425c5f1856a6ead4ebbeffd57", "patch": "@@ -376,7 +376,7 @@ fn compare_predicate_entailment<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 &infcx.parameter_environment.caller_bounds);\n             infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n         } else {\n-            let fcx = FnCtxt::new(&inh, tcx.types.err, impl_m_body_id);\n+            let fcx = FnCtxt::new(&inh, Some(tcx.types.err), impl_m_body_id);\n             fcx.regionck_item(impl_m_body_id, impl_m_span, &[]);\n         }\n "}, {"sha": "9c8d7caefe5fff101a49b0b9fde3118415f927a6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=576a361cd0b8594425c5f1856a6ead4ebbeffd57", "patch": "@@ -451,7 +451,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // expects the types within the function to be consistent.\n     err_count_on_creation: usize,\n \n-    ret_ty: Ty<'tcx>,\n+    ret_ty: Option<Ty<'tcx>>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -785,12 +785,14 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Create the function context.  This is either derived from scratch or,\n     // in the case of function expressions, based on the outer context.\n-    let mut fcx = FnCtxt::new(inherited, fn_sig.output(), body.id);\n+    let mut fcx = FnCtxt::new(inherited, None, body.id);\n+    let ret_ty = fn_sig.output();\n     *fcx.ps.borrow_mut() = UnsafetyState::function(unsafety, unsafety_id);\n \n-    fcx.require_type_is_sized(fcx.ret_ty, decl.output.span(), traits::ReturnType);\n-    fcx.ret_ty = fcx.instantiate_anon_types(&fcx.ret_ty);\n-    fn_sig = fcx.tcx.mk_fn_sig(fn_sig.inputs().iter().cloned(), &fcx.ret_ty, fn_sig.variadic);\n+    fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::ReturnType);\n+    fcx.ret_ty = fcx.instantiate_anon_types(&Some(ret_ty));\n+    fn_sig = fcx.tcx.mk_fn_sig(fn_sig.inputs().iter().cloned(), &fcx.ret_ty.unwrap(),\n+                               fn_sig.variadic);\n \n     {\n         let mut visit = GatherLocalsVisitor { fcx: &fcx, };\n@@ -821,7 +823,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     inherited.tables.borrow_mut().liberated_fn_sigs.insert(fn_id, fn_sig);\n \n-    fcx.check_expr_coercable_to_type(body, fcx.ret_ty);\n+    fcx.check_expr_coercable_to_type(body, fcx.ret_ty.unwrap());\n \n     fcx\n }\n@@ -1245,7 +1247,7 @@ fn check_const_with_type<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n                                    expected_type: Ty<'tcx>,\n                                    id: ast::NodeId) {\n     ccx.inherited(id).enter(|inh| {\n-        let fcx = FnCtxt::new(&inh, expected_type, expr.id);\n+        let fcx = FnCtxt::new(&inh, None, expr.id);\n         fcx.require_type_is_sized(expected_type, expr.span, traits::ConstSized);\n \n         // Gather locals in statics (because of block expressions).\n@@ -1530,7 +1532,7 @@ enum TupleArgumentsFlag {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n-               rty: Ty<'tcx>,\n+               rty: Option<Ty<'tcx>>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n@@ -3705,14 +3707,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprAgain(_) => { tcx.types.never }\n           hir::ExprRet(ref expr_opt) => {\n-            if let Some(ref e) = *expr_opt {\n-                self.check_expr_coercable_to_type(&e, self.ret_ty);\n+            if self.ret_ty.is_none() {\n+                struct_span_err!(self.tcx.sess, expr.span, E0572,\n+                                 \"return statement outside of function body\").emit();\n+            } else if let Some(ref e) = *expr_opt {\n+                self.check_expr_coercable_to_type(&e, self.ret_ty.unwrap());\n             } else {\n                 match self.eq_types(false,\n                                     &self.misc(expr.span),\n-                                    self.ret_ty,\n-                                    tcx.mk_nil())\n-                {\n+                                    self.ret_ty.unwrap(),\n+                                    tcx.mk_nil()) {\n                     Ok(ok) => self.register_infer_ok_obligations(ok),\n                     Err(_) => {\n                         struct_span_err!(tcx.sess, expr.span, E0069,"}, {"sha": "ffdb56753fdc1a028550ff20930843aca48e8334", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=576a361cd0b8594425c5f1856a6ead4ebbeffd57", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let id = self.id;\n         let span = self.span;\n         self.inherited.enter(|inh| {\n-            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.types.never, id);\n+            let fcx = FnCtxt::new(&inh, Some(inh.ccx.tcx.types.never), id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 ccx: fcx.ccx,\n                 code: code"}, {"sha": "71507063ffc43cd8296dc6454a28745e14d2ef21", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=576a361cd0b8594425c5f1856a6ead4ebbeffd57", "patch": "@@ -4164,6 +4164,33 @@ target / ABI combination is currently unsupported by llvm.\n If necessary, you can circumvent this check using custom target specifications.\n \"##,\n \n+E0572: r##\"\n+A return statement was found outside of a function body.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0572\n+const FOO: u32 = return 0; // error: return statement outside of function body\n+\n+fn main() {}\n+```\n+\n+To fix this issue, just remove the return keyword or move the expression into a\n+function. Example:\n+\n+```\n+const FOO: u32 = 0;\n+\n+fn some_fn() -> u32 {\n+    return FOO;\n+}\n+\n+fn main() {\n+    some_fn();\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "bbaab102de7dbba11b75b4e52e6a1ca210a7cd57", "filename": "src/test/compile-fail/E0572.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Ftest%2Fcompile-fail%2FE0572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576a361cd0b8594425c5f1856a6ead4ebbeffd57/src%2Ftest%2Fcompile-fail%2FE0572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0572.rs?ref=576a361cd0b8594425c5f1856a6ead4ebbeffd57", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const FOO: u32 = return 0; //~ ERROR E0572\n+\n+fn main() {}"}]}