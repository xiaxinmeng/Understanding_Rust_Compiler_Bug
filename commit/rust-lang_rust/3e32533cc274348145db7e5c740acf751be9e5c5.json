{"sha": "3e32533cc274348145db7e5c740acf751be9e5c5", "node_id": "C_kwDOAAsO6NoAKDNlMzI1MzNjYzI3NDM0ODE0NWRiN2U1Yzc0MGFjZjc1MWJlOWU1YzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-05T15:33:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T09:55:26Z"}, "message": "Remove `HirId -> LocalDefId` map from HIR.", "tree": {"sha": "b50ca5105f067fb3eb92de956dd6ce2dcf950b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50ca5105f067fb3eb92de956dd6ce2dcf950b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e32533cc274348145db7e5c740acf751be9e5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e32533cc274348145db7e5c740acf751be9e5c5", "html_url": "https://github.com/rust-lang/rust/commit/3e32533cc274348145db7e5c740acf751be9e5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e32533cc274348145db7e5c740acf751be9e5c5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "html_url": "https://github.com/rust-lang/rust/commit/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "6c333afacc648b41d567d36b9b782095d8936fce", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=3e32533cc274348145db7e5c740acf751be9e5c5", "patch": "@@ -778,20 +778,20 @@ fn walk_parents<'tcx>(\n \n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n-                    let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n+                    let owner_id = cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap());\n                     Some(\n                         if let Node::Expr(\n                             closure_expr @ Expr {\n                                 kind: ExprKind::Closure(closure),\n                                 ..\n                             },\n-                        ) = cx.tcx.hir().get(owner_id)\n+                        ) = cx.tcx.hir().get_by_def_id(owner_id)\n                         {\n                             closure_result_position(cx, closure, cx.typeck_results().expr_ty(closure_expr), precedence)\n                         } else {\n                             let output = cx\n                                 .tcx\n-                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).subst_identity().output());\n+                                .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n                             ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n                         },\n                     )"}, {"sha": "9a84068d4487b3054607d5babc643b30aa15f5ac", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=3e32533cc274348145db7e5c740acf751be9e5c5", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                (matches!(v.data, hir::VariantData::Unit(..))\n+                (matches!(v.data, hir::VariantData::Unit(_, _))\n                     && v.ident.as_str().starts_with('_')\n                     && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n                 .then_some((v.def_id, v.span))"}, {"sha": "0dc7fe2a2c5a36d900e9a43b61829a86d664ab1d", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=3e32533cc274348145db7e5c740acf751be9e5c5", "patch": "@@ -11,8 +11,7 @@ use super::SUSPICIOUS_MAP;\n pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n-        let closure = expr_or_init(cx, map_arg);\n-        if let hir::ExprKind::Closure(closure) = closure.kind;\n+        if let hir::ExprKind::Closure(closure) = expr_or_init(cx, map_arg).kind;\n         let closure_body = cx.tcx.hir().body(closure.body);\n         if !cx.typeck_results().expr_ty(closure_body.value).is_unit();\n         then {"}, {"sha": "0db3b93e7cc9fe3a9c7c06ab6b0ebdac61528516", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=3e32533cc274348145db7e5c740acf751be9e5c5", "patch": "@@ -1119,9 +1119,8 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         self.captures.entry(l).and_modify(|e| *e |= cap).or_insert(cap);\n                     }\n                 },\n-                ExprKind::Closure { .. } => {\n-                    let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id);\n-                    for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n+                ExprKind::Closure(closure) => {\n+                    for capture in self.cx.typeck_results().closure_min_captures_flattened(closure.def_id) {\n                         let local_id = match capture.place.base {\n                             PlaceBase::Local(id) => id,\n                             PlaceBase::Upvar(var) => var.var_path.hir_id,\n@@ -1584,8 +1583,7 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_def_id: hir::OwnerId) -> Ty<'t\n }\n \n /// Convenience function to get the nth argument type of a function.\n-pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n+pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_def_id: hir::OwnerId, nth: usize) -> Ty<'tcx> {\n     let arg = cx.tcx.fn_sig(fn_def_id).subst_identity().input(nth);\n     cx.tcx.erase_late_bound_regions(arg)\n }"}, {"sha": "b8c87aa5e1e423ab02d0593d679afe235f1c4a71", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32533cc274348145db7e5c740acf751be9e5c5/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=3e32533cc274348145db7e5c740acf751be9e5c5", "patch": "@@ -809,7 +809,7 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n+    if let hir::ExprKind::Closure(&Closure { fn_decl, def_id, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n@@ -829,10 +829,8 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n             applicability: Applicability::MachineApplicable,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(closure.hir_id);\n         let infcx = cx.tcx.infer_ctxt().build();\n-        ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-            .consume_body(closure_body);\n+        ExprUseVisitor::new(&mut visitor, &infcx, def_id, cx.param_env, cx.typeck_results()).consume_body(closure_body);\n \n         if !visitor.suggestion_start.is_empty() {\n             return Some(DerefClosure {"}]}