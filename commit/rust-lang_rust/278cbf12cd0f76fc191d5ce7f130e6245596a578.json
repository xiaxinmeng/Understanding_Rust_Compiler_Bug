{"sha": "278cbf12cd0f76fc191d5ce7f130e6245596a578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OGNiZjEyY2QwZjc2ZmMxOTFkNWNlN2YxMzBlNjI0NTU5NmE1Nzg=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-24T20:24:36Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:10:26Z"}, "message": "Track unsafe blocks, don't trigger missing unsafe diagnostic when unsafe exprs within unsafe block", "tree": {"sha": "7c00307fbef82b45cbd0072a45819ea962bf8900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c00307fbef82b45cbd0072a45819ea962bf8900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/278cbf12cd0f76fc191d5ce7f130e6245596a578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/278cbf12cd0f76fc191d5ce7f130e6245596a578", "html_url": "https://github.com/rust-lang/rust/commit/278cbf12cd0f76fc191d5ce7f130e6245596a578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/278cbf12cd0f76fc191d5ce7f130e6245596a578/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df0f9ce7e6eea48b67dae8b26e83aa7bd36ff24", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df0f9ce7e6eea48b67dae8b26e83aa7bd36ff24", "html_url": "https://github.com/rust-lang/rust/commit/3df0f9ce7e6eea48b67dae8b26e83aa7bd36ff24"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "174bbf9f4717d6b42a8df953190e37dc20407bb7", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -218,8 +218,12 @@ impl ExprCollector<'_> {\n                     let body = self.collect_block_opt(e.block_expr());\n                     self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n                 }\n+                ast::Effect::Unsafe(_) => {\n+                    let body = self.collect_block_opt(e.block_expr());\n+                    self.alloc_expr(Expr::UnsafeBlock { body }, syntax_ptr)\n+                }\n                 // FIXME: we need to record these effects somewhere...\n-                ast::Effect::Async(_) | ast::Effect::Label(_) | ast::Effect::Unsafe(_) => {\n+                ast::Effect::Async(_) | ast::Effect::Label(_) => {\n                     self.collect_block_opt(e.block_expr())\n                 }\n             },"}, {"sha": "f5e3e74fb5df87a5862aaca5df93208f269c3a21", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -150,6 +150,9 @@ pub enum Expr {\n     Tuple {\n         exprs: Vec<ExprId>,\n     },\n+    UnsafeBlock {\n+        body: ExprId,\n+    },\n     Array(Array),\n     Literal(Literal),\n }\n@@ -247,7 +250,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::TryBlock { body } => f(*body),\n+            Expr::TryBlock { body } | Expr::UnsafeBlock { body } => f(*body),\n             Expr::Loop { body, .. } => f(*body),\n             Expr::While { condition, body, .. } => {\n                 f(*condition);"}, {"sha": "d600aca2154f8840e5f0315cfc1ead52d2af33ae", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -318,46 +318,74 @@ pub fn record_pattern_missing_fields(\n     Some((variant_def, missed_fields, exhaustive))\n }\n \n+pub struct UnsafeExpr {\n+    expr: ExprId,\n+    inside_unsafe_block: bool,\n+}\n+\n+impl UnsafeExpr {\n+    fn new(expr: ExprId) -> Self {\n+        Self { expr, inside_unsafe_block: false }\n+    }\n+}\n+\n pub fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,\n-) -> Vec<ExprId> {\n-    let mut unsafe_expr_ids = vec![];\n+) -> Vec<UnsafeExpr> {\n+    let mut unsafe_exprs = vec![];\n+    let mut unsafe_block_scopes = vec![];\n     let body = db.body(def);\n+    let expr_scopes = db.expr_scopes(def);\n     for (id, expr) in body.exprs.iter() {\n         match expr {\n+            Expr::UnsafeBlock { body } => {\n+                if let Some(scope) = expr_scopes.scope_for(*body) {\n+                    unsafe_block_scopes.push(scope);\n+                }\n+            }\n             Expr::Call { callee, .. } => {\n                 let ty = &infer.type_of_expr[*callee];\n-                if let &Ty::Apply(ApplicationTy {ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)), .. }) = ty {\n+                if let &Ty::Apply(ApplicationTy {\n+                    ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n+                    ..\n+                }) = ty\n+                {\n                     if db.function_data(func).is_unsafe {\n-                        unsafe_expr_ids.push(id);\n+                        unsafe_exprs.push(UnsafeExpr::new(id));\n                     }\n-                 }\n+                }\n             }\n             Expr::MethodCall { .. } => {\n                 if infer\n                     .method_resolution(id)\n-                    .map(|func| {\n-                        db.function_data(func).is_unsafe\n-                    })\n-                    .unwrap_or_else(|| {\n-                        false\n-                    })\n+                    .map(|func| db.function_data(func).is_unsafe)\n+                    .unwrap_or_else(|| false)\n                 {\n-                    unsafe_expr_ids.push(id);\n+                    unsafe_exprs.push(UnsafeExpr::new(id));\n                 }\n             }\n             Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n                 if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n-                    unsafe_expr_ids.push(id);\n+                    unsafe_exprs.push(UnsafeExpr::new(id));\n                 }\n             }\n             _ => {}\n         }\n     }\n \n-    unsafe_expr_ids\n+    'unsafe_exprs: for unsafe_expr in &mut unsafe_exprs {\n+        let scope = expr_scopes.scope_for(unsafe_expr.expr);\n+        for scope in expr_scopes.scope_chain(scope) {\n+            if unsafe_block_scopes.contains(&scope) {\n+                unsafe_expr.inside_unsafe_block = true;\n+                continue 'unsafe_exprs;\n+            }\n+        }\n+    }\n+\n+    unsafe_exprs\n }\n \n pub struct UnsafeValidator<'a, 'b: 'a> {\n@@ -379,7 +407,13 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let def = self.func.into();\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let func_data = db.function_data(self.func);\n-        if func_data.is_unsafe || unsafe_expressions.len() == 0 {\n+        if func_data.is_unsafe\n+            || unsafe_expressions\n+                .into_iter()\n+                .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n+                .count()\n+                == 0\n+        {\n             return;\n         }\n "}, {"sha": "df7bcb5fa99132eb3f7ae2a4a17a4ad35bfce776", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -142,6 +142,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME: Breakable block inference\n                 self.infer_block(statements, *tail, expected)\n             }\n+            Expr::UnsafeBlock { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);\n                 // FIXME should be std::result::Result<{inner}, _>"}, {"sha": "4bc2e8b276f66489d99f0acdd8e01c87a0a3e512", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -608,10 +608,30 @@ fn no_missing_unsafe_diagnostic_with_raw_ptr_in_unsafe_block() {\n         r\"\n //- /lib.rs\n fn nothing_to_see_move_along() {\n+    let x = &5 as *const usize;\n+    unsafe {\n+        let y = *x;\n+    }\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_raw_ptr_outside_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+fn nothing_to_see_move_along() {\n+    let x = &5 as *const usize;\n     unsafe {\n-        let x = &5 as *const usize;\n         let y = *x;\n     }\n+    let z = *x;\n }\n \",\n     )"}, {"sha": "cd919466f450807ccc6ca77bac66194337c8edf1", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -1880,6 +1880,7 @@ fn main() {\n         @r###\"\n     10..130 '{     ...2 }; }': ()\n     20..21 'x': i32\n+    24..37 'unsafe { 92 }': i32\n     31..37 '{ 92 }': i32\n     33..35 '92': i32\n     47..48 'y': {unknown}"}, {"sha": "58141da11426579788040106a2395307fdaa58a8", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cbf12cd0f76fc191d5ce7f130e6245596a578/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=278cbf12cd0f76fc191d5ce7f130e6245596a578", "patch": "@@ -899,7 +899,7 @@ impl ast::LoopBodyOwner for LoopExpr {}\n impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n-/// Block expression with an optional prefix (label, try keyword,\n+/// Block expression with an optional prefix (label, try ketword,\n /// unsafe keyword, async keyword...).\n ///\n /// ```"}]}