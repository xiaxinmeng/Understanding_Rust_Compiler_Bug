{"sha": "b498870d9c992e61e0f7930f2679b091b5f2ddbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTg4NzBkOWM5OTJlNjFlMGY3OTMwZjI2NzliMDkxYjVmMmRkYmM=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-12-03T03:25:22Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-01-02T22:49:05Z"}, "message": "use hir::Place instead of Symbol in closure_kind_origin", "tree": {"sha": "d0729cdb0e4162cb706f02a7eae17d11f1005769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0729cdb0e4162cb706f02a7eae17d11f1005769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b498870d9c992e61e0f7930f2679b091b5f2ddbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b498870d9c992e61e0f7930f2679b091b5f2ddbc", "html_url": "https://github.com/rust-lang/rust/commit/b498870d9c992e61e0f7930f2679b091b5f2ddbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b498870d9c992e61e0f7930f2679b091b5f2ddbc/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2987785df3d46d5ff144a5c67fbb8f5cca798d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2987785df3d46d5ff144a5c67fbb8f5cca798d78", "html_url": "https://github.com/rust-lang/rust/commit/2987785df3d46d5ff144a5c67fbb8f5cca798d78"}], "stats": {"total": 351, "additions": 328, "deletions": 23}, "files": [{"sha": "1539447a2cc12c5d00910a684a1e57ab88ae115f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -3,6 +3,7 @@\n use crate::arena::Arena;\n use crate::dep_graph::{self, DepGraph, DepKind, DepNode, DepNodeExt};\n use crate::hir::exports::ExportMap;\n+use crate::hir::place::Place as HirPlace;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n@@ -379,7 +380,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// Records the reasons that we picked the kind of each closure;\n     /// not all closures are present in the map.\n-    closure_kind_origins: ItemLocalMap<(Span, Symbol)>,\n+    closure_kind_origins: ItemLocalMap<(Span, HirPlace<'tcx>)>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions\n@@ -642,11 +643,13 @@ impl<'tcx> TypeckResults<'tcx> {\n         self.upvar_capture_map[&upvar_id]\n     }\n \n-    pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, Symbol)> {\n+    pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }\n     }\n \n-    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<'_, (Span, Symbol)> {\n+    pub fn closure_kind_origins_mut(\n+        &mut self,\n+    ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }\n     }\n "}, {"sha": "a0319567c86cfd1d0bd6766bb0330c60f2a41bb1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -17,7 +17,9 @@ pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n use crate::hir::exports::ExportMap;\n-use crate::hir::place::Place as HirPlace;\n+use crate::hir::place::{\n+    Place as HirPlace, PlaceBase as HirPlaceBase, ProjectionKind as HirProjectionKind,\n+};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n@@ -734,6 +736,43 @@ pub struct CapturedPlace<'tcx> {\n     pub info: CaptureInfo<'tcx>,\n }\n \n+pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n+    let name = match place.base {\n+        HirPlaceBase::Upvar(upvar_id) => tcx.hir().name(upvar_id.var_path.hir_id).to_string(),\n+        _ => bug!(\"Capture_information should only contain upvars\"),\n+    };\n+    let mut curr_string = name;\n+\n+    for (i, proj) in place.projections.iter().enumerate() {\n+        match proj.kind {\n+            HirProjectionKind::Deref => {\n+                curr_string = format!(\"*{}\", curr_string);\n+            }\n+            HirProjectionKind::Field(idx, variant) => match place.ty_before_projection(i).kind() {\n+                ty::Adt(def, ..) => {\n+                    curr_string = format!(\n+                        \"{}.{}\",\n+                        curr_string,\n+                        def.variants[variant].fields[idx as usize].ident.name.as_str()\n+                    );\n+                }\n+                ty::Tuple(_) => {\n+                    curr_string = format!(\"{}.{}\", curr_string, idx);\n+                }\n+                _ => {\n+                    bug!(\n+                        \"Field projection applied to a type other than Adt or Tuple: {:?}.\",\n+                        place.ty_before_projection(i).kind()\n+                    )\n+                }\n+            },\n+            proj => bug!(\"{:?} unexpected because it isn't captured\", proj),\n+        }\n+    }\n+\n+    curr_string.to_string()\n+}\n+\n /// Part of `MinCaptureInformationMap`; describes the capture kind (&, &mut, move)\n /// for a particular capture as well as identifying the part of the source code\n /// that triggered this capture to occur."}, {"sha": "239dee421cd06cb01e988f284d0083b291ba6632", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -103,15 +103,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let did = did.expect_local();\n                         let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(did);\n \n-                        if let Some((span, name)) =\n+                        if let Some((span, hir_place)) =\n                             self.infcx.tcx.typeck(did).closure_kind_origins().get(hir_id)\n                         {\n                             diag.span_note(\n                                 *span,\n                                 &format!(\n                                     \"closure cannot be invoked more than once because it moves the \\\n                                     variable `{}` out of its environment\",\n-                                    name,\n+                                    ty::place_to_string_for_capture(self.infcx.tcx, hir_place)\n                                 ),\n                             );\n                             return;\n@@ -127,15 +127,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let did = did.expect_local();\n                 let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(did);\n \n-                if let Some((span, name)) =\n+                if let Some((span, hir_place)) =\n                     self.infcx.tcx.typeck(did).closure_kind_origins().get(hir_id)\n                 {\n                     diag.span_note(\n                         *span,\n                         &format!(\n                             \"closure cannot be moved more than once as it is not `Copy` due to \\\n                              moving the variable `{}` out of its environment\",\n-                            name\n+                            ty::place_to_string_for_capture(self.infcx.tcx, hir_place)\n                         ),\n                     );\n                 }"}, {"sha": "9f7a8ebed6916505e3f0183002e2c228013897b7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -597,23 +597,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         if let Some(typeck_results) = self.in_progress_typeck_results {\n                             let typeck_results = typeck_results.borrow();\n                             match (found_kind, typeck_results.closure_kind_origins().get(hir_id)) {\n-                                (ty::ClosureKind::FnOnce, Some((span, name))) => {\n+                                (ty::ClosureKind::FnOnce, Some((span, place))) => {\n                                     err.span_label(\n                                         *span,\n                                         format!(\n                                             \"closure is `FnOnce` because it moves the \\\n                                          variable `{}` out of its environment\",\n-                                            name\n+                                            ty::place_to_string_for_capture(tcx, place)\n                                         ),\n                                     );\n                                 }\n-                                (ty::ClosureKind::FnMut, Some((span, name))) => {\n+                                (ty::ClosureKind::FnMut, Some((span, place))) => {\n                                     err.span_label(\n                                         *span,\n                                         format!(\n                                             \"closure is `FnMut` because it mutates the \\\n                                          variable `{}` here\",\n-                                            name\n+                                            ty::place_to_string_for_capture(tcx, place)\n                                         ),\n                                     );\n                                 }"}, {"sha": "7c4ec75f279486d7cf2e11294f30884fd86bc55c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -176,7 +176,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_eqtype(span, inferred_kind.to_ty(self.tcx), closure_kind_ty);\n \n             // If we have an origin, store it.\n-            if let Some(origin) = delegate.current_origin {\n+            if let Some(origin) = delegate.current_origin.clone() {\n+                let origin = if self.tcx.features().capture_disjoint_fields {\n+                    origin\n+                } else {\n+                    // FIXME(project-rfc-2229#26): Once rust-lang#80092 is merged, we should restrict the\n+                    // precision of origin as well. Otherwise, this will cause issues when project-rfc-2229#26\n+                    // is fixed as we might see Index projections in the origin, which we can't print because\n+                    // we don't store enough information.\n+                    (origin.0, Place { projections: vec![], ..origin.1 })\n+                };\n+\n                 self.typeck_results\n                     .borrow_mut()\n                     .closure_kind_origins_mut()\n@@ -563,7 +573,7 @@ struct InferBorrowKind<'a, 'tcx> {\n \n     // If we modified `current_closure_kind`, this field contains a `Some()` with the\n     // variable access that caused us to do so.\n-    current_origin: Option<(Span, Symbol)>,\n+    current_origin: Option<(Span, Place<'tcx>)>,\n \n     /// For each Place that is captured by the closure, we track the minimal kind of\n     /// access we need (ref, ref mut, move, etc) and the expression that resulted in such access.\n@@ -628,7 +638,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             upvar_id.closure_expr_id,\n             ty::ClosureKind::FnOnce,\n             usage_span,\n-            var_name(tcx, upvar_id.var_path.hir_id),\n+            place_with_id.place.clone(),\n         );\n \n         let capture_info = ty::CaptureInfo {\n@@ -720,7 +730,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n                 upvar_id.closure_expr_id,\n                 ty::ClosureKind::FnMut,\n                 tcx.hir().span(diag_expr_id),\n-                var_name(tcx, upvar_id.var_path.hir_id),\n+                place_with_id.place.clone(),\n             );\n         }\n     }\n@@ -765,11 +775,11 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         closure_id: LocalDefId,\n         new_kind: ty::ClosureKind,\n         upvar_span: Span,\n-        var_name: Symbol,\n+        place: Place<'tcx>,\n     ) {\n         debug!(\n-            \"adjust_closure_kind(closure_id={:?}, new_kind={:?}, upvar_span={:?}, var_name={})\",\n-            closure_id, new_kind, upvar_span, var_name\n+            \"adjust_closure_kind(closure_id={:?}, new_kind={:?}, upvar_span={:?}, place={:?})\",\n+            closure_id, new_kind, upvar_span, place\n         );\n \n         // Is this the closure whose kind is currently being inferred?\n@@ -797,7 +807,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             | (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                 // new kind is stronger than the old kind\n                 self.current_closure_kind = new_kind;\n-                self.current_origin = Some((upvar_span, var_name));\n+                self.current_origin = Some((upvar_span, place));\n             }\n         }\n     }"}, {"sha": "6edce62f76bc92aa4c63f9e5eda7920d5350b3db", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -384,9 +384,11 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n         let common_hir_owner = fcx_typeck_results.hir_owner;\n \n-        for (&id, &origin) in fcx_typeck_results.closure_kind_origins().iter() {\n-            let hir_id = hir::HirId { owner: common_hir_owner, local_id: id };\n-            self.typeck_results.closure_kind_origins_mut().insert(hir_id, origin);\n+        for (id, origin) in fcx_typeck_results.closure_kind_origins().iter() {\n+            let hir_id = hir::HirId { owner: common_hir_owner, local_id: *id };\n+            let place_span = origin.0;\n+            let place = self.resolve(origin.1.clone(), &place_span);\n+            self.typeck_results.closure_kind_origins_mut().insert(hir_id, (place_span, place));\n         }\n     }\n "}, {"sha": "2916d8c794f22e22b8b7f4c455077e21e14ea086", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-multi-variant-diagnostics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,31 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+// Check that precise paths are being reported back in the error message.\n+\n+\n+enum MultiVariant {\n+    Point(i32, i32),\n+    Meta(i32)\n+}\n+\n+fn main() {\n+    let mut point = MultiVariant::Point(10, -10,);\n+\n+    let mut meta = MultiVariant::Meta(1);\n+\n+    let c = || {\n+        if let MultiVariant::Point(ref mut x, _) = point {\n+            *x += 1;\n+        }\n+\n+        if let MultiVariant::Meta(ref mut v) = meta {\n+            *v += 1;\n+        }\n+    };\n+\n+    let a = c;\n+    let b = c; //~ ERROR use of moved value: `c` [E0382]\n+}"}, {"sha": "de0bfe3bd769fb035af319882b6fbfafa13e2fe4", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-multi-variant-diagnostics.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-multi-variant-diagnostics.stderr?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closure-origin-multi-variant-diagnostics.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-origin-multi-variant-diagnostics.rs:30:13\n+   |\n+LL |     let a = c;\n+   |             - value moved here\n+LL |     let b = c;\n+   |             ^ value used here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `point.0` out of its environment\n+  --> $DIR/closure-origin-multi-variant-diagnostics.rs:20:52\n+   |\n+LL |         if let MultiVariant::Point(ref mut x, _) = point {\n+   |                                                    ^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "8486f03f2eb8e8502082b2384232430e1a757d61", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,26 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+// Check that precise paths are being reported back in the error message.\n+\n+enum SingleVariant {\n+    Point(i32, i32),\n+}\n+\n+fn main() {\n+    let mut point = SingleVariant::Point(10, -10);\n+\n+    let c = || {\n+        // FIXME(project-rfc-2229#24): Change this to be a destructure pattern\n+        // once this is fixed, to remove the warning.\n+        if let SingleVariant::Point(ref mut x, _) = point {\n+            //~^ WARNING: irrefutable if-let pattern\n+            *x += 1;\n+        }\n+    };\n+\n+    let b = c;\n+    let a = c; //~ ERROR use of moved value: `c` [E0382]\n+}"}, {"sha": "ad66f6d7ffcaa6c37baeb6bd1a17b187f2723dba", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,37 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: irrefutable if-let pattern\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:18:9\n+   |\n+LL | /         if let SingleVariant::Point(ref mut x, _) = point {\n+LL | |\n+LL | |             *x += 1;\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n+\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:25:13\n+   |\n+LL |     let b = c;\n+   |             - value moved here\n+LL |     let a = c;\n+   |             ^ value used here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `point.0` out of its environment\n+  --> $DIR/closure-origin-single-variant-diagnostics.rs:18:53\n+   |\n+LL |         if let SingleVariant::Point(ref mut x, _) = point {\n+   |                                                     ^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "103890f1f353754a8de003296c63d1c3a4d370e7", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-struct-diagnostics.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,25 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+// Check that precise paths are being reported back in the error message.\n+\n+struct Y {\n+    y: X\n+}\n+\n+struct X {\n+    a: u32,\n+    b: u32,\n+}\n+\n+fn main() {\n+    let mut x = Y { y: X { a: 5, b: 0 } };\n+    let hello = || {\n+        x.y.a += 1;\n+    };\n+\n+    let b = hello;\n+    let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+}"}, {"sha": "474d77b7cd2086a541c11ff28f70ae845384f1ee", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-struct-diagnostics.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-struct-diagnostics.stderr?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closure-origin-struct-diagnostics.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0382]: use of moved value: `hello`\n+  --> $DIR/closure-origin-struct-diagnostics.rs:24:13\n+   |\n+LL |     let b = hello;\n+   |             ----- value moved here\n+LL |     let c = hello;\n+   |             ^^^^^ value used here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `x.y.a` out of its environment\n+  --> $DIR/closure-origin-struct-diagnostics.rs:20:9\n+   |\n+LL |         x.y.a += 1;\n+   |         ^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "6b078d2329c2ffbf8d3c96a8812179e85d8debd3", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,16 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+// Check that precise paths are being reported back in the error message.\n+\n+fn main() {\n+    let mut x = (5, 0);\n+    let hello = || {\n+        x.0 += 1;\n+    };\n+\n+    let b = hello;\n+    let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+}"}, {"sha": "716728e96ecbbb101c67e9d9089208711b6dfeb9", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics-1.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics-1.stderr?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closure-origin-tuple-diagnostics-1.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0382]: use of moved value: `hello`\n+  --> $DIR/closure-origin-tuple-diagnostics-1.rs:15:13\n+   |\n+LL |     let b = hello;\n+   |             ----- value moved here\n+LL |     let c = hello;\n+   |             ^^^^^ value used here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `x.0` out of its environment\n+  --> $DIR/closure-origin-tuple-diagnostics-1.rs:11:9\n+   |\n+LL |         x.0 += 1;\n+   |         ^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "0638db607690fda2987ba416a85ddffd90691fef", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.rs?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,15 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+struct S(String, String);\n+\n+fn expect_fn<F: Fn()>(_f: F) {}\n+\n+fn main() {\n+    let s = S(format!(\"s\"), format!(\"s\"));\n+    let c = || { //~ ERROR expected a closure that implements the `Fn`\n+        let s = s.1;\n+    };\n+    expect_fn(c);\n+}"}, {"sha": "77eb2a94ffb4d7ba01bfb5aae7dfb3029043a995", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b498870d9c992e61e0f7930f2679b091b5f2ddbc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr?ref=b498870d9c992e61e0f7930f2679b091b5f2ddbc", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closure-origin-tuple-diagnostics.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n+  --> $DIR/closure-origin-tuple-diagnostics.rs:11:13\n+   |\n+LL |     let c = || {\n+   |             ^^ this closure implements `FnOnce`, not `Fn`\n+LL |         let s = s.1;\n+   |                 --- closure is `FnOnce` because it moves the variable `s.1` out of its environment\n+LL |     };\n+LL |     expect_fn(c);\n+   |     --------- the requirement to implement `Fn` derives from here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0525`."}]}