{"sha": "0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNmI0ZTAzODYyMDY1ZDBiMTI5NmU5M2M5YmRmZWQyNWUwZjYwYTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-02T16:34:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-02T19:26:27Z"}, "message": "make it possible for a test to declare `should-panic`\nand write a really basic \"meta test\" of the compilertest framework", "tree": {"sha": "2d84c5849ed09d87ece6cb727796ee7115ba7dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d84c5849ed09d87ece6cb727796ee7115ba7dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "html_url": "https://github.com/rust-lang/rust/commit/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d76ccd9d45e818e0554c8ce491d5ed20130e9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d76ccd9d45e818e0554c8ce491d5ed20130e9c8", "html_url": "https://github.com/rust-lang/rust/commit/1d76ccd9d45e818e0554c8ce491d5ed20130e9c8"}], "stats": {"total": 132, "additions": 104, "deletions": 28}, "files": [{"sha": "9b63fe3fba322903c33e0bac9e960c03b8a0376b", "filename": "COMPILER_TESTS.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/COMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/COMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COMPILER_TESTS.md?ref=0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "patch": "@@ -42,6 +42,9 @@ whole, instead of just a few lines inside the test.\n * `ignore-test` always ignores the test\n * `ignore-lldb` and `ignore-gdb` will skip the debuginfo tests\n * `min-{gdb,lldb}-version`\n+* `should-panic` indicates that the test should fail; used for \"meta testing\",\n+  where we test the compiletest program itself to check that it will generate\n+  errors in appropriate scenarios\n \n ## Revisions\n \n@@ -73,3 +76,9 @@ fn test_foo() {\n     let x: usize = 32_u32; //[foo]~ ERROR mismatched types\n }\n ```\n+\n+Note that not all headers have meaning when customized too a revision.\n+For example, the `ignore-test` header (and all \"ignore\" headers)\n+currently only apply to the test as a whole, not to particular\n+revisions. The only headers that are intended to really work when\n+customized to a revision are error patterns and compiler flags."}, {"sha": "755ec2f31dcd6c08fe13badb27456a39dbc452bd", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "patch": "@@ -354,11 +354,16 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n }\n \n pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn {\n+    let early_props = header::early_props(config, &testpaths.file);\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testpaths),\n-            ignore: header::is_test_ignored(config, &testpaths.file),\n-            should_panic: test::ShouldPanic::No,\n+            ignore: early_props.ignore,\n+            should_panic: if early_props.should_panic {\n+                test::ShouldPanic::Yes\n+            } else {\n+                test::ShouldPanic::No\n+            },\n         },\n         testfn: make_test_closure(config, testpaths),\n     }"}, {"sha": "6882be44cbc0d4e534ad533ccdeb495b2c636855", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "patch": "@@ -164,8 +164,6 @@ pub fn load_props_into(props: &mut TestProps, testfile: &Path, cfg: Option<&str>\n         if let Some(of) = parse_forbid_output(ln) {\n             props.forbid_output.push(of);\n         }\n-\n-        true\n     });\n \n     for key in vec![\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -179,7 +177,42 @@ pub fn load_props_into(props: &mut TestProps, testfile: &Path, cfg: Option<&str>\n     }\n }\n \n-pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n+pub struct EarlyProps {\n+    pub ignore: bool,\n+    pub should_panic: bool,\n+}\n+\n+// scan the file to detect whether the test should be ignored and\n+// whether it should panic; these are two things the test runner needs\n+// to know early, before actually running the test\n+pub fn early_props(config: &Config, testfile: &Path) -> EarlyProps {\n+    let mut props = EarlyProps {\n+        ignore: false,\n+        should_panic: false,\n+    };\n+\n+    iter_header(testfile, None, &mut |ln| {\n+        props.ignore =\n+            props.ignore ||\n+            parse_name_directive(ln, \"ignore-test\") ||\n+            parse_name_directive(ln, &ignore_target(config)) ||\n+            parse_name_directive(ln, &ignore_architecture(config)) ||\n+            parse_name_directive(ln, &ignore_stage(config)) ||\n+            parse_name_directive(ln, &ignore_env(config)) ||\n+            (config.mode == common::Pretty &&\n+             parse_name_directive(ln, \"ignore-pretty\")) ||\n+            (config.target != config.host &&\n+             parse_name_directive(ln, \"ignore-cross-compile\")) ||\n+            ignore_gdb(config, ln) ||\n+            ignore_lldb(config, ln);\n+\n+        props.should_panic =\n+            props.should_panic ||\n+            parse_name_directive(ln, \"should-panic\");\n+    });\n+\n+    return props;\n+\n     fn ignore_target(config: &Config) -> String {\n         format!(\"ignore-{}\", util::get_os(&config.target))\n     }\n@@ -246,26 +279,11 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n             false\n         }\n     }\n-\n-    let val = iter_header(testfile, None, &mut |ln| {\n-        !parse_name_directive(ln, \"ignore-test\") &&\n-        !parse_name_directive(ln, &ignore_target(config)) &&\n-        !parse_name_directive(ln, &ignore_architecture(config)) &&\n-        !parse_name_directive(ln, &ignore_stage(config)) &&\n-        !parse_name_directive(ln, &ignore_env(config)) &&\n-        !(config.mode == common::Pretty && parse_name_directive(ln, \"ignore-pretty\")) &&\n-        !(config.target != config.host && parse_name_directive(ln, \"ignore-cross-compile\")) &&\n-        !ignore_gdb(config, ln) &&\n-        !ignore_lldb(config, ln)\n-    });\n-\n-    !val\n }\n \n fn iter_header(testfile: &Path,\n                cfg: Option<&str>,\n-               it: &mut FnMut(&str) -> bool)\n-               -> bool {\n+               it: &mut FnMut(&str)) {\n     let rdr = BufReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {\n         // Assume that any directives will be found before the first\n@@ -274,7 +292,7 @@ fn iter_header(testfile: &Path,\n         let ln = ln.unwrap();\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n-            return true;\n+            return;\n         } else if ln.starts_with(\"//[\") {\n             // A comment like `//[foo]` is specific to revision `foo`\n             if let Some(close_brace) = ln.find(\"]\") {\n@@ -283,20 +301,18 @@ fn iter_header(testfile: &Path,\n                     Some(s) => s == &lncfg[..],\n                     None => false,\n                 };\n-                if matches && !it(&ln[close_brace+1..]) {\n-                    return false;\n+                if matches {\n+                    it(&ln[close_brace+1..]);\n                 }\n             } else {\n                 panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\",\n                        ln)\n             }\n         } else if ln.starts_with(\"//\") {\n-            if !it(&ln[2..]) {\n-                return false;\n-            }\n+            it(&ln[2..]);\n         }\n     }\n-    return true;\n+    return;\n }\n \n fn parse_error_pattern(line: &str) -> Option<String> {"}, {"sha": "95b4e1a33cccd0c25705218e15bbdb6dbd6b5088", "filename": "src/test/compile-fail/meta-expected-error-correct-rev.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-correct-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-correct-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-correct-rev.rs?ref=0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: a\n+// pretty-expanded FIXME #23616\n+\n+// Counterpart to `meta-expected-error-wrong-rev.rs`\n+\n+#[cfg(a)]\n+fn foo() {\n+    let x: u32 = 22_usize; //[a]~ ERROR mismatched types\n+}\n+\n+fn main() { }"}, {"sha": "83e0702af62cf96d92a3e8763c26c9f6de16d8b9", "filename": "src/test/compile-fail/meta-expected-error-wrong-rev.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6b4e03862065d0b1296e93c9bdfed25e0f60a4/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs?ref=0d6b4e03862065d0b1296e93c9bdfed25e0f60a4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: a\n+// should-panic\n+// pretty-expanded FIXME #23616\n+\n+// This is a \"meta-test\" of the compilertest framework itself.  In\n+// particular, it includes the right error message, but the message\n+// targets the wrong revision, so we expect the execution to fail.\n+// See also `meta-expected-error-correct-rev.rs`.\n+\n+#[cfg(a)]\n+fn foo() {\n+    let x: u32 = 22_usize; //[b]~ ERROR mismatched types\n+}\n+\n+fn main() { }"}]}