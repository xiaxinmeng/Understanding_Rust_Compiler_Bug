{"sha": "41398047bcf720a673af8d7d927f0350e20a2202", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMzk4MDQ3YmNmNzIwYTY3M2FmOGQ3ZDkyN2YwMzUwZTIwYTIyMDI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-01T02:37:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-01T02:37:30Z"}, "message": "Merge pull request #2821 from topecongiro/issue-2721\n\nReturn the trimmed original snippet when formatting macro def failed", "tree": {"sha": "04ccdb1f812565ea1d7a8ad3b55ee9bdda8941d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ccdb1f812565ea1d7a8ad3b55ee9bdda8941d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41398047bcf720a673af8d7d927f0350e20a2202", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbOD5qCRBK7hj4Ov3rIwAAdHIIABcyYUIzjmOybiEZUQSyRfJo\nboLugrIQVtGvZH/iB8F2V75A9ZlIIsVXKNFLocTcd8YQUbXU5bRY52761FsTl4mY\nOIzNUEe80lLfECbIBxPOWXpT4cmYCka9KZAJ0ed4Wdu51JxmLod3AugurpgQU0wm\nJ+VJnGCKrUH2rXwbuHbbUlYPpQLvxNrugtrulwEdOYvfnEeJf7mG7RqUlOWVcMSB\n8k6HOJAZ/frigLjSGfWWk7wXHvVij0rIp+ss3PgGSd+KTPafQW/Bu34hjd9bIADe\nVcFKMJLL2RWE6QSsISGmMeMQSzcWhqPZFQ5G9AkAf+VBM+Yo8hvFnYzIMZZAndA=\n=Nzd+\n-----END PGP SIGNATURE-----\n", "payload": "tree 04ccdb1f812565ea1d7a8ad3b55ee9bdda8941d7\nparent 888abbb0ec5db10e5117de12077c9a4b2cd3c417\nparent 5a3640da699ac243d601683802899d897b364e60\nauthor Nick Cameron <nrc@ncameron.org> 1530412650 +1200\ncommitter GitHub <noreply@github.com> 1530412650 +1200\n\nMerge pull request #2821 from topecongiro/issue-2721\n\nReturn the trimmed original snippet when formatting macro def failed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41398047bcf720a673af8d7d927f0350e20a2202", "html_url": "https://github.com/rust-lang/rust/commit/41398047bcf720a673af8d7d927f0350e20a2202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41398047bcf720a673af8d7d927f0350e20a2202/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888abbb0ec5db10e5117de12077c9a4b2cd3c417", "url": "https://api.github.com/repos/rust-lang/rust/commits/888abbb0ec5db10e5117de12077c9a4b2cd3c417", "html_url": "https://github.com/rust-lang/rust/commit/888abbb0ec5db10e5117de12077c9a4b2cd3c417"}, {"sha": "5a3640da699ac243d601683802899d897b364e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3640da699ac243d601683802899d897b364e60", "html_url": "https://github.com/rust-lang/rust/commit/5a3640da699ac243d601683802899d897b364e60"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "8468dbf159144f8527053a2dfcab23836a4b6a10", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41398047bcf720a673af8d7d927f0350e20a2202/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41398047bcf720a673af8d7d927f0350e20a2202/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=41398047bcf720a673af8d7d927f0350e20a2202", "patch": "@@ -411,7 +411,10 @@ pub fn rewrite_macro_def(\n         result += &arm_shape.indent.to_string_with_newline(context.config);\n     }\n \n-    result += write_list(&branch_items, &fmt)?.as_str();\n+    match write_list(&branch_items, &fmt) {\n+        Some(ref s) => result += s,\n+        None => return snippet,\n+    }\n \n     if multi_branch_style {\n         result += &indent.to_string_with_newline(context.config);"}, {"sha": "b6ff049430dfd6b18bd3d01ee637b4a5b261518f", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/41398047bcf720a673af8d7d927f0350e20a2202/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41398047bcf720a673af8d7d927f0350e20a2202/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=41398047bcf720a673af8d7d927f0350e20a2202", "patch": "@@ -230,3 +230,35 @@ macro_rules! save_regs {\n              :::: \"intel\", \"volatile\");\n     };\n }\n+\n+// #2721\n+macro_rules! impl_as_byte_slice_arrays {\n+    ($n:expr,) => {};\n+    ($n:expr, $N:ident, $($NN:ident,)*) => {\n+        impl_as_byte_slice_arrays!($n - 1, $($NN,)*);\n+        \n+        impl<T> AsByteSliceMut for [T; $n] where [T]: AsByteSliceMut {\n+            fn as_byte_slice_mut(&mut self) -> &mut [u8] {\n+                self[..].as_byte_slice_mut()\n+            }\n+\n+            fn to_le(&mut self) {\n+                self[..].to_le()\n+            }\n+        }\n+    };\n+    (!div $n:expr,) => {};\n+    (!div $n:expr, $N:ident, $($NN:ident,)*) => {\n+        impl_as_byte_slice_arrays!(!div $n / 2, $($NN,)*);\n+\n+        impl<T> AsByteSliceMut for [T; $n] where [T]: AsByteSliceMut {\n+            fn as_byte_slice_mut(&mut self) -> &mut [u8] {\n+                self[..].as_byte_slice_mut()\n+            }\n+            \n+            fn to_le(&mut self) {\n+                self[..].to_le()\n+            }\n+        }\n+    };\n+}"}, {"sha": "41bc1420476739aeef535a1a363a85ea24768263", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/41398047bcf720a673af8d7d927f0350e20a2202/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41398047bcf720a673af8d7d927f0350e20a2202/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=41398047bcf720a673af8d7d927f0350e20a2202", "patch": "@@ -271,3 +271,35 @@ macro_rules! save_regs {\n              :::: \"intel\", \"volatile\");\n     };\n }\n+\n+// #2721\n+macro_rules! impl_as_byte_slice_arrays {\n+    ($n:expr,) => {};\n+    ($n:expr, $N:ident, $($NN:ident,)*) => {\n+        impl_as_byte_slice_arrays!($n - 1, $($NN,)*);\n+\n+        impl<T> AsByteSliceMut for [T; $n] where [T]: AsByteSliceMut {\n+            fn as_byte_slice_mut(&mut self) -> &mut [u8] {\n+                self[..].as_byte_slice_mut()\n+            }\n+\n+            fn to_le(&mut self) {\n+                self[..].to_le()\n+            }\n+        }\n+    };\n+    (!div $n:expr,) => {};\n+    (!div $n:expr, $N:ident, $($NN:ident,)*) => {\n+        impl_as_byte_slice_arrays!(!div $n / 2, $($NN,)*);\n+\n+        impl<T> AsByteSliceMut for [T; $n] where [T]: AsByteSliceMut {\n+            fn as_byte_slice_mut(&mut self) -> &mut [u8] {\n+                self[..].as_byte_slice_mut()\n+            }\n+\n+            fn to_le(&mut self) {\n+                self[..].to_le()\n+            }\n+        }\n+    };\n+}"}]}