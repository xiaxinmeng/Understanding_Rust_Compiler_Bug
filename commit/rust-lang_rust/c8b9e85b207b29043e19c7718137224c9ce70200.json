{"sha": "c8b9e85b207b29043e19c7718137224c9ce70200", "node_id": "C_kwDOAAsO6NoAKGM4YjllODViMjA3YjI5MDQzZTE5Yzc3MTgxMzcyMjRjOWNlNzAyMDA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-24T02:03:04Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:00Z"}, "message": "span: move `MultiSpan`\n\n`MultiSpan` contains labels, which are more complicated with the\nintroduction of diagnostic translation and will use types from\n`rustc_errors` - however, `rustc_errors` depends on `rustc_span` so\n`rustc_span` cannot use types like `DiagnosticMessage` without\ndependency cycles. Introduce a new `rustc_error_messages` crate that can\ncontain `DiagnosticMessage` and `MultiSpan`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "366e77238a36f9ebd70199e4bd921744811ddc65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366e77238a36f9ebd70199e4bd921744811ddc65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b9e85b207b29043e19c7718137224c9ce70200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9e85b207b29043e19c7718137224c9ce70200", "html_url": "https://github.com/rust-lang/rust/commit/c8b9e85b207b29043e19c7718137224c9ce70200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9e85b207b29043e19c7718137224c9ce70200/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5b250fa15780dd80e025c3e7991609d996badc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5b250fa15780dd80e025c3e7991609d996badc", "html_url": "https://github.com/rust-lang/rust/commit/bb5b250fa15780dd80e025c3e7991609d996badc"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "acb3c917d6243119cf91cf0c6b8f72e3abc76b37", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=c8b9e85b207b29043e19c7718137224c9ce70200", "patch": "@@ -3,11 +3,12 @@ use clippy_utils::higher::IfLetOrMatch;\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{is_lang_ctor, is_unit_expr, path_to_local, peel_blocks_with_stmt, peel_ref_operators, SpanlessEq};\n use if_chain::if_chain;\n+use rustc_errors::MultiSpan;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, Expr, Guard, HirId, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "d67c03714e3891b7a51ec8a60b4b051930e384df", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=c8b9e85b207b29043e19c7718137224c9ce70200", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Applicability, Handler, SuggestionStyle};\n+use rustc_errors::{Applicability, Handler, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n@@ -25,7 +25,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n+use rustc_span::source_map::{BytePos, FilePathMapping, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n use std::ops::Range;"}, {"sha": "c7772e483adbd43880371a2b04b22c30f737cf43", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=c8b9e85b207b29043e19c7718137224c9ce70200", "patch": "@@ -6,15 +6,15 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{can_move_expr_to_closure, is_trait_method, path_to_local, path_to_local_id, CaptureKind};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n "}, {"sha": "5f453dc16555874f783fd6de9d8d54e462b8edb3", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=c8b9e85b207b29043e19c7718137224c9ce70200", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::{get_expr_use_or_unification_node, is_lint_allowed, path_def_id, path_to_local, paths};\n use if_chain::if_chain;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n@@ -19,8 +19,8 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{sym, MultiSpan};\n use std::fmt;\n use std::iter;\n "}, {"sha": "b142397f71b9c101b6dde6564dbbe93d512624d6", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9e85b207b29043e19c7718137224c9ce70200/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=c8b9e85b207b29043e19c7718137224c9ce70200", "patch": "@@ -8,10 +8,10 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic};\n+use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic, MultiSpan};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n-use rustc_span::source_map::{MultiSpan, Span};\n+use rustc_span::source_map::Span;\n use std::env;\n \n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n@@ -155,7 +155,13 @@ where\n     });\n }\n \n-pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n+pub fn span_lint_hir(\n+    cx: &LateContext<'_>,\n+    lint: &'static Lint,\n+    hir_id: HirId,\n+    sp: Span,\n+    msg: &str,\n+) {\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n         let mut diag = diag.build(msg);\n         docs_link(&mut diag, lint);\n@@ -272,9 +278,14 @@ pub fn span_lint_and_sugg_for_edges(\n         let sugg_lines_count = sugg.lines().count();\n         if sugg_lines_count > MAX_SUGGESTION_HIGHLIGHT_LINES {\n             let sm = cx.sess().source_map();\n-            if let (Ok(line_upper), Ok(line_bottom)) = (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi())) {\n+            if let (Ok(line_upper), Ok(line_bottom)) =\n+                (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi()))\n+            {\n                 let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n-                let span_upper = sm.span_until_char(sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]), '\\n');\n+                let span_upper = sm.span_until_char(\n+                    sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]),\n+                    '\\n',\n+                );\n                 let span_bottom = sp.with_lo(line_bottom.sf.lines[line_bottom.line - split_idx]);\n \n                 let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();"}]}