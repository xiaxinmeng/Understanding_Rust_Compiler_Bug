{"sha": "ff4024eebd86c471a9f07f1c90288facb35a3a5a", "node_id": "C_kwDOAAsO6NoAKGZmNDAyNGVlYmQ4NmM0NzFhOWYwN2YxYzkwMjg4ZmFjYjM1YTNhNWE", "commit": {"author": {"name": "bellau", "email": "laurent.belmonte@gmail.com", "date": "2022-02-14T20:06:13Z"}, "committer": {"name": "bellau", "email": "laurent.belmonte@gmail.com", "date": "2022-02-15T09:21:14Z"}, "message": "Impr mbe: remove unecessary temporary vec", "tree": {"sha": "9a7bbae7a4b9905f4256794cf424a34ef1ea1942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7bbae7a4b9905f4256794cf424a34ef1ea1942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4024eebd86c471a9f07f1c90288facb35a3a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4024eebd86c471a9f07f1c90288facb35a3a5a", "html_url": "https://github.com/rust-lang/rust/commit/ff4024eebd86c471a9f07f1c90288facb35a3a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4024eebd86c471a9f07f1c90288facb35a3a5a/comments", "author": {"login": "bellau", "id": 475393, "node_id": "MDQ6VXNlcjQ3NTM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/475393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellau", "html_url": "https://github.com/bellau", "followers_url": "https://api.github.com/users/bellau/followers", "following_url": "https://api.github.com/users/bellau/following{/other_user}", "gists_url": "https://api.github.com/users/bellau/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellau/subscriptions", "organizations_url": "https://api.github.com/users/bellau/orgs", "repos_url": "https://api.github.com/users/bellau/repos", "events_url": "https://api.github.com/users/bellau/events{/privacy}", "received_events_url": "https://api.github.com/users/bellau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bellau", "id": 475393, "node_id": "MDQ6VXNlcjQ3NTM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/475393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellau", "html_url": "https://github.com/bellau", "followers_url": "https://api.github.com/users/bellau/followers", "following_url": "https://api.github.com/users/bellau/following{/other_user}", "gists_url": "https://api.github.com/users/bellau/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellau/subscriptions", "organizations_url": "https://api.github.com/users/bellau/orgs", "repos_url": "https://api.github.com/users/bellau/repos", "events_url": "https://api.github.com/users/bellau/events{/privacy}", "received_events_url": "https://api.github.com/users/bellau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "html_url": "https://github.com/rust-lang/rust/commit/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b4c6d3bf6187b79ee1f77e471ff4474865bef89a", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff4024eebd86c471a9f07f1c90288facb35a3a5a/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4024eebd86c471a9f07f1c90288facb35a3a5a/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=ff4024eebd86c471a9f07f1c90288facb35a3a5a", "patch": "@@ -437,11 +437,12 @@ fn match_loop_inner<'t>(\n                     let mut new_item = item.clone();\n                     new_item.bindings = bindings_builder.copy(&new_item.bindings);\n                     new_item.dot.next();\n-                    let mut vars = Vec::new();\n-                    collect_vars(&mut vars, tokens);\n-                    for var in vars {\n-                        bindings_builder.push_empty(&mut new_item.bindings, &var);\n-                    }\n+                    collect_vars(\n+                        &mut |s| {\n+                            bindings_builder.push_empty(&mut new_item.bindings, &s);\n+                        },\n+                        tokens,\n+                    );\n                     cur_items.push(new_item);\n                 }\n                 cur_items.push(MatchState {\n@@ -729,17 +730,16 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n     input.expect_fragment(fragment).map(|it| it.map(Fragment::Tokens))\n }\n \n-fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &MetaTemplate) {\n+fn collect_vars(collector_fun: &mut impl FnMut(SmolStr), pattern: &MetaTemplate) {\n     for op in pattern.iter() {\n         match op {\n-            Op::Var { name, .. } => buf.push(name.clone()),\n+            Op::Var { name, .. } => collector_fun(name.clone()),\n             Op::Leaf(_) => (),\n-            Op::Subtree { tokens, .. } => collect_vars(buf, tokens),\n-            Op::Repeat { tokens, .. } => collect_vars(buf, tokens),\n+            Op::Subtree { tokens, .. } => collect_vars(collector_fun, tokens),\n+            Op::Repeat { tokens, .. } => collect_vars(collector_fun, tokens),\n         }\n     }\n }\n-\n impl MetaTemplate {\n     fn iter_delimited<'a>(&'a self, delimited: Option<&'a tt::Delimiter>) -> OpDelimitedIter<'a> {\n         OpDelimitedIter { inner: &self.0, idx: 0, delimited }"}]}