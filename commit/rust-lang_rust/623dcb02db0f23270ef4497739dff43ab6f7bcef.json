{"sha": "623dcb02db0f23270ef4497739dff43ab6f7bcef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyM2RjYjAyZGIwZjIzMjcwZWY0NDk3NzM5ZGZmNDNhYjZmN2JjZWY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T12:41:37Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T12:41:37Z"}, "message": "Remove the `Forest` type", "tree": {"sha": "89e620dcf9c181c66c907f4be40fe4a134a58de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e620dcf9c181c66c907f4be40fe4a134a58de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623dcb02db0f23270ef4497739dff43ab6f7bcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623dcb02db0f23270ef4497739dff43ab6f7bcef", "html_url": "https://github.com/rust-lang/rust/commit/623dcb02db0f23270ef4497739dff43ab6f7bcef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623dcb02db0f23270ef4497739dff43ab6f7bcef/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ce2f6038913058f548f56e1ff1fad29d4df07f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ce2f6038913058f548f56e1ff1fad29d4df07f", "html_url": "https://github.com/rust-lang/rust/commit/20ce2f6038913058f548f56e1ff1fad29d4df07f"}], "stats": {"total": 129, "additions": 51, "deletions": 78}, "files": [{"sha": "dd242686d26f202aa82c7cf7027b09f73e1d946f", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -127,7 +127,7 @@ macro_rules! arena_types {\n             [] tys: rustc::ty::TyS<$tcx>,\n \n             // HIR types\n-            [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n+            [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n             [] attribute: syntax::ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,"}, {"sha": "c721faafbecaf408ea04765882477834001be719", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(hir_map: &Map<'_>) {\n \n     let errors = Lock::new(Vec::new());\n \n-    par_iter(&hir_map.forest.krate.modules).for_each(|(module_id, _)| {\n+    par_iter(&hir_map.krate.modules).for_each(|(module_id, _)| {\n         let local_def_id = hir_map.local_def_id(*module_id);\n         hir_map.visit_item_likes_in_module(\n             local_def_id,"}, {"sha": "7e0e85ea5866fa3a5bd9c7f82262c541ab3ed8c6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 58, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -129,25 +129,6 @@ impl<'hir> Entry<'hir> {\n     }\n }\n \n-/// Stores a crate and any number of inlined items from other crates.\n-pub struct Forest<'hir> {\n-    krate: Crate<'hir>,\n-    pub dep_graph: DepGraph,\n-}\n-\n-impl Forest<'hir> {\n-    pub fn new(krate: Crate<'hir>, dep_graph: &DepGraph) -> Forest<'hir> {\n-        Forest { krate, dep_graph: dep_graph.clone() }\n-    }\n-\n-    /// This is used internally in the dependency tracking system.\n-    /// Use the `krate` method to ensure your dependency on the\n-    /// crate is tracked.\n-    pub fn untracked_krate(&self) -> &Crate<'hir> {\n-        &self.krate\n-    }\n-}\n-\n /// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n /// but it is implemented as 2 layers of arrays.\n /// - first we have `A = IndexVec<DefIndex, B>` mapping `DefIndex`s to an inner value\n@@ -157,11 +138,8 @@ pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Opt\n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n pub struct Map<'hir> {\n-    /// The backing storage for all the AST nodes.\n-    pub forest: &'hir Forest<'hir>,\n+    pub krate: &'hir Crate<'hir>,\n \n-    /// Same as the dep_graph in forest, just available with one fewer\n-    /// deref. This is a gratuitous micro-optimization.\n     pub dep_graph: DepGraph,\n \n     /// The SVH of the local crate.\n@@ -212,6 +190,13 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n }\n \n impl<'hir> Map<'hir> {\n+    /// This is used internally in the dependency tracking system.\n+    /// Use the `krate` method to ensure your dependency on the\n+    /// crate is tracked.\n+    pub fn untracked_krate(&self) -> &Crate<'hir> {\n+        &self.krate\n+    }\n+\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n         let local_map = self.map.get(id.owner)?;\n@@ -399,33 +384,33 @@ impl<'hir> Map<'hir> {\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         self.read(id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.item(id)\n+        self.krate.item(id)\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_item(id)\n+        self.krate.trait_item(id)\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.impl_item(id)\n+        self.krate.impl_item(id)\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.read(id.hir_id);\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.body(id)\n+        self.krate.body(id)\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -521,9 +506,9 @@ impl<'hir> Map<'hir> {\n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n \n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // N.B., intentionally bypass `self.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to\n@@ -533,15 +518,15 @@ impl<'hir> Map<'hir> {\n         let def_path_hash = self.definitions.def_path_hash(CRATE_DEF_INDEX);\n \n         self.dep_graph.read(def_path_hash.to_dep_node(DepKind::Hir));\n-        &self.forest.krate.attrs\n+        &self.krate.attrs\n     }\n \n     pub fn get_module(&self, module: DefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n             Node::Item(&Item { span, kind: ItemKind::Mod(ref m), .. }) => (m, span, hir_id),\n-            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n+            Node::Crate => (&self.krate.module, self.krate.span, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -558,7 +543,7 @@ impl<'hir> Map<'hir> {\n         // in the expect_* calls the loops below\n         self.read(hir_id);\n \n-        let module = &self.forest.krate.modules[&hir_id];\n+        let module = &self.krate.modules[&hir_id];\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));\n@@ -975,7 +960,7 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n-            Some(Node::Crate) => Some(&self.forest.krate.attrs[..]),\n+            Some(Node::Crate) => Some(&self.krate.attrs[..]),\n             _ => None,\n         };\n         attrs.unwrap_or(&[])\n@@ -1054,7 +1039,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Visibility(v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(Node::Local(local)) => local.span,\n             Some(Node::MacroDef(macro_def)) => macro_def.span,\n-            Some(Node::Crate) => self.forest.krate.span,\n+            Some(Node::Crate) => self.krate.span,\n             None => bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id),\n         }\n     }\n@@ -1222,7 +1207,8 @@ impl Named for ImplItem<'_> {\n pub fn map_crate<'hir>(\n     sess: &rustc_session::Session,\n     cstore: &CrateStoreDyn,\n-    forest: &'hir Forest<'hir>,\n+    krate: &'hir Crate<'hir>,\n+    dep_graph: DepGraph,\n     definitions: Definitions,\n ) -> Map<'hir> {\n     let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");\n@@ -1235,31 +1221,18 @@ pub fn map_crate<'hir>(\n         .collect();\n \n     let (map, crate_hash) = {\n-        let hcx = crate::ich::StableHashingContext::new(sess, &forest.krate, &definitions, cstore);\n-\n-        let mut collector = NodeCollector::root(\n-            sess,\n-            &forest.krate,\n-            &forest.dep_graph,\n-            &definitions,\n-            &hir_to_node_id,\n-            hcx,\n-        );\n-        intravisit::walk_crate(&mut collector, &forest.krate);\n+        let hcx = crate::ich::StableHashingContext::new(sess, krate, &definitions, cstore);\n+\n+        let mut collector =\n+            NodeCollector::root(sess, krate, &dep_graph, &definitions, &hir_to_node_id, hcx);\n+        intravisit::walk_crate(&mut collector, krate);\n \n         let crate_disambiguator = sess.local_crate_disambiguator();\n         let cmdline_args = sess.opts.dep_tracking_hash();\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, cstore, cmdline_args)\n     };\n \n-    let map = Map {\n-        forest,\n-        dep_graph: forest.dep_graph.clone(),\n-        crate_hash,\n-        map,\n-        hir_to_node_id,\n-        definitions,\n-    };\n+    let map = Map { krate, dep_graph, crate_hash, map, hir_to_node_id, definitions };\n \n     sess.time(\"validate_HIR_map\", || {\n         hir_id_validator::check_crate(&map);"}, {"sha": "2e7e8fdd724916614e618c59b7cf8711f1414cda", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -49,6 +49,6 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    providers.hir_crate = |tcx, _| tcx.hir_map.forest.untracked_krate();\n+    providers.hir_crate = |tcx, _| tcx.hir_map.untracked_krate();\n     map::provide(providers);\n }"}, {"sha": "8979292c86d407148ee0d4be3ddc6342147e19e5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -1323,7 +1323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline(always)]\n     pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n-        let krate = self.gcx.hir_map.forest.untracked_krate();\n+        let krate = self.gcx.hir_map.untracked_krate();\n \n         StableHashingContext::new(self.sess, krate, self.hir().definitions(), &*self.cstore)\n     }"}, {"sha": "6224c4654d695df818e05ad25ec31082bc3e9e62", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -25,6 +25,7 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_errors::PResult;\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_mir as mir;\n use rustc_mir_build as mir_build;\n@@ -422,7 +423,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n     dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n     arena: &'tcx Arena<'tcx>,\n-) -> Result<map::Forest<'tcx>> {\n+) -> Crate<'tcx> {\n     // Lower AST to HIR.\n     let hir_crate = rustc_ast_lowering::lower_crate(\n         sess,\n@@ -437,8 +438,6 @@ pub fn lower_to_hir<'res, 'tcx>(\n         hir_stats::print_hir_stats(&hir_crate);\n     }\n \n-    let hir_forest = map::Forest::new(hir_crate, &dep_graph);\n-\n     sess.time(\"early_lint_checks\", || {\n         rustc_lint::check_ast_crate(\n             sess,\n@@ -455,7 +454,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n         rustc_span::hygiene::clear_syntax_context_map();\n     }\n \n-    Ok(hir_forest)\n+    hir_crate\n }\n \n // Returns all the paths that correspond to generated files.\n@@ -705,7 +704,8 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    hir_forest: &'tcx map::Forest<'tcx>,\n+    krate: &'tcx Crate<'tcx>,\n+    dep_graph: DepGraph,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n@@ -716,7 +716,7 @@ pub fn create_global_ctxt<'tcx>(\n     let defs = mem::take(&mut resolver_outputs.definitions);\n \n     // Construct the HIR map.\n-    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs);\n+    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, krate, dep_graph, defs);\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}, {"sha": "720d162ac819e439e3ece957dd6df9031faf527c", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -3,7 +3,6 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::map;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::session::Session;\n use rustc::ty::steal::Steal;\n@@ -12,6 +11,7 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use std::any::Any;\n@@ -74,7 +74,7 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -207,24 +207,22 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn lower_to_hir(\n-        &'tcx self,\n-    ) -> Result<&Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>> {\n+    pub fn lower_to_hir(&'tcx self) -> Result<&Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n             let krate = &peeked.0;\n             let resolver = peeked.1.steal();\n             let lint_store = &peeked.2;\n             let hir = resolver.borrow_mut().access(|resolver| {\n-                passes::lower_to_hir(\n+                Ok(passes::lower_to_hir(\n                     self.session(),\n                     lint_store,\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate,\n                     &self.arena,\n-                )\n+                ))\n             })?;\n             let hir = self.arena.alloc(hir);\n             Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n@@ -253,12 +251,14 @@ impl<'tcx> Queries<'tcx> {\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?.peek();\n-            let (ref hir_forest, ref resolver_outputs) = &*hir;\n+            let dep_graph = self.dep_graph()?.peek().clone();\n+            let (ref krate, ref resolver_outputs) = &*hir;\n             let _timer = self.session().timer(\"create_global_ctxt\");\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n-                hir_forest,\n+                krate,\n+                dep_graph,\n                 resolver_outputs.steal(),\n                 outputs,\n                 &crate_name,"}, {"sha": "d3e53e188127639000fb7ad8758c11043852216c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623dcb02db0f23270ef4497739dff43ab6f7bcef/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=623dcb02db0f23270ef4497739dff43ab6f7bcef", "patch": "@@ -87,7 +87,7 @@ pub fn run(options: Options) -> i32 {\n         compiler.enter(|queries| {\n             let lower_to_hir = queries.lower_to_hir()?;\n \n-            let mut opts = scrape_test_config(lower_to_hir.peek().0.untracked_krate());\n+            let mut opts = scrape_test_config(lower_to_hir.peek().0);\n             opts.display_warnings |= options.display_warnings;\n             let enable_per_target_ignores = options.enable_per_target_ignores;\n             let mut collector = Collector::new("}]}