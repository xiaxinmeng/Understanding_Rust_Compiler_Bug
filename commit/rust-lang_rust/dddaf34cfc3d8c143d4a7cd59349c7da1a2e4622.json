{"sha": "dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGFmMzRjZmMzZDhjMTQzZDRhN2NkNTkzNDljN2RhMWEyZTQ2MjI=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-25T22:07:57Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-25T23:38:43Z"}, "message": "Move `a_is_expected` out of `CombineFields`", "tree": {"sha": "84b9c48d74073b5a28f02871867f9f6cbb573fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b9c48d74073b5a28f02871867f9f6cbb573fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "html_url": "https://github.com/rust-lang/rust/commit/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e390322c3ca016469eca9b5dc8ce761a9786a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e390322c3ca016469eca9b5dc8ce761a9786a0b", "html_url": "https://github.com/rust-lang/rust/commit/5e390322c3ca016469eca9b5dc8ce761a9786a0b"}], "stats": {"total": 168, "additions": 86, "deletions": 82}, "files": [{"sha": "d790391cd4c4081a30c9f61f203fde0fcf4229ad", "filename": "src/librustc/infer/bivariate.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fbivariate.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -33,12 +33,13 @@ use ty::TyVar;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n \n pub struct Bivariate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+    a_is_expected: bool,\n }\n \n impl<'infcx, 'gcx, 'tcx> Bivariate<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Bivariate<'infcx, 'gcx, 'tcx> {\n-        Bivariate { fields: fields }\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Bivariate<'infcx, 'gcx, 'tcx> {\n+        Bivariate { fields: fields, a_is_expected: a_is_expected }\n     }\n }\n \n@@ -47,7 +48,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Bivariate<'infcx,\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n-    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n+    fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              variance: ty::Variance,\n@@ -86,12 +87,12 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Bivariate<'infcx,\n             }\n \n             (&ty::TyInfer(TyVar(a_id)), _) => {\n-                self.fields.instantiate(b, BiTo, a_id)?;\n+                self.fields.instantiate(b, BiTo, a_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n \n             (_, &ty::TyInfer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, BiTo, b_id)?;\n+                self.fields.instantiate(a, BiTo, b_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n "}, {"sha": "41369299e726fb0cac87e9ca9553927f952e9711", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -54,7 +54,6 @@ use syntax_pos::Span;\n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n     pub infcx: &'infcx InferCtxt<'infcx, 'gcx, 'tcx>,\n-    pub a_is_expected: bool,\n     pub trace: TypeTrace<'tcx>,\n     pub cause: Option<ty::relate::Cause>,\n     pub obligations: PredicateObligations<'tcx>,\n@@ -155,37 +154,31 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn switch_expected(&self) -> CombineFields<'infcx, 'gcx, 'tcx> {\n-        CombineFields {\n-            a_is_expected: !self.a_is_expected,\n-            ..(*self).clone()\n-        }\n-    }\n-\n-    pub fn equate(&self) -> Equate<'infcx, 'gcx, 'tcx> {\n-        Equate::new(self.clone())\n+    pub fn equate(&self, a_is_expected: bool) -> Equate<'infcx, 'gcx, 'tcx> {\n+        Equate::new(self.clone(), a_is_expected)\n     }\n \n-    pub fn bivariate(&self) -> Bivariate<'infcx, 'gcx, 'tcx> {\n-        Bivariate::new(self.clone())\n+    pub fn bivariate(&self, a_is_expected: bool) -> Bivariate<'infcx, 'gcx, 'tcx> {\n+        Bivariate::new(self.clone(), a_is_expected)\n     }\n \n-    pub fn sub(&self) -> Sub<'infcx, 'gcx, 'tcx> {\n-        Sub::new(self.clone())\n+    pub fn sub(&self, a_is_expected: bool) -> Sub<'infcx, 'gcx, 'tcx> {\n+        Sub::new(self.clone(), a_is_expected)\n     }\n \n-    pub fn lub(&self) -> Lub<'infcx, 'gcx, 'tcx> {\n-        Lub::new(self.clone())\n+    pub fn lub(&self, a_is_expected: bool) -> Lub<'infcx, 'gcx, 'tcx> {\n+        Lub::new(self.clone(), a_is_expected)\n     }\n \n-    pub fn glb(&self) -> Glb<'infcx, 'gcx, 'tcx> {\n-        Glb::new(self.clone())\n+    pub fn glb(&self, a_is_expected: bool) -> Glb<'infcx, 'gcx, 'tcx> {\n+        Glb::new(self.clone(), a_is_expected)\n     }\n \n     pub fn instantiate(&self,\n                        a_ty: Ty<'tcx>,\n                        dir: RelationDir,\n-                       b_vid: ty::TyVid)\n+                       b_vid: ty::TyVid,\n+                       a_is_expected: bool)\n                        -> RelateResult<'tcx, ()>\n     {\n         let mut stack = Vec::new();\n@@ -255,10 +248,10 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n             // to associate causes/spans with each of the relations in\n             // the stack to get this right.\n             match dir {\n-                BiTo => self.bivariate().relate(&a_ty, &b_ty),\n-                EqTo => self.equate().relate(&a_ty, &b_ty),\n-                SubtypeOf => self.sub().relate(&a_ty, &b_ty),\n-                SupertypeOf => self.sub().relate_with_variance(ty::Contravariant, &a_ty, &b_ty),\n+                BiTo => self.bivariate(a_is_expected).relate(&a_ty, &b_ty),\n+                EqTo => self.equate(a_is_expected).relate(&a_ty, &b_ty),\n+                SubtypeOf => self.sub(a_is_expected).relate(&a_ty, &b_ty),\n+                SupertypeOf => self.sub(a_is_expected).relate_with_variance(ty::Contravariant, &a_ty, &b_ty),\n             }?;\n         }\n "}, {"sha": "7980ba91c5e010a600aee0eff9fabbc413fb7dee", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -19,12 +19,13 @@ use traits::PredicateObligations;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+    a_is_expected: bool,\n }\n \n impl<'infcx, 'gcx, 'tcx> Equate<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Equate<'infcx, 'gcx, 'tcx> {\n-        Equate { fields: fields }\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Equate<'infcx, 'gcx, 'tcx> {\n+        Equate { fields: fields, a_is_expected: a_is_expected }\n     }\n \n     pub fn obligations(self) -> PredicateObligations<'tcx> {\n@@ -37,7 +38,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'infcx, 'gc\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n-    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n+    fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              _: ty::Variance,\n@@ -63,12 +64,12 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'infcx, 'gc\n             }\n \n             (&ty::TyInfer(TyVar(a_id)), _) => {\n-                self.fields.instantiate(b, EqTo, a_id)?;\n+                self.fields.instantiate(b, EqTo, a_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n \n             (_, &ty::TyInfer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, EqTo, b_id)?;\n+                self.fields.instantiate(a, EqTo, b_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n \n@@ -93,7 +94,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'infcx, 'gc\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_sub(a, b)?;\n-        self.fields.higher_ranked_sub(b, a)\n+        self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;\n+        self.fields.higher_ranked_sub(b, a, self.a_is_expected)\n     }\n }"}, {"sha": "7893846b21457511fcdd49d98d7612718f8f9532", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -19,12 +19,13 @@ use traits::PredicateObligations;\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Glb<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+    a_is_expected: bool,\n }\n \n impl<'infcx, 'gcx, 'tcx> Glb<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Glb<'infcx, 'gcx, 'tcx> {\n-        Glb { fields: fields }\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Glb<'infcx, 'gcx, 'tcx> {\n+        Glb { fields: fields, a_is_expected: a_is_expected }\n     }\n \n     pub fn obligations(self) -> PredicateObligations<'tcx> {\n@@ -37,7 +38,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx,\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n-    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n+    fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              variance: ty::Variance,\n@@ -46,10 +47,10 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx,\n                                              -> RelateResult<'tcx, T>\n     {\n         match variance {\n-            ty::Invariant => self.fields.equate().relate(a, b),\n+            ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate().relate(a, b),\n-            ty::Contravariant => self.fields.lub().relate(a, b),\n+            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Contravariant => self.fields.lub(self.a_is_expected).relate(a, b),\n         }\n     }\n \n@@ -71,7 +72,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx,\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_glb(a, b)\n+        self.fields.higher_ranked_glb(a, b, self.a_is_expected)\n     }\n }\n \n@@ -81,7 +82,7 @@ impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx, 't\n     }\n \n     fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n-        let mut sub = self.fields.sub();\n+        let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(&v, &a)?;\n         sub.relate(&v, &b)?;\n         Ok(())"}, {"sha": "386c1ba272f3c564c8982ea470b1f525cc629098", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -40,7 +40,7 @@ pub struct HrMatchResult<U> {\n }\n \n impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n-    pub fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>)\n+    pub fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {\n@@ -77,11 +77,11 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             debug!(\"b_prime={:?}\", b_prime);\n \n             // Compare types now that bound regions have been replaced.\n-            let result = self.sub().relate(&a_prime, &b_prime)?;\n+            let result = self.sub(a_is_expected).relate(&a_prime, &b_prime)?;\n \n             // Presuming type comparison succeeds, we need to check\n             // that the skolemized regions do not \"leak\".\n-            self.infcx.leak_check(!self.a_is_expected, span, &skol_map, snapshot)?;\n+            self.infcx.leak_check(!a_is_expected, span, &skol_map, snapshot)?;\n \n             // We are finished with the skolemized regions now so pop\n             // them off.\n@@ -109,7 +109,8 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n     pub fn higher_ranked_match<T, U>(&self,\n                                      span: Span,\n                                      a_pair: &Binder<(T, U)>,\n-                                     b_match: &T)\n+                                     b_match: &T,\n+                                     a_is_expected: bool)\n                                      -> RelateResult<'tcx, HrMatchResult<U>>\n         where T: Relate<'tcx>,\n               U: TypeFoldable<'tcx>\n@@ -129,7 +130,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             debug!(\"higher_ranked_match: skol_map={:?}\", skol_map);\n \n             // Equate types now that bound regions have been replaced.\n-            try!(self.equate().relate(&a_match, &b_match));\n+            try!(self.equate(a_is_expected).relate(&a_match, &b_match));\n \n             // Map each skolemized region to a vector of other regions that it\n             // must be equated with. (Note that this vector may include other\n@@ -221,7 +222,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    pub fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>)\n+    pub fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {\n@@ -239,7 +240,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n             // Collect constraints.\n             let result0 =\n-                self.lub().relate(&a_with_fresh, &b_with_fresh)?;\n+                self.lub(a_is_expected).relate(&a_with_fresh, &b_with_fresh)?;\n             let result0 =\n                 self.infcx.resolve_type_vars_if_possible(&result0);\n             debug!(\"lub result0 = {:?}\", result0);\n@@ -311,7 +312,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>)\n+    pub fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {\n@@ -333,7 +334,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n             // Collect constraints.\n             let result0 =\n-                self.glb().relate(&a_with_fresh, &b_with_fresh)?;\n+                self.glb(a_is_expected).relate(&a_with_fresh, &b_with_fresh)?;\n             let result0 =\n                 self.infcx.resolve_type_vars_if_possible(&result0);\n             debug!(\"glb result0 = {:?}\", result0);"}, {"sha": "6f3bd004f1fbd3cf58d0f095d33d2d0f7c57d0c7", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -19,12 +19,13 @@ use traits::PredicateObligations;\n \n /// \"Least upper bound\" (common supertype)\n pub struct Lub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+    a_is_expected: bool,\n }\n \n impl<'infcx, 'gcx, 'tcx> Lub<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Lub<'infcx, 'gcx, 'tcx> {\n-        Lub { fields: fields }\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Lub<'infcx, 'gcx, 'tcx> {\n+        Lub { fields: fields, a_is_expected: a_is_expected }\n     }\n \n     pub fn obligations(self) -> PredicateObligations<'tcx> {\n@@ -37,7 +38,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx,\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n-    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n+    fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              variance: ty::Variance,\n@@ -46,10 +47,10 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx,\n                                              -> RelateResult<'tcx, T>\n     {\n         match variance {\n-            ty::Invariant => self.fields.equate().relate(a, b),\n+            ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate().relate(a, b),\n-            ty::Contravariant => self.fields.glb().relate(a, b),\n+            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Contravariant => self.fields.glb(self.a_is_expected).relate(a, b),\n         }\n     }\n \n@@ -71,7 +72,7 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx,\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_lub(a, b)\n+        self.fields.higher_ranked_lub(a, b, self.a_is_expected)\n     }\n }\n \n@@ -81,7 +82,7 @@ impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx, 't\n     }\n \n     fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n-        let mut sub = self.fields.sub();\n+        let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(&a, &v)?;\n         sub.relate(&b, &v)?;\n         Ok(())"}, {"sha": "9ee0da4d0edd6b1049c1811d20d96f65aa3fbb8c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -799,11 +799,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         return variables;\n     }\n \n-    fn combine_fields(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)\n+    fn combine_fields(&'a self, trace: TypeTrace<'tcx>)\n                       -> CombineFields<'a, 'gcx, 'tcx> {\n         CombineFields {\n             infcx: self,\n-            a_is_expected: a_is_expected,\n             trace: trace,\n             cause: None,\n             obligations: PredicateObligations::new(),\n@@ -814,7 +813,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut equate = self.combine_fields(a_is_expected, trace).equate();\n+        let mut equate = self.combine_fields(trace).equate(a_is_expected);\n         let result = equate.relate(a, b);\n         result.map(|t| InferOk { value: t, obligations: equate.obligations() })\n     }\n@@ -823,7 +822,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut sub = self.combine_fields(a_is_expected, trace).sub();\n+        let mut sub = self.combine_fields(trace).sub(a_is_expected);\n         let result = sub.relate(a, b);\n         result.map(|t| InferOk { value: t, obligations: sub.obligations() })\n     }\n@@ -832,7 +831,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut lub = self.combine_fields(a_is_expected, trace).lub();\n+        let mut lub = self.combine_fields(trace).lub(a_is_expected);\n         let result = lub.relate(a, b);\n         result.map(|t| InferOk { value: t, obligations: lub.obligations() })\n     }\n@@ -841,7 +840,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut glb = self.combine_fields(a_is_expected, trace).glb();\n+        let mut glb = self.combine_fields(trace).glb(a_is_expected);\n         let result = glb.relate(a, b);\n         result.map(|t| InferOk { value: t, obligations: glb.obligations() })\n     }\n@@ -1646,8 +1645,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         let match_pair = match_a.map_bound(|p| (p.projection_ty.trait_ref, p.ty));\n-        let combine = self.combine_fields(true, trace);\n-        let result = combine.higher_ranked_match(span, &match_pair, &match_b)?;\n+        let combine = self.combine_fields(trace);\n+        let result = combine.higher_ranked_match(span, &match_pair, &match_b, true)?;\n         Ok(InferOk { value: result, obligations: combine.obligations })\n     }\n "}, {"sha": "7a25ea9f3c2be9e2a2690a494674a0dfe9f56064", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "patch": "@@ -21,22 +21,30 @@ use std::mem;\n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n pub struct Sub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n     fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+    a_is_expected: bool,\n }\n \n impl<'infcx, 'gcx, 'tcx> Sub<'infcx, 'gcx, 'tcx> {\n-    pub fn new(f: CombineFields<'infcx, 'gcx, 'tcx>) -> Sub<'infcx, 'gcx, 'tcx> {\n-        Sub { fields: f }\n+    pub fn new(f: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Sub<'infcx, 'gcx, 'tcx> {\n+        Sub { fields: f, a_is_expected: a_is_expected }\n     }\n \n     pub fn obligations(self) -> PredicateObligations<'tcx> {\n         self.fields.obligations\n     }\n+\n+    fn with_expected_switched<R, F: FnOnce(&mut Self) -> R>(&mut self, f: F) -> R {\n+        self.a_is_expected = !self.a_is_expected;\n+        let result = f(self);\n+        self.a_is_expected = !self.a_is_expected;\n+        result\n+    }\n }\n \n impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Sub\" }\n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.infcx.tcx }\n-    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n+    fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R\n         where F: FnOnce(&mut Self) -> R\n@@ -56,10 +64,10 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx,\n                                              -> RelateResult<'tcx, T>\n     {\n         match variance {\n-            ty::Invariant => self.fields.equate().relate(a, b),\n+            ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => self.fields.bivariate().relate(a, b),\n-            ty::Contravariant => self.fields.switch_expected().sub().relate(b, a),\n+            ty::Bivariant => self.fields.bivariate(self.a_is_expected).relate(a, b),\n+            ty::Contravariant => self.with_expected_switched(|this| { this.relate(b, a) }),\n         }\n     }\n \n@@ -80,12 +88,11 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx,\n             }\n             (&ty::TyInfer(TyVar(a_id)), _) => {\n                 self.fields\n-                    .switch_expected()\n-                    .instantiate(b, SupertypeOf, a_id)?;\n+                    .instantiate(b, SupertypeOf, a_id, !self.a_is_expected)?;\n                 Ok(a)\n             }\n             (_, &ty::TyInfer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, SubtypeOf, b_id)?;\n+                self.fields.instantiate(a, SubtypeOf, b_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n \n@@ -116,6 +123,6 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx,\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_sub(a, b)\n+        self.fields.higher_ranked_sub(a, b, self.a_is_expected)\n     }\n }"}]}