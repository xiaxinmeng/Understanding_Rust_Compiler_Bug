{"sha": "63114f3cace7d3866103975faef7bcb4c1e1f517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTE0ZjNjYWNlN2QzODY2MTAzOTc1ZmFlZjdiY2I0YzFlMWY1MTc=", "commit": {"author": {"name": "Andy Librian", "email": "andylibrian@gmail.com", "date": "2017-03-05T18:50:04Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-03-05T18:50:04Z"}, "message": "added unit tests for Indent and Shape (#1353)", "tree": {"sha": "10bb851c8dbfadba254999167be1fca8c1e9d5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10bb851c8dbfadba254999167be1fca8c1e9d5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63114f3cace7d3866103975faef7bcb4c1e1f517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63114f3cace7d3866103975faef7bcb4c1e1f517", "html_url": "https://github.com/rust-lang/rust/commit/63114f3cace7d3866103975faef7bcb4c1e1f517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63114f3cace7d3866103975faef7bcb4c1e1f517/comments", "author": {"login": "andylibrian", "id": 1214976, "node_id": "MDQ6VXNlcjEyMTQ5NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1214976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andylibrian", "html_url": "https://github.com/andylibrian", "followers_url": "https://api.github.com/users/andylibrian/followers", "following_url": "https://api.github.com/users/andylibrian/following{/other_user}", "gists_url": "https://api.github.com/users/andylibrian/gists{/gist_id}", "starred_url": "https://api.github.com/users/andylibrian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andylibrian/subscriptions", "organizations_url": "https://api.github.com/users/andylibrian/orgs", "repos_url": "https://api.github.com/users/andylibrian/repos", "events_url": "https://api.github.com/users/andylibrian/events{/privacy}", "received_events_url": "https://api.github.com/users/andylibrian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ac3487595eb56339d57de33aa326ac9e762f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ac3487595eb56339d57de33aa326ac9e762f9c", "html_url": "https://github.com/rust-lang/rust/commit/c9ac3487595eb56339d57de33aa326ac9e762f9c"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "4c4c56bb2f3788d3bb606d3bee673fff0366d6d8", "filename": "src/lib.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/63114f3cace7d3866103975faef7bcb4c1e1f517/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63114f3cace7d3866103975faef7bcb4c1e1f517/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=63114f3cace7d3866103975faef7bcb4c1e1f517", "patch": "@@ -655,3 +655,88 @@ pub fn run(input: Input, config: &Config) -> Summary {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn indent_add_sub() {\n+        let indent = Indent::new(4, 8) + Indent::new(8, 12);\n+        assert_eq!(12, indent.block_indent);\n+        assert_eq!(20, indent.alignment);\n+\n+        let indent = indent - Indent::new(4, 4);\n+        assert_eq!(8, indent.block_indent);\n+        assert_eq!(16, indent.alignment);\n+    }\n+\n+    #[test]\n+    fn indent_add_sub_alignment() {\n+        let indent = Indent::new(4, 8) + 4;\n+        assert_eq!(4, indent.block_indent);\n+        assert_eq!(12, indent.alignment);\n+\n+        let indent = indent - 4;\n+        assert_eq!(4, indent.block_indent);\n+        assert_eq!(8, indent.alignment);\n+    }\n+\n+    #[test]\n+    fn indent_to_string_spaces() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+\n+        // 12 spaces\n+        assert_eq!(\"            \", indent.to_string(&config));\n+    }\n+\n+    #[test]\n+    fn indent_to_string_hard_tabs() {\n+        let mut config = Config::default();\n+        config.hard_tabs = true;\n+        let indent = Indent::new(8, 4);\n+\n+        // 2 tabs + 4 spaces\n+        assert_eq!(\"\\t\\t    \", indent.to_string(&config));\n+    }\n+\n+    #[test]\n+    fn shape_visual_indent() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+        let shape = Shape::indented(indent, &config);\n+        let shape = shape.visual_indent(20);\n+\n+        assert_eq!(config.max_width, shape.width);\n+        assert_eq!(4, shape.indent.block_indent);\n+        assert_eq!(32, shape.indent.alignment);\n+        assert_eq!(32, shape.offset);\n+    }\n+\n+    #[test]\n+    fn shape_block_indent_without_alignment() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 0);\n+        let shape = Shape::indented(indent, &config);\n+        let shape = shape.block_indent(20);\n+\n+        assert_eq!(config.max_width, shape.width);\n+        assert_eq!(24, shape.indent.block_indent);\n+        assert_eq!(0, shape.indent.alignment);\n+        assert_eq!(0, shape.offset);\n+    }\n+\n+    #[test]\n+    fn shape_block_indent_with_alignment() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+        let shape = Shape::indented(indent, &config);\n+        let shape = shape.block_indent(20);\n+\n+        assert_eq!(config.max_width, shape.width);\n+        assert_eq!(4, shape.indent.block_indent);\n+        assert_eq!(28, shape.indent.alignment);\n+        assert_eq!(28, shape.offset);\n+    }\n+}"}]}